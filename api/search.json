[{"id":"92717c7f759688088ed63139a71ebf5f","title":"《ZERO：天元》","content":"简介《计算与人工智能概论》期末大作业项目项目名《ZERO：天元》类型：游戏\n\n米呼游詹姆斯·克拉克·麦克斯韦方程组工作室出品\n\n故事背景：弗兰大学研究生唐可可一日从寝室醒来，发现睡过头了，但全楼一片死寂。这时，一个电话打来……\n唐可可是弗兰大学一名研究生，专攻生物信息学，目前在导师的实验室负责人工智能与模式识别，当然，因为导师的课题属于涉密项目，参与者很少，所以从图形图像处理到自然语言处理都是他一个人在干，他常常戏称自己是弗兰大学病毒学课题组里计算机学得最好的。导师的项目与学校的超算中心有合作，这样他也可以进入层层设防的中心内部，一睹当时最先进的超级计算机“天河”的风采，当然，还有机会接近基于强大算力的顶尖人工智能——“天元（ZERO）”。\n\n弗兰大学：星沙市综合性大学，从考古学到生物学无所不包，还有全国最强超算中心，和那台著名的“天河”。当然，更让人感兴趣的是名为“天元”的人工智能，有风声道，“天元”在图灵测试中表现“相当优异”。在击败著名人工智能AlphaGO之后，“天元”宣判了深度学习的死刑，将众人的目光由卷积神经网络炼丹转向生命科学与人工智能交叉领域。21世纪，生命科学的时代到来了。\n考古系将最新发现的奥陶纪化石转交给了超算中心，希望基因测序可以解析其中发现的病毒“奥陶琵斯”。当然，这是对外发布的说法。也有人说，在超算中心的地下有着迷宫般复杂而庞大的生物实验室，而“始祖病毒”奥陶琵斯，正是这座地下基地最深层的秘密。后来，这个人因散播谣言被拘留十日处理。\n“‘始祖’是一种非常罕见的病毒，令人难以置信，仿佛天工造物，精妙绝伦，在细胞分裂的逆向工程中有着超越已知科学的效果，宛若神迹。或许这是上帝给人类的恩赐。”                                       ——美国著名生物学家威斯克在《Nature》上如此称赞道。据说，每一项对于“奥陶琵斯”的研究都能轻易在《N》&amp;《S》上发表，所以一时国内外生化环材学者均涌向弗兰大学，希望得到化石样本。不过很快，对于化石的研究被列入绝密项目，而样本也被移送到同样颇负盛名的超算中心。\n游戏玩法：操纵人物在地图移动，探索看似平静的校园之下隐藏的秘密。\n\n功能实现：unity游戏引擎，python，AE,PR，Ubuntu核心玩法：文字解密，走剧情探索辅助玩法：pygame作为主角在地下世界闯关时的解密，以游戏的形式代替枯燥的密码解谜。项目地址：Algernon98/pygame-in-HNU: python project in HuNan University (github.com)图像处理：图片素材使用python代码对其像素化，作为地图素材，已被封装好可以直接调用程序。人脸识别：openCV作为人脸识别资源库，代码在linux环境下可以调用摄像头对人脸识别，可以嵌入游戏中，作为“天元”boss房的 进入验证，可以增加沉浸感。\n\n解密功能：采用MINST数据集，依照故事背景，黑客出身的主角可以破解地下基地的系统门禁。我们在IRIS鸢尾花数据集、波士顿房价数据集等知名机器学习数据集中选择手写数字识别，以其深度学习“Hello World”的称号，呼应“天元”这一哲学与棋道双重含义。\n\n详情可见博客：【Python机器学习基础教程】（三）_仿生程序员会梦见电子羊吗的博客-CSDN博客\n代码using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class playercontroller : MonoBehaviour\n&#123;\n\n    public Rigidbody2D rb;\n    public float speed ;\n    public float jumpforce;\n    public Animator anim;\n    public LayerMask ground;\n    public Collider2D coll;\n\n    &#x2F;&#x2F; Start is called before the first frame update\n    void Start()\n    &#123;\n        \n    &#125;\n\n    &#x2F;&#x2F; Update is called once per frame\n    void Update()\n    &#123;\n        Movement();\n        SwitchAnim();\n    &#125;\n\n    void Movement()\n    &#123;\n        float horizontalmove;\n        horizontalmove&#x3D;Input.GetAxis(&quot;Horizontal&quot;);\n        float facedirction&#x3D;Input.GetAxisRaw(&quot;Horizontal&quot;);\n        if (horizontalmove !&#x3D;0)\n        &#123;\n            rb.velocity &#x3D; new Vector2(horizontalmove*speed,rb.velocity.y);\n            anim.SetFloat(&quot;running&quot;,Mathf.Abs(facedirction));\n        &#125;\n        if (facedirction !&#x3D;0)\n        &#123;\n            transform.localScale&#x3D;new Vector3(facedirction,1,1);\n        &#125;\n\n        if(Input.GetButtonDown(&quot;Jump&quot;))\n        &#123;\n            rb.velocity&#x3D;new Vector2(rb.velocity.x,jumpforce);\n            anim.SetBool(&quot;jumping&quot;,true);\n        &#125;\n\n    &#125;\n\n    void SwitchAnim()\n    &#123;\n        anim.SetBool(&quot;idle&quot;,false);\n        if(anim.GetBool(&quot;jumping&quot;))\n        &#123;\n            if(rb.velocity.y&lt;0)\n            &#123;\n                anim.SetBool(&quot;jumping&quot;,false);\n                anim.SetBool(&quot;falling&quot;,true);\n            &#125;\n        &#125;else if(coll.IsTouchingLayers(ground))\n        &#123;\n            anim.SetBool(&quot;falling&quot;,false);\n            anim.SetBool(&quot;idle&quot;,true);\n        &#125;\n    &#125;\n&#125;\n剧情PV\n\n\n\n\n\n\n\n\nhttps://www.bilibili.com/video/BV1jB4y1X7za/?spm_id_from=333.999.0.0&amp;vd_source=11bfc591eb1189ab7412b09ee29e1dcd湖南大学大作业《ZERO：天元》剧情PV\n实机演示\n\n\n\n\n\n\n\n\nhttps://www.bilibili.com/video/BV1uv4y1w7Vr/?spm_id_from=333.999.0.0&amp;vd_source=11bfc591eb1189ab7412b09ee29e1dcd湖南大学期末大作业《ZERO：天元》demo实机演示\n","slug":"zero","date":"2022-11-04T00:44:49.000Z","categories_index":"游戏设计","tags_index":"unity","author_index":"Algernon"},{"id":"b4fa4c81f60d756df0aa330b2d8a9254","title":"【novelai】colab存档","content":"本笔记由此改写而成: \nhttps://colab.research.google.com/drive/1kw3egmSn-KgWsikYvOMjJkVDsPLjEMzlhttps://colab.research.google.com/drive/1AfAmwLMd_Vx33O9IwY2TmO9wKZ8ABRRa\n感谢大佬们的贡献最终成果如下：\n\n\n\n\n\n\n\n\n\nhttps://blog.csdn.net/Algernon98/article/details/127332323?spm=1001.2014.3001.5501\n\n#@title 杀掉colab进程，会使页面报错，但是不用担心，继续运行即可，请勿跳过\nimport os\nos.kill(os.getpid(), 9)\n#@title 加载Google云端硬盘\nfrom google.colab import drive\nimport os\ndrive.mount(&#39;&#x2F;content&#x2F;drive&#39;)\n\n#%cd &#x2F;content&#x2F;drive&#x2F;MyDrive&#x2F;ML2021&#x2F;\n#!ls\nDrive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(&quot;/content/drive&quot;, force_remount=True).\n1. 克隆git仓库!git clone https:&#x2F;&#x2F;github.com&#x2F;AUTOMATIC1111&#x2F;stable-diffusion-webui.git\n%cd stable-diffusion-webui\n\nfatal: destination path &#39;stable-diffusion-webui&#39; already exists and is not an empty directory.\n/content/stable-diffusion-webui\n2. 安装依赖!COMMANDLINE_ARGS&#x3D;&quot;--exit&quot; REQS_FILE&#x3D;&quot;requirements.txt&quot; python launch.py\nPython 3.7.14 (default, Sep  8 2022, 00:06:44) \n[GCC 7.5.0]\nCommit hash: acedbe67d2b8a3af99ca3b9a2f809e7a2db285d1\nInstalling requirements for Web UI\nExiting because of --exit argument\n3. 下载full模型，以下两种方式二选一建议用云盘复制版，自己上传full模型。若使用Gdown下载，人数太多之后文件容易被BAN使用云盘复制版时，请严格按照以下步骤将模型文件上传到谷歌云盘：\n1.进入谷歌云盘 https://drive.google.com/drive/my-drive 找到云盘根目录\n2.在根目录下创建文件夹，并命名为：stableckpt\n3.从泄露模型的磁链中下载需要的文件，如下图所示，下载animefull-final-pruned文件夹，modules文件夹，以及animevae.pt这个文件，下载好后，请保持原样，不要改动文件夹内部的路径格式，否则在复制时会因为路径报错\n4.将第三部步下载好的所有文件，全部上传到第二步中创建好的stableckpt文件夹内，等待成功上传即可。\n（P.S. 成功上传后，文件将长期储存在谷歌云盘中，再次使用时，就可以省略该步）\n下面两种方式，请二选一，只执行一种%cd &#x2F;content&#x2F;drive&#x2F;MyDrive&#x2F;ML2021&#x2F;animefull-final-pruned&#x2F;model.ckpt\n[Errno 20] Not a directory: &#39;/content/drive/MyDrive/ML2021/animefull-final-pruned/model.ckpt&#39;\n/content/stable-diffusion-webui\n#@title 云盘复制版(推荐使用，需先进行文件上传)\n\n!cp &#x2F;content&#x2F;drive&#x2F;MyDrive&#x2F;ML2021&#x2F;animefull-final-pruned&#x2F;model.ckpt &#x2F;content&#x2F;stable-diffusion-webui&#x2F;models&#x2F;Stable-diffusion&#x2F;final-pruned.ckpt\n!cp &#x2F;content&#x2F;drive&#x2F;MyDrive&#x2F;ML2021&#x2F;animevae.pt &#x2F;content&#x2F;stable-diffusion-webui&#x2F;models&#x2F;Stable-diffusion&#x2F;final-pruned.vae.pt\n!mkdir &#x2F;content&#x2F;stable-diffusion-webui&#x2F;models&#x2F;hypernetworks\n!cp -r &#x2F;content&#x2F;drive&#x2F;MyDrive&#x2F;ML2021&#x2F;modules&#x2F;modules&#x2F;* &#x2F;content&#x2F;stable-diffusion-webui&#x2F;models&#x2F;hypernetworks\n!rm &#x2F;content&#x2F;stable-diffusion-webui&#x2F;repositories&#x2F;stable-diffusion&#x2F;configs&#x2F;stable-diffusion&#x2F;v1-inference.yaml\n!cp &#x2F;content&#x2F;drive&#x2F;MyDrive&#x2F;ML2021&#x2F;animefull-final-pruned&#x2F;config.yaml &#x2F;content&#x2F;stable-diffusion-webui&#x2F;repositories&#x2F;stable-diffusion&#x2F;configs&#x2F;stable-diffusion&#x2F;v1-inference.yaml\n\nmkdir: cannot create directory ‘/content/stable-diffusion-webui/models/hypernetworks’: File exists\n#@title Gdown下载版(使用人数过多，会导致文件被冻，不建议使用）\n!gdown --id &#39;1kJ2lCJ56_R342dQVzHfcvKdyq9HXIxQe&#39; --output &#x2F;content&#x2F;stable-diffusion-webui&#x2F;models&#x2F;Stable-diffusion&#x2F;final-pruned.ckpt\n!gdown --id &#39;1cZoN_PTmdOidDeVlj_B8kG99TvQZ2I0O&#39; --output &#x2F;content&#x2F;stable-diffusion-webui&#x2F;models&#x2F;Stable-diffusion&#x2F;final-pruned.vae.pt\n!mkdir &#x2F;content&#x2F;temps\n!gdown --id &#39;1V7gSylOF9W_03CPap70etPUYKBmtkVi2&#39; --output &#x2F;content&#x2F;temps&#x2F;modules.zip\n!unzip &#x2F;content&#x2F;temps&#x2F;modules.zip -d &#x2F;content&#x2F;temps\n!mkdir &#x2F;content&#x2F;stable-diffusion-webui&#x2F;models&#x2F;hypernetworks\n!cp -r &#x2F;content&#x2F;temps&#x2F;modules&#x2F;* &#x2F;content&#x2F;stable-diffusion-webui&#x2F;models&#x2F;hypernetworks\n#config\n!rm &#x2F;content&#x2F;stable-diffusion-webui&#x2F;repositories&#x2F;stable-diffusion&#x2F;configs&#x2F;stable-diffusion&#x2F;v1-inference.yaml\n!gdown --id &#39;1C1swqS024tgXK_JWr40d4_F3LYVW7W4F&#39; --output &#x2F;content&#x2F;stable-diffusion-webui&#x2F;repositories&#x2F;stable-diffusion&#x2F;configs&#x2F;stable-diffusion&#x2F;v1-inference.yaml\n\n/usr/local/lib/python3.7/dist-packages/gdown/cli.py:131: FutureWarning: Option `--id` was deprecated in version 4.3.1 and will be removed in 5.0. You don&#39;t need to pass it anymore to use a file ID.\n  category=FutureWarning,\nAccess denied with the following error:\n\n     Too many users have viewed or downloaded this file recently. Please\n    try accessing the file again later. If the file you are trying to\n    access is particularly large or is shared with many people, it may\n    take up to 24 hours to be able to view or download the file. If you\n    still can&#39;t access a file after 24 hours, contact your domain\n    administrator. \n\nYou may still be able to access the file from the browser:\n\n     https://drive.google.com/uc?id=1kJ2lCJ56_R342dQVzHfcvKdyq9HXIxQe \n\n/usr/local/lib/python3.7/dist-packages/gdown/cli.py:131: FutureWarning: Option `--id` was deprecated in version 4.3.1 and will be removed in 5.0. You don&#39;t need to pass it anymore to use a file ID.\n  category=FutureWarning,\nAccess denied with the following error:\n\n     Too many users have viewed or downloaded this file recently. Please\n    try accessing the file again later. If the file you are trying to\n    access is particularly large or is shared with many people, it may\n    take up to 24 hours to be able to view or download the file. If you\n    still can&#39;t access a file after 24 hours, contact your domain\n    administrator. \n\nYou may still be able to access the file from the browser:\n\n     https://drive.google.com/uc?id=1cZoN_PTmdOidDeVlj_B8kG99TvQZ2I0O \n\n/usr/local/lib/python3.7/dist-packages/gdown/cli.py:131: FutureWarning: Option `--id` was deprecated in version 4.3.1 and will be removed in 5.0. You don&#39;t need to pass it anymore to use a file ID.\n  category=FutureWarning,\nAccess denied with the following error:\n\n     Too many users have viewed or downloaded this file recently. Please\n    try accessing the file again later. If the file you are trying to\n    access is particularly large or is shared with many people, it may\n    take up to 24 hours to be able to view or download the file. If you\n    still can&#39;t access a file after 24 hours, contact your domain\n    administrator. \n\nYou may still be able to access the file from the browser:\n\n     https://drive.google.com/uc?id=1V7gSylOF9W_03CPap70etPUYKBmtkVi2 \n\nunzip:  cannot find or open /content/temps/modules.zip, /content/temps/modules.zip.zip or /content/temps/modules.zip.ZIP.\nmkdir: cannot create directory ‘/content/stable-diffusion-webui/models/hypernetworks’: File exists\ncp: cannot stat &#39;/content/temps/modules/*&#39;: No such file or directory\nrm: cannot remove &#39;/content/stable-diffusion-webui/repositories/stable-diffusion/configs/stable-diffusion/v1-inference.yaml&#39;: No such file or directory\n/usr/local/lib/python3.7/dist-packages/gdown/cli.py:131: FutureWarning: Option `--id` was deprecated in version 4.3.1 and will be removed in 5.0. You don&#39;t need to pass it anymore to use a file ID.\n  category=FutureWarning,\nDownloading...\nFrom: https://drive.google.com/uc?id=1C1swqS024tgXK_JWr40d4_F3LYVW7W4F\nTo: /content/stable-diffusion-webui/repositories/stable-diffusion/configs/stable-diffusion/v1-inference.yaml\n100% 1.87k/1.87k [00:00&lt;00:00, 3.65MB/s]\n4. 部署模型到gradio使用web ui. 你将会得到一个类似 xxx.gradio.app，点击它就可以进入部署好的页面.\n命令行参数如下:\n\n--share - 创建一个在线的 gradio.app 链接\n--gradio-debug - 打印输出到控制台\n--gradio-auth me:qwerty - 创建用户，默认 username 为 me, password 为 qwerty，可以自行修改，用作登陆\n\n10月13日追记：为了避免别人爬取你的线上部署来使用，强烈建议修改用户名与密码，请将me和qwerty替换成其他的。\n!COMMANDLINE_ARGS&#x3D;&quot;--share --gradio-debug --gradio-auth algernon:code&quot; REQS_FILE&#x3D;&quot;requirements.txt&quot; python launch.py\nPython 3.7.14 (default, Sep  8 2022, 00:06:44) \n[GCC 7.5.0]\nCommit hash: acedbe67d2b8a3af99ca3b9a2f809e7a2db285d1\nInstalling requirements for Web UI\nLaunching Web UI with arguments: --share --gradio-debug --gradio-auth algernon:yhyfgcyydt98\nLatentDiffusion: Running in eps-prediction mode\nDiffusionWrapper has 859.52 M params.\nmaking attention of type &#39;vanilla&#39; with 512 in_channels\nWorking with z of shape (1, 4, 64, 64) = 16384 dimensions.\nmaking attention of type &#39;vanilla&#39; with 512 in_channels\nDownloading: 100% 939k/939k [00:01&lt;00:00, 703kB/s] \nDownloading: 100% 512k/512k [00:00&lt;00:00, 575kB/s]\nDownloading: 100% 389/389 [00:00&lt;00:00, 323kB/s]\nDownloading: 100% 905/905 [00:00&lt;00:00, 713kB/s]\nDownloading: 100% 4.41k/4.41k [00:00&lt;00:00, 3.34MB/s]\nDownloading: 100% 1.59G/1.59G [00:24&lt;00:00, 68.5MB/s]\nLoading weights [925997e9] from /content/stable-diffusion-webui/models/Stable-diffusion/final-pruned.ckpt\nLoading VAE weights from: /content/stable-diffusion-webui/models/Stable-diffusion/final-pruned.vae.pt\nApplying cross attention optimization (Doggettx).\nModel loaded.\nLoaded a total of 0 textual inversion embeddings.\nRunning on local URL:  http://127.0.0.1:7860\nRunning on public URL: https://25278.gradio.app\n\nThis share link expires in 72 hours. For free permanent hosting, check out Spaces: https://huggingface.co/spaces\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:04,  3.42it/s]\n 19% 3/16 [00:00&lt;00:02,  4.56it/s]\n 25% 4/16 [00:00&lt;00:02,  4.75it/s]\n 31% 5/16 [00:01&lt;00:02,  4.87it/s]\n 38% 6/16 [00:01&lt;00:02,  4.92it/s]\n 44% 7/16 [00:01&lt;00:01,  4.95it/s]\n 50% 8/16 [00:01&lt;00:01,  4.97it/s]\n 56% 9/16 [00:01&lt;00:01,  5.00it/s]\n 62% 10/16 [00:02&lt;00:01,  5.04it/s]\n 69% 11/16 [00:02&lt;00:00,  5.04it/s]\n 75% 12/16 [00:02&lt;00:00,  5.04it/s]\n 81% 13/16 [00:02&lt;00:00,  5.05it/s]\n 88% 14/16 [00:02&lt;00:00,  5.05it/s]\n 94% 15/16 [00:03&lt;00:00,  5.05it/s]\n100% 16/16 [00:03&lt;00:00,  4.90it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.93it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:03,  4.79it/s]\n 19% 3/16 [00:00&lt;00:02,  4.99it/s]\n 25% 4/16 [00:00&lt;00:02,  5.01it/s]\n 31% 5/16 [00:01&lt;00:02,  5.03it/s]\n 38% 6/16 [00:01&lt;00:01,  5.00it/s]\n 44% 7/16 [00:01&lt;00:01,  5.02it/s]\n 50% 8/16 [00:01&lt;00:01,  5.04it/s]\n 56% 9/16 [00:01&lt;00:01,  5.04it/s]\n 62% 10/16 [00:01&lt;00:01,  5.04it/s]\n 69% 11/16 [00:02&lt;00:00,  5.02it/s]\n 75% 12/16 [00:02&lt;00:00,  5.02it/s]\n 81% 13/16 [00:02&lt;00:00,  5.03it/s]\n 88% 14/16 [00:02&lt;00:00,  5.04it/s]\n 94% 15/16 [00:02&lt;00:00,  5.04it/s]\n100% 16/16 [00:03&lt;00:00,  5.02it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.89it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:03,  4.33it/s]\n 19% 3/16 [00:00&lt;00:02,  4.88it/s]\n 25% 4/16 [00:00&lt;00:02,  4.95it/s]\n 31% 5/16 [00:01&lt;00:02,  4.98it/s]\n 38% 6/16 [00:01&lt;00:02,  4.97it/s]\n 44% 7/16 [00:01&lt;00:01,  5.00it/s]\n 50% 8/16 [00:01&lt;00:01,  5.02it/s]\n 56% 9/16 [00:01&lt;00:01,  5.03it/s]\n 62% 10/16 [00:02&lt;00:01,  5.03it/s]\n 69% 11/16 [00:02&lt;00:00,  5.01it/s]\n 75% 12/16 [00:02&lt;00:00,  5.01it/s]\n 81% 13/16 [00:02&lt;00:00,  5.02it/s]\n 88% 14/16 [00:02&lt;00:00,  5.03it/s]\n 94% 15/16 [00:03&lt;00:00,  5.04it/s]\n100% 16/16 [00:03&lt;00:00,  4.98it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.85it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:03,  4.69it/s]\n 19% 3/16 [00:00&lt;00:02,  4.98it/s]\n 25% 4/16 [00:00&lt;00:02,  5.02it/s]\n 31% 5/16 [00:01&lt;00:02,  5.04it/s]\n 38% 6/16 [00:01&lt;00:01,  5.01it/s]\n 44% 7/16 [00:01&lt;00:01,  5.01it/s]\n 50% 8/16 [00:01&lt;00:01,  5.02it/s]\n 56% 9/16 [00:01&lt;00:01,  5.04it/s]\n 62% 10/16 [00:01&lt;00:01,  5.03it/s]\n 69% 11/16 [00:02&lt;00:00,  5.01it/s]\n 75% 12/16 [00:02&lt;00:00,  5.02it/s]\n 81% 13/16 [00:02&lt;00:00,  5.03it/s]\n 88% 14/16 [00:02&lt;00:00,  5.03it/s]\n 94% 15/16 [00:02&lt;00:00,  5.02it/s]\n100% 16/16 [00:03&lt;00:00,  5.00it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.90it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:02,  5.05it/s]\n 19% 3/16 [00:00&lt;00:02,  5.08it/s]\n 25% 4/16 [00:00&lt;00:02,  5.07it/s]\n 31% 5/16 [00:00&lt;00:02,  4.99it/s]\n 38% 6/16 [00:01&lt;00:02,  5.00it/s]\n 44% 7/16 [00:01&lt;00:01,  5.00it/s]\n 50% 8/16 [00:01&lt;00:01,  5.00it/s]\n 56% 9/16 [00:01&lt;00:01,  5.00it/s]\n 62% 10/16 [00:01&lt;00:01,  4.97it/s]\n 69% 11/16 [00:02&lt;00:01,  4.97it/s]\n 75% 12/16 [00:02&lt;00:00,  4.97it/s]\n 81% 13/16 [00:02&lt;00:00,  4.99it/s]\n 88% 14/16 [00:02&lt;00:00,  5.01it/s]\n 94% 15/16 [00:02&lt;00:00,  5.00it/s]\n100% 16/16 [00:03&lt;00:00,  5.00it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.88it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:03,  4.32it/s]\n 19% 3/16 [00:00&lt;00:02,  4.88it/s]\n 25% 4/16 [00:00&lt;00:02,  4.95it/s]\n 31% 5/16 [00:01&lt;00:02,  4.98it/s]\n 38% 6/16 [00:01&lt;00:02,  4.95it/s]\n 44% 7/16 [00:01&lt;00:01,  4.97it/s]\n 50% 8/16 [00:01&lt;00:01,  5.01it/s]\n 56% 9/16 [00:01&lt;00:01,  5.02it/s]\n 62% 10/16 [00:02&lt;00:01,  5.02it/s]\n 69% 11/16 [00:02&lt;00:01,  4.99it/s]\n 75% 12/16 [00:02&lt;00:00,  4.99it/s]\n 81% 13/16 [00:02&lt;00:00,  5.01it/s]\n 88% 14/16 [00:02&lt;00:00,  5.01it/s]\n 94% 15/16 [00:03&lt;00:00,  5.02it/s]\n100% 16/16 [00:03&lt;00:00,  4.97it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.89it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:03,  4.97it/s]\n 19% 3/16 [00:00&lt;00:02,  5.03it/s]\n 25% 4/16 [00:00&lt;00:02,  5.04it/s]\n 31% 5/16 [00:01&lt;00:02,  4.96it/s]\n 38% 6/16 [00:01&lt;00:02,  4.98it/s]\n 44% 7/16 [00:01&lt;00:01,  5.00it/s]\n 50% 8/16 [00:01&lt;00:01,  5.03it/s]\n 56% 9/16 [00:01&lt;00:01,  5.02it/s]\n 62% 10/16 [00:02&lt;00:01,  4.98it/s]\n 69% 11/16 [00:02&lt;00:01,  4.95it/s]\n 75% 12/16 [00:02&lt;00:00,  4.97it/s]\n 81% 13/16 [00:02&lt;00:00,  4.98it/s]\n 88% 14/16 [00:02&lt;00:00,  5.00it/s]\n 94% 15/16 [00:03&lt;00:00,  4.98it/s]\n100% 16/16 [00:03&lt;00:00,  4.99it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.86it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:03,  4.56it/s]\n 19% 3/16 [00:00&lt;00:02,  4.94it/s]\n 25% 4/16 [00:00&lt;00:02,  4.98it/s]\n 31% 5/16 [00:01&lt;00:02,  5.01it/s]\n 38% 6/16 [00:01&lt;00:02,  4.98it/s]\n 44% 7/16 [00:01&lt;00:01,  5.00it/s]\n 50% 8/16 [00:01&lt;00:01,  5.01it/s]\n 56% 9/16 [00:01&lt;00:01,  5.03it/s]\n 62% 10/16 [00:02&lt;00:01,  5.02it/s]\n 69% 11/16 [00:02&lt;00:01,  4.99it/s]\n 75% 12/16 [00:02&lt;00:00,  5.00it/s]\n 81% 13/16 [00:02&lt;00:00,  5.00it/s]\n 88% 14/16 [00:02&lt;00:00,  5.03it/s]\n 94% 15/16 [00:03&lt;00:00,  5.02it/s]\n100% 16/16 [00:03&lt;00:00,  4.99it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.88it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:03,  4.90it/s]\n 19% 3/16 [00:00&lt;00:02,  5.02it/s]\n 25% 4/16 [00:00&lt;00:02,  5.02it/s]\n 31% 5/16 [00:01&lt;00:02,  4.97it/s]\n 38% 6/16 [00:01&lt;00:02,  4.95it/s]\n 44% 7/16 [00:01&lt;00:01,  4.97it/s]\n 50% 8/16 [00:01&lt;00:01,  5.00it/s]\n 56% 9/16 [00:01&lt;00:01,  5.03it/s]\n 62% 10/16 [00:02&lt;00:01,  4.99it/s]\n 69% 11/16 [00:02&lt;00:01,  4.97it/s]\n 75% 12/16 [00:02&lt;00:00,  4.95it/s]\n 81% 13/16 [00:02&lt;00:00,  4.97it/s]\n 88% 14/16 [00:02&lt;00:00,  4.97it/s]\n 94% 15/16 [00:03&lt;00:00,  4.96it/s]\n100% 16/16 [00:03&lt;00:00,  4.98it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.87it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:03,  4.78it/s]\n 19% 3/16 [00:00&lt;00:02,  4.98it/s]\n 25% 4/16 [00:00&lt;00:02,  5.02it/s]\n 31% 5/16 [00:01&lt;00:02,  4.99it/s]\n 38% 6/16 [00:01&lt;00:02,  4.97it/s]\n 44% 7/16 [00:01&lt;00:01,  5.02it/s]\n 50% 8/16 [00:01&lt;00:01,  5.02it/s]\n 56% 9/16 [00:01&lt;00:01,  5.03it/s]\n 62% 10/16 [00:01&lt;00:01,  5.02it/s]\n 69% 11/16 [00:02&lt;00:00,  5.00it/s]\n 75% 12/16 [00:02&lt;00:00,  5.01it/s]\n 81% 13/16 [00:02&lt;00:00,  5.02it/s]\n 88% 14/16 [00:02&lt;00:00,  5.01it/s]\n 94% 15/16 [00:03&lt;00:00,  4.99it/s]\n100% 16/16 [00:03&lt;00:00,  4.99it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.80it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:03,  4.36it/s]\n 19% 3/16 [00:00&lt;00:02,  4.88it/s]\n 25% 4/16 [00:00&lt;00:02,  4.94it/s]\n 31% 5/16 [00:01&lt;00:02,  4.94it/s]\n 38% 6/16 [00:01&lt;00:02,  4.92it/s]\n 44% 7/16 [00:01&lt;00:01,  4.95it/s]\n 50% 8/16 [00:01&lt;00:01,  4.97it/s]\n 56% 9/16 [00:01&lt;00:01,  4.99it/s]\n 62% 10/16 [00:02&lt;00:01,  4.99it/s]\n 69% 11/16 [00:02&lt;00:01,  4.98it/s]\n 75% 12/16 [00:02&lt;00:00,  4.99it/s]\n 81% 13/16 [00:02&lt;00:00,  4.99it/s]\n 88% 14/16 [00:02&lt;00:00,  4.99it/s]\n 94% 15/16 [00:03&lt;00:00,  4.97it/s]\n100% 16/16 [00:03&lt;00:00,  4.94it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.75it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:03,  4.86it/s]\n 19% 3/16 [00:00&lt;00:02,  5.00it/s]\n 25% 4/16 [00:00&lt;00:02,  5.02it/s]\n 31% 5/16 [00:01&lt;00:02,  4.98it/s]\n 38% 6/16 [00:01&lt;00:02,  4.99it/s]\n 44% 7/16 [00:01&lt;00:01,  5.01it/s]\n 50% 8/16 [00:01&lt;00:01,  5.00it/s]\n 56% 9/16 [00:01&lt;00:01,  5.02it/s]\n 62% 10/16 [00:02&lt;00:01,  4.98it/s]\n 69% 11/16 [00:02&lt;00:01,  4.97it/s]\n 75% 12/16 [00:02&lt;00:00,  4.98it/s]\n 81% 13/16 [00:02&lt;00:00,  4.97it/s]\n 88% 14/16 [00:02&lt;00:00,  5.00it/s]\n 94% 15/16 [00:03&lt;00:00,  4.99it/s]\n100% 16/16 [00:03&lt;00:00,  4.99it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.75it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:02,  5.09it/s]\n 19% 3/16 [00:00&lt;00:02,  5.06it/s]\n 25% 4/16 [00:00&lt;00:02,  5.04it/s]\n 31% 5/16 [00:00&lt;00:02,  4.98it/s]\n 38% 6/16 [00:01&lt;00:02,  4.96it/s]\n 44% 7/16 [00:01&lt;00:01,  4.97it/s]\n 50% 8/16 [00:01&lt;00:01,  4.98it/s]\n 56% 9/16 [00:01&lt;00:01,  4.98it/s]\n 62% 10/16 [00:02&lt;00:01,  4.95it/s]\n 69% 11/16 [00:02&lt;00:01,  4.95it/s]\n 75% 12/16 [00:02&lt;00:00,  4.94it/s]\n 81% 13/16 [00:02&lt;00:00,  4.96it/s]\n 88% 14/16 [00:02&lt;00:00,  4.98it/s]\n 94% 15/16 [00:03&lt;00:00,  4.97it/s]\n100% 16/16 [00:03&lt;00:00,  4.98it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.74it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:02,  5.10it/s]\n 19% 3/16 [00:00&lt;00:02,  5.04it/s]\n 25% 4/16 [00:00&lt;00:02,  5.05it/s]\n 31% 5/16 [00:00&lt;00:02,  4.98it/s]\n 38% 6/16 [00:01&lt;00:02,  4.93it/s]\n 44% 7/16 [00:01&lt;00:01,  4.96it/s]\n 50% 8/16 [00:01&lt;00:01,  4.98it/s]\n 56% 9/16 [00:01&lt;00:01,  4.98it/s]\n 62% 10/16 [00:02&lt;00:01,  4.97it/s]\n 69% 11/16 [00:02&lt;00:01,  4.96it/s]\n 75% 12/16 [00:02&lt;00:00,  4.97it/s]\n 81% 13/16 [00:02&lt;00:00,  4.99it/s]\n 88% 14/16 [00:02&lt;00:00,  4.99it/s]\n 94% 15/16 [00:03&lt;00:00,  4.97it/s]\n100% 16/16 [00:03&lt;00:00,  4.98it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.76it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:03,  4.37it/s]\n 19% 3/16 [00:00&lt;00:02,  4.86it/s]\n 25% 4/16 [00:00&lt;00:02,  4.93it/s]\n 31% 5/16 [00:01&lt;00:02,  4.92it/s]\n 38% 6/16 [00:01&lt;00:02,  4.89it/s]\n 44% 7/16 [00:01&lt;00:01,  4.92it/s]\n 50% 8/16 [00:01&lt;00:01,  4.92it/s]\n 56% 9/16 [00:01&lt;00:01,  4.96it/s]\n 62% 10/16 [00:02&lt;00:01,  4.93it/s]\n 69% 11/16 [00:02&lt;00:01,  4.91it/s]\n 75% 12/16 [00:02&lt;00:00,  4.90it/s]\n 81% 13/16 [00:02&lt;00:00,  4.92it/s]\n 88% 14/16 [00:02&lt;00:00,  4.94it/s]\n 94% 15/16 [00:03&lt;00:00,  4.93it/s]\n100% 16/16 [00:03&lt;00:00,  4.90it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.72it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:03,  4.38it/s]\n 12% 2/16 [00:00&lt;00:02,  4.72it/s]\n 19% 3/16 [00:00&lt;00:02,  4.87it/s]\n 25% 4/16 [00:00&lt;00:02,  4.91it/s]\n 31% 5/16 [00:01&lt;00:02,  4.93it/s]\n 38% 6/16 [00:01&lt;00:02,  4.91it/s]\n 44% 7/16 [00:01&lt;00:01,  4.94it/s]\n 50% 8/16 [00:01&lt;00:01,  4.97it/s]\n 56% 9/16 [00:01&lt;00:01,  4.97it/s]\n 62% 10/16 [00:02&lt;00:01,  4.96it/s]\n 69% 11/16 [00:02&lt;00:01,  4.96it/s]\n 75% 12/16 [00:02&lt;00:00,  4.96it/s]\n 81% 13/16 [00:02&lt;00:00,  4.97it/s]\n 88% 14/16 [00:02&lt;00:00,  4.98it/s]\n 94% 15/16 [00:03&lt;00:00,  4.95it/s]\n100% 16/16 [00:03&lt;00:00,  4.92it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.74it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:02,  5.08it/s]\n 19% 3/16 [00:00&lt;00:02,  5.06it/s]\n 25% 4/16 [00:00&lt;00:02,  5.03it/s]\n 31% 5/16 [00:00&lt;00:02,  4.97it/s]\n 38% 6/16 [00:01&lt;00:02,  4.95it/s]\n 44% 7/16 [00:01&lt;00:01,  4.98it/s]\n 50% 8/16 [00:01&lt;00:01,  4.99it/s]\n 56% 9/16 [00:01&lt;00:01,  4.99it/s]\n 62% 10/16 [00:02&lt;00:01,  4.99it/s]\n 69% 11/16 [00:02&lt;00:01,  4.98it/s]\n 75% 12/16 [00:02&lt;00:00,  4.99it/s]\n 81% 13/16 [00:02&lt;00:00,  5.00it/s]\n 88% 14/16 [00:02&lt;00:00,  5.00it/s]\n 94% 15/16 [00:03&lt;00:00,  4.96it/s]\n100% 16/16 [00:03&lt;00:00,  4.99it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.75it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:02,  5.06it/s]\n 19% 3/16 [00:00&lt;00:02,  5.02it/s]\n 25% 4/16 [00:00&lt;00:02,  5.02it/s]\n 31% 5/16 [00:00&lt;00:02,  4.99it/s]\n 38% 6/16 [00:01&lt;00:02,  4.97it/s]\n 44% 7/16 [00:01&lt;00:01,  4.99it/s]\n 50% 8/16 [00:01&lt;00:01,  4.99it/s]\n 56% 9/16 [00:01&lt;00:01,  4.99it/s]\n 62% 10/16 [00:02&lt;00:01,  4.99it/s]\n 69% 11/16 [00:02&lt;00:01,  4.99it/s]\n 75% 12/16 [00:02&lt;00:00,  5.00it/s]\n 81% 13/16 [00:02&lt;00:00,  5.00it/s]\n 88% 14/16 [00:02&lt;00:00,  5.00it/s]\n 94% 15/16 [00:03&lt;00:00,  4.98it/s]\n100% 16/16 [00:03&lt;00:00,  4.99it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.79it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:02,  5.05it/s]\n 19% 3/16 [00:00&lt;00:02,  5.05it/s]\n 25% 4/16 [00:00&lt;00:02,  5.04it/s]\n 31% 5/16 [00:00&lt;00:02,  4.99it/s]\n 38% 6/16 [00:01&lt;00:02,  4.94it/s]\n 44% 7/16 [00:01&lt;00:01,  4.97it/s]\n 50% 8/16 [00:01&lt;00:01,  4.98it/s]\n 56% 9/16 [00:01&lt;00:01,  5.01it/s]\n 62% 10/16 [00:02&lt;00:01,  4.98it/s]\n 69% 11/16 [00:02&lt;00:01,  4.98it/s]\n 75% 12/16 [00:02&lt;00:00,  4.98it/s]\n 81% 13/16 [00:02&lt;00:00,  4.98it/s]\n 88% 14/16 [00:02&lt;00:00,  5.00it/s]\n 94% 15/16 [00:03&lt;00:00,  4.99it/s]\n100% 16/16 [00:03&lt;00:00,  4.99it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.78it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:02,  5.02it/s]\n 19% 3/16 [00:00&lt;00:02,  5.03it/s]\n 25% 4/16 [00:00&lt;00:02,  5.03it/s]\n 31% 5/16 [00:00&lt;00:02,  5.01it/s]\n 38% 6/16 [00:01&lt;00:01,  5.01it/s]\n 44% 7/16 [00:01&lt;00:01,  5.01it/s]\n 50% 8/16 [00:01&lt;00:01,  5.02it/s]\n 56% 9/16 [00:01&lt;00:01,  5.01it/s]\n 62% 10/16 [00:01&lt;00:01,  4.99it/s]\n 69% 11/16 [00:02&lt;00:01,  4.95it/s]\n 75% 12/16 [00:02&lt;00:00,  4.94it/s]\n 81% 13/16 [00:02&lt;00:00,  4.95it/s]\n 88% 14/16 [00:02&lt;00:00,  4.98it/s]\n 94% 15/16 [00:03&lt;00:00,  4.98it/s]\n100% 16/16 [00:03&lt;00:00,  4.99it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.79it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:02,  5.09it/s]\n 19% 3/16 [00:00&lt;00:02,  5.06it/s]\n 25% 4/16 [00:00&lt;00:02,  5.05it/s]\n 31% 5/16 [00:00&lt;00:02,  4.98it/s]\n 38% 6/16 [00:01&lt;00:02,  4.96it/s]\n 44% 7/16 [00:01&lt;00:01,  5.00it/s]\n 50% 8/16 [00:01&lt;00:01,  5.02it/s]\n 56% 9/16 [00:01&lt;00:01,  5.02it/s]\n 62% 10/16 [00:01&lt;00:01,  4.99it/s]\n 69% 11/16 [00:02&lt;00:01,  4.99it/s]\n 75% 12/16 [00:02&lt;00:00,  4.99it/s]\n 81% 13/16 [00:02&lt;00:00,  5.01it/s]\n 88% 14/16 [00:02&lt;00:00,  5.01it/s]\n 94% 15/16 [00:02&lt;00:00,  5.02it/s]\n100% 16/16 [00:03&lt;00:00,  5.01it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.79it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:03,  4.67it/s]\n 19% 3/16 [00:00&lt;00:02,  4.96it/s]\n 25% 4/16 [00:00&lt;00:02,  4.99it/s]\n 31% 5/16 [00:01&lt;00:02,  5.03it/s]\n 38% 6/16 [00:01&lt;00:02,  4.99it/s]\n 44% 7/16 [00:01&lt;00:01,  4.99it/s]\n 50% 8/16 [00:01&lt;00:01,  5.00it/s]\n 56% 9/16 [00:01&lt;00:01,  5.02it/s]\n 62% 10/16 [00:02&lt;00:01,  5.00it/s]\n 69% 11/16 [00:02&lt;00:01,  4.98it/s]\n 75% 12/16 [00:02&lt;00:00,  4.96it/s]\n 81% 13/16 [00:02&lt;00:00,  4.96it/s]\n 88% 14/16 [00:02&lt;00:00,  4.98it/s]\n 94% 15/16 [00:03&lt;00:00,  5.00it/s]\n100% 16/16 [00:03&lt;00:00,  4.98it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.80it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:03,  4.33it/s]\n 19% 3/16 [00:00&lt;00:02,  4.87it/s]\n 25% 4/16 [00:00&lt;00:02,  4.94it/s]\n 31% 5/16 [00:01&lt;00:02,  4.96it/s]\n 38% 6/16 [00:01&lt;00:02,  4.97it/s]\n 44% 7/16 [00:01&lt;00:01,  4.98it/s]\n 50% 8/16 [00:01&lt;00:01,  5.00it/s]\n 56% 9/16 [00:01&lt;00:01,  5.00it/s]\n 62% 10/16 [00:02&lt;00:01,  4.98it/s]\n 69% 11/16 [00:02&lt;00:01,  4.95it/s]\n 75% 12/16 [00:02&lt;00:00,  4.96it/s]\n 81% 13/16 [00:02&lt;00:00,  5.00it/s]\n 88% 14/16 [00:02&lt;00:00,  5.00it/s]\n 94% 15/16 [00:03&lt;00:00,  5.01it/s]\n100% 16/16 [00:03&lt;00:00,  4.95it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.78it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:03,  4.51it/s]\n 19% 3/16 [00:00&lt;00:02,  4.92it/s]\n 25% 4/16 [00:00&lt;00:02,  4.96it/s]\n 31% 5/16 [00:01&lt;00:02,  4.96it/s]\n 38% 6/16 [00:01&lt;00:02,  4.96it/s]\n 44% 7/16 [00:01&lt;00:01,  4.96it/s]\n 50% 8/16 [00:01&lt;00:01,  4.97it/s]\n 56% 9/16 [00:01&lt;00:01,  4.98it/s]\n 62% 10/16 [00:02&lt;00:01,  4.96it/s]\n 69% 11/16 [00:02&lt;00:01,  4.95it/s]\n 75% 12/16 [00:02&lt;00:00,  4.94it/s]\n 81% 13/16 [00:02&lt;00:00,  4.96it/s]\n 88% 14/16 [00:02&lt;00:00,  4.98it/s]\n 94% 15/16 [00:03&lt;00:00,  4.97it/s]\n100% 16/16 [00:03&lt;00:00,  4.95it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.77it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:03,  4.34it/s]\n 19% 3/16 [00:00&lt;00:02,  4.89it/s]\n 25% 4/16 [00:00&lt;00:02,  4.96it/s]\n 31% 5/16 [00:01&lt;00:02,  4.97it/s]\n 38% 6/16 [00:01&lt;00:02,  4.95it/s]\n 44% 7/16 [00:01&lt;00:01,  4.98it/s]\n 50% 8/16 [00:01&lt;00:01,  5.01it/s]\n 56% 9/16 [00:01&lt;00:01,  5.03it/s]\n 62% 10/16 [00:02&lt;00:01,  5.03it/s]\n 69% 11/16 [00:02&lt;00:00,  5.02it/s]\n 75% 12/16 [00:02&lt;00:00,  5.00it/s]\n 81% 13/16 [00:02&lt;00:00,  5.02it/s]\n 88% 14/16 [00:02&lt;00:00,  5.03it/s]\n 94% 15/16 [00:03&lt;00:00,  5.01it/s]\n100% 16/16 [00:03&lt;00:00,  4.97it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.79it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:03,  4.95it/s]\n 19% 3/16 [00:00&lt;00:02,  5.03it/s]\n 25% 4/16 [00:00&lt;00:02,  5.03it/s]\n 31% 5/16 [00:01&lt;00:02,  4.97it/s]\n 38% 6/16 [00:01&lt;00:02,  4.96it/s]\n 44% 7/16 [00:01&lt;00:01,  4.96it/s]\n 50% 8/16 [00:01&lt;00:01,  4.98it/s]\n 56% 9/16 [00:01&lt;00:01,  4.99it/s]\n 62% 10/16 [00:02&lt;00:01,  4.97it/s]\n 69% 11/16 [00:02&lt;00:01,  4.97it/s]\n 75% 12/16 [00:02&lt;00:00,  4.98it/s]\n 81% 13/16 [00:02&lt;00:00,  4.98it/s]\n 88% 14/16 [00:02&lt;00:00,  4.98it/s]\n 94% 15/16 [00:03&lt;00:00,  4.98it/s]\n100% 16/16 [00:03&lt;00:00,  4.98it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.76it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:03,  4.43it/s]\n 19% 3/16 [00:00&lt;00:02,  4.92it/s]\n 25% 4/16 [00:00&lt;00:02,  4.97it/s]\n 31% 5/16 [00:01&lt;00:02,  5.00it/s]\n 38% 6/16 [00:01&lt;00:02,  4.95it/s]\n 44% 7/16 [00:01&lt;00:01,  4.96it/s]\n 50% 8/16 [00:01&lt;00:01,  4.99it/s]\n 56% 9/16 [00:01&lt;00:01,  5.02it/s]\n 62% 10/16 [00:02&lt;00:01,  5.04it/s]\n 69% 11/16 [00:02&lt;00:00,  5.01it/s]\n 75% 12/16 [00:02&lt;00:00,  5.01it/s]\n 81% 13/16 [00:02&lt;00:00,  5.02it/s]\n 88% 14/16 [00:02&lt;00:00,  5.02it/s]\n 94% 15/16 [00:03&lt;00:00,  5.03it/s]\n100% 16/16 [00:03&lt;00:00,  4.99it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.80it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:03,  4.33it/s]\n 19% 3/16 [00:00&lt;00:02,  4.87it/s]\n 25% 4/16 [00:00&lt;00:02,  4.94it/s]\n 31% 5/16 [00:01&lt;00:02,  4.94it/s]\n 38% 6/16 [00:01&lt;00:02,  4.94it/s]\n 44% 7/16 [00:01&lt;00:01,  4.97it/s]\n 50% 8/16 [00:01&lt;00:01,  4.99it/s]\n 56% 9/16 [00:01&lt;00:01,  5.00it/s]\n 62% 10/16 [00:02&lt;00:01,  4.99it/s]\n 69% 11/16 [00:02&lt;00:01,  4.96it/s]\n 75% 12/16 [00:02&lt;00:00,  4.97it/s]\n 81% 13/16 [00:02&lt;00:00,  4.99it/s]\n 88% 14/16 [00:02&lt;00:00,  5.00it/s]\n 94% 15/16 [00:03&lt;00:00,  5.01it/s]\n100% 16/16 [00:03&lt;00:00,  4.96it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.78it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:03,  4.52it/s]\n 19% 3/16 [00:00&lt;00:02,  4.93it/s]\n 25% 4/16 [00:00&lt;00:02,  4.95it/s]\n 31% 5/16 [00:01&lt;00:02,  4.96it/s]\n 38% 6/16 [00:01&lt;00:02,  4.92it/s]\n 44% 7/16 [00:01&lt;00:01,  4.94it/s]\n 50% 8/16 [00:01&lt;00:01,  4.97it/s]\n 56% 9/16 [00:01&lt;00:01,  4.99it/s]\n 62% 10/16 [00:02&lt;00:01,  4.98it/s]\n 69% 11/16 [00:02&lt;00:01,  4.97it/s]\n 75% 12/16 [00:02&lt;00:00,  4.97it/s]\n 81% 13/16 [00:02&lt;00:00,  4.99it/s]\n 88% 14/16 [00:02&lt;00:00,  4.99it/s]\n 94% 15/16 [00:03&lt;00:00,  4.96it/s]\n100% 16/16 [00:03&lt;00:00,  4.95it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.79it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:03,  4.52it/s]\n 19% 3/16 [00:00&lt;00:02,  4.90it/s]\n 25% 4/16 [00:00&lt;00:02,  4.95it/s]\n 31% 5/16 [00:01&lt;00:02,  4.94it/s]\n 38% 6/16 [00:01&lt;00:02,  4.85it/s]\n 44% 7/16 [00:01&lt;00:01,  4.89it/s]\n 50% 8/16 [00:01&lt;00:01,  4.94it/s]\n 56% 9/16 [00:01&lt;00:01,  4.96it/s]\n 62% 10/16 [00:02&lt;00:01,  4.94it/s]\n 69% 11/16 [00:02&lt;00:01,  4.89it/s]\n 75% 12/16 [00:02&lt;00:00,  4.90it/s]\n 81% 13/16 [00:02&lt;00:00,  4.93it/s]\n 88% 14/16 [00:02&lt;00:00,  4.96it/s]\n 94% 15/16 [00:03&lt;00:00,  4.96it/s]\n100% 16/16 [00:03&lt;00:00,  4.92it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.74it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:03,  4.41it/s]\n 19% 3/16 [00:00&lt;00:02,  4.87it/s]\n 25% 4/16 [00:00&lt;00:02,  4.94it/s]\n 31% 5/16 [00:01&lt;00:02,  4.98it/s]\n 38% 6/16 [00:01&lt;00:02,  4.96it/s]\n 44% 7/16 [00:01&lt;00:01,  4.97it/s]\n 50% 8/16 [00:01&lt;00:01,  5.00it/s]\n 56% 9/16 [00:01&lt;00:01,  5.01it/s]\n 62% 10/16 [00:02&lt;00:01,  5.00it/s]\n 69% 11/16 [00:02&lt;00:01,  4.94it/s]\n 75% 12/16 [00:02&lt;00:00,  4.93it/s]\n 81% 13/16 [00:02&lt;00:00,  4.97it/s]\n 88% 14/16 [00:02&lt;00:00,  4.98it/s]\n 94% 15/16 [00:03&lt;00:00,  5.00it/s]\n100% 16/16 [00:03&lt;00:00,  4.95it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.79it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:03,  4.71it/s]\n 19% 3/16 [00:00&lt;00:02,  4.95it/s]\n 25% 4/16 [00:00&lt;00:02,  4.97it/s]\n 31% 5/16 [00:01&lt;00:02,  4.94it/s]\n 38% 6/16 [00:01&lt;00:02,  4.93it/s]\n 44% 7/16 [00:01&lt;00:01,  4.96it/s]\n 50% 8/16 [00:01&lt;00:01,  4.96it/s]\n 56% 9/16 [00:01&lt;00:01,  4.99it/s]\n 62% 10/16 [00:02&lt;00:01,  4.98it/s]\n 69% 11/16 [00:02&lt;00:01,  4.96it/s]\n 75% 12/16 [00:02&lt;00:00,  4.98it/s]\n 81% 13/16 [00:02&lt;00:00,  4.98it/s]\n 88% 14/16 [00:02&lt;00:00,  4.96it/s]\n 94% 15/16 [00:03&lt;00:00,  4.95it/s]\n100% 16/16 [00:03&lt;00:00,  4.95it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.80it/s]\n  0% 0/16 [00:00&lt;?, ?it/s]\n  6% 1/16 [00:00&lt;00:03,  4.45it/s]\n 19% 3/16 [00:00&lt;00:02,  4.89it/s]\n 25% 4/16 [00:00&lt;00:02,  4.94it/s]\n 31% 5/16 [00:01&lt;00:02,  4.94it/s]\n 38% 6/16 [00:01&lt;00:02,  4.92it/s]\n 44% 7/16 [00:01&lt;00:01,  4.94it/s]\n 50% 8/16 [00:01&lt;00:01,  4.97it/s]\n 56% 9/16 [00:01&lt;00:01,  4.99it/s]\n 62% 10/16 [00:02&lt;00:01,  4.96it/s]\n 69% 11/16 [00:02&lt;00:01,  4.96it/s]\n 75% 12/16 [00:02&lt;00:00,  4.97it/s]\n 81% 13/16 [00:02&lt;00:00,  4.98it/s]\n 88% 14/16 [00:02&lt;00:00,  5.00it/s]\n 94% 15/16 [00:03&lt;00:00,  4.97it/s]\n100% 16/16 [00:03&lt;00:00,  4.94it/s]\nTotal progress: 100% 16/16 [00:03&lt;00:00,  4.77it/s]\n  0% 0/20 [00:00&lt;?, ?it/s]\n  5% 1/20 [00:00&lt;00:06,  2.88it/s]\n 10% 2/20 [00:00&lt;00:05,  3.59it/s]\n 15% 3/20 [00:00&lt;00:04,  3.92it/s]\n 20% 4/20 [00:01&lt;00:03,  4.08it/s]\n 25% 5/20 [00:01&lt;00:03,  4.16it/s]\n 30% 6/20 [00:01&lt;00:03,  4.22it/s]\n 35% 7/20 [00:01&lt;00:03,  4.27it/s]\n 40% 8/20 [00:01&lt;00:02,  4.30it/s]\n 45% 9/20 [00:02&lt;00:02,  4.31it/s]\n 50% 10/20 [00:02&lt;00:02,  4.31it/s]\n 55% 11/20 [00:02&lt;00:02,  4.33it/s]\n 60% 12/20 [00:02&lt;00:01,  4.33it/s]\n 65% 13/20 [00:03&lt;00:01,  4.33it/s]\n 70% 14/20 [00:03&lt;00:01,  4.33it/s]\n 75% 15/20 [00:03&lt;00:01,  4.33it/s]\n 80% 16/20 [00:03&lt;00:00,  4.34it/s]\n 85% 17/20 [00:04&lt;00:00,  4.34it/s]\n 90% 18/20 [00:04&lt;00:00,  4.34it/s]\n 95% 19/20 [00:04&lt;00:00,  4.33it/s]\n100% 20/20 [00:04&lt;00:00,  4.24it/s]\nTotal progress: 100% 20/20 [00:04&lt;00:00,  4.26it/s]\n  0% 0/20 [00:00&lt;?, ?it/s]\n  5% 1/20 [00:00&lt;00:05,  3.48it/s]\n 10% 2/20 [00:00&lt;00:04,  3.95it/s]\n 15% 3/20 [00:00&lt;00:04,  4.09it/s]\n 20% 4/20 [00:00&lt;00:03,  4.19it/s]\n 25% 5/20 [00:01&lt;00:03,  4.18it/s]\n 30% 6/20 [00:01&lt;00:03,  4.23it/s]\n 35% 7/20 [00:01&lt;00:03,  4.26it/s]\n 40% 8/20 [00:01&lt;00:02,  4.28it/s]\n 45% 9/20 [00:02&lt;00:02,  4.29it/s]\n 50% 10/20 [00:02&lt;00:02,  4.29it/s]\n 55% 11/20 [00:02&lt;00:02,  4.30it/s]\n 60% 12/20 [00:02&lt;00:01,  4.30it/s]\n 65% 13/20 [00:03&lt;00:01,  4.31it/s]\n 70% 14/20 [00:03&lt;00:01,  4.28it/s]\n 75% 15/20 [00:03&lt;00:01,  4.28it/s]\n 80% 16/20 [00:03&lt;00:00,  4.28it/s]\n 85% 17/20 [00:04&lt;00:00,  4.30it/s]\n 90% 18/20 [00:04&lt;00:00,  4.29it/s]\n 95% 19/20 [00:04&lt;00:00,  4.31it/s]\n100% 20/20 [00:04&lt;00:00,  4.25it/s]\nTotal progress: 100% 20/20 [00:04&lt;00:00,  4.23it/s]\n  0% 0/20 [00:00&lt;?, ?it/s]\n  5% 1/20 [00:00&lt;00:05,  3.48it/s]\n 10% 2/20 [00:00&lt;00:04,  3.92it/s]\n 15% 3/20 [00:00&lt;00:04,  4.11it/s]\n 20% 4/20 [00:00&lt;00:03,  4.19it/s]\n 25% 5/20 [00:01&lt;00:03,  4.22it/s]\n 30% 6/20 [00:01&lt;00:03,  4.25it/s]\n 35% 7/20 [00:01&lt;00:03,  4.28it/s]\n 40% 8/20 [00:01&lt;00:02,  4.30it/s]\n 45% 9/20 [00:02&lt;00:02,  4.29it/s]\n 50% 10/20 [00:02&lt;00:02,  4.31it/s]\n 55% 11/20 [00:02&lt;00:02,  4.31it/s]\n 60% 12/20 [00:02&lt;00:01,  4.29it/s]\n 65% 13/20 [00:03&lt;00:01,  4.30it/s]\n 70% 14/20 [00:03&lt;00:01,  4.31it/s]\n 75% 15/20 [00:03&lt;00:01,  4.32it/s]\n 80% 16/20 [00:03&lt;00:00,  4.32it/s]\n 85% 17/20 [00:03&lt;00:00,  4.32it/s]\n 90% 18/20 [00:04&lt;00:00,  4.31it/s]\n 95% 19/20 [00:04&lt;00:00,  4.30it/s]\n100% 20/20 [00:04&lt;00:00,  4.26it/s]\nTotal progress: 100% 20/20 [00:04&lt;00:00,  4.24it/s]\n  0% 0/20 [00:00&lt;?, ?it/s]\n  5% 1/20 [00:00&lt;00:06,  3.09it/s]\n 10% 2/20 [00:00&lt;00:04,  3.74it/s]\n 15% 3/20 [00:00&lt;00:04,  4.01it/s]\n 20% 4/20 [00:01&lt;00:03,  4.14it/s]\n 25% 5/20 [00:01&lt;00:03,  4.20it/s]\n 30% 6/20 [00:01&lt;00:03,  4.25it/s]\n 35% 7/20 [00:01&lt;00:03,  4.28it/s]\n 40% 8/20 [00:01&lt;00:02,  4.30it/s]\n 45% 9/20 [00:02&lt;00:02,  4.32it/s]\n 50% 10/20 [00:02&lt;00:02,  4.32it/s]\n 55% 11/20 [00:02&lt;00:02,  4.32it/s]\n 60% 12/20 [00:02&lt;00:01,  4.33it/s]\n 65% 13/20 [00:03&lt;00:01,  4.34it/s]\n 70% 14/20 [00:03&lt;00:01,  4.34it/s]\n 75% 15/20 [00:03&lt;00:01,  4.35it/s]\n 80% 16/20 [00:03&lt;00:00,  4.34it/s]\n 85% 17/20 [00:04&lt;00:00,  4.34it/s]\n 90% 18/20 [00:04&lt;00:00,  4.35it/s]\n 95% 19/20 [00:04&lt;00:00,  4.34it/s]\n100% 20/20 [00:04&lt;00:00,  4.26it/s]\nTotal progress: 100% 20/20 [00:04&lt;00:00,  4.24it/s]\n  0% 0/20 [00:00&lt;?, ?it/s]\n  5% 1/20 [00:00&lt;00:05,  3.54it/s]\n 10% 2/20 [00:00&lt;00:04,  3.98it/s]\n 15% 3/20 [00:00&lt;00:04,  4.15it/s]\n 20% 4/20 [00:00&lt;00:03,  4.22it/s]\n 25% 5/20 [00:01&lt;00:03,  4.27it/s]\n 30% 6/20 [00:01&lt;00:03,  4.30it/s]\n 35% 7/20 [00:01&lt;00:03,  4.31it/s]\n 40% 8/20 [00:01&lt;00:02,  4.33it/s]\n 45% 9/20 [00:02&lt;00:02,  4.33it/s]\n 50% 10/20 [00:02&lt;00:02,  4.32it/s]\n 55% 11/20 [00:02&lt;00:02,  4.34it/s]\n 60% 12/20 [00:02&lt;00:01,  4.34it/s]\n 65% 13/20 [00:03&lt;00:01,  4.33it/s]\n 70% 14/20 [00:03&lt;00:01,  4.33it/s]\n 75% 15/20 [00:03&lt;00:01,  4.32it/s]\n 80% 16/20 [00:03&lt;00:00,  4.33it/s]\n 85% 17/20 [00:03&lt;00:00,  4.33it/s]\n 90% 18/20 [00:04&lt;00:00,  4.32it/s]\n 95% 19/20 [00:04&lt;00:00,  4.33it/s]\n100% 20/20 [00:04&lt;00:00,  4.29it/s]\nTotal progress: 100% 20/20 [00:04&lt;00:00,  4.28it/s]\n  0% 0/20 [00:00&lt;?, ?it/s]\n  5% 1/20 [00:00&lt;00:06,  3.07it/s]\n 10% 2/20 [00:00&lt;00:04,  3.71it/s]\n 15% 3/20 [00:00&lt;00:04,  3.96it/s]\n 20% 4/20 [00:01&lt;00:03,  4.09it/s]\n 25% 5/20 [00:01&lt;00:03,  4.16it/s]\n 30% 6/20 [00:01&lt;00:03,  4.19it/s]\n 35% 7/20 [00:01&lt;00:03,  4.24it/s]\n 40% 8/20 [00:01&lt;00:02,  4.28it/s]\n 45% 9/20 [00:02&lt;00:02,  4.29it/s]\n 50% 10/20 [00:02&lt;00:02,  4.28it/s]\n 55% 11/20 [00:02&lt;00:02,  4.28it/s]\n 60% 12/20 [00:02&lt;00:01,  4.29it/s]\n 65% 13/20 [00:03&lt;00:01,  4.29it/s]\n 70% 14/20 [00:03&lt;00:01,  4.29it/s]\n 75% 15/20 [00:03&lt;00:01,  4.29it/s]\n 80% 16/20 [00:03&lt;00:00,  4.30it/s]\n 85% 17/20 [00:04&lt;00:00,  4.29it/s]\n 90% 18/20 [00:04&lt;00:00,  4.30it/s]\n 95% 19/20 [00:04&lt;00:00,  4.29it/s]\n100% 20/20 [00:04&lt;00:00,  4.22it/s]\nTotal progress: 100% 20/20 [00:04&lt;00:00,  4.25it/s]\n  0% 0/20 [00:00&lt;?, ?it/s]\n  5% 1/20 [00:00&lt;00:06,  3.11it/s]\n 10% 2/20 [00:00&lt;00:04,  3.71it/s]\n 15% 3/20 [00:00&lt;00:04,  3.95it/s]\n 20% 4/20 [00:01&lt;00:03,  4.07it/s]\n 25% 5/20 [00:01&lt;00:03,  4.14it/s]\n 30% 6/20 [00:01&lt;00:03,  4.18it/s]\n 35% 7/20 [00:01&lt;00:03,  4.21it/s]\n 40% 8/20 [00:01&lt;00:02,  4.22it/s]\n 45% 9/20 [00:02&lt;00:02,  4.24it/s]\n 50% 10/20 [00:02&lt;00:02,  4.25it/s]\n 55% 11/20 [00:02&lt;00:02,  4.26it/s]\n 60% 12/20 [00:02&lt;00:01,  4.27it/s]\n 65% 13/20 [00:03&lt;00:01,  4.27it/s]\n 70% 14/20 [00:03&lt;00:01,  4.27it/s]\n 75% 15/20 [00:03&lt;00:01,  4.27it/s]\n 80% 16/20 [00:03&lt;00:00,  4.27it/s]\n 85% 17/20 [00:04&lt;00:00,  4.26it/s]\n 90% 18/20 [00:04&lt;00:00,  4.26it/s]\n 95% 19/20 [00:04&lt;00:00,  4.26it/s]\n100% 20/20 [00:04&lt;00:00,  4.19it/s]\nTotal progress: 100% 20/20 [00:04&lt;00:00,  4.23it/s]\n  0% 0/20 [00:00&lt;?, ?it/s]\n  5% 1/20 [00:00&lt;00:05,  3.35it/s]\n 10% 2/20 [00:00&lt;00:04,  3.84it/s]\n 15% 3/20 [00:00&lt;00:04,  4.03it/s]\n 20% 4/20 [00:01&lt;00:03,  4.12it/s]\n 25% 5/20 [00:01&lt;00:03,  4.14it/s]\n 30% 6/20 [00:01&lt;00:03,  4.18it/s]\n 35% 7/20 [00:01&lt;00:03,  4.20it/s]\n 40% 8/20 [00:01&lt;00:02,  4.23it/s]\n 45% 9/20 [00:02&lt;00:02,  4.21it/s]\n 50% 10/20 [00:02&lt;00:02,  4.21it/s]\n 55% 11/20 [00:02&lt;00:02,  4.22it/s]\n 60% 12/20 [00:02&lt;00:01,  4.23it/s]\n 65% 13/20 [00:03&lt;00:01,  4.24it/s]\n 70% 14/20 [00:03&lt;00:01,  4.23it/s]\n 75% 15/20 [00:03&lt;00:01,  4.24it/s]\n 80% 16/20 [00:03&lt;00:00,  4.24it/s]\n 85% 17/20 [00:04&lt;00:00,  4.24it/s]\n 90% 18/20 [00:04&lt;00:00,  4.22it/s]\n 95% 19/20 [00:04&lt;00:00,  4.21it/s]\n100% 20/20 [00:04&lt;00:00,  4.18it/s]\nTotal progress: 100% 20/20 [00:04&lt;00:00,  4.15it/s]\n  0% 0/20 [00:00&lt;?, ?it/s]\n  5% 1/20 [00:00&lt;00:06,  3.09it/s]\n 10% 2/20 [00:00&lt;00:04,  3.69it/s]\n 15% 3/20 [00:00&lt;00:04,  3.92it/s]\n 20% 4/20 [00:01&lt;00:03,  4.05it/s]\n 25% 5/20 [00:01&lt;00:03,  4.08it/s]\n 30% 6/20 [00:01&lt;00:03,  4.12it/s]\n 35% 7/20 [00:01&lt;00:03,  4.15it/s]\n 40% 8/20 [00:01&lt;00:02,  4.19it/s]\n 45% 9/20 [00:02&lt;00:02,  4.18it/s]\n 50% 10/20 [00:02&lt;00:02,  4.18it/s]\n 55% 11/20 [00:02&lt;00:02,  4.19it/s]\n 60% 12/20 [00:02&lt;00:01,  4.22it/s]\n 65% 13/20 [00:03&lt;00:01,  4.21it/s]\n 70% 14/20 [00:03&lt;00:01,  4.18it/s]\n 75% 15/20 [00:03&lt;00:01,  4.20it/s]\n 80% 16/20 [00:03&lt;00:00,  4.21it/s]\n 85% 17/20 [00:04&lt;00:00,  4.21it/s]\n 90% 18/20 [00:04&lt;00:00,  4.20it/s]\n 95% 19/20 [00:04&lt;00:00,  4.20it/s]\n100% 20/20 [00:04&lt;00:00,  4.14it/s]\nTotal progress: 100% 20/20 [00:04&lt;00:00,  4.12it/s]\n  0% 0/20 [00:00&lt;?, ?it/s]\n  5% 1/20 [00:00&lt;00:05,  3.48it/s]\n 10% 2/20 [00:00&lt;00:04,  3.90it/s]\n 15% 3/20 [00:00&lt;00:04,  4.03it/s]\n 20% 4/20 [00:00&lt;00:03,  4.10it/s]\n 25% 5/20 [00:01&lt;00:03,  4.11it/s]\n 30% 6/20 [00:01&lt;00:03,  4.13it/s]\n 35% 7/20 [00:01&lt;00:03,  4.16it/s]\n 40% 8/20 [00:01&lt;00:02,  4.18it/s]\n 45% 9/20 [00:02&lt;00:02,  4.17it/s]\n 50% 10/20 [00:02&lt;00:02,  4.17it/s]\n 55% 11/20 [00:02&lt;00:02,  4.18it/s]\n 60% 12/20 [00:02&lt;00:01,  4.19it/s]\n 65% 13/20 [00:03&lt;00:01,  4.19it/s]\n 70% 14/20 [00:03&lt;00:01,  4.18it/s]\n 75% 15/20 [00:03&lt;00:01,  4.19it/s]\n 80% 16/20 [00:03&lt;00:00,  4.19it/s]\n 85% 17/20 [00:04&lt;00:00,  4.19it/s]\n 90% 18/20 [00:04&lt;00:00,  4.19it/s]\n 95% 19/20 [00:04&lt;00:00,  4.17it/s]\n100% 20/20 [00:04&lt;00:00,  4.15it/s]\nTotal progress: 100% 20/20 [00:04&lt;00:00,  4.10it/s]\n  0% 0/20 [00:00&lt;?, ?it/s]\n  5% 1/20 [00:00&lt;00:05,  3.28it/s]\n 10% 2/20 [00:00&lt;00:04,  3.79it/s]\n 15% 3/20 [00:00&lt;00:04,  3.97it/s]\n 20% 4/20 [00:01&lt;00:03,  4.06it/s]\n 25% 5/20 [00:01&lt;00:03,  4.07it/s]\n 30% 6/20 [00:01&lt;00:03,  4.11it/s]\n 35% 7/20 [00:01&lt;00:03,  4.14it/s]\n 40% 8/20 [00:01&lt;00:02,  4.15it/s]\n 45% 9/20 [00:02&lt;00:02,  4.13it/s]\n 50% 10/20 [00:02&lt;00:02,  4.12it/s]\n 55% 11/20 [00:02&lt;00:02,  4.13it/s]\n 60% 12/20 [00:02&lt;00:01,  4.15it/s]\n 65% 13/20 [00:03&lt;00:01,  4.15it/s]\n 70% 14/20 [00:03&lt;00:01,  4.16it/s]\n 75% 15/20 [00:03&lt;00:01,  4.15it/s]\n 80% 16/20 [00:03&lt;00:00,  4.16it/s]\n 85% 17/20 [00:04&lt;00:00,  4.15it/s]\n 90% 18/20 [00:04&lt;00:00,  4.13it/s]\n 95% 19/20 [00:04&lt;00:00,  4.13it/s]\n100% 20/20 [00:04&lt;00:00,  4.10it/s]\nTotal progress: 100% 20/20 [00:04&lt;00:00,  4.07it/s]\n  0% 0/20 [00:00&lt;?, ?it/s]\n  5% 1/20 [00:00&lt;00:05,  3.20it/s]\n 10% 2/20 [00:00&lt;00:04,  3.72it/s]\n 15% 3/20 [00:00&lt;00:04,  3.91it/s]\n 20% 4/20 [00:01&lt;00:03,  4.01it/s]\n 25% 5/20 [00:01&lt;00:03,  4.06it/s]\n 30% 6/20 [00:01&lt;00:03,  4.10it/s]\n 35% 7/20 [00:01&lt;00:03,  4.12it/s]\n 40% 8/20 [00:01&lt;00:02,  4.14it/s]\n 45% 9/20 [00:02&lt;00:02,  4.12it/s]\n 50% 10/20 [00:02&lt;00:02,  4.13it/s]\n 55% 11/20 [00:02&lt;00:02,  4.13it/s]\n 60% 12/20 [00:02&lt;00:01,  4.14it/s]\n 65% 13/20 [00:03&lt;00:01,  4.13it/s]\n 70% 14/20 [00:03&lt;00:01,  4.13it/s]\n 75% 15/20 [00:03&lt;00:01,  4.14it/s]\n 80% 16/20 [00:03&lt;00:00,  4.15it/s]\n 85% 17/20 [00:04&lt;00:00,  4.16it/s]\n 90% 18/20 [00:04&lt;00:00,  4.15it/s]\n 95% 19/20 [00:04&lt;00:00,  4.14it/s]\n100% 20/20 [00:04&lt;00:00,  4.09it/s]\nTotal progress: 100% 20/20 [00:04&lt;00:00,  4.08it/s]\n  0% 0/20 [00:00&lt;?, ?it/s]\n  5% 1/20 [00:00&lt;00:05,  3.33it/s]\n 10% 2/20 [00:00&lt;00:04,  3.79it/s]\n 15% 3/20 [00:00&lt;00:04,  3.95it/s]\n 20% 4/20 [00:01&lt;00:03,  4.02it/s]\n 25% 5/20 [00:01&lt;00:03,  4.05it/s]\n 30% 6/20 [00:01&lt;00:03,  4.08it/s]\n 35% 7/20 [00:01&lt;00:03,  4.09it/s]\n 40% 8/20 [00:01&lt;00:02,  4.12it/s]\n 45% 9/20 [00:02&lt;00:02,  4.11it/s]\n 50% 10/20 [00:02&lt;00:02,  4.11it/s]\n 55% 11/20 [00:02&lt;00:02,  4.11it/s]\n 60% 12/20 [00:02&lt;00:01,  4.13it/s]\n 65% 13/20 [00:03&lt;00:01,  4.12it/s]\n 70% 14/20 [00:03&lt;00:01,  4.12it/s]\n 75% 15/20 [00:03&lt;00:01,  4.12it/s]\n 80% 16/20 [00:03&lt;00:00,  4.12it/s]\n 85% 17/20 [00:04&lt;00:00,  4.14it/s]\n 90% 18/20 [00:04&lt;00:00,  4.15it/s]\n 95% 19/20 [00:04&lt;00:00,  4.15it/s]\n100% 20/20 [00:04&lt;00:00,  4.08it/s]\nTotal progress: 100% 20/20 [00:04&lt;00:00,  4.07it/s]\n  0% 0/20 [00:00&lt;?, ?it/s]\n  5% 1/20 [00:00&lt;00:05,  3.52it/s]\n 10% 2/20 [00:00&lt;00:04,  3.86it/s]\n 15% 3/20 [00:00&lt;00:04,  3.99it/s]\n 20% 4/20 [00:01&lt;00:03,  4.05it/s]\n 25% 5/20 [00:01&lt;00:03,  4.04it/s]\n 30% 6/20 [00:01&lt;00:03,  4.07it/s]\n 35% 7/20 [00:01&lt;00:03,  4.10it/s]\n 40% 8/20 [00:01&lt;00:02,  4.11it/s]\n 45% 9/20 [00:02&lt;00:02,  4.09it/s]\n 50% 10/20 [00:02&lt;00:02,  4.10it/s]\n 55% 11/20 [00:02&lt;00:02,  4.11it/s]\n 60% 12/20 [00:02&lt;00:01,  4.11it/s]\n 65% 13/20 [00:03&lt;00:01,  4.10it/s]\n 70% 14/20 [00:03&lt;00:01,  4.09it/s]\n 75% 15/20 [00:03&lt;00:01,  4.10it/s]\n 80% 16/20 [00:03&lt;00:00,  4.10it/s]\n 85% 17/20 [00:04&lt;00:00,  4.09it/s]\n 90% 18/20 [00:04&lt;00:00,  4.08it/s]\n 95% 19/20 [00:04&lt;00:00,  4.09it/s]\n100% 20/20 [00:04&lt;00:00,  4.07it/s]\nTotal progress: 100% 20/20 [00:04&lt;00:00,  4.01it/s]\n  0% 0/20 [00:00&lt;?, ?it/s]\n  5% 1/20 [00:00&lt;00:05,  3.19it/s]\n 10% 2/20 [00:00&lt;00:04,  3.70it/s]\n 15% 3/20 [00:00&lt;00:04,  3.90it/s]\n 20% 4/20 [00:01&lt;00:04,  3.99it/s]\n 25% 5/20 [00:01&lt;00:03,  4.01it/s]\n 30% 6/20 [00:01&lt;00:03,  4.04it/s]\n 35% 7/20 [00:01&lt;00:03,  4.07it/s]\n 40% 8/20 [00:02&lt;00:02,  4.09it/s]\n 45% 9/20 [00:02&lt;00:02,  4.08it/s]\n 50% 10/20 [00:02&lt;00:02,  4.09it/s]\n 55% 11/20 [00:02&lt;00:02,  4.08it/s]\n 60% 12/20 [00:02&lt;00:01,  4.08it/s]\n 65% 13/20 [00:03&lt;00:01,  4.07it/s]\n 70% 14/20 [00:03&lt;00:01,  4.07it/s]\n 75% 15/20 [00:03&lt;00:01,  4.08it/s]\n 80% 16/20 [00:03&lt;00:00,  4.10it/s]\n 85% 17/20 [00:04&lt;00:00,  4.10it/s]\n 90% 18/20 [00:04&lt;00:00,  4.11it/s]\n 95% 19/20 [00:04&lt;00:00,  4.10it/s]\n100% 20/20 [00:04&lt;00:00,  4.04it/s]\nTotal progress: 100% 20/20 [00:04&lt;00:00,  4.03it/s]\n  0% 0/20 [00:00&lt;?, ?it/s]\n  5% 1/20 [00:00&lt;00:05,  3.29it/s]\n 10% 2/20 [00:00&lt;00:04,  3.74it/s]\n 15% 3/20 [00:00&lt;00:04,  3.91it/s]\n 20% 4/20 [00:01&lt;00:04,  3.97it/s]\n 25% 5/20 [00:01&lt;00:03,  3.99it/s]\n 30% 6/20 [00:01&lt;00:03,  4.03it/s]\n 35% 7/20 [00:01&lt;00:03,  4.06it/s]\n 40% 8/20 [00:02&lt;00:02,  4.07it/s]\n 45% 9/20 [00:02&lt;00:02,  4.07it/s]\n 50% 10/20 [00:02&lt;00:02,  4.08it/s]\n 55% 11/20 [00:02&lt;00:02,  4.07it/s]\n 60% 12/20 [00:02&lt;00:01,  4.08it/s]\n 65% 13/20 [00:03&lt;00:01,  4.06it/s]\n 70% 14/20 [00:03&lt;00:01,  4.08it/s]\n 75% 15/20 [00:03&lt;00:01,  4.08it/s]\n 80% 16/20 [00:03&lt;00:00,  4.08it/s]\n 85% 17/20 [00:04&lt;00:00,  4.08it/s]\n 90% 18/20 [00:04&lt;00:00,  4.08it/s]\n 95% 19/20 [00:04&lt;00:00,  4.09it/s]\n100% 20/20 [00:04&lt;00:00,  4.04it/s]\nTotal progress: 100% 20/20 [00:04&lt;00:00,  4.01it/s]\n  0% 0/20 [00:00&lt;?, ?it/s]\n  5% 1/20 [00:00&lt;00:05,  3.41it/s]\n 10% 2/20 [00:00&lt;00:04,  3.81it/s]\n 15% 3/20 [00:00&lt;00:04,  3.96it/s]\n 20% 4/20 [00:01&lt;00:03,  4.03it/s]\n 25% 5/20 [00:01&lt;00:03,  4.00it/s]\n 30% 6/20 [00:01&lt;00:03,  4.03it/s]\n 35% 7/20 [00:01&lt;00:03,  4.06it/s]\n 40% 8/20 [00:01&lt;00:02,  4.08it/s]\n 45% 9/20 [00:02&lt;00:02,  4.07it/s]\n 50% 10/20 [00:02&lt;00:02,  4.06it/s]\n 55% 11/20 [00:02&lt;00:02,  4.07it/s]\n 60% 12/20 [00:02&lt;00:01,  4.08it/s]\n 65% 13/20 [00:03&lt;00:01,  4.05it/s]\n 70% 14/20 [00:03&lt;00:01,  4.03it/s]\n 75% 15/20 [00:03&lt;00:01,  4.04it/s]\n 80% 16/20 [00:03&lt;00:00,  4.07it/s]\n 85% 17/20 [00:04&lt;00:00,  4.07it/s]\n 90% 18/20 [00:04&lt;00:00,  4.06it/s]\n 95% 19/20 [00:04&lt;00:00,  4.07it/s]\n100% 20/20 [00:04&lt;00:00,  4.04it/s]\nTotal progress: 100% 20/20 [00:05&lt;00:00,  3.99it/s]\n  0% 0/20 [00:00&lt;?, ?it/s]\n  5% 1/20 [00:00&lt;00:05,  3.51it/s]\n 10% 2/20 [00:00&lt;00:04,  3.82it/s]\n 15% 3/20 [00:00&lt;00:04,  3.93it/s]\n 20% 4/20 [00:01&lt;00:04,  3.98it/s]\n 25% 5/20 [00:01&lt;00:03,  3.97it/s]\n 30% 6/20 [00:01&lt;00:03,  4.00it/s]\n 35% 7/20 [00:01&lt;00:03,  4.01it/s]\n 40% 8/20 [00:02&lt;00:02,  4.03it/s]\n 45% 9/20 [00:02&lt;00:02,  4.02it/s]\n 50% 10/20 [00:02&lt;00:02,  4.02it/s]\n 55% 11/20 [00:02&lt;00:02,  4.03it/s]\n 60% 12/20 [00:03&lt;00:01,  4.04it/s]\n 65% 13/20 [00:03&lt;00:01,  4.03it/s]\n 70% 14/20 [00:03&lt;00:01,  4.04it/s]\n 75% 15/20 [00:03&lt;00:01,  4.04it/s]\n 80% 16/20 [00:03&lt;00:00,  4.05it/s]\n 85% 17/20 [00:04&lt;00:00,  4.05it/s]\n 90% 18/20 [00:04&lt;00:00,  4.04it/s]\n 95% 19/20 [00:04&lt;00:00,  4.04it/s]\n100% 20/20 [00:04&lt;00:00,  4.01it/s]\nTotal progress: 100% 20/20 [00:05&lt;00:00,  3.96it/s]\n  0% 0/20 [00:00&lt;?, ?it/s]\n  5% 1/20 [00:00&lt;00:06,  3.03it/s]\n 10% 2/20 [00:00&lt;00:05,  3.57it/s]\n 15% 3/20 [00:00&lt;00:04,  3.78it/s]\n 20% 4/20 [00:01&lt;00:04,  3.90it/s]\n 25% 5/20 [00:01&lt;00:03,  3.92it/s]\n 30% 6/20 [00:01&lt;00:03,  3.96it/s]\n 35% 7/20 [00:01&lt;00:03,  3.99it/s]\n 40% 8/20 [00:02&lt;00:02,  4.01it/s]\n 45% 9/20 [00:02&lt;00:02,  4.00it/s]\n 50% 10/20 [00:02&lt;00:02,  4.00it/s]\n 55% 11/20 [00:02&lt;00:02,  4.04it/s]\n 60% 12/20 [00:03&lt;00:01,  4.05it/s]\n 65% 13/20 [00:03&lt;00:01,  4.03it/s]\n 70% 14/20 [00:03&lt;00:01,  4.00it/s]\n 75% 15/20 [00:03&lt;00:01,  4.02it/s]\n 80% 16/20 [00:04&lt;00:00,  4.02it/s]\n 85% 17/20 [00:04&lt;00:00,  3.99it/s]\n 90% 18/20 [00:04&lt;00:00,  3.99it/s]\n 95% 19/20 [00:04&lt;00:00,  4.02it/s]\n100% 20/20 [00:05&lt;00:00,  3.96it/s]\nTotal progress: 100% 20/20 [00:05&lt;00:00,  3.93it/s]\n  0% 0/20 [00:00&lt;?, ?it/s]\n  5% 1/20 [00:00&lt;00:05,  3.49it/s]\n 10% 2/20 [00:00&lt;00:04,  3.80it/s]\n 15% 3/20 [00:00&lt;00:04,  3.90it/s]\n 20% 4/20 [00:01&lt;00:04,  3.96it/s]\n 25% 5/20 [00:01&lt;00:03,  3.92it/s]\n 30% 6/20 [00:01&lt;00:03,  3.95it/s]\n 35% 7/20 [00:01&lt;00:03,  3.98it/s]\n 40% 8/20 [00:02&lt;00:03,  3.98it/s]\n 45% 9/20 [00:02&lt;00:02,  3.97it/s]\n 50% 10/20 [00:02&lt;00:02,  3.97it/s]\n 55% 11/20 [00:02&lt;00:02,  3.98it/s]\n 60% 12/20 [00:03&lt;00:02,  3.98it/s]\n 65% 13/20 [00:03&lt;00:01,  3.97it/s]\n 70% 14/20 [00:03&lt;00:01,  3.98it/s]\n 75% 15/20 [00:03&lt;00:01,  3.98it/s]\n 80% 16/20 [00:04&lt;00:01,  3.98it/s]\n 85% 17/20 [00:04&lt;00:00,  3.97it/s]\n 90% 18/20 [00:04&lt;00:00,  3.97it/s]\n 95% 19/20 [00:04&lt;00:00,  3.97it/s]\n100% 20/20 [00:05&lt;00:00,  3.95it/s]\nTotal progress: 100% 20/20 [00:05&lt;00:00,  3.90it/s]\n  0% 0/20 [00:00&lt;?, ?it/s]\n  5% 1/20 [00:00&lt;00:06,  3.12it/s]\n 10% 2/20 [00:00&lt;00:05,  3.60it/s]\n 15% 3/20 [00:00&lt;00:04,  3.77it/s]\n 20% 4/20 [00:01&lt;00:04,  3.85it/s]\n 25% 5/20 [00:01&lt;00:03,  3.86it/s]\n 30% 6/20 [00:01&lt;00:03,  3.90it/s]\n 35% 7/20 [00:01&lt;00:03,  3.93it/s]\n 40% 8/20 [00:02&lt;00:03,  3.95it/s]\n 45% 9/20 [00:02&lt;00:02,  3.93it/s]\n 50% 10/20 [00:02&lt;00:02,  3.93it/s]\n 55% 11/20 [00:02&lt;00:02,  3.95it/s]\n 60% 12/20 [00:03&lt;00:02,  3.94it/s]\n 65% 13/20 [00:03&lt;00:01,  3.93it/s]\n 70% 14/20 [00:03&lt;00:01,  3.92it/s]\n 75% 15/20 [00:03&lt;00:01,  3.93it/s]\n 80% 16/20 [00:04&lt;00:01,  3.94it/s]\n 85% 17/20 [00:04&lt;00:00,  3.94it/s]\n 90% 18/20 [00:04&lt;00:00,  3.93it/s]\n 95% 19/20 [00:04&lt;00:00,  3.94it/s]\n100% 20/20 [00:05&lt;00:00,  3.90it/s]\nTotal progress: 100% 20/20 [00:05&lt;00:00,  3.87it/s]\n  0% 0/20 [00:00&lt;?, ?it/s]\n  5% 1/20 [00:00&lt;00:06,  3.09it/s]\n 10% 2/20 [00:00&lt;00:04,  3.68it/s]\n 15% 3/20 [00:00&lt;00:04,  3.91it/s]\n 20% 4/20 [00:01&lt;00:03,  4.02it/s]\n 25% 5/20 [00:01&lt;00:03,  4.07it/s]\n 30% 6/20 [00:01&lt;00:03,  4.11it/s]\n 35% 7/20 [00:01&lt;00:03,  4.14it/s]\n 40% 8/20 [00:01&lt;00:02,  4.16it/s]\n 45% 9/20 [00:02&lt;00:02,  4.18it/s]\n 50% 10/20 [00:02&lt;00:02,  4.18it/s]\n 55% 11/20 [00:02&lt;00:02,  4.18it/s]\n 60% 12/20 [00:02&lt;00:01,  4.18it/s]\n 65% 13/20 [00:03&lt;00:01,  4.18it/s]\n 70% 14/20 [00:03&lt;00:01,  4.19it/s]\n 75% 15/20 [00:03&lt;00:01,  4.19it/s]\n 80% 16/20 [00:03&lt;00:00,  4.20it/s]\n 85% 17/20 [00:04&lt;00:00,  4.20it/s]\n 90% 18/20 [00:04&lt;00:00,  4.20it/s]\n 95% 19/20 [00:04&lt;00:00,  4.18it/s]\n100% 20/20 [00:04&lt;00:00,  4.12it/s]\nTotal progress: 100% 20/20 [00:04&lt;00:00,  4.12it/s]\n  0% 0/20 [00:00&lt;?, ?it/s]\n  5% 1/20 [00:00&lt;00:05,  3.28it/s]\n 10% 2/20 [00:00&lt;00:04,  3.79it/s]\n 15% 3/20 [00:00&lt;00:04,  3.98it/s]\n 20% 4/20 [00:01&lt;00:03,  4.08it/s]\n 25% 5/20 [00:01&lt;00:03,  4.11it/s]\n 30% 6/20 [00:01&lt;00:03,  4.13it/s]\n 35% 7/20 [00:01&lt;00:03,  4.15it/s]\n 40% 8/20 [00:01&lt;00:02,  4.17it/s]\n 45% 9/20 [00:02&lt;00:02,  4.19it/s]\n 50% 10/20 [00:02&lt;00:02,  4.17it/s]\n 55% 11/20 [00:02&lt;00:02,  4.18it/s]\n 60% 12/20 [00:02&lt;00:01,  4.18it/s]\n 65% 13/20 [00:03&lt;00:01,  4.20it/s]\n 70% 14/20 [00:03&lt;00:01,  4.17it/s]\n 75% 15/20 [00:03&lt;00:01,  4.18it/s]\n 80% 16/20 [00:03&lt;00:00,  4.19it/s]\n 85% 17/20 [00:04&lt;00:00,  4.19it/s]\n 90% 18/20 [00:04&lt;00:00,  4.21it/s]\n 95% 19/20 [00:04&lt;00:00,  4.20it/s]\n100% 20/20 [00:04&lt;00:00,  4.14it/s]\nTotal progress: 100% 20/20 [00:04&lt;00:00,  4.13it/s]\n  0% 0/20 [00:00&lt;?, ?it/s]\n  5% 1/20 [00:00&lt;00:05,  3.35it/s]\n 10% 2/20 [00:00&lt;00:04,  3.82it/s]\n 15% 3/20 [00:00&lt;00:04,  3.99it/s]\n 20% 4/20 [00:01&lt;00:03,  4.08it/s]\n 25% 5/20 [00:01&lt;00:03,  4.12it/s]\n 30% 6/20 [00:01&lt;00:03,  4.15it/s]\n 35% 7/20 [00:01&lt;00:03,  4.19it/s]\n 40% 8/20 [00:01&lt;00:02,  4.19it/s]\n 45% 9/20 [00:02&lt;00:02,  4.21it/s]\n 50% 10/20 [00:02&lt;00:02,  4.20it/s]\n 55% 11/20 [00:02&lt;00:02,  4.21it/s]\n 60% 12/20 [00:02&lt;00:01,  4.22it/s]\n 65% 13/20 [00:03&lt;00:01,  4.20it/s]\n 70% 14/20 [00:03&lt;00:01,  4.19it/s]\n 75% 15/20 [00:03&lt;00:01,  4.19it/s]\n 80% 16/20 [00:03&lt;00:00,  4.20it/s]\n 85% 17/20 [00:04&lt;00:00,  4.21it/s]\n 90% 18/20 [00:04&lt;00:00,  4.21it/s]\n 95% 19/20 [00:04&lt;00:00,  4.21it/s]\n100% 20/20 [00:04&lt;00:00,  4.16it/s]\nTotal progress: 100% 20/20 [00:04&lt;00:00,  4.13it/s]\n  0% 0/20 [00:00&lt;?, ?it/s]\n  5% 1/20 [00:00&lt;00:05,  3.24it/s]\n 10% 2/20 [00:00&lt;00:04,  3.79it/s]\n 15% 3/20 [00:00&lt;00:04,  3.93it/s]\n 20% 4/20 [00:01&lt;00:03,  4.05it/s]\n 25% 5/20 [00:01&lt;00:03,  4.11it/s]\n 30% 6/20 [00:01&lt;00:03,  4.15it/s]\n 35% 7/20 [00:01&lt;00:03,  4.18it/s]\n 40% 8/20 [00:01&lt;00:02,  4.21it/s]\n 45% 9/20 [00:02&lt;00:02,  4.22it/s]\n 50% 10/20 [00:02&lt;00:02,  4.23it/s]\n 55% 11/20 [00:02&lt;00:02,  4.22it/s]\n 60% 12/20 [00:02&lt;00:01,  4.23it/s]\n 65% 13/20 [00:03&lt;00:01,  4.24it/s]\n 70% 14/20 [00:03&lt;00:01,  4.24it/s]\n 75% 15/20 [00:03&lt;00:01,  4.23it/s]\n 80% 16/20 [00:03&lt;00:00,  4.23it/s]\n 85% 17/20 [00:04&lt;00:00,  4.23it/s]\n 90% 18/20 [00:04&lt;00:00,  4.23it/s]\n 95% 19/20 [00:04&lt;00:00,  4.24it/s]\n100% 20/20 [00:04&lt;00:00,  4.17it/s]\nTotal progress: 100% 20/20 [00:04&lt;00:00,  4.17it/s]\n  0% 0/20 [00:00&lt;?, ?it/s]\n  5% 1/20 [00:00&lt;00:05,  3.45it/s]\n 10% 2/20 [00:00&lt;00:04,  3.92it/s]\n 15% 3/20 [00:00&lt;00:04,  4.09it/s]\n 20% 4/20 [00:00&lt;00:03,  4.17it/s]\n 25% 5/20 [00:01&lt;00:03,  4.18it/s]\n 30% 6/20 [00:01&lt;00:03,  4.22it/s]\n 35% 7/20 [00:01&lt;00:03,  4.25it/s]\n 40% 8/20 [00:01&lt;00:02,  4.27it/s]\n 45% 9/20 [00:02&lt;00:02,  4.27it/s]\n 50% 10/20 [00:02&lt;00:02,  4.27it/s]\n 55% 11/20 [00:02&lt;00:02,  4.28it/s]\n 60% 12/20 [00:02&lt;00:01,  4.28it/s]\n 65% 13/20 [00:03&lt;00:01,  4.29it/s]\n 70% 14/20 [00:03&lt;00:01,  4.28it/s]\n 75% 15/20 [00:03&lt;00:01,  4.27it/s]\n 80% 16/20 [00:03&lt;00:00,  4.29it/s]\n 85% 17/20 [00:04&lt;00:00,  4.30it/s]\n 90% 18/20 [00:04&lt;00:00,  4.28it/s]\n 95% 19/20 [00:04&lt;00:00,  4.27it/s]\n100% 20/20 [00:04&lt;00:00,  4.24it/s]\nTotal progress: 100% 20/20 [00:04&lt;00:00,  4.21it/s]\n  0% 0/20 [00:00&lt;?, ?it/s]\n  5% 1/20 [00:00&lt;00:05,  3.33it/s]\n 10% 2/20 [00:00&lt;00:04,  3.83it/s]\n 15% 3/20 [00:00&lt;00:04,  4.04it/s]\n 20% 4/20 [00:00&lt;00:03,  4.14it/s]\n 25% 5/20 [00:01&lt;00:03,  4.18it/s]\n 30% 6/20 [00:01&lt;00:03,  4.21it/s]\n 35% 7/20 [00:01&lt;00:03,  4.23it/s]\n 40% 8/20 [00:01&lt;00:02,  4.25it/s]\n 45% 9/20 [00:02&lt;00:02,  4.26it/s]\n 50% 10/20 [00:02&lt;00:02,  4.26it/s]\n 55% 11/20 [00:02&lt;00:02,  4.27it/s]\n 60% 12/20 [00:02&lt;00:01,  4.28it/s]\n 65% 13/20 [00:03&lt;00:01,  4.28it/s]\n 70% 14/20 [00:03&lt;00:01,  4.28it/s]\n 75% 15/20 [00:03&lt;00:01,  4.28it/s]\n 80% 16/20 [00:03&lt;00:00,  4.27it/s]\n 85% 17/20 [00:04&lt;00:00,  4.28it/s]\n 90% 18/20 [00:04&lt;00:00,  4.29it/s]\n 95% 19/20 [00:04&lt;00:00,  4.29it/s]\n100% 20/20 [00:04&lt;00:00,  4.22it/s]\nTotal progress: 100% 20/20 [00:04&lt;00:00,  4.22it/s]\n  0% 0/20 [00:00&lt;?, ?it/s]\n  5% 1/20 [00:00&lt;00:05,  3.43it/s]\n 10% 2/20 [00:00&lt;00:04,  3.90it/s]\n 15% 3/20 [00:00&lt;00:04,  4.08it/s]\n 20% 4/20 [00:00&lt;00:03,  4.16it/s]\n 25% 5/20 [00:01&lt;00:03,  4.19it/s]\n 30% 6/20 [00:01&lt;00:03,  4.21it/s]\n 35% 7/20 [00:01&lt;00:03,  4.25it/s]\n 40% 8/20 [00:01&lt;00:02,  4.27it/s]\n 45% 9/20 [00:02&lt;00:02,  4.28it/s]\n 50% 10/20 [00:02&lt;00:02,  4.27it/s]\n 55% 11/20 [00:02&lt;00:02,  4.28it/s]\n 60% 12/20 [00:02&lt;00:01,  4.28it/s]\n 65% 13/20 [00:03&lt;00:01,  4.29it/s]\n 70% 14/20 [00:03&lt;00:01,  4.28it/s]\n 75% 15/20 [00:03&lt;00:01,  4.27it/s]\n 80% 16/20 [00:03&lt;00:00,  4.28it/s]\n 85% 17/20 [00:04&lt;00:00,  4.29it/s]\n 90% 18/20 [00:04&lt;00:00,  4.28it/s]\n 95% 19/20 [00:04&lt;00:00,  4.28it/s]\n100% 20/20 [00:04&lt;00:00,  4.23it/s]\nTotal progress: 100% 20/20 [00:04&lt;00:00,  4.20it/s]\n  0% 0/20 [00:00&lt;?, ?it/s]\n  5% 1/20 [00:00&lt;00:05,  3.52it/s]\n 10% 2/20 [00:00&lt;00:04,  3.93it/s]\n 15% 3/20 [00:00&lt;00:04,  4.09it/s]\n 20% 4/20 [00:00&lt;00:03,  4.18it/s]\n 25% 5/20 [00:01&lt;00:03,  4.21it/s]\n 30% 6/20 [00:01&lt;00:03,  4.22it/s]\n 35% 7/20 [00:01&lt;00:03,  3.56it/s]\n 40% 8/20 [00:02&lt;00:03,  3.76it/s]\n 45% 9/20 [00:02&lt;00:02,  3.91it/s]\n 50% 10/20 [00:02&lt;00:02,  4.02it/s]\n 55% 11/20 [00:02&lt;00:02,  4.06it/s]\n 60% 12/20 [00:02&lt;00:01,  4.12it/s]\n 65% 13/20 [00:03&lt;00:01,  4.18it/s]\n 70% 14/20 [00:03&lt;00:01,  4.22it/s]\n 75% 15/20 [00:03&lt;00:01,  4.22it/s]\n 80% 16/20 [00:03&lt;00:00,  4.23it/s]\n 85% 17/20 [00:04&lt;00:00,  4.25it/s]\n 90% 18/20 [00:04&lt;00:00,  4.26it/s]\n 95% 19/20 [00:04&lt;00:00,  4.26it/s]\n100% 20/20 [00:04&lt;00:00,  4.11it/s]\nTotal progress: 100% 20/20 [00:04&lt;00:00,  4.09it/s]\n  0% 0/20 [00:00&lt;?, ?it/s]\n  5% 1/20 [00:00&lt;00:05,  3.23it/s]\n 10% 2/20 [00:00&lt;00:04,  3.79it/s]\n 15% 3/20 [00:00&lt;00:04,  4.01it/s]\n 20% 4/20 [00:01&lt;00:03,  4.12it/s]\n 25% 5/20 [00:01&lt;00:03,  4.16it/s]\n 30% 6/20 [00:01&lt;00:03,  4.19it/s]\n 35% 7/20 [00:01&lt;00:03,  4.22it/s]\n 40% 8/20 [00:01&lt;00:02,  4.24it/s]\n 45% 9/20 [00:02&lt;00:02,  4.25it/s]\n 50% 10/20 [00:02&lt;00:02,  4.25it/s]\n 55% 11/20 [00:02&lt;00:02,  4.26it/s]\n 60% 12/20 [00:02&lt;00:01,  4.27it/s]\n 65% 13/20 [00:03&lt;00:01,  4.28it/s]\n 70% 14/20 [00:03&lt;00:01,  4.27it/s]\n 75% 15/20 [00:03&lt;00:01,  4.28it/s]\n 80% 16/20 [00:03&lt;00:00,  4.28it/s]\n 85% 17/20 [00:04&lt;00:00,  4.29it/s]\n 90% 18/20 [00:04&lt;00:00,  4.27it/s]\n 95% 19/20 [00:04&lt;00:00,  4.27it/s]\n100% 20/20 [00:04&lt;00:00,  4.21it/s]\nTotal progress: 100% 20/20 [00:04&lt;00:00,  4.20it/s]\n\n","slug":"novelai","date":"2022-11-03T15:01:49.000Z","categories_index":"机器学习","tags_index":"深度学习","author_index":"Algernon"},{"id":"1940527d2a1b736857ad6c179b7a19e4","title":"2021APMCM赛后总结——边缘检测","content":"APMCM被称为小美赛，和美赛一样使用英文提交论文，比赛时间又在国赛后美赛前，因此很适合作为MCM的热身赛。第一次参加这种正规比赛，而且是英文写作，作为对美赛的预热，花四天时间提前演练一下是很有必要的。在日常上课和（几乎）按时休息的条件下，最终，我们队能够拿到二等奖，算是比较满意了。\n赛前准备APMCM四天时间，而期间有部分期中考试，因此对时间的把握很重要。我们提前半个月寻找讨论地点，在排除了书店、咖啡厅及教学楼之后，我们选择了图书馆总馆的学习研讨空间。从早上八点到晚上十点，期间在登高路恰饭。我们主要看了往年题目，学了一点点建模技巧，然后买了美赛和Matlab的相关资料。将讨论地点选在图书馆也有这样的考虑：遇到跨专业问题时能够及时翻阅到相关资料。\n比赛时2021年亚太赛里,A题有关边缘检测，涉及图形图像处理；b题跨专业程度大，不考虑；c题传统数据处理。刚好我们手边有冈萨雷斯的《图形图像处理》，而我又恰好看了关于边缘检测的一节，于是我们选择冲一冲A题。比赛持续四天。第一天图书馆闭馆之后，我们借用了信息院的会议室工作到凌晨一点。后来发现通宵效率不高，之后便统一早八晚十，之后各自回寝室整理工作。虽然大方向在第一天就已经确定了，但代码的实现还有部分功能复现还是走了一些弯路。关于资料：我选择的是知网和同方，遇到问题有CSDN和mathwork，总的来说，这道题比较难上手，但比较对我们组的方向。还有的话，蕾娜图真是拿都在用，我已经见过无数个版本了。\n现就问题A简述我们当时对边缘检测问题的思考与分析：\n2021APMCM问题A问题背景Problem AImage Edge Analysis and Application\nWith the development of science and technology, the demand for measurement accuracy of various workpieces and parts is getting higher and higher, and the requirements for measurement instruments are also getting more and more demanding. Various image measuring equipment such as digital image size measuring instrument are now gradually replacing the traditional manual caliper measurement application. Generally, after the camera is calibrated, based on the the dot matrix or checkerboard feature information of the calibrated image, the image can be corrected for distortion and the mapping relationship between the image coordinate space and the world coordinate space can be calculated.\nThe edge of the target object is very useful for image recognition and computer analysis. Image edge is the reflection of discontinuity of the local characteristics of an image. The edge can outline the target object and make it clear to the observer at a glance. The edge contains rich intrinsic information (such as orientation, step property and shape, etc.), which is an important attribute for extracting image features in image recognition. Image edge contour extraction is a very important processing in boundary segmentation and also a classical problem in image processing. The purpose of both contour extraction and contour tracking is to obtain the external contour features of an image. Applying certain methods where necessary to express the features of the contours to prepare for image shape analysis has a significant impact on performing high-level processing such as feature description, recognition and understanding.\nThe contour can be described as a set of ordered points, and the common expression of the contour is a polygon. Contours can be either closed or open. The closed contours on an image are all connected start to end, and the open contours generally intersect with the image boundary. In Figure 1, there are five closed contour curves. Although edge detection algorithms such as sobel and canny can detect the image edge pixels boundary based on the difference of image gray value, it does not take the contour as a whole. On an image, a contour corresponds to a series of pixel points. The contour describes a continuous sequence of points, and the edge pixel points can be assembled into a contour curve to describe the edge information of the image.\nA sub-pixel is a virtual pixel defined between two physical pixels of an image acquisition sensor. To improve resolution or image quality, sub-pixel calculation is very useful. Image sub-pixel edge extraction is a more accurate method than traditional pixel edge extraction. Sub-pixel means that the coordinate value of each pixel point on the image is no longer integer positioning, but floating-point number positioning. If the accuracy is increased to 0.1 pixel using subpixel technique, it is equivalent to 10 times higher resolution of image system analysis.\nFor the following three schematic diagrams, in Figure 1, the object edge contour lines of the image have been extracted and the image edge contour has been segmented into basic graphics such as straight line segments, circular arc segments, and circles. In Figure 2, The edge contour of a rounded rectangle is divided into several geometric shapes. In Figure 3, an elliptical sub-pixel contour curve is shown drawn on the background of a grayscale pixel image grid.\nFigure 1. Image Edge DetectionFigure 2. Segmentation Image Edge ContourFigure 3. Sub-pixel Edge Contour of Image\n题目Question 1: Build a mathematical model, analyze the method and process of extracting sub-pixel edge with 1/10 pixel accuracy and above, extract sub-pixel edge contour boundaries of the main edge parts of the objects on the three images (Pic1_1, Pic1_2, Pic1_3) in Annex 1, and convert the edge sub-pixel point data into ordered edge contour curve data, with the need to considering how to eliminate the interference effects of edge burrs and shadow parts of the edges. Note that the Pic1_3 image was taken under relatively complex lighting conditions, with more interference information.\na)Please draw the extracted edge contours in different colors on the image, output it as a color edge contour image and save it as png image format for submission. The file names are pic1_1.png, pic1_2.png, pic1_3.png.\nb)Output the edge contour data in the format of EdgeContoursOutput.xls file in Annex 1, and output the data of the Pic1_1 and Pic1_2 images to the corresponding Sheet1 and Sheet2 of the worksheet respectively. The output data contains the total edge contours count, the total edge contours length in the image coordinate space, point count and length of each contour curve, and the X and Y coordinate data of each contour point. \nc)The total contour curves count on each image and the point count and length data on each curve should be given in the paper. See Table 1, Table 2 and Table 3.\nQuestion 2：While the measured image is taken, there is a dot matrix calibration plate placed at the same horizontal height of the target object. The diameter of the dots on the calibration plate is 1 mm, and the center distance between two dots is 2 mm. Annex 2 contains three calibration plate images taken at different angles and one product image (Pic2_4.bmp). Please build a mathematical model, use the calibration plate image information to conduct image rectification analysis of the product image and consider how to calculate, as accurately as possible, the actual physical sizes of the edge segmentation fitting curve segments on the product image. Please calculate the length (mm) of each edge contour, and finally calculate the total edge contours length (mm). According to the contour data labeling shown in Figure 4, output the data results of the table format files such as EdgeContoursLengthOutput.xls in Annex 2.\nFigure 4. Image Contour Data Labeling\nQuestion 3: Two sub-pixel contour edge data (EdgeContour1.xls and EdgeContour2.xls) are provided in Annex 3, and the shape are shown in Figure 5. Please build a mathematical model, analyze the automated segmentation and fitting of edge contour curve data into straight line segments, circular arc segments (including circles), or elliptical arc segments (including ellipses), and discuss the model method or strategy for automated segmentation and fitting of edge contours. The blue curve starts from the blue digit 1 label and outputs the model calculation result data along the arrow direction. The green curve starts from the green digit 1 label and outputs the model calculation result data along the arrow direction. Please fill in the parameters of the segmented curve segments into the table in the table format. Submit Table 7 and Table 8 (regarding contour 1 and contour 2 segmentation data) in the paper. Note that the type of the lines in this table is populated according to the actual type.\nFigure 5. Edge Contour Curve Data\nRemark:\n\nSweepAngle indicates the sweep angle from the start point to the end point, angular system;\nSize indicates the radius value of specified ellipse or elliptic arc in the X and Y directions;\nRotationAngle indicates the rotation angle value of specified ellipse or elliptic arc, angular system;\nFor the direction of rotation angle, the rotation direction from positive direction of x-axis to positive direction of y-axis is positive direction, and vice versa is negative direction.\nAll image coordinate points are expressed under the image coordinate system, that is, the upper left corner is the (0,0) origin, the positive direction of the X-axis is to the right, and the positive direction of the Y-axis is downward.\n\n分析首先，对于这种包含专业术语的问题，及时翻译成中文很重要。在拿到题的半个小时内我就得到了A、B、C三题的word及pdf版本翻译，我们组得以及时讨论确定选择的题目，在这里感谢我的朋友和他的WPS会员。当然，机翻总会有不完美的时候，在遇到个别词语或句子的问题时还是得一个个查。多方参考之后，我们对题目得出了一个初步印象：对所给图片进行边缘检测，并标出边缘，按照题目要求统计不同亚像素结构。这个时候，就是冈萨雷斯派上用场的时候了。一百六十大洋没有白花。天阶斗技：“第十章：图像分割”！从点、线和边缘检测，到多阈值处理，这本书为我们提供了切入问题的关键角度，当然，沿着这个思路再去网上寻找资料，也会明确很多。\n基础知识边缘模型不同图像灰度不同，边界处一般会有明显的边缘，利用此特征可以分割图像。边缘检测是根据灰度突变来分割图像的一种常用方法。\n边缘模型可根据它们的灰度剖面来分类。可以被分为台阶模型、斜坡模型和屋顶边缘模型等。尽管噪声和边缘会导致边缘偏离理想形状，但利用边缘模型的特性仍可以识别出图像的边缘。在此过程中，我们用“梯度”作为求图像f中任意位置（x,y）处的边缘强度和方向的工具，用∇f表示它，并把它定义为向量。\n∇f(x,y)≡grad[f (x,y)]≡$\\begin{bmatrix} g_x (x,y)\\\\ g_y (x,y) \\end{bmatrix}$=$\\begin{bmatrix} \\cfrac{\\partial  f (x,y)}{\\partial x}\\\\ \\cfrac{\\partial  f (x,y)}{\\partial y} \\end{bmatrix}$\n梯度向量在点(x,y)处的幅度M(x,y)由其欧几里得向量范数给出。角度是相对于x轴逆时针方向度量的。点（x,y）处边缘的方向与该点处梯度向量的方向正交。\n算法边缘检测子Sobel 算子是一个离散微分算子。它结合了高斯平滑和微分求导，用来计算图像灰度函数的近似梯度。Sobel算子首先对图像像素做卷积，然后对生成的新像素灰度值做阈值运算，以此来确定边缘信息。若Gx是对原图x方向上的卷积，Gy是对原图y方向上的卷积。Sobel 算子对噪声具有平滑抑制作用，但是得到的边缘较粗，且可能出现伪边缘。\nCanny边缘检测子基于三个基本目标：低错误率、边缘点应被很好的定位、单个边缘点效应。基于三个基本目标，对于被加性高斯白噪声污染的一维台阶边缘使用数值最优，可得如下结论，即对最优台阶边缘检测子的一个较好近似是高斯一阶导数。\ncanny边缘检测算法的步骤小结如下：1.使用一个高斯滤波器平滑输入图像。2.计算梯度幅度图像和角度图像。3.对梯度幅度图像应用非极大值限制。使用双阈值处理和连通性分析来检测与连接边缘\n椒盐模糊椒盐噪声就是在图像上随机出现黑色白色的像素。在指定信噪比SNR（其取值范围在[0, 1]之间）后，计算总像素数目SP，得到要加噪的像素数目，并随机获取要加噪的每个像素位置P(i, j)并指定像素值为255或者0。\n降噪1.邻域平均法是空间域平滑噪声技术，它是一种线性滤波技术．\n2.中值滤波的基本原理是把数字图像或数字序列中一点的值用该点的一个邻域中各点值的中值代替。中值滤波器是抑制噪声的非线性处理方法．这种方法运算简单，易于实现，而且能 较好地保护边界但有时会失掉图像中的细线和小块区域，采用窗口的大小和形状有时对滤波效果影响很大，同时需要指出的是它对滤除高斯分布的噪声效果不明显。\n   3．Winner 滤波是使原始图像 f（x，y）及其恢复图像 g（x，y）之间的均方误差最小的复原方法． Wiener 滤波对高斯白噪声的图像滤波与邻域平均法比较，滤波效果好。它比线性滤波器具有更好的选择性，可以更好地保存图像的边缘和高频细节信息。虽然Wiener 滤波在大多数情况下都可以获得满意的结果，尤其对含有白噪声的图像，但在信噪比比较低的情况下，效果往往不能令 人满意。另外，最小均方误差准则与人的视觉效果不一定匹配。  \nHough变换标准 Hough 变换 (SHT) 使用线条的参数化表示：变量 rho 是沿垂直于线条的向量从原点到线条的距离。θ是从原点到线条的垂直投影相对于正 x 轴顺时针测量的角度（以度为单位）。θ的范围是 –90° ≤ θ &lt; 90°。线条本身的角度是 θ + 90°，也是相对于正 x 轴顺时针测量的。\nMatlab图像处理工具箱中提供了3个与Hough变换相关的函数。函数hough()实现了前面讨论的概念；函数houghpeaks()寻找Hough变换的峰值（累加单元的高计数）；函数houghlines()以来自其他两个函数的结果为基础在原始图像中提取线段。\n部分图像处理用不同参数对图片添加噪点，再进行高斯、椒盐滤波。\n\n总结\n找一个代码写得好的队友很重要，模型出来了运用到实际问题里还是有不少坑，需要对算法进行改进，即使是现成的代码也得看懂，更不用说根据算法写代码了。\nmathtype真香。这篇博文为什么没有太多公式，因为用latex打公式太麻烦啦！\nmathwork上有关于matlab部分算法及功能的介绍，如果在使用时有不懂可以先去上面找找。\n知网很好用，但关键词要找准，计算机视觉这个大类下，即使是边缘检测也有很多领域的运用，要找准适合比赛题目方向的。\n有一本专业的书籍在手边会方便很多。\n\n参考资料：冈萨雷斯《图形图像处理》\n","slug":"边缘检测","date":"2022-11-03T13:52:49.000Z","categories_index":"","tags_index":"数模","author_index":"Algernon"},{"id":"a66db97004d2cce682fbaf0db4f8334b","title":"【大数据基础】2020年美国新冠肺炎疫情数据分析","content":"https://dblab.xmu.edu.cn/blog/2738\n\n\n\n\n\n\n\n\n\nhttps://dblab.xmu.edu.cn/blog/2636/\nspark 安装安装 Spark2.4.0sudo tar -zxf ~&#x2F;下载&#x2F;spark-2.4.0-bin-without-hadoop.tgz -C &#x2F;usr&#x2F;local&#x2F;\ncd &#x2F;usr&#x2F;local\nsudo mv .&#x2F;spark-2.4.0-bin-without-hadoop&#x2F; .&#x2F;spark\nsudo chown -R hadoop:hadoop .&#x2F;spark          # 此处的 hadoop 为你的用户名\n安装后，还需要修改Spark的配置文件spark-env.sh\ncd &#x2F;usr&#x2F;local&#x2F;spark\ncp .&#x2F;conf&#x2F;spark-env.sh.template .&#x2F;conf&#x2F;spark-env.sh\n编辑spark-env.sh文件(vim ./conf/spark-env.sh)，在第一行添加以下配置信息:\nexport SPARK_DIST_CLASSPATH&#x3D;$(&#x2F;usr&#x2F;local&#x2F;hadoop&#x2F;bin&#x2F;hadoop classpath)\n配置完成后就可以直接使用，不需要像Hadoop运行启动命令。通过运行Spark自带的示例，验证Spark是否安装成功。\ncd &#x2F;usr&#x2F;local&#x2F;spark\nbin&#x2F;run-example SparkPi\n执行时会输出非常多的运行信息，输出结果不容易找到，可以通过 grep 命令进行过滤（命令中的 2&gt;&amp;1 可以将所有的信息都输出到 stdout 中，否则由于输出日志的性质，还是会输出到屏幕中）:\nhadoop@algernon-virtual-machine:&#x2F;usr&#x2F;local&#x2F;spark$ bin&#x2F;run-example SparkPi\n2023-03-26 23:34:21 WARN  Utils:66 - Your hostname, algernon-virtual-machine resolves to a loopback address: 127.0.1.1; using 192.168.46.140 instead (on interface ens33)\n2023-03-26 23:34:21 WARN  Utils:66 - Set SPARK_LOCAL_IP if you need to bind to another address\n2023-03-26 23:34:23 WARN  NativeCodeLoader:60 - Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\n2023-03-26 23:34:26 INFO  SparkContext:54 - Running Spark version 2.4.0\n2023-03-26 23:34:26 INFO  SparkContext:54 - Submitted application: Spark Pi\n2023-03-26 23:34:26 INFO  SecurityManager:54 - Changing view acls to: hadoop\n2023-03-26 23:34:26 INFO  SecurityManager:54 - Changing modify acls to: hadoop\n2023-03-26 23:34:26 INFO  SecurityManager:54 - Changing view acls groups to: \n2023-03-26 23:34:26 INFO  SecurityManager:54 - Changing modify acls groups to: \n2023-03-26 23:34:26 INFO  SecurityManager:54 - SecurityManager: authentication disabled; ui acls disabled; users  with view permissions: Set(hadoop); groups with view permissions: Set(); users  with modify permissions: Set(hadoop); groups with modify permissions: Set()\n2023-03-26 23:34:26 INFO  Utils:54 - Successfully started service &#39;sparkDriver&#39; on port 33901.\n2023-03-26 23:34:26 INFO  SparkEnv:54 - Registering MapOutputTracker\n2023-03-26 23:34:26 INFO  SparkEnv:54 - Registering BlockManagerMaster\n2023-03-26 23:34:26 INFO  BlockManagerMasterEndpoint:54 - Using org.apache.spark.storage.DefaultTopologyMapper for getting topology information\n2023-03-26 23:34:26 INFO  BlockManagerMasterEndpoint:54 - BlockManagerMasterEndpoint up\n2023-03-26 23:34:26 INFO  DiskBlockManager:54 - Created local directory at &#x2F;tmp&#x2F;blockmgr-0ad19652-f78b-4bfc-9b4a-c3597666be10\n2023-03-26 23:34:26 INFO  MemoryStore:54 - MemoryStore started with capacity 366.3 MB\n2023-03-26 23:34:26 INFO  SparkEnv:54 - Registering OutputCommitCoordinator\n2023-03-26 23:34:26 INFO  log:192 - Logging initialized @27558ms\n2023-03-26 23:34:26 INFO  Server:351 - jetty-9.3.z-SNAPSHOT, build timestamp: 2018-06-06T01:11:56+08:00, git hash: 84205aa28f11a4f31f2a3b86d1bba2cc8ab69827\n2023-03-26 23:34:27 INFO  Server:419 - Started @27702ms\n2023-03-26 23:34:27 INFO  AbstractConnector:278 - Started ServerConnector@7ba63fe5&#123;HTTP&#x2F;1.1,[http&#x2F;1.1]&#125;&#123;0.0.0.0:4040&#125;\n2023-03-26 23:34:27 INFO  Utils:54 - Successfully started service &#39;SparkUI&#39; on port 4040.\n2023-03-26 23:34:27 INFO  ContextHandler:781 - Started o.s.j.s.ServletContextHandler@2a3a299&#123;&#x2F;jobs,null,AVAILABLE,@Spark&#125;\n2023-03-26 23:34:27 INFO  ContextHandler:781 - Started o.s.j.s.ServletContextHandler@64d43929&#123;&#x2F;jobs&#x2F;json,null,AVAILABLE,@Spark&#125;\n2023-03-26 23:34:27 INFO  ContextHandler:781 - Started o.s.j.s.ServletContextHandler@1d269ed7&#123;&#x2F;jobs&#x2F;job,null,AVAILABLE,@Spark&#125;\n2023-03-26 23:34:27 INFO  ContextHandler:781 - Started o.s.j.s.ServletContextHandler@41c89d2f&#123;&#x2F;jobs&#x2F;job&#x2F;json,null,AVAILABLE,@Spark&#125;\n2023-03-26 23:34:27 INFO  ContextHandler:781 - Started o.s.j.s.ServletContextHandler@410e94e&#123;&#x2F;stages,null,AVAILABLE,@Spark&#125;\n2023-03-26 23:34:27 INFO  ContextHandler:781 - Started o.s.j.s.ServletContextHandler@2d691f3d&#123;&#x2F;stages&#x2F;json,null,AVAILABLE,@Spark&#125;\n2023-03-26 23:34:27 INFO  ContextHandler:781 - Started o.s.j.s.ServletContextHandler@1bdbf9be&#123;&#x2F;stages&#x2F;stage,null,AVAILABLE,@Spark&#125;\n2023-03-26 23:34:27 INFO  ContextHandler:781 - Started o.s.j.s.ServletContextHandler@78d39a69&#123;&#x2F;stages&#x2F;stage&#x2F;json,null,AVAILABLE,@Spark&#125;\n2023-03-26 23:34:27 INFO  ContextHandler:781 - Started o.s.j.s.ServletContextHandler@3c818ac4&#123;&#x2F;stages&#x2F;pool,null,AVAILABLE,@Spark&#125;\n2023-03-26 23:34:27 INFO  ContextHandler:781 - Started o.s.j.s.ServletContextHandler@5b69d40d&#123;&#x2F;stages&#x2F;pool&#x2F;json,null,AVAILABLE,@Spark&#125;\n2023-03-26 23:34:27 INFO  ContextHandler:781 - Started o.s.j.s.ServletContextHandler@71154f21&#123;&#x2F;storage,null,AVAILABLE,@Spark&#125;\n2023-03-26 23:34:27 INFO  ContextHandler:781 - Started o.s.j.s.ServletContextHandler@15f193b8&#123;&#x2F;storage&#x2F;json,null,AVAILABLE,@Spark&#125;\n2023-03-26 23:34:27 INFO  ContextHandler:781 - Started o.s.j.s.ServletContextHandler@2516fc68&#123;&#x2F;storage&#x2F;rdd,null,AVAILABLE,@Spark&#125;\n2023-03-26 23:34:27 INFO  ContextHandler:781 - Started o.s.j.s.ServletContextHandler@304a9d7b&#123;&#x2F;storage&#x2F;rdd&#x2F;json,null,AVAILABLE,@Spark&#125;\n2023-03-26 23:34:27 INFO  ContextHandler:781 - Started o.s.j.s.ServletContextHandler@6bfdb014&#123;&#x2F;environment,null,AVAILABLE,@Spark&#125;\n2023-03-26 23:34:27 INFO  ContextHandler:781 - Started o.s.j.s.ServletContextHandler@72889280&#123;&#x2F;environment&#x2F;json,null,AVAILABLE,@Spark&#125;\n2023-03-26 23:34:27 INFO  ContextHandler:781 - Started o.s.j.s.ServletContextHandler@606fc505&#123;&#x2F;executors,null,AVAILABLE,@Spark&#125;\n2023-03-26 23:34:27 INFO  ContextHandler:781 - Started o.s.j.s.ServletContextHandler@4aa3d36&#123;&#x2F;executors&#x2F;json,null,AVAILABLE,@Spark&#125;\n2023-03-26 23:34:27 INFO  ContextHandler:781 - Started o.s.j.s.ServletContextHandler@2d140a7&#123;&#x2F;executors&#x2F;threadDump,null,AVAILABLE,@Spark&#125;\n2023-03-26 23:34:27 INFO  ContextHandler:781 - Started o.s.j.s.ServletContextHandler@347bdeef&#123;&#x2F;executors&#x2F;threadDump&#x2F;json,null,AVAILABLE,@Spark&#125;\n2023-03-26 23:34:27 INFO  ContextHandler:781 - Started o.s.j.s.ServletContextHandler@2aa27288&#123;&#x2F;static,null,AVAILABLE,@Spark&#125;\n2023-03-26 23:34:27 INFO  ContextHandler:781 - Started o.s.j.s.ServletContextHandler@2c30b71f&#123;&#x2F;,null,AVAILABLE,@Spark&#125;\n2023-03-26 23:34:27 INFO  ContextHandler:781 - Started o.s.j.s.ServletContextHandler@1d81e101&#123;&#x2F;api,null,AVAILABLE,@Spark&#125;\n2023-03-26 23:34:27 INFO  ContextHandler:781 - Started o.s.j.s.ServletContextHandler@30cdae70&#123;&#x2F;jobs&#x2F;job&#x2F;kill,null,AVAILABLE,@Spark&#125;\n2023-03-26 23:34:27 INFO  ContextHandler:781 - Started o.s.j.s.ServletContextHandler@1654a892&#123;&#x2F;stages&#x2F;stage&#x2F;kill,null,AVAILABLE,@Spark&#125;\n2023-03-26 23:34:27 INFO  SparkUI:54 - Bound SparkUI to 0.0.0.0, and started at http:&#x2F;&#x2F;192.168.46.140:4040\n2023-03-26 23:34:27 INFO  SparkContext:54 - Added JAR file:&#x2F;&#x2F;&#x2F;usr&#x2F;local&#x2F;spark&#x2F;examples&#x2F;jars&#x2F;scopt_2.11-3.7.0.jar at spark:&#x2F;&#x2F;192.168.46.140:33901&#x2F;jars&#x2F;scopt_2.11-3.7.0.jar with timestamp 1679844867099\n2023-03-26 23:34:27 INFO  SparkContext:54 - Added JAR file:&#x2F;&#x2F;&#x2F;usr&#x2F;local&#x2F;spark&#x2F;examples&#x2F;jars&#x2F;spark-examples_2.11-2.4.0.jar at spark:&#x2F;&#x2F;192.168.46.140:33901&#x2F;jars&#x2F;spark-examples_2.11-2.4.0.jar with timestamp 1679844867099\n2023-03-26 23:34:27 INFO  Executor:54 - Starting executor ID driver on host localhost\n2023-03-26 23:34:27 INFO  Utils:54 - Successfully started service &#39;org.apache.spark.network.netty.NettyBlockTransferService&#39; on port 40833.\n2023-03-26 23:34:27 INFO  NettyBlockTransferService:54 - Server created on 192.168.46.140:40833\n2023-03-26 23:34:27 INFO  BlockManager:54 - Using org.apache.spark.storage.RandomBlockReplicationPolicy for block replication policy\n2023-03-26 23:34:27 INFO  BlockManagerMaster:54 - Registering BlockManager BlockManagerId(driver, 192.168.46.140, 40833, None)\n2023-03-26 23:34:27 INFO  BlockManagerMasterEndpoint:54 - Registering block manager 192.168.46.140:40833 with 366.3 MB RAM, BlockManagerId(driver, 192.168.46.140, 40833, None)\n2023-03-26 23:34:27 INFO  BlockManagerMaster:54 - Registered BlockManager BlockManagerId(driver, 192.168.46.140, 40833, None)\n2023-03-26 23:34:27 INFO  BlockManager:54 - Initialized BlockManager: BlockManagerId(driver, 192.168.46.140, 40833, None)\n2023-03-26 23:34:27 INFO  ContextHandler:781 - Started o.s.j.s.ServletContextHandler@34dc85a&#123;&#x2F;metrics&#x2F;json,null,AVAILABLE,@Spark&#125;\n2023-03-26 23:34:27 INFO  SparkContext:54 - Starting job: reduce at SparkPi.scala:38\n2023-03-26 23:34:27 INFO  DAGScheduler:54 - Got job 0 (reduce at SparkPi.scala:38) with 2 output partitions\n2023-03-26 23:34:27 INFO  DAGScheduler:54 - Final stage: ResultStage 0 (reduce at SparkPi.scala:38)\n2023-03-26 23:34:27 INFO  DAGScheduler:54 - Parents of final stage: List()\n2023-03-26 23:34:27 INFO  DAGScheduler:54 - Missing parents: List()\n2023-03-26 23:34:27 INFO  DAGScheduler:54 - Submitting ResultStage 0 (MapPartitionsRDD[1] at map at SparkPi.scala:34), which has no missing parents\n2023-03-26 23:34:28 INFO  MemoryStore:54 - Block broadcast_0 stored as values in memory (estimated size 1936.0 B, free 366.3 MB)\n2023-03-26 23:34:28 INFO  MemoryStore:54 - Block broadcast_0_piece0 stored as bytes in memory (estimated size 1256.0 B, free 366.3 MB)\n2023-03-26 23:34:28 INFO  BlockManagerInfo:54 - Added broadcast_0_piece0 in memory on 192.168.46.140:40833 (size: 1256.0 B, free: 366.3 MB)\n2023-03-26 23:34:28 INFO  SparkContext:54 - Created broadcast 0 from broadcast at DAGScheduler.scala:1161\n2023-03-26 23:34:28 INFO  DAGScheduler:54 - Submitting 2 missing tasks from ResultStage 0 (MapPartitionsRDD[1] at map at SparkPi.scala:34) (first 15 tasks are for partitions Vector(0, 1))\n2023-03-26 23:34:28 INFO  TaskSchedulerImpl:54 - Adding task set 0.0 with 2 tasks\n2023-03-26 23:34:28 INFO  TaskSetManager:54 - Starting task 0.0 in stage 0.0 (TID 0, localhost, executor driver, partition 0, PROCESS_LOCAL, 7866 bytes)\n2023-03-26 23:34:28 INFO  TaskSetManager:54 - Starting task 1.0 in stage 0.0 (TID 1, localhost, executor driver, partition 1, PROCESS_LOCAL, 7866 bytes)\n2023-03-26 23:34:28 INFO  Executor:54 - Running task 0.0 in stage 0.0 (TID 0)\n2023-03-26 23:34:28 INFO  Executor:54 - Running task 1.0 in stage 0.0 (TID 1)\n2023-03-26 23:34:28 INFO  Executor:54 - Fetching spark:&#x2F;&#x2F;192.168.46.140:33901&#x2F;jars&#x2F;scopt_2.11-3.7.0.jar with timestamp 1679844867099\n2023-03-26 23:34:28 INFO  TransportClientFactory:267 - Successfully created connection to &#x2F;192.168.46.140:33901 after 28 ms (0 ms spent in bootstraps)\n2023-03-26 23:34:28 INFO  Utils:54 - Fetching spark:&#x2F;&#x2F;192.168.46.140:33901&#x2F;jars&#x2F;scopt_2.11-3.7.0.jar to &#x2F;tmp&#x2F;spark-b78a374f-111d-4ff3-81ec-6e806aa62da3&#x2F;userFiles-d3452412-f3fd-4537-b848-a839e587e22d&#x2F;fetchFileTemp8254869077053879079.tmp\n2023-03-26 23:34:28 INFO  Executor:54 - Adding file:&#x2F;tmp&#x2F;spark-b78a374f-111d-4ff3-81ec-6e806aa62da3&#x2F;userFiles-d3452412-f3fd-4537-b848-a839e587e22d&#x2F;scopt_2.11-3.7.0.jar to class loader\n2023-03-26 23:34:28 INFO  Executor:54 - Fetching spark:&#x2F;&#x2F;192.168.46.140:33901&#x2F;jars&#x2F;spark-examples_2.11-2.4.0.jar with timestamp 1679844867099\n2023-03-26 23:34:28 INFO  Utils:54 - Fetching spark:&#x2F;&#x2F;192.168.46.140:33901&#x2F;jars&#x2F;spark-examples_2.11-2.4.0.jar to &#x2F;tmp&#x2F;spark-b78a374f-111d-4ff3-81ec-6e806aa62da3&#x2F;userFiles-d3452412-f3fd-4537-b848-a839e587e22d&#x2F;fetchFileTemp8998672681604896365.tmp\n2023-03-26 23:34:28 INFO  Executor:54 - Adding file:&#x2F;tmp&#x2F;spark-b78a374f-111d-4ff3-81ec-6e806aa62da3&#x2F;userFiles-d3452412-f3fd-4537-b848-a839e587e22d&#x2F;spark-examples_2.11-2.4.0.jar to class loader\n2023-03-26 23:34:28 INFO  Executor:54 - Finished task 1.0 in stage 0.0 (TID 1). 867 bytes result sent to driver\n2023-03-26 23:34:28 INFO  Executor:54 - Finished task 0.0 in stage 0.0 (TID 0). 867 bytes result sent to driver\n2023-03-26 23:34:28 INFO  TaskSetManager:54 - Finished task 0.0 in stage 0.0 (TID 0) in 404 ms on localhost (executor driver) (1&#x2F;2)\n2023-03-26 23:34:28 INFO  TaskSetManager:54 - Finished task 1.0 in stage 0.0 (TID 1) in 389 ms on localhost (executor driver) (2&#x2F;2)\n2023-03-26 23:34:28 INFO  TaskSchedulerImpl:54 - Removed TaskSet 0.0, whose tasks have all completed, from pool \n2023-03-26 23:34:28 INFO  DAGScheduler:54 - ResultStage 0 (reduce at SparkPi.scala:38) finished in 0.666 s\n2023-03-26 23:34:28 INFO  DAGScheduler:54 - Job 0 finished: reduce at SparkPi.scala:38, took 0.747248 s\nPi is roughly 3.1462957314786575\n2023-03-26 23:34:28 INFO  AbstractConnector:318 - Stopped Spark@7ba63fe5&#123;HTTP&#x2F;1.1,[http&#x2F;1.1]&#125;&#123;0.0.0.0:4040&#125;\n2023-03-26 23:34:28 INFO  SparkUI:54 - Stopped Spark web UI at http:&#x2F;&#x2F;192.168.46.140:4040\n2023-03-26 23:34:28 INFO  MapOutputTrackerMasterEndpoint:54 - MapOutputTrackerMasterEndpoint stopped!\n2023-03-26 23:34:28 INFO  MemoryStore:54 - MemoryStore cleared\n2023-03-26 23:34:28 INFO  BlockManager:54 - BlockManager stopped\n2023-03-26 23:34:28 INFO  BlockManagerMaster:54 - BlockManagerMaster stopped\n2023-03-26 23:34:28 INFO  OutputCommitCoordinator$OutputCommitCoordinatorEndpoint:54 - OutputCommitCoordinator stopped!\n2023-03-26 23:34:28 INFO  SparkContext:54 - Successfully stopped SparkContext\n2023-03-26 23:34:28 INFO  ShutdownHookManager:54 - Shutdown hook called\n2023-03-26 23:34:28 INFO  ShutdownHookManager:54 - Deleting directory &#x2F;tmp&#x2F;spark-7dd0b4a9-d5ee-4945-9fe9-3c330363584d\n2023-03-26 23:34:28 INFO  ShutdownHookManager:54 - Deleting directory &#x2F;tmp&#x2F;spark-b78a374f-111d-4ff3-81ec-6e806aa62da3\nhadoop@algernon-virtual-machine:&#x2F;usr&#x2F;local&#x2F;spark$ \n\ncd &#x2F;usr&#x2F;local&#x2F;spark\nbin&#x2F;run-example SparkPi 2&gt;&amp;1 | grep &quot;Pi is&quot;\n过滤后的运行结果如下图示，可以得到π 的 5 位小数近似值：\n启动Spark Shellcd &#x2F;usr&#x2F;local&#x2F;spark\nbin&#x2F;spark-shell\n启动spark-shell后，会自动创建名为sc的SparkContext对象和名为spark的SparkSession对象,如图：\n加载text文件spark创建sc，可以加载本地文件和HDFS文件创建RDD。这里用Spark自带的本地文件README.md文件测试。\nval textFile &#x3D; sc.textFile(&quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;local&#x2F;spark&#x2F;README.md&quot;)\n加载HDFS文件和本地文件都是使用textFile，区别是添加前缀(hdfs://和file:///)进行标识。\n简单RDD操作&#x2F;&#x2F;获取RDD文件textFile的第一行内容\ntextFile.first()\n&#x2F;&#x2F;获取RDD文件textFile所有项的计数\ntextFile.count()\n&#x2F;&#x2F;抽取含有“Spark”的行，返回一个新的RDD\nval lineWithSpark &#x3D; textFile.filter(line &#x3D;&gt; line.contains(&quot;Spark&quot;))\n&#x2F;&#x2F;统计新的RDD的行数\nlineWithSpark.count()\n可以通过组合RDD操作进行组合，可以实现简易MapReduce操作\n&#x2F;&#x2F;找出文本中每行的最多单词数\ntextFile.map(line &#x3D;&gt; line.split(&quot; &quot;).size).reduce((a, b) &#x3D;&gt; if (a &gt; b) a else b)\n\n退出Spark Shell 输入exit，即可退出spark shell\n:quit\n\n独立应用程序编程 安装sbt\nsudo mkdir &#x2F;usr&#x2F;local&#x2F;sbt             　　　# 创建安装目录\ncd ~&#x2F;Downloads \nsudo tar -zxvf .&#x2F;sbt-1.3.8.tgz -C &#x2F;usr&#x2F;local \ncd &#x2F;usr&#x2F;local&#x2F;sbt\nsudo chown -R hadoop &#x2F;usr&#x2F;local&#x2F;sbt  　　 # 此处的hadoop为系统当前用户名\ncp .&#x2F;bin&#x2F;sbt-launch.jar .&#x2F;  #把bin目录下的sbt-launch.jar复制到sbt安装目录下\n接着在安装目录中使用下面命令创建一个Shell脚本文件，用于启动sbt：vim &#x2F;usr&#x2F;local&#x2F;sbt&#x2F;sbt该脚本文件中的代码如下：#!&#x2F;bin&#x2F;bash\nSBT_OPTS&#x3D;&quot;-Xms512M -Xmx1536M -Xss1M -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize&#x3D;256M&quot;\njava $SBT_OPTS -jar &#96;dirname $0&#96;&#x2F;sbt-launch.jar &quot;$@&quot;\n保存后，还需要为该Shell脚本文件增加可执行权限：\nchmod u+x &#x2F;usr&#x2F;local&#x2F;sbt&#x2F;sbt\n然后，可以使用如下命令查看sbt版本信息：cd &#x2F;usr&#x2F;local&#x2F;sbt\n.&#x2F;sbt sbtVersion\nJava HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize&#x3D;256M; support was removed in 8.0\n[warn] No sbt.version set in project&#x2F;build.properties, base directory: &#x2F;usr&#x2F;local&#x2F;sbt\n[info] Set current project to sbt (in build file:&#x2F;usr&#x2F;local&#x2F;sbt&#x2F;)\n[info] 1.3.8\n\nScala应用程序代码在终端中执行如下命令创建一个文件夹 sparkapp 作为应用程序根目录：\ncd ~           # 进入用户主文件夹\nmkdir .&#x2F;sparkapp        # 创建应用程序根目录\nmkdir -p .&#x2F;sparkapp&#x2F;src&#x2F;main&#x2F;scala     # 创建所需的文件夹结构\n在 ./sparkapp/src/main/scala 下建立一个名为 SimpleApp.scala 的文件（vim ./sparkapp/src/main/scala/SimpleApp.scala），添加代码如下：\n&#x2F;* SimpleApp.scala *&#x2F;\nimport org.apache.spark.SparkContext\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.SparkConf\n \nobject SimpleApp &#123;\n        def main(args: Array[String]) &#123;\n            val logFile &#x3D; &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;local&#x2F;spark&#x2F;README.md&quot; &#x2F;&#x2F; Should be some file on your system\n            val conf &#x3D; new SparkConf().setAppName(&quot;Simple Application&quot;)\n            val sc &#x3D; new SparkContext(conf)\n            val logData &#x3D; sc.textFile(logFile, 2).cache()\n            val numAs &#x3D; logData.filter(line &#x3D;&gt; line.contains(&quot;a&quot;)).count()\n            val numBs &#x3D; logData.filter(line &#x3D;&gt; line.contains(&quot;b&quot;)).count()\n            println(&quot;Lines with a: %s, Lines with b: %s&quot;.format(numAs, numBs))\n        &#125;\n    &#125;\n该程序计算 /usr/local/spark/README 文件中包含 “a” 的行数 和包含 “b” 的行数。代码第8行的 /usr/local/spark 为 Spark 的安装目录，如果不是该目录请自行修改。不同于 Spark shell，独立应用程序需要通过 val sc = new SparkContext(conf) 初始化 SparkContext，SparkContext 的参数 SparkConf 包含了应用程序的信息。\n该程序依赖 Spark API，因此我们需要通过 sbt 进行编译打包。 在~/sparkapp这个目录中新建文件simple.sbt，命令如下：\ncd ~&#x2F;sparkapp\nvim simple.sbt\n在simple.sbt中添加如下内容，声明该独立应用程序的信息以及与 Spark 的依赖关系：\nname :&#x3D; &quot;Simple Project&quot;\nversion :&#x3D; &quot;1.0&quot;\nscalaVersion :&#x3D; &quot;2.11.12&quot;\nlibraryDependencies +&#x3D; &quot;org.apache.spark&quot; %% &quot;spark-core&quot; % &quot;2.4.0&quot;\n\n使用 sbt 打包 Scala 程序为保证 sbt 能正常运行，先执行如下命令检查整个应用程序的文件结构：\ncd ~&#x2F;sparkapp\nfind .\n接着，我们就可以通过如下代码将整个应用程序打包成 JAR（首次运行同样需要下载依赖包 ）：\n&#x2F;usr&#x2F;local&#x2F;sbt&#x2F;sbt package\n\n通过 spark-submit 运行程序最后，我们就可以将生成的 jar 包通过 spark-submit 提交到 Spark 中运行了，命令如下：\n&#x2F;usr&#x2F;local&#x2F;spark&#x2F;bin&#x2F;spark-submit --class &quot;SimpleApp&quot; ~&#x2F;sparkapp&#x2F;target&#x2F;scala-2.11&#x2F;simple-project_2.11-1.0.jar\n# 上面命令执行后会输出太多信息，可以不使用上面命令，而使用下面命令查看想要的结果\n&#x2F;usr&#x2F;local&#x2F;spark&#x2F;bin&#x2F;spark-submit --class &quot;SimpleApp&quot; ~&#x2F;sparkapp&#x2F;target&#x2F;scala-2.11&#x2F;simple-project_2.11-1.0.jar 2&gt;&amp;1 | grep &quot;Lines with a:&quot;\n最终结果如下：\n使用Maven对Java独立应用程序进行编译打包sudo unzip ~&#x2F;下载&#x2F;apache-maven-3.6.3-bin.zip -d &#x2F;usr&#x2F;local\ncd &#x2F;usr&#x2F;local\nsudo mv apache-maven-3.6.3&#x2F; .&#x2F;maven\nsudo chown -R hadoop .&#x2F;maven\n\ncd ~ #进入用户主文件夹\nmkdir -p .&#x2F;sparkapp2&#x2F;src&#x2F;main&#x2F;java\n在 ./sparkapp2/src/main/java 下建立一个名为 SimpleApp.java 的文件（vim ./sparkapp2/src/main/java/SimpleApp.java），添加代码如下：&#x2F;*** SimpleApp.java ***&#x2F;\nimport org.apache.spark.api.java.*;\nimport org.apache.spark.api.java.function.Function;\nimport org.apache.spark.SparkConf;\n \npublic class SimpleApp &#123;\n    public static void main(String[] args) &#123;\n        String logFile &#x3D; &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;local&#x2F;spark&#x2F;README.md&quot;; &#x2F;&#x2F; Should be some file on your system\n        SparkConf conf&#x3D;new SparkConf().setMaster(&quot;local&quot;).setAppName(&quot;SimpleApp&quot;);\n        JavaSparkContext sc&#x3D;new JavaSparkContext(conf);\n        JavaRDD&lt;String&gt; logData &#x3D; sc.textFile(logFile).cache(); \n        long numAs &#x3D; logData.filter(new Function&lt;String, Boolean&gt;() &#123;\n            public Boolean call(String s) &#123; return s.contains(&quot;a&quot;); &#125;\n        &#125;).count(); \n        long numBs &#x3D; logData.filter(new Function&lt;String, Boolean&gt;() &#123;\n            public Boolean call(String s) &#123; return s.contains(&quot;b&quot;); &#125;\n        &#125;).count(); \n        System.out.println(&quot;Lines with a: &quot; + numAs + &quot;, lines with b: &quot; + numBs);\n    &#125;\n&#125;\n该程序依赖Spark Java API,因此我们需要通过Maven进行编译打包。在./sparkapp2目录中新建文件pom.xml，命令如下：\ncd ~&#x2F;sparkapp2\nvim pom.xml\n在pom.xml文件中添加内容如下，声明该独立应用程序的信息以及与Spark的依赖关系：\n&lt;project&gt;\n    &lt;groupId&gt;cn.edu.xmu&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;simple-project&lt;&#x2F;artifactId&gt;\n    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;\n    &lt;name&gt;Simple Project&lt;&#x2F;name&gt;\n    &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;\n    &lt;version&gt;1.0&lt;&#x2F;version&gt;\n    &lt;repositories&gt;\n        &lt;repository&gt;\n            &lt;id&gt;jboss&lt;&#x2F;id&gt;\n            &lt;name&gt;JBoss Repository&lt;&#x2F;name&gt;\n            &lt;url&gt;http:&#x2F;&#x2F;repository.jboss.com&#x2F;maven2&#x2F;&lt;&#x2F;url&gt;\n        &lt;&#x2F;repository&gt;\n    &lt;&#x2F;repositories&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt; &lt;!-- Spark dependency --&gt;\n            &lt;groupId&gt;org.apache.spark&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spark-core_2.11&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;2.4.0&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n    &lt;&#x2F;dependencies&gt;\n&lt;&#x2F;project&gt;  \n\njupyter notebook 安装及使用安装anacondacd &#x2F;home&#x2F;hadoop\nbash Anaconda3-2020.02-Linux-x86_64.sh\n安装成功以后，可以看到如下信息。安装结束后，要关闭当前终端。然后重新打开一个终端，输入命令：conda -V，可以查看版本信息，如下图所示。\n可以查看Anaconda的版本信息，命令如下：anaconda -V\n这时，你会发现，在命令提示符的开头多了一个(base)，看着很难受，可以在终端中运行如下命令，消除这个(base)：\nconda config --set auto_activate_base false\n然后，关闭终端，再次新建一个终端，可以看到，已经没有（base）了。但是，这时，输入“anaconda -V”命令就会失败，提示找不到命令。\n这时，需要到~/.bashrc文件中修改配置，执行如下命令打开文件：\nvim ~&#x2F;.bashrc\n打开文件以后，按键盘上的i键，进入编辑状态，然后，在PATH环境配置中，把“/home/hadoop/anaconda3/bin”增加到PATH的末尾，也就是用英文冒号和PATH的其他部分连接起来，\n然后保存退出文件（先按Esc键退出文件编辑状态，再输入:wq（注意是英文冒号），再回车，就可以保存退出文件）。再执行如下命令使得配置立即生效：\nsource ~&#x2F;.bashrc\n执行完source命令以后，就可以成功执行“anaconda -V”命令了。\n配置Jupyter Notebook下面开始配置Jupyter Notebook，在终端中执行如下命令：\njupyter notebook --generate-config\n然后，在终端中执行如下命令：\ncd &#x2F;home&#x2F;hadoop&#x2F;anaconda3&#x2F;bin\n.&#x2F;python\n然后，在Python命令提示符（不是Linux Shell命令提示符）后面输入如下命令：\n&gt;&gt;&gt;from notebook.auth import passwd\n&gt;&gt;&gt;passwd()\n此时系统会让输入密码，并让你确认密码（如:123456），这个密码是后面进入到Jupyter网页页面的密码。然后系统会生成一个密码字符串，比如sha1:7c7990750e83:965c1466a4fab0849051ca5f3c5661110813795，把这个sha1字符串复制粘贴到一个文件中保存起来，后面用于配置密码。具体如下图所示：&#39;sha1:591c60fedd74:916538f684789e5c0220be599bda59741fedadbe&#39;\n&#39;sha1:8f6545b8d0cf:41ec531eaf0df13e77f2846221a97516020a16f5&#39;然后，在Python命令提示符后面输入“exit()”，退出Python。\n下面开始配置文件。在终端输入如下命令：\nvim ~&#x2F;.jupyter&#x2F;jupyter_notebook_config.py\n进入到配置文件页面，在文件的开头增加以下内容：\nc.NotebookApp.ip&#x3D;&#39;*&#39;                     # 就是设置所有ip皆可访问  \nc.NotebookApp.password &#x3D; &#39;sha1:7c7990750e83:965c1466a4fab0849051ca5f3c5661110813795b&#39;     # 上面复制的那个sha密文&#39;  \nc.NotebookApp.open_browser &#x3D; False       # 禁止自动打开浏览器  \nc.NotebookApp.port &#x3D;8888                 # 端口\nc.NotebookApp.notebook_dir &#x3D; &#39;&#x2F;home&#x2F;hadoop&#x2F;jupyternotebook&#39;  #设置Notebook启动进入的目录\n配置文件如下图所示：然后保存并退出vim文件（Esc键，输入:wq）需要注意的是，在配置文件中，c.NotebookApp.password的值，就是刚才前面生成以后保存到文件中的sha1密文。另外，c.NotebookApp.notebook_dir = ‘/home/hadoop/jupyternotebook’ 这行用于设置Notebook启动进入的目录，由于该目录还不存在，所以需要在终端中执行如下命令创建：\ncd &#x2F;home&#x2F;hadoop\nmkdir jupyternotebook\n运行Jupyter Notebook下面开始运行Jupyter Notebook。在终端输入如下命令：\njupyter notebook\n打开浏览器，输入http://localhost:8888会弹出对话框，输入Python密码123456，点击“Log in”，如下图所示。\n配置Jupyter Notebook实现和PySpark交互在终端中输入如下命令：\nvim ~&#x2F;.bashrc\n然后，在.bashrc文件中把原来已经存在的一行“export PYSPARK_PYTHON=python3”删除，然后，在该文件中增加如下两行：\nexport PYSPARK_PYTHON&#x3D;&#x2F;home&#x2F;hadoop&#x2F;anaconda3&#x2F;bin&#x2F;python\nexport PYSPARK_DRIVER_PYTHON&#x3D;&#x2F;home&#x2F;hadoop&#x2F;anaconda3&#x2F;bin&#x2F;python\n\n然后，保存退出该文件。然后执行如下命令让配置生效：\nsource ~&#x2F;.bashrc\n然后，在Jupyter Notebook首页中，点击“New”，再点击“Python3”，另外新建一个代码文件，把文件保存名称为CountLine，在文件中输入如下内容：\nfrom pyspark import SparkConf, SparkContext\nconf &#x3D; SparkConf().setMaster(&quot;local&quot;).setAppName(&quot;My App&quot;)\nsc &#x3D; SparkContext(conf &#x3D; conf)\nlogFile &#x3D; &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;local&#x2F;spark&#x2F;README.md&quot;\nlogData &#x3D; sc.textFile(logFile, 2).cache()\nnumAs &#x3D; logData.filter(lambda line: &#39;a&#39; in line).count()\nnumBs &#x3D; logData.filter(lambda line: &#39;b&#39; in line).count()\nprint(&#39;Lines with a: %s, Lines with b: %s&#39; % (numAs, numBs))\n然后，点击界面上的“Run”按钮运行该代码，会出现统计结果“Lines with a: 62, Lines with b: 31”，执行效果如下：\n数据分析格式转换原始数据集是以.csv文件组织的，为了方便spark读取生成RDD或者DataFrame，首先将us-counties.csv转换为.txt格式文件us-counties.txt。转换操作使用python实现，代码组织在toTxt.py中，具体代码如下：\nimport pandas as pd\n \n#.csv-&gt;.txt\ndata &#x3D; pd.read_csv(&#39;&#x2F;home&#x2F;hadoop&#x2F;us-counties.csv&#39;)\nwith open(&#39;&#x2F;home&#x2F;hadoop&#x2F;us-counties.txt&#39;,&#39;a+&#39;,encoding&#x3D;&#39;utf-8&#39;) as f:\n    for line in data.values:\n        f.write((str(line[0])+&#39;\\t&#39;+str(line[1])+&#39;\\t&#39;\n                +str(line[2])+&#39;\\t&#39;+str(line[3])+&#39;\\t&#39;+str(line[4])+&#39;\\n&#39;))\n将文件上传至HDFS文件系统中然后使用如下命令把本地文件系统的“/home/hadoop/us-counties.txt”上传到HDFS文件系统中，具体路径是“/user/hadoop/us-counties.txt”。具体命令如下：\n.&#x2F;bin&#x2F;hdfs dfs -put &#x2F;home&#x2F;hadoop&#x2F;us-counties.txt &#x2F;user&#x2F;hadoop\n\n使用Spark对数据进行分析记得先启动hadoop\nfrom pyspark import SparkConf,SparkContext\nfrom pyspark.sql import Row\nfrom pyspark.sql.types import *\nfrom pyspark.sql import SparkSession\nfrom datetime import datetime\nimport pyspark.sql.functions as func\n \ndef toDate(inputStr):\n    newStr &#x3D; &quot;&quot;\n    if len(inputStr) &#x3D;&#x3D; 8:\n        s1 &#x3D; inputStr[0:4]\n        s2 &#x3D; inputStr[5:6]\n        s3 &#x3D; inputStr[7]\n        newStr &#x3D; s1+&quot;-&quot;+&quot;0&quot;+s2+&quot;-&quot;+&quot;0&quot;+s3\n    else:\n        s1 &#x3D; inputStr[0:4]\n        s2 &#x3D; inputStr[5:6]\n        s3 &#x3D; inputStr[7:]\n        newStr &#x3D; s1+&quot;-&quot;+&quot;0&quot;+s2+&quot;-&quot;+s3\n    date &#x3D; datetime.strptime(newStr, &quot;%Y-%m-%d&quot;)\n    return date\n \n \n \n#主程序:\nspark &#x3D; SparkSession.builder.config(conf &#x3D; SparkConf()).getOrCreate()\n \nfields &#x3D; [StructField(&quot;date&quot;, DateType(),False),StructField(&quot;county&quot;, StringType(),False),StructField(&quot;state&quot;, StringType(),False),\n                    StructField(&quot;cases&quot;, IntegerType(),False),StructField(&quot;deaths&quot;, IntegerType(),False),]\nschema &#x3D; StructType(fields)\n \nrdd0 &#x3D; spark.sparkContext.textFile(&quot;&#x2F;user&#x2F;hadoop&#x2F;us-counties.txt&quot;)\nrdd1 &#x3D; rdd0.map(lambda x:x.split(&quot;\\t&quot;)).map(lambda p: Row(toDate(p[0]),p[1],p[2],int(p[3]),int(p[4])))\n \n \nshemaUsInfo &#x3D; spark.createDataFrame(rdd1,schema)\n \nshemaUsInfo.createOrReplaceTempView(&quot;usInfo&quot;)\n \n#1.计算每日的累计确诊病例数和死亡数\ndf &#x3D; shemaUsInfo.groupBy(&quot;date&quot;).agg(func.sum(&quot;cases&quot;),func.sum(&quot;deaths&quot;)).sort(shemaUsInfo[&quot;date&quot;].asc())\n \n#列重命名\ndf1 &#x3D; df.withColumnRenamed(&quot;sum(cases)&quot;,&quot;cases&quot;).withColumnRenamed(&quot;sum(deaths)&quot;,&quot;deaths&quot;)\ndf1.repartition(1).write.json(&quot;result1.json&quot;)                               #写入hdfs\n \n#注册为临时表供下一步使用\ndf1.createOrReplaceTempView(&quot;ustotal&quot;)\n \n#2.计算每日较昨日的新增确诊病例数和死亡病例数\ndf2 &#x3D; spark.sql(&quot;select t1.date,t1.cases-t2.cases as caseIncrease,t1.deaths-t2.deaths as deathIncrease from ustotal t1,ustotal t2 where t1.date &#x3D; date_add(t2.date,1)&quot;)\n \ndf2.sort(df2[&quot;date&quot;].asc()).repartition(1).write.json(&quot;result2.json&quot;)           #写入hdfs\n \n#3.统计截止5.19日 美国各州的累计确诊人数和死亡人数\ndf3 &#x3D; spark.sql(&quot;select date,state,sum(cases) as totalCases,sum(deaths) as totalDeaths,round(sum(deaths)&#x2F;sum(cases),4) as deathRate from usInfo  where date &#x3D; to_date(&#39;2020-05-19&#39;,&#39;yyyy-MM-dd&#39;) group by date,state&quot;)\n \ndf3.sort(df3[&quot;totalCases&quot;].desc()).repartition(1).write.json(&quot;result3.json&quot;) #写入hdfs\n \ndf3.createOrReplaceTempView(&quot;eachStateInfo&quot;)\n \n#4.找出美国确诊最多的10个州\ndf4 &#x3D; spark.sql(&quot;select date,state,totalCases from eachStateInfo  order by totalCases desc limit 10&quot;)\ndf4.repartition(1).write.json(&quot;result4.json&quot;)\n \n#5.找出美国死亡最多的10个州\ndf5 &#x3D; spark.sql(&quot;select date,state,totalDeaths from eachStateInfo  order by totalDeaths desc limit 10&quot;)\ndf5.repartition(1).write.json(&quot;result5.json&quot;)\n \n#6.找出美国确诊最少的10个州\ndf6 &#x3D; spark.sql(&quot;select date,state,totalCases from eachStateInfo  order by totalCases asc limit 10&quot;)\ndf6.repartition(1).write.json(&quot;result6.json&quot;)\n \n#7.找出美国死亡最少的10个州\ndf7 &#x3D; spark.sql(&quot;select date,state,totalDeaths from eachStateInfo  order by totalDeaths asc limit 10&quot;)\ndf7.repartition(1).write.json(&quot;result7.json&quot;)\n \n#8.统计截止5.19全美和各州的病死率\ndf8 &#x3D; spark.sql(&quot;select 1 as sign,date,&#39;USA&#39; as state,round(sum(totalDeaths)&#x2F;sum(totalCases),4) as deathRate from eachStateInfo group by date union select 2 as sign,date,state,deathRate from eachStateInfo&quot;).cache()\ndf8.sort(df8[&quot;sign&quot;].asc(),df8[&quot;deathRate&quot;].desc()).repartition(1).write.json(&quot;result8.json&quot;)\n输出结果：\n读取文件生成DataFrame上面已经给出了完整代码。下面我们再对代码做一些简要介绍。首先看看读取文件生成DataFrame。由于本实验中使用的数据为结构化数据，因此可以使用spark读取源文件生成DataFrame以方便进行后续分析实现。本部分代码组织在analyst.py中，读取us-counties.txt生成DataFrame的代码如下：\nfrom pyspark import SparkConf,SparkContext\nfrom pyspark.sql import Row\nfrom pyspark.sql.types import *\nfrom pyspark.sql import SparkSession\nfrom datetime import datetime\nimport pyspark.sql.functions as func\n \ndef toDate(inputStr):\n    newStr &#x3D; &quot;&quot;\n    if len(inputStr) &#x3D;&#x3D; 8:\n        s1 &#x3D; inputStr[0:4]\n        s2 &#x3D; inputStr[5:6]\n        s3 &#x3D; inputStr[7]\n        newStr &#x3D; s1+&quot;-&quot;+&quot;0&quot;+s2+&quot;-&quot;+&quot;0&quot;+s3\n    else:\n        s1 &#x3D; inputStr[0:4]\n        s2 &#x3D; inputStr[5:6]\n        s3 &#x3D; inputStr[7:]\n        newStr &#x3D; s1+&quot;-&quot;+&quot;0&quot;+s2+&quot;-&quot;+s3\n    date &#x3D; datetime.strptime(newStr, &quot;%Y-%m-%d&quot;)\n    return date\n \n \n#主程序:\nspark &#x3D; SparkSession.builder.config(conf &#x3D; SparkConf()).getOrCreate()\n \nfields &#x3D; [StructField(&quot;date&quot;, DateType(),False),StructField(&quot;county&quot;, StringType(),False),StructField(&quot;state&quot;, StringType(),False),\n                    StructField(&quot;cases&quot;, IntegerType(),False),StructField(&quot;deaths&quot;, IntegerType(),False),]\nschema &#x3D; StructType(fields)\n \nrdd0 &#x3D; spark.sparkContext.textFile(&quot;&#x2F;user&#x2F;hadoop&#x2F;us-counties.txt&quot;)\nrdd1 &#x3D; rdd0.map(lambda x:x.split(&quot;\\t&quot;)).map(lambda p: Row(toDate(p[0]),p[1],p[2],int(p[3]),int(p[4])))\n \nshemaUsInfo &#x3D; spark.createDataFrame(rdd1,schema)\n \nshemaUsInfo.createOrReplaceTempView(&quot;usInfo&quot;)\n \n进行数据分析本实验主要统计以下8个指标，分别是：1) 统计美国截止每日的累计确诊人数和累计死亡人数。做法是以date作为分组字段，对cases和deaths字段进行汇总统计。2) 统计美国每日的新增确诊人数和新增死亡人数。因为新增数=今日数-昨日数，所以考虑使用自连接，连接条件是t1.date = t2.date + 1，然后使用t1.totalCases – t2.totalCases计算该日新增。3) 统计截止5.19日，美国各州的累计确诊人数和死亡人数。首先筛选出5.19日的数据，然后以state作为分组字段，对cases和deaths字段进行汇总统计。4) 统计截止5.19日，美国确诊人数最多的十个州。对3)的结果DataFrame注册临时表，然后按确诊人数降序排列，并取前10个州。5) 统计截止5.19日，美国死亡人数最多的十个州。对3)的结果DataFrame注册临时表，然后按死亡人数降序排列，并取前10个州。6) 统计截止5.19日，美国确诊人数最少的十个州。对3)的结果DataFrame注册临时表，然后按确诊人数升序排列，并取前10个州。7) 统计截止5.19日，美国死亡人数最少的十个州。对3)的结果DataFrame注册临时表，然后按死亡人数升序排列，并取前10个州8) 统计截止5.19日，全美和各州的病死率。病死率 = 死亡数/确诊数，对3)的结果DataFrame注册临时表，然后按公式计算。在计算以上几个指标过程中，根据实现的简易程度，既采用了DataFrame自带的操作函数，又采用了spark sql进行操作。\n数据可视化选择使用python第三方库pyecharts作为可视化工具。在使用前，需要安装pyecharts，安装代码如下：\npip install pyecharts\nfrom pyecharts import options as opts\nfrom pyecharts.charts import Bar\nfrom pyecharts.charts import Line\nfrom pyecharts.components import Table\nfrom pyecharts.charts import WordCloud\nfrom pyecharts.charts import Pie\nfrom pyecharts.charts import Funnel\nfrom pyecharts.charts import Scatter\nfrom pyecharts.charts import PictorialBar\nfrom pyecharts.options import ComponentTitleOpts\nfrom pyecharts.globals import SymbolType\nimport json\n \n \n \n#1.画出每日的累计确诊病例数和死亡数——&gt;双柱状图\ndef drawChart_1(index):\n    root &#x3D; &quot;&#x2F;home&#x2F;hadoop&#x2F;result&#x2F;result&quot; + str(index) +&quot;&#x2F;part-00000.json&quot;\n    date &#x3D; []\n    cases &#x3D; []\n    deaths &#x3D; []\n    with open(root, &#39;r&#39;) as f:\n        while True:\n            line &#x3D; f.readline()\n            if not line:                            # 到 EOF，返回空字符串，则终止循环\n                break\n            js &#x3D; json.loads(line)\n            date.append(str(js[&#39;date&#39;]))\n            cases.append(int(js[&#39;cases&#39;]))\n            deaths.append(int(js[&#39;deaths&#39;]))\n \n    d &#x3D; (\n    Bar()\n    .add_xaxis(date)\n    .add_yaxis(&quot;累计确诊人数&quot;, cases, stack&#x3D;&quot;stack1&quot;)\n    .add_yaxis(&quot;累计死亡人数&quot;, deaths, stack&#x3D;&quot;stack1&quot;)\n    .set_series_opts(label_opts&#x3D;opts.LabelOpts(is_show&#x3D;False))\n    .set_global_opts(title_opts&#x3D;opts.TitleOpts(title&#x3D;&quot;美国每日累计确诊和死亡人数&quot;))\n    .render(&quot;&#x2F;home&#x2F;hadoop&#x2F;result&#x2F;result1&#x2F;result1.html&quot;)\n    )\n \n \n#2.画出每日的新增确诊病例数和死亡数——&gt;折线图\ndef drawChart_2(index):\n    root &#x3D; &quot;&#x2F;home&#x2F;hadoop&#x2F;result&#x2F;result&quot; + str(index) +&quot;&#x2F;part-00000.json&quot;\n    date &#x3D; []\n    cases &#x3D; []\n    deaths &#x3D; []\n    with open(root, &#39;r&#39;) as f:\n        while True:\n            line &#x3D; f.readline()\n            if not line:                            # 到 EOF，返回空字符串，则终止循环\n                break\n            js &#x3D; json.loads(line)\n            date.append(str(js[&#39;date&#39;]))\n            cases.append(int(js[&#39;caseIncrease&#39;]))\n            deaths.append(int(js[&#39;deathIncrease&#39;]))\n \n    (\n    Line(init_opts&#x3D;opts.InitOpts(width&#x3D;&quot;1600px&quot;, height&#x3D;&quot;800px&quot;))\n    .add_xaxis(xaxis_data&#x3D;date)\n    .add_yaxis(\n        series_name&#x3D;&quot;新增确诊&quot;,\n        y_axis&#x3D;cases,\n        markpoint_opts&#x3D;opts.MarkPointOpts(\n            data&#x3D;[\n                opts.MarkPointItem(type_&#x3D;&quot;max&quot;, name&#x3D;&quot;最大值&quot;)\n \n            ]\n        ),\n        markline_opts&#x3D;opts.MarkLineOpts(\n            data&#x3D;[opts.MarkLineItem(type_&#x3D;&quot;average&quot;, name&#x3D;&quot;平均值&quot;)]\n        ),\n    )\n    .set_global_opts(\n        title_opts&#x3D;opts.TitleOpts(title&#x3D;&quot;美国每日新增确诊折线图&quot;, subtitle&#x3D;&quot;&quot;),\n        tooltip_opts&#x3D;opts.TooltipOpts(trigger&#x3D;&quot;axis&quot;),\n        toolbox_opts&#x3D;opts.ToolboxOpts(is_show&#x3D;True),\n        xaxis_opts&#x3D;opts.AxisOpts(type_&#x3D;&quot;category&quot;, boundary_gap&#x3D;False),\n    )\n    .render(&quot;&#x2F;home&#x2F;hadoop&#x2F;result&#x2F;result2&#x2F;result1.html&quot;)\n    )\n    (\n    Line(init_opts&#x3D;opts.InitOpts(width&#x3D;&quot;1600px&quot;, height&#x3D;&quot;800px&quot;))\n    .add_xaxis(xaxis_data&#x3D;date)\n    .add_yaxis(\n        series_name&#x3D;&quot;新增死亡&quot;,\n        y_axis&#x3D;deaths,\n        markpoint_opts&#x3D;opts.MarkPointOpts(\n            data&#x3D;[opts.MarkPointItem(type_&#x3D;&quot;max&quot;, name&#x3D;&quot;最大值&quot;)]\n        ),\n        markline_opts&#x3D;opts.MarkLineOpts(\n            data&#x3D;[\n                opts.MarkLineItem(type_&#x3D;&quot;average&quot;, name&#x3D;&quot;平均值&quot;),\n                opts.MarkLineItem(symbol&#x3D;&quot;none&quot;, x&#x3D;&quot;90%&quot;, y&#x3D;&quot;max&quot;),\n                opts.MarkLineItem(symbol&#x3D;&quot;circle&quot;, type_&#x3D;&quot;max&quot;, name&#x3D;&quot;最高点&quot;),\n            ]\n        ),\n    )\n    .set_global_opts(\n        title_opts&#x3D;opts.TitleOpts(title&#x3D;&quot;美国每日新增死亡折线图&quot;, subtitle&#x3D;&quot;&quot;),\n        tooltip_opts&#x3D;opts.TooltipOpts(trigger&#x3D;&quot;axis&quot;),\n        toolbox_opts&#x3D;opts.ToolboxOpts(is_show&#x3D;True),\n        xaxis_opts&#x3D;opts.AxisOpts(type_&#x3D;&quot;category&quot;, boundary_gap&#x3D;False),\n    )\n    .render(&quot;&#x2F;home&#x2F;hadoop&#x2F;result&#x2F;result2&#x2F;result2.html&quot;)\n    )\n \n \n \n \n#3.画出截止5.19，美国各州累计确诊、死亡人数和病死率---&gt;表格\ndef drawChart_3(index):\n    root &#x3D; &quot;&#x2F;home&#x2F;hadoop&#x2F;result&#x2F;result&quot; + str(index) +&quot;&#x2F;part-00000.json&quot;\n    allState &#x3D; []\n    with open(root, &#39;r&#39;) as f:\n        while True:\n            line &#x3D; f.readline()\n            if not line:                            # 到 EOF，返回空字符串，则终止循环\n                break\n            js &#x3D; json.loads(line)\n            row &#x3D; []\n            row.append(str(js[&#39;state&#39;]))\n            row.append(int(js[&#39;totalCases&#39;]))\n            row.append(int(js[&#39;totalDeaths&#39;]))\n            row.append(float(js[&#39;deathRate&#39;]))\n            allState.append(row)\n \n    table &#x3D; Table()\n \n    headers &#x3D; [&quot;State name&quot;, &quot;Total cases&quot;, &quot;Total deaths&quot;, &quot;Death rate&quot;]\n    rows &#x3D; allState\n    table.add(headers, rows)\n    table.set_global_opts(\n        title_opts&#x3D;ComponentTitleOpts(title&#x3D;&quot;美国各州疫情一览&quot;, subtitle&#x3D;&quot;&quot;)\n    )\n    table.render(&quot;&#x2F;home&#x2F;hadoop&#x2F;result&#x2F;result3&#x2F;result1.html&quot;)\n \n \n#4.画出美国确诊最多的10个州——&gt;词云图\ndef drawChart_4(index):\n    root &#x3D; &quot;&#x2F;home&#x2F;hadoop&#x2F;result&#x2F;result&quot; + str(index) +&quot;&#x2F;part-00000.json&quot;\n    data &#x3D; []\n    with open(root, &#39;r&#39;) as f:\n        while True:\n            line &#x3D; f.readline()\n            if not line:                            # 到 EOF，返回空字符串，则终止循环\n                break\n            js &#x3D; json.loads(line)\n            row&#x3D;(str(js[&#39;state&#39;]),int(js[&#39;totalCases&#39;]))\n            data.append(row)\n \n    c &#x3D; (\n    WordCloud()\n    .add(&quot;&quot;, data, word_size_range&#x3D;[20, 100], shape&#x3D;SymbolType.DIAMOND)\n    .set_global_opts(title_opts&#x3D;opts.TitleOpts(title&#x3D;&quot;美国各州确诊Top10&quot;))\n    .render(&quot;&#x2F;home&#x2F;hadoop&#x2F;result&#x2F;result4&#x2F;result1.html&quot;)\n    )\n \n \n \n \n#5.画出美国死亡最多的10个州——&gt;象柱状图\ndef drawChart_5(index):\n    root &#x3D; &quot;&#x2F;home&#x2F;hadoop&#x2F;result&#x2F;result&quot; + str(index) +&quot;&#x2F;part-00000.json&quot;\n    state &#x3D; []\n    totalDeath &#x3D; []\n    with open(root, &#39;r&#39;) as f:\n        while True:\n            line &#x3D; f.readline()\n            if not line:                            # 到 EOF，返回空字符串，则终止循环\n                break\n            js &#x3D; json.loads(line)\n            state.insert(0,str(js[&#39;state&#39;]))\n            totalDeath.insert(0,int(js[&#39;totalDeaths&#39;]))\n \n    c &#x3D; (\n    PictorialBar()\n    .add_xaxis(state)\n    .add_yaxis(\n        &quot;&quot;,\n        totalDeath,\n        label_opts&#x3D;opts.LabelOpts(is_show&#x3D;False),\n        symbol_size&#x3D;18,\n        symbol_repeat&#x3D;&quot;fixed&quot;,\n        symbol_offset&#x3D;[0, 0],\n        is_symbol_clip&#x3D;True,\n        symbol&#x3D;SymbolType.ROUND_RECT,\n    )\n    .reversal_axis()\n    .set_global_opts(\n        title_opts&#x3D;opts.TitleOpts(title&#x3D;&quot;PictorialBar-美国各州死亡人数Top10&quot;),\n        xaxis_opts&#x3D;opts.AxisOpts(is_show&#x3D;False),\n        yaxis_opts&#x3D;opts.AxisOpts(\n            axistick_opts&#x3D;opts.AxisTickOpts(is_show&#x3D;False),\n            axisline_opts&#x3D;opts.AxisLineOpts(\n                linestyle_opts&#x3D;opts.LineStyleOpts(opacity&#x3D;0)\n            ),\n        ),\n    )\n    .render(&quot;&#x2F;home&#x2F;hadoop&#x2F;result&#x2F;result5&#x2F;result1.html&quot;)\n    )\n \n \n \n#6.找出美国确诊最少的10个州——&gt;词云图\ndef drawChart_6(index):\n    root &#x3D; &quot;&#x2F;home&#x2F;hadoop&#x2F;result&#x2F;result&quot; + str(index) +&quot;&#x2F;part-00000.json&quot;\n    data &#x3D; []\n    with open(root, &#39;r&#39;) as f:\n        while True:\n            line &#x3D; f.readline()\n            if not line:                            # 到 EOF，返回空字符串，则终止循环\n                break\n            js &#x3D; json.loads(line)\n            row&#x3D;(str(js[&#39;state&#39;]),int(js[&#39;totalCases&#39;]))\n            data.append(row)\n \n    c &#x3D; (\n    WordCloud()\n    .add(&quot;&quot;, data, word_size_range&#x3D;[100, 20], shape&#x3D;SymbolType.DIAMOND)\n    .set_global_opts(title_opts&#x3D;opts.TitleOpts(title&#x3D;&quot;美国各州确诊最少的10个州&quot;))\n    .render(&quot;&#x2F;home&#x2F;hadoop&#x2F;result&#x2F;result6&#x2F;result1.html&quot;)\n    )\n \n \n \n \n#7.找出美国死亡最少的10个州——&gt;漏斗图\ndef drawChart_7(index):\n    root &#x3D; &quot;&#x2F;home&#x2F;hadoop&#x2F;result&#x2F;result&quot; + str(index) +&quot;&#x2F;part-00000.json&quot;\n    data &#x3D; []\n    with open(root, &#39;r&#39;) as f:\n        while True:\n            line &#x3D; f.readline()\n            if not line:                            # 到 EOF，返回空字符串，则终止循环\n                break\n            js &#x3D; json.loads(line)\n            data.insert(0,[str(js[&#39;state&#39;]),int(js[&#39;totalDeaths&#39;])])\n \n    c &#x3D; (\n    Funnel()\n    .add(\n        &quot;State&quot;,\n        data,\n        sort_&#x3D;&quot;ascending&quot;,\n        label_opts&#x3D;opts.LabelOpts(position&#x3D;&quot;inside&quot;),\n    )\n    .set_global_opts(title_opts&#x3D;opts.TitleOpts(title&#x3D;&quot;&quot;))\n    .render(&quot;&#x2F;home&#x2F;hadoop&#x2F;result&#x2F;result7&#x2F;result1.html&quot;)\n    )\n \n \n#8.美国的病死率---&gt;饼状图\ndef drawChart_8(index):\n    root &#x3D; &quot;&#x2F;home&#x2F;hadoop&#x2F;result&#x2F;result&quot; + str(index) +&quot;&#x2F;part-00000.json&quot;\n    values &#x3D; []\n    with open(root, &#39;r&#39;) as f:\n        while True:\n            line &#x3D; f.readline()\n            if not line:                            # 到 EOF，返回空字符串，则终止循环\n                break\n            js &#x3D; json.loads(line)\n            if str(js[&#39;state&#39;])&#x3D;&#x3D;&quot;USA&quot;:\n                values.append([&quot;Death(%)&quot;,round(float(js[&#39;deathRate&#39;])*100,2)])\n                values.append([&quot;No-Death(%)&quot;,100-round(float(js[&#39;deathRate&#39;])*100,2)])\n    c &#x3D; (\n    Pie()\n    .add(&quot;&quot;, values)\n    .set_colors([&quot;blcak&quot;,&quot;orange&quot;])\n    .set_global_opts(title_opts&#x3D;opts.TitleOpts(title&#x3D;&quot;全美的病死率&quot;))\n    .set_series_opts(label_opts&#x3D;opts.LabelOpts(formatter&#x3D;&quot;&#123;b&#125;: &#123;c&#125;&quot;))\n    .render(&quot;&#x2F;home&#x2F;hadoop&#x2F;result&#x2F;result8&#x2F;result1.html&quot;)\n    )\n \n \n#可视化主程序：\nindex &#x3D; 1\nwhile index&lt;9:\n    funcStr &#x3D; &quot;drawChart_&quot; + str(index)\n    eval(funcStr)(index)\n    index+&#x3D;1\n结果展示（1）美国每日的累计确诊病例数和死亡数——&gt;双柱状图（2）美国每日的新增确诊病例数——&gt;折线图（3）美国每日的新增死亡病例数——&gt;折线图\n（4）截止5.19，美国各州累计确诊、死亡人数和病死率—-&gt;表格（5）截止5.19，美国累计确诊人数前10的州—-&gt;词云图（6）截止5.19，美国累计死亡人数前10的州—-&gt;象柱状图（7）截止5.19，美国累计确诊人数最少的10个州—-&gt;词云图（8）截止5.19，美国累计死亡人数最少的10个州—-&gt;漏斗图（9）截止5.19，美国的病死率—-&gt;饼状图\n问题1 无法上传到hdfs中解决方法：需要先开启hadoop\n2 路径出现错误\nCaused by: java.io.IOException: Input path does not exist: file:&#x2F;user&#x2F;hadoop&#x2F;us-counties.txt\n\tat org.apache.hadoop.mapred.FileInputFormat.singleThreadedListStatus(FileInputFormat.java:278)\n\t... 101 more\n解决方法：修改路径\n3 pip下载pyecharts网络出错解决方法：换源，且换成手机热点下载\n","slug":"大数据7","date":"2023-03-27T13:50:49.000Z","categories_index":"信管","tags_index":"大数据","author_index":"Algernon"},{"id":"35c915c8f544b6b45f887f7e156148c0","title":"【大数据基础】MapReduce 实验","content":"https://dblab.xmu.edu.cn/blog/631/\n\n\n\n\n\n\n\n\n\nhttps://dblab.xmu.edu.cn/blog/31/\n实验过程下载hadoop-eclipse-plugin，将 release 中的 hadoop-eclipse-kepler-plugin-2.6.0.jar （还提供了 2.2.0 和 2.4.1 版本）复制到 Eclipse 安装目录的 plugins 文件夹中，运行 eclipse -clean 重启 Eclipse 即可（添加插件后只需要运行一次该命令，以后按照正常方式启动就行了）。\nunzip -qo ~&#x2F;下载&#x2F;hadoop2x-eclipse-plugin-master.zip -d ~&#x2F;下载    # 解压到 ~&#x2F;下载 中\nsudo cp ~&#x2F;下载&#x2F;hadoop2x-eclipse-plugin-master&#x2F;release&#x2F;hadoop-eclipse-plugin-2.6.0.jar &#x2F;usr&#x2F;lib&#x2F;eclipse&#x2F;plugins&#x2F;    # 复制到 eclipse 安装目录的 plugins 目录下\n&#x2F;usr&#x2F;lib&#x2F;eclipse&#x2F;eclipse -clean    # 添加插件后需要用这种方式使插\n\n配置 Hadoop-Eclipse-Plugin在继续配置前请确保已经开启了 Hadoop。插件需要进一步的配置。\n第一步：选择 Window 菜单下的 Preference。此时会弹出一个窗体，窗体的左侧会多出 Hadoop Map/Reduce 选项，点击此选项，选择 Hadoop 的安装目录（如/usr/local/hadoop，Ubuntu不好选择目录，直接输入就行）。第二步：切换 Map/Reduce 开发视图，选择 Window 菜单下选择 Open Perspective -&gt; Other（CentOS 是 Window -&gt; Perspective -&gt; Open Perspective -&gt; Other），弹出一个窗体，从中选择 Map/Reduce 选项即可进行切换。第三步：建立与 Hadoop 集群的连接，点击 Eclipse软件右下角的 Map/Reduce Locations 面板，在面板中单击右键，选择 New Hadoop Location。\n最后的设置如下图所示：\n在 Eclipse 中操作 HDFS 中的文件配置好后，点击左侧 Project Explorer 中的 MapReduce Location （点击三角形展开）就能直接查看 HDFS 中的文件列表了（HDFS 中要有文件，如下图是 WordCount 的输出结果），双击可以查看内容，右键点击可以上传、下载、删除 HDFS 中的文件，无需再通过繁琐的 hdfs dfs -ls 等命令进行操作了。以下output/part-r-00000文件记录了输出结果。\n如果无法查看，可右键点击 Location 尝试 Reconnect 或重启 Eclipse。\nTips: HDFS 中的内容变动后，Eclipse 不会同步刷新，需要右键点击 Project Explorer中的 MapReduce Location，选择 Refresh，才能看到变动后的文件。\n在 Eclipse 中创建 MapReduce 项目点击 File 菜单，选择 New -&gt; Project…:选择 Map/Reduce Project，点击 Next。填写 Project name 为 WordCount 即可，点击 Finish 就创建好了项目。此时在左侧的 Project Explorer 就能看到刚才建立的项目了。接着右键点击刚创建的 WordCount 项目，选择 New -&gt; Class需要填写两个地方：在 Package 处填写 org.apache.hadoop.examples；在 Name 处填写 WordCount。创建 Class 完成后，在 Project 的 src 中就能看到 WordCount.java 这个文件。将如下 WordCount 的代码复制到该文件中。\npackage org.apache.hadoop.examples;\n \nimport java.io.IOException;\nimport java.util.Iterator;\nimport java.util.StringTokenizer;\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.io.IntWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapreduce.Job;\nimport org.apache.hadoop.mapreduce.Mapper;\nimport org.apache.hadoop.mapreduce.Reducer;\nimport org.apache.hadoop.mapreduce.lib.input.FileInputFormat;\nimport org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;\nimport org.apache.hadoop.util.GenericOptionsParser;\n \npublic class WordCount &#123;\n    public WordCount() &#123;\n    &#125;\n \n    public static void main(String[] args) throws Exception &#123;\n        Configuration conf &#x3D; new Configuration();\n        String[] otherArgs &#x3D; (new GenericOptionsParser(conf, args)).getRemainingArgs();\n        if(otherArgs.length &lt; 2) &#123;\n            System.err.println(&quot;Usage: wordcount &lt;in&gt; [&lt;in&gt;...] &lt;out&gt;&quot;);\n            System.exit(2);\n        &#125;\n \n        Job job &#x3D; Job.getInstance(conf, &quot;word count&quot;);\n        job.setJarByClass(WordCount.class);\n        job.setMapperClass(WordCount.TokenizerMapper.class);\n        job.setCombinerClass(WordCount.IntSumReducer.class);\n        job.setReducerClass(WordCount.IntSumReducer.class);\n        job.setOutputKeyClass(Text.class);\n        job.setOutputValueClass(IntWritable.class);\n \n        for(int i &#x3D; 0; i &lt; otherArgs.length - 1; ++i) &#123;\n            FileInputFormat.addInputPath(job, new Path(otherArgs[i]));\n        &#125;\n \n        FileOutputFormat.setOutputPath(job, new Path(otherArgs[otherArgs.length - 1]));\n        System.exit(job.waitForCompletion(true)?0:1);\n    &#125;\n \n    public static class IntSumReducer extends Reducer&lt;Text, IntWritable, Text, IntWritable&gt; &#123;\n        private IntWritable result &#x3D; new IntWritable();\n \n        public IntSumReducer() &#123;\n        &#125;\n \n        public void reduce(Text key, Iterable&lt;IntWritable&gt; values, Reducer&lt;Text, IntWritable, Text, IntWritable&gt;.Context context) throws IOException, InterruptedException &#123;\n            int sum &#x3D; 0;\n \n            IntWritable val;\n            for(Iterator i$ &#x3D; values.iterator(); i$.hasNext(); sum +&#x3D; val.get()) &#123;\n                val &#x3D; (IntWritable)i$.next();\n            &#125;\n \n            this.result.set(sum);\n            context.write(key, this.result);\n        &#125;\n    &#125;\n \n    public static class TokenizerMapper extends Mapper&lt;Object, Text, Text, IntWritable&gt; &#123;\n        private static final IntWritable one &#x3D; new IntWritable(1);\n        private Text word &#x3D; new Text();\n \n        public TokenizerMapper() &#123;\n        &#125;\n \n        public void map(Object key, Text value, Mapper&lt;Object, Text, Text, IntWritable&gt;.Context context) throws IOException, InterruptedException &#123;\n            StringTokenizer itr &#x3D; new StringTokenizer(value.toString());\n \n            while(itr.hasMoreTokens()) &#123;\n                this.word.set(itr.nextToken());\n                context.write(this.word, one);\n            &#125;\n \n        &#125;\n    &#125;\n&#125;\n通过 Eclipse 运行 MapReduce在运行 MapReduce 程序前，还需要执行一项重要操作（也就是上面提到的通过复制配置文件解决参数设置问题）：将 /usr/local/hadoop/etc/hadoop 中将有修改过的配置文件（如伪分布式需要 core-site.xml 和 hdfs-site.xml），以及 log4j.properties 复制到 WordCount 项目下的 src 文件夹（~/workspace/WordCount/src）中：\ncp &#x2F;usr&#x2F;local&#x2F;hadoop&#x2F;etc&#x2F;hadoop&#x2F;core-site.xml ~&#x2F;workspace&#x2F;WordCount&#x2F;src\ncp &#x2F;usr&#x2F;local&#x2F;hadoop&#x2F;etc&#x2F;hadoop&#x2F;hdfs-site.xml ~&#x2F;workspace&#x2F;WordCount&#x2F;src\ncp &#x2F;usr&#x2F;local&#x2F;hadoop&#x2F;etc&#x2F;hadoop&#x2F;log4j.properties ~&#x2F;workspace&#x2F;WordCount&#x2F;src\n这里写代码有权限问题，我们直接在图形化界面上复制：\n复制完成后，务必右键点击 WordCount 选择 refresh 进行刷新（不会自动刷新，需要手动刷新），可以看到文件结构如下所示：点击工具栏中的 Run 图标，或者右键点击 Project Explorer 中的 WordCount.java，选择 Run As -&gt; Run on Hadoop，就可以运行 MapReduce 程序了。不过由于没有指定参数，运行时会提示 “Usage: wordcount “，需要通过Eclipse设定一下运行参数。\n右键点击刚创建的 WordCount.java，选择 Run As -&gt; Run Configurations，在此处可以设置运行时的相关参数（如果 Java Application 下面没有 WordCount，那么需要先双击 Java Application）。切换到 “Arguments” 栏，在 Program arguments 处填写 “input output” 就可以了。或者也可以直接在代码中设置好输入参数。可将代码 main() 函数的 String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs(); 改为：\n&#x2F;&#x2F; String[] otherArgs &#x3D; new GenericOptionsParser(conf, args).getRemainingArgs();\nString[] otherArgs&#x3D;new String[]&#123;&quot;input&quot;,&quot;output&quot;&#125;; &#x2F;* 直接设置输入参数 *&#x2F;\n设定参数后，再次运行程序，可以看到运行成功的提示，刷新 DFS Location 后也能看到输出的 output 文件夹。然后就可以使用 Eclipse 方便的进行 MapReduce程序的开发了。\n问题及处理1  无法解压并移动文件原因：eclipse是在ubuntu自带的snap商店里下载的，而snap有很高的权限，即使用sudo和su也不好修改。解决方法：从软件安装中心卸载，并使用安装包重新安装在对应地址。sudo cp ~&#x2F;下载&#x2F;hadoop2x-eclipse-plugin-master&#x2F;release&#x2F;hadoop-eclipse-plugin-2.6.0.jar &#x2F;snap&#x2F;eclipse&#x2F;66&#x2F;plugins&#x2F;\n\n2 java安装包版本不匹配解决方法：\n\n\n\n\n\n\n\n\n\nhttps://blog.csdn.net/weixin_44156420/article/details/106906023\n这是版本的问题，为了之后实验顺畅进行，就不强行更改了。\n心得与体会这次实验比较简单，最大的障碍是上文中的问题1：无法解压并移动文件，在经过一上午和老师的讨论，以及查找资料后发现，ubuntu软件安装中心的安装地址在snap下，而这个的权限很高，直接使用sudo无法修改，所以中午回去使用官网的安装包，解压安装一步到位。之后的流程就很顺畅了。\n","slug":"大数据6","date":"2023-03-15T13:50:49.000Z","categories_index":"信管","tags_index":"大数据","author_index":"Algernon"},{"id":"f8ebb92f8b4529095c1c2d3c0a9053f4","title":"【大数据基础】HBase2.2.2安装及编程实践指南","content":"实验\n\n\n\n\n\n\n\n\nhttps://dblab.xmu.edu.cn/blog/2442/\nHBase2.2.2安装&gt;\n\n\n\n\n\n\n\n\n\n解压安装包hbase-2.2.2-bin.tar.gz至路径 /usr/local，命令如下：\ncd ~\nsudo tar -zxf ~&#x2F;下载&#x2F;hbase-2.2.2-bin.tar.gz -C &#x2F;usr&#x2F;local\n将解压的文件名hbase-2.2.2改为hbase，以方便使用，命令如下：\ncd &#x2F;usr&#x2F;local\nsudo mv .&#x2F;hbase-2.2.2 .&#x2F;hbase\n把hbase目录权限赋予给hadoop用户：\nsudo chown -R hadoop .&#x2F;hbase\n配置环境变量将hbase下的bin目录添加到path中，这样，启动hbase就无需到/usr/local/hbase目录下，大大的方便了hbase的使用。教程下面的部分还是切换到了/usr/local/hbase目录操作，有助于初学者理解运行过程，熟练之后可以不必切换。编辑~/.bashrc文件\nvim ~&#x2F;.bashrc\n如果已经引入过PATH请在export PATH这行追加/usr/local/hbase/bin，这里的“：”是分隔符。如下图：编辑完成后，再执行source命令使上述配置在当前终端立即生效，命令如下：\nsource ~&#x2F;.bashrc\n添加HBase权限\ncd &#x2F;usr&#x2F;local\nsudo chown -R hadoop .&#x2F;hbase       #将hbase下的所有文件的所有者改为hadoop，hadoop是当前用户的用户名。\n查看HBase版本，确定hbase安装成功,命令如下：\n&#x2F;usr&#x2F;local&#x2F;hbase&#x2F;bin&#x2F;hbase version\nHBase配置HBase有三种运行模式，单机模式、伪分布式模式、分布式模式。作为学习，我们重点讨论单机模式和伪分布式模式。以下先决条件很重要，比如没有配置JAVA_HOME环境变量，就会报错。\n\njdk\nHadoop( 单机模式不需要，伪分布式模式和分布式模式需要)\nSSH单机模式配置配置/usr/local/hbase/conf/hbase-env.sh 。配置JAVA环境变量，并添加配置HBASE_MANAGES_ZK为true，用vi命令打开并编辑hbase-env.sh，命令如下：\n\nvim &#x2F;usr&#x2F;local&#x2F;hbase&#x2F;conf&#x2F;hbase-env.sh\n配置JAVA环境变量。JDK的安装目录是/usr/lib/jvm/jdk1.8.0_162， 则JAVA _HOME =/usr/lib/jvm/jdk1.8.0_162；配置HBASE_MANAGES_ZK为true，表示由hbase自己管理zookeeper，不需要单独的zookeeper。hbase-env.sh中本来就存在这些变量的配置，大家只需要删除前面的#并修改配置内容即可(#代表注释)：\nexport JAVA_HOME&#x3D;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;jdk1.8.0_162\nexport HBASE_MANAGES_ZK&#x3D;true \n配置/usr/local/hbase/conf/hbase-site.xml打开并编辑hbase-site.xml，命令如下：\nvim &#x2F;usr&#x2F;local&#x2F;hbase&#x2F;conf&#x2F;hbase-site.xml\n在启动HBase前需要设置属性hbase.rootdir，用于指定HBase数据的存储位置，因为如果不设置的话，hbase.rootdir默认为/tmp/hbase-${user.name},这意味着每次重启系统都会丢失数据。此处设置为HBase安装目录下的hbase-tmp文件夹即（/usr/local/hbase/hbase-tmp）,添加配置如下：\n&lt;configuration&gt;\n        &lt;property&gt;\n                &lt;name&gt;hbase.rootdir&lt;&#x2F;name&gt;\n                &lt;value&gt;file:&#x2F;&#x2F;&#x2F;usr&#x2F;local&#x2F;hbase&#x2F;hbase-tmp&lt;&#x2F;value&gt;\n        &lt;&#x2F;property&gt;\n&lt;&#x2F;configuration&gt;\n接下来测试运行。首先切换目录至HBase安装目录/usr/local/hbase；再启动HBase。命令如下：\ncd &#x2F;usr&#x2F;local&#x2F;hbase\nbin&#x2F;start-hbase.sh\nbin&#x2F;hbase shell\n上述三条命令中，sudo bin/start-hbase.sh用于启动HBase，bin/hbase shell用于打开shell命令行模式，用户可以通过输入shell命令操作HBase数据库。成功启动HBase，截图如下：停止HBase运行,命令如下：bin&#x2F;stop-hbase.sh\n\n伪分布式模式配置1.配置/usr/local/hbase/conf/hbase-env.sh。命令如下：\nvim &#x2F;usr&#x2F;local&#x2F;hbase&#x2F;conf&#x2F;hbase-env.sh\n配置JAVA_HOME，HBASE_CLASSPATH，HBASE_MANAGES_ZK.HBASE_CLASSPATH设置为本机HBase安装目录下的conf目录（即/usr/local/hbase/conf）\nexport JAVA_HOME&#x3D;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;jdk1.8.0_162\nexport HBASE_CLASSPATH&#x3D;&#x2F;usr&#x2F;local&#x2F;hbase&#x2F;conf \nexport HBASE_MANAGES_ZK&#x3D;true\n配置/usr/local/hbase/conf/hbase-site.xml用命令vi打开并编辑hbase-site.xml，命令如下：\nvim &#x2F;usr&#x2F;local&#x2F;hbase&#x2F;conf&#x2F;hbase-site.xml\n修改hbase.rootdir，指定HBase数据在HDFS上的存储路径；将属性hbase.cluter.distributed设置为true。假设当前Hadoop集群运行在伪分布式模式下，在本机上运行，且NameNode运行在9000端口。\n&lt;configuration&gt;\n        &lt;property&gt;\n                &lt;name&gt;hbase.rootdir&lt;&#x2F;name&gt;\n                &lt;value&gt;hdfs:&#x2F;&#x2F;localhost:9000&#x2F;hbase&lt;&#x2F;value&gt;\n        &lt;&#x2F;property&gt;\n        &lt;property&gt;\n                &lt;name&gt;hbase.cluster.distributed&lt;&#x2F;name&gt;\n                &lt;value&gt;true&lt;&#x2F;value&gt;\n        &lt;&#x2F;property&gt;\n        &lt;property&gt;\n        &lt;name&gt;hbase.unsafe.stream.capability.enforce&lt;&#x2F;name&gt;\n        &lt;value&gt;false&lt;&#x2F;value&gt;\n    &lt;&#x2F;property&gt;\n&lt;&#x2F;configuration&gt;\n接下来测试运行HBase。第一步：首先登陆ssh，之前设置了无密码登陆，因此这里不需要密码；再切换目录至/usr/local/hadoop ；再启动hadoop，如果已经启动hadoop请跳过此步骤。命令如下：\nssh localhost\ncd &#x2F;usr&#x2F;local&#x2F;hadoop\n.&#x2F;sbin&#x2F;start-dfs.sh\n输入命令jps，能看到NameNode,DataNode和SecondaryNameNode都已经成功启动，表示hadoop启动成功，截图如下：\n第二步：切换目录至/usr/local/hbase;再启动HBase.命令如下：\ncd &#x2F;usr&#x2F;local&#x2F;hbase\nbin&#x2F;start-hbase.sh\n启动成功，输入命令jps，看到以下界面说明hbase启动成功进入shell界面：\nbin&#x2F;hbase shell\n停止HBase运行,命令如下：bin&#x2F;stop-hbase.sh\n注意：如果在操作HBase的过程中发生错误，可以通过{HBASE_HOME}目录（/usr/local/hbase）下的logs子目录中的日志文件查看错误原因。这里启动关闭Hadoop和HBase的顺序一定是：启动Hadoop—&gt;启动HBase—&gt;关闭HBase—&gt;关闭Hadoop\n编程实践利用Shell命令HBase中创建表 HBase中用create命令创建表，具体如下： create &#39;student&#39;,&#39;Sname&#39;,&#39;Ssex&#39;,&#39;Sage&#39;,&#39;Sdept&#39;,&#39;course&#39; create &#39;student&#39;,&#39;Sname&#39;,&#39;Score&#39;,&#39;course&#39;,&#39;grade&#39; 此时，即创建了一个“student”表，属性有：Sname,Ssex,Sage,Sdept,course。因为HBase的表中会有一个系统默认的属性作为行键，无需自行创建，默认为put命令操作中表名后第一个数据。创建完“student”表后，可通过describe命令查看“student”表的基本信息。命令执行截图如下：\nHBase数据库基本操作本小节主要介绍HBase的增、删、改、查操作。在添加数据时，HBase会自动为添加的数据添加一个时间戳，故在需要修改数据时，只需直接添加数据，HBase即会生成一个新的版本，从而完成“改”操作，旧的版本依旧保留，系统会定时回收垃圾数据，只留下最新的几个版本，保存的版本数可以在创建表的时候指定。\n添加数据HBase中用put命令添加数据，注意：一次只能为一个表的一行数据的一个列，也就是一个单元格添加一个数据，所以直接用shell命令插入数据效率很低，在实际应用中，一般都是利用编程操作数据。当运行命令：put ‘student’,’95001’,’Sname’,’LiYing’时，即为student表添加了学号为95001，名字为LiYing的一行数据，其行键为95001。put &#39;student&#39;,&#39;95001&#39;,&#39;Sname&#39;,&#39;LiYing&#39;\n\nput &#39;student&#39;,&#39;95001&#39;,&#39;course:math&#39;,&#39;80&#39;\n\n删除数据在HBase中用delete以及deleteall命令进行删除数据操作，它们的区别是：1. delete用于删除一个数据，是put的反向操作；2. deleteall操作用于删除一行数据。\n\ndelete命令delete &#39;student&#39;,&#39;95001&#39;,&#39;Ssex&#39;\n\n\n\n\ndeleteall命令\n\ndeleteall &#39;student&#39;,&#39;95001&#39;\n查看数据HBase中有两个用于查看数据的命令：1. get命令，用于查看表的某一行数据；2. scan命令用于查看某个表的全部数据\n\nget命令get &#39;student&#39;,&#39;95001&#39;\n\n\n\n\nscan命令\n\nscan &#39;student&#39;\n删除表删除表有两步，第一步先让该表不可用，第二步删除表。\ndisable &#39;student&#39;  \ndrop &#39;student&#39;\n查询表历史数据查询表的历史版本，需要两步。1、在创建表的时候，指定保存的版本数（假设指定为5）2、插入数据然后更新数据，使其产生历史版本数据，注意：这里插入数据和更新数据都是用put命令\nput &#39;teacher&#39;,&#39;91001&#39;,&#39;username&#39;,&#39;Mary&#39;\nput &#39;teacher&#39;,&#39;91001&#39;,&#39;username&#39;,&#39;Mary1&#39;\nput &#39;teacher&#39;,&#39;91001&#39;,&#39;username&#39;,&#39;Mary2&#39;\nput &#39;teacher&#39;,&#39;91001&#39;,&#39;username&#39;,&#39;Mary3&#39;\nput &#39;teacher&#39;,&#39;91001&#39;,&#39;username&#39;,&#39;Mary4&#39;  \nput &#39;teacher&#39;,&#39;91001&#39;,&#39;username&#39;,&#39;Mary5&#39;\n3、查询时，指定查询的历史版本数。默认会查询出最新的数据。（有效取值为1到5）\nget &#39;teacher&#39;,&#39;91001&#39;,&#123;COLUMN&#x3D;&gt;&#39;username&#39;,VERSIONS&#x3D;&gt;5&#125;\n退出HBase数据库表操作最后退出数据库操作，输入exit命令即可退出，注意：这里退出HBase数据库是退出对数据库表的操作，而不是停止启动HBase数据库后台运行。\nexit\n\nHBase Java API编程实践本实例采用Eclipse开发工具。启动Eclipse，启动以后，出现如下图所示界面，点击界面右下角的“Launch”按钮。\n2023.3.20点击界面顶部的“File”菜单，在弹出的子菜单（如下图所示）中选择“New”，再选择子菜单中的“Java Project”。这时会弹出一个Java工程创建对话框（如下图所示），在“Project name”文本框中输入“HBaseExample”，在“JRE”选项卡中选中第2项“Use a project specific JRE”，然后点击界面底部的“Next”按钮。在弹出的界面中（如下图所示），用鼠标点击“Libraries”选项卡，然后，点击界面右侧的“Add External JARs…”按钮。在弹出的“JAR Selection”界面中（如下图所示），进入到“/usr/local/hbase/lib”目录，选中该目录下的所有jar文件（注意，不要选中client-facing-thirdparty、ruby、shaded-clients和zkcli这四个目录），然后，点击界面底部的“OK”按钮。然后，在“JAR Selection”界面中（如下图所示），点击进入到“client-facing-thirdparty”目录下。在“client-facing-thirdparty”目录下（如下图所示），选中所有jar文件，再点击界面底部的“OK”按钮。然后，再点击界面底部的“Finish”按钮。\n在界面（如下图所示）左侧的“HBaseExample”工程名称上单击鼠标右键，在弹出的菜单中选择“New”，再在弹出的子菜单中选择“Class”。在弹出的“New Java Class”对话框（如下图所示）中，在“Name”文本框中输入“ExampleForHBase”，然后，点击界面底部的“Finish”按钮。在代码窗口中（如下图所示），ExampleForHBase.java代码内容输入。ExampleForHBase.java代码内容具体如下：\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.hbase.*;\nimport org.apache.hadoop.hbase.client.*;\nimport org.apache.hadoop.hbase.util.Bytes;\n \nimport java.io.IOException;\npublic class ExampleForHBase &#123;\n    public static Configuration configuration;\n    public static Connection connection;\n    public static Admin admin;\n    public static void main(String[] args)throws IOException&#123;\n        init();\n        createTable(&quot;student&quot;,new String[]&#123;&quot;score&quot;&#125;);\n        insertData(&quot;student&quot;,&quot;zhangsan&quot;,&quot;score&quot;,&quot;English&quot;,&quot;69&quot;);\n        insertData(&quot;student&quot;,&quot;zhangsan&quot;,&quot;score&quot;,&quot;Math&quot;,&quot;86&quot;);\n        insertData(&quot;student&quot;,&quot;zhangsan&quot;,&quot;score&quot;,&quot;Computer&quot;,&quot;77&quot;);\n        getData(&quot;student&quot;, &quot;zhangsan&quot;, &quot;score&quot;,&quot;English&quot;);\n        close();\n    &#125;\n \n    public static void init()&#123;\n        configuration  &#x3D; HBaseConfiguration.create();\n        configuration.set(&quot;hbase.rootdir&quot;,&quot;hdfs:&#x2F;&#x2F;localhost:9000&#x2F;hbase&quot;);\n        try&#123;\n            connection &#x3D; ConnectionFactory.createConnection(configuration);\n            admin &#x3D; connection.getAdmin();\n        &#125;catch (IOException e)&#123;\n            e.printStackTrace();\n        &#125;\n    &#125;\n \n    public static void close()&#123;\n        try&#123;\n            if(admin !&#x3D; null)&#123;\n                admin.close();\n            &#125;\n            if(null !&#x3D; connection)&#123;\n                connection.close();\n            &#125;\n        &#125;catch (IOException e)&#123;\n            e.printStackTrace();\n        &#125;\n    &#125;\n \n    public static void createTable(String myTableName,String[] colFamily) throws IOException &#123;\n        TableName tableName &#x3D; TableName.valueOf(myTableName);\n        if(admin.tableExists(tableName))&#123;\n            System.out.println(&quot;talbe is exists!&quot;);\n        &#125;else &#123;\n            TableDescriptorBuilder tableDescriptor &#x3D; TableDescriptorBuilder.newBuilder(tableName);\n            for(String str:colFamily)&#123;\n                ColumnFamilyDescriptor family &#x3D; \nColumnFamilyDescriptorBuilder.newBuilder(Bytes.toBytes(str)).build();\n                tableDescriptor.setColumnFamily(family);\n            &#125;\n            admin.createTable(tableDescriptor.build());\n        &#125; \n    &#125;\n \n    public static void insertData(String tableName,String rowKey,String colFamily,String col,String val) throws IOException &#123; \n        Table table &#x3D; connection.getTable(TableName.valueOf(tableName));\n        Put put &#x3D; new Put(rowKey.getBytes());\n        put.addColumn(colFamily.getBytes(),col.getBytes(), val.getBytes());\n        table.put(put);\n        table.close(); \n    &#125;\n \n    public static void getData(String tableName,String rowKey,String colFamily, String col)throws  IOException&#123; \n        Table table &#x3D; connection.getTable(TableName.valueOf(tableName));\n        Get get &#x3D; new Get(rowKey.getBytes());\n        get.addColumn(colFamily.getBytes(),col.getBytes());\n        Result result &#x3D; table.get(get);\n        System.out.println(new String(result.getValue(colFamily.getBytes(),col&#x3D;&#x3D;null?null:col.getBytes())));\n        table.close(); \n    &#125;\n&#125;\n在开始运行程序之前，需要启动HDFS和HBase。\nssh localhost\ncd &#x2F;usr&#x2F;local&#x2F;hadoop\n.&#x2F;sbin&#x2F;start-dfs.sh\ncd &#x2F;usr&#x2F;local&#x2F;hbase\nbin&#x2F;start-hbase.sh\n\n然后，如下图所示，点击界面中的运行图标右侧的“倒三角”，在弹出的菜单中选择“Run As”，再在弹出的菜单中点击“1 Java Application”，开始运行程序。\nUnable to load native-hadoop library for your platform… using builtin-java classes where applicable\n\n问题1https://blog.csdn.net/weixin_45048331/article/details/109823555\n成功输出：\n2https://www.cnblogs.com/chuijingjing/p/13358872.html\n3\n\n\n\n\n\n\n\n\n\nhttps://www.jianshu.com/p/3cd4633db6c8\nhttps://blog.csdn.net/weixin_45473750/article/details/102478516\n报错代码：2023-03-20 09:25:47,770 INFO  [ReadOnlyZKClient-localhost:2181@0x184cf7cf] zookeeper.ZooKeeper (ZooKeeper.java:&lt;init&gt;(438)) - Initiating client connection, connectString&#x3D;localhost:2181 sessionTimeout&#x3D;90000 watcher&#x3D;org.apache.hadoop.hbase.zookeeper.ReadOnlyZKClient$$Lambda$14&#x2F;205406988@1c24dcb9\n2023-03-20 09:25:48,057 INFO  [ReadOnlyZKClient-localhost:2181@0x184cf7cf-SendThread(localhost:2181)] zookeeper.ClientCnxn (ClientCnxn.java:logStartConnect(1032)) - Opening socket connection to server localhost&#x2F;127.0.0.1:2181. Will not attempt to authenticate using SASL (unknown error)\n2023-03-20 09:25:48,114 INFO  [ReadOnlyZKClient-localhost:2181@0x184cf7cf-SendThread(localhost:2181)] zookeeper.ClientCnxn (ClientCnxn.java:primeConnection(876)) - Socket connection established to localhost&#x2F;127.0.0.1:2181, initiating session\n2023-03-20 09:25:48,596 INFO  [ReadOnlyZKClient-localhost:2181@0x184cf7cf-SendThread(localhost:2181)] zookeeper.ClientCnxn (ClientCnxn.java:onConnected(1299)) - Session establishment complete on server localhost&#x2F;127.0.0.1:2181, sessionid &#x3D; 0x186fc778015000a, negotiated timeout &#x3D; 90000\n4logs问题日志修改之后七个节点\n","slug":"大数据5","date":"2023-03-12T13:50:49.000Z","categories_index":"信管","tags_index":"大数据","author_index":"Algernon"},{"id":"9296c150b4eff59f49b0a87274d9be9a","title":"【大数据基础】分布式文件系统HDFS","content":"来源：\n\n\n\n\n\n\n\n\n\nhttps://dblab.xmu.edu.cn/blog/290/\n首先回顾上一节\n\n\n\n\n\n\n\n\n\nhttps://blog.csdn.net/Algernon98/article/details/129232375?spm=1001.2014.3001.5501\n我们已经得到了如下配置：\n利用Shell命令与HDFS进行交互在学习HDFS编程实践前，我们需要启动Hadoop。执行如下命令\ncd &#x2F;usr&#x2F;local&#x2F;hadoop\n.&#x2F;sbin&#x2F;start-dfs.sh #启动hadoop\n\n目录操作需要注意的是，Hadoop系统安装好以后，第一次使用HDFS时，需要首先在HDFS中创建用户目录。本教程全部采用hadoop用户登录Linux系统，因此，需要在HDFS中为hadoop用户创建一个用户目录，命令如下：\ncd &#x2F;usr&#x2F;local&#x2F;hadoop\n.&#x2F;bin&#x2F;hdfs dfs –mkdir –p &#x2F;user&#x2F;hadoop\n该命令中表示在HDFS中创建一个“/user/hadoop”目录，“–mkdir”是创建目录的操作，“-p”表示如果是多级目录，则父目录和子目录一起创建，这里“/user/hadoop”就是一个多级目录，因此必须使用参数“-p”，否则会出错。“/user/hadoop”目录就成为hadoop用户对应的用户目录，可以使用如下命令显示HDFS中与当前用户hadoop对应的用户目录下的内容：该命令中，“-ls”表示列出HDFS某个目录下的所有内容，“.”表示HDFS中的当前用户目录，也就是“/user/hadoop”目录，因此，上面的命令和下面的命令是等价的：.&#x2F;bin&#x2F;hdfs dfs –ls &#x2F;user&#x2F;hadoop\n如果要列出HDFS上的所有目录，可以使用如下命令：\n.&#x2F;bin&#x2F;hdfs dfs –ls\n下面，可以使用如下命令创建一个input目录：\n.&#x2F;bin&#x2F;hdfs dfs –mkdir input\n在创建个input目录时，采用了相对路径形式，实际上，这个input目录创建成功以后，它在HDFS中的完整路径是“/user/hadoop/input”。如果要在HDFS的根目录下创建一个名称为input的目录，则需要使用如下命令：\n.&#x2F;bin&#x2F;hdfs dfs –mkdir &#x2F;input\n可以使用rm命令删除一个目录，比如，可以使用如下命令删除刚才在HDFS中创建的“/input”目录（不是“/user/hadoop/input”目录）：\n.&#x2F;bin&#x2F;hdfs dfs –rm –r &#x2F;input\n上面命令中，“-r”参数表示如果删除“/input”目录及其子目录下的所有内容，如果要删除的一个目录包含了子目录，则必须使用“-r”参数，否则会执行失败。\n文件操作在实际应用中，经常需要从本地文件系统向HDFS中上传文件，或者把HDFS中的文件下载到本地文件系统中。首先，使用vim编辑器，在本地Linux文件系统的“/home/hadoop/”目录下创建一个文件myLocalFile.txt，里面可以随意输入一些单词，比如，输入如下三行：\nHadoop\nSpark\nXMU DBLAB\n下面的图里文本内容在左上角：然后，可以使用如下命令把本地文件系统的“/home/hadoop/myLocalFile.txt”上传到HDFS中的当前用户目录的input目录下，也就是上传到HDFS的“/user/hadoop/input/”目录下：\n.&#x2F;bin&#x2F;hdfs dfs -put &#x2F;home&#x2F;hadoop&#x2F;myLocalFile.txt  input\n可以使用ls命令查看一下文件是否成功上传到HDFS中，具体如下：\n.&#x2F;bin&#x2F;hdfs dfs –ls input\n下面使用如下命令查看HDFS中的myLocalFile.txt这个文件的内容：\n.&#x2F;bin&#x2F;hdfs dfs –cat input&#x2F;myLocalFile.txt\n下面把HDFS中的myLocalFile.txt文件下载到本地文件系统中的“/home/hadoop/下载/”这个目录下，命令如下：\n.&#x2F;bin&#x2F;hdfs dfs -get input&#x2F;myLocalFile.txt  &#x2F;home&#x2F;hadoop&#x2F;下载\n可以使用如下命令，到本地文件系统查看下载下来的文件myLocalFile.txt：\n$ cd ~\n$ cd 下载\n$ ls\n$ cat myLocalFile.txt\n最后，了解一下如何把文件从HDFS中的一个目录拷贝到HDFS中的另外一个目录。比如，如果要把HDFS的“/user/hadoop/input/myLocalFile.txt”文件，拷贝到HDFS的另外一个目录“/input”中（注意，这个input目录位于HDFS根目录下），可以使用如下命令：\n.&#x2F;bin&#x2F;hdfs dfs -cp input&#x2F;myLocalFile.txt  &#x2F;input\n利用Web界面管理HDFS打开Linux自带的Firefox浏览器，输入当初本地查看HDFS的链接（我的改成了8020，避免9000的端口占用）\n利用Java API与HDFS进行交互利用Java API进行交互，需要利用软件Eclipse编写Java程序。\n在Ubuntu中安装Eclipse在ubuntu的软件中心中找到Eclipse\n在Eclipse创建项目第一次打开Eclipse,需要填写workspace(工作空间)，用来保存程序所在的位置，这里按照默认，不需要改动，如下图\n点击“OK”按钮，进入Eclipse软件。\n可以看出，由于当前是采用hadoop用户登录了Linux系统，因此，默认的工作空间目录位于hadoop用户目录“/home/hadoop”下。Eclipse启动以后，会呈现如图所示的界面。\n\n选择“File-&gt;New-&gt;Java Project”菜单，开始创建一个Java工程，会弹出如图4-4所示界面。在“Project name”后面输入工程名称“HDFSExample”，选中“Use default location”，让这个Java工程的所有文件都保存到“/home/hadoop/workspace/HDFSExample”目录下。在“JRE”这个选项卡中，可以选择当前的Linux系统中已经安装好的JDK，比如java-8-openjdk-amd64。然后，点击界面底部的“Next&gt;”按钮，进入下一步的设置。\n\n\n\n\n\n\n\n\n\n注：我在实验过程中找到的不是这个jdk，同样，后面的版本也不是2.7.1\n\n\n为项目添加需要用到的JAR包进入下一步的设置以后，会弹出如图所示界面。需要在这个界面中加载该Java工程所需要用到的JAR包，这些JAR包中包含了可以访问HDFS的Java API。这些JAR包都位于Linux系统的Hadoop安装目录下，对于本教程而言，就是在“/usr/local/hadoop/share/hadoop”目录下。点击界面中的“Libraries”选项卡，然后，点击界面右侧的“Add External JARs…”按钮，会弹出如图所示界面。在该界面中，上面的一排目录按钮（即“usr”、“local”、“hadoop”、“share”、“hadoop”、“mapreduce”和“lib”），当点击某个目录按钮时，就会在下面列出该目录的内容。为了编写一个能够与HDFS交互的Java应用程序，一般需要向Java工程中添加以下JAR包：（1）”/usr/local/hadoop/share/hadoop/common”目录下的hadoop-common-2.7.1.jar和haoop-nfs-2.7.1.jar；（2）/usr/local/hadoop/share/hadoop/common/lib”目录下的所有JAR包；（3）“/usr/local/hadoop/share/hadoop/hdfs”目录下的haoop-hdfs-2.7.1.jar和haoop-hdfs-nfs-2.7.1.jar；（4）“/usr/local/hadoop/share/hadoop/hdfs/lib”目录下的所有JAR包。比如，如果要把“/usr/local/hadoop/share/hadoop/common”目录下的hadoop-common-2.7.1.jar和haoop-nfs-2.7.1.jar添加到当前的Java工程中，可以在界面中点击目录按钮，进入到common目录，然后，界面会显示出common目录下的所有内容（如图4-7所示）。\n\n\n\n\n\n\n\n\n\n注：我的版本是3.1.3\n\n编写Java应用程序代码下面编写一个Java应用程序，用来检测HDFS中是否存在一个文件。请在Eclipse工作界面左侧的“Package Explorer”面板中（如图4-9所示），找到刚才创建好的工程名称“HDFSExample”，然后在该工程名称上点击鼠标右键，在弹出的菜单中选择“New-&gt;Class”菜单。选择“New-&gt;Class”菜单以后会出现如图所示界面。在该界面中，只需要在“Name”后面输入新建的Java类文件的名称，这里采用名称“HDFSFileIfExist”，其他都可以采用默认设置，然后，点击界面右下角“Finish”按钮，出现如图所示界面。可以看出，Eclipse自动创建了一个名为“HDFSFileIfExist.java”的源代码文件，请在该文件中输入以下代码：\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.FileSystem;\nimport org.apache.hadoop.fs.Path;\npublic class HDFSFileIfExist &#123;\n    public static void main(String[] args)&#123;\n        try&#123;\n            String fileName &#x3D; &quot;test&quot;;\n            Configuration conf &#x3D; new Configuration();\n            conf.set(&quot;fs.defaultFS&quot;, &quot;hdfs:&#x2F;&#x2F;localhost:9000&quot;);\n            conf.set(&quot;fs.hdfs.impl&quot;, &quot;org.apache.hadoop.hdfs.DistributedFileSystem&quot;);\n            FileSystem fs &#x3D; FileSystem.get(conf);\n            if(fs.exists(new Path(fileName)))&#123;\n                System.out.println(&quot;文件存在&quot;);\n            &#125;else&#123;\n                System.out.println(&quot;文件不存在&quot;);\n            &#125;\n \n        &#125;catch (Exception e)&#123;\n            e.printStackTrace();\n        &#125;\n    &#125;\n&#125;\n该程序用来测试HDFS中是否存在一个文件，其中有一行代码：\nString fileName &#x3D; &quot;test&quot;\n这行代码给出了需要被检测的文件名称是“test”，没有给出路径全称，表示是采用了相对路径，实际上就是测试当前登录Linux系统的用户hadoop，在HDFS中对应的用户目录下是否存在test文件，也就是测试HDFS中的“/user/hadoop/”目录下是否存在test文件。\n编译运行程序在开始编译运行程序之前，请一定确保Hadoop已经启动运行，如果还没有启动，需要打开一个Linux终端，输入以下命令启动Hadoop：\ncd &#x2F;usr&#x2F;local&#x2F;hadoop\n.&#x2F;sbin&#x2F;start-dfs.sh\n现在就可以编译运行上面编写的代码。可以直接点击Eclipse工作界面上部的运行程序的快捷按钮，当把鼠标移动到该按钮上时，在弹出的菜单中选择“Run As”，继续在弹出来的菜单中选择“Java Application”。\n\n应用程序的部署下面介绍如何把Java应用程序生成JAR包，部署到Hadoop平台上运行。首先，在Hadoop安装目录下新建一个名称为myapp的目录，用来存放我们自己编写的Hadoop应用程序，可以在Linux的终端中执行如下命令：\ncd &#x2F;usr&#x2F;local&#x2F;hadoop\nmkdir myapp\n然后，请在Eclipse工作界面左侧的“Package Explorer”面板中，在工程名称“HDFSExample”上点击鼠标右键，在弹出的菜单中选择“Export”。在该界面中，选择“Runnable JAR file”，然后，点击“Next&gt;”按钮，弹出如下图所示界面。在该界面中，“Launch configuration”用于设置生成的JAR包被部署启动时运行的主类，需要在下拉列表中选择刚才配置的类“HDFSFileIfExist-HDFSExample”。在“Export destination”中需要设置JAR包要输出保存到哪个目录，比如，这里设置为“/usr/local/hadoop/myapp/HDFSExample.jar”。在“Library handling”下面选择“Extract required libraries into generated JAR”。然后，点击“Finish”按钮，会出现如下图所示界面。可以忽略该界面的信息，直接点击界面右下角的“OK”按钮，启动打包过程。打包过程结束后，会出现一个警告信息界面，如图所示。可以忽略该界面的信息，直接点击界面右下角的“OK”按钮。至此，已经顺利把HDFSExample工程打包生成了HDFSExample.jar。可以到Linux系统中查看一下生成的HDFSExample.jar文件，可以在Linux的终端中执行如下命令：\ncd &#x2F;usr&#x2F;local&#x2F;hadoop&#x2F;myapp\nls\n可以看到，“/usr/local/hadoop/myapp”目录下已经存在一个HDFSExample.jar文件。现在，就可以在Linux系统中，使用hadoop jar命令运行程序，命令如下：\ncd &#x2F;usr&#x2F;local&#x2F;hadoop\n.&#x2F;bin&#x2F;hadoop jar .&#x2F;myapp&#x2F;HDFSExample.jar\n或者也可以使用如下命令运行程序：\ncd &#x2F;usr&#x2F;local&#x2F;hadoop\njava -jar .&#x2F;myapp&#x2F;HDFSExample.jar\n\n附录写入文件import org.apache.hadoop.conf.Configuration;  \nimport org.apache.hadoop.fs.FileSystem;\nimport org.apache.hadoop.fs.FSDataOutputStream;\nimport org.apache.hadoop.fs.Path;\n \npublic class Chapter3 &#123;    \n        public static void main(String[] args) &#123; \n                try &#123;\n                        Configuration conf &#x3D; new Configuration();  \n                        conf.set(&quot;fs.defaultFS&quot;,&quot;hdfs:&#x2F;&#x2F;localhost:9000&quot;);\n                        conf.set(&quot;fs.hdfs.impl&quot;,&quot;org.apache.hadoop.hdfs.DistributedFileSystem&quot;);\n                        FileSystem fs &#x3D; FileSystem.get(conf);\n                        byte[] buff &#x3D; &quot;Hello world&quot;.getBytes(); &#x2F;&#x2F; 要写入的内容\n                        String filename &#x3D; &quot;test&quot;; &#x2F;&#x2F;要写入的文件名\n                        FSDataOutputStream os &#x3D; fs.create(new Path(filename));\n                        os.write(buff,0,buff.length);\n                        System.out.println(&quot;Create:&quot;+ filename);\n                        os.close();\n                        fs.close();\n                &#125; catch (Exception e) &#123;  \n                        e.printStackTrace();  \n                &#125;  \n        &#125;  \n&#125;\n\n判断文件是否存在import org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.FileSystem;\nimport org.apache.hadoop.fs.Path;\n \npublic class Chapter3 &#123;\n        public static void main(String[] args) &#123;\n                    try &#123;\n                            String filename &#x3D; &quot;test&quot;;\n \n                            Configuration conf &#x3D; new Configuration();\n                            conf.set(&quot;fs.defaultFS&quot;,&quot;hdfs:&#x2F;&#x2F;localhost:9000&quot;);\n                            conf.set(&quot;fs.hdfs.impl&quot;,&quot;org.apache.hadoop.hdfs.DistributedFileSystem&quot;);\n                            FileSystem fs &#x3D; FileSystem.get(conf);\n                            if(fs.exists(new Path(filename)))&#123;\n                                    System.out.println(&quot;文件存在&quot;);\n                            &#125;else&#123;\n                                    System.out.println(&quot;文件不存在&quot;);\n                            &#125;\n                            fs.close();\n                &#125; catch (Exception e) &#123;\n                        e.printStackTrace();\n                &#125;\n        &#125;\n&#125; \n\n读取文件import java.io.BufferedReader;\nimport java.io.InputStreamReader;\n \nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.FileSystem;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.fs.FSDataInputStream;\n \npublic class Chapter3 &#123;\n        public static void main(String[] args) &#123;\n                try &#123;\n                        Configuration conf &#x3D; new Configuration();\n                        conf.set(&quot;fs.defaultFS&quot;,&quot;hdfs:&#x2F;&#x2F;localhost:9000&quot;);\n                        conf.set(&quot;fs.hdfs.impl&quot;,&quot;org.apache.hadoop.hdfs.DistributedFileSystem&quot;);\n                        FileSystem fs &#x3D; FileSystem.get(conf);\n                        Path file &#x3D; new Path(&quot;test&quot;); \n                        FSDataInputStream getIt &#x3D; fs.open(file);\n                        BufferedReader d &#x3D; new BufferedReader(new InputStreamReader(getIt));\n                        String content &#x3D; d.readLine(); &#x2F;&#x2F;读取文件一行\n                        System.out.println(content);\n                        d.close(); &#x2F;&#x2F;关闭文件\n                        fs.close(); &#x2F;&#x2F;关闭hdfs\n                &#125; catch (Exception e) &#123;\n                        e.printStackTrace();\n                &#125;\n        &#125;\n&#125;\n\n问题与处理问题1\n\n\n\n\n\n\n\n\nhttps://ubuntu.dovov.com/16219/ubuntu-18-04%E9%94%81%E5%B1%8F%E8%83%8C%E6%99%AF%E6%8B%92%E7%BB%9D%E6%94%B9%E5%8F%98.html\n问题2\n\n\n\n\n\n\n\n\nhttps://ubuntu.dovov.com/16219/ubuntu-18-04%E9%94%81%E5%B1%8F%E8%83%8C%E6%99%AF%E6%8B%92%E7%BB%9D%E6%94%B9%E5%8F%98.html\n问题3https://www.cnblogs.com/DylanTam/p/9601859.html\n问题4https://blog.csdn.net/loulanyue_/article/details/90610109\n","slug":"大数据4","date":"2023-03-07T13:50:49.000Z","categories_index":"信管","tags_index":"大数据","author_index":"Algernon"},{"id":"78b7ddde844e9e414cf17e82e5c26627","title":"【大数据基础】Hadoop3.1.3安装教程","content":"来源：\n\n\n\n\n\n\n\n\n\nhttps://dblab.xmu.edu.cn/blog/2441/\n前言：重装解决一切bug！事实上，问题中的绝大部分衍生问题都可以通过重装解决。\n实验内容创建Hadoop用户首先按 ctrl+alt+t 打开终端窗口，输入如下命令创建新用户 :\nsudo useradd -m hadoop -s &#x2F;bin&#x2F;bash\n接着使用如下命令设置密码，可简单设置为 hadoop，按提示输入两次密码：sudo passwd hadoop\n可为 hadoop 用户增加管理员权限，方便部署，避免一些对新手来说比较棘手的权限问题：sudo adduser hadoop sudo\n换源安装最强（bushi）编辑器vimsudo apt-get install vim\nvim的常用模式有分为命令模式，插入模式，可视模式，正常模式。本教程中，只需要用到正常模式和插入模式。二者间的切换即可以帮助你完成本指南的学习。\n正常模式正常模式主要用来浏览文本内容。一开始打开vim都是正常模式。在任何模式下按下Esc键就可以返回正常模式插入编辑模式插入编辑模式则用来向文本中添加内容的。在正常模式下，输入i键即可进入插入编辑模式退出vim如果有利用vim修改任何的文本，一定要记得保存。Esc键退回到正常模式中，然后输入:wq即可保存文本并退出vim\n安装SSH、配置SSH无密码登陆集群、单节点模式都需要用到 SSH 登陆（类似于远程登陆，你可以登录某台 Linux 主机，并且在上面运行命令），Ubuntu 默认已安装了 SSH client，此外还需要安装 SSH server：sudo apt-get install openssh-server安装后，可以使用如下命令登陆本机：ssh localhost此时会有如下提示(SSH首次登陆提示)，输入 yes 。然后按提示输入密码 hadoop，这样就登陆到本机了。但这样登陆是需要每次输入密码的，我们需要配置成SSH无密码登陆比较方便。\n首先退出刚才的 ssh，就回到了我们原先的终端窗口，然后利用 ssh-keygen 生成密钥，并将密钥加入到授权中：\nexit                           # 退出刚才的 ssh localhost\ncd ~&#x2F;.ssh&#x2F;                     # 若没有该目录，请先执行一次ssh localhost\nssh-keygen -t rsa              # 会有提示，都按回车就可以\ncat .&#x2F;id_rsa.pub &gt;&gt; .&#x2F;authorized_keys  # 加入授权\n~的含义: 在 Linux 系统中，~ 代表的是用户的主文件夹，即 “/home/用户名” 这个目录，如你的用户名为 hadoop，则 ~ 就代表 “/home/hadoop/“。 此外，命令中的 # 后面的文字是注释，只需要输入前面命令即可。\n此时再用 ssh localhost 命令，无需输入密码就可以直接登陆了，如下图所示。\n安装java环境在Linux命令行界面中，执行如下Shell命令（注意：当前登录用户名是hadoop）：cd &#x2F;usr&#x2F;lib\nsudo mkdir jvm #创建&#x2F;usr&#x2F;lib&#x2F;jvm目录用来存放JDK文件\ncd ~ #进入hadoop用户的主目录\ncd Downloads  #注意区分大小写字母，刚才已经通过FTP软件把JDK安装包jdk-8u162-linux-x64.tar.gz上传到该目录下\nsudo tar -zxvf .&#x2F;jdk-8u162-linux-x64.tar.gz -C &#x2F;usr&#x2F;lib&#x2F;jvm  #把JDK文件解压到&#x2F;usr&#x2F;lib&#x2F;jvm目录下\nJDK文件解压缩以后，可以执行如下命令到/usr/lib/jvm目录查看一下：cd &#x2F;usr&#x2F;lib&#x2F;jvm\nls\n可以看到，在/usr/lib/jvm目录下有个jdk1.8.0_162目录。下面继续执行如下命令，设置环境变量：\ncd ~\nvim ~&#x2F;.bashrc\n用vim打开了hadoop这个用户的环境变量配置文件，请在这个文件的开头位置，添加如下几行内容：export JAVA_HOME&#x3D;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;jdk1.8.0_162\nexport JRE_HOME&#x3D;$&#123;JAVA_HOME&#125;&#x2F;jre\nexport CLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;lib:$&#123;JRE_HOME&#125;&#x2F;lib\nexport PATH&#x3D;$&#123;JAVA_HOME&#125;&#x2F;bin:$PATH\n保存.bashrc文件并退出vim编辑器。然后，继续执行如下命令让.bashrc文件的配置立即生效：source ~&#x2F;.bashrc这时，可以使用如下命令查看是否安装成功：java -version至此，就成功安装了Java环境。下面就可以进入Hadoop的安装。\n安装 Hadoop3.1.3在这里最好将hadoop解压出的文件备份，这样如果后续安装出了问题便于重新配置。sudo tar -zxf ~&#x2F;下载&#x2F;hadoop-3.1.3.tar.gz -C &#x2F;usr&#x2F;local    # 解压到&#x2F;usr&#x2F;local中\ncd &#x2F;usr&#x2F;local&#x2F;\nsudo mv .&#x2F;hadoop-3.1.3&#x2F; .&#x2F;hadoop            # 将文件夹名改为hadoop\nsudo chown -R hadoop .&#x2F;hadoop       # 修改文件权限Hadoop 解压后即可使用。输入如下命令来检查 Hadoop 是否可用，成功则会显示 Hadoop 版本信息：cd &#x2F;usr&#x2F;local&#x2F;hadoop\n.&#x2F;bin&#x2F;hadoop version\n\nHadoop单机配置(非分布式)Hadoop 默认模式为非分布式模式（本地模式），无需进行其他配置即可运行。非分布式即单 Java 进程，方便进行调试。\n现在我们可以执行例子来感受下 Hadoop 的运行。Hadoop 附带了丰富的例子（运行 ./bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-3.1.3.jar 可以看到所有例子），包括 wordcount、terasort、join、grep 等。\n在此我们选择运行 grep 例子，我们将 input 文件夹中的所有文件作为输入，筛选当中符合正则表达式 dfs[a-z.]+ 的单词并统计出现的次数，最后输出结果到 output 文件夹中。cd &#x2F;usr&#x2F;local&#x2F;hadoop\nmkdir .&#x2F;input\ncp .&#x2F;etc&#x2F;hadoop&#x2F;*.xml .&#x2F;input   # 将配置文件作为输入文件\n.&#x2F;bin&#x2F;hadoop jar .&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;hadoop-mapreduce-examples-3.1.3.jar grep .&#x2F;input .&#x2F;output &#39;dfs[a-z.]+&#39;\ncat .&#x2F;output&#x2F;*          # 查看运行结果执行成功后如下所示，输出了作业的相关信息，输出的结果是符合正则的单词 dfsadmin 出现了1次重装解决一切烦恼：注意，Hadoop 默认不会覆盖结果文件，因此再次运行上面实例会提示出错，需要先将 ./output 删除。\nrm -r .&#x2F;output\nHadoop伪分布式配置Hadoop 可以在单节点上以伪分布式的方式运行，Hadoop 进程以分离的 Java 进程来运行，节点既作为 NameNode 也作为 DataNode，同时，读取的是 HDFS 中的文件。\nHadoop 的配置文件位于 /usr/local/hadoop/etc/hadoop/ 中，伪分布式需要修改2个配置文件 core-site.xml 和 hdfs-site.xml 。Hadoop的配置文件是 xml 格式，每个配置以声明 property 的 name 和 value 的方式来实现。\n修改配置文件 core-site.xml (通过 gedit 编辑会比较方便: gedit ./etc/hadoop/core-site.xml)，将当中的\n&lt;configuration&gt;\n&lt;&#x2F;configuration&gt;\n修改为：\n&lt;configuration&gt;\n    &lt;property&gt;\n        &lt;name&gt;hadoop.tmp.dir&lt;&#x2F;name&gt;\n        &lt;value&gt;file:&#x2F;usr&#x2F;local&#x2F;hadoop&#x2F;tmp&lt;&#x2F;value&gt;\n        &lt;description&gt;Abase for other temporary directories.&lt;&#x2F;description&gt;\n    &lt;&#x2F;property&gt;\n    &lt;property&gt;\n        &lt;name&gt;fs.defaultFS&lt;&#x2F;name&gt;\n        &lt;value&gt;hdfs:&#x2F;&#x2F;localhost:9000&lt;&#x2F;value&gt;\n    &lt;&#x2F;property&gt;\n&lt;&#x2F;configuration&gt;\ngedit .&#x2F;etc&#x2F;hadoop&#x2F;core-site.xml\n\n&lt;configuration&gt;\n    &lt;property&gt;\n        &lt;name&gt;hadoop.tmp.dir&lt;&#x2F;name&gt;\n        &lt;value&gt;file:&#x2F;usr&#x2F;local&#x2F;hadoop&#x2F;tmp&lt;&#x2F;value&gt;\n        &lt;description&gt;Abase for other temporary directories.&lt;&#x2F;description&gt;\n    &lt;&#x2F;property&gt;\n    &lt;property&gt;\n        &lt;name&gt;fs.defaultFS&lt;&#x2F;name&gt;\n        &lt;value&gt;hdfs:&#x2F;&#x2F;localhost:9000&lt;&#x2F;value&gt;\n    &lt;&#x2F;property&gt;\n&lt;&#x2F;configuration&gt;\n同样的，修改配置文件 hdfs-site.xml：gedit .&#x2F;etc&#x2F;hadoop&#x2F;hdfs-site.xml\n&lt;configuration&gt;\n    &lt;property&gt;\n        &lt;name&gt;dfs.replication&lt;&#x2F;name&gt;\n        &lt;value&gt;1&lt;&#x2F;value&gt;\n    &lt;&#x2F;property&gt;\n    &lt;property&gt;\n        &lt;name&gt;dfs.namenode.name.dir&lt;&#x2F;name&gt;\n        &lt;value&gt;file:&#x2F;usr&#x2F;local&#x2F;hadoop&#x2F;tmp&#x2F;dfs&#x2F;name&lt;&#x2F;value&gt;\n    &lt;&#x2F;property&gt;\n    &lt;property&gt;\n        &lt;name&gt;dfs.datanode.data.dir&lt;&#x2F;name&gt;\n        &lt;value&gt;file:&#x2F;usr&#x2F;local&#x2F;hadoop&#x2F;tmp&#x2F;dfs&#x2F;data&lt;&#x2F;value&gt;\n    &lt;&#x2F;property&gt;\n&lt;&#x2F;configuration&gt;\nHadoop配置文件说明:\nHadoop 的运行方式是由配置文件决定的（运行 Hadoop 时会读取配置文件），因此如果需要从伪分布式模式切换回非分布式模式，需要删除 core-site.xml 中的配置项。\n此外，伪分布式虽然只需要配置 fs.defaultFS 和 dfs.replication 就可以运行（官方教程如此），不过若没有配置 hadoop.tmp.dir 参数，则默认使用的临时目录为 /tmp/hadoo-hadoop，而这个目录在重启时有可能被系统清理掉，导致必须重新执行 format 才行。所以我们进行了设置，同时也指定 dfs.namenode.name.dir 和 dfs.datanode.data.dir，否则在接下来的步骤中可能会出错。\n配置完成后，执行 NameNode 的格式化:cd &#x2F;usr&#x2F;local&#x2F;hadoop\n.&#x2F;bin&#x2F;hdfs namenode -format\n接着开启 NameNode 和 DataNode 守护进程。cd &#x2F;usr&#x2F;local&#x2F;hadoop\n.&#x2F;sbin&#x2F;start-dfs.sh  #start-dfs.sh是个完整的可执行文件，中间没有空格启动时可能会出现如下 WARN 提示：WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform… using builtin-java classes where applicable WARN 提示可以忽略，并不会影响正常使用。在这一步可能遇到千奇百怪的问题，请移步“问题”目录。启动完成后，可以通过命令 jps 来判断是否成功启动，若成功启动则会列出如下进程: “NameNode”、”DataNode” 和 “SecondaryNameNode”（如果 SecondaryNameNode 没有启动，请运行 sbin/stop-dfs.sh 关闭进程，然后再次尝试启动尝试）。如果没有 NameNode 或 DataNode ，那就是配置不成功，请仔细检查之前步骤，或通过查看启动日志排查原因。成功启动后，可以访问 Web 界面 http://localhost:9870 查看 NameNode 和 Datanode 信息，还可以在线查看 HDFS 中的文件。\n运行Hadoop伪分布式实例上面的单机模式，grep 例子读取的是本地数据，伪分布式读取的则是 HDFS 上的数据。要使用 HDFS，首先需要在 HDFS 中创建用户目录：\n.&#x2F;bin&#x2F;hdfs dfs -mkdir -p &#x2F;user&#x2F;hadoop\n注意: 教材《大数据技术原理与应用》的命令是以”./bin/hadoop dfs”开头的Shell命令方式，实际上有三种shell命令方式。\n\nhadoop fs\nhadoop dfs\nhdfs dfs\n\nhadoop fs适用于任何不同的文件系统，比如本地文件系统和HDFS文件系统hadoop dfs只能适用于HDFS文件系统hdfs dfs跟hadoop dfs的命令作用一样，也只能适用于HDFS文件系统\n接着将 ./etc/hadoop 中的 xml 文件作为输入文件复制到分布式文件系统中，即将 /usr/local/hadoop/etc/hadoop 复制到分布式文件系统中的 /user/hadoop/input 中。我们使用的是 hadoop 用户，并且已创建相应的用户目录 /user/hadoop ，因此在命令中就可以使用相对路径如 input，其对应的绝对路径就是 /user/hadoop/input:\n.&#x2F;bin&#x2F;hdfs dfs -mkdir input\n.&#x2F;bin&#x2F;hdfs dfs -put .&#x2F;etc&#x2F;hadoop&#x2F;*.xml input\n复制完成后，可以通过如下命令查看文件列表：\n.&#x2F;bin&#x2F;hdfs dfs -ls input\n伪分布式运行 MapReduce 作业的方式跟单机模式相同，区别在于伪分布式读取的是HDFS中的文件（可以将单机步骤中创建的本地 input 文件夹，输出结果 output 文件夹都删掉来验证这一点）。\n.&#x2F;bin&#x2F;hadoop jar .&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;hadoop-mapreduce-examples-3.1.3.jar grep input output &#39;dfs[a-z.]+&#39;\n查看运行结果的命令（查看的是位于 HDFS 中的输出结果）：.&#x2F;bin&#x2F;hdfs dfs -cat output&#x2F;*结果如下，注意到刚才我们已经更改了配置文件，所以运行结果不同。我们也可以将运行结果取回到本地：rm -r .&#x2F;output    # 先删除本地的 output 文件夹（如果存在）\n.&#x2F;bin&#x2F;hdfs dfs -get output .&#x2F;output     # 将 HDFS 上的 output 文件夹拷贝到本机\ncat .&#x2F;output&#x2F;*\nHadoop 运行程序时，输出目录不能存在，否则会提示错误 “org.apache.hadoop.mapred.FileAlreadyExistsException: Output directory hdfs://localhost:9000/user/hadoop/output already exists” ，因此若要再次执行，需要执行如下命令删除 output 文件夹:.&#x2F;bin&#x2F;hdfs dfs -rm -r output    # 删除 output 文件夹\n若要关闭 Hadoop，则运行.&#x2F;sbin&#x2F;stop-dfs.sh下次启动 hadoop 时，无需进行 NameNode 的初始化，只需要运行 ./sbin/start-dfs.sh 即可。\n问题与处理注意：问题2~5有一个一劳永逸的方法：重装。事实上，2~5中的许多问题都是来自于一个bug，只是越改越多越改越杂，在查询资料的过程中可以学到许多相关知识，加深了解，但如果只是想把结果跑出来的话，不如像亚历山大那样，抽出宝剑，斩断复杂的绳结。简单，粗暴，但是有效。如果想加深对技术和底层的了解，请移步问题2~5：\n1.java安装失败\n\n\n\n\n\n\n\n\n\nERROR: JAVA_HOME is not set and could not be found.\n参考文档：https://blog.csdn.net/qq_44081582/article/details/104640421\n\n切到 [hadoop]/etc/hadoop目录\n执行：vim hadoop-env.sh\n修改java_home路径和hadoop_conf_dir路径为具体的安装路径例如：\n\n\n\nexport JAVA_HOME&#x3D;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;jdk1.8.0_162\nexport HADOOP_CONF_DIR&#x3D;&#x2F;usr&#x2F;local&#x2F;hadoop\n\n这样就配置好了。\n2.ERROR: Attempting to operate on hdfs namenode as root这是万恶之源，虽然命令行加sudo可以避免许多权限问题，但这次尽量不要加sudo。参考文档：\n\n\n\n\n\n\n\n\n\nhttps://blog.csdn.net/weixin_49736959/article/details/108897129、\n使用vim配置：\n\n3.host:9000 failed on connection exception: java.net.ConnectException: 拒绝连接;问题描述：事实上是端口占用，我打开防火墙，把9000改成8020就解决了。\n4.localhost: ERROR: Cannot set priority of datanode process 6374问题描述：这个问题是真正的复杂，意味着你对配置文件的修改程度已经很大了，这个问题我查到的资料都没有很好的解决，这个时候重装为时未晚。最终效果如下：jps\n\n5.mkdir: Call From algernon-virtual-machine/127.0.1.1 to localhost:9000 failed on connection exception: java.net.ConnectException: 拒绝连接;这个问题同问题3，修改9000为8020，完工。\n成功结果localhost可查询：伪分布式输出结果：事实上，这个实验最后就这两张图 ，每一张图的结果代表了一个实验的成功结果。linux配置操作的关键是，如果前一个步骤没有完成，后一个步骤自然也会被卡住。一条路通了，那之后就会一往无前；一旦卡住，短则一两分钟，长则一两周。所谓“台上一分钟，台下十年功”，整个实验报告的含金量就在这两张图中，但为此不知重新配置了多少文件，甚至还重装了一次。\n心得与体会\n\n\n\n\n\n\n\n\n据说亚历山大大帝曾经解决了戈尔迪乌姆首都佛里吉亚的一个难题。他在进城的时候发现了一辆旧战车，车轭上有许多绳结紧紧地系在一起，根本看不出它们原先是怎么被系上去的。神谕说，谁解开这些结，谁就能统治亚细亚。亚历山大在这团粗糙的绳结前研究了一会儿，然后后退了两步，说神谕并不在意这个结是怎么解开的，接着他拔剑砍向绳结，被劈成两半的绳结就此解开了。\n如果认真看了问题2~5的解决方式，会发现这些文档中有的解决方法是矛盾的，有的要把文件设为root，然后报错之后继续找，方法是把文件改为hadoop——然后又查，发现解决方法是使用root用户——这不又绕回去了嘛！但我今天在实验课的时候是这样的，不仅如此，网上的答案千奇百怪，有的治标不治本，如果看一篇博客就对自己的配置文件加以修改，到最后只能收获一堆自相矛盾的bug文件。当然，还有一些硬核知识。\n事实上，计算机问题三板斧：重启、重装、重买，的确粗暴而有效。但我们遇到问题是不是就要重装呢？我一直认为：重装是最后手段。如果只是跟着教程懵懵懂懂把流程跑一遍，如果一次成功还行，如果卡住就难受了。这时选择重装，老老实实按照教程来，根据经验规则，“那么多人都做出来了”，那跟着教材走总会没问题；但学到什么了呢？在linux上配置环境做实验的过程犹如蒙眼于迷宫中寻找出路，被别人牵着绕啊绕，走到出口，实际上和在平地上并无区别，但如果自己去碰壁，找到经验、方法、教训，当没有人给予指引的时候，才会更容易找到方向。所以说不要怕折腾，折腾着就熟练了。等到系统被改的像忒修斯之船那样，在重装，从零开始也不迟。不过，这对备份要求挺高，平时常备快照，软件记得备份。同样，文件夹的分配，环境配置以及配置文件中的路径，一直都是bug高发地，在进行实验的过程中注意规范，也可以避免绝大多数问题。亚历山大有着斩断绳结的魄力，也有横亘一切困难的毅力。\n\n\n\n\n\n\n\n\n\n活跃于公元前4世纪的马其顿国王。他在远征波斯领地吕底亚的时候，神殿里供奉着一辆战车。战车是曾经的国王格尔迪奥斯捆在神殿支柱上的。当地流传着这样一个传说：“解开这个绳结的人就会成为亚细亚之王。”这是一个很多技艺高超的挑战者都没有解开的绳结。\n&gt;\n\n\n\n\n\n\n\n\n\n哲人：那么，你认为面对那个绳结的亚历山大大帝会怎么做呢？\n青年：是非常巧妙地解开了绳结，不久便成了亚细亚之王吧？\n哲人：不，并非如此。亚历山大大帝一看绳结非常牢固，于是便立即取出短剑将其一刀两断。\n青年：什么？！\n哲人：据传，当时他接着说道：“命运不是靠传说决定而要靠自己的剑开拓出来。我不需要传说的力量而要靠自己的剑去开创命运。”\n","slug":"大数据3","date":"2023-02-27T13:50:49.000Z","categories_index":"信管","tags_index":"大数据","author_index":"Algernon"},{"id":"6b74fce8d05b74231edb685307366d2f","title":"【大数据基础】Linux常用命令","content":"参考资料：\n\n\n\n\n\n\n\n\n\nhttps://www.runoob.com/w3cnote/linux-common-command-2.html\n1、ls命令就是 list 的缩写，通过 ls 命令不仅可以查看 linux 文件夹包含的文件，而且可以查看文件权限(包括目录、文件夹、文件权限)查看目录信息等等。\nls -a 列出目录所有文件，包含以.开始的隐藏文件\nls -A 列出除.及..的其它文件\nls -r 反序排列\nls -t 以文件修改时间排序\nls -S 以文件大小排序\nls -h 以易读大小显示\nls -l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来\n\n(1) 按易读方式按时间反序排序，并显示文件详细信息\nls -lhrt\n\n(2) 按大小反序显示文件详细信息\nls -lrS\n\n(3)列出当前目录中所有以”t”开头的目录的详细内容\nls -l t*\n(4) 列出文件绝对路径（不包含隐藏文件）\nls | sed &quot;s:^:&#96;pwd&#96;&#x2F;:&quot;\n\n(5) 列出文件绝对路径（包含隐藏文件）\nfind $pwd -maxdepth 1 | xargs ls -ld\n\n2、cd 命令cd(changeDirectory) 命令语法：\ncd [目录名]\n说明：切换当前目录至 dirName。\n实例：\n（1）进入要目录\ncd &#x2F;\n（2）进入 “home” 目录\ncd ~\n（3）进入上一次工作路径\ncd -\n（4）把上个命令的参数作为cd参数使用。\ncd !$\n\n3、pwd 命令pwd 命令用于查看当前工作目录路径。\n实例：\n（1）查看当前路径\npwd\n（2）查看软链接的实际路径\npwd -P\n\n4、mkdir 命令mkdir 命令用于创建文件夹。可用选项：\n\n\n\n\n\n\n\n\n\n-m: 对新建目录设置存取权限，也可以用 chmod 命令设置;-p: 可以是一个路径名称。此时若路径中的某些目录尚不存在,加上此选项后，系统将自动建立好那些尚不在的目录，即一次可以建立多个目录。\n实例：\n（1）当前工作目录下创建名为 t的文件夹\nmkdir t\n（2）在 tmp 目录下创建路径为 test/t1/t 的目录，若不存在，则创建：\nmkdir -p &#x2F;tmp&#x2F;test&#x2F;t1&#x2F;t\n注意，在这里要使用系统命令sudo\n5、rm 命令删除一个目录中的一个或多个文件或目录，如果没有使用 -r 选项，则 rm 不会删除目录。如果使用 rm 来删除文件，通常仍可以将该文件恢复原状。\nrm [选项] 文件…\n实例：\n（1）删除任何 .log 文件，删除前逐一询问确认：\nrm -i *.log\n（2）删除 test 子目录及子目录中所有档案删除，并且不用一一确认：\nrm -rf test\n\n（3）删除以 -f 开头的文件\nrm -- -f*\n6、rmdir 命令从一个目录中删除一个或多个子目录项，删除某目录时也必须具有对其父目录的写权限。\n注意：不能删除非空目录\n实例：\n（1）当 parent 子目录被删除后使它也成为空目录的话，则顺便一并删除：\nrmdir -p parent&#x2F;child&#x2F;child11\n7、mv 命令移动文件或修改文件名，根据第二参数类型（如目录，则移动文件；如为文件则重命令该文件）。\n当第二个参数为目录时，第一个参数可以是多个以空格分隔的文件或目录，然后移动第一个参数指定的多个文件到第二个参数指定的目录中。\n实例：\n（1）将文件 test.log 重命名为 test1.txt\nmv test.log test1.txt\n\n（2）将文件 log1.txt,log2.txt,log3.txt 移动到根的 test3 目录中\nmv llog1.txt log2.txt log3.txt &#x2F;test3\n\n（3）将文件 file1 改名为 file2，如果 file2 已经存在，则询问是否覆盖\nmv -i log1.txt log2.txt\n（4）移动当前文件夹下的所有文件到上一级目录\nmv * ..&#x2F;\n\n8、cp 命令将源文件复制至目标文件，或将多个源文件复制至目标目录。\n注意：命令行复制，如果目标文件已经存在会提示是否覆盖，而在 shell 脚本中，如果不加 -i 参数，则不会提示，而是直接覆盖！\n-i 提示-r 复制目录及目录内所有项目-a 复制的文件与原文件时间一样实例：\n（1）复制 a.txt 到 test 目录下，保持原文件时间，如果原文件存在提示是否覆盖。\ncp -ai a.txt test\n\n（2）为 a.txt 建立一个链接（快捷方式）\ncp -s a.txt link_a.txt\n9、cat 命令cat 主要有三大功能：\n1.一次显示整个文件:\ncat filename\n\n2.从键盘创建一个文件:\ncat &gt; filename\n只能创建新文件，不能编辑已有文件。\n3.将几个文件合并为一个文件:\ncat file1 file2 &gt; file\n\n\n\n\n\n\n\n\n\n-b 对非空输出行号-n 输出所有行号\n实例：\n（1）把 log2012.log 的文件内容加上行号后输入 log2013.log 这个文件里\ncat -n log2012.log log2013.log\n（2）把 log2012.log 和 log2013.log 的文件内容加上行号（空白行不加）之后将内容附加到 log.log 里\ncat -b log2012.log log2013.log log.log\n（3）使用 here doc 生成新文件\ncat &gt;log.txt &lt;&lt;EOF\n&gt;Hello\n&gt;World\n&gt;PWD&#x3D;$(pwd)\n&gt;EOF\nls -l log.txt\ncat log.txt\nHello\nWorld\nPWD&#x3D;&#x2F;opt&#x2F;soft&#x2F;test\n（4）反向列示\ntac log.txt\nPWD&#x3D;&#x2F;opt&#x2F;soft&#x2F;test\nWorld\nHello\n10、more 命令功能类似于 cat, more 会以一页一页的显示方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示。\n命令参数：\n+n      从笫 n 行开始显示\n-n       定义屏幕大小为n行\n+&#x2F;pattern 在每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示 \n-c       从顶部清屏，然后显示\n-d       提示“Press space to continue，’q’ to quit（按空格键继续，按q键退出）”，禁用响铃功能\n-l        忽略Ctrl+l（换页）字符\n-p       通过清除窗口而不是滚屏来对文件进行换页，与-c选项相似\n-s       把连续的多个空行显示为一行\n-u       把文件内容中的下画线去掉\n常用操作命令：\nEnter    向下 n 行，需要定义。默认为 1 行\nCtrl+F   向下滚动一屏\n空格键  向下滚动一屏\nCtrl+B  返回上一屏\n&#x3D;       输出当前行的行号\n:f     输出文件名和当前行的行号\nV      调用vi编辑器\n!命令   调用Shell，并执行命令\nq       退出more\n实例：\n（1）显示文件中从第3行起的内容\nmore +3 text.txt\n\n（2）在所列出文件目录详细信息，借助管道使每次显示 5 行\nls -l | more -5\n按空格显示下 5 行。\n11、less 命令less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。\n常用命令参数：\n-i  忽略搜索时的大小写\n-N  显示每行的行号\n-o  &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来\n-s  显示连续空行为一行\n&#x2F;字符串：向下搜索“字符串”的功能\n?字符串：向上搜索“字符串”的功能\nn：重复前一个搜索（与 &#x2F; 或 ? 有关）\nN：反向重复前一个搜索（与 &#x2F; 或 ? 有关）\n-x &lt;数字&gt; 将“tab”键显示为规定的数字空格\nb  向后翻一页\nd  向后翻半页\nh  显示帮助界面\nQ  退出less 命令\nu  向前滚动半页\ny  向前滚动一行\n空格键 滚动一行\n回车键 滚动一页\n[pagedown]： 向下翻动一页\n[pageup]：   向上翻动一页\n实例：\n（1）ps 查看进程信息并通过 less 分页显示\nps -aux | less -N\n\n（2）查看多个文件\nless 1.log 2.log\n可以使用 n 查看下一个，使用 p 查看前一个。\n12、head 命令head 用来显示档案的开头至标准输出中，默认 head 命令打印其相应文件的开头 10 行。\n常用参数：\n-n&lt;行数&gt; 显示的行数（行数为复数表示从最后向前数）\n实例：\n（1）显示 s.md 文件中前 20 行\nhead s.md -n 20\n\n（2）显示 s.md 文件前 20 字节\nhead -c 20 s.md\n\n（3）显示 s.md最后 10 行\nhead -n -10 s.md\n13、tail 命令用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件。\n常用参数：\n-f 循环读取（常用于查看递增的日志文件）-n&lt;行数&gt; 显示行数（从后向前）（1）循环读取逐渐增加的文件内容\nping 127.0.0.1 &gt; ping.log &amp;\n后台运行：可使用 jobs -l 查看，也可使用 fg 将其移到前台运行。\ntail -f ping.log\n（查看日志）\n14、which 命令在 linux 要查找某个文件，但不知道放在哪里了，可以使用下面的一些命令来搜索：\nwhich     查看可执行文件的位置。\nwhereis 查看文件的位置。\nlocate  配合数据库查看文件位置。\nfind        实际搜寻硬盘查询文件名称。\nwhich 是在 PATH 就是指定的路径中，搜索某个系统命令的位置，并返回第一个搜索结果。使用 which 命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。\n常用参数：\n-n 　指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。实例：\n（1）查看 ls 命令是否存在，执行哪个\nwhich ls\n（2）查看 which\nwhich which\n（3）查看 cd\nwhich cd（显示不存在，因为 cd 是内建命令，而 which 查找显示是 PATH 中的命令）\n\n查看当前 PATH 配置：\necho $PATH\n\n或使用 env 查看所有环境变量及对应值\n15、whereis 命令whereis 命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。whereis 及 locate 都是基于系统内建的数据库进行搜索，因此效率很高，而find则是遍历硬盘查找文件。\n常用参数：\n-b   定位可执行文件。\n-m   定位帮助文件。\n-s   定位源代码文件。\n-u   搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件。\n实例：\n（1）查找 locate 程序相关文件\nwhereis locate\n（2）查找 locate 的源码文件\nwhereis -s locate\n（3）查找 lcoate 的帮助文件\nwhereis -m locate\n\n16、locate 命令locate 通过搜寻系统内建文档数据库达到快速找到档案，数据库由 updatedb 程序来更新，updatedb 是由 cron daemon 周期性调用的。默认情况下 locate 命令在搜寻数据库时比由整个由硬盘资料来搜寻资料来得快，但较差劲的是 locate 所找到的档案若是最近才建立或 刚更名的，可能会找不到，在内定值中，updatedb 每天会跑一次，可以由修改 crontab 来更新设定值 (etc/crontab)。\nlocate 与 find 命令相似，可以使用如 *、? 等进行正则匹配查找\n常用参数：\n-l num（要显示的行数）\n-f   将特定的档案系统排除在外，如将proc排除在外\n-r   使用正则运算式做为寻找条件\n实例：\n（1）查找和 pwd 相关的所有文件(文件名中包含 pwd）\nlocate pwd\n\n（2）搜索 etc 目录下所有以 sh 开头的文件\nlocate &#x2F;etc&#x2F;sh\n\n（3）查找 /var 目录下，以 reason 结尾的文件\nlocate -r &#39;^&#x2F;var.*reason$&#39;（其中.表示一个字符，*表示任务多个；.*表示任意多个字符）\n17、find 命令用于在文件树中查找文件，并作出相应的处理。\n命令格式：\nfind pathname -options [-print -exec -ok ...]\n命令参数：\npathname: find命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录。-print： find命令将匹配的文件输出到标准输出。-exec： find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为’command’ {  } \\;，注意{   }和\\；之间的空格。-ok： 和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。命令选项：\n-name 按照文件名查找文件\n-perm 按文件权限查找文件\n-user 按文件属主查找文件\n-group  按照文件所属的组来查找文件。\n-type  查找某一类型的文件，诸如：\n   b - 块设备文件\n   d - 目录\n   c - 字符设备文件\n   l - 符号链接文件\n   p - 管道文件\n   f - 普通文件\n\n-size n :[c] 查找文件长度为n块文件，带有c时表文件字节大小\n-amin n   查找系统中最后N分钟访问的文件\n-atime n  查找系统中最后n*24小时访问的文件\n-cmin n   查找系统中最后N分钟被改变文件状态的文件\n-ctime n  查找系统中最后n*24小时被改变文件状态的文件\n-mmin n   查找系统中最后N分钟被改变文件数据的文件\n-mtime n  查找系统中最后n*24小时被改变文件数据的文件\n(用减号-来限定更改时间在距今n日以内的文件，而用加号+来限定更改时间在距今n日以前的文件。 )\n-maxdepth n 最大查找目录深度\n-prune 选项来指出需要忽略的目录。在使用-prune选项时要当心，因为如果你同时使用了-depth选项，那么-prune选项就会被find命令忽略\n-newer 如果希望查找更改时间比某个文件新但比另一个文件旧的所有文件，可以使用-newer选项\n实例：\n（1）查找 48 小时内修改过的文件\nfind -atime -2\n\n（2）在当前目录查找 以 .log 结尾的文件。 . 代表当前目录\nfind .&#x2F; -name &#39;*.log&#39;\n（3）查找 /opt 目录下 权限为 777 的文件\nfind &#x2F;opt -perm 777\n（4）查找大于 1K 的文件\nfind -size +1000c\n\n查找等于 1000 字符的文件\nfind -size 1000c \n-exec 参数后面跟的是 command 命令，它的终止是以 ; 为结束标志的，所以这句命令后面的分号是不可缺少的，考虑到各个系统中分号会有不同的意义，所以前面加反斜杠。{} 花括号代表前面find查找出来的文件名。\n实例：\n（5）在当前目录中查找更改时间在10日以前的文件并删除它们(无提醒）\nfind . -type f -mtime +10 -exec rm -f &#123;&#125; \\;\n（6）当前目录中查找所有文件名以.log结尾、更改时间在5日以上的文件，并删除它们，只不过在删除之前先给出提示。 按y键删除文件，按n键不删除\nfind . -name &#39;*.log&#39; mtime +5 -ok -exec rm &#123;&#125; \\;\n（7）当前目录下查找文件名以 passwd 开头，内容包含 “pkg” 字符的文件\nfind . -f -name &#39;passwd*&#39; -exec grep &quot;pkg&quot; &#123;&#125; \\;\n（8）用 exec 选项执行 cp 命令\nfind . -name &#39;*.log&#39; -exec cp &#123;&#125; test3 \\;\n-xargs find 命令把匹配到的文件传递给 xargs 命令，而 xargs 命令每次只获取一部分文件而不是全部，不像 -exec 选项那样。这样它可以先处理最先获取的一部分文件，然后是下一批，并如此继续下去。\n实例：\n（9）查找当前目录下每个普通文件，然后使用 xargs 来判断文件类型\nfind . -type f -print | xargs file\n\n（10）查找当前目录下所有以 js 结尾的并且其中包含 ‘editor’ 字符的普通文件\nfind . -type f -name &quot;*.js&quot; -exec grep -lF &#39;ueditor&#39; &#123;&#125; \\;\nfind -type f -name &#39;*.js&#39; | xargs grep -lF &#39;editor&#39;\n（11）利用 xargs 执行 mv 命令\nfind . -name &quot;*.log&quot; | xargs -i mv &#123;&#125; test4\n（12）用 grep 命令在当前目录下的所有普通文件中搜索 hostnames 这个词，并标出所在行：\nfind . -name \\*(转义） -type f -print | xargs grep -n &#39;hostnames&#39;\n\n（13）查找当前目录中以一个小写字母开头，最后是 4 到 9 加上 .log 结束的文件：\nfind . -name &#39;[a-z]*[4-9].log&#39; -print\n（14）在 test 目录查找不在 test4 子目录查找\nfind test -path &#39;test&#x2F;test4&#39; -prune -o -print\n（15）实例1：查找更改时间比文件 log2012.log新但比文件 log2017.log 旧的文件\nfind -newer log2012.log ! -newer log2017.log\n使用 depth 选项：\ndepth 选项可以使 find 命令向磁带上备份文件系统时，希望首先备份所有的文件，其次再备份子目录中的文件。\n实例：find 命令从文件系统的根目录开始，查找一个名为 CON.FILE 的文件。 它将首先匹配所有的文件然后再进入子目录中查找。\nfind &#x2F; -name &quot;CON.FILE&quot; -depth -print\n18、chmod 命令用于改变 linux 系统文件或目录的访问权限。用它控制文件或目录的访问权限。该命令有两种用法。一种是包含字母和操作符表达式的文字设定法；另一种是包含数字的数字设定法。\n每一文件或目录的访问权限都有三组，每组用三位表示，分别为文件属主的读、写和执行权限；与属主同组的用户的读、写和执行权限；系统中其他用户的读、写和执行权限。可使用 ls -l test.txt 查找。\n以文件 log2012.log 为例：\n-rw-r--r-- 1 root root 296K 11-13 06:03 log2012.log\n第一列共有 10 个位置，第一个字符指定了文件类型。在通常意义上，一个目录也是一个文件。如果第一个字符是横线，表示是一个非目录的文件。如果是 d，表示是一个目录。从第二个字符开始到第十个 9 个字符，3 个字符一组，分别表示了 3 组用户对文件或者目录的权限。权限字符用横线代表空许可，r 代表只读，w 代表写，x 代表可执行。\n常用参数：\n-c 当发生改变时，报告处理信息\n-R 处理指定目录以及其子目录下所有文件\n权限范围：\n\nu ：目录或者文件的当前的用户\ng ：目录或者文件的当前的群组\no ：除了目录或者文件的当前用户或群组之外的用户或者群组\na ：所有的用户及群组\n权限代号：\n\nr ：读权限，用数字4表示\nw ：写权限，用数字2表示\nx ：执行权限，用数字1表示\n- ：删除权限，用数字0表示\ns ：特殊权限\n实例：\n（1）增加文件 s.md 所有用户可执行权限\nchmod a+x s.md\n（2）撤销原来所有的权限，然后使拥有者具有可读权限,并输出处理信息\nchmod u&#x3D;r s.md -c\n\n（3）给 file 的属主分配读、写、执行(7)的权限，给file的所在组分配读、执行(5)的权限，给其他用户分配执行(1)的权限\nchmod 751 t.log -c（或者：chmod u&#x3D;rwx,g&#x3D;rx,o&#x3D;x t.log -c)\n（4）将 test 目录及其子目录所有文件添加可读权限\nchmod u+r,g+r,o+r -R text&#x2F; -c\n\n19、tar 命令用来压缩和解压文件。tar 本身不具有压缩功能，只具有打包功能，有关压缩及解压是调用其它的功能来完成。\n弄清两个概念：打包和压缩。打包是指将一大堆文件或目录变成一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件\n常用参数：\n-c 建立新的压缩文件\n-f 指定压缩文件\n-r 添加文件到已经压缩文件包中\n-u 添加改了和现有的文件到压缩包中\n-x 从压缩包中抽取文件\n-t 显示压缩文件中的内容\n-z 支持gzip压缩\n-j 支持bzip2压缩\n-Z 支持compress解压文件\n-v 显示操作过程\n有关 gzip 及 bzip2 压缩:\ngzip 实例：压缩 gzip fileName .tar.gz 和.tgz  解压：gunzip filename.gz 或 gzip -d filename.gz\n          对应：tar zcvf filename.tar.gz     tar zxvf filename.tar.gz\n\nbz2实例：压缩 bzip2 -z filename .tar.bz2 解压：bunzip filename.bz2或bzip -d filename.bz2\n       对应：tar jcvf filename.tar.gz         解压：tar jxvf filename.tar.bz2\n实例：\n（1）将文件全部打包成 tar 包\ntar -cvf log.tar 1.log,2.log 或tar -cvf log.*\n\n（2）将 /etc 下的所有文件及目录打包到指定目录，并使用 gz 压缩\ntar -zcvf &#x2F;tmp&#x2F;etc.tar.gz &#x2F;etc\n（3）查看刚打包的文件内容（一定加z，因为是使用 gzip 压缩的）\ntar -ztvf &#x2F;tmp&#x2F;etc.tar.gz\n（4）要压缩打包 /home, /etc ，但不要 /home/dmtsai\ntar --exclude &#x2F;home&#x2F;dmtsai -zcvf myfile.tar.gz &#x2F;home&#x2F;* &#x2F;etc\n20、chown 命令chown 将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户 ID；组可以是组名或者组 ID；文件是以空格分开的要改变权限的文件列表，支持通配符。\n-c 显示更改的部分的信息\n-R 处理指定目录及子目录\n实例：\n（1）改变拥有者和群组 并显示改变信息\nchown -c mail:mail log2012.log\n（2）改变文件群组\nchown -c :mail t.log\n（3）改变文件夹及子文件目录属主及属组为 mail\nchown -cR mail: test&#x2F;\n21、df 命令显示磁盘空间使用情况。获取硬盘被占用了多少空间，目前还剩下多少空间等信息，如果没有文件名被指定，则所有当前被挂载的文件系统的可用空间将被显示。默认情况下，磁盘空间将以 1KB 为单位进行显示，除非环境变量 POSIXLY_CORRECT 被指定，那样将以512字节为单位进行显示：\n-a 全部文件系统列表\n-h 以方便阅读的方式显示信息\n-i 显示inode信息\n-k 区块为1024字节\n-l 只显示本地磁盘\n-T 列出文件系统类型\n实例：\n（1）显示磁盘使用情况\ndf -l\n\n（2）以易读方式列出所有文件系统及其类型\ndf -haT\n\n22、du 命令du 命令也是查看使用空间的，但是与 df 命令不同的是 Linux du 命令是对文件和目录磁盘使用的空间的查看：\n命令格式：\ndu [选项] [文件]\n常用参数：\n-a 显示目录中所有文件大小\n-k 以KB为单位显示文件大小\n-m 以MB为单位显示文件大小\n-g 以GB为单位显示文件大小\n-h 以易读方式显示文件大小\n-s 仅显示总计\n-c或--total  除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和\n实例：\n（1）以易读方式显示文件夹内及子文件夹大小\ndu -h scf&#x2F;\n\n（2）以易读方式显示文件夹内所有文件大小\ndu -ah scf&#x2F;\n（3）显示几个文件或目录各自占用磁盘空间的大小，还统计它们的总和\ndu -hc test&#x2F; scf&#x2F;\n（4）输出当前目录下各个子目录所使用的空间\ndu -hc --max-depth&#x3D;1 scf&#x2F;\n\n23、ln 命令功能是为文件在另外一个位置建立一个同步的链接，当在不同目录需要该问题时，就不需要为每一个目录创建同样的文件，通过 ln 创建的链接（link）减少磁盘占用量。\n链接分类：软件链接及硬链接\n软链接：\n1.软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式2.软链接可以 跨文件系统 ，硬链接不可以3.软链接可以对一个不存在的文件名进行链接4.软链接可以对目录进行链接硬链接:\n1.硬链接，以文件副本的形式存在。但不占用实际空间。2.不允许给目录创建硬链接3.硬链接只有在同一个文件系统中才能创建需要注意：\n第一：ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化；第二：ln的链接又分软链接和硬链接两种，软链接就是ln –s 源文件 目标文件，它只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，硬链接 ln 源文件 目标文件，没有参数-s， 它会在你选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化。第三：ln指令用在链接文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则会把前面指定的所有文件或目录复制到该目录中。若同时指定多个文件或目录，且最后的目的地并非是一个已存在的目录，则会出现错误信息。常用参数：\n-b 删除，覆盖以前建立的链接\n-s 软链接（符号链接）\n-v 显示详细处理过程\n实例：\n（1）给文件创建软链接，并显示操作信息\nln -sv source.log link.log\n\n（2）给文件创建硬链接，并显示操作信息\nln -v source.log link1.log\n\n（3）给目录创建软链接\nln -sv &#x2F;opt&#x2F;soft&#x2F;test&#x2F;test3 &#x2F;opt&#x2F;soft&#x2F;test&#x2F;test5\n24、date 命令显示或设定系统的日期与时间。\n命令参数：\n-d&lt;字符串&gt; 　显示字符串所指的日期与时间。字符串前后必须加上双引号。\n-s&lt;字符串&gt; 　根据字符串来设置日期与时间。字符串前后必须加上双引号。\n-u 　显示GMT。\n%H 小时(00-23)\n%I 小时(00-12)\n%M 分钟(以00-59来表示)\n%s 总秒数。起算时间为1970-01-01 00:00:00 UTC。\n%S 秒(以本地的惯用法来表示)\n%a 星期的缩写。\n%A 星期的完整名称。\n%d 日期(以01-31来表示)。\n%D 日期(含年月日)。\n%m 月份(以01-12来表示)。\n%y 年份(以00-99来表示)。\n%Y 年份(以四位数来表示)。\n实例：\n（1）显示下一天\ndate +%Y%m%d --date&#x3D;&quot;+1 day&quot;  &#x2F;&#x2F;显示下一天的日期\n（2）-d参数使用\ndate -d &quot;nov 22&quot;  今年的 11 月 22 日是星期三\ndate -d &#39;2 weeks&#39; 2周后的日期\ndate -d &#39;next monday&#39; (下周一的日期)\ndate -d next-day +%Y%m%d（明天的日期）或者：date -d tomorrow +%Y%m%d\ndate -d last-day +%Y%m%d(昨天的日期) 或者：date -d yesterday +%Y%m%d\ndate -d last-month +%Y%m(上个月是几月)\ndate -d next-month +%Y%m(下个月是几月)\n\n25、cal 命令可以用户显示公历（阳历）日历如只有一个参数，则表示年份(1-9999)，如有两个参数，则表示月份和年份：\n常用参数：\n-3 显示前一月，当前月，后一月三个月的日历\n-m 显示星期一为第一列\n-j 显示在当前年第几天\n-y [year]显示当前年[year]份的日历\n实例：\n（1）显示指定年月日期\ncal 9 2012\n（2）显示2013年每个月日历\ncal -y 2013\n\n（3）将星期一做为第一列,显示前中后三月\ncal -3m\n\n26、grep 命令强大的文本搜索命令，grep(Global Regular Expression Print) 全局正则表达式搜索。\ngrep 的工作方式是这样的，它在一个或多个文件中搜索字符串模板。如果模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响原文件内容。\n命令格式：\ngrep [option] pattern file|dir\n常用参数：\n-A n --after-context显示匹配字符后n行\n-B n --before-context显示匹配字符前n行\n-C n --context 显示匹配字符前后n行\n-c --count 计算符合样式的列数\n-i 忽略大小写\n-l 只列出文件内容符合指定的样式的文件名称\n-f 从文件中读取关键词\n-n 显示匹配内容的所在文件中行数\n-R 递归查找文件夹\ngrep 的规则表达式:\n^  #锚定行的开始 如：&#39;^grep&#39;匹配所有以grep开头的行。 \n$  #锚定行的结束 如：&#39;grep$&#39;匹配所有以grep结尾的行。 \n.  #匹配一个非换行符的字符 如：&#39;gr.p&#39;匹配gr后接一个任意字符，然后是p。  \n*  #匹配零个或多个先前字符 如：&#39;*grep&#39;匹配所有一个或多个空格后紧跟grep的行。\n.*   #一起用代表任意字符。  \n[]   #匹配一个指定范围内的字符，如&#39;[Gg]rep&#39;匹配Grep和grep。 \n[^]  #匹配一个不在指定范围内的字符，如：&#39;[^A-FH-Z]rep&#39;匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。  \n\\(..\\)  #标记匹配字符，如&#39;\\(love\\)&#39;，love被标记为1。   \n\\&lt;      #锚定单词的开始，如:&#39;\\&lt;grep&#39;匹配包含以grep开头的单词的行。\n\\&gt;      #锚定单词的结束，如&#39;grep\\&gt;&#39;匹配包含以grep结尾的单词的行。\nx\\&#123;m\\&#125;  #重复字符x，m次，如：&#39;0\\&#123;5\\&#125;&#39;匹配包含5个o的行。 \nx\\&#123;m,\\&#125;  #重复字符x,至少m次，如：&#39;o\\&#123;5,\\&#125;&#39;匹配至少有5个o的行。  \nx\\&#123;m,n\\&#125;  #重复字符x，至少m次，不多于n次，如：&#39;o\\&#123;5,10\\&#125;&#39;匹配5--10个o的行。  \n\\w    #匹配文字和数字字符，也就是[A-Za-z0-9]，如：&#39;G\\w*p&#39;匹配以G后跟零个或多个文字或数字字符，然后是p。  \n\\W    #\\w的反置形式，匹配一个或多个非单词字符，如点号句号等。  \n\\b    #单词锁定符，如: &#39;\\bgrep\\b&#39;只匹配grep。\n实例：\n（1）查找指定进程\nps -ef | grep svn\n（2）查找指定进程个数\nps -ef | grep svn -c\n\n（3）从文件中读取关键词\ncat test1.txt | grep -f key.log\n（4）从文件夹中递归查找以grep开头的行，并只列出文件\ngrep -lR &#39;^grep&#39; &#x2F;tmp\n（5）查找非x开关的行内容\ngrep &#39;^[^x]&#39; test.txt\n（6）显示包含 ed 或者 at 字符的内容行\ngrep -E &#39;ed|at&#39; test.txt\n27、wc 命令wc(word count)功能为统计指定的文件中字节数、字数、行数，并将统计结果输出\n命令格式：\nwc [option] file..\n命令参数：\n-c 统计字节数\n-l 统计行数\n-m 统计字符数\n-w 统计词数，一个字被定义为由空白、跳格或换行字符分隔的字符串\n实例：\n（1）查找文件的 行数 单词数 字节数 文件名\nwc text.txt\n结果：\n7     8     70     test.txt\n\n（2）统计输出结果的行数\ncat test.txt | wc -l\n\n28、ps 命令ps(process status)，用来查看当前运行的进程状态，一次性查看，如果需要动态连续结果使用 top\nlinux上进程有5种状态:\n\n运行(正在运行或在运行队列中等待)\n中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)\n不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)\n僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放)\n停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行)ps 工具标识进程的5种状态码:\n\nD 不可中断 uninterruptible sleep (usually IO)\nR 运行 runnable (on run queue)\nS 中断 sleeping\nT 停止 traced or stopped\nZ 僵死 a defunct (”zombie”) process\n命令参数：\n-A 显示所有进程\na 显示所有进程\n-a 显示同一终端下所有进程\nc 显示进程真实名称\ne 显示环境变量\nf 显示进程间的关系\nr 显示当前终端运行的进程\n-aux 显示所有包含其它使用的进程\n实例：\n（1）显示当前所有进程环境变量及进程间关系\nps -ef\n\n（2）显示当前所有进程\nps -A\n\n（3）与grep联用查找某进程\nps -aux | grep apache\n\n（4）找出与 cron 与 syslog 这两个服务有关的 PID 号码\nps aux | grep &#39;(cron|syslog)&#39;\n\n29、top 命令显示当前系统正在执行的进程的相关信息，包括进程 ID、内存占用率、CPU 占用率等\n常用参数：\n-c 显示完整的进程命令\n-s 保密模式\n-p &lt;进程号&gt; 指定进程显示\n-n &lt;次数&gt;循环显示次数\n实例：\n（1）\ntop - 14:06:23 up 70 days, 16:44,  2 users,  load average: 1.25, 1.32, 1.35\nTasks: 206 total,   1 running, 205 sleeping,   0 stopped,   0 zombie\nCpu(s):  5.9%us,  3.4%sy,  0.0%ni, 90.4%id,  0.0%wa,  0.0%hi,  0.2%si,  0.0%st\nMem:  32949016k total, 14411180k used, 18537836k free,   169884k buffers\nSwap: 32764556k total,        0k used, 32764556k free,  3612636k cached\nPID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND  \n28894 root      22   0 1501m 405m  10m S 52.2  1.3   2534:16 java  \n\n前五行是当前系统情况整体的统计信息区。\n第一行，任务队列信息，同 uptime 命令的执行结果，具体参数说明情况如下：\n14:06:23 — 当前系统时间\nup 70 days, 16:44 — 系统已经运行了70天16小时44分钟（在这期间系统没有重启过的吆！）\n2 users — 当前有2个用户登录系统\nload average: 1.15, 1.42, 1.44 — load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况。\nload average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了。\n第二行，Tasks — 任务（进程），具体信息说明如下：\n系统现在共有206个进程，其中处于运行中的有1个，205个在休眠（sleep），stoped状态的有0个，zombie状态（僵尸）的有0个。\n第三行，cpu状态信息，具体属性说明如下：\n5.9%us — 用户空间占用CPU的百分比。\n3.4% sy — 内核空间占用CPU的百分比。\n0.0% ni — 改变过优先级的进程占用CPU的百分比\n90.4% id — 空闲CPU百分比\n0.0% wa — IO等待占用CPU的百分比\n0.0% hi — 硬中断（Hardware IRQ）占用CPU的百分比\n0.2% si — 软中断（Software Interrupts）占用CPU的百分比\n备注：在这里CPU的使用比率和windows概念不同，需要理解linux系统用户空间和内核空间的相关知识！\n第四行，内存状态，具体信息如下：\n32949016k total — 物理内存总量（32GB）\n14411180k used — 使用中的内存总量（14GB）\n18537836k free — 空闲内存总量（18GB）\n169884k buffers — 缓存的内存量 （169M）\n第五行，swap交换分区信息，具体信息说明如下：\n32764556k total — 交换区总量（32GB）\n0k used — 使用的交换区总量（0K）\n32764556k free — 空闲交换区总量（32GB）\n3612636k cached — 缓冲的交换区总量（3.6GB）\n第六行，空行。\n第七行以下：各进程（任务）的状态监控，项目列信息说明如下：\nPID — 进程id\nUSER — 进程所有者\nPR — 进程优先级\nNI — nice值。负值表示高优先级，正值表示低优先级\nVIRT — 进程使用的虚拟内存总量，单位kb。VIRT&#x3D;SWAP+RES\nRES — 进程使用的、未被换出的物理内存大小，单位kb。RES&#x3D;CODE+DATA\nSHR — 共享内存大小，单位kb\nS — 进程状态。D&#x3D;不可中断的睡眠状态 R&#x3D;运行 S&#x3D;睡眠 T&#x3D;跟踪&#x2F;停止 Z&#x3D;僵尸进程\n%CPU — 上次更新到现在的CPU时间占用百分比\n%MEM — 进程使用的物理内存百分比\nTIME+ — 进程使用的CPU时间总计，单位1&#x2F;100秒\nCOMMAND — 进程名称（命令名&#x2F;命令行）\ntop 交互命令\nh 显示top交互命令帮助信息\nc 切换显示命令名称和完整命令行\nm 以内存使用率排序\nP 根据CPU使用百分比大小进行排序\nT 根据时间&#x2F;累计时间进行排序\nW 将当前设置写入~&#x2F;.toprc文件中\no或者O 改变显示项目的顺序\n30、kill 命令发送指定的信号到相应进程。不指定型号将发送SIGTERM（15）终止指定进程。如果任无法终止该程序可用”-KILL” 参数，其发送的信号为SIGKILL(9) ，将强制结束进程，使用ps命令或者jobs 命令可以查看进程号。root用户将影响用户的进程，非root用户只能影响自己的进程。\n常用参数：\n-l  信号，若果不加信号的编号参数，则使用“-l”参数会列出全部的信号名称\n-a  当处理当前进程时，不限制命令名和进程号的对应关系\n-p  指定kill 命令只打印相关进程的进程号，而不发送任何信号\n-s  指定发送信号\n-u  指定用户\n实例：\n（1）先使用ps查找进程pro1，然后用kill杀掉\nkill -9 $(ps -ef | grep pro1)\n31、free 命令显示系统内存使用情况，包括物理内存、交互区内存(swap)和内核缓冲区内存。\n命令参数：\n-b 以Byte显示内存使用情况\n-k 以kb为单位显示内存使用情况\n-m 以mb为单位显示内存使用情况\n-g 以gb为单位显示内存使用情况\n-s&lt;间隔秒数&gt; 持续显示内存\n-t 显示内存使用总合\n实例：\n（1）显示内存使用情况\nfree\nfree -k\nfree -m\n\n（2）以总和的形式显示内存的使用信息\nfree -t\n\n（3）周期性查询内存使用情况\nfree -s 10\n\n","slug":"大数据2","date":"2023-02-20T13:50:49.000Z","categories_index":"信管","tags_index":"大数据","author_index":"Algernon"},{"id":"742380d4c8e833aace283f6b8db25e56","title":"【大数据基础】vmware+ununtu安装详细过程","content":"环境配置1.    虚拟机VMware下载与安装首先安装vmware workstation\n密钥直接利用科技生成。检查vmware是否成功安装\n2.    VMware安装Ubuntu18.04 LTS在清华源镜像站找到合适版本的ubuntu联网安装需要一些时间，大致在一到两个小时。出现这个界面表示安装成功：\n3. 配置vmware-tools但是现在面临两个问题：1.界面没法全屏2.无法将物理机上的文件拖拽至虚拟机界面\n为了解决这个问题，我们安装vmware-tools打开终端，\nsudo su\n之后除了下图中填yes的，其他问题都直接回车这个问题填no：OK，现在就把vmware-tools安装好了。调整至自适应：试着在firefox上浏览自己的网站：\n现在我们也可以把物理机上的文件复制粘贴进虚拟机了：\n4. 主题美化修改桌面背景：修改终端，改变字体颜色以及终端透明度：查看效果：\n问题与处理问题一：安装vmwaretools之后没有自动伸展解决方法：vmware——查看——界面自适应 \n问题二：安装vmwaretools之后拖不进文件。参考资料：\n\n\n\n\n\n\n\n\n\nhttps://blog.csdn.net/zhegexuezha/article/details/128163672\n首先，调整设置，讲vmware虚拟机时间与物理机时间同步，之后打开终端，输入以下命令行：之后重启电脑重新启动虚拟机，打开物理机上的文件，拖入虚拟机界面：执行操作成功，说明vmware-tools安装成功，且能够在物理机和虚拟机之间转移文件：\n","slug":"大数据1","date":"2023-02-13T13:50:49.000Z","categories_index":"信管","tags_index":"大数据","author_index":"Algernon"},{"id":"ea7cffe5131c619222c78fc92a3e60e6","title":"【区块链技术与应用】（期末）","content":"1. 学历信息征信系统需求分析现在是一个信息化的高科技时代，许许多多的企业必须紧跟时代步伐，不断创新，才能发展壮大；而企业的发展必然离不开人才队伍的建设，也可以说创新是企业发展的动力，而人才却是企业发展的根本，所以现在各企业对于人才队伍建设十分看重，而对于人才的素质及受教育情况的要求更是重中之重。\n对学历信息的查询，要么成本较高，要么比较麻烦，甚至还有一些假冒网站让人防不胜防；传统应用是将数据保存在数据库中来实现，但是现在出现的数据库由于故障或者被删、被黑造成的数据丢失的情况更是屡见不鲜，所以传统数据库并不能真正意义上确保数据的完整性及安全性。\n基于这些情况，我们设计并开发了一个 基于区块链技术的实现的学历信息征信系统，实现了在线对学历信息的查询功能，由于区块链技术本身的特点，无须考虑数据被破坏的问题，而且杜绝了对于信息造假的情况，保证了学历信息的真实性。由于篇幅原因，我们对学历信息征信系统的应用场景进行修改及简化，实现的业务逻辑包括添加信息、修改信息、查询信息、查询详情信息等操作，实际情况下的的业务逻辑需要根据实际需求场景做出相应的调整。\n由于系统需要保证人才受教育情况真实性，所以对于系统的用户而言，不可能由用户自己添加相应的学历信息，而是由具有一定权限的用户来完成添加或修改的功能。但普通用户可以通过系统溯源功能来确定信息的真伪。所以我们将系统用户的使用角色分为两种：\n\n普通用户\n管理员用户\n\n普通用户具有对数据的查询功能 ，但实现查询之前必须经过登录认证：\n\n用户登录：系统只针对合法用户进行授权使用，所以用户必须先进行登录才能完成相应的功能。\n查询实现：查询分为两种方式实现\n根据证书编号与姓名查询：根据用户输入的证书编号与姓名进行查询。\n根据身份证号码查询：根据用户输入指定的身份证号码进行查询，此功能可以实现溯源。\n\n\n\n管理员用户除具有普通用户的功能之外，额外添加了两个功能：\n\n添加信息：可以向系统中添加新的学历信息。\n修改信息：针对已存在的学历信息进行修改。\n\n2. 学历信息征信系统架构设计我们在本书的第十、十一、十二章中已经完成了一个完整的基于 fabric-sdk-go 的应用示例，所以我们现在使用之前的应用架构，不同的是在此应用中需要编写实现完整的链码并通过业务层调用链码中的各个函数，以实现对数据状态的操作。界面为了方便用户操作使用，仍然使用Web浏览器的方式实现。而且在此应用中我们将 Hyperledger Fabric 默认的状态数据库由 LevelDB 替换为 CouchDB 来实现\n\n对于 Fabric Network结构如下图所示：\n\n3.学历信息征信数据模型设计由于需要向分类账本中保存数据，所以必须设计相关的结构体用于声明要保存的数据结构，用于方便的在应用中处理数据。\nEducation 结构体设计如下表所示：\n\n\n\n\n名称\n数据类型\n说明\n\n\n\n\nObjectType\nstring\n\n\n\nName\nstring\n姓名\n\n\nGender\nstring\n性别\n\n\nNation\nstring\n民族\n\n\nEntityID\nstring\n身份证号（记录的Key）\n\n\nPlace\nstring\n籍贯\n\n\nBirthDay\nstring\n出生日期\n\n\nPhoto\nstring\n照片\n\n\nEnrollDate\nstring\n入学日期\n\n\nGraduationDate\nstring\n毕（结）业日期\n\n\nSchoolName\nstring\n所读学校名称\n\n\nMajor\nstring\n所读专业\n\n\nQuaType\nstring\n学历类别（普通、成考等）\n\n\nLength\nstring\n学制（两年、三年、四年、五年）\n\n\nMode\nstring\n学习形式（普通全日制）\n\n\nLevel\nstring\n层次（专科、本科、研究生、博士）\n\n\nGraduation\nstring\n毕（结）业（毕业、结业）\n\n\nCertNo\nstring\n证书编号\n\n\nHistorys\n[]HistoryItem\n当前edu的详细历史记录\n\n\n\n\n为了能够从当前的分类状态中查询出详细的历史操作记录，我们在 Education 中设计了一个类型为HistoryItem 数组的 Historys 成员，表示当前状态的历史记录集。\nHistoryItem 结构体设计如下表所示：\n\n\n\n\n名称\n数据类型\n说明\n\n\n\n\nTxId\nstring\n交易编号\n\n\nEducation\nEducation\n本次历史记录的详细信息\n\n\n\n\n4. 学历信息业务网络设计与实现4.1 设置环境我们在第十章中说明了如何构建fabric网络环境，现在我们要重新完成一个新的应用，所以网络环境可以使用之前的内容，但是因为状态数据库使用 CouchDB 来实现，所以需要做出部分修改，新增与 CouchDB 相关的内容。为了方便读者起见，我们重新搭建一个应用所需的网络环境。\n在GOPATH的src文件夹中新建一个目录如下：\n$ mkdir -p $GOPATH&#x2F;src&#x2F;github.com&#x2F;kongyixueyuan.com&#x2F;education \n$ cd $GOPATH&#x2F;src&#x2F;github.com&#x2F;kongyixueyuan.com&#x2F;education\n使用 git 命令克隆 hf-fixtures 目录当前路径\n$ git clone https:&#x2F;&#x2F;github.com&#x2F;kevin-hf&#x2F;hf-fixtures.git\n将 hf-fixtures 文件夹重命名为 fixtures\n$ mv hf-fixtures fixtures\n修改fixtures 文件夹的所属关系为当前用户\n$ sudo chown -R kevin:kevin .&#x2F;fixtures\n\n\n\n\n\n\n\n\n\n提示： kevin 为安装 Ubuntu 16.04 系统时创建的用户\n进入 fixtures 目录\n$ cd fixtures\n为了构建区块链网络，使用 docker 构建处理不同角色的虚拟计算机。 在这里我们将尽可能保持简单。如果确定您的系统中已经存在相关的所需容器，或可以使用其它方式获取，则无需执行如下命令。否则请将 fixtures 目录下的 pull_images.sh 文件添加可执行权限后直接执行。\n$ chmod 777 .&#x2F;pull_images.sh\n$ .&#x2F;pull_images.sh\n\n\n\n\n\n\n\n\n\n提示：pull_images.sh 文件是下载 Fabric 环境所需容器的一个可执行脚本，下载过程需要一段时间（视网速情况而定），请耐心等待。另：请确定您的系统支持虚拟技术。\n4.2 配置docker-compose.yml文件在 fixtures 目录下创建一个 docker-compose.yml 文件并编辑\n$ vim docker-compose.yml\n\n将 network下的basic 修改为 default\nversion: &#39;2&#39;\n\nnetworks:\n  default:\n\nservices:\n\n编辑 orderer 部分\norderer.kevin.kongyixueyuan.com:\n  image: hyperledger&#x2F;fabric-orderer\n  container_name: orderer.kevin.kongyixueyuan.com\n  environment:\n    - ORDERER_GENERAL_LOGLEVEL&#x3D;debug\n    - ORDERER_GENERAL_LISTENADDRESS&#x3D;0.0.0.0\n    - ORDERER_GENERAL_LISTENPORT&#x3D;7050\n    - ORDERER_GENERAL_GENESISPROFILE&#x3D;kongyixueyuan\n    - ORDERER_GENERAL_GENESISMETHOD&#x3D;file\n    - ORDERER_GENERAL_GENESISFILE&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;genesis.block\n    - ORDERER_GENERAL_LOCALMSPID&#x3D;kevin.kongyixueyuan.com\n    - ORDERER_GENERAL_LOCALMSPDIR&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;msp\n    - ORDERER_GENERAL_TLS_ENABLED&#x3D;true\n    - ORDERER_GENERAL_TLS_PRIVATEKEY&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls&#x2F;server.key\n    - ORDERER_GENERAL_TLS_CERTIFICATE&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls&#x2F;server.crt\n    - ORDERER_GENERAL_TLS_ROOTCAS&#x3D;[&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls&#x2F;ca.crt]\n  working_dir: &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric\n  command: orderer\n  volumes:\n    - .&#x2F;artifacts&#x2F;genesis.block:&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;genesis.block\n    - .&#x2F;crypto-config&#x2F;ordererOrganizations&#x2F;kevin.kongyixueyuan.com&#x2F;orderers&#x2F;orderer.kevin.kongyixueyuan.com&#x2F;msp:&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;msp\n    - .&#x2F;crypto-config&#x2F;ordererOrganizations&#x2F;kevin.kongyixueyuan.com&#x2F;orderers&#x2F;orderer.kevin.kongyixueyuan.com&#x2F;tls:&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls\n  ports:\n    - 7050:7050\n  networks:\n    default:\n      aliases:\n        - orderer.kevin.kongyixueyuan.com\n\n编辑 ca 部分\nca.org1.kevin.kongyixueyuan.com:\n  image: hyperledger&#x2F;fabric-ca\n  container_name: ca.org1.kevin.kongyixueyuan.com\n  environment:\n    - FABRIC_CA_HOME&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric-ca-server\n    - FABRIC_CA_SERVER_CA_NAME&#x3D;ca.org1.kevin.kongyixueyuan.com\n    - FABRIC_CA_SERVER_CA_CERTFILE&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric-ca-server-config&#x2F;ca.org1.kevin.kongyixueyuan.com-cert.pem\n    - FABRIC_CA_SERVER_CA_KEYFILE&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric-ca-server-config&#x2F;727e69ed4a01a204cd53bf4a97c2c1cb947419504f82851f6ae563c3c96dea3a_sk\n    - FABRIC_CA_SERVER_TLS_ENABLED&#x3D;true\n    - FABRIC_CA_SERVER_TLS_CERTFILE&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric-ca-server-config&#x2F;ca.org1.kevin.kongyixueyuan.com-cert.pem\n    - FABRIC_CA_SERVER_TLS_KEYFILE&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric-ca-server-config&#x2F;727e69ed4a01a204cd53bf4a97c2c1cb947419504f82851f6ae563c3c96dea3a_sk\n  ports:\n    - 7054:7054\n  command: sh -c &#39;fabric-ca-server start -b admin:adminpw -d&#39;\n  volumes:\n    - .&#x2F;crypto-config&#x2F;peerOrganizations&#x2F;org1.kevin.kongyixueyuan.com&#x2F;ca&#x2F;:&#x2F;etc&#x2F;hyperledger&#x2F;fabric-ca-server-config\n  networks:\n    default:\n      aliases:\n        - ca.org1.kevin.kongyixueyuan.com\n\n声明 CouchDB 部分：\ncouchdb:\n  container_name: couchdb\n  image: hyperledger&#x2F;fabric-couchdb\n  # Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password\n  # for CouchDB.  This will prevent CouchDB from operating in an &quot;Admin Party&quot; mode.\n  environment:\n    - COUCHDB_USER&#x3D;\n    - COUCHDB_PASSWORD&#x3D;\n  # Comment&#x2F;Uncomment the port mapping if you want to hide&#x2F;expose the CouchDB service,\n  # for example map it to utilize Fauxton User Interface in dev environments.\n  ports:\n    - &quot;5984:5984&quot;\n\n编辑Peer部分\n\npeer0.org1.example.com 内容如下\npeer0.org1.kevin.kongyixueyuan.com:\n  image: hyperledger&#x2F;fabric-peer\n  container_name: peer0.org1.kevin.kongyixueyuan.com\n  environment:\n    - CORE_VM_ENDPOINT&#x3D;unix:&#x2F;&#x2F;&#x2F;host&#x2F;var&#x2F;run&#x2F;docker.sock\n    - CORE_VM_DOCKER_ATTACHSTDOUT&#x3D;true\n    - CORE_LOGGING_LEVEL&#x3D;DEBUG\n    - CORE_PEER_NETWORKID&#x3D;kongyixueyuan\n    - CORE_PEER_PROFILE_ENABLED&#x3D;true\n    - CORE_PEER_TLS_ENABLED&#x3D;true\n    - CORE_PEER_TLS_CERT_FILE&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;tls&#x2F;server.crt\n    - CORE_PEER_TLS_KEY_FILE&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;tls&#x2F;server.key\n    - CORE_PEER_TLS_ROOTCERT_FILE&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;tls&#x2F;ca.crt\n    - CORE_PEER_ID&#x3D;peer0.org1.kevin.kongyixueyuan.com\n    - CORE_PEER_ADDRESSAUTODETECT&#x3D;true\n    - CORE_PEER_ADDRESS&#x3D;peer0.org1.kevin.kongyixueyuan.com:7051\n    - CORE_PEER_GOSSIP_EXTERNALENDPOINT&#x3D;peer0.org1.kevin.kongyixueyuan.com:7051\n    - CORE_PEER_GOSSIP_USELEADERELECTION&#x3D;true\n    - CORE_PEER_GOSSIP_ORGLEADER&#x3D;false\n    - CORE_PEER_GOSSIP_SKIPHANDSHAKE&#x3D;true\n    - CORE_PEER_LOCALMSPID&#x3D;org1.kevin.kongyixueyuan.com\n    - CORE_PEER_MSPCONFIGPATH&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;msp\n    - CORE_PEER_TLS_SERVERHOSTOVERRIDE&#x3D;peer0.org1.kevin.kongyixueyuan.com\n    - CORE_LEDGER_STATE_STATEDATABASE&#x3D;CouchDB\n    - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS&#x3D;couchdb:5984\n    - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME&#x3D;\n    - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD&#x3D;\n  working_dir: &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer\n  command: peer node start\n  volumes:\n    - &#x2F;var&#x2F;run&#x2F;:&#x2F;host&#x2F;var&#x2F;run&#x2F;\n    - .&#x2F;crypto-config&#x2F;peerOrganizations&#x2F;org1.kevin.kongyixueyuan.com&#x2F;peers&#x2F;peer0.org1.kevin.kongyixueyuan.com&#x2F;msp:&#x2F;var&#x2F;hyperledger&#x2F;msp\n    - .&#x2F;crypto-config&#x2F;peerOrganizations&#x2F;org1.kevin.kongyixueyuan.com&#x2F;peers&#x2F;peer0.org1.kevin.kongyixueyuan.com&#x2F;tls:&#x2F;var&#x2F;hyperledger&#x2F;tls\n  ports:\n    - 7051:7051\n    - 7053:7053\n  depends_on:\n    - orderer.kevin.kongyixueyuan.com\n    - couchdb\n  networks:\n    default:\n      aliases:\n        - peer0.org1.kevin.kongyixueyuan.com\n\npeer1.org1.example.com 内容如下\npeer1.org1.kevin.kongyixueyuan.com:\n  image: hyperledger&#x2F;fabric-peer\n  container_name: peer1.org1.kevin.kongyixueyuan.com\n  environment:\n    - CORE_VM_ENDPOINT&#x3D;unix:&#x2F;&#x2F;&#x2F;host&#x2F;var&#x2F;run&#x2F;docker.sock\n    - CORE_VM_DOCKER_ATTACHSTDOUT&#x3D;true\n    - CORE_LOGGING_LEVEL&#x3D;DEBUG\n    - CORE_PEER_NETWORKID&#x3D;kongyixueyuan\n    - CORE_PEER_PROFILE_ENABLED&#x3D;true\n    - CORE_PEER_TLS_ENABLED&#x3D;true\n    - CORE_PEER_TLS_CERT_FILE&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;tls&#x2F;server.crt\n    - CORE_PEER_TLS_KEY_FILE&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;tls&#x2F;server.key\n    - CORE_PEER_TLS_ROOTCERT_FILE&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;tls&#x2F;ca.crt\n    - CORE_PEER_ID&#x3D;peer1.org1.kevin.kongyixueyuan.com\n    - CORE_PEER_ADDRESSAUTODETECT&#x3D;true\n    - CORE_PEER_ADDRESS&#x3D;peer1.org1.kevin.kongyixueyuan.com:7051\n    - CORE_PEER_GOSSIP_EXTERNALENDPOINT&#x3D;peer1.org1.kevin.kongyixueyuan.com:7051\n    - CORE_PEER_GOSSIP_USELEADERELECTION&#x3D;true\n    - CORE_PEER_GOSSIP_ORGLEADER&#x3D;false\n    - CORE_PEER_GOSSIP_SKIPHANDSHAKE&#x3D;true\n    - CORE_PEER_LOCALMSPID&#x3D;org1.kevin.kongyixueyuan.com\n    - CORE_PEER_MSPCONFIGPATH&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;msp\n    - CORE_PEER_TLS_SERVERHOSTOVERRIDE&#x3D;peer1.org1.kevin.kongyixueyuan.com\n    - CORE_LEDGER_STATE_STATEDATABASE&#x3D;CouchDB\n    - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS&#x3D;couchdb:5984\n    - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME&#x3D;\n    - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD&#x3D;\n  working_dir: &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer\n  command: peer node start\n  volumes:\n    - &#x2F;var&#x2F;run&#x2F;:&#x2F;host&#x2F;var&#x2F;run&#x2F;\n    - .&#x2F;crypto-config&#x2F;peerOrganizations&#x2F;org1.kevin.kongyixueyuan.com&#x2F;peers&#x2F;peer1.org1.kevin.kongyixueyuan.com&#x2F;msp:&#x2F;var&#x2F;hyperledger&#x2F;msp\n    - .&#x2F;crypto-config&#x2F;peerOrganizations&#x2F;org1.kevin.kongyixueyuan.com&#x2F;peers&#x2F;peer1.org1.kevin.kongyixueyuan.com&#x2F;tls:&#x2F;var&#x2F;hyperledger&#x2F;tls\n  ports:\n    - 7151:7051\n    - 7153:7053\n  depends_on:\n    - orderer.kevin.kongyixueyuan.com\n    - couchdb\n  networks:\n    default:\n      aliases:\n        - peer1.org1.kevin.kongyixueyuan.com\n\n\n\n\n4.3 测试网络环境为了检查网络是否正常工作，使用docker-compose同时启动或停止所有容器。 进入fixtures文件夹，运行：\n$ cd $GOPATH&#x2F;src&#x2F;github.com&#x2F;kongyixueyuan.com&#x2F;education&#x2F;fixtures\n$ docker-compose up\n如果在您的系统中没有相关的容器，那么会自动下载docker镜像。下载完毕后自动启动，控制台会输出很多不同颜色的日志（红色不等于错误）\n\n打开一个新终端并运行：\n$ docker ps\n\n将看到：两个peer，一个orderer和一个CA容器，还有一个 CouchDB 容器。 代表已成功创建了一个新的网络，可以随SDK一起使用。 要停止网络，请返回到上一个终端，按Ctrl+C并等待所有容器都停止。\n\n\n\n\n\n\n\n\n\n提示 ：当网络成功启动后，所有处于活动中的容器都可以访问。 也可以查看指定容器的详细日志内容。 如果想删除这些容器，需要使用docker rm $(docker ps -aq)将其删除 ，但在删除容器之前需要确定其在网络环境中已不再使用。\n如果在网络环境启动过程中不想看到大量的日志信息，请在该启动命令中添加参数 -d ，如下所示： docker-compose up -d 。 如果要停止网络，请务必在 docker-compose.yaml 所在的文件夹中运行命令： docker-compose stop （或 使用docker-compose down 进行清理停止所有容器）。\n最后在终端2中执行如下命令关闭网络：\n$ cd $GOPATH&#x2F;src&#x2F;github.com&#x2F;kongyixueyuan.com&#x2F;education&#x2F;fixtures\n$ docker-compose down\n\n终端1窗口中输出如下：\n\n5. SDK与链码的实现5.1 创建 config.yaml 文件确认 Hyperledger Fabric 基础网络环境运行没有问题后，现在我们通过创建一个新的 config.yaml 配置文件给应用程序所使用的 Fabric-SDK-Go 配置相关参数及 Fabric 组件的通信地址\n进入项目的根目录中创建一个 config.yaml 文件并编辑\n$ cd $GOPATH&#x2F;src&#x2F;github.com&#x2F;kongyixueyuan.com&#x2F;education\n$ vim config.yaml\nconfig.yaml 配置文件完整内容如下:\nname: &quot;kongyixueyuan-network&quot;\n#\n# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.\n#\nversion: 1.0.0\n\n#\n# The client section used by GO SDK.\n#\nclient:\n\n  # Which organization does this application instance belong to? The value must be the name of an org\n  # defined under &quot;organizations&quot;\n  organization: Org1\n\n  logging:\n    level: info\n\n  # Global configuration for peer, event service and orderer timeouts\n  # if this this section is omitted, then default values will be used (same values as below)\n#  peer:\n#    timeout:\n#      connection: 10s\n#      response: 180s\n#      discovery:\n#        # Expiry period for discovery service greylist filter\n#        # The channel client will greylist peers that are found to be offline\n#        # to prevent re-selecting them in subsequent retries.\n#        # This interval will define how long a peer is greylisted\n#        greylistExpiry: 10s\n#  eventService:\n#    # Event service type (optional). If not specified then the type is automatically\n#    # determined from channel capabilities.\n#    type: (deliver|eventhub)\n    # the below timeouts are commented out to use the default values that are found in\n    # &quot;pkg&#x2F;fab&#x2F;endpointconfig.go&quot;\n    # the client is free to override the default values by uncommenting and resetting\n    # the values as they see fit in their config file\n#    timeout:\n#      connection: 15s\n#      registrationResponse: 15s\n#  orderer:\n#    timeout:\n#      connection: 15s\n#      response: 15s\n#  global:\n#    timeout:\n#      query: 180s\n#      execute: 180s\n#      resmgmt: 180s\n#    cache:\n#      connectionIdle: 30s\n#      eventServiceIdle: 2m\n#      channelConfig: 30m\n#      channelMembership: 30s\n#      discovery: 10s\n#      selection: 10m\n\n  # Root of the MSP directories with keys and certs.\n  cryptoconfig:\n    path: $&#123;GOPATH&#125;&#x2F;src&#x2F;github.com&#x2F;kongyixueyuan.com&#x2F;education&#x2F;fixtures&#x2F;crypto-config\n\n  # Some SDKs support pluggable KV stores, the properties under &quot;credentialStore&quot;\n  # are implementation specific\n  credentialStore:\n    path: &#x2F;tmp&#x2F;kongyixueyuan-store\n\n    # [Optional]. Specific to the CryptoSuite implementation used by GO SDK. Software-based implementations\n    # requiring a key store. PKCS#11 based implementations does not.\n    cryptoStore:\n      path: &#x2F;tmp&#x2F;kongyixueyuan-msp\n\n   # BCCSP config for the client. Used by GO SDK.\n  BCCSP:\n    security:\n     enabled: true\n     default:\n      provider: &quot;SW&quot;\n     hashAlgorithm: &quot;SHA2&quot;\n     softVerify: true\n     level: 256\n\n  tlsCerts:\n    # [Optional]. Use system certificate pool when connecting to peers, orderers (for negotiating TLS) Default: false\n    systemCertPool: false\n\n    # [Optional]. Client key and cert for TLS handshake with peers and orderers\n    client:\n      key:\n        path:\n      cert:\n        path:\n\n#\n# [Optional]. But most apps would have this section so that channel objects can be constructed\n# based on the content below. If an app is creating channels, then it likely will not need this\n# section.\n#\nchannels:\n  # name of the channel\n  kevinkongyixueyuan:\n    # Required. list of orderers designated by the application to use for transactions on this\n    # channel. This list can be a result of access control (&quot;org1&quot; can only access &quot;ordererA&quot;), or\n    # operational decisions to share loads from applications among the orderers.  The values must\n    # be &quot;names&quot; of orgs defined under &quot;organizations&#x2F;peers&quot;\n    # deprecated: not recommended, to override any orderer configuration items, entity matchers should be used.\n    # orderers:\n    #  - orderer.kevin.kongyixueyuan.com\n\n    # Required. list of peers from participating orgs\n    peers:\n      peer0.org1.kevin.kongyixueyuan.com:\n        # [Optional]. will this peer be sent transaction proposals for endorsement? The peer must\n        # have the chaincode installed. The app can also use this property to decide which peers\n        # to send the chaincode install request. Default: true\n        endorsingPeer: true\n\n        # [Optional]. will this peer be sent query proposals? The peer must have the chaincode\n        # installed. The app can also use this property to decide which peers to send the\n        # chaincode install request. Default: true\n        chaincodeQuery: true\n\n        # [Optional]. will this peer be sent query proposals that do not require chaincodes, like\n        # queryBlock(), queryTransaction(), etc. Default: true\n        ledgerQuery: true\n\n        # [Optional]. will this peer be the target of the SDK&#39;s listener registration? All peers can\n        # produce events but the app typically only needs to connect to one to listen to events.\n        # Default: true\n        eventSource: true\n\n      peer1.org1.kevin.kongyixueyuan.com:\n        endorsingPeer: true\n        chaincodeQuery: true\n        ledgerQuery: true\n        eventSource: true\n\n    policies:\n      #[Optional] options for retrieving channel configuration blocks\n      queryChannelConfig:\n        #[Optional] min number of success responses (from targets&#x2F;peers)\n        minResponses: 1\n        #[Optional] channel config will be retrieved for these number of random targets\n        maxTargets: 1\n        #[Optional] retry options for query config block\n        retryOpts:\n          #[Optional] number of retry attempts\n          attempts: 5\n          #[Optional] the back off interval for the first retry attempt\n          initialBackoff: 500ms\n          #[Optional] the maximum back off interval for any retry attempt\n          maxBackoff: 5s\n          #[Optional] he factor by which the initial back off period is exponentially incremented\n          backoffFactor: 2.0\n      #[Optional] options for retrieving discovery info\n      discovery:\n        #[Optional] discovery info will be retrieved for these number of random targets\n        maxTargets: 2\n        #[Optional] retry options for retrieving discovery info\n        retryOpts:\n          #[Optional] number of retry attempts\n          attempts: 4\n          #[Optional] the back off interval for the first retry attempt\n          initialBackoff: 500ms\n          #[Optional] the maximum back off interval for any retry attempt\n          maxBackoff: 5s\n          #[Optional] he factor by which the initial back off period is exponentially incremented\n          backoffFactor: 2.0\n      #[Optional] options for the event service\n      eventService:\n        # [Optional] resolverStrategy specifies the peer resolver strategy to use when connecting to a peer\n        # Possible values: [PreferOrg (default), MinBlockHeight, Balanced]\n        #\n        # PreferOrg:\n        #   Determines which peers are suitable based on block height lag threshold, although will prefer the peers in the\n        #   current org (as long as their block height is above a configured threshold). If none of the peers from the current org\n        #   are suitable then a peer from another org is chosen.\n        # MinBlockHeight:\n        #   Chooses the best peer according to a block height lag threshold. The maximum block height of all peers is\n        #   determined and the peers whose block heights are under the maximum height but above a provided &quot;lag&quot; threshold are load\n        #   balanced. The other peers are not considered.\n        # Balanced:\n        #   Chooses peers using the configured balancer.\n        resolverStrategy: PreferOrg\n        # [Optional] balancer is the balancer to use when choosing a peer to connect to\n        # Possible values: [Random (default), RoundRobin]\n        balancer: Random\n        # [Optional] blockHeightLagThreshold sets the block height lag threshold. This value is used for choosing a peer\n        # to connect to. If a peer is lagging behind the most up-to-date peer by more than the given number of\n        # blocks then it will be excluded from selection.\n        # If set to 0 then only the most up-to-date peers are considered.\n        # If set to -1 then all peers (regardless of block height) are considered for selection.\n        # Default: 5\n        blockHeightLagThreshold: 5\n        # [Optional] reconnectBlockHeightLagThreshold - if &gt;0 then the event client will disconnect from the peer if the peer&#39;s\n        # block height falls behind the specified number of blocks and will reconnect to a better performing peer.\n        # If set to 0 then this feature is disabled.\n        # Default: 10\n        # NOTES:\n        #   - peerMonitorPeriod must be &gt;0 to enable this feature\n        #   - Setting this value too low may cause the event client to disconnect&#x2F;reconnect too frequently, thereby\n        #     affecting performance.\n        reconnectBlockHeightLagThreshold: 10\n        # [Optional] peerMonitorPeriod is the period in which the connected peer is monitored to see if\n        # the event client should disconnect from it and reconnect to another peer.\n        # Default: 0 (disabled)\n        peerMonitorPeriod: 5s\n\n#\n# list of participating organizations in this network\n#\norganizations:\n  Org1:\n    mspid: org1.kevin.kongyixueyuan.com\n    cryptoPath: peerOrganizations&#x2F;org1.kevin.kongyixueyuan.com&#x2F;users&#x2F;&#123;userName&#125;@org1.kevin.kongyixueyuan.com&#x2F;msp\n    peers:\n      - peer0.org1.kevin.kongyixueyuan.com\n      - peer1.org1.kevin.kongyixueyuan.com\n\n    # [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based\n    # network. Typically certificates provisioning is done in a separate process outside of the\n    # runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for\n    # dynamic certificate management (enroll, revoke, re-enroll). The following section is only for\n    # Fabric-CA servers.\n    certificateAuthorities:\n      - ca.org1.kevin.kongyixueyuan.com\n\n#\n# List of orderers to send transaction and channel create&#x2F;update requests to. For the time\n# being only one orderer is needed. If more than one is defined, which one get used by the\n# SDK is implementation specific. Consult each SDK&#39;s documentation for its handling of orderers.\n#\norderers:\n  orderer.kevin.kongyixueyuan.com:\n    url: localhost:7050\n\n    # these are standard properties defined by the gRPC library\n    # they will be passed in as-is to gRPC client constructor\n    grpcOptions:\n      ssl-target-name-override: orderer.kevin.kongyixueyuan.com\n      # These parameters should be set in coordination with the keepalive policy on the server,\n      # as incompatible settings can result in closing of connection.\n      # When duration of the &#39;keep-alive-time&#39; is set to 0 or less the keep alive client parameters are disabled\n      keep-alive-time: 0s\n      keep-alive-timeout: 20s\n      keep-alive-permit: false\n      fail-fast: false\n      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs\n      allow-insecure: false\n\n    tlsCACerts:\n      # Certificate location absolute path\n      path: $&#123;GOPATH&#125;&#x2F;src&#x2F;github.com&#x2F;kongyixueyuan.com&#x2F;education&#x2F;fixtures&#x2F;crypto-config&#x2F;ordererOrganizations&#x2F;kevin.kongyixueyuan.com&#x2F;tlsca&#x2F;tlsca.kevin.kongyixueyuan.com-cert.pem\n\n#\n# List of peers to send various requests to, including endorsement, query\n# and event listener registration.\n#\npeers:\n  peer0.org1.kevin.kongyixueyuan.com:\n    # this URL is used to send endorsement and query requests\n    url: localhost:7051\n    # eventUrl is only needed when using eventhub (default is delivery service)\n    eventUrl: localhost:7053\n\n    grpcOptions:\n      ssl-target-name-override: peer0.org1.kevin.kongyixueyuan.com\n      # These parameters should be set in coordination with the keepalive policy on the server,\n      # as incompatible settings can result in closing of connection.\n      # When duration of the &#39;keep-alive-time&#39; is set to 0 or less the keep alive client parameters are disabled\n      keep-alive-time: 0s\n      keep-alive-timeout: 20s\n      keep-alive-permit: false\n      fail-fast: false\n      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs\n      allow-insecure: false\n\n    tlsCACerts:\n      # Certificate location absolute path\n      path: $&#123;GOPATH&#125;&#x2F;src&#x2F;github.com&#x2F;kongyixueyuan.com&#x2F;education&#x2F;fixtures&#x2F;crypto-config&#x2F;peerOrganizations&#x2F;org1.kevin.kongyixueyuan.com&#x2F;tlsca&#x2F;tlsca.org1.kevin.kongyixueyuan.com-cert.pem\n\n  peer1.org1.kevin.kongyixueyuan.com:\n    # this URL is used to send endorsement and query requests\n    url: localhost:7151\n    # eventUrl is only needed when using eventhub (default is delivery service)\n    eventUrl: localhost:7153\n\n    grpcOptions:\n      ssl-target-name-override: peer1.org1.kevin.kongyixueyuan.com\n      # These parameters should be set in coordination with the keepalive policy on the server,\n      # as incompatible settings can result in closing of connection.\n      # When duration of the &#39;keep-alive-time&#39; is set to 0 or less the keep alive client parameters are disabled\n      keep-alive-time: 0s\n      keep-alive-timeout: 20s\n      keep-alive-permit: false\n      fail-fast: false\n      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs\n      allow-insecure: false\n\n    tlsCACerts:\n      # Certificate location absolute path\n      path: $&#123;GOPATH&#125;&#x2F;src&#x2F;github.com&#x2F;kongyixueyuan.com&#x2F;education&#x2F;fixtures&#x2F;crypto-config&#x2F;peerOrganizations&#x2F;org1.kevin.kongyixueyuan.com&#x2F;tlsca&#x2F;tlsca.org1.kevin.kongyixueyuan.com-cert.pem\n\n#\n# Fabric-CA is a special kind of Certificate Authority provided by Hyperledger Fabric which allows\n# certificate management to be done via REST APIs. Application may choose to use a standard\n# Certificate Authority instead of Fabric-CA, in which case this section would not be specified.\n#\ncertificateAuthorities:\n  ca.org1.kevin.kongyixueyuan.com:\n    url: http:&#x2F;&#x2F;localhost:7054\n    tlsCACerts:\n      # Certificate location absolute path\n      path: $&#123;GOPATH&#125;&#x2F;src&#x2F;github.com&#x2F;kongyixueyuan.com&#x2F;education&#x2F;fixtures&#x2F;crypto-config&#x2F;peerOrganizations&#x2F;org1.kevin.kongyixueyuan.com&#x2F;ca&#x2F;ca.org1.kevin.kongyixueyuan.com-cert.pem\n\n    # Fabric-CA supports dynamic user enrollment via REST APIs. A &quot;root&quot; user, a.k.a registrar, is\n    # needed to enroll and invoke new users.\n    registrar:\n      enrollId: admin\n      enrollSecret: adminpw\n    # [Optional] The optional name of the CA.\n    caName: ca.org1.kevin.kongyixueyuan.com\n\nentityMatchers:\n  peer:\n    - pattern: (\\w*)peer0.org1.kevin.kongyixueyuan.com(\\w*)\n      urlSubstitutionExp: localhost:7051\n      eventUrlSubstitutionExp: localhost:7053\n      sslTargetOverrideUrlSubstitutionExp: peer0.org1.kevin.kongyixueyuan.com\n      mappedHost: peer0.org1.kevin.kongyixueyuan.com\n\n    - pattern: (\\w*)peer1.org1.kevin.kongyixueyuan.com(\\w*)\n      urlSubstitutionExp: localhost:7151\n      eventUrlSubstitutionExp: localhost:7153\n      sslTargetOverrideUrlSubstitutionExp: peer1.org1.kevin.kongyixueyuan.com\n      mappedHost: peer1.org1.kevin.kongyixueyuan.com\n\n  orderer:\n    - pattern: (\\w*)orderer.kevin.kongyixueyuan.com(\\w*)\n      urlSubstitutionExp: localhost:7050\n      sslTargetOverrideUrlSubstitutionExp: orderer.kevin.kongyixueyuan.com\n      mappedHost: orderer.kevin.kongyixueyuan.com\n\n  certificateAuthorities:\n    - pattern: (\\w*)ca.org1.kevin.kongyixueyuan.com(\\w*)\n      urlSubstitutionExp: http:&#x2F;&#x2F;localhost:7054\n      mappedHost: ca.org1.kevin.kongyixueyuan.com\n5.2 声明结构体在当前项目根目录中创建一个存放链码文件的 chaincode 目录，然后在该目录下创建一个 eduStruct.go 的文件并对其进行编辑\n$ mkdir chaincode\n$ vim chaincode&#x2F;eduStruct.go\neduStruct.go 文件主要声明一个结构体，用于将多个数据包装成为一个对象，然后进行进一步的处理。该文件完整代码如下：\n&#x2F;**\n  @Author : hanxiaodong\n*&#x2F;\npackage main\n\ntype Education struct &#123;\n    ObjectType    string    &#96;json:&quot;docType&quot;&#96;\n    Name    string    &#96;json:&quot;Name&quot;&#96;        &#x2F;&#x2F; 姓名\n    Gender    string    &#96;json:&quot;Gender&quot;&#96;        &#x2F;&#x2F; 性别\n    Nation    string    &#96;json:&quot;Nation&quot;&#96;        &#x2F;&#x2F; 民族\n    EntityID    string    &#96;json:&quot;EntityID&quot;&#96;        &#x2F;&#x2F; 身份证号\n    Place    string    &#96;json:&quot;Place&quot;&#96;        &#x2F;&#x2F; 籍贯\n    BirthDay    string    &#96;json:&quot;BirthDay&quot;&#96;        &#x2F;&#x2F; 出生日期\n\n    EnrollDate    string    &#96;json:&quot;EnrollDate&quot;&#96;        &#x2F;&#x2F; 入学日期\n    GraduationDate    string    &#96;json:&quot;GraduationDate&quot;&#96;    &#x2F;&#x2F; 毕（结）业日期\n    SchoolName    string    &#96;json:&quot;SchoolName&quot;&#96;    &#x2F;&#x2F; 学校名称\n    Major    string    &#96;json:&quot;Major&quot;&#96;    &#x2F;&#x2F; 专业\n    QuaType    string    &#96;json:&quot;QuaType&quot;&#96;    &#x2F;&#x2F; 学历类别\n    Length    string    &#96;json:&quot;Length&quot;&#96;    &#x2F;&#x2F; 学制\n    Mode    string    &#96;json:&quot;Mode&quot;&#96;    &#x2F;&#x2F; 学习形式\n    Level    string    &#96;json:&quot;Level&quot;&#96;    &#x2F;&#x2F; 层次\n    Graduation    string    &#96;json:&quot;Graduation&quot;&#96;    &#x2F;&#x2F; 毕（结）业\n    CertNo    string    &#96;json:&quot;CertNo&quot;&#96;    &#x2F;&#x2F; 证书编号\n\n    Photo    string    &#96;json:&quot;Photo&quot;&#96;    &#x2F;&#x2F; 照片\n\n    Historys    []HistoryItem    &#x2F;&#x2F; 当前edu的历史记录\n&#125;\n\ntype HistoryItem struct &#123;\n    TxId    string\n    Education    Education\n&#125;\n5.3 编写链码在 chaincode 目录下创建一个 main.go 的文件并对其进行编辑\n$ vim chaincode&#x2F;main.go\nmain.go 文件作为链码的主文件，主要声明 Init(stub shim.ChaincodeStubInterface)、Invoke(stub shim.ChaincodeStubInterface) 函数，完成对链码初始化及调用的相关实现，完整代码如下：\n&#x2F;**\n  @Author : hanxiaodong\n*&#x2F;\npackage main\n\nimport (\n    &quot;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;core&#x2F;chaincode&#x2F;shim&quot;\n    &quot;fmt&quot;\n    &quot;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;protos&#x2F;peer&quot;\n)\n\ntype EducationChaincode struct &#123;\n\n&#125;\n\nfunc (t *EducationChaincode) Init(stub shim.ChaincodeStubInterface) peer.Response&#123;\n\n    return shim.Success(nil)\n&#125;\n\nfunc (t *EducationChaincode) Invoke(stub shim.ChaincodeStubInterface) peer.Response&#123;\n    &#x2F;&#x2F; 获取用户意图\n    fun, args :&#x3D; stub.GetFunctionAndParameters()\n\n    if fun &#x3D;&#x3D; &quot;addEdu&quot;&#123;\n        return t.addEdu(stub, args)        &#x2F;&#x2F; 添加信息\n    &#125;else if fun &#x3D;&#x3D; &quot;queryEduByCertNoAndName&quot; &#123;\n        return t.queryEduByCertNoAndName(stub, args)        &#x2F;&#x2F; 根据证书编号及姓名查询信息\n    &#125;else if fun &#x3D;&#x3D; &quot;queryEduInfoByEntityID&quot; &#123;\n        return t.queryEduInfoByEntityID(stub, args)    &#x2F;&#x2F; 根据身份证号码及姓名查询详情\n    &#125;else if fun &#x3D;&#x3D; &quot;updateEdu&quot; &#123;\n        return t.updateEdu(stub, args)        &#x2F;&#x2F; 根据证书编号更新信息\n    &#125;else if fun &#x3D;&#x3D; &quot;delEdu&quot;&#123;\n        return t.delEdu(stub, args)    &#x2F;&#x2F; 根据证书编号删除信息\n    &#125;\n\n    return shim.Error(&quot;指定的函数名称错误&quot;)\n\n&#125;\n\nfunc main()&#123;\n    err :&#x3D; shim.Start(new(EducationChaincode))\n    if err !&#x3D; nil&#123;\n        fmt.Printf(&quot;启动EducationChaincode时发生错误: %s&quot;, err)\n    &#125;\n&#125;\n创建 eduCC.go 文件，该文件实现了使用链码相关的API对分类账本状态进行具体操作的各个函数：\n\nPutEdu：实现将指定的对象序列化后保存至分类账本中\nGetEduInfo：根据指定的Key（身份证号码）查询对应的状态，反序列后将对象返回\ngetEduByQueryString：根据指定的查询字符串从 CouchDB 中查询状态\naddEdu：接收对象并调用 PutEdu 函数实现保存状态的功能\nqueryEduByCertNoAndName：根据指定的证书编号与姓名查询状态\nqueryEduInfoByEntityID：根据指定的身份证号码（Key）查询状态\nupdateEdu：实现对状态进行编辑功能\ndelEdu：从分类账本中删除状态，此功能暂不提供\n\neduCC.go 文件完整内容如下：\n&#x2F;**\n  @Author : hanxiaodong\n*&#x2F;\n\npackage main\n\nimport (\n    &quot;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;core&#x2F;chaincode&#x2F;shim&quot;\n    &quot;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;protos&#x2F;peer&quot;\n    &quot;encoding&#x2F;json&quot;\n    &quot;fmt&quot;\n    &quot;bytes&quot;\n)\n\nconst DOC_TYPE &#x3D; &quot;eduObj&quot;\n\n&#x2F;&#x2F; 保存edu\n&#x2F;&#x2F; args: education\nfunc PutEdu(stub shim.ChaincodeStubInterface, edu Education) ([]byte, bool) &#123;\n\n    edu.ObjectType &#x3D; DOC_TYPE\n\n    b, err :&#x3D; json.Marshal(edu)\n    if err !&#x3D; nil &#123;\n        return nil, false\n    &#125;\n\n    &#x2F;&#x2F; 保存edu状态\n    err &#x3D; stub.PutState(edu.EntityID, b)\n    if err !&#x3D; nil &#123;\n        return nil, false\n    &#125;\n\n    return b, true\n&#125;\n\n&#x2F;&#x2F; 根据身份证号码查询信息状态\n&#x2F;&#x2F; args: entityID\nfunc GetEduInfo(stub shim.ChaincodeStubInterface, entityID string) (Education, bool)  &#123;\n    var edu Education\n    &#x2F;&#x2F; 根据身份证号码查询信息状态\n    b, err :&#x3D; stub.GetState(entityID)\n    if err !&#x3D; nil &#123;\n        return edu, false\n    &#125;\n\n    if b &#x3D;&#x3D; nil &#123;\n        return edu, false\n    &#125;\n\n    &#x2F;&#x2F; 对查询到的状态进行反序列化\n    err &#x3D; json.Unmarshal(b, &amp;edu)\n    if err !&#x3D; nil &#123;\n        return edu, false\n    &#125;\n\n    &#x2F;&#x2F; 返回结果\n    return edu, true\n&#125;\n\n&#x2F;&#x2F; 根据指定的查询字符串实现富查询\nfunc getEduByQueryString(stub shim.ChaincodeStubInterface, queryString string) ([]byte, error) &#123;\n\n    resultsIterator, err :&#x3D; stub.GetQueryResult(queryString)\n    if err !&#x3D; nil &#123;\n        return nil, err\n    &#125;\n    defer  resultsIterator.Close()\n\n    &#x2F;&#x2F; buffer is a JSON array containing QueryRecords\n    var buffer bytes.Buffer\n\n    bArrayMemberAlreadyWritten :&#x3D; false\n    for resultsIterator.HasNext() &#123;\n        queryResponse, err :&#x3D; resultsIterator.Next()\n        if err !&#x3D; nil &#123;\n            return nil, err\n        &#125;\n        &#x2F;&#x2F; Add a comma before array members, suppress it for the first array member\n        if bArrayMemberAlreadyWritten &#x3D;&#x3D; true &#123;\n            buffer.WriteString(&quot;,&quot;)\n        &#125;\n\n        &#x2F;&#x2F; Record is a JSON object, so we write as-is\n        buffer.WriteString(string(queryResponse.Value))\n        bArrayMemberAlreadyWritten &#x3D; true\n    &#125;\n\n    fmt.Printf(&quot;- getQueryResultForQueryString queryResult:\\n%s\\n&quot;, buffer.String())\n\n    return buffer.Bytes(), nil\n\n&#125;\n\n&#x2F;&#x2F; 添加信息\n&#x2F;&#x2F; args: educationObject\n&#x2F;&#x2F; 身份证号为 key, Education 为 value\nfunc (t *EducationChaincode) addEdu(stub shim.ChaincodeStubInterface, args []string) peer.Response &#123;\n\n    if len(args) !&#x3D; 2&#123;\n        return shim.Error(&quot;给定的参数个数不符合要求&quot;)\n    &#125;\n\n    var edu Education\n    err :&#x3D; json.Unmarshal([]byte(args[0]), &amp;edu)\n    if err !&#x3D; nil &#123;\n        return shim.Error(&quot;反序列化信息时发生错误&quot;)\n    &#125;\n\n    &#x2F;&#x2F; 查重: 身份证号码必须唯一\n    _, exist :&#x3D; GetEduInfo(stub, edu.EntityID)\n    if exist &#123;\n        return shim.Error(&quot;要添加的身份证号码已存在&quot;)\n    &#125;\n\n    _, bl :&#x3D; PutEdu(stub, edu)\n    if !bl &#123;\n        return shim.Error(&quot;保存信息时发生错误&quot;)\n    &#125;\n\n    err &#x3D; stub.SetEvent(args[1], []byte&#123;&#125;)\n    if err !&#x3D; nil &#123;\n        return shim.Error(err.Error())\n    &#125;\n\n    return shim.Success([]byte(&quot;信息添加成功&quot;))\n&#125;\n\n&#x2F;&#x2F; 根据证书编号及姓名查询信息\n&#x2F;&#x2F; args: CertNo, name\nfunc (t *EducationChaincode) queryEduByCertNoAndName(stub shim.ChaincodeStubInterface, args []string) peer.Response &#123;\n\n    if len(args) !&#x3D; 2 &#123;\n        return shim.Error(&quot;给定的参数个数不符合要求&quot;)\n    &#125;\n    CertNo :&#x3D; args[0]\n    name :&#x3D; args[1]\n\n    &#x2F;&#x2F; 拼装CouchDB所需要的查询字符串(是标准的一个JSON串)\n    &#x2F;&#x2F; queryString :&#x3D; fmt.Sprintf(&quot;&#123;\\&quot;selector\\&quot;:&#123;\\&quot;docType\\&quot;:\\&quot;eduObj\\&quot;, \\&quot;CertNo\\&quot;:\\&quot;%s\\&quot;&#125;&#125;&quot;, CertNo)\n    queryString :&#x3D; fmt.Sprintf(&quot;&#123;\\&quot;selector\\&quot;:&#123;\\&quot;docType\\&quot;:\\&quot;%s\\&quot;, \\&quot;CertNo\\&quot;:\\&quot;%s\\&quot;, \\&quot;Name\\&quot;:\\&quot;%s\\&quot;&#125;&#125;&quot;, DOC_TYPE, CertNo, name)\n\n    &#x2F;&#x2F; 查询数据\n    result, err :&#x3D; getEduByQueryString(stub, queryString)\n    if err !&#x3D; nil &#123;\n        return shim.Error(&quot;根据证书编号及姓名查询信息时发生错误&quot;)\n    &#125;\n    if result &#x3D;&#x3D; nil &#123;\n        return shim.Error(&quot;根据指定的证书编号及姓名没有查询到相关的信息&quot;)\n    &#125;\n    return shim.Success(result)\n&#125;\n\n&#x2F;&#x2F; 根据身份证号码查询详情（溯源）\n&#x2F;&#x2F; args: entityID\nfunc (t *EducationChaincode) queryEduInfoByEntityID(stub shim.ChaincodeStubInterface, args []string) peer.Response &#123;\n    if len(args) !&#x3D; 1 &#123;\n        return shim.Error(&quot;给定的参数个数不符合要求&quot;)\n    &#125;\n\n    &#x2F;&#x2F; 根据身份证号码查询edu状态\n    b, err :&#x3D; stub.GetState(args[0])\n    if err !&#x3D; nil &#123;\n        return shim.Error(&quot;根据身份证号码查询信息失败&quot;)\n    &#125;\n\n    if b &#x3D;&#x3D; nil &#123;\n        return shim.Error(&quot;根据身份证号码没有查询到相关的信息&quot;)\n    &#125;\n\n    &#x2F;&#x2F; 对查询到的状态进行反序列化\n    var edu Education\n    err &#x3D; json.Unmarshal(b, &amp;edu)\n    if err !&#x3D; nil &#123;\n        return  shim.Error(&quot;反序列化edu信息失败&quot;)\n    &#125;\n\n    &#x2F;&#x2F; 获取历史变更数据\n    iterator, err :&#x3D; stub.GetHistoryForKey(edu.EntityID)\n    if err !&#x3D; nil &#123;\n        return shim.Error(&quot;根据指定的身份证号码查询对应的历史变更数据失败&quot;)\n    &#125;\n    defer iterator.Close()\n\n    &#x2F;&#x2F; 迭代处理\n    var historys []HistoryItem\n    var hisEdu Education\n    for iterator.HasNext() &#123;\n        hisData, err :&#x3D; iterator.Next()\n        if err !&#x3D; nil &#123;\n            return shim.Error(&quot;获取edu的历史变更数据失败&quot;)\n        &#125;\n\n        var historyItem HistoryItem\n        historyItem.TxId &#x3D; hisData.TxId\n        json.Unmarshal(hisData.Value, &amp;hisEdu)\n\n        if hisData.Value &#x3D;&#x3D; nil &#123;\n            var empty Education\n            historyItem.Education &#x3D; empty\n        &#125;else &#123;\n            historyItem.Education &#x3D; hisEdu\n        &#125;\n\n        historys &#x3D; append(historys, historyItem)\n\n    &#125;\n\n    edu.Historys &#x3D; historys\n\n    &#x2F;&#x2F; 返回\n    result, err :&#x3D; json.Marshal(edu)\n    if err !&#x3D; nil &#123;\n        return shim.Error(&quot;序列化edu信息时发生错误&quot;)\n    &#125;\n    return shim.Success(result)\n&#125;\n\n&#x2F;&#x2F; 根据身份证号更新信息\n&#x2F;&#x2F; args: educationObject\nfunc (t *EducationChaincode) updateEdu(stub shim.ChaincodeStubInterface, args []string) peer.Response &#123;\n    if len(args) !&#x3D; 2&#123;\n        return shim.Error(&quot;给定的参数个数不符合要求&quot;)\n    &#125;\n\n    var info Education\n    err :&#x3D; json.Unmarshal([]byte(args[0]), &amp;info)\n    if err !&#x3D; nil &#123;\n        return  shim.Error(&quot;反序列化edu信息失败&quot;)\n    &#125;\n\n    &#x2F;&#x2F; 根据身份证号码查询信息\n    result, bl :&#x3D; GetEduInfo(stub, info.EntityID)\n    if !bl&#123;\n        return shim.Error(&quot;根据身份证号码查询信息时发生错误&quot;)\n    &#125;\n\n    result.EnrollDate &#x3D; info.EnrollDate\n    result.GraduationDate &#x3D; info.GraduationDate\n    result.SchoolName &#x3D; info.SchoolName\n    result.Major &#x3D; info.Major\n    result.QuaType &#x3D; info.QuaType\n    result.Length &#x3D; info.Length\n    result.Mode &#x3D; info.Mode\n    result.Level &#x3D; info.Level\n    result.Graduation &#x3D; info.Graduation\n    result.CertNo &#x3D; info.CertNo;\n\n    _, bl &#x3D; PutEdu(stub, result)\n    if !bl &#123;\n        return shim.Error(&quot;保存信息信息时发生错误&quot;)\n    &#125;\n\n    err &#x3D; stub.SetEvent(args[1], []byte&#123;&#125;)\n    if err !&#x3D; nil &#123;\n        return shim.Error(err.Error())\n    &#125;\n\n    return shim.Success([]byte(&quot;信息更新成功&quot;))\n&#125;\n\n&#x2F;&#x2F; 根据身份证号删除信息（暂不对外提供）\n&#x2F;&#x2F; args: entityID\nfunc (t *EducationChaincode) delEdu(stub shim.ChaincodeStubInterface, args []string) peer.Response &#123;\n    if len(args) !&#x3D; 2&#123;\n        return shim.Error(&quot;给定的参数个数不符合要求&quot;)\n    &#125;\n\n    &#x2F;*var edu Education\n    result, bl :&#x3D; GetEduInfo(stub, info.EntityID)\n    err :&#x3D; json.Unmarshal(result, &amp;edu)\n    if err !&#x3D; nil &#123;\n        return shim.Error(&quot;反序列化信息时发生错误&quot;)\n    &#125;*&#x2F;\n\n    err :&#x3D; stub.DelState(args[0])\n    if err !&#x3D; nil &#123;\n        return shim.Error(&quot;删除信息时发生错误&quot;)\n    &#125;\n\n    err &#x3D; stub.SetEvent(args[1], []byte&#123;&#125;)\n    if err !&#x3D; nil &#123;\n        return shim.Error(err.Error())\n    &#125;\n\n    return shim.Success([]byte(&quot;信息删除成功&quot;))\n&#125;\n链码编写好以后，我们需要使用 Fabric-SDK-Go 提供的相关 API 来实现对链码的安装及实例化操作，而无需在命令提示符中输入烦锁的相关操作命令。接下来依次完成如下步骤：\n\n安装依赖：相关内容及代码请参见第十一章第二节中的内容。\n链码自动布署：相关内容代码请参见第十一章 第四节中的内容。\n\n6.业务层实现6.1 事件处理在项目根目录下创建一个 service 目录作为业务层，在业务层中，我们使用 Fabric-SDK-Go 提供的接口对象调用相应的 API 以实现对链码的访问，最终实现对分类账本中的状态进行操作。\n$ cd $GOPATH&#x2F;src&#x2F;github.com&#x2F;kongyixueyuan.com&#x2F;education\n$ mkdir service\n在 service 目录下创建 domain.go 文件并进行编辑， 声明一个结构体及对事件相关而封装的源代码\n$ vim service&#x2F;domain.go\ndomain.go 文件完整内容如下：\n&#x2F;**\n  @Author : hanxiaodong\n*&#x2F;\npackage service\n\nimport (\n    &quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;client&#x2F;channel&quot;\n    &quot;fmt&quot;\n    &quot;time&quot;\n    &quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;common&#x2F;providers&#x2F;fab&quot;\n)\n\ntype Education struct &#123;\n    ObjectType    string    &#96;json:&quot;docType&quot;&#96;\n    Name    string    &#96;json:&quot;Name&quot;&#96;        &#x2F;&#x2F; 姓名\n    Gender    string    &#96;json:&quot;Gender&quot;&#96;        &#x2F;&#x2F; 性别\n    Nation    string    &#96;json:&quot;Nation&quot;&#96;        &#x2F;&#x2F; 民族\n    EntityID    string    &#96;json:&quot;EntityID&quot;&#96;        &#x2F;&#x2F; 身份证号\n    Place    string    &#96;json:&quot;Place&quot;&#96;        &#x2F;&#x2F; 籍贯\n    BirthDay    string    &#96;json:&quot;BirthDay&quot;&#96;        &#x2F;&#x2F; 出生日期\n    EnrollDate    string    &#96;json:&quot;EnrollDate&quot;&#96;        &#x2F;&#x2F; 入学日期\n    GraduationDate    string    &#96;json:&quot;GraduationDate&quot;&#96;    &#x2F;&#x2F; 毕（结）业日期\n    SchoolName    string    &#96;json:&quot;SchoolName&quot;&#96;    &#x2F;&#x2F; 学校名称\n    Major    string    &#96;json:&quot;Major&quot;&#96;    &#x2F;&#x2F; 专业\n    QuaType    string    &#96;json:&quot;QuaType&quot;&#96;    &#x2F;&#x2F; 学历类别\n    Length    string    &#96;json:&quot;Length&quot;&#96;    &#x2F;&#x2F; 学制\n    Mode    string    &#96;json:&quot;Mode&quot;&#96;    &#x2F;&#x2F; 学习形式\n    Level    string    &#96;json:&quot;Level&quot;&#96;    &#x2F;&#x2F; 层次\n    Graduation    string    &#96;json:&quot;Graduation&quot;&#96;    &#x2F;&#x2F; 毕（结）业\n    CertNo    string    &#96;json:&quot;CertNo&quot;&#96;    &#x2F;&#x2F; 证书编号\n\n    Photo    string    &#96;json:&quot;Photo&quot;&#96;    &#x2F;&#x2F; 照片\n\n    Historys    []HistoryItem    &#x2F;&#x2F; 当前edu的历史记录\n&#125;\n\ntype HistoryItem struct &#123;\n    TxId    string\n    Education    Education\n&#125;\n\ntype ServiceSetup struct &#123;\n    ChaincodeID    string\n    Client    *channel.Client\n&#125;\n\nfunc regitserEvent(client *channel.Client, chaincodeID, eventID string) (fab.Registration, &lt;-chan *fab.CCEvent) &#123;\n\n    reg, notifier, err :&#x3D; client.RegisterChaincodeEvent(chaincodeID, eventID)\n    if err !&#x3D; nil &#123;\n        fmt.Println(&quot;注册链码事件失败: %s&quot;, err)\n    &#125;\n    return reg, notifier\n&#125;\n\nfunc eventResult(notifier &lt;-chan *fab.CCEvent, eventID string) error &#123;\n    select &#123;\n    case ccEvent :&#x3D; &lt;-notifier:\n        fmt.Printf(&quot;接收到链码事件: %v\\n&quot;, ccEvent)\n    case &lt;-time.After(time.Second * 20):\n        return fmt.Errorf(&quot;不能根据指定的事件ID接收到相应的链码事件(%s)&quot;, eventID)\n    &#125;\n    return nil\n&#125;\n6.2 业务层调用链码实现添加状态在 service 目录下创建 eduService.go 文件\n$ vim service&#x2F;eduService.go\n在 eduService.go 文件中编写内容如下，通过一个 SaveEdu 函数实现链码的调用，向分类账本中添加状态的功能：\n&#x2F;**\n  author: hanxiaodong\n  QQ群（专业Fabric交流群）：862733552\n *&#x2F;\npackage service\n\nimport (\n    &quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;client&#x2F;channel&quot;\n    &quot;encoding&#x2F;json&quot;\n)\n\nfunc (t *ServiceSetup) SaveEdu(edu Education) (string, error) &#123;\n\n    eventID :&#x3D; &quot;eventAddEdu&quot;\n    reg, notifier :&#x3D; regitserEvent(t.Client, t.ChaincodeID, eventID)\n    defer t.Client.UnregisterChaincodeEvent(reg)\n\n    &#x2F;&#x2F; 将edu对象序列化成为字节数组\n    b, err :&#x3D; json.Marshal(edu)\n    if err !&#x3D; nil &#123;\n        return &quot;&quot;, fmt.Errorf(&quot;指定的edu对象序列化时发生错误&quot;)\n    &#125;\n\n    req :&#x3D; channel.Request&#123;ChaincodeID: t.ChaincodeID, Fcn: &quot;addEdu&quot;, Args: [][]byte&#123;b, []byte(eventID)&#125;&#125;\n    respone, err :&#x3D; t.Client.Execute(req)\n    if err !&#x3D; nil &#123;\n        return &quot;&quot;, err\n    &#125;\n\n    err &#x3D; eventResult(notifier, eventID)\n    if err !&#x3D; nil &#123;\n        return &quot;&quot;, err\n    &#125;\n\n    return string(respone.TransactionID), nil\n&#125;\n测试添加状态\n编辑 main.go 文件\n$ vim main.go\nmain.go 中创建两个 edu 个对象，并调用 SaveEdu 函数，内容如下：\n&#x2F;**\n  author: hanxiaodong\n *&#x2F;\n\npackage main\n\nimport (\n    [......]\n    &quot;github.com&#x2F;kongyixueyuan.com&#x2F;education&#x2F;service&quot;\n)\n\n[......]\n    &#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F;\n\n    serviceSetup :&#x3D; service.ServiceSetup&#123;\n        ChaincodeID:EduCC,\n        Client:channelClient,\n    &#125;\n\n    edu :&#x3D; service.Education&#123;\n        Name: &quot;张三&quot;,\n        Gender: &quot;男&quot;,\n        Nation: &quot;汉&quot;,\n        EntityID: &quot;101&quot;,\n        Place: &quot;北京&quot;,\n        BirthDay: &quot;1991年01月01日&quot;,\n        EnrollDate: &quot;2009年9月&quot;,\n        GraduationDate: &quot;2013年7月&quot;,\n        SchoolName: &quot;中国政法大学&quot;,\n        Major: &quot;社会学&quot;,\n        QuaType: &quot;普通&quot;,\n        Length: &quot;四年&quot;,\n        Mode: &quot;普通全日制&quot;,\n        Level: &quot;本科&quot;,\n        Graduation: &quot;毕业&quot;,\n        CertNo: &quot;111&quot;,\n        Photo: &quot;&#x2F;static&#x2F;phone&#x2F;11.png&quot;,\n    &#125;\n\n    edu2 :&#x3D; service.Education&#123;\n        Name: &quot;李四&quot;,\n        Gender: &quot;男&quot;,\n        Nation: &quot;汉&quot;,\n        EntityID: &quot;102&quot;,\n        Place: &quot;上海&quot;,\n        BirthDay: &quot;1992年02月01日&quot;,\n        EnrollDate: &quot;2010年9月&quot;,\n        GraduationDate: &quot;2014年7月&quot;,\n        SchoolName: &quot;中国人民大学&quot;,\n        Major: &quot;行政管理&quot;,\n        QuaType: &quot;普通&quot;,\n        Length: &quot;四年&quot;,\n        Mode: &quot;普通全日制&quot;,\n        Level: &quot;本科&quot;,\n        Graduation: &quot;毕业&quot;,\n        CertNo: &quot;222&quot;,\n        Photo: &quot;&#x2F;static&#x2F;phone&#x2F;22.png&quot;,\n    &#125;\n\n    msg, err :&#x3D; serviceSetup.SaveEdu(edu)\n    if err !&#x3D; nil &#123;\n        fmt.Println(err.Error())\n    &#125;else &#123;\n        fmt.Println(&quot;信息发布成功, 交易编号为: &quot; + msg)\n    &#125;\n\n    msg, err &#x3D; serviceSetup.SaveEdu(edu2)\n    if err !&#x3D; nil &#123;\n        fmt.Println(err.Error())\n    &#125;else &#123;\n        fmt.Println(&quot;信息发布成功, 交易编号为: &quot; + msg)\n    &#125;    \n\n    &#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F;\n\n&#125;\n执行 make 命令运行应用程序\n$ make\n执行后如下图所示：\n\n6.3 调用链码实现根据证书编号与名称查询状态通过上面的 SaveEdu(edu Education) 函数，实现了向分类账本中添加状态，那么我们还需要实现从该分类账本中根据指定的条件查询出相应的状态，编辑 service/eduService.go 文件，向该文件中添加实现根据证书编号与姓名查询状态的相应代码。\n$ vim service&#x2F;eduService.go\n定义一个 FindEduByCertNoAndName 函数，接收两个字符串类型的参数，分别代表证书编号与姓名，该函数实现通过调用链码而实现查询状态的功能，该函数完整代码如下：\n[......]\n\nfunc (t *ServiceSetup) FindEduByCertNoAndName(certNo, name string) ([]byte, error)&#123;\n\n    req :&#x3D; channel.Request&#123;ChaincodeID: t.ChaincodeID, Fcn: &quot;queryEduByCertNoAndName&quot;, Args: [][]byte&#123;[]byte(certNo), []byte(name)&#125;&#125;\n    respone, err :&#x3D; t.Client.Query(req)\n    if err !&#x3D; nil &#123;\n        return []byte&#123;0x00&#125;, err\n    &#125;\n\n    return respone.Payload, nil\n&#125;\n测试根据证书编号与名称查询状态\n编辑 main.go 文件\n$ vim main.go\n在 main.go 文件中添加调用代码如下内容：\n[......]\n\n    &#x2F;&#x2F; 根据证书编号与名称查询信息\n    result, err :&#x3D; serviceSetup.FindEduByCertNoAndName(&quot;222&quot;,&quot;李四&quot;)\n    if err !&#x3D; nil &#123;\n        fmt.Println(err.Error())\n    &#125; else &#123;\n        var edu service.Education\n        json.Unmarshal(result, &amp;edu)\n        fmt.Println(&quot;根据证书编号与姓名查询信息成功：&quot;)\n        fmt.Println(edu)\n    &#125;\n\n    &#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F;\n\n&#125;\n执行 make 命令运行应用程序\n$ make\n6.4 调用链码实现根据身份证号码查询状态通过上面的 FindEduByCertNoAndName(certNo, name string) 函数，实现从该分类账本中根据指定的证书编号与姓名查询出相应的状态，下面我们来实现根据身份证号码查询状态的功能，编辑 service/eduService.go 文件，向该文件中添加实现根据 key 查询状态的相应代码。\n$ vim service&#x2F;eduService.go\n定义一个 FindEduInfoByEntityID 函数，接收一个字符串类型的参数，代表身份证号码（key），该函数实现通过调用链码而实现查询状态的功能，该函数完整代码如下：\n[......]\n\nfunc (t *ServiceSetup) FindEduInfoByEntityID(entityID string) ([]byte, error)&#123;\n\n    req :&#x3D; channel.Request&#123;ChaincodeID: t.ChaincodeID, Fcn: &quot;queryEduInfoByEntityID&quot;, Args: [][]byte&#123;[]byte(entityID)&#125;&#125;\n    respone, err :&#x3D; t.Client.Query(req)\n    if err !&#x3D; nil &#123;\n        return []byte&#123;0x00&#125;, err\n    &#125;\n\n    return respone.Payload, nil\n&#125;\n测试根据身份证号码查询状态\n编辑 main.go 文件\n$ vim main.go\n在 main.go 文件中添加调用代码如下内容：\n[......]\n\n    &#x2F;&#x2F; 根据身份证号码查询信息\n    result, err &#x3D; serviceSetup.FindEduInfoByEntityID(&quot;101&quot;)\n    if err !&#x3D; nil &#123;\n        fmt.Println(err.Error())\n    &#125; else &#123;\n        var edu service.Education\n        json.Unmarshal(result, &amp;edu)\n        fmt.Println(&quot;根据身份证号码查询信息成功：&quot;)\n        fmt.Println(edu)\n    &#125;\n\n    &#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F;\n\n&#125;\n执行 make 命令运行应用程序\n$ make\n6.5 调用链码实现修改/添加信息状态在一些情况下，有些人才会利用工作的业余时间进修，从而提升学历层次，我们必须要考虑到这种情况，所以需要应用程序实现对已有人员的信息进行编辑的功能；但是编辑并不能将之前的学历信息删除，而是在保留之前状态的基础之上添加新的状态，区块链技术很好的帮我们解决了这个问题。编辑 service/eduService.go 文件，向该文件中添加修改已有状态的相关代码。\n$ vim service&#x2F;eduService.go\n定义一个 ModifyEdu 函数，接收一个 Education 类型的对象，该函数实现通过调用链码而实现对已存在的状态进行修改（添加新信息）的功能，该函数完整代码如下：\n[......]\n\nfunc (t *ServiceSetup) ModifyEdu(edu Education) (string, error) &#123;\n\n    eventID :&#x3D; &quot;eventModifyEdu&quot;\n    reg, notifier :&#x3D; regitserEvent(t.Client, t.ChaincodeID, eventID)\n    defer t.Client.UnregisterChaincodeEvent(reg)\n\n    &#x2F;&#x2F; 将edu对象序列化成为字节数组\n    b, err :&#x3D; json.Marshal(edu)\n    if err !&#x3D; nil &#123;\n        return &quot;&quot;, fmt.Errorf(&quot;指定的edu对象序列化时发生错误&quot;)\n    &#125;\n\n    req :&#x3D; channel.Request&#123;ChaincodeID: t.ChaincodeID, Fcn: &quot;updateEdu&quot;, Args: [][]byte&#123;b, []byte(eventID)&#125;&#125;\n    respone, err :&#x3D; t.Client.Execute(req)\n    if err !&#x3D; nil &#123;\n        return &quot;&quot;, err\n    &#125;\n\n    err &#x3D; eventResult(notifier, eventID)\n    if err !&#x3D; nil &#123;\n        return &quot;&quot;, err\n    &#125;\n\n    return string(respone.TransactionID), nil\n&#125;\n测试修改状态\n编辑 main.go 文件\n$ vim main.go\n在 main.go 文件中添加调用代码如下内容：\n[......]\n\n    &#x2F;&#x2F; 修改&#x2F;添加信息\n    info :&#x3D; service.Education&#123;\n        Name: &quot;张三&quot;,\n        Gender: &quot;男&quot;,\n        Nation: &quot;汉&quot;,\n        EntityID: &quot;101&quot;,\n        Place: &quot;北京&quot;,\n        BirthDay: &quot;1991年01月01日&quot;,\n        EnrollDate: &quot;2013年9月&quot;,\n        GraduationDate: &quot;2015年7月&quot;,\n        SchoolName: &quot;中国政法大学&quot;,\n        Major: &quot;社会学&quot;,\n        QuaType: &quot;普通&quot;,\n        Length: &quot;两年&quot;,\n        Mode: &quot;普通全日制&quot;,\n        Level: &quot;研究生&quot;,\n        Graduation: &quot;毕业&quot;,\n        CertNo: &quot;333&quot;,\n        Photo: &quot;&#x2F;static&#x2F;phone&#x2F;11.png&quot;,\n    &#125;\n    msg, err &#x3D; serviceSetup.ModifyEdu(info)\n    if err !&#x3D; nil &#123;\n        fmt.Println(err.Error())\n    &#125;else &#123;\n        fmt.Println(&quot;信息操作成功, 交易编号为: &quot; + msg)\n    &#125;\n\n    &#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F;\n\n&#125;\n执行 make 命令运行应用程序\n$ make\n查看修改之后的状态（根据身份证号码）\n状态被修改之后，我们为了确认是否真正修改成功，所以需要调用已经编写好的 FindEduInfoByEntityID(entityID string) 函数实现查询详情的功能。\n编辑 main.go 文件\n$ vim main.go\n在 main.go 文件中添加调用代码如下内容：\n[......]\n\n    &#x2F;&#x2F; 根据身份证号码查询信息\n    result, err &#x3D; serviceSetup.FindEduInfoByEntityID(&quot;101&quot;)\n    if err !&#x3D; nil &#123;\n        fmt.Println(err.Error())\n    &#125; else &#123;\n        var edu service.Education\n        json.Unmarshal(result, &amp;edu)\n        fmt.Println(&quot;根据身份证号码查询信息成功：&quot;)\n        fmt.Println(edu)\n    &#125;\n\n    &#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F;\n\n&#125;\n执行 make 命令运行应用程序\n$ make\n从终端的输出结果中可以看到详情信息已从分类账本中被成功查询，接下来我们使用根据证书编号与姓名查询修改之后的信息，看看是否正确\n查看修改之后的最新状态（根据证书编号与姓名）\n状态被修改之后，我们为了确认是否真正修改成功，所以需要调用已经编写好的 FindEduInfoByEntityID(entityID string) 函数实现查询详情的功能。\n编辑 main.go 文件\n$ vim main.go\n在 main.go 文件中添加调用代码如下内容：\n[......]\n\n    &#x2F;&#x2F; 根据证书编号与名称查询信息\n    result, err &#x3D; serviceSetup.FindEduByCertNoAndName(&quot;333&quot;,&quot;张三&quot;)\n    if err !&#x3D; nil &#123;\n        fmt.Println(err.Error())\n    &#125; else &#123;\n        var edu service.Education\n        json.Unmarshal(result, &amp;edu)\n        fmt.Println(&quot;根据证书编号与姓名查询信息成功：&quot;)\n        fmt.Println(edu)\n    &#125;\n\n    &#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F;\n\n&#125;\n执行 make 命令运行应用程序\n$ make\n执行后如下图所示：\n\n\n7.控制层实现7.1 设置系统用户通过业务层已经实现了利用 fabric-sdk-go 调用链码查询或操作分类账本状态，接下来，我们开始实现Web应用层，应用层将其分为两个部分，\n\n控制层\n视图层\n\n在项目根目录下新创建一个名为 web 的目录，用来存放Web应用层的所有内容\n$ cd $GOPATH&#x2F;src&#x2F;github.com&#x2F;kongyixueyuan.com&#x2F;education\n$ mkdir -p web&#x2F;controller\n在 web 目录下创建 controller 子目录，在该目录下创建 userInfo.go 、 controllerResponse.go 与 controllerHandler.go 三个文件\n$ vim web&#x2F;controller&#x2F;userInfo.go\nuserInfo.go 用来模拟RDB，保存系统用户信息，作为用户登录时核对用户信息，当然，这部分大家可以使用 MySQL 或其它数据库来实现。\nuserInfo.go 完整代码如下：\n&#x2F;**\n  @Author : hanxiaodong\n*&#x2F;\n\npackage controller\n\nimport &quot;github.com&#x2F;kongyixueyuan.com&#x2F;education&#x2F;service&quot;\n\ntype Application struct &#123;\n    Setup *service.ServiceSetup\n&#125;\n\ntype User struct &#123;\n    LoginName    string\n    Password    string\n    IsAdmin    string\n&#125;\n\n\nvar users []User\n\nfunc init() &#123;\n\n    admin :&#x3D; User&#123;LoginName:&quot;Hanxiaodong&quot;, Password:&quot;123456&quot;, IsAdmin:&quot;T&quot;&#125;\n    alice :&#x3D; User&#123;LoginName:&quot;ChainDesk&quot;, Password:&quot;123456&quot;, IsAdmin:&quot;T&quot;&#125;\n    bob :&#x3D; User&#123;LoginName:&quot;alice&quot;, Password:&quot;123456&quot;, IsAdmin:&quot;F&quot;&#125;\n    jack :&#x3D; User&#123;LoginName:&quot;bob&quot;, Password:&quot;123456&quot;, IsAdmin:&quot;F&quot;&#125;\n\n    users &#x3D; append(users, admin)\n    users &#x3D; append(users, alice)\n    users &#x3D; append(users, bob)\n    users &#x3D; append(users, jack)\n\n&#125;\n\nfunc isAdmin(cuser User) bool &#123;\n    if cuser.IsAdmin &#x3D;&#x3D; &quot;T&quot;&#123;\n        return true\n    &#125;\n    return false\n&#125;\n7.2 处理响应创建 controllerResponse.go 文件\n$ vim web&#x2F;controller&#x2F;controllerResponse.go\ncontrollerResponse.go 主要实现对用户请求的响应，将响应结果返回给客户端浏览器。文件完整代码如下：\n&#x2F;**\n  @Author : hanxiaodong\n*&#x2F;\n\npackage controller\n\nimport (\n    &quot;net&#x2F;http&quot;\n    &quot;path&#x2F;filepath&quot;\n    &quot;html&#x2F;template&quot;\n    &quot;fmt&quot;\n)\n\nfunc ShowView(w http.ResponseWriter, r *http.Request, templateName string, data interface&#123;&#125;)  &#123;\n\n    &#x2F;&#x2F; 指定视图所在路径\n    pagePath :&#x3D; filepath.Join(&quot;web&quot;, &quot;tpl&quot;, templateName)\n\n    resultTemplate, err :&#x3D; template.ParseFiles(pagePath)\n    if err !&#x3D; nil &#123;\n        fmt.Printf(&quot;创建模板实例错误: %v&quot;, err)\n        return\n    &#125;\n\n    err &#x3D; resultTemplate.Execute(w, data)\n    if err !&#x3D; nil &#123;\n        fmt.Printf(&quot;在模板中融合数据时发生错误: %v&quot;, err)\n        &#x2F;&#x2F;fmt.Fprintf(w, &quot;显示在客户端浏览器中的错误信息&quot;)\n        return\n    &#125;\n\n&#125;\n7.3 处理请求创建 controllerHandler.go 文件\n$ vim web&#x2F;controller&#x2F;controllerHandler.go\ncontrollerHandler.go 文件主要实现接收用户请求，并根据不同的用户请求调用业务层不同的函数，实现对分类账本的访问。其中需要声明并实现的函数：\n文件完整内容如下：\n&#x2F;**\n  @Author : hanxiaodong\n*&#x2F;\n\npackage controller\n\nimport (\n    &quot;net&#x2F;http&quot;\n    &quot;encoding&#x2F;json&quot;\n    &quot;github.com&#x2F;kongyixueyuan.com&#x2F;education&#x2F;service&quot;\n    &quot;fmt&quot;\n)\n\nvar cuser User\n\nfunc (app *Application) LoginView(w http.ResponseWriter, r *http.Request)  &#123;\n\n    ShowView(w, r, &quot;login.html&quot;, nil)\n&#125;\n\nfunc (app *Application) Index(w http.ResponseWriter, r *http.Request)  &#123;\n    ShowView(w, r, &quot;index.html&quot;, nil)\n&#125;\n\nfunc (app *Application) Help(w http.ResponseWriter, r *http.Request)  &#123;\n    data :&#x3D; &amp;struct &#123;\n        CurrentUser User\n    &#125;&#123;\n        CurrentUser:cuser,\n    &#125;\n    ShowView(w, r, &quot;help.html&quot;, data)\n&#125;\n\n&#x2F;&#x2F; 用户登录\nfunc (app *Application) Login(w http.ResponseWriter, r *http.Request) &#123;\n    loginName :&#x3D; r.FormValue(&quot;loginName&quot;)\n    password :&#x3D; r.FormValue(&quot;password&quot;)\n\n    var flag bool\n    for _, user :&#x3D; range users &#123;\n        if user.LoginName &#x3D;&#x3D; loginName &amp;&amp; user.Password &#x3D;&#x3D; password &#123;\n            cuser &#x3D; user\n            flag &#x3D; true\n            break\n        &#125;\n    &#125;\n\n    data :&#x3D; &amp;struct &#123;\n        CurrentUser User\n        Flag bool\n    &#125;&#123;\n        CurrentUser:cuser,\n        Flag:false,\n    &#125;\n\n    if flag &#123;\n        &#x2F;&#x2F; 登录成功\n        ShowView(w, r, &quot;index.html&quot;, data)\n    &#125;else&#123;\n        &#x2F;&#x2F; 登录失败\n        data.Flag &#x3D; true\n        data.CurrentUser.LoginName &#x3D; loginName\n        ShowView(w, r, &quot;login.html&quot;, data)\n    &#125;\n&#125;\n\n&#x2F;&#x2F; 用户登出\nfunc (app *Application) LoginOut(w http.ResponseWriter, r *http.Request)  &#123;\n    cuser &#x3D; User&#123;&#125;\n    ShowView(w, r, &quot;login.html&quot;, nil)\n&#125;\n\n&#x2F;&#x2F; 显示添加信息页面\nfunc (app *Application) AddEduShow(w http.ResponseWriter, r *http.Request)  &#123;\n    data :&#x3D; &amp;struct &#123;\n        CurrentUser User\n        Msg string\n        Flag bool\n    &#125;&#123;\n        CurrentUser:cuser,\n        Msg:&quot;&quot;,\n        Flag:false,\n    &#125;\n    ShowView(w, r, &quot;addEdu.html&quot;, data)\n&#125;\n\n&#x2F;&#x2F; 添加信息\nfunc (app *Application) AddEdu(w http.ResponseWriter, r *http.Request)  &#123;\n\n    edu :&#x3D; service.Education&#123;\n        Name:r.FormValue(&quot;name&quot;),\n        Gender:r.FormValue(&quot;gender&quot;),\n        Nation:r.FormValue(&quot;nation&quot;),\n        EntityID:r.FormValue(&quot;entityID&quot;),\n        Place:r.FormValue(&quot;place&quot;),\n        BirthDay:r.FormValue(&quot;birthDay&quot;),\n        EnrollDate:r.FormValue(&quot;enrollDate&quot;),\n        GraduationDate:r.FormValue(&quot;graduationDate&quot;),\n        SchoolName:r.FormValue(&quot;schoolName&quot;),\n        Major:r.FormValue(&quot;major&quot;),\n        QuaType:r.FormValue(&quot;quaType&quot;),\n        Length:r.FormValue(&quot;length&quot;),\n        Mode:r.FormValue(&quot;mode&quot;),\n        Level:r.FormValue(&quot;level&quot;),\n        Graduation:r.FormValue(&quot;graduation&quot;),\n        CertNo:r.FormValue(&quot;certNo&quot;),\n        Photo:r.FormValue(&quot;photo&quot;),\n    &#125;\n\n    app.Setup.SaveEdu(edu)\n\n    r.Form.Set(&quot;certNo&quot;, edu.CertNo)\n    r.Form.Set(&quot;name&quot;, edu.Name)\n    app.FindCertByNoAndName(w, r)\n&#125;\n\nfunc (app *Application) QueryPage(w http.ResponseWriter, r *http.Request)  &#123;\n    data :&#x3D; &amp;struct &#123;\n        CurrentUser User\n        Msg string\n        Flag bool\n    &#125;&#123;\n        CurrentUser:cuser,\n        Msg:&quot;&quot;,\n        Flag:false,\n    &#125;\n    ShowView(w, r, &quot;query.html&quot;, data)\n&#125;\n\n&#x2F;&#x2F; 根据证书编号与姓名查询信息\nfunc (app *Application) FindCertByNoAndName(w http.ResponseWriter, r *http.Request)  &#123;\n    certNo :&#x3D; r.FormValue(&quot;certNo&quot;)\n    name :&#x3D; r.FormValue(&quot;name&quot;)\n    result, err :&#x3D; app.Setup.FindEduByCertNoAndName(certNo, name)\n    var edu &#x3D; service.Education&#123;&#125;\n    json.Unmarshal(result, &amp;edu)\n\n    fmt.Println(&quot;根据证书编号与姓名查询信息成功：&quot;)\n    fmt.Println(edu)\n\n    data :&#x3D; &amp;struct &#123;\n        Edu service.Education\n        CurrentUser User\n        Msg string\n        Flag bool\n        History bool\n    &#125;&#123;\n        Edu:edu,\n        CurrentUser:cuser,\n        Msg:&quot;&quot;,\n        Flag:false,\n        History:false,\n    &#125;\n\n    if err !&#x3D; nil &#123;\n        data.Msg &#x3D; err.Error()\n        data.Flag &#x3D; true\n    &#125;\n\n    ShowView(w, r, &quot;queryResult.html&quot;, data)\n&#125;\n\nfunc (app *Application) QueryPage2(w http.ResponseWriter, r *http.Request)  &#123;\n    data :&#x3D; &amp;struct &#123;\n        CurrentUser User\n        Msg string\n        Flag bool\n    &#125;&#123;\n        CurrentUser:cuser,\n        Msg:&quot;&quot;,\n        Flag:false,\n    &#125;\n    ShowView(w, r, &quot;query2.html&quot;, data)\n&#125;\n\n&#x2F;&#x2F; 根据身份证号码查询信息\nfunc (app *Application) FindByID(w http.ResponseWriter, r *http.Request)  &#123;\n    entityID :&#x3D; r.FormValue(&quot;entityID&quot;)\n    result, err :&#x3D; app.Setup.FindEduInfoByEntityID(entityID)\n    var edu &#x3D; service.Education&#123;&#125;\n    json.Unmarshal(result, &amp;edu)\n\n    data :&#x3D; &amp;struct &#123;\n        Edu service.Education\n        CurrentUser User\n        Msg string\n        Flag bool\n        History bool\n    &#125;&#123;\n        Edu:edu,\n        CurrentUser:cuser,\n        Msg:&quot;&quot;,\n        Flag:false,\n        History:true,\n    &#125;\n\n    if err !&#x3D; nil &#123;\n        data.Msg &#x3D; err.Error()\n        data.Flag &#x3D; true\n    &#125;\n\n    ShowView(w, r, &quot;queryResult.html&quot;, data)\n&#125;\n\n&#x2F;&#x2F; 修改&#x2F;添加新信息\nfunc (app *Application) ModifyShow(w http.ResponseWriter, r *http.Request)  &#123;\n    &#x2F;&#x2F; 根据证书编号与姓名查询信息\n    certNo :&#x3D; r.FormValue(&quot;certNo&quot;)\n    name :&#x3D; r.FormValue(&quot;name&quot;)\n    result, err :&#x3D; app.Setup.FindEduByCertNoAndName(certNo, name)\n\n    var edu &#x3D; service.Education&#123;&#125;\n    json.Unmarshal(result, &amp;edu)\n\n    data :&#x3D; &amp;struct &#123;\n        Edu service.Education\n        CurrentUser User\n        Msg string\n        Flag bool\n    &#125;&#123;\n        Edu:edu,\n        CurrentUser:cuser,\n        Flag:true,\n        Msg:&quot;&quot;,\n    &#125;\n\n    if err !&#x3D; nil &#123;\n        data.Msg &#x3D; err.Error()\n        data.Flag &#x3D; true\n    &#125;\n\n    ShowView(w, r, &quot;modify.html&quot;, data)\n&#125;\n\n&#x2F;&#x2F; 修改&#x2F;添加新信息\nfunc (app *Application) Modify(w http.ResponseWriter, r *http.Request) &#123;\n    edu :&#x3D; service.Education&#123;\n        Name:r.FormValue(&quot;name&quot;),\n        Gender:r.FormValue(&quot;gender&quot;),\n        Nation:r.FormValue(&quot;nation&quot;),\n        EntityID:r.FormValue(&quot;entityID&quot;),\n        Place:r.FormValue(&quot;place&quot;),\n        BirthDay:r.FormValue(&quot;birthDay&quot;),\n        EnrollDate:r.FormValue(&quot;enrollDate&quot;),\n        GraduationDate:r.FormValue(&quot;graduationDate&quot;),\n        SchoolName:r.FormValue(&quot;schoolName&quot;),\n        Major:r.FormValue(&quot;major&quot;),\n        QuaType:r.FormValue(&quot;quaType&quot;),\n        Length:r.FormValue(&quot;length&quot;),\n        Mode:r.FormValue(&quot;mode&quot;),\n        Level:r.FormValue(&quot;level&quot;),\n        Graduation:r.FormValue(&quot;graduation&quot;),\n        CertNo:r.FormValue(&quot;certNo&quot;),\n        Photo:r.FormValue(&quot;photo&quot;),\n    &#125;\n\n    app.Setup.ModifyEdu(edu)\n\n    r.Form.Set(&quot;entityID&quot;, edu.EntityID)\n    app.FindByID(w, r)\n&#125;\n\n\n\n\n\n\n\n\n\n提示：用户在做一些管理操作时需要验证其它是否有相应的操作权限，需要另外进行设计。\n7.4 指定路由在 web 目录下创建一个 webServer.go 文件\n$ vim web&#x2F;webServer.go\n该文件主要声明用户请求的路由信息，并且指定 Web 服务的启动信息。文件完整内容如下：\n&#x2F;**\n  @Author : hanxiaodong\n*&#x2F;\n\npackage web\n\nimport (\n    &quot;net&#x2F;http&quot;\n    &quot;fmt&quot;\n    &quot;github.com&#x2F;kongyixueyuan.com&#x2F;education&#x2F;web&#x2F;controller&quot;\n)\n\n\n&#x2F;&#x2F; 启动Web服务并指定路由信息\nfunc WebStart(app controller.Application)  &#123;\n\n    fs:&#x3D; http.FileServer(http.Dir(&quot;web&#x2F;static&quot;))\n    http.Handle(&quot;&#x2F;static&#x2F;&quot;, http.StripPrefix(&quot;&#x2F;static&#x2F;&quot;, fs))\n\n    &#x2F;&#x2F; 指定路由信息(匹配请求)\n    http.HandleFunc(&quot;&#x2F;&quot;, app.LoginView)\n    http.HandleFunc(&quot;&#x2F;login&quot;, app.Login)\n    http.HandleFunc(&quot;&#x2F;loginout&quot;, app.LoginOut)\n\n    http.HandleFunc(&quot;&#x2F;index&quot;, app.Index)\n    http.HandleFunc(&quot;&#x2F;help&quot;, app.Help)\n\n    http.HandleFunc(&quot;&#x2F;addEduInfo&quot;, app.AddEduShow)    &#x2F;&#x2F; 显示添加信息页面\n    http.HandleFunc(&quot;&#x2F;addEdu&quot;, app.AddEdu)    &#x2F;&#x2F; 提交信息请求\n\n    http.HandleFunc(&quot;&#x2F;queryPage&quot;, app.QueryPage)    &#x2F;&#x2F; 转至根据证书编号与姓名查询信息页面\n    http.HandleFunc(&quot;&#x2F;query&quot;, app.FindCertByNoAndName)    &#x2F;&#x2F; 根据证书编号与姓名查询信息\n\n    http.HandleFunc(&quot;&#x2F;queryPage2&quot;, app.QueryPage2)    &#x2F;&#x2F; 转至根据身份证号码查询信息页面\n    http.HandleFunc(&quot;&#x2F;query2&quot;, app.FindByID)    &#x2F;&#x2F; 根据身份证号码查询信息\n\n\n    http.HandleFunc(&quot;&#x2F;modifyPage&quot;, app.ModifyShow)    &#x2F;&#x2F; 修改信息页面\n    http.HandleFunc(&quot;&#x2F;modify&quot;, app.Modify)    &#x2F;&#x2F;  修改信息\n\n    http.HandleFunc(&quot;&#x2F;upload&quot;, app.UploadFile)\n\n    fmt.Println(&quot;启动Web服务, 监听端口号为: 9000&quot;)\n    err :&#x3D; http.ListenAndServe(&quot;:9000&quot;, nil)\n    if err !&#x3D; nil &#123;\n        fmt.Printf(&quot;Web服务启动失败: %v&quot;, err)\n    &#125;\n\n&#125;\n未经授权禁止转载、改编，转载请注明出处！\n本文地址: https://www.chaindesk.cn/witbook/11/224\n\n8.视图层实现8.1 目录结构在项目的web目录下新创建一个名为 static 的目录，用来存放Web应用视图层的所有静态内容\n$ cd $GOPATH&#x2F;src&#x2F;github.com&#x2F;kongyixueyuan.com&#x2F;education\n$ mkdir web&#x2F;static\nweb/static目录下包括四个子目录，分别为：\n\nweb/static/css ：用于存放控制页面布局及显示样式所需的 CSS 文件\nweb/static/js ：用于存放编写的与用户交互的 JavaScript 源代码文件\nweb/static/images：用户存放页面显示所需的所有图片文件\nweb/static/photo：用于存储添加信息时上传的图片文件\n\n$ mkdir -p web&#x2F;static&#x2F;css\n$ mkdir -p web&#x2F;static&#x2F;images\n$ mkdir -p web&#x2F;static&#x2F;js\n$ mkdir -p web&#x2F;static&#x2F;photo\n在项目的web目录下新创建一个名为 tpl 的目录，用来存放Web应用响应客户端的模板页面\n$ mkdir web&#x2F;tpl\n在 web/tpl 目录下主要有如下页面：\n\nlogin.html：用户登录页面\nindex.html：用户登录成功之后进入的首页面\nhelp.html： 显示帮助信息及相关操作的链接页面\nquery.html：根据证书编号与姓名查询的页面\nquery2.html：根据身份证号码查询的页面\nqueryResult.html：根据不同的查询请求显示查询结果的页面\naddEdu.html：添加信息的页面\nmodify.html：修改信息的页面\n\n8.2 相关源码实现相关源代码请参考：\nCSS 部分：\nweb/static/css/addEdu.css\nweb/static/css/bootstrap.min.css\nweb/static/css/help.css\nweb/static/css/index.css\nweb/static/css/login.css\nweb/static/css/query.css\nweb/static/css/queryResult.css\nweb/static/css/reset.css\nJavaScript 部分\nweb/static/js/bootstrap.min.js\nweb/static/js/jquery.min.js\nHTML 页面模板部分：\nweb/tpl/addEdu.html\nweb/tpl/help.html\nweb/tpl/index.html\nweb/tpl/login.html\nweb/tpl/modify.html\nweb/tpl/query.html\nweb/tpl/query2.html\nweb/tpl/queryResult.html\n\n8.3 照片上传在添加信息时需要额外实现一个功能－添加照片\n使用jQuery Ajax功能实现\nHTML代码如下：\n  &lt;div class&#x3D;&quot;headImg&quot;&gt;\n      &lt;div class&#x3D;&quot;uploadImg&quot;&gt;\n          &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;&quot; value&#x3D;&quot;上传照片&quot; id&#x3D;&quot;file&quot;&gt;\n          +\n          &lt;!-- &lt;img src&#x3D;&quot;.&#x2F;images&#x2F;head.jpg&quot; alt&#x3D;&quot;&quot;&gt; --&gt;\n          &lt;img src&#x3D;&quot;&quot; alt&#x3D;&quot;&quot;&gt;\n      &lt;&#x2F;div&gt;\n      &lt;p&gt;请上传照片(120*160px)&lt;&#x2F;p&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;div&gt;\nJavaScript代码如下:\n &#x2F;&#x2F; 上传图片\n$(&#39;#file&#39;).unbind(&#39;change&#39;).bind(&#39;change&#39;,function() &#123;\n    event.stopPropagation();\n    uploadFile(&#39;img&#39;);\n    return;\n&#125;);\n&#x2F;&#x2F; 头像图片\nvar artImg;\nfunction uploadFile(type) &#123;\n    event.stopPropagation();\n    let formData &#x3D; new FormData();\n    if( type &#x3D;&#x3D; &quot;img&quot;)&#123;\n        formData.append(&#39;file&#39;, $(&#39;#file&#39;)[0].files[0]);\n    &#125;\n    $.ajax(&#123;\n        url: &#39;&#x2F;upload&#39;,\n        type: &#39;POST&#39;,\n        cache: false,\n        data: formData,\n        processData: false,\n        dataType: &quot;json&quot;,\n        contentType: false\n    &#125;).done(function (res) &#123;\n        if (res.error &#x3D;&#x3D; &quot;0&quot;) &#123;\n            if( type &#x3D;&#x3D; &quot;img&quot;)&#123;\n                $(&#39;.uploadImg img&#39;).attr(&#39;src&#39;,res.result.path);\n                $(&#39;#photo&#39;).val(res.result.path)\n                return artImg &#x3D; res.result.path;\n            &#125;\n        &#125; else &#123;\n            alert(&quot;上传失败！&quot; + res.result.msg)\n        &#125;\n    &#125;).fail(function (res) &#123; &#125;);\n&#125;\n在 web/controller 目录下创建一个 upload.go 文件\n$ vim web&#x2F;controller&#x2F;upload.go\nupload.go 文件主要利用 Ajax完成 照片传功能的，完整代码如下：\n&#x2F;**\n  @Author : hanxiaodong\n*&#x2F;\n\npackage controller\n\nimport (\n    &quot;fmt&quot;\n    &quot;net&#x2F;http&quot;\n    &quot;io&#x2F;ioutil&quot;\n    &quot;crypto&#x2F;rand&quot;\n    &quot;path&#x2F;filepath&quot;\n    &quot;os&quot;\n    &quot;mime&quot;\n    &quot;log&quot;\n)\n\nfunc (app *Application) UploadFile(w http.ResponseWriter, r *http.Request)  &#123;\n\n    start :&#x3D; &quot;&#123;&quot;\n    content :&#x3D; &quot;&quot;\n    end :&#x3D; &quot;&#125;&quot;\n\n    file, _, err :&#x3D; r.FormFile(&quot;file&quot;)\n    if err !&#x3D; nil &#123;\n        content &#x3D; &quot;\\&quot;error\\&quot;:1,\\&quot;result\\&quot;:&#123;\\&quot;msg\\&quot;:\\&quot;指定了无效的文件\\&quot;,\\&quot;path\\&quot;:\\&quot;\\&quot;&#125;&quot;\n        w.Write([]byte(start + content + end))\n        return\n    &#125;\n    defer file.Close()\n\n    fileBytes, err :&#x3D; ioutil.ReadAll(file)\n    if err !&#x3D; nil &#123;\n        content &#x3D; &quot;\\&quot;error\\&quot;:1,\\&quot;result\\&quot;:&#123;\\&quot;msg\\&quot;:\\&quot;无法读取文件内容\\&quot;,\\&quot;path\\&quot;:\\&quot;\\&quot;&#125;&quot;\n        w.Write([]byte(start + content + end))\n        return\n    &#125;\n\n    filetype :&#x3D; http.DetectContentType(fileBytes)\n    &#x2F;&#x2F;log.Println(&quot;filetype &#x3D; &quot; + filetype)\n    switch filetype &#123;\n    case &quot;image&#x2F;jpeg&quot;, &quot;image&#x2F;jpg&quot;:\n    case &quot;image&#x2F;gif&quot;, &quot;image&#x2F;png&quot;:\n    case &quot;application&#x2F;pdf&quot;:\n        break\n    default:\n        content &#x3D; &quot;\\&quot;error\\&quot;:1,\\&quot;result\\&quot;:&#123;\\&quot;msg\\&quot;:\\&quot;文件类型错误\\&quot;,\\&quot;path\\&quot;:\\&quot;\\&quot;&#125;&quot;\n        w.Write([]byte(start + content + end))\n        return\n    &#125;\n\n    fileName :&#x3D; randToken(12)    &#x2F;&#x2F; 指定文件名\n    fileEndings, err :&#x3D; mime.ExtensionsByType(filetype)    &#x2F;&#x2F; 获取文件扩展名\n    &#x2F;&#x2F;log.Println(&quot;fileEndings &#x3D; &quot; + fileEndings[0])\n    &#x2F;&#x2F; 指定文件存储路径\n    newPath :&#x3D; filepath.Join(&quot;web&quot;, &quot;static&quot;, &quot;photo&quot;, fileName + fileEndings[0])\n    &#x2F;&#x2F;fmt.Printf(&quot;FileType: %s, File: %s\\n&quot;, filetype, newPath)\n\n    newFile, err :&#x3D; os.Create(newPath)\n    if err !&#x3D; nil &#123;\n        log.Println(&quot;创建文件失败：&quot; + err.Error())\n        content &#x3D; &quot;\\&quot;error\\&quot;:1,\\&quot;result\\&quot;:&#123;\\&quot;msg\\&quot;:\\&quot;创建文件失败\\&quot;,\\&quot;path\\&quot;:\\&quot;\\&quot;&#125;&quot;\n        w.Write([]byte(start + content + end))\n        return\n    &#125;\n    defer newFile.Close()\n\n    if _, err :&#x3D; newFile.Write(fileBytes); err !&#x3D; nil || newFile.Close() !&#x3D; nil &#123;\n        log.Println(&quot;写入文件失败：&quot; + err.Error())\n        content &#x3D; &quot;\\&quot;error\\&quot;:1,\\&quot;result\\&quot;:&#123;\\&quot;msg\\&quot;:\\&quot;保存文件内容失败\\&quot;,\\&quot;path\\&quot;:\\&quot;\\&quot;&#125;&quot;\n        w.Write([]byte(start + content + end))\n        return\n    &#125;\n\n    path :&#x3D; &quot;&#x2F;static&#x2F;photo&#x2F;&quot; + fileName + fileEndings[0]\n    content &#x3D; &quot;\\&quot;error\\&quot;:0,\\&quot;result\\&quot;:&#123;\\&quot;fileType\\&quot;:\\&quot;image&#x2F;png\\&quot;,\\&quot;path\\&quot;:\\&quot;&quot; + path + &quot;\\&quot;,\\&quot;fileName\\&quot;:\\&quot;ce73ac68d0d93de80d925b5a.png\\&quot;&#125;&quot;\n    w.Write([]byte(start + content + end))\n    return\n&#125;\n\nfunc randToken(len int) string &#123;\n    b :&#x3D; make([]byte, len)\n    rand.Read(b)\n    return fmt.Sprintf(&quot;%x&quot;, b)\n&#125;\n9.项目交互演示9.1 启动Web服务最后编辑 main.go ，以便启动Web界面实现Web应用程序\n$ vim main.go\n添加如下内容:\nimport(\n    [......]\n    &quot;github.com&#x2F;kongyixueyuan.com&#x2F;education&#x2F;web&#x2F;controller&quot;\n    &quot;github.com&#x2F;kongyixueyuan.com&#x2F;education&#x2F;web&quot;\n)\n\nfunc main()&#123;&#125;\n    [......]\n\n    app :&#x3D; controller.Application&#123;\n        Setup: &amp;serviceSetup,\n    &#125;\n    web.WebStart(app)\n&#125;\n应用项目开发完成后，可以直接启动用来查看效果。在命令提示符中输入 make 命令：\n$ make\n\n9.2 访问页面项目启动成功之后，打开浏览器访问: http://localhost:9000/\n根据访问的URL地址系统自动响应登录页面\n\n输入管理员账号及密码登录验证成功，则进入系统首页面在首页面中点击 查询范围链接，进入 help页面，\n点击添加学历信息链接进入，添加学历信息页面根据学历证书编号与姓名查询页面\n9.3 education运行将GOPATH设置为/root/go,拉取项目：\ncd $GOPATH&#x2F;src &amp;&amp; git clone https:&#x2F;&#x2F;github.com&#x2F;sxguan&#x2F;education.git\n在/etc/hosts中添加：\n127.0.0.1  orderer.example.com\n127.0.0.1  peer0.org1.example.com\n127.0.0.1  peer1.org1.example.com\n添加依赖：\ncd education &amp;&amp; go mod tidy\n运行项目：\n.&#x2F;clean_docker.sh\n在127.0.0.1:9000进行访问\n\n\n\n\n10.课程知识总结10.1课程实验总结10.1.1课程实验汇总[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-q2eOlQQE-1671167271446)(C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216105743562.png)]\n算上这次的期末，一共十二次作业。\n[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-RefaYAB7-1671167271448)(C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216105945417.png)]\n在我的博客中，前四次是GO语言相关，后8次是区块链相关。\n二者链接如下 ：\n搜索结果 | 电子羊的秘密花园 (algernon98.github.io)\n搜索结果 | 电子羊的秘密花园 (algernon98.github.io)\n10.1.1.1 实验一：go语言环境搭建及基础语法（w3cschool）10.1.1.2 go语言基础及进阶[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-M3GvLOHE-1671167271449)(C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216111427905.png)]\n10.1.1.3 http编程、go操作MYSQL以及Gin框架[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-bECfBDdS-1671167271449)(C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216111636503.png)]\n10.1.1.4 docker（技术胖）[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-q2S4Twey-1671167271449)(C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216111939520.png)]\n10.1.1.5 启动fabric网络[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-EbKrGmcM-1671167271449)(C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216112111521.png)]\n10.1.1.6 hyperledger-fabric网络搭建[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-2b9vabhZ-1671167271450)(C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216112252582.png)]\n10.1.1.7 两个视频实战（简单资产链码）[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-MseHaoe4-1671167271450)(C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216112412058.png)]\n10.1.1.8 链码与网络启动[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-l5JtELjj-1671167271450)(C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216112538446.png)]\n10.1.1.9 三个示例（资产转移、链下数据存储）[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-k4uGA4Fu-1671167271451)(C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216112701824.png)]\n10.1.1.10 链码分析[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-cKXYBAii-1671167271451)(C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216112918537.png)]\n10.1.1.11 两个综合实验[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-rsAoFHBj-1671167271451)(C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216113035057.png)]\n10.1.2实验总结因为实验内容多而广，内容又有所重叠，所以在此给一个较为全面的总结：\n从w3cschool和技术胖学习go语言基础，再到初试docker和gin框架，最后利用hyperledger fabric构建区块链网络，虽然其中遇到了不少困难，但最终还是解决了。我在区块链三————也就是下图的实验中遇到的问题最多，这也是刚接触区块链的整体框架，生成创世区块、连接通道的部分，有几个问题困住了我整整三天，以至于那几天晚上都熬夜坐在电脑前debug。\n[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-EqWtmOhb-1671167271452)(C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216110825508.png)]\n但是付出也会获得回报，每当我把作业传上我的网站时，总会获得一种成就感————每周都能够获得新的知识，学习充实而忙碌。\n正如每一个实验结语中我说的那样，“这周实验做的很多，也学到了很多内容”。\n10.2课程原理总结10.2.1环境配置10.2.2go语言基础10.2.2.1go语言基础语法【Go语言编程】（一） | 电子羊的秘密花园 (algernon98.github.io)\n\n【GO语言编程】（二） | 电子羊的秘密花园 (algernon98.github.io)\n10.2.2.2channel通道【GO语言编程】（三） | 电子羊的秘密花园 (algernon98.github.io)\n[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-RlbSsOnx-1671167271452)(C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216095647251.png)]\n10.2.2.3gin框架【GO语言编程】（四） | 电子羊的秘密花园 (algernon98.github.io)\n10.2.3区块链知识10.2.3.1docker容器构建【区块链技术与应用】（一） | 电子羊的秘密花园 (algernon98.github.io)\ndockerfile\nDockerfile是一个包含用于组合映像的命令的文本文档。可以使用在命令行中调用任何命令。 Docker通过读取Dockerfile中的指令自动生成映像。\n\ndocker-compose\n我们可以把很多相关的命令写成一个xxx.sh文件，而且这些步骤也是相对固定的。\n这样直接运行sh文件，就可以逐一执行很多相关的Docker命令。这种形式可以减少出错和解决复用问题。Docker很贴心的为我们准备了一个专门的工具docker-compose，实现类似sh文件的功能。让我们更加轻松的实现多Docker命令的操作。\n你也可以把docker-compose就是把很多Docker命令写入一个专属的文件docker-compose.yml，然后执行这个文件，就可以直接启动我们想要的容器。docker-compose也为我们提供了对应的操作命令。\ndocker-compose up\n\n10.2.3.2fabric网络【区块链技术与应用】（二） | 电子羊的秘密花园 (algernon98.github.io)\n本地编译组件：\n\n获取代码\n编译安装peer组件\n编译安装Orderer组件\n编译安装Fabric CA组件\n编译安装辅助配置工具\n\n本地方式启动Fabric网络：\n\n生成组织关系和身份证书\n生成系统通道初始区块\n生成新建应用通道配置交易\n生成锚节点配置更新文件\n启动Orderer节点\n启动Peer节点\n创建通道\n加入通道\n更新锚节点配置\n\n10.2.3.3链码【区块链技术与应用】（四） | 电子羊的秘密花园 (algernon98.github.io)\n以fabric-go-sdk为例\ncd .. &amp;&amp; go build &amp;&amp; .&#x2F;fabric-go-sdk\n&gt;&gt; 开始创建通道......\n&gt;&gt;&gt;&gt; 使用每个org的管理员身份更新锚节点配置...\n&gt;&gt;&gt;&gt; 使用每个org的管理员身份更新锚节点配置完成\n&gt;&gt; 创建通道成功\n&gt;&gt; 加入通道......\n&gt;&gt; 加入通道成功\n&gt;&gt; 开始打包链码......\n&gt;&gt; 打包链码成功\n&gt;&gt; 开始安装链码......\n&gt;&gt; 安装链码成功\n&gt;&gt; 组织认可智能合约定义......\n&gt;&gt;&gt; chaincode approved by Org1 peers:\n\tpeer0.org1.example.com:7051\n\tpeer1.org1.example.com:9051\n&gt;&gt; 组织认可智能合约定义完成\n&gt;&gt; 检查智能合约是否就绪......\nLifecycleCheckCCCommitReadiness cc &#x3D; simplecc, &#x3D; &#123;map[Org1MSP:true]&#125;\nLifecycleCheckCCCommitReadiness cc &#x3D; simplecc, &#x3D; &#123;map[Org1MSP:true]&#125;\n&gt;&gt; 智能合约已经就绪\n&gt;&gt; 提交智能合约定义......\n&gt;&gt; 智能合约定义提交完成\n&gt;&gt; 调用智能合约初始化方法......\n&gt;&gt; 完成智能合约初始化\n&gt;&gt; 通过链码外部服务设置链码状态......\n&gt;&gt; 设置链码状态完成\n&lt;--- 添加信息　---&gt;： 18c0c86ce029d7de04461484976c5151992864b52ca28905d0ccf911443fdfcb\n&lt;--- 查询信息　---&gt;： 123\n\n---------------------------------\n作者: Algernon\n本文来自于: https:&#x2F;&#x2F;algernon98.github.io&#x2F;\n博客内容遵循 署名-非商业性使用-相同方式共享 4.0 国际 (CC BY-NC-SA 4.0) 协议\n\n\n声明合约\n编写合约函数\n创建并启动链码\ntest-network网络测试\n启动fabric网络\n创建channel\n部署chaincode\n\n\n\n创建通道成功结果：\n\n部署chaincode成功结果：\n\n10.2.3.4实现智能合约资产转移事件示例演示：\n从智能合约交易函数发出链码事件。在客户端应用程序中接收链码事件。在客户端应用程序中重放以前的链码事件。\n智能合约链码分析：\n【区块链技术与应用】（七） | 电子羊的秘密花园 (algernon98.github.io)\n查询账本资产列表\n\n修改账本资产\n\n列出一个peer节点已经加入的通道清单：\npeer channel list\n\n获取通道testchannel的信息：\n10.2.4web操作10.2.4.1html学习征信系统需要用到html文件建立网页模板\n\n\n10.2.4.2postman测试网络：\n\n\n11.结束语在每一次实验的结尾，我都会附上结语。“引言——内容——结语”的模式，后来我每次实验报告都会使用。如果说“引言”是讲本次实验做了什么，重点在于实验与技术；那“结语”往往是自己想说的话。如果实验特别难，结语往往会感慨终于做完了，如果这周实验简单，或者运行顺利，言语之中自然附带一种灵动的轻快。\n这个期末作业我忙了三个整天。\n第一天，把所有的内容重新配置，从go语言安装开始，找一个完整且正确的教程，配置完所有环境，然后启动网络，调用链码，这次一步到位，一气呵成的感觉，即使对之前十一次作业的一个总结，也加深了对区块链结构体系的理解。\n第二天，开始期末作业的实战。业务层、控制层、视图层————有自己没有接触过的内容，就上网现学；见过但忘了的，便打开作业或者资料查阅。然而第二天出的bug又让进度陷于停滞。\n重新配置、重新下载、重新搭建……网上的bug不尽相同，成功的程序千篇一律，失败的代码却各有各的报错。\n最终，我找到的问题所在，修改路径，修改profile，修改hosts，修改的次数太多以至于我可以很快从/etc中找到文件。\n终于，跑通了整套程序。\n\n这门课学的内容太多，设计的知识面太广，以至于我恍惚之间以为自己做了一个毕设————当然，很多代码是站在前人的肩膀上完成的。\nhtml，css,go…其实能够深挖的知识还有很多，我欣幸于最终得以如愿完成这份期末作业，也明白之后可以学的内容同样广博。\n如果说印象最深刻的一点，就是在我打算删掉所有之前的内容，重新配置之后，感觉每周不同知识杂乱的体系逐渐在脑海中清晰，和系统上重新建立的简洁而明确的路径一样，区块链体系的结构、作用，函数、链码、框架、makefile文件之间的关系也理顺了。\n昔年曾见此湖图，不信人间有此湖。今日打从湖上过，画工还欠费功夫。\n这门课是我这学期学的最硬核的一门课，应该说幸运的是概率论期末考试延期，给了我充足而平静的时间整理区块链这学期学习的知识体系。我没有选择使用wsl+vmware+ubuntu的形式，原因其一是我的双系统中ubuntu主要承担深度学习的功能，用以区块链开发是因为Linux对docker虚拟的支持较好；其二则是我倾向于图形化界面，对于一个学习中的开发者而言，图形化界面能够直观看到文件形式，同样，也有更多功能，这也是我从虚拟机逐渐过渡到双系统的原因。\n\n自定义终端也挺好看。\n[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-BfIvbWHR-1671167271453)(C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216123117476.png)]\n“区块链”内容为博文贡献十万字还是有的，总而言之，过程很艰苦，结果很美好。\n希望日后“湖上过”的时候，也能感叹一句：“画图还欠费工夫”吧！\n","slug":"区块链期末","date":"2022-12-16T05:50:49.000Z","categories_index":"信管","tags_index":"区块链","author_index":"Algernon"},{"id":"6836c19fc065dca88d3b1abe7f721a20","title":"【区块链技术与应用】（九）","content":"Hyperledger Fabric 2.4 开发环境配置与测试前言超级账本的Fabric具有高可扩展性和高可定制性，能够应用在复杂的商业场景中，但Fabric技术涉及很多新的概念，源代码跟新速度快且各版本间兼容性差，对初学者很不友好。为了使能够快速掌握Fabric，本文基于其目前最新的2.4.6版本搭建了Hyperledger Fabric运行环境，并在此之上部署了官方示例chaincode并对其进行交互调试，最终整个环境及示例代码能够正常运行且得出预期结果。\n软件需求说明网上几乎所有的Fabric教程都是基于Ubuntu环境而不是Windows，其原因主要是Fabric的运行需要的Docker环境在Windows下表现不佳，此外Fabric许多官方文档也是基于Ubuntu纂写，在windows下运行可能会遇到难以预估的bug。原本为了方便后期部署至公网服务器想在CentOS上搭建环境，但由于CentOS8停止维护，且CentOS Stream使用体验颇差，于是最终选择了Ubuntu系统。本环境各系统、软件版本如下：\n\n\n\n\n系统、软件\n版本\n\n\n\n\nVMware Pro\n16.0.0\n\n\nUbuntu 18.04 Server LTS\nubuntu-18.04.6-live-server-amd64.iso\n\n\ngit\n2.30.2\n\n\ncurl\n7.74.0\n\n\ndocker\n20.10\n\n\ngolang\ngo1.18.6\n\n\njq\njq-1.6\n\n\nfabric\n2.4.6\n\n\nfabric-ca\n1.5.5\n\n\nfabric-samples\nv2.3.0\n\n\n\n\n本环境各Docker镜像版本如下：\n\n\n\n\n镜像\n版本\n\n\n\n\nhyperledger/fabric-tools\n2.4.6\n\n\nhyperledger/fabric-peer\n2.4.6\n\n\nhyperledger/fabric-orderer\n2.4.6\n\n\nhyperledger/fabric-ccenv\n2.4.6\n\n\nhyperledger/fabric-baseos\n2.4.6\n\n\nhyperledger/fabric-ca\n1.5.5\n\n\n\n\n安装 Ubuntu ServerUbuntu Server 18.04.06 lts 下载阿里镜像下载网址：\nhttps:&#x2F;&#x2F;developer.aliyun.com&#x2F;mirror&#x2F;\nhttps:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu-releases&#x2F;18.04&#x2F;\nUbuntu 18.04 LTS 更换国内源装了ubuntu18.04 LTS，下载软件有点慢，可以把/etc/apt/sources.list文件里的源更换一下。\nUbuntu阿里镜像源文件（/etc/apt/sources.list）\n\n\n\n\n\n\n\n\n\nhttps://developer.aliyun.com/mirror/ubuntu?spm=a2c6h.13651102.0.0.18b11b11F2f91v\n备份源列表Ubuntu配置的默认源并不是国内的服务器，下载更新软件都比较慢。首先备份源列表文件sources.list：\n# 首先备份源列表\nsudo cp &#x2F;etc&#x2F;apt&#x2F;sources.list &#x2F;etc&#x2F;apt&#x2F;sources.list_backup\n打开sources.list文件修改选择合适的源（阿里、清华、中科大），替换原文件的内容，保存编辑好的文件。\n# 打开sources.list文件\nsudo vim &#x2F;etc&#x2F;apt&#x2F;sources.list\n编辑/etc/apt/sources.list文件, 在文件最前面添加阿里云镜像源：\n#  阿里源\ndeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse\ndeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse\n\ndeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse\ndeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse\n\ndeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse\ndeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse\n\n# deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse\n# deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse\n\ndeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse\ndeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse\n刷新列表sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install build-essential\n创建Ubuntu Server用户# 添加用户(可选)\nsudo adduser xxxx\n# 为新用户设置密码\nsudo passwd xxxx\n# 为新用户添加sudo权限\nsudo echo &#39;xxxx ALL&#x3D;(ALL) ALL&#39; &gt;&gt; &#x2F;etc&#x2F;sudoers\n安装 GolangGolang下载解压\n\n\n\n\n\n\n\n\nGo 语言支持以下系统：\n\nLinux\nFreeBSD\nMac OS X（也称为 Darwin）\nWindows\n\n安装包下载地址为：https://golang.org/dl/。\n如果打不开可以使用这个地址：https://golang.google.cn/dl/。\n$ wget https:&#x2F;&#x2F;golang.google.cn&#x2F;dl&#x2F;go1.18.6.linux-amd64.tar.gz\n$ sudo tar -zxvf go1.18.6.linux-amd64.tar.gz -C &#x2F;usr&#x2F;local&#x2F;\n全局环境配置$ sudo vim &#x2F;etc&#x2F;profile\n# GOROOT\nexport GOROOT&#x3D;&#x2F;usr&#x2F;local&#x2F;go\n# GOROOT bin\nexport PATH&#x3D;$PATH:$GOROOT&#x2F;bin\n# GOPATH\nexport GOPATH&#x3D;$HOME&#x2F;go\n# GOPATH bin\nexport PATH&#x3D;$PATH:$GOPATH&#x2F;bin\n&#x2F;&#x2F;或如下：\nexport PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;go&#x2F;bin\nexport GOROOT&#x3D;&#x2F;usr&#x2F;local&#x2F;go\nexport GOPATH&#x3D;$HOME&#x2F;go\nexport PATH&#x3D;$PATH:$GOPATH&#x2F;bin\n\n更新环境变量\n\n$ source &#x2F;etc&#x2F;profile\n\n查看Go环境\n\n$ go env\nGO111MODULE设置Go version &gt;= 1.13，直接用go env -w 设置（注意大小写）\ngo env -w GOPROXY&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;goproxy&#x2F;,direct\ngo env -w GO111MODULE&#x3D;on\n\n\n\n\n\n\n\n\n\n注：可以用go env -u 恢复初始设置；\nGOPROXY值还可以是https://goproxy.cn\ngo env -w GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy&#x2F;cn,direct\ngo mod 命令go module 使用前置条件: GO111MODULE 设置为 on\n\n在当前文件夹下初始化一个新的 module，创建 go.mod 文件； go mod init name\n拉取缺少的模块，移除不用的模块 ： go mod tidy\n将依赖复制到 vendor 下 : go mod vendor\n下载依赖 : go mod download\n检验依赖: go mod verify\n显示模块依赖图: go mod graph\n解释为什么需要依赖: go mod why\n编辑 go.mod 文件: go eidt\n查看命令列表: go mod\n查看命令帮助文档: go help mod &lt;command&gt;\n\n安装 docker官方手动安装（不推荐）Fabric 目前采用 Docker 容器作为链码执行环境，因此即使在本地运行，Peer 节点上也需要安装 Docker 环境，推荐使用 1.18 或者更新的版本。\n\n服务器上如果已经安装 docker，部署无需安装\n具体安装细节参见 官方文档\nhttps://docs.docker.com/engine/install/ubuntu/\n\n由于网络原因，安装速度可能无法忍受\n阿里手动安装Docker（推荐）1.如果Ubuntu系统中有旧版本的Docker，需要卸载后重新安装。可以使用以下命令进行卸载：\nsudo apt-get remove docker docker-engine docker.io containerd runc\n2.然后执行以下命令安装Docker：\n# 安装必要的一些系统工具\n$ sudo apt-get update\n$ sudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    gnupg-agent \\\n    software-properties-common\n\n#安装GPG证书：\n$ curl -fsSL http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo apt-key add -\n$ sudo apt-key fingerprint 0EBFCD88\n\n#写入软件源信息\n$ sudo add-apt-repository &quot;deb [arch&#x3D;amd64] http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu $(lsb_release -cs) stable&quot;\n\n#更新并安装Docker-CE\n$ sudo apt-get -y update\n$ sudo apt-get -y install docker-ce\n3.将当前用户添加到Docker用户组：\n#创建docker用户组\n$ sudo groupadd docker\n\n#将当前用户添加到docker用户组\n$sudo usermod -aG docker $USER\n\n$ sudo usermod -aG root $USER\n$ sudo usermod -aG sudo $USER\n\n#退出当前终端\n$ exit\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker\n\n#执行以下命令如果输出docker版本信息如：Docker version 19.03.08则说明安装成功\n&amp; docker version\n\n\n\n\n\n\n\n\n\n可以用阿里镜像一键安装Docker（推荐）curl -fsSL https:&#x2F;&#x2F;get.docker.com | sudo bash -s docker --mirror Aliyun\n安装Docker-Compose下载docker-compose的二进制包：\n#如果用户不是root,建议切换到root\n$ su -\n\n$ curl -SL https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;v2.11.2&#x2F;docker-compose-linux-x86_64 -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose\n\n$ chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose\n\n#检测docker-compose是否安装成功：\n$ exit\n$ docker-compose version\n如果以上步骤可以顺利完成的话，接下来就可以进入docker镜像加速.\nDocker 阿里云镜像加速1.进入阿里云镜像加速页面\nhttps://cr.console.aliyun.com/#/accelerator\n\n\n\n\n\n\n\n\n\n需要注册才能获得个人加速地址，如后面/etc/docker/daemon.json配置： “https://xxxx.mirror.aliyuncs.com&quot;，xxxx是对应个人账户。\n2.修改/etc/docker/daemon.json文件配置，没有则新建；\n您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器\n$ sudo mkdir -p &#x2F;etc&#x2F;docker\n\n$ sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;\n&#123;\n  &quot;registry-mirrors&quot;: [\n  &quot;https:&#x2F;&#x2F;xxxx.mirror.aliyuncs.com&quot;,\n  &quot;http:&#x2F;&#x2F;f1361db2.m.daocloud.io&quot;,\n  &quot;https:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&quot;\n   ]\n&#125;\nEOF\n\n#然后执行\nsudo systemctl daemon-reload\nsudo systemctl enable docker.service\nsudo systemctl restart docker.service\nsudo systemctl status docker.service\n\n\n\n\n\n\n\n\n\nDocker Hub 镜像加速器列表\n\n\n\n\n镜像加速器\n镜像加速器地址\n专属加速器？\n其它加速？\n\n\n\n\nDocker 中国官方镜像\nhttps://registry.docker-cn.com\n\nDocker Hub\n\n\nDaoCloud 镜像站\nhttp://f1361db2.m.daocloud.io\n可登录，系统分配\nDocker Hub\n\n\nAzure 中国镜像\nhttps://dockerhub.azk8s.cn\n\nDocker Hub、GCR、Quay\n\n\n科大镜像站\nhttps://docker.mirrors.ustc.edu.cn\n\nDocker Hub、GCR、Quay\n\n\n阿里云\nhttps://&lt;your_code&gt;.mirror.aliyuncs.com\n需登录，系统分配\nDocker Hub\n\n\n七牛云\nhttps://reg-mirror.qiniu.com\n\nDocker Hub、GCR、Quay\n\n\n网易云\nhttps://hub-mirror.c.163.com\n\nDocker Hub\n\n\n腾讯云\nhttps://mirror.ccs.tencentyun.com\n\nDocker Hub\n\n\n\n\nDocker prune 删除相关命令\nprune 命令用来删除不再使用的 docker 对象。\n删除所有未被 tag 标记和未被容器使用的镜像:\n$ docker image prune\n删除所有未被容器使用的镜像:\n$ docker image prune -a\n删除所有停止运行的容器:\n$ docker container prune\n删除所有未被挂载的卷:\n$ docker volume prune\n删除所有网络:\n$ docker network prune\n删除 docker 所有资源:\n$ docker system prune\nDocker-Docker镜像存储位置不同系统Docker容器与镜像默认存放位置\nLinux 存放位置如下\n#容器与镜像存放在此目录下:\ncd &#x2F;var&#x2F;lib&#x2F;docker \n#镜像位置: \n&#x2F;var&#x2F;lib&#x2F;docker&#x2F;image\n#容器位置: \n&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers\n[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-AjKX1RlK-1669947206343)(C:\\Users\\acrow\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221012124157762.png)]\n安装Nodejs安装NVMnvm是一个nodejs的版本管理工具，可以简单操作node版本的切换、安装、查看。。。等等，与npm不同的是，npm是依赖包的管理工具。由于无法下载原因，导致GitHub的raw.githubusercontent.com域名解析被污染了。\ncurl -o- https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;nvm-sh&#x2F;nvm&#x2F;v0.37.0&#x2F;install.sh | bash\nwget -qO- https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;nvm-sh&#x2F;nvm&#x2F;v0.37.0&#x2F;install.sh | bash\n以上官方安装模式可能无法完成，这样通过如下方式安装：\n$ git clone https:&#x2F;&#x2F;github.com&#x2F;nvm-sh&#x2F;nvm.git\n$ cd nvm\n$ .&#x2F;install.sh\n主要环境变量.bashrc的修改和启动\n$ source .bashrc\n检验安装\n$ nvm -v\n$ nvm help\n\n\n\n\n\n\n\n\n\nNVM常用相关命令，可以用nvm help查看相关命令\nnvm lsnvm ls-remotenvm install —ltsnvm uninstall —ltsnvm use —ltsnvm exec —ltsnvm run —ltsnvm version-remote —lts \nnvm ls ：列出所有已安装的 node 版本nvm list ：列出所有已安装的 node 版本nvm list available ：显示所有可下载的版本nvm install latest：安装最新版 nodenvm install [node版本号] ：安装指定版本 nodenvm uninstall [node版本号] ：删除已安装的指定版本nvm use [node版本号] ：切换到指定版本 nodenvm current ：当前 node 版本nvm unalias [别名] ：删除已定义的别名\n安装Nodejs LTS稳定版下载太慢问题解决 以及下载稳定版本方法\n更换下载源（默认是从 http://nodejs.org/dist/ 下载的, 国外服务器, 必然很慢)），建议如下安装方式：\n$ NVM_NODEJS_ORG_MIRROR&#x3D;https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node\n$ nvm install --lts #安装最新稳定版 node\n$ nvm use --lts \n\n\n\n\n\n\n\n\n\n安装lts版本nodejs\nnvm ls\nnvm ls-remote\nnvm install --lts \nnvm use --lts \nNodejs 加速外网在国内访问太慢了，所以一般大家都把镜像改成taobao镜像会加快安装速度。。。\n1.查看原始配置 npm config ls\n会发现里面的registry是npm原始的镜像：https://registry.npmjs.org/\n2.npm临时使用淘宝镜像安装依赖包\nnpm i -g express --registry https:&#x2F;&#x2F;registry.npm.taobao.org\n3.npm持久使用淘宝镜像安装依赖包\nnpm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org\nnpm config get registry\n注意，不推荐这样子，因为把npm的镜像完全设为了淘宝的镜像，万一我们有些依赖包只有npm原始镜像里面才有，而淘宝里面没有，那就悲剧了。所以分开npm和cnpm是最好的。\n查看npm \nnpm config ls\nnpm config ls -l\n\n\n\n\n\n\n\n\n\n可以临时一键安装nodejs lts（不推荐）\nNVM_NODEJS_ORG_MIRROR&#x3D;https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node nvm install --lts\n安装Fabric官方脚本安装（不推荐）为了帮助开发者快速搭建Fabric环境，官方创建了一个Fabric环境搭建的批处理工具bootstrap.sh，可以通过该工具直接安装环境：\n$ wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;hyperledger&#x2F;fabric&#x2F;master&#x2F;scripts&#x2F;bootstrap.sh\n$ chmod +x bootstrap.sh\n$ .&#x2F;bootstrap.sh\n不出意外的话会看见脚本顺利安装，但是可能痛苦不堪，同时对于初学者来说，一键安装的便捷的同时，也会导致无法理解Hyperledger Fabric网络启动原理和运行机制，因此强烈建议采用源码编译方式安装。\nFabric 源码编译（强烈推荐）获取代码目前，Fabric 官方仓库托管在 Github 仓库（github.com/hyperledger/fabric）中供下载使用。\n如果使用 1.13 之前版本的 Go 环境，需要将 Fabric 项目放到 $GOPATH 路径下。如下命令所示，创建 $GOPATH/src/github.com/hyperledger 目录结构并切换到该路径：\n$ mkdir -p $GOPATH&#x2F;src&#x2F;github.com&#x2F;hyperledger\n$ cd $GOPATH&#x2F;src&#x2F;github.com&#x2F;hyperledger\n获取 Peer 和 Orderer 组件编译所需要的代码，两者目前在同一个 fabric 仓库中：\n$ git clone https:&#x2F;&#x2F;github.com&#x2F;hyperledger&#x2F;fabric.git\n$ cd fabric\n$ git checkout -b v2.4.6\n$ git branch\n\n也可以指定 --single-branch -b master --depth 1 命令选项来指定只获取 master 分支最新代码：\n$ git clone --single-branch -b master --depth 1 https:&#x2F;&#x2F;github.com&#x2F;hyperledger&#x2F;fabric.git\nFabric CA 组件在独立的 fabric-ca 仓库中，可以通过如下命令获取：\n$ cd $GOPATH&#x2F;src&#x2F;github.com&#x2F;hyperledger\n$ git clone https:&#x2F;&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-ca.git\n$ cd fabric-ca\n$ git checkout -b v1.5.5\n$ git branch\n\n最后，检查确认 fabric 和 fabric-ca 两个仓库下载成功：\n$ ls $GOPATH&#x2F;src&#x2F;github.com&#x2F;hyperledger\nfabric fabric-ca\n\n编译安装 Peer 组件配置版本号和编译参数：\n$ PROJECT_VERSION&#x3D;2.4.6\n$ LD_FLAGS&#x3D;&quot;-X github.com&#x2F;hyperledger&#x2F;fabric&#x2F;common&#x2F;metadata.Version&#x3D;$&#123;PROJECT_VERSION&#125; \\\n            -X github.com&#x2F;hyperledger&#x2F;fabric&#x2F;common&#x2F;metadata.BaseDockerLabel&#x3D;org.hyperledger.fabric \\\n            -X github.com&#x2F;hyperledger&#x2F;fabric&#x2F;common&#x2F;metadata.DockerNamespace&#x3D;hyperledger \\\n            -X github.com&#x2F;hyperledger&#x2F;fabric&#x2F;common&#x2F;metadata.BaseDockerNamespace&#x3D;hyperledger&quot;\n通过如下命令编译并安装 fabric 的 peer 组件到 $GOPATH/bin 下：\n$ CGO_CFLAGS&#x3D;&quot; &quot; go install -tags &quot;&quot; -ldflags &quot;$LD_FLAGS&quot; \\\ngithub.com&#x2F;hyperledger&#x2F;fabric&#x2F;cmd&#x2F;peer\n当然，用户也可直接使用源码中的 Makefile 来进行编译，相关命令如下：\n$ make peer\n这种情况下编译生成的 peer 组件会默认放在 build/bin 路径下。\n编译安装 Orderer 组件通过如下命令编译并安装 fabric orderer 组件到 $GOPATH/bin 下：\n$ CGO_CFLAGS&#x3D;&quot; &quot; go install -tags &quot;&quot; -ldflags &quot;$LD_FLAGS&quot; \\\ngithub.com&#x2F;hyperledger&#x2F;fabric&#x2F;cmd&#x2F;orderer\n同样的，也可使用 Makefile 来编译安装 orderer 组件到 build/bin 路径下：\n$ make orderer\n\n编译安装 Fabric CA 组件采用如下命令编译并安装 fabric-ca 相关组件到 $GOPATH/bin 下：\n$PROJECT_VERSION&#x3D;1.5.5\n$go install -ldflags &quot;-X github.com&#x2F;hyperledger&#x2F;fabric-ca&#x2F;lib&#x2F;metadata.Version&#x3D;$PROJECT_VERSION&quot; \\\ngithub.com&#x2F;hyperledger&#x2F;fabric-ca&#x2F;cmd&#x2F;...\n\n或\n$ go install github.com&#x2F;hyperledger&#x2F;fabric-ca&#x2F;cmd&#x2F;...\n\n或链接静态库\n$go install -ldflags &quot;-X github.com&#x2F;hyperledger&#x2F;fabric-ca&#x2F;lib&#x2F;metadata.Version&#x3D;$PROJECT_VERSION\\\n-linkmode external -extldflags &#39;-static -lpthread&#39;&quot; \\\ngithub.com&#x2F;hyperledger&#x2F;fabric-ca&#x2F;cmd&#x2F;...\n\n编译安装配置辅助工具Fabric 中还提供了一系列配置辅助工具，包括：\n\ncryptogen（本地生成组织结构和身份文件）\nconfigtxgen（生成配置区块和配置交易）\nconfigtxlator（解析转换配置信息）\ndiscover（拓扑探测）\nidemixgen（Idemix 证书生成）等\n\n可以通过如下命令来快速编译和安装：\n# 编译安装 cryptogen，等价于执行 make cryptogen\n$ CGO_CFLAGS&#x3D;&quot; &quot; \\\ngo install -tags &quot;&quot; -ldflags &quot;$LD_FLAGS&quot; \\\ngithub.com&#x2F;hyperledger&#x2F;fabric&#x2F;cmd&#x2F;cryptogen\n\n# 编译安装 configtxgen，等价于执行 make configtxgen\n$ CGO_CFLAGS&#x3D;&quot; &quot; \\\ngo install -tags &quot;&quot; -ldflags &quot;$LD_FLAGS&quot; \\\ngithub.com&#x2F;hyperledger&#x2F;fabric&#x2F;cmd&#x2F;configtxgen\n\n# 编译安装 configtxlator，等价于执行 make configtxlator\n$ CGO_CFLAGS&#x3D;&quot; &quot; \\\ngo install -tags &quot;&quot; -ldflags &quot;$LD_FLAGS&quot; \\\ngithub.com&#x2F;hyperledger&#x2F;fabric&#x2F;cmd&#x2F;configtxlator\n\n# 编译安装 discover，等价于执行 make discover\n$ CGO_CFLAGS&#x3D;&quot; &quot; \\\ngo install -tags &quot;&quot; -ldflags &quot;$LD_FLAGS&quot; \\\ngithub.com&#x2F;hyperledger&#x2F;fabric&#x2F;cmd&#x2F;discover\n\n# 编译安装 idemixgen，等价于执行 make idemixgen\n$ CGO_CFLAGS&#x3D;&quot; &quot; \\\ngo install -tags &quot;&quot; -ldflags &quot;$LD_FLAGS&quot; \\\ngithub.com&#x2F;hyperledger&#x2F;fabric&#x2F;cmd&#x2F;idemixgen\n\n# 编译安装 osnadmin，等价于执行 make osnadmin,v2.2.3版本所需\n$ CGO_CFLAGS&#x3D;&quot; &quot; \\\n  go install -tags &quot;&quot; -ldflags &quot;$LD_FLAGS&quot; \\\n  github.com&#x2F;hyperledger&#x2F;fabric&#x2F;cmd&#x2F;osnadmin\n另外，fabric 项目还提供了不少常见的编译命令，可以参考 Makefile 文件，例如编译所有的二进制文件可以使用如下命令：\n$ make native\n\nDockefile 生成镜像（强烈推荐）\n\n\n\n\n\n\n\n\nHyperledger Fabric2.x Docker镜像编译加速\nFabric的镜像是基于Alpine（Alpine Linux 是一个面向安全，轻量级的基于musl libc与busybox项目的Linux发行版），Alpine的包管理工具是APK，Alpine系统默认源是国外，因此在以Alpine为基础创建的镜像容器中安装软件会很慢。比如：安装最耗时的是”installing gcc”，真的要等半天。本文将使用清华大学开源软件源，地址为：http://mirrors.tuna.tsinghua.edu.cn/alpine/v3.16/main/，v3.16是Alpine的版本号。\n修改Dockerfile文件Alpine镜像加速那如何Fabric镜像容器的源呢？具体步骤如下：\n进入Fabric源码中的images目录，该目录下有5个子目录，每个目录包含一个Dockerfile。如下图所示：\n[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-3Hbk6QGJ-1669947206346)(C:\\Users\\acrow\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221020084024529.png)]\n依次修改每个Dockerfile文件，在对应的位置增加代码：\nRUN echo -e http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;alpine&#x2F;v3.16&#x2F;main&#x2F; &gt; &#x2F;etc&#x2F;apk&#x2F;repositories\n修改后的Dockerfile文件内容如下图所示：\ntools/Dockerfile：\n# Copyright IBM Corp. All Rights Reserved.\n#\n# SPDX-License-Identifier: Apache-2.0\n\nARG GO_VER\nARG ALPINE_VER\nFROM golang:$&#123;GO_VER&#125;-alpine$&#123;ALPINE_VER&#125; as golang\n\nRUN echo -e http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;alpine&#x2F;v3.16&#x2F;main&#x2F; &gt; &#x2F;etc&#x2F;apk&#x2F;repositories\n\nRUN apk add --no-cache \\\n\tbash \\\n\tbinutils-gold \\\n\tgcc \\\n\tgit \\\n\tmake \\\n\tmusl-dev;\n\nADD . $GOPATH&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric\nWORKDIR $GOPATH&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric\n\nFROM golang as tools\nARG GO_TAGS\nRUN CGO_ENABLED&#x3D;0 make tools GO_TAGS&#x3D;$&#123;GO_TAGS&#125;\n\nFROM golang:$&#123;GO_VER&#125;-alpine$&#123;ALPINE_VER&#125;\nRUN echo -e http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;alpine&#x2F;v3.16&#x2F;main&#x2F; &gt; &#x2F;etc&#x2F;apk&#x2F;repositories\n\n# git is required to support &#96;go list -m&#96;\nRUN apk add --no-cache \\\n\tbash \\\n\tgit \\\n\tjq \\\n\ttzdata;\nENV FABRIC_CFG_PATH &#x2F;etc&#x2F;hyperledger&#x2F;fabric\nVOLUME &#x2F;etc&#x2F;hyperledger&#x2F;fabric\nCOPY --from&#x3D;tools &#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;build&#x2F;bin &#x2F;usr&#x2F;local&#x2F;bin\nCOPY --from&#x3D;tools &#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;sampleconfig $&#123;FABRIC_CFG_PATH&#125;\n\n编译Dockerfile\n$ cd ~&#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;images&#x2F;baseos\n$ docker build -t hyperledger&#x2F;baseos .\norderer/Dockerfile：\n# Copyright IBM Corp. All Rights Reserved.\n#\n# SPDX-License-Identifier: Apache-2.0\n\nARG GO_VER\nARG ALPINE_VER\nFROM alpine:$&#123;ALPINE_VER&#125; as base\nRUN echo -e http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;alpine&#x2F;v3.16&#x2F;main&#x2F; &gt; &#x2F;etc&#x2F;apk&#x2F;repositories\n\nRUN apk add --no-cache tzdata\n# set up nsswitch.conf for Go&#39;s &quot;netgo&quot; implementation\n# - https:&#x2F;&#x2F;github.com&#x2F;golang&#x2F;go&#x2F;blob&#x2F;go1.9.1&#x2F;src&#x2F;net&#x2F;conf.go#L194-L275\n# - docker run --rm debian:stretch grep &#39;^hosts:&#39; &#x2F;etc&#x2F;nsswitch.conf\nRUN [ ! -e &#x2F;etc&#x2F;nsswitch.conf ] &amp;&amp; echo &#39;hosts: files dns&#39; &gt; &#x2F;etc&#x2F;nsswitch.conf\n\nFROM golang:$&#123;GO_VER&#125;-alpine$&#123;ALPINE_VER&#125; as golang\nRUN echo -e http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;alpine&#x2F;v3.16&#x2F;main&#x2F; &gt; &#x2F;etc&#x2F;apk&#x2F;repositories\n\nRUN apk add --no-cache \\\n\tbash \\\n\tbinutils-gold \\\n\tgcc \\\n\tgit \\\n\tmake \\\n\tmusl-dev\nADD . $GOPATH&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric\nWORKDIR $GOPATH&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric\n\nFROM golang as orderer\nARG GO_TAGS\nRUN CGO_ENABLED&#x3D;0 make orderer GO_TAGS&#x3D;$&#123;GO_TAGS&#125;\n\nFROM base\nENV FABRIC_CFG_PATH &#x2F;etc&#x2F;hyperledger&#x2F;fabric\nVOLUME &#x2F;etc&#x2F;hyperledger&#x2F;fabric\nVOLUME &#x2F;var&#x2F;hyperledger\nCOPY --from&#x3D;orderer &#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;build&#x2F;bin &#x2F;usr&#x2F;local&#x2F;bin\nCOPY --from&#x3D;orderer &#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;sampleconfig&#x2F;msp $&#123;FABRIC_CFG_PATH&#125;&#x2F;msp\nCOPY --from&#x3D;orderer &#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;sampleconfig&#x2F;orderer.yaml $&#123;FABRIC_CFG_PATH&#125;\nCOPY --from&#x3D;orderer &#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;sampleconfig&#x2F;configtx.yaml $&#123;FABRIC_CFG_PATH&#125;\nEXPOSE 7050\nCMD [&quot;orderer&quot;]\n\npeer/Dockerfile：\n# Copyright IBM Corp. All Rights Reserved.\n#\n# SPDX-License-Identifier: Apache-2.0\n\nARG GO_VER\nARG ALPINE_VER\n\nFROM alpine:$&#123;ALPINE_VER&#125; as peer-base\nRUN echo -e http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;alpine&#x2F;v3.16&#x2F;main&#x2F; &gt; &#x2F;etc&#x2F;apk&#x2F;repositories\n\nRUN apk add --no-cache tzdata\n# set up nsswitch.conf for Go&#39;s &quot;netgo&quot; implementation\n# - https:&#x2F;&#x2F;github.com&#x2F;golang&#x2F;go&#x2F;blob&#x2F;go1.9.1&#x2F;src&#x2F;net&#x2F;conf.go#L194-L275\n# - docker run --rm debian:stretch grep &#39;^hosts:&#39; &#x2F;etc&#x2F;nsswitch.conf\nRUN echo &#39;hosts: files dns&#39; &gt; &#x2F;etc&#x2F;nsswitch.conf\n\nFROM golang:$&#123;GO_VER&#125;-alpine$&#123;ALPINE_VER&#125; as golang\nRUN echo -e http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;alpine&#x2F;v3.16&#x2F;main&#x2F; &gt; &#x2F;etc&#x2F;apk&#x2F;repositories\n\nRUN apk add --no-cache \\\n\tbash \\\n\tbinutils-gold \\\n\tgcc \\\n\tgit \\\n\tmake \\\n\tmusl-dev\nADD . $GOPATH&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric\nWORKDIR $GOPATH&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric\n\nFROM golang as peer\nARG GO_TAGS\nRUN CGO_ENABLED&#x3D;0 make peer GO_TAGS&#x3D;$&#123;GO_TAGS&#125;\nRUN CGO_ENABLED&#x3D;0 make ccaasbuilder\nRUN \\\n    export MARCH&#x3D;$(go env GOOS)-$(go env GOARCH) &amp;&amp; \\\n    mkdir -p release&#x2F;linux-platform &amp;&amp; \\\n    cp -r release&#x2F;$&#123;MARCH&#125;&#x2F;builders release&#x2F;linux-platform&#x2F;.\n\nFROM peer-base\nENV FABRIC_CFG_PATH &#x2F;etc&#x2F;hyperledger&#x2F;fabric\nVOLUME &#x2F;etc&#x2F;hyperledger&#x2F;fabric\nVOLUME &#x2F;var&#x2F;hyperledger\nCOPY --from&#x3D;peer &#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;build&#x2F;bin &#x2F;usr&#x2F;local&#x2F;bin\nCOPY --from&#x3D;peer &#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;sampleconfig&#x2F;msp $&#123;FABRIC_CFG_PATH&#125;&#x2F;msp\nCOPY --from&#x3D;peer &#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;sampleconfig&#x2F;core.yaml $&#123;FABRIC_CFG_PATH&#125;&#x2F;core.yaml\nCOPY --from&#x3D;peer &#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;release&#x2F;linux-platform&#x2F;builders&#x2F;ccaas&#x2F;bin&#x2F; &#x2F;opt&#x2F;hyperledger&#x2F;ccaas_builder&#x2F;bin&#x2F;\nEXPOSE 7051\nCMD [&quot;peer&quot;,&quot;node&quot;,&quot;start&quot;]\n\n\nccenv/Dockerfile：\n# Copyright IBM Corp. All Rights Reserved.\n#\n# SPDX-License-Identifier: Apache-2.0\n\nARG GO_VER\nARG ALPINE_VER\nFROM golang:$&#123;GO_VER&#125;-alpine$&#123;ALPINE_VER&#125;\nRUN echo -e http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;alpine&#x2F;v3.16&#x2F;main&#x2F; &gt; &#x2F;etc&#x2F;apk&#x2F;repositories\n\nRUN apk add --no-cache \\\n\tbinutils-gold \\\n\tg++ \\\n\tgcc \\\n\tgit \\\n\tmusl-dev\n\nRUN mkdir -p &#x2F;chaincode&#x2F;output &#x2F;chaincode&#x2F;input\nRUN addgroup -g 500 chaincode &amp;&amp; adduser -u 500 -D -h &#x2F;home&#x2F;chaincode -G chaincode chaincode\nRUN chown -R chaincode:chaincode &#x2F;chaincode\nUSER chaincode\n\n\nbaseos/Dockerfile：\n# Copyright IBM Corp. All Rights Reserved.\n#\n# SPDX-License-Identifier: Apache-2.0\n\nARG GO_VER\nARG ALPINE_VER\n\nFROM alpine:$&#123;ALPINE_VER&#125; as base\nRUN echo -e http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;alpine&#x2F;v3.16&#x2F;main&#x2F; &gt; &#x2F;etc&#x2F;apk&#x2F;repositories\n\nRUN apk add --no-cache tzdata\nRUN addgroup -g 500 chaincode &amp;&amp; adduser -u 500 -D -h &#x2F;home&#x2F;chaincode -G chaincode chaincode\nUSER chaincode\n\n\n修改完这5个Dockerfile文件之后，在去Fabric源码根目录下执行：make docker，感觉像风一样快。\n编译Dockerfile生成镜像make docker\n\n手动安装官方二进制包（推荐）直接使用官方脚本不出意外的话肯定会出意外（网络原因），推荐手动安装需要的各项环境。\n1.安装fabric-samplesfabric-samples是Fabric的官方Demo集合，其内部包含多个示例，每个示例有Golang、JavaScript、typescript、Java的链码实现，并且这些链码可以直接部署到对应的Fabric上，对初学者很有帮助。fabric-samples安装非常简单，使用`\n$ git clone https:&#x2F;&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-samples.git\n$ git clone https:&#x2F;&#x2F;gitee.com&#x2F;hyperledger&#x2F;fabric-samples.git\n$ git tag&#96;\n$ git checkout -b v2.3.0\n[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-hjFZ08Y1-1669947206348)(C:\\Users\\acrow\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221019104109660.png)]\n将项目源码克隆到本地即可，若一直失败也可以直接在release中下载对应版本的压缩包。\n2.安装FabricFabric是联盟链的核心开发工具，包含了我们开发、编译、部署过程中的所有命令。下载fabric 2.4.6并解压\n$ wget https:&#x2F;&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;releases&#x2F;download&#x2F;v2.4.6&#x2F;hyperledger-fabric-linux-amd64-2.4.6.tar.gz\n\n$ mkdir &#x2F;usr&#x2F;local&#x2F;fabric\n\n$ tar -xzvf hyperledger-fabric-linux-amd64-2.4.6.tar.gz -C &#x2F;usr&#x2F;local&#x2F;fabric\n\n3.下载fabric-ca 1.5.5并解压$ wget https:&#x2F;&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-ca&#x2F;releases&#x2F;download&#x2F;v1.5.5&#x2F;hyperledger-fabric-ca-linux-amd64-1.5.5.tar.gz\n\n$ tar -xzvf hyperledger-fabric-ca-linux-amd64-1.5.5.tar.gz\n\n$ mv bin&#x2F;* &#x2F;usr&#x2F;local&#x2F;fabric&#x2F;bin\n4.设置环境变量，在/etc/profile末尾添加#Fabric\nexport FABRIC&#x3D;&#x2F;usr&#x2F;local&#x2F;fabric\nexport PATH&#x3D;$PATH:$FABRIC&#x2F;bin\n5.更新环境变量source /etc/profile$ source &#x2F;etc&#x2F;profile\n拉取Fabric相关组件Docker镜像 部分镜像说明如下：\n\n\n\n\n镜像名称\n是否可选\n镜像说明\n\n\n\n\nhyperledger/fabric-tools\n可选\n包含crytogen、configtxgen、configtxlator我第二次工具的镜像文件\n\n\nhyperledger/fabric-couchdb\n可选\nCouchDB的数据库镜像文件、状态数据库选择CouchDB的时候才需要\n\n\nhyperledger/fabric-kafka\n可选\nKafka的镜像文件\n\n\nhyperledger/fabric-zookeeper\n可选\nZookeeper的镜像文件，Kafka需要的组件\n\n\nhyperledger/fabric-peer\n必选\nPeer节点的镜像文件\n\n\nhyperledger/fabric-orderer\n必选\n排序服务节点的镜像文件\n\n\nhyperledger/fabric-javaenv\n可选\njava链码的基础镜像文件\n\n\nhyperledger/fabric-ccenv\n必选\nGolang链码的基础镜像文件\n\n\nhyperledger/fabric-ca\n可选\nfabric-ca的镜像文件，用到fabric-ca的时候才需要\n\n\n\n\nFabric相关镜像均可以在DockerHub官方镜像网站进行下载，搜索需要的镜像则可获取安装方法，本试验用到的所有镜像为：\n$ sudo docker pull hyperledger&#x2F;fabric-tools:2.4.6\n$ sudo docker pull hyperledger&#x2F;fabric-peer:2.4.6\n$ sudo docker pull hyperledger&#x2F;fabric-orderer:2.4.6\n$ sudo docker pull hyperledger&#x2F;fabric-ccenv:2.4.6\n$ sudo docker pull hyperledger&#x2F;fabric-baseos:2.4.6\n$ sudo docker pull hyperledger&#x2F;fabric-ca:1.5.5\n\n使用docker images命令查看安装完成后镜像：\nhyperledger&#x2F;fabric-tools     2.4.6       625237d887db   4 weeks ago    473MB\nhyperledger&#x2F;fabric-peer      2.4.6       ee643d889779   4 weeks ago    62.3MB\nhyperledger&#x2F;fabric-orderer   2.4.6       df64446ac2df   4 weeks ago    37.3MB\nhyperledger&#x2F;fabric-ccenv     2.4.6       da4f00cb576a   4 weeks ago    517MB\nhyperledger&#x2F;fabric-baseos    2.4.6       0287ebf8aaf3   4 weeks ago    6.94MB\nhyperledger&#x2F;fabric-ca        1.5.5       4ea287b75c63   6 months ago   69.8MB\n镜像打上latest标签\n示例代码中使用的镜像标签都为latest，但如果在pull时直接选择latest可能会报错，因此我们在上面镜像拉取完成后手动使用以下命令为镜像打上latest标签：\n$ sudo docker tag hyperledger&#x2F;fabric-tools:2.4.6 hyperledger&#x2F;fabric-tools:latest\n$ sudo docker tag hyperledger&#x2F;fabric-peer:2.4.6 hyperledger&#x2F;fabric-peer:latest\n$ sudo docker tag hyperledger&#x2F;fabric-orderer:2.4.6 hyperledger&#x2F;fabric-orderer:latest\n$ sudo docker tag hyperledger&#x2F;fabric-ccenv:2.4.6 hyperledger&#x2F;fabric-ccenv:latest\n$ sudo docker tag hyperledger&#x2F;fabric-baseos:2.4.6 hyperledger&#x2F;fabric-baseos:latest\n$ sudo docker tag hyperledger&#x2F;fabric-ca:1.5.5 hyperledger&#x2F;fabric-ca:latest\n删除2.4.6的镜像\n$ sudo docker rmi hyperledger&#x2F;fabric-tools:2.4.6\n$ sudo docker rmi hyperledger&#x2F;fabric-peer:2.4.6\n$ sudo docker rmi hyperledger&#x2F;fabric-orderer:2.4.6\n$ sudo docker rmi hyperledger&#x2F;fabric-ccenv:2.4.6\n$ sudo docker rmi hyperledger&#x2F;fabric-baseos:2.4.6\n$ sudo docker rmi hyperledger&#x2F;fabric-ca:1.5.5\n最终的镜像为：\n\n\n\n\n\n\n\n\n\n\n特别注意，下载拉取镜像之前建议通过相关镜像命令删除相关镜像和配置，避免冲突！\ntest-network网络测试启动fabric网络\n进入fabric-sample的test-network目录\n$ cd ~&#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-samples&#x2F;test-network\n\n运行./network.sh up启动网络\n\n\n$ .&#x2F;network.sh up\nUsing docker and docker-compose\nStarting nodes with CLI timeout of &#39;5&#39; tries and CLI delay of &#39;3&#39; seconds and using database &#39;leveldb&#39; with crypto from &#39;cryptogen&#39;\nLOCAL_VERSION&#x3D;2.4.6\nDOCKER_IMAGE_VERSION&#x3D;2.4.6\n&#x2F;home&#x2F;magpie&#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-samples&#x2F;test-network&#x2F;..&#x2F;bin&#x2F;cryptogen\nGenerating certificates using cryptogen tool\nCreating Org1 Identities\n+ cryptogen generate --config&#x3D;.&#x2F;organizations&#x2F;cryptogen&#x2F;crypto-config-org1.yaml --output&#x3D;organizations\norg1.example.com\n+ res&#x3D;0\nCreating Org2 Identities\n+ cryptogen generate --config&#x3D;.&#x2F;organizations&#x2F;cryptogen&#x2F;crypto-config-org2.yaml --output&#x3D;organizations\norg2.example.com\n+ res&#x3D;0\nCreating Orderer Org Identities\n+ cryptogen generate --config&#x3D;.&#x2F;organizations&#x2F;cryptogen&#x2F;crypto-config-orderer.yaml --output&#x3D;organizations\n+ res&#x3D;0\nGenerating CCP files for Org1 and Org2\n[+] Running 8&#x2F;8\n ⠿ Network fabric_test                      Created                                                                                                               0.3s\n ⠿ Volume &quot;compose_orderer.example.com&quot;     Created                                                                                                               0.0s\n ⠿ Volume &quot;compose_peer0.org1.example.com&quot;  Created                                                                                                               0.0s\n ⠿ Volume &quot;compose_peer0.org2.example.com&quot;  Created                                                                                                               0.0s\n ⠿ Container peer0.org1.example.com         Started                                                                                                               3.5s\n ⠿ Container peer0.org2.example.com         Started                                                                                                               5.5s\n ⠿ Container orderer.example.com            Started                                                                                                               4.9s\n ⠿ Container cli                            Started                                                                                                               6.6s\nCONTAINER ID   IMAGE                               COMMAND             CREATED         STATUS                  PORTS                                                                                                                             NAMES\nbced8a5c720d   hyperledger&#x2F;fabric-tools:latest     &quot;&#x2F;bin&#x2F;bash&quot;         7 seconds ago   Up Less than a second                                                                                                                                     cli\n0f61f922dd99   hyperledger&#x2F;fabric-orderer:latest   &quot;orderer&quot;           7 seconds ago   Up 2 seconds            0.0.0.0:7050-&gt;7050&#x2F;tcp, :::7050-&gt;7050&#x2F;tcp, 0.0.0.0:7053-&gt;7053&#x2F;tcp, :::7053-&gt;7053&#x2F;tcp, 0.0.0.0:9443-&gt;9443&#x2F;tcp, :::9443-&gt;9443&#x2F;tcp   orderer.example.com\n4a1aec960d09   hyperledger&#x2F;fabric-peer:latest      &quot;peer node start&quot;   7 seconds ago   Up 1 second             0.0.0.0:9051-&gt;9051&#x2F;tcp, :::9051-&gt;9051&#x2F;tcp, 7051&#x2F;tcp, 0.0.0.0:9445-&gt;9445&#x2F;tcp, :::9445-&gt;9445&#x2F;tcp                                    peer0.org2.example.com\ncd163867a31c   hyperledger&#x2F;fabric-peer:latest      &quot;peer node start&quot;   7 seconds ago   Up 3 seconds            0.0.0.0:7051-&gt;7051&#x2F;tcp, :::7051-&gt;7051&#x2F;tcp, 0.0.0.0:9444-&gt;9444&#x2F;tcp, :::9444-&gt;9444&#x2F;tcp                                              peer0.org1.example.com\nefd328836573   portainer&#x2F;portainer-ce              &quot;&#x2F;portainer&quot;        9 days ago      Up 17 hours             0.0.0.0:8000-&gt;8000&#x2F;tcp, :::8000-&gt;8000&#x2F;tcp, 0.0.0.0:9000-&gt;9000&#x2F;tcp, :::9000-&gt;9000&#x2F;tcp, 9443&#x2F;tcp                                    portainer\n!!!\n\n最终出现以上输出日志则表示网络启动成功，每个加入Fabric网络的Node和User都需要隶属于某个组织，以上网络中包含了两个平行组织—peer0.org1.example.com和peer0.org2.example.com，它还包括一个作为ordering service维护网络的orderer.example.com`。\n创建channel上节已经在机器上运行了peer节点和orderer节点，现在可以使用network.sh为Org1和Org2之间创建channel。channel是特定网络成员之间的私有通道，只能被属于该通道的组织使用，并且对网络的其他成员是不可见的。每个channel都有一个单独的区块链账本，属于该通道的组织可以让其下peer加入该通道，以让peer能够存储channel上的帐本并验证账本上的交易。使用以下命令创建自定义通道testchannel：\n$ cd ~&#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-samples&#x2F;test-network\n$ .&#x2F;network.sh createChannel -c testchannel\n 结果显示：\nmagpie@Goserver:~&#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-samples&#x2F;test-network$ .&#x2F;network.sh createChannel -c testchannel\nCreating channel &#39;testchannel&#39;.\nIf network is not up, starting nodes with CLI timeout of &#39;5&#39; tries and CLI delay of &#39;3&#39; seconds and using database &#39;leveldb \nGenerating channel create transaction &#39;testchannel.tx&#39;\n+ configtxgen -profile TwoOrgsChannel -outputCreateChannelTx .&#x2F;channel-artifacts&#x2F;testchannel.tx -channelID testchannel\n2022-10-16 06:17:21.349 UTC [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration\n2022-10-16 06:17:21.371 UTC [common.tools.configtxgen.localconfig] Load -&gt; INFO 002 Loaded configuration: &#x2F;home&#x2F;magpie&#x2F;fabric-samples01&#x2F;test-network&#x2F;configtx&#x2F;configtx.yaml\n2022-10-16 06:17:21.371 UTC [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 003 Generating new channel configtx\n2022-10-16 06:17:21.377 UTC [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 004 Writing new channel tx\n+ res&#x3D;0\nCreating channel testchannel\nUsing organization 1\n+ peer channel create -o localhost:7050 -c testchannel --ordererTLSHostnameOverride orderer.example.com -f .&#x2F;channel-artifacts&#x2F;testchannel.tx --outputBlock .&#x2F;channel-artifacts&#x2F;testchannel.block --tls --cafile &#x2F;home&#x2F;magpie&#x2F;fabric-samples01&#x2F;test-network&#x2F;organizations&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem\n+ res&#x3D;0\n2022-10-16 06:17:24.799 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized\n2022-10-16 06:17:25.437 UTC [cli.common] readBlock -&gt; INFO 002 Expect block, but got status: &amp;&#123;NOT_FOUND&#125;\n2022-10-16 06:17:25.440 UTC [channelCmd] InitCmdFactory -&gt; INFO 003 Endorser and orderer connections initialized\n2022-10-16 06:17:25.644 UTC [cli.common] readBlock -&gt; INFO 004 Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;\n2022-10-16 06:17:25.650 UTC [channelCmd] InitCmdFactory -&gt; INFO 005 Endorser and orderer connections initialized\n2022-10-16 06:17:25.852 UTC [cli.common] readBlock -&gt; INFO 006 Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;\n2022-10-16 06:17:25.855 UTC [channelCmd] InitCmdFactory -&gt; INFO 007 Endorser and orderer connections initialized\n2022-10-16 06:17:26.057 UTC [cli.common] readBlock -&gt; INFO 008 Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;\n2022-10-16 06:17:26.059 UTC [channelCmd] InitCmdFactory -&gt; INFO 009 Endorser and orderer connections initialized\n2022-10-16 06:17:26.262 UTC [cli.common] readBlock -&gt; INFO 00a Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;\n2022-10-16 06:17:26.264 UTC [channelCmd] InitCmdFactory -&gt; INFO 00b Endorser and orderer connections initialized\n2022-10-16 06:17:26.467 UTC [cli.common] readBlock -&gt; INFO 00c Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;\n2022-10-16 06:17:26.469 UTC [channelCmd] InitCmdFactory -&gt; INFO 00d Endorser and orderer connections initialized\n2022-10-16 06:17:26.675 UTC [cli.common] readBlock -&gt; INFO 00e Received block: 0\nChannel &#39;testchannel&#39; created\nJoining org1 peer to the channel...\nUsing organization 1\n+ peer channel join -b .&#x2F;channel-artifacts&#x2F;testchannel.block\n+ res&#x3D;0\n2022-10-16 06:17:29.724 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized\n2022-10-16 06:17:29.877 UTC [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel\nJoining org2 peer to the channel...\nUsing organization 2\n+ peer channel join -b .&#x2F;channel-artifacts&#x2F;testchannel.block\n+ res&#x3D;0\n2022-10-16 06:17:32.917 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized\n2022-10-16 06:17:33.012 UTC [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel\nSetting anchor peer for org1...\nUsing organization 1\nFetching channel config for channel testchannel\nUsing organization 1\nFetching the most recent configuration block for the channel\n+ peer channel fetch config config_block.pb -o orderer.example.com:7050 --ordererTLSHostnameOverride orderer.example.com -c testchannel --tls --cafile &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;organizations&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem\n2022-10-16 06:17:33.356 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized\n2022-10-16 06:17:33.358 UTC [cli.common] readBlock -&gt; INFO 002 Received block: 0\n2022-10-16 06:17:33.395 UTC [channelCmd] fetch -&gt; INFO 003 Retrieving last config block: 0\n2022-10-16 06:17:33.397 UTC [cli.common] readBlock -&gt; INFO 004 Received block: 0\nDecoding config block to JSON and isolating config to Org1MSPconfig.json\n+ jq &#39;.data.data[0].payload.data.config&#39;\n+ configtxlator proto_decode --input config_block.pb --type common.Block\n+ jq &#39;.channel_group.groups.Application.groups.Org1MSP.values +&#x3D; &#123;&quot;AnchorPeers&quot;:&#123;&quot;mod_policy&quot;: &quot;Admins&quot;,&quot;value&quot;:&#123;&quot;anchor_peers&quot;: [&#123;&quot;host&quot;: &quot;peer0.org1.example.com&quot;,&quot;port&quot;: 7051&#125;]&#125;,&quot;version&quot;: &quot;0&quot;&#125;&#125;&#39; Org1MSPconfig.json\nGenerating anchor peer update transaction for Org1 on channel testchannel\n+ configtxlator proto_encode --input Org1MSPconfig.json --type common.Config\n+ configtxlator proto_encode --input Org1MSPmodified_config.json --type common.Config\n+ configtxlator compute_update --channel_id testchannel --original original_config.pb --updated modified_config.pb\n+ configtxlator proto_decode --input config_update.pb --type common.ConfigUpdate\n+ jq .\n++ cat config_update.json\n+ echo &#39;&#123;&quot;payload&quot;:&#123;&quot;header&quot;:&#123;&quot;channel_header&quot;:&#123;&quot;channel_id&quot;:&quot;testchannel&quot;, &quot;type&quot;:2&#125;&#125;,&quot;data&quot;:&#123;&quot;config_update&quot;:&#123;&#39; &#39;&quot;channel_id&quot;:&#39; &#39;&quot;testchannel&quot;,&#39; &#39;&quot;isolated_data&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;read_set&quot;:&#39; &#39;&#123;&#39; &#39;&quot;groups&quot;:&#39; &#39;&#123;&#39; &#39;&quot;Application&quot;:&#39; &#39;&#123;&#39; &#39;&quot;groups&quot;:&#39; &#39;&#123;&#39; &#39;&quot;Org1MSP&quot;:&#39; &#39;&#123;&#39; &#39;&quot;groups&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policies&quot;:&#39; &#39;&#123;&#39; &#39;&quot;Admins&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;Endorsement&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;Readers&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;Writers&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;values&quot;:&#39; &#39;&#123;&#39; &#39;&quot;MSP&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;value&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policies&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;values&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;version&quot;:&#39; &#39;&quot;1&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policies&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;values&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;write_set&quot;:&#39; &#39;&#123;&#39; &#39;&quot;groups&quot;:&#39; &#39;&#123;&#39; &#39;&quot;Application&quot;:&#39; &#39;&#123;&#39; &#39;&quot;groups&quot;:&#39; &#39;&#123;&#39; &#39;&quot;Org1MSP&quot;:&#39; &#39;&#123;&#39; &#39;&quot;groups&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;Admins&quot;,&#39; &#39;&quot;policies&quot;:&#39; &#39;&#123;&#39; &#39;&quot;Admins&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;Endorsement&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;Readers&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;Writers&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;values&quot;:&#39; &#39;&#123;&#39; &#39;&quot;AnchorPeers&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;Admins&quot;,&#39; &#39;&quot;value&quot;:&#39; &#39;&#123;&#39; &#39;&quot;anchor_peers&quot;:&#39; &#39;[&#39; &#39;&#123;&#39; &#39;&quot;host&quot;:&#39; &#39;&quot;peer0.org1.example.com&quot;,&#39; &#39;&quot;port&quot;:&#39; 7051 &#39;&#125;&#39; &#39;]&#39; &#39;&#125;,&#39; &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;MSP&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;value&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;version&quot;:&#39; &#39;&quot;1&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policies&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;values&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;version&quot;:&#39; &#39;&quot;1&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policies&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;values&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;&#39; &#39;&#125;&#125;&#125;&#125;&#39;\n+ configtxlator proto_encode --input config_update_in_envelope.json --type common.Envelope\n2022-10-16 06:17:36.045 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized\n2022-10-16 06:17:36.060 UTC [channelCmd] update -&gt; INFO 002 Successfully submitted channel update\nAnchor peer set for org &#39;Org1MSP&#39; on channel &#39;testchannel&#39;\nSetting anchor peer for org2...\nUsing organization 2\nFetching channel config for channel testchannel\nUsing organization 2\nFetching the most recent configuration block for the channel\n+ peer channel fetch config config_block.pb -o orderer.example.com:7050 --ordererTLSHostnameOverride orderer.example.com -c testchannel --tls --cafile &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;organizations&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem\n2022-10-16 06:17:36.242 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized\n2022-10-16 06:17:36.245 UTC [cli.common] readBlock -&gt; INFO 002 Received block: 1\n2022-10-16 06:17:36.246 UTC [channelCmd] fetch -&gt; INFO 003 Retrieving last config block: 1\n2022-10-16 06:17:36.247 UTC [cli.common] readBlock -&gt; INFO 004 Received block: 1\nDecoding config block to JSON and isolating config to Org2MSPconfig.json\n+ configtxlator proto_decode --input config_block.pb --type common.Block\n+ jq &#39;.data.data[0].payload.data.config&#39;\n+ jq &#39;.channel_group.groups.Application.groups.Org2MSP.values +&#x3D; &#123;&quot;AnchorPeers&quot;:&#123;&quot;mod_policy&quot;: &quot;Admins&quot;,&quot;value&quot;:&#123;&quot;anchor_peers&quot;: [&#123;&quot;host&quot;: &quot;peer0.org2.example.com&quot;,&quot;port&quot;: 9051&#125;]&#125;,&quot;version&quot;: &quot;0&quot;&#125;&#125;&#39; Org2MSPconfig.json\nGenerating anchor peer update transaction for Org2 on channel testchannel\n+ configtxlator proto_encode --input Org2MSPconfig.json --type common.Config\n+ configtxlator proto_encode --input Org2MSPmodified_config.json --type common.Config\n+ configtxlator compute_update --channel_id testchannel --original original_config.pb --updated modified_config.pb\n+ configtxlator proto_decode --input config_update.pb --type common.ConfigUpdate\n+ jq .\n++ cat config_update.json\n+ echo &#39;&#123;&quot;payload&quot;:&#123;&quot;header&quot;:&#123;&quot;channel_header&quot;:&#123;&quot;channel_id&quot;:&quot;testchannel&quot;, &quot;type&quot;:2&#125;&#125;,&quot;data&quot;:&#123;&quot;config_update&quot;:&#123;&#39; &#39;&quot;channel_id&quot;:&#39; &#39;&quot;testchannel&quot;,&#39; &#39;&quot;isolated_data&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;read_set&quot;:&#39; &#39;&#123;&#39; &#39;&quot;groups&quot;:&#39; &#39;&#123;&#39; &#39;&quot;Application&quot;:&#39; &#39;&#123;&#39; &#39;&quot;groups&quot;:&#39; &#39;&#123;&#39; &#39;&quot;Org2MSP&quot;:&#39; &#39;&#123;&#39; &#39;&quot;groups&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policies&quot;:&#39; &#39;&#123;&#39; &#39;&quot;Admins&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;Endorsement&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;Readers&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;Writers&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;values&quot;:&#39; &#39;&#123;&#39; &#39;&quot;MSP&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;value&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policies&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;values&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;version&quot;:&#39; &#39;&quot;1&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policies&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;values&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;write_set&quot;:&#39; &#39;&#123;&#39; &#39;&quot;groups&quot;:&#39; &#39;&#123;&#39; &#39;&quot;Application&quot;:&#39; &#39;&#123;&#39; &#39;&quot;groups&quot;:&#39; &#39;&#123;&#39; &#39;&quot;Org2MSP&quot;:&#39; &#39;&#123;&#39; &#39;&quot;groups&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;Admins&quot;,&#39; &#39;&quot;policies&quot;:&#39; &#39;&#123;&#39; &#39;&quot;Admins&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;Endorsement&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;Readers&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;Writers&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;values&quot;:&#39; &#39;&#123;&#39; &#39;&quot;AnchorPeers&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;Admins&quot;,&#39; &#39;&quot;value&quot;:&#39; &#39;&#123;&#39; &#39;&quot;anchor_peers&quot;:&#39; &#39;[&#39; &#39;&#123;&#39; &#39;&quot;host&quot;:&#39; &#39;&quot;peer0.org2.example.com&quot;,&#39; &#39;&quot;port&quot;:&#39; 9051 &#39;&#125;&#39; &#39;]&#39; &#39;&#125;,&#39; &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;MSP&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;value&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;version&quot;:&#39; &#39;&quot;1&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policies&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;values&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;version&quot;:&#39; &#39;&quot;1&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policies&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;values&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;&#39; &#39;&#125;&#125;&#125;&#125;&#39;\n+ configtxlator proto_encode --input config_update_in_envelope.json --type common.Envelope\n2022-10-16 06:17:36.573 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized\n2022-10-16 06:17:36.589 UTC [channelCmd] update -&gt; INFO 002 Successfully submitted channel update\nAnchor peer set for org &#39;Org2MSP&#39; on channel &#39;testchannel&#39;\nChannel &#39;testchannel&#39; joined\n\n\n部署chaincode部署链码前，建议到链码子目录下执行go mod tidy，检查链码调用的包存在。同时，可能需要sudo apt install jq。创建通道后，您可以开始使用智能合约与通道账本交互。智能合约包含管理区块链账本上资产的业务逻辑，由成员运行的应用程序网络可以在账本上调用智能合约创建，更改和转让这些资产。可以通过./network.sh deployCC命令部署智能合约，但本过程可能会出现很多问题。使用以下命令部署chaincode：\n$ .&#x2F;network.sh deployCC -c testchannel -ccn basic -ccp ..&#x2F;asset-transfer-basic&#x2F;chaincode-go -ccl go\n\n此命令执行后可能会出现错误：scripts/deployCC.sh: line 114: log.txt: Permission denied，很明显这是权限不足所致，加上sudo试试：\n$sudo .&#x2F;network.sh deployCC -c testchannel -ccn basic -ccp ..&#x2F;asset-transfer-basic&#x2F;chaincode-go -ccl go\n加上sudo后出现新的错误：deployCC.sh: line 59: go: command not found。检查本用户go命令可用，检查root用户go命令可用，单单sudo后不能用。查阅资料后发现这是因为linux系统为了安全，限制在使用sudo时会清空自定义的环境变量，最简单的解决方法是在/etc/sudoers文件中直接将该限制注释1：\n[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-DYT0wCOB-1669947206350)(C:\\Users\\acrow\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221016182659200.png)]\n成功运行后可看见如下结果：\nmagpie@Goserver:~&#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-samples&#x2F;test-network$ .&#x2F;network.sh deployCC -c testchannel -ccn basic -ccp ..&#x2F;asset-transfer-basic&#x2F;chaincode-go -ccl go\ndeploying chaincode on channel &#39;testchannel&#39;\nexecuting with the following\n- CHANNEL_NAME: testchannel\n- CC_NAME: basic\n- CC_SRC_PATH: ..&#x2F;asset-transfer-basic&#x2F;chaincode-go\n- CC_SRC_LANGUAGE: go\n- CC_VERSION: 1.0\n- CC_SEQUENCE: 1\n- CC_END_POLICY: NA\n- CC_COLL_CONFIG: NA\n- CC_INIT_FCN: NA\n- DELAY: 3\n- MAX_RETRY: 5\n- VERBOSE: false\nVendoring Go dependencies at ..&#x2F;asset-transfer-basic&#x2F;chaincode-go\n~&#x2F;fabric-samples01&#x2F;asset-transfer-basic&#x2F;chaincode-go ~&#x2F;fabric-samples01&#x2F;test-network\n~&#x2F;fabric-samples01&#x2F;test-network\nFinished vendoring Go dependencies\n+ peer lifecycle chaincode package basic.tar.gz --path ..&#x2F;asset-transfer-basic&#x2F;chaincode-go --lang golang --label basic_1.0\n+ res&#x3D;0\nChaincode is packaged\nInstalling chaincode on peer0.org1...\nUsing organization 1\n+ peer lifecycle chaincode install basic.tar.gz\n+ res&#x3D;0\n2022-10-16 06:20:17.735 UTC [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 001 Installed remotely: response:&lt;status:200 payload:&quot;\\nJbasic_1.0:3cfcf67978d6b3f7c5e0375660c995b21db19c4330946079afc3925ad7306881\\022\\tbasic_1.0&quot; &gt; \n2022-10-16 06:20:17.735 UTC [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 002 Chaincode code package identifier: basic_1.0:3cfcf67978d6b3f7c5e0375660c995b21db19c4330946079afc3925ad7306881\nChaincode is installed on peer0.org1\nInstall chaincode on peer0.org2...\nUsing organization 2\n+ peer lifecycle chaincode install basic.tar.gz\n+ res&#x3D;0\n2022-10-16 06:20:32.262 UTC [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 001 Installed remotely: response:&lt;status:200 payload:&quot;\\nJbasic_1.0:3cfcf67978d6b3f7c5e0375660c995b21db19c4330946079afc3925ad7306881\\022\\tbasic_1.0&quot; &gt; \n2022-10-16 06:20:32.262 UTC [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 002 Chaincode code package identifier: basic_1.0:3cfcf67978d6b3f7c5e0375660c995b21db19c4330946079afc3925ad7306881\nChaincode is installed on peer0.org2\nUsing organization 1\n+ peer lifecycle chaincode queryinstalled\n+ res&#x3D;0\nInstalled chaincodes on peer:\nPackage ID: basic_1.0:3cfcf67978d6b3f7c5e0375660c995b21db19c4330946079afc3925ad7306881, Label: basic_1.0\nQuery installed successful on peer0.org1 on channel\nUsing organization 1\n+ peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile &#x2F;home&#x2F;magpie&#x2F;fabric-samples01&#x2F;test-network&#x2F;organizations&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem --channelID testchannel --name basic --version 1.0 --package-id basic_1.0:3cfcf67978d6b3f7c5e0375660c995b21db19c4330946079afc3925ad7306881 --sequence 1\n+ res&#x3D;0\n2022-10-16 06:20:34.654 UTC [chaincodeCmd] ClientWait -&gt; INFO 001 txid [66a8cf4ffc15cd947f5d3d4d8b371f4bab0a88af7069059df2fa5e5af7d8724c] committed with status (VALID) at localhost:7051\nChaincode definition approved on peer0.org1 on channel &#39;testchannel&#39;\nUsing organization 1\nChecking the commit readiness of the chaincode definition on peer0.org1 on channel &#39;testchannel&#39;...\nAttempting to check the commit readiness of the chaincode definition on peer0.org1, Retry after 3 seconds.\n+ peer lifecycle chaincode checkcommitreadiness --channelID testchannel --name basic --version 1.0 --sequence 1 --output json\n+ res&#x3D;0\n&#123;\n        &quot;approvals&quot;: &#123;\n                &quot;Org1MSP&quot;: true,\n                &quot;Org2MSP&quot;: false\n        &#125;\n&#125;\nChecking the commit readiness of the chaincode definition successful on peer0.org1 on channel &#39;testchannel&#39;\nUsing organization 2\nChecking the commit readiness of the chaincode definition on peer0.org2 on channel &#39;testchannel&#39;...\nAttempting to check the commit readiness of the chaincode definition on peer0.org2, Retry after 3 seconds.\n+ peer lifecycle chaincode checkcommitreadiness --channelID testchannel --name basic --version 1.0 --sequence 1 --output json\n+ res&#x3D;0\n&#123;\n        &quot;approvals&quot;: &#123;\n                &quot;Org1MSP&quot;: true,\n                &quot;Org2MSP&quot;: false\n        &#125;\n&#125;\nChecking the commit readiness of the chaincode definition successful on peer0.org2 on channel &#39;testchannel&#39;\nUsing organization 2\n+ peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile &#x2F;home&#x2F;magpie&#x2F;fabric-samples01&#x2F;test-network&#x2F;organizations&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem --channelID testchannel --name basic --version 1.0 --package-id basic_1.0:3cfcf67978d6b3f7c5e0375660c995b21db19c4330946079afc3925ad7306881 --sequence 1\n+ res&#x3D;0\n2022-10-16 06:20:43.092 UTC [chaincodeCmd] ClientWait -&gt; INFO 001 txid [47456dcd71001580d05c5a0e84c069df8c5dd8c7d2c1d279464a9e625c671136] committed with status (VALID) at localhost:9051\nChaincode definition approved on peer0.org2 on channel &#39;testchannel&#39;\nUsing organization 1\nChecking the commit readiness of the chaincode definition on peer0.org1 on channel &#39;testchannel&#39;...\nAttempting to check the commit readiness of the chaincode definition on peer0.org1, Retry after 3 seconds.\n+ peer lifecycle chaincode checkcommitreadiness --channelID testchannel --name basic --version 1.0 --sequence 1 --output json\n+ res&#x3D;0\n&#123;\n        &quot;approvals&quot;: &#123;\n                &quot;Org1MSP&quot;: true,\n                &quot;Org2MSP&quot;: true\n        &#125;\n&#125;\nChecking the commit readiness of the chaincode definition successful on peer0.org1 on channel &#39;testchannel&#39;\nUsing organization 2\nChecking the commit readiness of the chaincode definition on peer0.org2 on channel &#39;testchannel&#39;...\nAttempting to check the commit readiness of the chaincode definition on peer0.org2, Retry after 3 seconds.\n+ peer lifecycle chaincode checkcommitreadiness --channelID testchannel --name basic --version 1.0 --sequence 1 --output json\n+ res&#x3D;0\n&#123;\n        &quot;approvals&quot;: &#123;\n                &quot;Org1MSP&quot;: true,\n                &quot;Org2MSP&quot;: true\n        &#125;\n&#125;\nChecking the commit readiness of the chaincode definition successful on peer0.org2 on channel &#39;testchannel&#39;\nUsing organization 1\nUsing organization 2\n+ peer lifecycle chaincode commit -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile &#x2F;home&#x2F;magpie&#x2F;fabric-samples01&#x2F;test-network&#x2F;organizations&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem --channelID testchannel --name basic --peerAddresses localhost:7051 --tlsRootCertFiles &#x2F;home&#x2F;magpie&#x2F;fabric-samples01&#x2F;test-network&#x2F;organizations&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles &#x2F;home&#x2F;magpie&#x2F;fabric-samples01&#x2F;test-network&#x2F;organizations&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;peers&#x2F;peer0.org2.example.com&#x2F;tls&#x2F;ca.crt --version 1.0 --sequence 1\n+ res&#x3D;0\n2022-10-16 06:20:51.575 UTC [chaincodeCmd] ClientWait -&gt; INFO 001 txid [ff045f6bf52924b59de9a158259a4435333e6d08b7b0289a95cbd65ce081e917] committed with status (VALID) at localhost:9051\n2022-10-16 06:20:51.595 UTC [chaincodeCmd] ClientWait -&gt; INFO 002 txid [ff045f6bf52924b59de9a158259a4435333e6d08b7b0289a95cbd65ce081e917] committed with status (VALID) at localhost:7051\nChaincode definition committed on channel &#39;testchannel&#39;\nUsing organization 1\nQuerying chaincode definition on peer0.org1 on channel &#39;testchannel&#39;...\nAttempting to Query committed status on peer0.org1, Retry after 3 seconds.\n+ peer lifecycle chaincode querycommitted --channelID testchannel --name basic\n+ res&#x3D;0\nCommitted chaincode definition for chaincode &#39;basic&#39; on channel &#39;testchannel&#39;:\nVersion: 1.0, Sequence: 1, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: [Org1MSP: true, Org2MSP: true]\nQuery chaincode definition successful on peer0.org1 on channel &#39;testchannel&#39;\nUsing organization 2\nQuerying chaincode definition on peer0.org2 on channel &#39;testchannel&#39;...\nAttempting to Query committed status on peer0.org2, Retry after 3 seconds.\n+ peer lifecycle chaincode querycommitted --channelID testchannel --name basic\n+ res&#x3D;0\nCommitted chaincode definition for chaincode &#39;basic&#39; on channel &#39;testchannel&#39;:\nVersion: 1.0, Sequence: 1, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: [Org1MSP: true, Org2MSP: true]\nQuery chaincode definition successful on peer0.org2 on channel &#39;testchannel&#39;\nChaincode initialization is not required\n合约交互在安装fabric中我们已经设置了fabric可执行文件的环境变量，需保证可以成功在test-network目录下使用peer命令。\n\n设置FABRIC_CFG_PATH变量，其下需包含core.yaml文件\nexport FABRIC_CFG_PATH&#x3D;$PWD&#x2F;..&#x2F;config&#x2F;\n# export FABRIC_CFG_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;fabric&#x2F;config&#x2F;\n\n设置其它Org1组织的变量依赖\n# Environment variables for Org1\n# CORE_PEER_TLS_ROOTCERT_FILE和CORE_PEER_MSPCONFIGPATH环境变量指向Org1的organizations文件夹中的身份证书。\nexport CORE_PEER_TLS_ENABLED&#x3D;true\nexport CORE_PEER_LOCALMSPID&#x3D;&quot;Org1MSP&quot;\nexport CORE_PEER_TLS_ROOTCERT_FILE&#x3D;$&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;ca.crt\nexport CORE_PEER_MSPCONFIGPATH&#x3D;$&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;users&#x2F;Admin@org1.example.com&#x2F;msp\nexport CORE_PEER_ADDRESS&#x3D;localhost:7051\n\n初始化chaincode\n$ peer chaincode invoke -o localhost:7050 \\\n--ordererTLSHostnameOverride orderer.example.com \\\n--tls --cafile $&#123;PWD&#125;&#x2F;organizations&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem -C testchannel -n basic \\\n--peerAddresses localhost:7051 \\\n--tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;ca.crt \\\n--peerAddresses localhost:9051 \\\n--tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;peers&#x2F;peer0.org2.example.com&#x2F;tls&#x2F;ca.crt -c &#39;&#123;&quot;function&quot;:&quot;InitLedger&quot;,&quot;Args&quot;:[]&#125;&#39;\n结果如下：\n$ export FABRIC_CFG_PATH&#x3D;$PWD&#x2F;..&#x2F;config&#x2F;\n$ export CORE_PEER_TLS_ENABLED&#x3D;true\n$ export CORE_PEER_LOCALMSPID&#x3D;&quot;Org1MSP&quot;\n$ export CORE_PEER_TLS_ROOTCERT_FILE&#x3D;$&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;ca.crt\nmagpie@Goserver:~&#x2F;fabric-samples01&#x2F;test-network$ export CORE_PEER_MSPCONFIGPATH&#x3D;$&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;users&#x2F;Admin@org1.example.com&#x2F;msp\ncalhost:7051magpie@Goserver:~&#x2F;fabric-samples01&#x2F;test-network$ export CORE_PEER_ADDRESS&#x3D;localhost:7051\nmagpie@Goserver:~&#x2F;fabric-samples01&#x2F;test-network$ peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;&#x2F;organizations&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem -C testchannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;peers&#x2F;peer0.org2.example.com&#x2F;tls&#x2F;ca.crt -c &#39;&#123;&quot;function&quot;:&quot;InitLedger&quot;,&quot;Args&quot;:[]&#125;&#39;\n2022-10-16 10:36:46.942 UTC [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200 \n\n\n\n查询账本资产列表\n$ peer chaincode query -C testchannel -n basic -c &#39;&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;&#39;\n\n\n\n\n修改账本资产\n$ peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;&#x2F;organizations&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem -C testchannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;peers&#x2F;peer0.org2.example.com&#x2F;tls&#x2F;ca.crt -c &#39;&#123;&quot;function&quot;:&quot;TransferAsset&quot;,&quot;Args&quot;:[&quot;asset6&quot;,&quot;Christopher&quot;]&#125;&#39;\n结果：\n$ peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;&#x2F;organizations&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem -C testchannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;peers&#x2F;peer0.org2.example.com&#x2F;tls&#x2F;ca.crt -c &#39;&#123;&quot;function&quot;:&quot;TransferAsset&quot;,&quot;Args&quot;:[&quot;asset6&quot;,&quot;Christopher&quot;]&#125;&#39;\n2022-10-16 10:42:29.089 UTC [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200 \n\n\n\n\n列出一个peer节点已经加入的通道清单\n$ peer channel list\nmagpie@Goserver:~&#x2F;fabric-samples01&#x2F;test-network$ peer channel list\n2022-10-16 14:26:16.298 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized\nChannels peers has joined: \ntestchannel\n\n\n\n\n获取通道testchannel的信息\n$ peer channel getinfo -c testchannel\n结果如下：\nmagpie@Goserver:~&#x2F;fabric-samples01&#x2F;test-network$ peer channel getinfo -c testchannel\n2022-10-16 14:31:52.163 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized\nBlockchain info: &#123;&quot;height&quot;:8,&quot;currentBlockHash&quot;:&quot;72kQArOj0SDdrgqwYFv2B9HdbQ5E265Nwia36EZ+7Jo&#x3D;&quot;,&quot;previousBlockHash&quot;:&quot;cQYpptj7CX1s1EklZdwyFZmnzcWyHOC9k40mSPTiY5w&#x3D;&quot;&#125;\n\n\n\n\n关闭网络\n$ cd ~&#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-samples&#x2F;test-network\n$ .&#x2F;network.sh down\n\n\n   \n运行结果：\n   \n   &#96;&#96;&#96;bash\n   $ .&#x2F;network.sh down\n   Stopping network\n   [+] Running 8&#x2F;8\n    ⠿ Container cli                         Removed                10.3s\n    ⠿ Container orderer.example.com         Removed                0.5s\n    ⠿ Container peer0.org2.example.com      Removed                0.9s\n    ⠿ Container peer0.org1.example.com      Removed                0.9s\n    ⠿ Volume docker_peer0.org2.example.com  Removed                0.0s\n    ⠿ Volume docker_orderer.example.com     Removed                0.0s\n    ⠿ Volume docker_peer0.org1.example.com  Removed                0.0s\n    ⠿ Network fabric_test                   Removed                0.1s\n   [+] Running 1&#x2F;0\n    ⠿ Volume docker_peer0.org3.example.com  Removed                0.0s\n   No containers available for deletion\n   Untagged: dev-peer0.org2.example.com-basic_1.0-3cfcf67978d6b3f7c5e0375660c995b21db19c4330946079afc3925ad7306881-6a8fb30d4a694b406bf4f255c7e84f22faeb3190e416cfb1d742ae192a406805:latest\n   Deleted: sha256:9a2ccd4b9b355452aa80ec6a5a2422205e79eaec58a14dffc519a437d563ed93\n   Deleted: sha256:619c528e2179e1db7a1ca828a03a6962d4a8627e7fd45fae0b2a9ed7f15285ac\n   Deleted: sha256:98b7d3308aded987a197bc9d9e2cd4bc5c730dd07a4403f493dd3a4fbdc79c15\n   Deleted: sha256:af81e4c9bb7329bb4a94e9ba1e9343bab6358bd1197e4299d5da03b463e5a50e\n   Untagged: dev-peer0.org1.example.com-basic_1.0-3cfcf67978d6b3f7c5e0375660c995b21db19c4330946079afc3925ad7306881-c6c446ce0bcf4e0229bc2660312ba359cb00358628cf199bfc1ae60f85b825a7:latest\n   Deleted: sha256:d0fca8cfd4daeffc3ae74111adb4ab77f84c9fdbff8b20ff6bc6f933894e0818\n   Deleted: sha256:a2cf358756a65de692e5c2871cf1fe9457f30761d66ea23e11f2d62efc82577b\n   Deleted: sha256:c82c7262395bbdc90459b31859782280a119a668e67dd7085044a86f342387a8\n   Deleted: sha256:7b236e3e0493109259b348a38c5603b27793dae1aada7150bd0f1459511db9c0\n截图如下：\n\n   该命令将停止并删除节点和链码容器、组织加密材料、删除之前运行的通道项目和docker卷，并从Docker Registry移除链码镜像。\n\n\n\n\n\n\n\n\n\n因为asset-transfer (basic)链码的背书策略需要交易同时被Org1和Org2签名，所以链码调用指令需要使用--peerAddresses标签来指向peer0.org1.example.com和peer0.org2.example.com；因为网络的TLS被开启，指令也需要用--tlsRootCertFiles标签指向每个peer节点的TLS证书。\n","slug":"区块链9","date":"2022-12-15T13:50:49.000Z","categories_index":"信管","tags_index":"区块链","author_index":"Algernon"},{"id":"d449e663f4d76a93a71a143c613d264d","title":"【PYTHON程序设计】期末作业","content":"\n电商版项目要求一、项目要求：\n获取京东商城中200条黑茶商品信息，保存在文本文件中。要求如下\n\n文件名：京东商城黑茶200条信息.txt\n\n每条商品保存如下信息，商品说明、商家名称、价格 ,评价数，包装与规格\n参考1\n\n\n\n\n\n\n\n\n\n\n\nhttps://blog.csdn.net/qq_45657504/article/details/117385625?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E4%BA%AC%E4%B8%9C%E7%88%AC%E8%99%AB&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-117385625.142^v67^control,201^v3^add_ask,213^v2^t3_esquery_v2&amp;spm=1018.2226.3001.4187\n2https://blog.csdn.net/qq_41799219/article/details/106203637\n3https://blog.csdn.net/weixin_45977690/article/details/119445488?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E4%BA%AC%E4%B8%9C%E7%88%AC%E8%99%AB&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-7-119445488.142^v67^control,201^v3^add_ask,213^v2^t3_esquery_v2&amp;spm=1018.2226.3001.4187\n#!&#x2F;usr&#x2F;bin&#x2F;env python\n# -*- coding:utf-8 -*-\n# @Time   : 2021&#x2F;8&#x2F;6\n\nimport requests\nfrom bs4 import BeautifulSoup\nimport xlwt\nimport time\n\n\nclass Config():\n    &#39;&#39;&#39;\n    PARAMETER_LABEL：需要根据爬取的商品详情界面的信息key进行修改，其中&#39;评论数&#39;是另一种方式获取的\n    TITLE_LABEL：PARAMETER_LABEL修改后excel的表头也做相应的修改\n    GOOD_LABEL：无需修改，默认该四个信息都爬取\n    need_list：能直接从html解析后的标签文件中获取的\n    &#39;&#39;&#39;\n    # excel表头\n    TITLE_LABEL &#x3D; [&#39;商品名称&#39;, &#39;价格&#39;, &#39;商家&#39;, &#39;商品详情地址&#39;, &#39;工艺&#39;, &#39;图案&#39;, &#39;风格&#39;, &#39;材质&#39;, &#39;形状&#39;, &#39;直径&#39;, &#39;评论数&#39;, &#39;标题材质关键字&#39;]\n    # html中对应TITLE_LABEL的key\n    GOOD_LABEL &#x3D; [&#39;name&#39;, &#39;price&#39;, &#39;shop&#39;, &#39;detail_addr&#39;]\n    # TITLE_LABEL中商品详情页（即点进单个商品界面）想爬取的数据在html中key，&#39;评论数&#39;一定要放在最后\n    PARAMETER_LABEL &#x3D; [&#39;工艺&#39;, &#39;图案&#39;, &#39;风格&#39;, &#39;材质&#39;, &#39;形状&#39;, &#39;直径&#39;, &#39;评论数&#39;]\n    # 将PARAMETER_LABEL去掉&#39;评论数&#39;即为need_list\n    need_list &#x3D; PARAMETER_LABEL[:-1]\n    # 将搜索页的key和单个商品详情页的key组合起来\n    TOTAL_LABEL &#x3D; GOOD_LABEL + PARAMETER_LABEL\n    # excel文件的保存路径\n    SAVE_PATH &#x3D; &#39;.&#x2F;test.xls&#39;\n\n    # 发送访问请问的head文件\n    # 每个电脑每个京东账号对应的head文件不同，获取方式参考帖子https:&#x2F;&#x2F;blog.csdn.net&#x2F;weixin_41998772&#x2F;article&#x2F;details&#x2F;106476166\n    headers &#x3D; &#123;\n        &#39;user-agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;91.0.4472.124 Safari&#x2F;537.36&#39;,\n        &#39;accept-language&#39;: &#39;zh-CN,zh;q&#x3D;0.9&#39;,\n    &#125;\n    # 搜索关键字\n    keyword &#x3D; str(input(&#39;请输入需要爬取的信息关键字：&#39;))\n    total &#x3D; input(&#39;请输入需要爬取页数: &#39;)\n\n\nclass Excel():\n    # 表格列数\n    TABLE_COL &#x3D; len(Config.TITLE_LABEL)\n    # 当前行数\n    _current_row &#x3D; 1\n\n    # 初始化，创建文件及写入title\n    def __init__(self, sheet_name&#x3D;&#39;sheet1&#39;):\n        self.write_work &#x3D; xlwt.Workbook(encoding&#x3D;&#39;ascii&#39;)\n        self.write_sheet &#x3D; self.write_work.add_sheet(sheet_name)\n        for item in range(len(Config.TITLE_LABEL)):\n            # 第一行写入excel表头\n            self.write_sheet.write(0, item, label&#x3D;Config.TITLE_LABEL[item])\n\n    # 写入内容\n    def write_content(self, content):\n        print(content)\n        if content[&#39;detail_addr&#39;] !&#x3D; &#39;无&#39;:  # 有时候没能获取的该商品的详情地址就跳过该商品\n            for item in range(self.TABLE_COL):\n                if (item &#x3D;&#x3D; self.TABLE_COL - 1) and (Config.TOTAL_LABEL[-1] &#x3D;&#x3D; &#39;标题材质关键字&#39;):\n                    self.write_sheet.write(self._current_row, item, label&#x3D;self.title_extract(content[&#39;name&#39;]))\n                else:\n                    self.write_sheet.write(self._current_row, item, label&#x3D;content[Config.TOTAL_LABEL[item]])\n            # 插入完一条记录后，换行\n            self._current_row +&#x3D; 1\n\n    # 保存文件\n    def save_file(self, file_url&#x3D;Config.SAVE_PATH):\n        try:\n            self.write_work.save(file_url)\n            print(&quot;文件保存成功！文件路径为：&quot; + file_url)\n        except IOError:\n            print(&quot;文件保存失败！&quot;)\n\n    # 提取商品标题中的材质关键词\n    def title_extract(self, title):\n        # 想要提取的关键词列表\n        materials &#x3D; [&#39;陶瓷&#39;, &#39;骨瓷&#39;, &#39;玻璃&#39;, &#39;搪瓷&#39;, &#39;木制&#39;, &#39;木质&#39;, &#39;不锈钢&#39;, &#39;塑料&#39;]\n        contain &#x3D; &#39;&#39;\n        count &#x3D; 0\n        for material in materials:\n            if material in title:\n                # 将最后的输入形式为 “陶瓷、木质、不锈钢”\n                if count &#x3D;&#x3D; 0:\n                    contain &#x3D; contain + material\n                    count +&#x3D; 1\n                else:\n                    contain &#x3D; contain + &#39;、&#39; + material\n                    count +&#x3D; 1\n        return contain\n\n\nclass Goods:\n    # 初始化方法\n    def __init__(self, li_info):\n        self.li_info &#x3D; li_info\n        self.good_info_dic &#x3D; &#123;&#125;\n\n    def acquire_comment(self, url):\n        &#39;&#39;&#39;\n        input:\n            url：商品详情地址(detail_addr)，形式如&#x2F;&#x2F;item.jd.com&#x2F;100007046969.html\n        rerurn:\n            comment_count：该商品的评论数,现在能爬取到的都是大约数，比如“2万+”,详细的评论总数京东暂时没显示在html信息中（2021.08.03）\n        &#39;&#39;&#39;\n        # 提取商品详情地址中的商品号\n        no &#x3D; url.split(&#39;com&#x2F;&#39;)[1].split(&#39;.html&#39;)[0]\n        comment_url &#x3D; &quot;https:&#x2F;&#x2F;club.jd.com&#x2F;comment&#x2F;productPageComments.action?callback&#x3D;fetchJSON_comment98&amp;productId&#x3D;&quot; + no + &quot;&amp;score&#x3D;0&amp;sortType&#x3D;5&amp;page&#x3D;0&amp;pageSize&#x3D;10&amp;isShadowSku&#x3D;0&amp;fold&#x3D;1&quot;\n        print(&quot;评论数获取链接：&quot;, comment_url)\n        response &#x3D; requests.get(comment_url, headers&#x3D;Config.headers)\n        time.sleep(2)\n        page &#x3D; response.content.decode(\n            &#39;gbk&#39;)  # type(page)为str，fetchJSON_comment98(dic),dic[&#39;productCommentSummary&#39;][&#39;commentCountStr&#39;]为评论数\n        # &quot;commentCountStr&quot;:&quot;2万+&quot;, 获取其中的2万+，暂时想到的办法是用split和replace对字符串进行切分后再替换不需要的字符\n        comment_count &#x3D; page.split(&quot;commentCountStr&quot;)[1].split(&#39;:&#39;)[1].split(&#39;,&#39;)[0].replace(&#39;&quot;&#39;, &#39;&#39;)\n        return comment_count\n\n    def add_product_parameter(self, need_list, url):\n        html &#x3D; get_html(&#39;https:&#39; + url)\n        soup &#x3D; BeautifulSoup(html, &#39;lxml&#39;)\n        time.sleep(2)\n        # 获取商品参数\n        parameters &#x3D; soup.find(&#39;ul&#39;, class_&#x3D;&#39;parameter2 p-parameter-list&#39;)\n        para_lists &#x3D; parameters.find_all(&#39;li&#39;)\n        name_lists &#x3D; []\n        para_text_lists &#x3D; []\n        for para in para_lists:\n            para_text &#x3D; para.get_text()\n            #print(para_text)\n            # para_text的形式：“商品名称：浩雅HY160”\n            name_lists.append(para_text.split(&quot;：&quot;)[0])  # name_lists保存单个商品详情页参数名称，如“商品名称”\n            para_text_lists.append(para_text.split(&quot;：&quot;)[1])  # para_text_lists保存参数名称对应的参数，如”浩雅HY160“\n        return_list &#x3D; []\n        # 按need_list中参数名称的顺序保存单个商品详情页中的爬虫数据\n        for need in need_list[:-1]:  # 评论数单独拎出来，need_list[-1]为“评论数”\n            try:\n                index &#x3D; name_lists.index(need)\n                return_list.append(para_text_lists[index])\n            except:\n                # 如果该商品商家并没有显示该参数名称的参数，那么excel中填充空值\n                return_list.append(&#39; &#39;)\n        # 最后一列填充评论数\n        return_list.append(self.acquire_comment(url))\n        return return_list\n\n    def find_attr(self, attr):\n        try:\n            if attr &#x3D;&#x3D; Config.GOOD_LABEL[0]:\n                # 商品名称\n                result &#x3D; self.li_info.find(class_&#x3D;&#39;p-name p-name-type-2&#39;).find(&#39;em&#39;).get_text()\n            elif attr &#x3D;&#x3D; Config.GOOD_LABEL[1]:\n                # 价格\n                result &#x3D; self.li_info.find(class_&#x3D;&#39;p-price&#39;).find(&#39;i&#39;).get_text()\n            elif attr &#x3D;&#x3D; Config.GOOD_LABEL[2]:\n                # 商家\n                result &#x3D; self.li_info.find(class_&#x3D;&#39;p-shop&#39;).find(&#39;a&#39;).get_text()\n            elif attr &#x3D;&#x3D; Config.GOOD_LABEL[3]:\n                # 商品详情地址\n                result &#x3D; self.li_info.find(class_&#x3D;&#39;p-name p-name-type-2&#39;).find(&#39;a&#39;)[&#39;href&#39;]\n\n                # 进入单个商品详情网页进行数据爬取，本代码所说的单个商品详情网页意思为从搜索页点进某一个商品页，比如https:&#x2F;&#x2F;item.jd.com&#x2F;100007046969.html\n                paras &#x3D; self.add_product_parameter(Config.PARAMETER_LABEL, result)\n                for i in range(len(paras)):\n                    para &#x3D; paras[i]\n                    self.good_info_dic.setdefault(Config.PARAMETER_LABEL[i], para)\n\n        except AttributeError:\n            result &#x3D; &#39;无&#39;\n        self.good_info_dic.setdefault(attr, result)  # 集合setdefault\n\n    # 添加商品信息\n    def add_good_info(self):\n        for item in Config.GOOD_LABEL:\n            self.find_attr(item)\n\n    # 获取产品列表\n    def get_good(self):\n        return self.good_info_dic\n\n\ndef get_html(url, currentPage&#x3D;None, pageSize&#x3D;None):\n    if pageSize:\n        print(&quot;--&gt; 正在获取网站第 &quot; + str(currentPage) + &quot;页信息&quot;)\n        if currentPage !&#x3D; 1:\n            url &#x3D; url + &#39;&amp;page&#x3D;&#39; + str(currentPage) + &#39;&amp;s&#x3D;&#39; + str(pageSize) + &#39;&amp;click&#x3D;0&#39;\n\n    response &#x3D; requests.get(url, headers&#x3D;Config.headers)  # 请求访问网站\n    time.sleep(2)\n    if response.status_code &#x3D;&#x3D; 200:\n        html &#x3D; response.text  # 获取网页源码\n        return html  # 返回网页源码\n    else:\n        print(&quot;获取网站信息失败！&quot;)\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    &#39;&#39;&#39;\n    一定需要修改的是Config中的headers文件，每个电脑每个京东账号对应的文件不同\n    修改完headers后可以输入关键词为“餐具碗”，页数“2”，查看下爬虫结果\n    可根据自己的需求修改Config中的参数\n    &#39;&#39;&#39;\n    # 创建文件\n    excel &#x3D; Excel()\n\n    config &#x3D; Config()\n    # 搜索地址\n    search_url &#x3D; &#39;https:&#x2F;&#x2F;search.jd.com&#x2F;Search?keyword&#x3D;&#39; + config.keyword + &#39;&amp;enc&#x3D;utf-8&amp;psort&#x3D;3&#39;\n    page &#x3D; &#123;\n        &#39;total&#39;: 0,  # 总页数\n        &#39;currentPage&#39;: 1,  # 当前页数\n        &#39;pageSize&#39;: 0  # 每页显示多少条\n    &#125;\n\n    if not config.total.isdigit():\n        print(&quot;非法字符，程序退出！&quot;)\n        exit(0)\n\n    page[&#39;total&#39;] &#x3D; eval(config.total)\n    for i in range(page[&#39;total&#39;]):\n        # 初始化BeautifulSoup库,并设置解析器\n        soup &#x3D; BeautifulSoup(get_html(search_url, page[&#39;currentPage&#39;], page[&#39;currentPage&#39;] * page[&#39;pageSize&#39;]), &#39;lxml&#39;)\n        time.sleep(2)  # 为了防止爬取太快被京东服务器拦截，在每次解析网页操作后强制休息2秒\n\n        # 商品列表\n        goods_list &#x3D; soup.find_all(&#39;li&#39;, class_&#x3D;&#39;gl-item&#39;)\n        print(&quot;分析到第&quot; + str(page[&#39;currentPage&#39;]) + &#39;页共有&#39; + str(len(goods_list)) + &#39;条商品信息&#39;)\n        for li in goods_list:  # 遍历父节点\n            try:\n                goods &#x3D; Goods(li)\n                # 添加信息\n                goods.add_good_info()\n                # 获取信息\n                good_info &#x3D; goods.get_good()\n                # 写入excel\n                excel.write_content(good_info)\n            except:\n                print(&quot;商品信息获取失败&quot;)\n                break\n\n        page[&#39;currentPage&#39;] &#x3D; page[&#39;currentPage&#39;] + 1\n        page[&#39;pageSize&#39;] &#x3D; len(goods_list) * page[&#39;currentPage&#39;]\n\n    # 保存excel文件\n    excel.save_file(config.SAVE_PATH)\n\n\nD:\\coder\\randomnumbers\\venv\\Scripts\\python.exe D:&#x2F;coder&#x2F;randomnumbers&#x2F;chengxusheji.py\n请输入需要爬取的信息关键字：黑茶\n请输入需要爬取页数: 5\n分析到第1页共有30条商品信息\n评论数获取链接： https:&#x2F;&#x2F;club.jd.com&#x2F;comment&#x2F;productPageComments.action?callback&#x3D;fetchJSON_comment98&amp;productId&#x3D;100014774315&amp;score&#x3D;0&amp;sortType&#x3D;5&amp;page&#x3D;0&amp;pageSize&#x3D;10&amp;isShadowSku&#x3D;0&amp;fold&#x3D;1\n&#123;&#39;name&#39;: &#39;\\n中粮集团 中茶六堡茶广西梧州窖藏特级陈香箩筐装500g中华老字号&#39;, &#39;price&#39;: &#39;253.30&#39;, &#39;shop&#39;: &#39;中茶京东自营旗舰店&#39;, &#39;工艺&#39;: &#39; &#39;, &#39;图案&#39;: &#39; &#39;, &#39;风格&#39;: &#39; &#39;, &#39;材质&#39;: &#39; &#39;, &#39;形状&#39;: &#39; &#39;, &#39;直径&#39;: &#39; &#39;, &#39;评论数&#39;: &#39;2万+&#39;, &#39;detail_addr&#39;: &#39;&#x2F;&#x2F;item.jd.com&#x2F;100014774315.html&#39;&#125;\n商品信息获取失败\n--&gt; 正在获取网站第 2页信息\n分析到第2页共有30条商品信息\n评论数获取链接： https:&#x2F;&#x2F;club.jd.com&#x2F;comment&#x2F;productPageComments.action?callback&#x3D;fetchJSON_comment98&amp;productId&#x3D;10036336320366&amp;score&#x3D;0&amp;sortType&#x3D;5&amp;page&#x3D;0&amp;pageSize&#x3D;10&amp;isShadowSku&#x3D;0&amp;fold&#x3D;1\n&#123;&#39;name&#39;: &#39;白沙溪 湖南老字号安化黑茶正宗千两茶叶36.25kg花卷茶 当年千两茶黄白布袋二选一&#39;, &#39;price&#39;: &#39;5620.00&#39;, &#39;shop&#39;: &#39;白沙溪官方旗舰店&#39;, &#39;工艺&#39;: &#39; &#39;, &#39;图案&#39;: &#39; &#39;, &#39;风格&#39;: &#39; &#39;, &#39;材质&#39;: &#39; &#39;, &#39;形状&#39;: &#39; &#39;, &#39;直径&#39;: &#39; &#39;, &#39;评论数&#39;: &#39;200+&#39;, &#39;detail_addr&#39;: &#39;&#x2F;&#x2F;item.jd.com&#x2F;10036336320366.html&#39;&#125;\n商品信息获取失败\n--&gt; 正在获取网站第 3页信息\n分析到第3页共有30条商品信息\n评论数获取链接： https:&#x2F;&#x2F;club.jd.com&#x2F;comment&#x2F;productPageComments.action?callback&#x3D;fetchJSON_comment98&amp;productId&#x3D;51934762257&amp;score&#x3D;0&amp;sortType&#x3D;5&amp;page&#x3D;0&amp;pageSize&#x3D;10&amp;isShadowSku&#x3D;0&amp;fold&#x3D;1\n&#123;&#39;name&#39;: &#39;三鹤六堡茶【思源】黑茶六堡茶500g礼盒装特级&#39;, &#39;price&#39;: &#39;1198.00&#39;, &#39;shop&#39;: &#39;三鹤茶叶官方旗舰店&#39;, &#39;工艺&#39;: &#39; &#39;, &#39;图案&#39;: &#39; &#39;, &#39;风格&#39;: &#39; &#39;, &#39;材质&#39;: &#39; &#39;, &#39;形状&#39;: &#39; &#39;, &#39;直径&#39;: &#39; &#39;, &#39;评论数&#39;: &#39;58&#39;, &#39;detail_addr&#39;: &#39;&#x2F;&#x2F;item.jd.com&#x2F;51934762257.html&#39;&#125;\n商品信息获取失败\n--&gt; 正在获取网站第 4页信息\n分析到第4页共有30条商品信息\n评论数获取链接： https:&#x2F;&#x2F;club.jd.com&#x2F;comment&#x2F;productPageComments.action?callback&#x3D;fetchJSON_comment98&amp;productId&#x3D;10026360368241&amp;score&#x3D;0&amp;sortType&#x3D;5&amp;page&#x3D;0&amp;pageSize&#x3D;10&amp;isShadowSku&#x3D;0&amp;fold&#x3D;1\n&#123;&#39;name&#39;: &#39;白沙溪 湖南老字号安化黑茶茯砖黑砖千两茶金奖五合一合集年货伴手礼盒210g 5大金奖产品合集&#39;, &#39;price&#39;: &#39;283.00&#39;, &#39;shop&#39;: &#39;白沙溪官方旗舰店&#39;, &#39;工艺&#39;: &#39; &#39;, &#39;图案&#39;: &#39; &#39;, &#39;风格&#39;: &#39; &#39;, &#39;材质&#39;: &#39; &#39;, &#39;形状&#39;: &#39; &#39;, &#39;直径&#39;: &#39; &#39;, &#39;评论数&#39;: &#39;200+&#39;, &#39;detail_addr&#39;: &#39;&#x2F;&#x2F;item.jd.com&#x2F;10026360368241.html&#39;&#125;\n商品信息获取失败\n--&gt; 正在获取网站第 5页信息\n分析到第5页共有30条商品信息\n评论数获取链接： https:&#x2F;&#x2F;club.jd.com&#x2F;comment&#x2F;productPageComments.action?callback&#x3D;fetchJSON_comment98&amp;productId&#x3D;65050901858&amp;score&#x3D;0&amp;sortType&#x3D;5&amp;page&#x3D;0&amp;pageSize&#x3D;10&amp;isShadowSku&#x3D;0&amp;fold&#x3D;1\n&#123;&#39;name&#39;: &#39;【2018年陈化 2019年生产】中茶牌茶叶 梧州六堡茶黑茶 纪念中茶公司成立70周年特级散茶 7kg&#x2F;箩&#39;, &#39;price&#39;: &#39;3888.00&#39;, &#39;shop&#39;: &#39;中茶思平专卖店&#39;, &#39;工艺&#39;: &#39; &#39;, &#39;图案&#39;: &#39; &#39;, &#39;风格&#39;: &#39; &#39;, &#39;材质&#39;: &#39; &#39;, &#39;形状&#39;: &#39; &#39;, &#39;直径&#39;: &#39; &#39;, &#39;评论数&#39;: &#39;17&#39;, &#39;detail_addr&#39;: &#39;&#x2F;&#x2F;item.jd.com&#x2F;65050901858.html&#39;&#125;\n商品信息获取失败\n文件保存成功！文件路径为：.&#x2F;test.xls\n\n进程已结束,退出代码0\n\ncurl &#39;https:&#x2F;&#x2F;www.jd.com&#x2F;?cu&#x3D;true&amp;utm_source&#x3D;www.baidu.com&amp;utm_medium&#x3D;tuiguang&amp;utm_campaign&#x3D;t_1003608409_&amp;utm_term&#x3D;cf957f93d4bf408397f557bee614de76&#39; \\\n  -H &#39;Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9&#39; \\\n  -H &#39;Accept-Language: zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8,en-GB;q&#x3D;0.7,en-US;q&#x3D;0.6&#39; \\\n  -H &#39;Cache-Control: max-age&#x3D;0&#39; \\\n  -H &#39;Connection: keep-alive&#39; \\\n  -H &#39;Cookie: __jdu&#x3D;164706084910516181292; shshshfpa&#x3D;ac27b0e9-916f-4600-a8d8-59c831a1a907-1652529930; shshshfpb&#x3D;noLYaOxvik5URLA2R6uzCrA; o2State&#x3D;&#123;%22webp%22:true%2C%22avif%22:false&#125;; areaId&#x3D;18; PCSYCityID&#x3D;CN_430000_430100_0; ipLoc-djd&#x3D;18-1482-48942-49058; shshshfp&#x3D;a354b74eee97acd3e5dc7a34609b535b; unpl&#x3D;JF8EALhnNSttChxcAR1VExBFTg4DW1wBSR8FOGMBUg4MH1MFHldPFBd7XlVdXhRLFB9uZxRUXVNIXA4ZBSsSEXtdVV9fD0oeBm5vNWQIW0lUAh9XSBZ-SzMgGyZ_DVcCbjF4BG1bS2QEKwIcFxZKWlVXWABLFgdvYAVdXVtDVzUaMhsaFHttZFtdCUoWC2hmAlVtWXtWBBoHHxMXSl5TbhZmSloDaGIDVVpZQlENGwMfEhdLVFRdVQt7FjNs; TrackID&#x3D;1LktDmeIYlq4RS62lp2WcZb3A2-LwnNYhz18i6aI5FlLUajbBiJd_FeCpEJdafoaAPnCSSoC61PQXGju4oI3qnbAT8S3MSqGOq1woyIirMtMOuV3qGlFl6X9MKqjmZsR0; thor&#x3D;70AB060D7F75310BAF0CE227144B45F89EA3FD829A7B37974106A4510DBABBD2D2ADA0B984BAD527C89EEFE0750ED95C6CF4CAF90C42F45F37589244950D233F7572E86297E56A589A289E8CFF4B7241DFA33FBE41392AEF2458EF8BF3F6DBBFA4315A0D22232B878BA867077580DA478BD559B930D575EA37D30A52757C4E6E81F39D4A6B7520F2C1F455BFE890AC341A55920740F5682FF572C70CF84017F8; pinId&#x3D;3o3XfM8mzX8mD44K9IZ3p7V9-x-f3wj7; pin&#x3D;jd_7701e3820cb18; unick&#x3D;jd_7701e3820cb18; ceshi3.com&#x3D;000; _tp&#x3D;s1jQhhQY1klVAfaPuL5OvGH1I1J7VanZuJjdCQPVNmY%3D; _pst&#x3D;jd_7701e3820cb18; __jda&#x3D;76161171.164706084910516181292.1647060849.1669819802.1669865317.7; __jdb&#x3D;76161171.5.164706084910516181292|7.1669865317; __jdc&#x3D;76161171; __jdv&#x3D;76161171|www.baidu.com|t_1003608409_|tuiguang|cf957f93d4bf408397f557bee614de76|1669865490795; shshshsID&#x3D;045ff225b6736e87dfb49f1c52b1bf4e_3_1669865502177; 3AB9D23F7A4B3C9B&#x3D;7UVB2WFZM5E6PVGD5ATMSSLYVFBGPQ4W2DNVAX6BTX5UOCCW3VIFMRPFCGFJIO7CXKNHL4GS3JSG5VMKH7XD6HMMHI&#39; \\\n  -H &#39;Referer: https:&#x2F;&#x2F;passport.jd.com&#x2F;&#39; \\\n  -H &#39;Sec-Fetch-Dest: document&#39; \\\n  -H &#39;Sec-Fetch-Mode: navigate&#39; \\\n  -H &#39;Sec-Fetch-Site: same-site&#39; \\\n  -H &#39;Sec-Fetch-User: ?1&#39; \\\n  -H &#39;Upgrade-Insecure-Requests: 1&#39; \\\n  -H &#39;User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;107.0.0.0 Safari&#x2F;537.36 Edg&#x2F;107.0.1418.62&#39; \\\n  -H &#39;sec-ch-ua: &quot;Microsoft Edge&quot;;v&#x3D;&quot;107&quot;, &quot;Chromium&quot;;v&#x3D;&quot;107&quot;, &quot;Not&#x3D;A?Brand&quot;;v&#x3D;&quot;24&quot;&#39; \\\n  -H &#39;sec-ch-ua-mobile: ?0&#39; \\\n  -H &#39;sec-ch-ua-platform: &quot;Windows&quot;&#39; \\\n  --compressed\n获得headers\n\n\n\n\n\n\n\n\nhttps://curlconverter.com/\n\nimport requests\n\ncookies &#x3D; &#123;\n    &#39;__jdu&#39;: &#39;164706084910516181292&#39;,\n    &#39;shshshfpa&#39;: &#39;ac27b0e9-916f-4600-a8d8-59c831a1a907-1652529930&#39;,\n    &#39;shshshfpb&#39;: &#39;noLYaOxvik5URLA2R6uzCrA&#39;,\n    &#39;o2State&#39;: &#39;&#123;%22webp%22:true%2C%22avif%22:false&#125;&#39;,\n    &#39;areaId&#39;: &#39;18&#39;,\n    &#39;PCSYCityID&#39;: &#39;CN_430000_430100_0&#39;,\n    &#39;ipLoc-djd&#39;: &#39;18-1482-48942-49058&#39;,\n    &#39;shshshfp&#39;: &#39;a354b74eee97acd3e5dc7a34609b535b&#39;,\n    &#39;unpl&#39;: &#39;JF8EALhnNSttChxcAR1VExBFTg4DW1wBSR8FOGMBUg4MH1MFHldPFBd7XlVdXhRLFB9uZxRUXVNIXA4ZBSsSEXtdVV9fD0oeBm5vNWQIW0lUAh9XSBZ-SzMgGyZ_DVcCbjF4BG1bS2QEKwIcFxZKWlVXWABLFgdvYAVdXVtDVzUaMhsaFHttZFtdCUoWC2hmAlVtWXtWBBoHHxMXSl5TbhZmSloDaGIDVVpZQlENGwMfEhdLVFRdVQt7FjNs&#39;,\n    &#39;TrackID&#39;: &#39;1LktDmeIYlq4RS62lp2WcZb3A2-LwnNYhz18i6aI5FlLUajbBiJd_FeCpEJdafoaAPnCSSoC61PQXGju4oI3qnbAT8S3MSqGOq1woyIirMtMOuV3qGlFl6X9MKqjmZsR0&#39;,\n    &#39;thor&#39;: &#39;70AB060D7F75310BAF0CE227144B45F89EA3FD829A7B37974106A4510DBABBD2D2ADA0B984BAD527C89EEFE0750ED95C6CF4CAF90C42F45F37589244950D233F7572E86297E56A589A289E8CFF4B7241DFA33FBE41392AEF2458EF8BF3F6DBBFA4315A0D22232B878BA867077580DA478BD559B930D575EA37D30A52757C4E6E81F39D4A6B7520F2C1F455BFE890AC341A55920740F5682FF572C70CF84017F8&#39;,\n    &#39;pinId&#39;: &#39;3o3XfM8mzX8mD44K9IZ3p7V9-x-f3wj7&#39;,\n    &#39;pin&#39;: &#39;jd_7701e3820cb18&#39;,\n    &#39;unick&#39;: &#39;jd_7701e3820cb18&#39;,\n    &#39;ceshi3.com&#39;: &#39;000&#39;,\n    &#39;_tp&#39;: &#39;s1jQhhQY1klVAfaPuL5OvGH1I1J7VanZuJjdCQPVNmY%3D&#39;,\n    &#39;_pst&#39;: &#39;jd_7701e3820cb18&#39;,\n    &#39;__jda&#39;: &#39;76161171.164706084910516181292.1647060849.1669819802.1669865317.7&#39;,\n    &#39;__jdb&#39;: &#39;76161171.5.164706084910516181292|7.1669865317&#39;,\n    &#39;__jdc&#39;: &#39;76161171&#39;,\n    &#39;__jdv&#39;: &#39;76161171|www.baidu.com|t_1003608409_|tuiguang|cf957f93d4bf408397f557bee614de76|1669865490795&#39;,\n    &#39;shshshsID&#39;: &#39;045ff225b6736e87dfb49f1c52b1bf4e_3_1669865502177&#39;,\n    &#39;3AB9D23F7A4B3C9B&#39;: &#39;7UVB2WFZM5E6PVGD5ATMSSLYVFBGPQ4W2DNVAX6BTX5UOCCW3VIFMRPFCGFJIO7CXKNHL4GS3JSG5VMKH7XD6HMMHI&#39;,\n&#125;\n\nheaders &#x3D; &#123;\n    &#39;Accept&#39;: &#39;text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9&#39;,\n    &#39;Accept-Language&#39;: &#39;zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8,en-GB;q&#x3D;0.7,en-US;q&#x3D;0.6&#39;,\n    &#39;Cache-Control&#39;: &#39;max-age&#x3D;0&#39;,\n    &#39;Connection&#39;: &#39;keep-alive&#39;,\n    # Requests sorts cookies&#x3D; alphabetically\n    # &#39;Cookie&#39;: &#39;__jdu&#x3D;164706084910516181292; shshshfpa&#x3D;ac27b0e9-916f-4600-a8d8-59c831a1a907-1652529930; shshshfpb&#x3D;noLYaOxvik5URLA2R6uzCrA; o2State&#x3D;&#123;%22webp%22:true%2C%22avif%22:false&#125;; areaId&#x3D;18; PCSYCityID&#x3D;CN_430000_430100_0; ipLoc-djd&#x3D;18-1482-48942-49058; shshshfp&#x3D;a354b74eee97acd3e5dc7a34609b535b; unpl&#x3D;JF8EALhnNSttChxcAR1VExBFTg4DW1wBSR8FOGMBUg4MH1MFHldPFBd7XlVdXhRLFB9uZxRUXVNIXA4ZBSsSEXtdVV9fD0oeBm5vNWQIW0lUAh9XSBZ-SzMgGyZ_DVcCbjF4BG1bS2QEKwIcFxZKWlVXWABLFgdvYAVdXVtDVzUaMhsaFHttZFtdCUoWC2hmAlVtWXtWBBoHHxMXSl5TbhZmSloDaGIDVVpZQlENGwMfEhdLVFRdVQt7FjNs; TrackID&#x3D;1LktDmeIYlq4RS62lp2WcZb3A2-LwnNYhz18i6aI5FlLUajbBiJd_FeCpEJdafoaAPnCSSoC61PQXGju4oI3qnbAT8S3MSqGOq1woyIirMtMOuV3qGlFl6X9MKqjmZsR0; thor&#x3D;70AB060D7F75310BAF0CE227144B45F89EA3FD829A7B37974106A4510DBABBD2D2ADA0B984BAD527C89EEFE0750ED95C6CF4CAF90C42F45F37589244950D233F7572E86297E56A589A289E8CFF4B7241DFA33FBE41392AEF2458EF8BF3F6DBBFA4315A0D22232B878BA867077580DA478BD559B930D575EA37D30A52757C4E6E81F39D4A6B7520F2C1F455BFE890AC341A55920740F5682FF572C70CF84017F8; pinId&#x3D;3o3XfM8mzX8mD44K9IZ3p7V9-x-f3wj7; pin&#x3D;jd_7701e3820cb18; unick&#x3D;jd_7701e3820cb18; ceshi3.com&#x3D;000; _tp&#x3D;s1jQhhQY1klVAfaPuL5OvGH1I1J7VanZuJjdCQPVNmY%3D; _pst&#x3D;jd_7701e3820cb18; __jda&#x3D;76161171.164706084910516181292.1647060849.1669819802.1669865317.7; __jdb&#x3D;76161171.5.164706084910516181292|7.1669865317; __jdc&#x3D;76161171; __jdv&#x3D;76161171|www.baidu.com|t_1003608409_|tuiguang|cf957f93d4bf408397f557bee614de76|1669865490795; shshshsID&#x3D;045ff225b6736e87dfb49f1c52b1bf4e_3_1669865502177; 3AB9D23F7A4B3C9B&#x3D;7UVB2WFZM5E6PVGD5ATMSSLYVFBGPQ4W2DNVAX6BTX5UOCCW3VIFMRPFCGFJIO7CXKNHL4GS3JSG5VMKH7XD6HMMHI&#39;,\n    &#39;Referer&#39;: &#39;https:&#x2F;&#x2F;passport.jd.com&#x2F;&#39;,\n    &#39;Sec-Fetch-Dest&#39;: &#39;document&#39;,\n    &#39;Sec-Fetch-Mode&#39;: &#39;navigate&#39;,\n    &#39;Sec-Fetch-Site&#39;: &#39;same-site&#39;,\n    &#39;Sec-Fetch-User&#39;: &#39;?1&#39;,\n    &#39;Upgrade-Insecure-Requests&#39;: &#39;1&#39;,\n    &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;107.0.0.0 Safari&#x2F;537.36 Edg&#x2F;107.0.1418.62&#39;,\n    &#39;sec-ch-ua&#39;: &#39;&quot;Microsoft Edge&quot;;v&#x3D;&quot;107&quot;, &quot;Chromium&quot;;v&#x3D;&quot;107&quot;, &quot;Not&#x3D;A?Brand&quot;;v&#x3D;&quot;24&quot;&#39;,\n    &#39;sec-ch-ua-mobile&#39;: &#39;?0&#39;,\n    &#39;sec-ch-ua-platform&#39;: &#39;&quot;Windows&quot;&#39;,\n&#125;\n\nparams &#x3D; &#123;\n    &#39;cu&#39;: &#39;true&#39;,\n    &#39;utm_source&#39;: &#39;www.baidu.com&#39;,\n    &#39;utm_medium&#39;: &#39;tuiguang&#39;,\n    &#39;utm_campaign&#39;: &#39;t_1003608409_&#39;,\n    &#39;utm_term&#39;: &#39;cf957f93d4bf408397f557bee614de76&#39;,\n&#125;\n\nresponse &#x3D; requests.get(&#39;https:&#x2F;&#x2F;www.jd.com&#x2F;&#39;, params&#x3D;params, cookies&#x3D;cookies, headers&#x3D;headers)\n实操PART1代码#!&#x2F;usr&#x2F;bin&#x2F;env python\n# -*- coding:utf-8 -*-\n# @Time   : 2021&#x2F;8&#x2F;6\n\nimport requests\nfrom bs4 import BeautifulSoup\nimport xlwt\nimport time\n\n\nclass Config():\n    &#39;&#39;&#39;\n    PARAMETER_LABEL：需要根据爬取的商品详情界面的信息key进行修改，其中&#39;评论数&#39;是另一种方式获取的\n    TITLE_LABEL：PARAMETER_LABEL修改后excel的表头也做相应的修改\n    GOOD_LABEL：无需修改，默认该四个信息都爬取\n    need_list：能直接从html解析后的标签文件中获取的\n    &#39;&#39;&#39;\n    # excel表头\n    #TITLE_LABEL &#x3D; [&#39;商品名称&#39;, &#39;价格&#39;, &#39;商家&#39;, &#39;商品详情地址&#39;, &#39;工艺&#39;, &#39;图案&#39;, &#39;风格&#39;, &#39;材质&#39;, &#39;形状&#39;, &#39;直径&#39;, &#39;评论数&#39;, &#39;标题材质关键字&#39;]\n    TITLE_LABEL &#x3D; [&#39;商品名称&#39;, &#39;价格&#39;, &#39;商家&#39;, &#39;商品详情地址&#39;, &#39;评论数&#39;]\n    # html中对应TITLE_LABEL的key\n    GOOD_LABEL &#x3D; [&#39;name&#39;, &#39;price&#39;, &#39;shop&#39;, &#39;detail_addr&#39;]\n    # TITLE_LABEL中商品详情页（即点进单个商品界面）想爬取的数据在html中key，&#39;评论数&#39;一定要放在最后\n    PARAMETER_LABEL &#x3D; [ &#39;评论数&#39;]\n    # 将PARAMETER_LABEL去掉&#39;评论数&#39;即为need_list\n    need_list &#x3D; PARAMETER_LABEL[:-1]\n    # 将搜索页的key和单个商品详情页的key组合起来\n    TOTAL_LABEL &#x3D; GOOD_LABEL + PARAMETER_LABEL\n    # excel文件的保存路径\n    SAVE_PATH &#x3D; &#39;.&#x2F;test.xls&#39;\n\n    # 发送访问请问的head文件\n    # 每个电脑每个京东账号对应的head文件不同，获取方式参考帖子https:&#x2F;&#x2F;blog.csdn.net&#x2F;weixin_41998772&#x2F;article&#x2F;details&#x2F;106476166\n    #\n    headers &#x3D; &#123;\n    &#39;Accept&#39;: &#39;text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9&#39;,\n    &#39;Accept-Language&#39;: &#39;zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8,en-GB;q&#x3D;0.7,en-US;q&#x3D;0.6&#39;,\n    &#39;Cache-Control&#39;: &#39;max-age&#x3D;0&#39;,\n    &#39;Connection&#39;: &#39;keep-alive&#39;,\n    # Requests sorts cookies&#x3D; alphabetically\n    # &#39;Cookie&#39;: &#39;__jdu&#x3D;164706084910516181292; shshshfpa&#x3D;ac27b0e9-916f-4600-a8d8-59c831a1a907-1652529930; shshshfpb&#x3D;noLYaOxvik5URLA2R6uzCrA; o2State&#x3D;&#123;%22webp%22:true%2C%22avif%22:false&#125;; areaId&#x3D;18; PCSYCityID&#x3D;CN_430000_430100_0; ipLoc-djd&#x3D;18-1482-48942-49058; shshshfp&#x3D;a354b74eee97acd3e5dc7a34609b535b; unpl&#x3D;JF8EALhnNSttChxcAR1VExBFTg4DW1wBSR8FOGMBUg4MH1MFHldPFBd7XlVdXhRLFB9uZxRUXVNIXA4ZBSsSEXtdVV9fD0oeBm5vNWQIW0lUAh9XSBZ-SzMgGyZ_DVcCbjF4BG1bS2QEKwIcFxZKWlVXWABLFgdvYAVdXVtDVzUaMhsaFHttZFtdCUoWC2hmAlVtWXtWBBoHHxMXSl5TbhZmSloDaGIDVVpZQlENGwMfEhdLVFRdVQt7FjNs; TrackID&#x3D;1LktDmeIYlq4RS62lp2WcZb3A2-LwnNYhz18i6aI5FlLUajbBiJd_FeCpEJdafoaAPnCSSoC61PQXGju4oI3qnbAT8S3MSqGOq1woyIirMtMOuV3qGlFl6X9MKqjmZsR0; thor&#x3D;70AB060D7F75310BAF0CE227144B45F89EA3FD829A7B37974106A4510DBABBD2D2ADA0B984BAD527C89EEFE0750ED95C6CF4CAF90C42F45F37589244950D233F7572E86297E56A589A289E8CFF4B7241DFA33FBE41392AEF2458EF8BF3F6DBBFA4315A0D22232B878BA867077580DA478BD559B930D575EA37D30A52757C4E6E81F39D4A6B7520F2C1F455BFE890AC341A55920740F5682FF572C70CF84017F8; pinId&#x3D;3o3XfM8mzX8mD44K9IZ3p7V9-x-f3wj7; pin&#x3D;jd_7701e3820cb18; unick&#x3D;jd_7701e3820cb18; ceshi3.com&#x3D;000; _tp&#x3D;s1jQhhQY1klVAfaPuL5OvGH1I1J7VanZuJjdCQPVNmY%3D; _pst&#x3D;jd_7701e3820cb18; __jda&#x3D;76161171.164706084910516181292.1647060849.1669819802.1669865317.7; __jdb&#x3D;76161171.5.164706084910516181292|7.1669865317; __jdc&#x3D;76161171; __jdv&#x3D;76161171|www.baidu.com|t_1003608409_|tuiguang|cf957f93d4bf408397f557bee614de76|1669865490795; shshshsID&#x3D;045ff225b6736e87dfb49f1c52b1bf4e_3_1669865502177; 3AB9D23F7A4B3C9B&#x3D;7UVB2WFZM5E6PVGD5ATMSSLYVFBGPQ4W2DNVAX6BTX5UOCCW3VIFMRPFCGFJIO7CXKNHL4GS3JSG5VMKH7XD6HMMHI&#39;,\n    &#39;Referer&#39;: &#39;https:&#x2F;&#x2F;passport.jd.com&#x2F;&#39;,\n    &#39;Sec-Fetch-Dest&#39;: &#39;document&#39;,\n    &#39;Sec-Fetch-Mode&#39;: &#39;navigate&#39;,\n    &#39;Sec-Fetch-Site&#39;: &#39;same-site&#39;,\n    &#39;Sec-Fetch-User&#39;: &#39;?1&#39;,\n    &#39;Upgrade-Insecure-Requests&#39;: &#39;1&#39;,\n    &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;107.0.0.0 Safari&#x2F;537.36 Edg&#x2F;107.0.1418.62&#39;,\n    &#39;sec-ch-ua&#39;: &#39;&quot;Microsoft Edge&quot;;v&#x3D;&quot;107&quot;, &quot;Chromium&quot;;v&#x3D;&quot;107&quot;, &quot;Not&#x3D;A?Brand&quot;;v&#x3D;&quot;24&quot;&#39;,\n    &#39;sec-ch-ua-mobile&#39;: &#39;?0&#39;,\n    &#39;sec-ch-ua-platform&#39;: &#39;&quot;Windows&quot;&#39;,\n    &#125;\n    # 搜索关键字\n    keyword &#x3D; str(input(&#39;请输入需要爬取的信息关键字：&#39;))\n    total &#x3D; input(&#39;请输入需要爬取页数: &#39;)\n\n\nclass Excel():\n    # 表格列数\n    TABLE_COL &#x3D; len(Config.TITLE_LABEL)\n    # 当前行数\n    _current_row &#x3D; 1\n\n    # 初始化，创建文件及写入title\n    def __init__(self, sheet_name&#x3D;&#39;sheet1&#39;):\n        self.write_work &#x3D; xlwt.Workbook(encoding&#x3D;&#39;ascii&#39;)\n        self.write_sheet &#x3D; self.write_work.add_sheet(sheet_name)\n        for item in range(len(Config.TITLE_LABEL)):\n            # 第一行写入excel表头\n            self.write_sheet.write(0, item, label&#x3D;Config.TITLE_LABEL[item])\n\n    # 写入内容\n    def write_content(self, content):\n        print(content)\n        if content[&#39;detail_addr&#39;] !&#x3D; &#39;无&#39;:  # 有时候没能获取的该商品的详情地址就跳过该商品\n            for item in range(self.TABLE_COL):\n                if (item &#x3D;&#x3D; self.TABLE_COL - 1) and (Config.TOTAL_LABEL[-1] &#x3D;&#x3D; &#39;标题材质关键字&#39;):\n                    self.write_sheet.write(self._current_row, item, label&#x3D;self.title_extract(content[&#39;name&#39;]))\n                else:\n                    self.write_sheet.write(self._current_row, item, label&#x3D;content[Config.TOTAL_LABEL[item]])\n            # 插入完一条记录后，换行\n            self._current_row +&#x3D; 1\n\n    # 保存文件\n    def save_file(self, file_url&#x3D;Config.SAVE_PATH):\n        try:\n            self.write_work.save(file_url)\n            print(&quot;文件保存成功！文件路径为：&quot; + file_url)\n        except IOError:\n            print(&quot;文件保存失败！&quot;)\n\n    # 提取商品标题中的材质关键词\n    def title_extract(self, title):\n        # 想要提取的关键词列表\n        materials &#x3D; [&#39;熟茶&#39;, &#39;一级&#39;, &#39;手工&#39;, &#39;散茶&#39;]\n        contain &#x3D; &#39;&#39;\n        count &#x3D; 0\n        for material in materials:\n            if material in title:\n                # 将最后的输入形式为 “陶瓷、木质、不锈钢”\n                if count &#x3D;&#x3D; 0:\n                    contain &#x3D; contain + material\n                    count +&#x3D; 1\n                else:\n                    contain &#x3D; contain + &#39;、&#39; + material\n                    count +&#x3D; 1\n        return contain\n\n\nclass Goods:\n    # 初始化方法\n    def __init__(self, li_info):\n        self.li_info &#x3D; li_info\n        self.good_info_dic &#x3D; &#123;&#125;\n\n    def acquire_comment(self, url):\n        &#39;&#39;&#39;\n        input:\n            url：商品详情地址(detail_addr)，形式如&#x2F;&#x2F;item.jd.com&#x2F;100007046969.html\n        rerurn:\n            comment_count：该商品的评论数,现在能爬取到的都是大约数，比如“2万+”,详细的评论总数京东暂时没显示在html信息中（2021.08.03）\n        &#39;&#39;&#39;\n        # 提取商品详情地址中的商品号\n        no &#x3D; url.split(&#39;com&#x2F;&#39;)[1].split(&#39;.html&#39;)[0]\n        comment_url &#x3D; &quot;https:&#x2F;&#x2F;club.jd.com&#x2F;comment&#x2F;productPageComments.action?callback&#x3D;fetchJSON_comment98&amp;productId&#x3D;&quot; + no + &quot;&amp;score&#x3D;0&amp;sortType&#x3D;5&amp;page&#x3D;0&amp;pageSize&#x3D;10&amp;isShadowSku&#x3D;0&amp;fold&#x3D;1&quot;\n        print(&quot;评论数获取链接：&quot;, comment_url)\n        response &#x3D; requests.get(comment_url, headers&#x3D;Config.headers)\n        time.sleep(2)\n        page &#x3D; response.content.decode(\n            &#39;gbk&#39;)  # type(page)为str，fetchJSON_comment98(dic),dic[&#39;productCommentSummary&#39;][&#39;commentCountStr&#39;]为评论数\n        # &quot;commentCountStr&quot;:&quot;2万+&quot;, 获取其中的2万+，暂时想到的办法是用split和replace对字符串进行切分后再替换不需要的字符\n        comment_count &#x3D; page.split(&quot;commentCountStr&quot;)[1].split(&#39;:&#39;)[1].split(&#39;,&#39;)[0].replace(&#39;&quot;&#39;, &#39;&#39;)\n        return comment_count\n\n    def add_product_parameter(self, need_list, url):\n        html &#x3D; get_html(&#39;https:&#39; + url)\n        soup &#x3D; BeautifulSoup(html, &#39;lxml&#39;)\n        time.sleep(2)\n        # 获取商品参数\n        parameters &#x3D; soup.find(&#39;ul&#39;, class_&#x3D;&#39;parameter2 p-parameter-list&#39;)\n        para_lists &#x3D; parameters.find_all(&#39;li&#39;)\n        name_lists &#x3D; []\n        para_text_lists &#x3D; []\n        for para in para_lists:\n            para_text &#x3D; para.get_text()\n            #print(para_text)\n            # para_text的形式：“商品名称：浩雅HY160”\n            name_lists.append(para_text.split(&quot;：&quot;)[0])  # name_lists保存单个商品详情页参数名称，如“商品名称”\n            para_text_lists.append(para_text.split(&quot;：&quot;)[1])  # para_text_lists保存参数名称对应的参数，如”浩雅HY160“\n        return_list &#x3D; []\n        # 按need_list中参数名称的顺序保存单个商品详情页中的爬虫数据\n        for need in need_list[:-1]:  # 评论数单独拎出来，need_list[-1]为“评论数”\n            try:\n                index &#x3D; name_lists.index(need)\n                return_list.append(para_text_lists[index])\n            except:\n                # 如果该商品商家并没有显示该参数名称的参数，那么excel中填充空值\n                return_list.append(&#39; &#39;)\n        # 最后一列填充评论数\n        return_list.append(self.acquire_comment(url))\n        return return_list\n\n    def find_attr(self, attr):\n        try:\n            if attr &#x3D;&#x3D; Config.GOOD_LABEL[0]:\n                # 商品名称\n                result &#x3D; self.li_info.find(class_&#x3D;&#39;p-name p-name-type-2&#39;).find(&#39;em&#39;).get_text()\n            elif attr &#x3D;&#x3D; Config.GOOD_LABEL[1]:\n                # 价格\n                result &#x3D; self.li_info.find(class_&#x3D;&#39;p-price&#39;).find(&#39;i&#39;).get_text()\n            elif attr &#x3D;&#x3D; Config.GOOD_LABEL[2]:\n                # 商家\n                result &#x3D; self.li_info.find(class_&#x3D;&#39;p-shop&#39;).find(&#39;a&#39;).get_text()\n            elif attr &#x3D;&#x3D; Config.GOOD_LABEL[3]:\n                # 商品详情地址\n                result &#x3D; self.li_info.find(class_&#x3D;&#39;p-name p-name-type-2&#39;).find(&#39;a&#39;)[&#39;href&#39;]\n\n                # 进入单个商品详情网页进行数据爬取，本代码所说的单个商品详情网页意思为从搜索页点进某一个商品页，比如https:&#x2F;&#x2F;item.jd.com&#x2F;100007046969.html\n                paras &#x3D; self.add_product_parameter(Config.PARAMETER_LABEL, result)\n                for i in range(len(paras)):\n                    para &#x3D; paras[i]\n                    self.good_info_dic.setdefault(Config.PARAMETER_LABEL[i], para)\n\n        except AttributeError:\n            result &#x3D; &#39;无&#39;\n        self.good_info_dic.setdefault(attr, result)  # 集合setdefault\n\n    # 添加商品信息\n    def add_good_info(self):\n        for item in Config.GOOD_LABEL:\n            self.find_attr(item)\n\n    # 获取产品列表\n    def get_good(self):\n        return self.good_info_dic\n\n\ndef get_html(url, currentPage&#x3D;None, pageSize&#x3D;None):\n    if pageSize:\n        print(&quot;--&gt; 正在获取网站第 &quot; + str(currentPage) + &quot;页信息&quot;)\n        if currentPage !&#x3D; 1:\n            url &#x3D; url + &#39;&amp;page&#x3D;&#39; + str(currentPage) + &#39;&amp;s&#x3D;&#39; + str(pageSize) + &#39;&amp;click&#x3D;0&#39;\n\n    response &#x3D; requests.get(url, headers&#x3D;Config.headers)  # 请求访问网站\n    time.sleep(2)\n    if response.status_code &#x3D;&#x3D; 200:\n        html &#x3D; response.text  # 获取网页源码\n        return html  # 返回网页源码\n    else:\n        print(&quot;获取网站信息失败！&quot;)\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    &#39;&#39;&#39;\n    一定需要修改的是Config中的headers文件，每个电脑每个京东账号对应的文件不同\n    修改完headers后可以输入关键词为“餐具碗”，页数“2”，查看下爬虫结果\n    可根据自己的需求修改Config中的参数\n    &#39;&#39;&#39;\n    # 创建文件\n    excel &#x3D; Excel()\n\n    config &#x3D; Config()\n    # 搜索地址\n    search_url &#x3D; &#39;https:&#x2F;&#x2F;search.jd.com&#x2F;Search?keyword&#x3D;&#39; + config.keyword + &#39;&amp;enc&#x3D;utf-8&amp;psort&#x3D;3&#39;\n    page &#x3D; &#123;\n        &#39;total&#39;: 0,  # 总页数\n        &#39;currentPage&#39;: 1,  # 当前页数\n        &#39;pageSize&#39;: 0  # 每页显示多少条\n    &#125;\n\n    if not config.total.isdigit():\n        print(&quot;非法字符，程序退出！&quot;)\n        exit(0)\n\n    page[&#39;total&#39;] &#x3D; eval(config.total)\n    for i in range(page[&#39;total&#39;]):\n        # 初始化BeautifulSoup库,并设置解析器\n        soup &#x3D; BeautifulSoup(get_html(search_url, page[&#39;currentPage&#39;], page[&#39;currentPage&#39;] * page[&#39;pageSize&#39;]), &#39;lxml&#39;)\n        time.sleep(2)  # 为了防止爬取太快被京东服务器拦截，在每次解析网页操作后强制休息2秒\n\n        # 商品列表\n        goods_list &#x3D; soup.find_all(&#39;li&#39;, class_&#x3D;&#39;gl-item&#39;)\n        print(&quot;分析到第&quot; + str(page[&#39;currentPage&#39;]) + &#39;页共有&#39; + str(len(goods_list)) + &#39;条商品信息&#39;)\n        for li in goods_list:  # 遍历父节点\n            try:\n                goods &#x3D; Goods(li)\n                # 添加信息\n                goods.add_good_info()\n                # 获取信息\n                good_info &#x3D; goods.get_good()\n                # 写入excel\n                excel.write_content(good_info)\n            except:\n                print(&quot;商品信息获取失败&quot;)\n                break\n\n        page[&#39;currentPage&#39;] &#x3D; page[&#39;currentPage&#39;] + 1\n        page[&#39;pageSize&#39;] &#x3D; len(goods_list) * page[&#39;currentPage&#39;]\n\n    # 保存excel文件\n    excel.save_file(config.SAVE_PATH)\n\n\n\n输出D:\\coder\\randomnumbers\\venv\\Scripts\\python.exe D:&#x2F;coder&#x2F;randomnumbers&#x2F;chengxusheji.py\n请输入需要爬取的信息关键字：黑茶\n请输入需要爬取页数: 2\n分析到第1页共有30条商品信息\n评论数获取链接： https:&#x2F;&#x2F;club.jd.com&#x2F;comment&#x2F;productPageComments.action?callback&#x3D;fetchJSON_comment98&amp;productId&#x3D;100014774315&amp;score&#x3D;0&amp;sortType&#x3D;5&amp;page&#x3D;0&amp;pageSize&#x3D;10&amp;isShadowSku&#x3D;0&amp;fold&#x3D;1\n&#123;&#39;name&#39;: &#39;\\n中粮集团 中茶六堡茶广西梧州窖藏特级陈香箩筐装500g中华老字号&#39;, &#39;price&#39;: &#39;288.00&#39;, &#39;shop&#39;: &#39;中茶京东自营旗舰店&#39;, &#39;评论数&#39;: &#39;2万+&#39;, &#39;detail_addr&#39;: &#39;&#x2F;&#x2F;item.jd.com&#x2F;100014774315.html&#39;&#125;\n评论数获取链接： https:&#x2F;&#x2F;club.jd.com&#x2F;comment&#x2F;productPageComments.action?callback&#x3D;fetchJSON_comment98&amp;productId&#x3D;100034615616&amp;score&#x3D;0&amp;sortType&#x3D;5&amp;page&#x3D;0&amp;pageSize&#x3D;10&amp;isShadowSku&#x3D;0&amp;fold&#x3D;1\n&#123;&#39;name&#39;: &#39;泾渭茯茶 黑茶 茶叶 咸阳茯茶 陕西特产 金花茯茶砖茶 经典1368 900g纸包装&#39;, &#39;price&#39;: &#39;168.00&#39;, &#39;shop&#39;: &#39;泾渭茯茶官方京东自营旗舰店&#39;, &#39;评论数&#39;: &#39;2万+&#39;, &#39;detail_addr&#39;: &#39;&#x2F;&#x2F;item.jd.com&#x2F;100034615616.html&#39;&#125;\n评论数获取链接： https:&#x2F;&#x2F;club.jd.com&#x2F;comment&#x2F;productPageComments.action?callback&#x3D;fetchJSON_comment98&amp;productId&#x3D;1708434&amp;score&#x3D;0&amp;sortType&#x3D;5&amp;page&#x3D;0&amp;pageSize&#x3D;10&amp;isShadowSku&#x3D;0&amp;fold&#x3D;1\n&#123;&#39;name&#39;: &#39;\\n白沙溪 安化黑茶 金花茯茶砖茶天尖嫩料天茯茶叶礼盒1000g&#39;, &#39;price&#39;: &#39;350.00&#39;, &#39;shop&#39;: &#39;白沙溪京东自营旗舰店&#39;, &#39;评论数&#39;: &#39;2万+&#39;, &#39;detail_addr&#39;: &#39;&#x2F;&#x2F;item.jd.com&#x2F;1708434.html&#39;&#125;\n评论数获取链接： https:&#x2F;&#x2F;club.jd.com&#x2F;comment&#x2F;productPageComments.action?callback&#x3D;fetchJSON_comment98&amp;productId&#x3D;10461872396&amp;score&#x3D;0&amp;sortType&#x3D;5&amp;page&#x3D;0&amp;pageSize&#x3D;10&amp;isShadowSku&#x3D;0&amp;fold&#x3D;1\n&#123;&#39;name&#39;: &#39;\\n湘丰 茶叶湖南安化黑茶4年陈手工金花茯砖茶手筑茯茶盒装1kg&#39;, &#39;price&#39;: &#39;95.00&#39;, &#39;shop&#39;: &#39;湘丰茶叶旗舰店&#39;, &#39;评论数&#39;: &#39;10万+&#39;, &#39;detail_addr&#39;: &#39;&#x2F;&#x2F;item.jd.com&#x2F;10461872396.html&#39;&#125;\n评论数获取链接： https:&#x2F;&#x2F;club.jd.com&#x2F;comment&#x2F;productPageComments.action?callback&#x3D;fetchJSON_comment98&amp;productId&#x3D;100014737221&amp;score&#x3D;0&amp;sortType&#x3D;5&amp;page&#x3D;0&amp;pageSize&#x3D;10&amp;isShadowSku&#x3D;0&amp;fold&#x3D;1\n&#123;&#39;name&#39;: &#39;\\n七春茶叶 六堡茶黑茶 2016年陈化窖藏散茶熟茶 广西梧州特产箩筐装250g 送长辈自饮佳品 &#39;, &#39;price&#39;: &#39;99.00&#39;, &#39;shop&#39;: &#39;七春茶业京东自营旗舰店&#39;, &#39;评论数&#39;: &#39;1万+&#39;, &#39;detail_addr&#39;: &#39;&#x2F;&#x2F;item.jd.com&#x2F;100014737221.html&#39;&#125;\n评论数获取链接： https:&#x2F;&#x2F;club.jd.com&#x2F;comment&#x2F;productPageComments.action?callback&#x3D;fetchJSON_comment98&amp;productId&#x3D;10026990549152&amp;score&#x3D;0&amp;sortType&#x3D;5&amp;page&#x3D;0&amp;pageSize&#x3D;10&amp;isShadowSku&#x3D;0&amp;fold&#x3D;1\n&#123;&#39;name&#39;: &#39;三鹤 六堡茶【承意】2019年特级散茶500克广西特产梧州茶厂黑茶包邮&#39;, &#39;price&#39;: &#39;270.00&#39;, &#39;shop&#39;: &#39;三鹤茶叶官方旗舰店&#39;, &#39;评论数&#39;: &#39;1000+&#39;, &#39;detail_addr&#39;: &#39;&#x2F;&#x2F;item.jd.com&#x2F;10026990549152.html&#39;&#125;\n评论数获取链接： https:&#x2F;&#x2F;club.jd.com&#x2F;comment&#x2F;productPageComments.action?callback&#x3D;fetchJSON_comment98&amp;productId&#x3D;45630061389&amp;score&#x3D;0&amp;sortType&#x3D;5&amp;page&#x3D;0&amp;pageSize&#x3D;10&amp;isShadowSku&#x3D;0&amp;fold&#x3D;1\n&#123;&#39;name&#39;: &#39;中茶 中华老字号 中粮茶叶 安化黑茶 2022年千两茶+底座 花卷茶岁印千两茶36.25kg&#39;, &#39;price&#39;: &#39;5688.00&#39;, &#39;shop&#39;: &#39;百年木仓旗舰店&#39;, &#39;评论数&#39;: &#39;100+&#39;, &#39;detail_addr&#39;: &#39;&#x2F;&#x2F;item.jd.com&#x2F;45630061389.html&#39;&#125;\n\n评论数获取链接： https:&#x2F;&#x2F;club.jd.com&#x2F;comment&#x2F;productPageComments.action?callback&#x3D;fetchJSON_comment98&amp;productId&#x3D;10039775408496&amp;score&#x3D;0&amp;sortType&#x3D;5&amp;page&#x3D;0&amp;pageSize&#x3D;10&amp;isShadowSku&#x3D;0&amp;fold&#x3D;1\n&#123;&#39;name&#39;: &#39;湘丰 专拍【一箱装】茶叶湖南黑茶3年陈手工金花茯砖茶手筑茯茶10kg 2017茯砖茶20盒&#39;, &#39;price&#39;: &#39;699.00&#39;, &#39;shop&#39;: &#39;湘丰茶叶旗舰店&#39;, &#39;评论数&#39;: &#39;44&#39;, &#39;detail_addr&#39;: &#39;&#x2F;&#x2F;item.jd.com&#x2F;10039775408496.html&#39;&#125;\n文件保存成功！文件路径为：.&#x2F;test.xls\n\n进程已结束,退出代码0\n\n\nPART2代码\nimport requests\nfrom bs4 import BeautifulSoup\nimport xlwt\nimport time\n\n\nclass Config():\n    &#39;&#39;&#39;\n    PARAMETER_LABEL：需要根据爬取的商品详情界面的信息key进行修改，其中&#39;评论数&#39;是另一种方式获取的\n    TITLE_LABEL：PARAMETER_LABEL修改后excel的表头也做相应的修改\n    GOOD_LABEL：无需修改，默认该四个信息都爬取\n    need_list：能直接从html解析后的标签文件中获取的\n    &#39;&#39;&#39;\n    # excel表头\n    #TITLE_LABEL &#x3D; [&#39;商品名称&#39;, &#39;价格&#39;, &#39;商家&#39;, &#39;商品详情地址&#39;, &#39;工艺&#39;, &#39;图案&#39;, &#39;风格&#39;, &#39;材质&#39;, &#39;形状&#39;, &#39;直径&#39;, &#39;评论数&#39;, &#39;标题材质关键字&#39;]\n    TITLE_LABEL &#x3D; [&#39;商品说明&#x2F;包装与规格&#39;, &#39;价格&#39;, &#39;商家名称&#39;, &#39;商品详情地址&#39;, &#39;评论数&#39;]\n    # html中对应TITLE_LABEL的key\n    GOOD_LABEL &#x3D; [&#39;name&#39;, &#39;price&#39;, &#39;shop&#39;, &#39;detail_addr&#39;]\n    # TITLE_LABEL中商品详情页（即点进单个商品界面）想爬取的数据在html中key，&#39;评论数&#39;一定要放在最后\n    PARAMETER_LABEL &#x3D; [ &#39;评论数&#39;]\n    # 将PARAMETER_LABEL去掉&#39;评论数&#39;即为need_list\n    need_list &#x3D; PARAMETER_LABEL[:-1]\n    # 将搜索页的key和单个商品详情页的key组合起来\n    TOTAL_LABEL &#x3D; GOOD_LABEL + PARAMETER_LABEL\n    # excel文件的保存路径\n    SAVE_PATH &#x3D; &#39;.&#x2F;test.xls&#39;\n\n    # 发送访问请问的head文件\n    # 每个电脑每个京东账号对应的head文件不同，获取方式参考帖子https:&#x2F;&#x2F;blog.csdn.net&#x2F;weixin_41998772&#x2F;article&#x2F;details&#x2F;106476166\n    #\n    headers &#x3D; &#123;\n    &#39;Accept&#39;: &#39;text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9&#39;,\n    &#39;Accept-Language&#39;: &#39;zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8,en-GB;q&#x3D;0.7,en-US;q&#x3D;0.6&#39;,\n    &#39;Cache-Control&#39;: &#39;max-age&#x3D;0&#39;,\n    &#39;Connection&#39;: &#39;keep-alive&#39;,\n    # Requests sorts cookies&#x3D; alphabetically\n    # &#39;Cookie&#39;: &#39;__jdu&#x3D;164706084910516181292; shshshfpa&#x3D;ac27b0e9-916f-4600-a8d8-59c831a1a907-1652529930; shshshfpb&#x3D;noLYaOxvik5URLA2R6uzCrA; o2State&#x3D;&#123;%22webp%22:true%2C%22avif%22:false&#125;; areaId&#x3D;18; PCSYCityID&#x3D;CN_430000_430100_0; ipLoc-djd&#x3D;18-1482-48942-49058; shshshfp&#x3D;a354b74eee97acd3e5dc7a34609b535b; unpl&#x3D;JF8EALhnNSttChxcAR1VExBFTg4DW1wBSR8FOGMBUg4MH1MFHldPFBd7XlVdXhRLFB9uZxRUXVNIXA4ZBSsSEXtdVV9fD0oeBm5vNWQIW0lUAh9XSBZ-SzMgGyZ_DVcCbjF4BG1bS2QEKwIcFxZKWlVXWABLFgdvYAVdXVtDVzUaMhsaFHttZFtdCUoWC2hmAlVtWXtWBBoHHxMXSl5TbhZmSloDaGIDVVpZQlENGwMfEhdLVFRdVQt7FjNs; TrackID&#x3D;1LktDmeIYlq4RS62lp2WcZb3A2-LwnNYhz18i6aI5FlLUajbBiJd_FeCpEJdafoaAPnCSSoC61PQXGju4oI3qnbAT8S3MSqGOq1woyIirMtMOuV3qGlFl6X9MKqjmZsR0; thor&#x3D;70AB060D7F75310BAF0CE227144B45F89EA3FD829A7B37974106A4510DBABBD2D2ADA0B984BAD527C89EEFE0750ED95C6CF4CAF90C42F45F37589244950D233F7572E86297E56A589A289E8CFF4B7241DFA33FBE41392AEF2458EF8BF3F6DBBFA4315A0D22232B878BA867077580DA478BD559B930D575EA37D30A52757C4E6E81F39D4A6B7520F2C1F455BFE890AC341A55920740F5682FF572C70CF84017F8; pinId&#x3D;3o3XfM8mzX8mD44K9IZ3p7V9-x-f3wj7; pin&#x3D;jd_7701e3820cb18; unick&#x3D;jd_7701e3820cb18; ceshi3.com&#x3D;000; _tp&#x3D;s1jQhhQY1klVAfaPuL5OvGH1I1J7VanZuJjdCQPVNmY%3D; _pst&#x3D;jd_7701e3820cb18; __jda&#x3D;76161171.164706084910516181292.1647060849.1669819802.1669865317.7; __jdb&#x3D;76161171.5.164706084910516181292|7.1669865317; __jdc&#x3D;76161171; __jdv&#x3D;76161171|www.baidu.com|t_1003608409_|tuiguang|cf957f93d4bf408397f557bee614de76|1669865490795; shshshsID&#x3D;045ff225b6736e87dfb49f1c52b1bf4e_3_1669865502177; 3AB9D23F7A4B3C9B&#x3D;7UVB2WFZM5E6PVGD5ATMSSLYVFBGPQ4W2DNVAX6BTX5UOCCW3VIFMRPFCGFJIO7CXKNHL4GS3JSG5VMKH7XD6HMMHI&#39;,\n    &#39;Referer&#39;: &#39;https:&#x2F;&#x2F;passport.jd.com&#x2F;&#39;,\n    &#39;Sec-Fetch-Dest&#39;: &#39;document&#39;,\n    &#39;Sec-Fetch-Mode&#39;: &#39;navigate&#39;,\n    &#39;Sec-Fetch-Site&#39;: &#39;same-site&#39;,\n    &#39;Sec-Fetch-User&#39;: &#39;?1&#39;,\n    &#39;Upgrade-Insecure-Requests&#39;: &#39;1&#39;,\n    &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;107.0.0.0 Safari&#x2F;537.36 Edg&#x2F;107.0.1418.62&#39;,\n    &#39;sec-ch-ua&#39;: &#39;&quot;Microsoft Edge&quot;;v&#x3D;&quot;107&quot;, &quot;Chromium&quot;;v&#x3D;&quot;107&quot;, &quot;Not&#x3D;A?Brand&quot;;v&#x3D;&quot;24&quot;&#39;,\n    &#39;sec-ch-ua-mobile&#39;: &#39;?0&#39;,\n    &#39;sec-ch-ua-platform&#39;: &#39;&quot;Windows&quot;&#39;,\n    &#125;\n    # 搜索关键字\n    keyword &#x3D; str(input(&#39;请输入需要爬取的信息关键字：&#39;))\n    total &#x3D; input(&#39;请输入需要爬取页数: &#39;)\n\n\nclass Excel():\n    # 表格列数\n    TABLE_COL &#x3D; len(Config.TITLE_LABEL)\n    # 当前行数\n    _current_row &#x3D; 1\n\n    # 初始化，创建文件及写入title\n    def __init__(self, sheet_name&#x3D;&#39;sheet1&#39;):\n        self.write_work &#x3D; xlwt.Workbook(encoding&#x3D;&#39;ascii&#39;)\n        self.write_sheet &#x3D; self.write_work.add_sheet(sheet_name)\n        for item in range(len(Config.TITLE_LABEL)):\n            # 第一行写入excel表头\n            self.write_sheet.write(0, item, label&#x3D;Config.TITLE_LABEL[item])\n\n    # 写入内容\n    def write_content(self, content):\n        print(content)\n        if content[&#39;detail_addr&#39;] !&#x3D; &#39;无&#39;:  # 有时候没能获取的该商品的详情地址就跳过该商品\n            for item in range(self.TABLE_COL):\n                if (item &#x3D;&#x3D; self.TABLE_COL - 1) and (Config.TOTAL_LABEL[-1] &#x3D;&#x3D; &#39;标题材质关键字&#39;):\n                    self.write_sheet.write(self._current_row, item, label&#x3D;self.title_extract(content[&#39;name&#39;]))\n                else:\n                    self.write_sheet.write(self._current_row, item, label&#x3D;content[Config.TOTAL_LABEL[item]])\n            # 插入完一条记录后，换行\n            self._current_row +&#x3D; 1\n\n    # 保存文件\n    def save_file(self, file_url&#x3D;Config.SAVE_PATH):\n        try:\n            self.write_work.save(file_url)\n            print(&quot;文件保存成功！文件路径为：&quot; + file_url)\n        except IOError:\n            print(&quot;文件保存失败！&quot;)\n\n    # 提取商品标题中的材质关键词\n    def title_extract(self, title):\n        # 想要提取的关键词列表\n        materials &#x3D; [&#39;熟茶&#39;, &#39;一级&#39;, &#39;手工&#39;, &#39;散茶&#39;]\n        contain &#x3D; &#39;&#39;\n        count &#x3D; 0\n        for material in materials:\n            if material in title:\n                # 将最后的输入形式为 “陶瓷、木质、不锈钢”\n                if count &#x3D;&#x3D; 0:\n                    contain &#x3D; contain + material\n                    count +&#x3D; 1\n                else:\n                    contain &#x3D; contain + &#39;、&#39; + material\n                    count +&#x3D; 1\n        return contain\n\n\nclass Goods:\n    # 初始化方法\n    def __init__(self, li_info):\n        self.li_info &#x3D; li_info\n        self.good_info_dic &#x3D; &#123;&#125;\n\n    def acquire_comment(self, url):\n        &#39;&#39;&#39;\n        input:\n            url：商品详情地址(detail_addr)，形式如&#x2F;&#x2F;item.jd.com&#x2F;100007046969.html\n        rerurn:\n            comment_count：该商品的评论数,现在能爬取到的都是大约数，比如“2万+”,详细的评论总数京东暂时没显示在html信息中（2021.08.03）\n        &#39;&#39;&#39;\n        # 提取商品详情地址中的商品号\n        no &#x3D; url.split(&#39;com&#x2F;&#39;)[1].split(&#39;.html&#39;)[0]\n        comment_url &#x3D; &quot;https:&#x2F;&#x2F;club.jd.com&#x2F;comment&#x2F;productPageComments.action?callback&#x3D;fetchJSON_comment98&amp;productId&#x3D;&quot; + no + &quot;&amp;score&#x3D;0&amp;sortType&#x3D;5&amp;page&#x3D;0&amp;pageSize&#x3D;10&amp;isShadowSku&#x3D;0&amp;fold&#x3D;1&quot;\n        print(&quot;评论数获取链接：&quot;, comment_url)\n        response &#x3D; requests.get(comment_url, headers&#x3D;Config.headers)\n        time.sleep(2)\n        page &#x3D; response.content.decode(\n            &#39;gbk&#39;)  # type(page)为str，fetchJSON_comment98(dic),dic[&#39;productCommentSummary&#39;][&#39;commentCountStr&#39;]为评论数\n        # &quot;commentCountStr&quot;:&quot;2万+&quot;, 获取其中的2万+，暂时想到的办法是用split和replace对字符串进行切分后再替换不需要的字符\n        comment_count &#x3D; page.split(&quot;commentCountStr&quot;)[1].split(&#39;:&#39;)[1].split(&#39;,&#39;)[0].replace(&#39;&quot;&#39;, &#39;&#39;)\n        return comment_count\n\n    def add_product_parameter(self, need_list, url):\n        html &#x3D; get_html(&#39;https:&#39; + url)\n        soup &#x3D; BeautifulSoup(html, &#39;lxml&#39;)\n        time.sleep(2)\n        # 获取商品参数\n        parameters &#x3D; soup.find(&#39;ul&#39;, class_&#x3D;&#39;parameter2 p-parameter-list&#39;)\n        para_lists &#x3D; parameters.find_all(&#39;li&#39;)\n        name_lists &#x3D; []\n        para_text_lists &#x3D; []\n        for para in para_lists:\n            para_text &#x3D; para.get_text()\n            #print(para_text)\n            # para_text的形式：“商品名称：浩雅HY160”\n            name_lists.append(para_text.split(&quot;：&quot;)[0])  # name_lists保存单个商品详情页参数名称，如“商品名称”\n            para_text_lists.append(para_text.split(&quot;：&quot;)[1])  # para_text_lists保存参数名称对应的参数，如”浩雅HY160“\n        return_list &#x3D; []\n        # 按need_list中参数名称的顺序保存单个商品详情页中的爬虫数据\n        for need in need_list[:-1]:  # 评论数单独拎出来，need_list[-1]为“评论数”\n            try:\n                index &#x3D; name_lists.index(need)\n                return_list.append(para_text_lists[index])\n            except:\n                # 如果该商品商家并没有显示该参数名称的参数，那么excel中填充空值\n                return_list.append(&#39; &#39;)\n        # 最后一列填充评论数\n        return_list.append(self.acquire_comment(url))\n        return return_list\n\n    def find_attr(self, attr):\n        try:\n            if attr &#x3D;&#x3D; Config.GOOD_LABEL[0]:\n                # 商品名称\n                result &#x3D; self.li_info.find(class_&#x3D;&#39;p-name p-name-type-2&#39;).find(&#39;em&#39;).get_text()\n            elif attr &#x3D;&#x3D; Config.GOOD_LABEL[1]:\n                # 价格\n                result &#x3D; self.li_info.find(class_&#x3D;&#39;p-price&#39;).find(&#39;i&#39;).get_text()\n            elif attr &#x3D;&#x3D; Config.GOOD_LABEL[2]:\n                # 商家\n                result &#x3D; self.li_info.find(class_&#x3D;&#39;p-shop&#39;).find(&#39;a&#39;).get_text()\n            elif attr &#x3D;&#x3D; Config.GOOD_LABEL[3]:\n                # 商品详情地址\n                result &#x3D; self.li_info.find(class_&#x3D;&#39;p-name p-name-type-2&#39;).find(&#39;a&#39;)[&#39;href&#39;]\n\n                # 进入单个商品详情网页进行数据爬取，本代码所说的单个商品详情网页意思为从搜索页点进某一个商品页，比如https:&#x2F;&#x2F;item.jd.com&#x2F;100007046969.html\n                paras &#x3D; self.add_product_parameter(Config.PARAMETER_LABEL, result)\n                for i in range(len(paras)):\n                    para &#x3D; paras[i]\n                    self.good_info_dic.setdefault(Config.PARAMETER_LABEL[i], para)\n\n        except AttributeError:\n            result &#x3D; &#39;无&#39;\n        self.good_info_dic.setdefault(attr, result)  # 集合setdefault\n\n    # 添加商品信息\n    def add_good_info(self):\n        for item in Config.GOOD_LABEL:\n            self.find_attr(item)\n\n    # 获取产品列表\n    def get_good(self):\n        return self.good_info_dic\n\n\ndef get_html(url, currentPage&#x3D;None, pageSize&#x3D;None):\n    if pageSize:\n        print(&quot;--&gt; 正在获取网站第 &quot; + str(currentPage) + &quot;页信息&quot;)\n        if currentPage !&#x3D; 1:\n            url &#x3D; url + &#39;&amp;page&#x3D;&#39; + str(currentPage) + &#39;&amp;s&#x3D;&#39; + str(pageSize) + &#39;&amp;click&#x3D;0&#39;\n\n    response &#x3D; requests.get(url, headers&#x3D;Config.headers)  # 请求访问网站\n    time.sleep(2)\n    if response.status_code &#x3D;&#x3D; 200:\n        html &#x3D; response.text  # 获取网页源码\n        return html  # 返回网页源码\n    else:\n        print(&quot;获取网站信息失败！&quot;)\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    &#39;&#39;&#39;\n    一定需要修改的是Config中的headers文件，每个电脑每个京东账号对应的文件不同\n    修改完headers后可以输入关键词为“餐具碗”，页数“2”，查看下爬虫结果\n    可根据自己的需求修改Config中的参数\n    &#39;&#39;&#39;\n    # 创建文件\n    excel &#x3D; Excel()\n\n    config &#x3D; Config()\n    # 搜索地址\n    search_url &#x3D; &#39;https:&#x2F;&#x2F;search.jd.com&#x2F;Search?keyword&#x3D;&#39; + config.keyword + &#39;&amp;enc&#x3D;utf-8&amp;psort&#x3D;3&#39;\n    page &#x3D; &#123;\n        &#39;total&#39;: 0,  # 总页数\n        &#39;currentPage&#39;: 1,  # 当前页数\n        &#39;pageSize&#39;: 0  # 每页显示多少条\n    &#125;\n\n    if not config.total.isdigit():\n        print(&quot;非法字符，程序退出！&quot;)\n        exit(0)\n\n    page[&#39;total&#39;] &#x3D; eval(config.total)\n    for i in range(page[&#39;total&#39;]):\n        # 初始化BeautifulSoup库,并设置解析器\n        soup &#x3D; BeautifulSoup(get_html(search_url, page[&#39;currentPage&#39;], page[&#39;currentPage&#39;] * page[&#39;pageSize&#39;]), &#39;lxml&#39;)\n        time.sleep(2)  # 为了防止爬取太快被京东服务器拦截，在每次解析网页操作后强制休息2秒\n\n        # 商品列表\n        goods_list &#x3D; soup.find_all(&#39;li&#39;, class_&#x3D;&#39;gl-item&#39;)\n        print(&quot;分析到第&quot; + str(page[&#39;currentPage&#39;]) + &#39;页共有&#39; + str(len(goods_list)) + &#39;条商品信息&#39;)\n        for li in goods_list:  # 遍历父节点\n            try:\n                goods &#x3D; Goods(li)\n                # 添加信息\n                goods.add_good_info()\n                # 获取信息\n                good_info &#x3D; goods.get_good()\n                # 写入excel\n                excel.write_content(good_info)\n            except:\n                print(&quot;商品信息获取失败&quot;)\n                break\n\n        page[&#39;currentPage&#39;] &#x3D; page[&#39;currentPage&#39;] + 1\n        page[&#39;pageSize&#39;] &#x3D; len(goods_list) * page[&#39;currentPage&#39;]\n\n    # 保存excel文件\n    excel.save_file(config.SAVE_PATH)\n\n\n输出D:\\coder\\randomnumbers\\venv\\Scripts\\python.exe D:&#x2F;coder&#x2F;randomnumbers&#x2F;chengxusheji.py\n请输入需要爬取的信息关键字：黑茶\n请输入需要爬取页数: 7\n分析到第1页共有30条商品信息\n评论数获取链接： https:&#x2F;&#x2F;club.jd.com&#x2F;comment&#x2F;productPageComments.action?callback&#x3D;fetchJSON_comment98&amp;productId&#x3D;100014774315&amp;score&#x3D;0&amp;sortType&#x3D;5&amp;page&#x3D;0&amp;pageSize&#x3D;10&amp;isShadowSku&#x3D;0&amp;fold&#x3D;1\n&#123;&#39;name&#39;: &#39;\\n中粮集团 中茶六堡茶广西梧州窖藏特级陈香箩筐装500g中华老字号&#39;, &#39;price&#39;: &#39;288.00&#39;, &#39;shop&#39;: &#39;中茶京东自营旗舰店&#39;, &#39;评论数&#39;: &#39;2万+&#39;, &#39;detail_addr&#39;: &#39;&#x2F;&#x2F;item.jd.com&#x2F;100014774315.html&#39;&#125;\n评论数获取链接： https:&#x2F;&#x2F;club.jd.com&#x2F;comment&#x2F;productPageComments.action?callback&#x3D;fetchJSON_comment98&amp;productId&#x3D;100034615616&amp;score&#x3D;0&amp;sortType&#x3D;5&amp;page&#x3D;0&amp;pageSize&#x3D;10&amp;isShadowSku&#x3D;0&amp;fold&#x3D;1\n&#123;&#39;name&#39;: &#39;泾渭茯茶 黑茶 茶叶 咸阳茯茶 陕西特产 金花茯茶砖茶 经典1368 900g纸包装&#39;, &#39;price&#39;: &#39;168.00&#39;, &#39;shop&#39;: &#39;泾渭茯茶官方京东自营旗舰店&#39;, &#39;评论数&#39;: &#39;2万+&#39;, &#39;detail_addr&#39;: &#39;&#x2F;&#x2F;item.jd.com&#x2F;100034615616.html&#39;&#125;\n评论数获取链接： https:&#x2F;&#x2F;club.jd.com&#x2F;comment&#x2F;productPageComments.action?callback&#x3D;fetchJSON_comment98&amp;productId&#x3D;1708434&amp;score&#x3D;0&amp;sortType&#x3D;5&amp;page&#x3D;0&amp;pageSize&#x3D;10&amp;isShadowSku&#x3D;0&amp;fold&#x3D;1\n&#123;&#39;name&#39;: &#39;\\n白沙溪 安化黑茶 金花茯茶砖茶天尖嫩料天茯茶叶礼盒1000g&#39;, &#39;price&#39;: &#39;350.00&#39;, &#39;shop&#39;: &#39;白沙溪京东自营旗舰店&#39;, &#39;评论数&#39;: &#39;2万+&#39;, &#39;detail_addr&#39;: &#39;&#x2F;&#x2F;item.jd.com&#x2F;1708434.html&#39;&#125;\n评论数获取链接： https:&#x2F;&#x2F;club.jd.com&#x2F;comment&#x2F;productPageComments.action?callback&#x3D;fetchJSON_comment98&amp;productId&#x3D;10461872396&amp;score&#x3D;0&amp;sortType&#x3D;5&amp;page&#x3D;0&amp;pageSize&#x3D;10&amp;isShadowSku&#x3D;0&amp;fold&#x3D;1\n&#123;&#39;name&#39;: &#39;\\n湘丰 茶叶湖南安化黑茶4年陈手工金花茯砖茶手筑茯茶盒装1kg&#39;, &#39;price&#39;: &#39;95.00&#39;, &#39;shop&#39;: &#39;湘丰茶叶旗舰店&#39;, &#39;评论数&#39;: &#39;10万+&#39;, &#39;detail_addr&#39;: &#39;&#x2F;&#x2F;item.jd.com&#x2F;10461872396.html&#39;&#125;\n评论数获取链接： https:&#x2F;&#x2F;club.jd.com&#x2F;comment&#x2F;productPageComments.action?callback&#x3D;fetchJSON_comment98&amp;productId&#x3D;100014737221&amp;score&#x3D;0&amp;sortType&#x3D;5&amp;page&#x3D;0&amp;pageSize&#x3D;10&amp;isShadowSku&#x3D;0&amp;fold&#x3D;1\n&#123;&#39;name&#39;: &#39;\\n七春茶叶 六堡茶黑茶 2016年陈化窖藏散茶熟茶 广西梧州特产箩筐装250g 送长辈自饮佳品 &#39;, &#39;price&#39;: &#39;99.00&#39;, &#39;shop&#39;: &#39;七春茶业京东自营旗舰店&#39;, &#39;评论数&#39;: &#39;1万+&#39;, &#39;detail_addr&#39;: &#39;&#x2F;&#x2F;item.jd.com&#x2F;100014737221.html&#39;&#125;\n\n评论数获取链接： https:&#x2F;&#x2F;club.jd.com&#x2F;comment&#x2F;productPageComments.action?callback&#x3D;fetchJSON_comment98&amp;productId&#x3D;10051337800205&amp;score&#x3D;0&amp;sortType&#x3D;5&amp;page&#x3D;0&amp;pageSize&#x3D;10&amp;isShadowSku&#x3D;0&amp;fold&#x3D;1\n&#123;&#39;name&#39;: &#39;【2022年新品】湘益茯茶特茯小砖茯砖茶320g正宗湖南安化黑茶&#39;, &#39;price&#39;: &#39;34.00&#39;, &#39;shop&#39;: &#39;湘益茯茶官方旗舰店&#39;, &#39;评论数&#39;: &#39;100+&#39;, &#39;detail_addr&#39;: &#39;&#x2F;&#x2F;item.jd.com&#x2F;10051337800205.html&#39;&#125;\n文件保存成功！文件路径为：.&#x2F;test.xls\n\n进程已结束,退出代码0\n\n\n写入txt代码#导入所需包\nimport os\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport xlrd\nimport pandas as pd \nfrom datetime import datetime\nfrom pandas import Series,DataFrame\n\ndf &#x3D; pd.read_excel(&#39;test.xls&#39;)  #打开Excel表格\nprint(df) #打印所有数据\nprint(df.shape)  #打印表格大小\nprint(df.dtypes)  #打印表格各列数据类型\nprint(df.head(5))  #打印前五行数据\n\nf &#x3D; open(&#39;data.txt&#39;,&#39;w&#39;,encoding&#x3D;&#39;utf-8&#39;)  #打开data.txt文件，并以汉字字符写入\nfrom xlrd import open_workbook\nwb&#x3D;open_workbook(r&#39;test.xls&#39;)\ntb&#x3D;wb.sheets()[0]\ndata&#x3D;[]\nfor r in range(tb.nrows):\n    val&#x3D;[]\n    for c in range(tb.ncols):\n        val.append(tb.cell_value(r,c))\n    f.write(str(val)+&#39;\\n&#39;)\n    data.append(tuple(val))\nf.close()\n输出D:\\coder\\randomnumbers\\venv\\Scripts\\python.exe D:&#x2F;coder&#x2F;randomnumbers&#x2F;transf.py\n                                            商品说明&#x2F;包装与规格  ...   评论数\n0                   \\n中粮集团 中茶六堡茶广西梧州窖藏特级陈香箩筐装500g中华老字号  ...   2万+\n1           泾渭茯茶 黑茶 茶叶 咸阳茯茶 陕西特产 金花茯茶砖茶 经典1368 900g纸包装  ...   2万+\n2                     \\n白沙溪 安化黑茶 金花茯茶砖茶天尖嫩料天茯茶叶礼盒1000g  ...   2万+\n3                     \\n湘丰 茶叶湖南安化黑茶4年陈手工金花茯砖茶手筑茯茶盒装1kg  ...  10万+\n4    \\n七春茶叶 六堡茶黑茶 2016年陈化窖藏散茶熟茶 广西梧州特产箩筐装250g 送长辈自饮佳品   ...   1万+\n..                                                 ...  ...   ...\n205          白沙溪 安化黑茶 将军茯正品 金花茯砖茶叶礼盒限量款年份老茶 2015航天版2KG  ...    66\n206                 三鹤六堡茶【三月三】 2018年特级散茶300克广西特产梧州茶厂黑茶  ...    39\n207                \\n白沙溪茶叶黑茶安化黑茶 2013年金花茯茶砖茶御品茯砖318g盒装  ...   5万+\n208       湘益（XIANGYI） 湘益茯茶一品茯茶400g  湖南安化黑茶金花茯砖茶 2020年版  ...  200+\n209                   【2022年新品】湘益茯茶特茯小砖茯砖茶320g正宗湖南安化黑茶  ...  100+\n\n[210 rows x 5 columns]\n(210, 5)\n商品说明&#x2F;包装与规格     object\n价格            float64\n商家名称           object\n商品详情地址         object\n评论数            object\ndtype: object\n                                          商品说明&#x2F;包装与规格  ...   评论数\n0                 \\n中粮集团 中茶六堡茶广西梧州窖藏特级陈香箩筐装500g中华老字号  ...   2万+\n1         泾渭茯茶 黑茶 茶叶 咸阳茯茶 陕西特产 金花茯茶砖茶 经典1368 900g纸包装  ...   2万+\n2                   \\n白沙溪 安化黑茶 金花茯茶砖茶天尖嫩料天茯茶叶礼盒1000g  ...   2万+\n3                   \\n湘丰 茶叶湖南安化黑茶4年陈手工金花茯砖茶手筑茯茶盒装1kg  ...  10万+\n4  \\n七春茶叶 六堡茶黑茶 2016年陈化窖藏散茶熟茶 广西梧州特产箩筐装250g 送长辈自饮佳品   ...   1万+\n\n[5 rows x 5 columns]\n\n进程已结束,退出代码0\n\n效果\n修改代码import requests\nfrom lxml import etree\nimport json\nfrom bs4 import BeautifulSoup\nimport re\n\ndef get_one_page(url,headers):\n    try:\n        response &#x3D; requests.get(url,headers&#x3D;headers)\n        if response.status_code &#x3D;&#x3D; 200:\n            response.encoding &#x3D; &#39;utf-8&#39;\n            return response.text\n        return None\n    except RequestException:\n        return None\n\ndef get_id(product_id):\n    url &#x3D; &quot;https:&#x2F;&#x2F;club.jd.com&#x2F;comment&#x2F;productCommentSummaries.action&quot; \\\n          &quot;?referenceIds&#x3D;&quot;+str(product_id)+&quot;&amp;callback&#x3D;jQuery8827474&quot; \\\n                                           &quot;&amp;_&#x3D;1615298058081&quot;\n\n    headers &#x3D; &#123;&quot;user-agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; &quot;\n                             &quot;x64) AppleWebKit&#x2F;537.36 (KHTML, like &quot;\n                             &quot;Gecko) Chrome&#x2F;107.0.0.0 Safari&#x2F;537.36 &quot;\n                             &quot;Edg&#x2F;107.0.1418.56&quot;,\n               &quot;Cookie&quot;: &quot;__jdu&#x3D;1976972241; shshshfpa&#x3D;a2dcb9a2-4610-bcf&quot;\n                         &quot;9-11fb-d6121b1432cf-1652110313; shshshfpb&#x3D;nvrX&quot;\n                         &quot;JxBCCj0eG8UiLp9MCww; areaId&#x3D;18; ipLoc-djd&#x3D;18-14&quot;\n                         &quot;82-0-0; PCSYCityID&#x3D;CN_430000_430100_0; __jdc&#x3D;122&quot;\n                         &quot;270672; shshshfp&#x3D;0bcaf8cf9b6bcada873c2260d4c1fce2;&quot;\n                         &quot; unpl&#x3D;JF8EAJJnNSttDEhRDBNWGxVHGV5SWw4AGR4COmVXUQ9&quot;\n                         &quot;eGwFVGQYcF0N7XlVdXhRLFx9sbxRUWVNIUw4ZAisSEXtfVVdc&quot;\n                         &quot;DkgWA25XNVNdUQYVV1YyGBIgS1xkXlUOTB8FbGQAVG1Ze1MFEj&quot;\n                         &quot;IrIhVLXFVaXg5NFAtfZjVWXFlOXAcTARITIAAzVRNdAE0QC2lk&quot;\n                         &quot;BlFdaEpkBg; CCC_SE&#x3D;ADC_8UsmEi14MQp79Oa3KCgpDie2Uak%&quot;\n                         &quot;2fjhKDLxxPgJ1YAwwxFkHyVFPSLAMk05mHrTpGuzccWqxZ5XHh&quot;\n                         &quot;wbeDqXpRIFxCZ%2bgleHpZhqmkVSbPox%2fcQt%2bUunIAYjzVE&quot;\n                         &quot;U%2fWby8i4N0SVJYFSF7LbyxYt7ZqnlHcASH4Ta%2bCjpVi8J9k&quot;\n                         &quot;KIt3Vfjc9JeaduYZo6uR1YEkcOz7FxuchTPT1EZ4RYfIZNFvqtb&quot;\n                         &quot;OuXeIaVsU3ag0CdUWJbd6ky2bVE4MjQid3BItTNOBxIon%2fdFs&quot;\n                         &quot;BY%2b2O7ZS8DzonGXdBNBWZIjJuJTL0UtldEEOqP0k743PWs%2b&quot;\n                         &quot;VRKlc9FnORUbQDV69EMVfWfDx4hHY9RpizuBjT6Q6rTWMtuI5%2b&quot;\n                         &quot;e0uqrUelATzG0iE3V0eNjScxG2nfbtxul%2fAozZ0Uq9HJIrFenV&quot;\n                         &quot;d7fIcsQuQM7olHxevztvMsewqMD7rYQohEWz3b6XUlrxBgvMsgPn&quot;\n                         &quot;SUsJBZEFbdR7bU%2fffzRVDbKs%3d; __jdv&#x3D;122270672|t.zouk&quot;\n                         &quot;ankan.com|t_308072010_|tuiguang|e2489e16fc274b9c80d3c&quot;\n                         &quot;4c7ada3564b|1669706793151; __jda&#x3D;122270672.197697224&quot;\n                         &quot;1.1652110310.1669706793.1669710861.14; 3AB9D23F7A4B3C&quot;\n                         &quot;9B&#x3D;OQL3PN3MRI3XBYLOXXERCIQ7Z57OXAGLHRONDSZ5M7ODU6HF3P&quot;\n                         &quot;VE3ABDTPY4CT2AFP33IB7U4SWYLP7AIDHRRHCDQE&quot;\n               &#125;\n    response &#x3D; requests.get(url, headers&#x3D;headers)\n    soup &#x3D; BeautifulSoup(response.text, &quot;lxml&quot;)\n    divs &#x3D; soup.find_all(&#39;p&#39;)\n    count &#x3D; str(divs)\n    pattern &#x3D; re.compile(&#39;.*?&quot;CommentCountStr&quot;:&quot;(.*?)&quot;,&quot;CommentCount&quot;&#39;)\n    result &#x3D; re.findall(pattern, count)\n    return result\n\ndef get_inside(product_id):\n    url &#x3D; &quot;https:&#x2F;&#x2F;item.jd.com&#x2F;&quot;+str(product_id)+&quot;.html&quot;\n    headers &#x3D; &#123;&quot;user-agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) &quot;\n                             &quot;AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&quot;\n                             &quot;&#x2F;107.0.0.0 Safari&#x2F;537.36 Edg&#x2F;107.0.1418.62&quot;&#125;\n\n    response &#x3D; requests.get(url, headers&#x3D;headers)\n    text &#x3D; response.text\n    html &#x3D; etree.HTML(text)\n    list &#x3D; html.xpath(&#39;&#x2F;&#x2F;html&#x2F;&#x2F;body&#x2F;&#x2F;div[9]&#x2F;&#x2F;div[@class&#x3D;&quot;tab-con&quot;]&#x2F;&#x2F;&#39;\n                      &#39;div[@class&#x3D;&quot;hide&quot;]&#x2F;&#x2F;div[@class&#x3D;&quot;Ptable&quot;]&#x2F;&#x2F;&#39;\n                      &#39;div[@class&#x3D;&quot;Ptable-item&quot;]&#x2F;&#x2F;dl[@class&#x3D;&quot;clearfix&quot;]&#x2F;&#x2F;text()&#39;)\n    result &#x3D; [x.strip() for x in list if x.strip() !&#x3D; &#39;&#39;]\n    return result\n\nf &#x3D; open(&quot;.&#x2F;京东商城黑茶200条信息1.txt&quot;, &#39;a+&#39;)\ndef parse_one_page(text):\n    This_page &#x3D; &#123;&#125;\n    html &#x3D; etree.HTML(text)\n    items &#x3D; html.xpath(&#39;&#x2F;&#x2F;html&#x2F;&#x2F;body&#x2F;&#x2F;div[@id&#x3D;&quot;J_goodsList&quot;]&#x2F;ul&#x2F;li&#39;)\n    for item in items:\n        This_page[&quot;商品描述&quot;] &#x3D; item.xpath(&#39;.&#x2F;&#x2F;div[@class&#x3D;&quot;p-name p-name-type-2&quot;]&#x2F;&#x2F;a&#x2F;&#x2F;em&#x2F;text()&#39;)[0].replace(&quot;\\n&quot;,&quot;&quot;).replace(&quot;\\t&quot;,&quot;&quot;)\n        This_page[&quot;商铺名字&quot;] &#x3D; item.xpath(&#39;.&#x2F;&#x2F;div[@class&#x3D;&quot;p-shop&quot;]&#x2F;&#x2F;span[@class&#x3D;&quot;J_im_icon&quot;]&#x2F;&#x2F;a&#x2F;text()&#39;)\n        This_page[&quot;商品价格&quot;] &#x3D; item.xpath(&#39;.&#x2F;&#x2F;div[@class&#x3D;&quot;p-price&quot;]&#x2F;&#x2F;strong&#x2F;&#x2F;i&#x2F;text()&#39;)[0]\n        product_id &#x3D; item.xpath(&#39;.&#x2F;&#x2F;div[@class&#x3D;&quot;p-commit&quot;]&#x2F;strong&#x2F;a&#x2F;@id&#39;)[0].replace(&quot;J_comment_&quot;, &quot;&quot;)\n        This_page[&quot;评价数量&quot;] &#x3D; get_id(product_id)\n        This_page[&quot;商品规格&quot;] &#x3D; get_inside(product_id)\n        print(This_page)\n        f.write(json.dumps(This_page,ensure_ascii&#x3D;False))\n        f.write((&quot;\\n&quot;))\n\n\ndef main():\n\n    for i in range(1,17,2):\n        url &#x3D; &quot;https:&#x2F;&#x2F;search.jd.com&#x2F;Search?keyword&#x3D;%E9%BB%91%E8%8C%B6&quot; \\\n              &quot;&amp;qrst&#x3D;1&amp;wq&#x3D;%E9%BB%91%E8%8C%B6&amp;stock&#x3D;1&amp;&quot; \\\n              &quot;pvid&#x3D;fbe350dcff064f63bd187e1d1ff18f0b&amp;page&#x3D;&quot;+str(i)\n        headers &#x3D; &#123;&quot;user-agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; &quot;\n                                 &quot;x64) AppleWebKit&#x2F;537.36 (KHTML, like &quot;\n                                 &quot;Gecko) Chrome&#x2F;107.0.0.0 Safari&#x2F;537.36 &quot;\n                                 &quot;Edg&#x2F;107.0.1418.56&quot;&#125;\n        text &#x3D; get_one_page(url,headers)\n        This_page &#x3D; parse_one_page(text)\n    f.close()\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    main()\n\n\n\n输出D:\\coder\\randomnumbers\\venv\\Scripts\\python.exe D:&#x2F;coder&#x2F;randomnumbers&#x2F;test1.py\n&#123;&#39;商品描述&#39;: &#39;白沙溪 湖南老字号安化&#39;, &#39;商铺名字&#39;: [&#39;白沙溪官方旗舰店&#39;], &#39;商品价格&#39;: &#39;350.00&#39;, &#39;评价数量&#39;: [&#39;1万+&#39;], &#39;商品规格&#39;: [&#39;储存方法&#39;, &#39;避光；密封；防潮&#39;, &#39;保质期&#39;, &#39;可长期存放，越陈越香&#39;, &#39;生产许可证号&#39;, &#39;SC11443092300115&#39;, &#39;产品标准号&#39;, &#39;见产品外包装标示&#39;, &#39;净含量&#39;, &#39;1000g&#39;]&#125;\n&#123;&#39;商品描述&#39;: &#39;湘丰 茶叶湖南安化&#39;, &#39;商铺名字&#39;: [&#39;湘丰茶叶旗舰店&#39;], &#39;商品价格&#39;: &#39;98.00&#39;, &#39;评价数量&#39;: [&#39;10万+&#39;], &#39;商品规格&#39;: [&#39;生产许可证号&#39;, &#39;SC11443092301023&#39;, &#39;储存方法&#39;, &#39;避光&#39;, &#39;产品标准号&#39;, &#39;GB&#x2F;T 9833.3&#39;, &#39;保质期&#39;, &#39;360000&#39;, &#39;采摘年份&#39;, &#39;2018年&#39;, &#39;净含量&#39;, &#39;1000g&#39;]&#125;\n&#123;&#39;商品描述&#39;: &#39;七春茶叶 六堡茶&#39;, &#39;商铺名字&#39;: [&#39;七春茶业京东自营旗舰店&#39;], &#39;商品价格&#39;: &#39;99.00&#39;, &#39;评价数量&#39;: [&#39;1万+&#39;], &#39;商品规格&#39;: [&#39;生产许可证号&#39;, &#39;SC11445042100174&#39;, &#39;产品标准号&#39;, &#39;GB&#x2F;T 32719.4-2016&#39;, &#39;储存方法&#39;, &#39;防潮；干燥；常温保存&#39;, &#39;净含量&#39;, &#39;250g&#39;, &#39;保质期&#39;, &#39;在符合贮存条件适宜长期保存&#39;]&#125;\n&#123;&#39;商品描述&#39;: &#39;七春茶叶 安化&#39;, &#39;商铺名字&#39;: [&#39;七春茶业京东自营旗舰店&#39;], &#39;商品价格&#39;: &#39;68.00&#39;, &#39;评价数量&#39;: [&#39;2000+&#39;], &#39;商品规格&#39;: [&#39;生产许可证号&#39;, &#39;QS430914010582&#39;, &#39;产品标准号&#39;, &#39;GB&#x2F;T 9833.3&#39;, &#39;净含量&#39;, &#39;1000g&#39;, &#39;采摘年份&#39;, &#39;2016年&#39;, &#39;保质期&#39;, &#39;符合储存条件可长期保存，品质更佳&#39;, &#39;储存方法&#39;, &#39;避光；防异味；干燥；通风&#39;]&#125;\n&#123;&#39;商品描述&#39;: &#39;安化&#39;, &#39;商铺名字&#39;: [&#39;安化黑茶旗舰店&#39;], &#39;商品价格&#39;: &#39;88.00&#39;, &#39;评价数量&#39;: [&#39;1万+&#39;], &#39;商品规格&#39;: [&#39;储存方法&#39;, &#39;干燥；通风&#39;, &#39;产品标准号&#39;, &#39;SC11443092301322&#39;, &#39;保质期&#39;, &#39;长期保存&#39;, &#39;生产许可证号&#39;, &#39;SC11443092301322&#39;, &#39;净含量&#39;, &#39;200g&#39;]&#125;\n\n......\n&#123;&#39;商品描述&#39;: &#39;七春 茶叶六堡茶&#39;, &#39;商铺名字&#39;: [&#39;七春茶业京东自营旗舰店&#39;], &#39;商品价格&#39;: &#39;268.00&#39;, &#39;评价数量&#39;: [&#39;1万+&#39;], &#39;商品规格&#39;: []&#125;\n&#123;&#39;商品描述&#39;: &#39;【白沙溪】湖南老字号安化&#39;, &#39;商铺名字&#39;: [&#39;白沙溪官方旗舰店&#39;], &#39;商品价格&#39;: &#39;165.00&#39;, &#39;评价数量&#39;: [&#39;200+&#39;], &#39;商品规格&#39;: []&#125;\n\n进程已结束,退出代码0\n\n\n修改·其二代码import requests\nfrom lxml import etree\nimport json\nfrom bs4 import BeautifulSoup\nimport re\nimport time\n\ndef get_one_page(url,headers):\n    try:\n        response &#x3D; requests.get(url,headers&#x3D;headers)\n        if response.status_code &#x3D;&#x3D; 200:\n            response.encoding &#x3D; &#39;utf-8&#39;\n            return response.text\n        return None\n    except RequestException:\n        return None\n\ndef get_id(product_id):\n    url &#x3D; &quot;https:&#x2F;&#x2F;club.jd.com&#x2F;comment&#x2F;productCommentSummaries.action&quot; \\\n          &quot;?referenceIds&#x3D;&quot;+str(product_id)+&quot;&amp;callback&#x3D;jQuery8827474&quot; \\\n                                           &quot;&amp;_&#x3D;1615298058081&quot;\n\n    headers &#x3D; &#123;&quot;user-agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; &quot;\n                             &quot;x64) AppleWebKit&#x2F;537.36 (KHTML, like &quot;\n                             &quot;Gecko) Chrome&#x2F;107.0.0.0 Safari&#x2F;537.36 &quot;\n                             &quot;Edg&#x2F;107.0.1418.56&quot;,\n               &quot;Cookie&quot;: &quot;__jdu&#x3D;1976972241; shshshfpa&#x3D;a2dcb9a2-4610-bcf&quot;\n                         &quot;9-11fb-d6121b1432cf-1652110313; shshshfpb&#x3D;nvrX&quot;\n                         &quot;JxBCCj0eG8UiLp9MCww; areaId&#x3D;18; ipLoc-djd&#x3D;18-14&quot;\n                         &quot;82-0-0; PCSYCityID&#x3D;CN_430000_430100_0; __jdc&#x3D;122&quot;\n                         &quot;270672; shshshfp&#x3D;0bcaf8cf9b6bcada873c2260d4c1fce2;&quot;\n                         &quot; unpl&#x3D;JF8EAJJnNSttDEhRDBNWGxVHGV5SWw4AGR4COmVXUQ9&quot;\n                         &quot;eGwFVGQYcF0N7XlVdXhRLFx9sbxRUWVNIUw4ZAisSEXtfVVdc&quot;\n                         &quot;DkgWA25XNVNdUQYVV1YyGBIgS1xkXlUOTB8FbGQAVG1Ze1MFEj&quot;\n                         &quot;IrIhVLXFVaXg5NFAtfZjVWXFlOXAcTARITIAAzVRNdAE0QC2lk&quot;\n                         &quot;BlFdaEpkBg; CCC_SE&#x3D;ADC_8UsmEi14MQp79Oa3KCgpDie2Uak%&quot;\n                         &quot;2fjhKDLxxPgJ1YAwwxFkHyVFPSLAMk05mHrTpGuzccWqxZ5XHh&quot;\n                         &quot;wbeDqXpRIFxCZ%2bgleHpZhqmkVSbPox%2fcQt%2bUunIAYjzVE&quot;\n                         &quot;U%2fWby8i4N0SVJYFSF7LbyxYt7ZqnlHcASH4Ta%2bCjpVi8J9k&quot;\n                         &quot;KIt3Vfjc9JeaduYZo6uR1YEkcOz7FxuchTPT1EZ4RYfIZNFvqtb&quot;\n                         &quot;OuXeIaVsU3ag0CdUWJbd6ky2bVE4MjQid3BItTNOBxIon%2fdFs&quot;\n                         &quot;BY%2b2O7ZS8DzonGXdBNBWZIjJuJTL0UtldEEOqP0k743PWs%2b&quot;\n                         &quot;VRKlc9FnORUbQDV69EMVfWfDx4hHY9RpizuBjT6Q6rTWMtuI5%2b&quot;\n                         &quot;e0uqrUelATzG0iE3V0eNjScxG2nfbtxul%2fAozZ0Uq9HJIrFenV&quot;\n                         &quot;d7fIcsQuQM7olHxevztvMsewqMD7rYQohEWz3b6XUlrxBgvMsgPn&quot;\n                         &quot;SUsJBZEFbdR7bU%2fffzRVDbKs%3d; __jdv&#x3D;122270672|t.zouk&quot;\n                         &quot;ankan.com|t_308072010_|tuiguang|e2489e16fc274b9c80d3c&quot;\n                         &quot;4c7ada3564b|1669706793151; __jda&#x3D;122270672.197697224&quot;\n                         &quot;1.1652110310.1669706793.1669710861.14; 3AB9D23F7A4B3C&quot;\n                         &quot;9B&#x3D;OQL3PN3MRI3XBYLOXXERCIQ7Z57OXAGLHRONDSZ5M7ODU6HF3P&quot;\n                         &quot;VE3ABDTPY4CT2AFP33IB7U4SWYLP7AIDHRRHCDQE&quot;\n               &#125;\n    response &#x3D; requests.get(url, headers&#x3D;headers)\n    soup &#x3D; BeautifulSoup(response.text, &quot;lxml&quot;)\n    divs &#x3D; soup.find_all(&#39;p&#39;)\n    count &#x3D; str(divs)\n    pattern &#x3D; re.compile(&#39;.*?&quot;CommentCountStr&quot;:&quot;(.*?)&quot;,&quot;CommentCount&quot;&#39;)\n    result &#x3D; re.findall(pattern, count)\n    return result\n\ndef get_inside(product_id):\n    url &#x3D; &quot;https:&#x2F;&#x2F;item.jd.com&#x2F;&quot;+str(product_id)+&quot;.html&quot;\n    headers &#x3D; &#123;&quot;user-agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) &quot;\n                             &quot;AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&quot;\n                             &quot;&#x2F;107.0.0.0 Safari&#x2F;537.36 Edg&#x2F;107.0.1418.62&quot;,\n               &quot;cookie&quot;: &quot;__jdu&#x3D;1976972241; shshshfpa&#x3D;a2dcb9a2-4610-bcf9-11fb&quot;\n                         &quot;-d6121b1432cf-1652110313; shshshfpb&#x3D;nvrXJxBCCj0eG8Ui&quot;\n                         &quot;Lp9MCww; areaId&#x3D;18; PCSYCityID&#x3D;CN_430000_430100_0; &quot;\n                         &quot;unpl&#x3D;JF8EAJJnNSttDEhRDBNWGxVHGV5SWw4AGR4COmVXUQ9eGwFV&quot;\n                         &quot;GQYcF0N7XlVdXhRLFx9sbxRUWVNIUw4ZAisSEXtfVVdcDkgWA25XN&quot;\n                         &quot;VNdUQYVV1YyGBIgS1xkXlUOTB8FbGQAVG1Ze1MFEjIrIhVLXFVaXg5&quot;\n                         &quot;NFAtfZjVWXFlOXAcTARITIAAzVRNdAE0QC2lkBlFdaEpkBg; __jdv&quot;\n                         &quot;&#x3D;122270672|t.zoukankan.com|t_308072010_|tuiguang|e2489&quot;\n                         &quot;e16fc274b9c80d3c4c7ada3564b|1669706793151; ipLoc-djd&#x3D;18&quot;\n                         &quot;-1482-48942-49058; jsavif&#x3D;0; shshshfp&#x3D;4396dd56f2e336f6c&quot;\n                         &quot;0d0023316880bbb; jsavif&#x3D;0; __jdc&#x3D;122270672; ip_cityCode&quot;\n                         &quot;&#x3D;1482; __jda&#x3D;122270672.1976972241.1652110310.1669905854&quot;\n                         &quot;.1669908237.18; wlfstk_smdl&#x3D;jbvartkoy6uk73vmmr01i1gwywh&quot;\n                         &quot;8cksv; pinId&#x3D;WMysR__pDRvbc0zQc0nuqbV9-x-f3wj7; pin&#x3D;jd_5&quot;\n                         &quot;c02c5f951cdf; unick&#x3D;nh6666666; ceshi3.com&#x3D;000; _tp&#x3D;rVPWM&quot;\n                         &quot;kjk%2BhynCA8DQqV2Z00XZk11GM02ZTxnjvALX6M%3D; _pst&#x3D;jd_5c0&quot;\n                         &quot;2c5f951cdf; token&#x3D;12ee484afd23fc81fa43deffb298ca34,3,927&quot;\n                         &quot;727; __tk&#x3D;2ubX1zrurUS4KwsAKz1C2u1C1w15qUf4qYrWrUbXqzM4qA&quot;\n                         &quot;a4ru2s1n,3,927727; thor&#x3D;572D5C511771350857F36E797E36B313&quot;\n                         &quot;A5A71A4179DC63403E8B40239A892F2D88A262A987639B119D0613C4&quot;\n                         &quot;35E424A75800EE35DFAFD4B2EA16EEB7F8BDEAED7FB93F61A7229AD0&quot;\n                         &quot;F57C1C1010CEAEE6D1D3190F443E9BA9C5AE7357464E37949BAAD23F&quot;\n                         &quot;2BB748AF019C5476DC41D56F5A82A6228664ED79D67E25E5ABF75442&quot;\n                         &quot;E925A261414CD628BE136F150E5DD17D384F7246C2FB21DB16707DB8&quot;\n                         &quot;71C21A0A; user-key&#x3D;14490081-9b45-4028-b8a2-ca60da6a744b; &quot;\n                         &quot;cn&#x3D;15; __jdb&#x3D;122270672.17.1976972241|18.1669908237; shshs&quot;\n                         &quot;hsID&#x3D;6d565320f709e2e89ba01c4c723c55d6_11_1669908836767; 3&quot;\n                         &quot;AB9D23F7A4B3C9B&#x3D;OQL3PN3MRI3XBYLOXXERCIQ7Z57OXAGLHRONDSZ5M&quot;\n                         &quot;7ODU6HF3PVE3ABDTPY4CT2AFP33IB7U4SWYLP7AIDHRRHCDQE&quot;&#125;\n\n    response &#x3D; requests.get(url, headers&#x3D;headers)\n    text &#x3D; response.text\n    html &#x3D; etree.HTML(text)\n    list &#x3D; html.xpath(&#39;&#x2F;&#x2F;html&#x2F;&#x2F;body&#x2F;&#x2F;div[9]&#x2F;&#x2F;div[@class&#x3D;&quot;tab-con&quot;]&#x2F;&#x2F;&#39;\n                      &#39;div[@class&#x3D;&quot;hide&quot;]&#x2F;&#x2F;div[@class&#x3D;&quot;Ptable&quot;]&#x2F;&#x2F;&#39;\n                      &#39;div[@class&#x3D;&quot;Ptable-item&quot;]&#x2F;&#x2F;dl[@class&#x3D;&quot;clearfix&quot;]&#x2F;&#x2F;text()&#39;)\n    result &#x3D; [x.strip() for x in list if x.strip() !&#x3D; &#39;&#39;]\n    return result\n\nf &#x3D; open(&quot;.&#x2F;京东商城黑茶200条信息1.txt&quot;, &#39;a+&#39;)\ndef parse_one_page(text):\n    This_page &#x3D; &#123;&#125;\n    html &#x3D; etree.HTML(text)\n    items &#x3D; html.xpath(&#39;&#x2F;&#x2F;html&#x2F;&#x2F;body&#x2F;&#x2F;div[@id&#x3D;&quot;J_goodsList&quot;]&#x2F;ul&#x2F;li&#39;)\n    for item in items:\n        This_page[&quot;商品描述&quot;] &#x3D; item.xpath(&#39;.&#x2F;&#x2F;div[@class&#x3D;&quot;p-name p-name-type-2&quot;]&#x2F;&#x2F;a&#x2F;&#x2F;em&#x2F;text()&#39;)[0].replace(&quot;\\n&quot;,&quot;&quot;).replace(&quot;\\t&quot;,&quot;&quot;)\n        This_page[&quot;商铺名字&quot;] &#x3D; item.xpath(&#39;.&#x2F;&#x2F;div[@class&#x3D;&quot;p-shop&quot;]&#x2F;&#x2F;span[@class&#x3D;&quot;J_im_icon&quot;]&#x2F;&#x2F;a&#x2F;text()&#39;)\n        This_page[&quot;商品价格&quot;] &#x3D; item.xpath(&#39;.&#x2F;&#x2F;div[@class&#x3D;&quot;p-price&quot;]&#x2F;&#x2F;strong&#x2F;&#x2F;i&#x2F;text()&#39;)[0]\n        product_id &#x3D; item.xpath(&#39;.&#x2F;&#x2F;div[@class&#x3D;&quot;p-commit&quot;]&#x2F;strong&#x2F;a&#x2F;@id&#39;)[0].replace(&quot;J_comment_&quot;, &quot;&quot;)\n        This_page[&quot;评价数量&quot;] &#x3D; get_id(product_id)\n        This_page[&quot;商品规格&quot;] &#x3D; get_inside(product_id)\n        print(This_page)\n        f.write(json.dumps(This_page,ensure_ascii&#x3D;False))\n        f.write((&quot;\\n&quot;))\n\n\ndef main():\n\n    for i in range(1,17,2):\n        url &#x3D; &quot;https:&#x2F;&#x2F;search.jd.com&#x2F;Search?keyword&#x3D;%E9%BB%91%E8%8C%B6&quot; \\\n              &quot;&amp;qrst&#x3D;1&amp;wq&#x3D;%E9%BB%91%E8%8C%B6&amp;stock&#x3D;1&amp;&quot; \\\n              &quot;pvid&#x3D;fbe350dcff064f63bd187e1d1ff18f0b&amp;page&#x3D;&quot;+str(i)\n        headers &#x3D; &#123;&quot;user-agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; &quot;\n                                 &quot;x64) AppleWebKit&#x2F;537.36 (KHTML, like &quot;\n                                 &quot;Gecko) Chrome&#x2F;107.0.0.0 Safari&#x2F;537.36 &quot;\n                                 &quot;Edg&#x2F;107.0.1418.56&quot;&#125;\n        text &#x3D; get_one_page(url,headers)\n        This_page &#x3D; parse_one_page(text)\n        #time.sleep(1)\n    f.close()\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    main()\n\n\n\n输出D:\\coder\\randomnumbers\\venv\\Scripts\\python.exe D:&#x2F;coder&#x2F;randomnumbers&#x2F;test1.py\n&#123;&#39;商品描述&#39;: &#39;中粮集团中茶百年木仓 安化&#39;, &#39;商铺名字&#39;: [&#39;中茶黑茶京东自营旗舰店&#39;], &#39;商品价格&#39;: &#39;129.70&#39;, &#39;评价数量&#39;: [&#39;1万+&#39;], &#39;商品规格&#39;: [&#39;加工工艺&#39;, &#39;发酵；渥堆&#39;, &#39;储存方法&#39;, &#39;干燥；防潮；防异味&#39;, &#39;净含量&#39;, &#39;1000g&#39;, &#39;产品标准号&#39;, &#39;GB&#x2F;T 32719.5&#39;, &#39;生产许可证号&#39;, &#39;SC11443092300238&#39;, &#39;保质期&#39;, &#39;详见包装&#39;]&#125;\n&#123;&#39;商品描述&#39;: &#39;七春茶叶 六堡茶&#39;, &#39;商铺名字&#39;: [&#39;七春茶业京东自营旗舰店&#39;], &#39;商品价格&#39;: &#39;93.00&#39;, &#39;评价数量&#39;: [&#39;1万+&#39;], &#39;商品规格&#39;: [&#39;生产许可证号&#39;, &#39;SC11445042100174&#39;, &#39;产品标准号&#39;, &#39;GB&#x2F;T 32719.4-2016&#39;, &#39;储存方法&#39;, &#39;防潮；干燥；常温保存&#39;, &#39;净含量&#39;, &#39;250g&#39;, &#39;保质期&#39;, &#39;在符合贮存条件适宜长期保存&#39;]&#125;\n\n\n......\n&#123;&#39;商品描述&#39;: &#39;白沙溪 湖南安化&#39;, &#39;商铺名字&#39;: [], &#39;商品价格&#39;: &#39;470.00&#39;, &#39;评价数量&#39;: [&#39;0&#39;], &#39;商品规格&#39;: [&#39;保质期&#39;, &#39;长期&#39;, &#39;净含量&#39;, &#39;750g&#39;, &#39;储存方法&#39;, &#39;密封；防潮；干燥；避光&#39;]&#125;\n\n进程已结束,退出代码0\n\n\n依托答辩代码import requests\nfrom lxml import etree\nimport json\nfrom bs4 import BeautifulSoup\nimport re\nimport time\nimport urllib.error\n\ndef get_id(product_id):\n    url &#x3D; &quot;https:&#x2F;&#x2F;club.jd.com&#x2F;comment&#x2F;productCommentSummaries.action&quot; \\\n          &quot;?referenceIds&#x3D;&quot;+str(product_id)+&quot;&amp;callback&#x3D;jQuery8827474&quot; \\\n                                           &quot;&amp;_&#x3D;1615298058081&quot;\n    # 发送访问请问的head文件\n    # 每个电脑每个京东账号对应的head文件不同，获取方式参考帖子https:&#x2F;&#x2F;blog.csdn.net&#x2F;weixin_41998772&#x2F;article&#x2F;details&#x2F;106476166\n    #\n\n    headers &#x3D; &#123;&quot;user-agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; &quot;     \n                             &quot;x64) AppleWebKit&#x2F;537.36 (KHTML, like &quot;\n                             &quot;Gecko) Chrome&#x2F;107.0.0.0 Safari&#x2F;537.36 &quot;\n                             &quot;Edg&#x2F;107.0.1418.56&quot;,\n               &quot;Cookie&quot;: &quot;__jdu&#x3D;1976972241; shshshfpa&#x3D;a2dcb9a2-4610-bcf&quot;\n                         &quot;9-11fb-d6121b1432cf-1652110313; shshshfpb&#x3D;nvrX&quot;\n                         &quot;JxBCCj0eG8UiLp9MCww; areaId&#x3D;18; ipLoc-djd&#x3D;18-14&quot;\n                         &quot;82-0-0; PCSYCityID&#x3D;CN_430000_430100_0; __jdc&#x3D;122&quot;\n                         &quot;270672; shshshfp&#x3D;0bcaf8cf9b6bcada873c2260d4c1fce2;&quot;\n                         &quot; unpl&#x3D;JF8EAJJnNSttDEhRDBNWGxVHGV5SWw4AGR4COmVXUQ9&quot;\n                         &quot;eGwFVGQYcF0N7XlVdXhRLFx9sbxRUWVNIUw4ZAisSEXtfVVdc&quot;\n                         &quot;DkgWA25XNVNdUQYVV1YyGBIgS1xkXlUOTB8FbGQAVG1Ze1MFEj&quot;\n                         &quot;IrIhVLXFVaXg5NFAtfZjVWXFlOXAcTARITIAAzVRNdAE0QC2lk&quot;\n                         &quot;BlFdaEpkBg; CCC_SE&#x3D;ADC_8UsmEi14MQp79Oa3KCgpDie2Uak%&quot;\n                         &quot;2fjhKDLxxPgJ1YAwwxFkHyVFPSLAMk05mHrTpGuzccWqxZ5XHh&quot;\n                         &quot;wbeDqXpRIFxCZ%2bgleHpZhqmkVSbPox%2fcQt%2bUunIAYjzVE&quot;\n                         &quot;U%2fWby8i4N0SVJYFSF7LbyxYt7ZqnlHcASH4Ta%2bCjpVi8J9k&quot;\n                         &quot;KIt3Vfjc9JeaduYZo6uR1YEkcOz7FxuchTPT1EZ4RYfIZNFvqtb&quot;\n                         &quot;OuXeIaVsU3ag0CdUWJbd6ky2bVE4MjQid3BItTNOBxIon%2fdFs&quot;\n                         &quot;BY%2b2O7ZS8DzonGXdBNBWZIjJuJTL0UtldEEOqP0k743PWs%2b&quot;\n                         &quot;VRKlc9FnORUbQDV69EMVfWfDx4hHY9RpizuBjT6Q6rTWMtuI5%2b&quot;\n                         &quot;e0uqrUelATzG0iE3V0eNjScxG2nfbtxul%2fAozZ0Uq9HJIrFenV&quot;\n                         &quot;d7fIcsQuQM7olHxevztvMsewqMD7rYQohEWz3b6XUlrxBgvMsgPn&quot;\n                         &quot;SUsJBZEFbdR7bU%2fffzRVDbKs%3d; __jdv&#x3D;122270672|t.zouk&quot;\n                         &quot;ankan.com|t_308072010_|tuiguang|e2489e16fc274b9c80d3c&quot;\n                         &quot;4c7ada3564b|1669706793151; __jda&#x3D;122270672.197697224&quot;\n                         &quot;1.1652110310.1669706793.1669710861.14; 3AB9D23F7A4B3C&quot;\n                         &quot;9B&#x3D;OQL3PN3MRI3XBYLOXXERCIQ7Z57OXAGLHRONDSZ5M7ODU6HF3P&quot;\n                         &quot;VE3ABDTPY4CT2AFP33IB7U4SWYLP7AIDHRRHCDQE&quot;\n               &#125;\n    response &#x3D; requests.get(url, headers&#x3D;headers)\n    # response.text 为响应的网页源码内容\n    soup &#x3D; BeautifulSoup(response.text, &quot;lxml&quot;)\n    divs &#x3D; soup.find_all(&#39;p&#39;)\n    count &#x3D; str(divs)\n    pattern &#x3D; re.compile(&#39;.*?&quot;CommentCountStr&quot;:&quot;(.*?)&quot;,&quot;CommentCount&quot;&#39;)\n    result &#x3D; re.findall(pattern, count)\n    return result\n\n\n\ndef get_one_page(url,headers):     #获得网页\n    try:\n        response &#x3D; requests.get(url,headers&#x3D;headers)\n        if response.status_code &#x3D;&#x3D; 200:\n            response.encoding &#x3D; &#39;utf-8&#39;\n            return response.text\n        return None\n    except RequestException:\n        return None\n\n\ndef get_inside(product_id):#获取子目录\n    url &#x3D; &quot;https:&#x2F;&#x2F;item.jd.com&#x2F;&quot;+str(product_id)+&quot;.html&quot;\n    headers &#x3D; &#123;&quot;user-agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) &quot;\n                             &quot;AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&quot;\n                             &quot;&#x2F;107.0.0.0 Safari&#x2F;537.36 Edg&#x2F;107.0.1418.62&quot;,\n               &quot;cookie&quot;: &quot;__jdu&#x3D;1976972241; shshshfpa&#x3D;a2dcb9a2-4610-bcf9-11fb&quot;\n                         &quot;-d6121b1432cf-1652110313; shshshfpb&#x3D;nvrXJxBCCj0eG8Ui&quot;\n                         &quot;Lp9MCww; areaId&#x3D;18; PCSYCityID&#x3D;CN_430000_430100_0; &quot;\n                         &quot;unpl&#x3D;JF8EAJJnNSttDEhRDBNWGxVHGV5SWw4AGR4COmVXUQ9eGwFV&quot;\n                         &quot;GQYcF0N7XlVdXhRLFx9sbxRUWVNIUw4ZAisSEXtfVVdcDkgWA25XN&quot;\n                         &quot;VNdUQYVV1YyGBIgS1xkXlUOTB8FbGQAVG1Ze1MFEjIrIhVLXFVaXg5&quot;\n                         &quot;NFAtfZjVWXFlOXAcTARITIAAzVRNdAE0QC2lkBlFdaEpkBg; __jdv&quot;\n                         &quot;&#x3D;122270672|t.zoukankan.com|t_308072010_|tuiguang|e2489&quot;\n                         &quot;e16fc274b9c80d3c4c7ada3564b|1669706793151; ipLoc-djd&#x3D;18&quot;\n                         &quot;-1482-48942-49058; jsavif&#x3D;0; shshshfp&#x3D;4396dd56f2e336f6c&quot;\n                         &quot;0d0023316880bbb; jsavif&#x3D;0; __jdc&#x3D;122270672; ip_cityCode&quot;\n                         &quot;&#x3D;1482; __jda&#x3D;122270672.1976972241.1652110310.1669905854&quot;\n                         &quot;.1669908237.18; wlfstk_smdl&#x3D;jbvartkoy6uk73vmmr01i1gwywh&quot;\n                         &quot;8cksv; pinId&#x3D;WMysR__pDRvbc0zQc0nuqbV9-x-f3wj7; pin&#x3D;jd_5&quot;\n                         &quot;c02c5f951cdf; unick&#x3D;nh6666666; ceshi3.com&#x3D;000; _tp&#x3D;rVPWM&quot;\n                         &quot;kjk%2BhynCA8DQqV2Z00XZk11GM02ZTxnjvALX6M%3D; _pst&#x3D;jd_5c0&quot;\n                         &quot;2c5f951cdf; token&#x3D;12ee484afd23fc81fa43deffb298ca34,3,927&quot;\n                         &quot;727; __tk&#x3D;2ubX1zrurUS4KwsAKz1C2u1C1w15qUf4qYrWrUbXqzM4qA&quot;\n                         &quot;a4ru2s1n,3,927727; thor&#x3D;572D5C511771350857F36E797E36B313&quot;\n                         &quot;A5A71A4179DC63403E8B40239A892F2D88A262A987639B119D0613C4&quot;\n                         &quot;35E424A75800EE35DFAFD4B2EA16EEB7F8BDEAED7FB93F61A7229AD0&quot;\n                         &quot;F57C1C1010CEAEE6D1D3190F443E9BA9C5AE7357464E37949BAAD23F&quot;\n                         &quot;2BB748AF019C5476DC41D56F5A82A6228664ED79D67E25E5ABF75442&quot;\n                         &quot;E925A261414CD628BE136F150E5DD17D384F7246C2FB21DB16707DB8&quot;\n                         &quot;71C21A0A; user-key&#x3D;14490081-9b45-4028-b8a2-ca60da6a744b; &quot;\n                         &quot;cn&#x3D;15; __jdb&#x3D;122270672.17.1976972241|18.1669908237; shshs&quot;\n                         &quot;hsID&#x3D;6d565320f709e2e89ba01c4c723c55d6_11_1669908836767; 3&quot;\n                         &quot;AB9D23F7A4B3C9B&#x3D;OQL3PN3MRI3XBYLOXXERCIQ7Z57OXAGLHRONDSZ5M&quot;\n                         &quot;7ODU6HF3PVE3ABDTPY4CT2AFP33IB7U4SWYLP7AIDHRRHCDQE&quot;&#125;\n\n    response &#x3D; requests.get(url, headers&#x3D;headers)\n    text &#x3D; response.text\n    html &#x3D; etree.HTML(text)\n    list &#x3D; html.xpath(&#39;&#x2F;&#x2F;html&#x2F;&#x2F;body&#x2F;&#x2F;div[9]&#x2F;&#x2F;div[@class&#x3D;&quot;tab-con&quot;]&#x2F;&#x2F;&#39;\n                      &#39;div[@class&#x3D;&quot;hide&quot;]&#x2F;&#x2F;div[@class&#x3D;&quot;Ptable&quot;]&#x2F;&#x2F;&#39;\n                      &#39;div[@class&#x3D;&quot;Ptable-item&quot;]&#x2F;&#x2F;dl[@class&#x3D;&quot;clearfix&quot;]&#x2F;&#x2F;text()&#39;)\n    result &#x3D; [x.strip() for x in list if x.strip() !&#x3D; &#39;&#39;]\n    return result\n\n\ndef parse_one_page(text):  #检索当前页并打印\n    This_page &#x3D; &#123;&#125;\n    html &#x3D; etree.HTML(text)\n    items &#x3D; html.xpath(&#39;&#x2F;&#x2F;html&#x2F;&#x2F;body&#x2F;&#x2F;div[@id&#x3D;&quot;J_goodsList&quot;]&#x2F;ul&#x2F;li&#39;)\n    for item in items:\n        This_page[&quot;商品说明&quot;] &#x3D; item.xpath(&#39;.&#x2F;&#x2F;div[@class&#x3D;&quot;p-name p-name-type-2&quot;]&#x2F;&#x2F;a&#x2F;&#x2F;em&#x2F;text()&#39;)[0].replace(&quot;\\n&quot;,&quot;&quot;).replace(&quot;\\t&quot;,&quot;&quot;)\n        This_page[&quot;商家名称&quot;] &#x3D; item.xpath(&#39;.&#x2F;&#x2F;div[@class&#x3D;&quot;p-shop&quot;]&#x2F;&#x2F;span[@class&#x3D;&quot;J_im_icon&quot;]&#x2F;&#x2F;a&#x2F;text()&#39;)\n        This_page[&quot;价格&quot;] &#x3D; item.xpath(&#39;.&#x2F;&#x2F;div[@class&#x3D;&quot;p-price&quot;]&#x2F;&#x2F;strong&#x2F;&#x2F;i&#x2F;text()&#39;)[0]\n        product_id &#x3D; item.xpath(&#39;.&#x2F;&#x2F;div[@class&#x3D;&quot;p-commit&quot;]&#x2F;strong&#x2F;a&#x2F;@id&#39;)[0].replace(&quot;J_comment_&quot;, &quot;&quot;)\n        This_page[&quot;评价数&quot;] &#x3D; get_id(product_id)\n        This_page[&quot;包装与规格&quot;] &#x3D; get_inside(product_id)  #子网页获得\n        print(This_page) #终端输出内容\n        f.write(json.dumps(This_page,ensure_ascii&#x3D;False))\n        f.write((&quot;\\n&quot;))\n\n\ndef main():\n\n    for i in range(1,9,1):\n        url &#x3D; &quot;https:&#x2F;&#x2F;search.jd.com&#x2F;Search?keyword&#x3D;%E9%BB%91%E8%8C%B6&quot;\\\n              &quot;&amp;qrst&#x3D;1&amp;wq&#x3D;%E9%BB%91%E8%8C%B6&amp;stock&#x3D;1&amp;&quot;\\\n              &quot;pvid&#x3D;fbe350dcff064f63bd187e1d1ff18f0b&amp;page&#x3D;&quot;+str(i)\n        headers &#x3D; &#123;&quot;user-agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; &quot;\n                                 &quot;x64) AppleWebKit&#x2F;537.36 (KHTML, like &quot;\n                                 &quot;Gecko) Chrome&#x2F;107.0.0.0 Safari&#x2F;537.36 &quot;\n                                 &quot;Edg&#x2F;107.0.1418.56&quot;&#125;\n        text &#x3D; get_one_page(url,headers)\n        This_page &#x3D; parse_one_page(text)\n        #time.sleep(1)\n    f.close()\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    f &#x3D; open(&quot;.&#x2F;京东商城黑茶200条信息.txt&quot;, &#39;a+&#39;)\n    main()\n\n页面查找\n商家名称def parse_one_page(text):  #检索当前页\n    This_page &#x3D; &#123;&#125;\n    html &#x3D; etree.HTML(text)\n    items &#x3D; html.xpath(&#39;&#x2F;&#x2F;html&#x2F;&#x2F;body&#x2F;&#x2F;div[@id&#x3D;&quot;J_goodsList&quot;]&#x2F;ul&#x2F;li&#39;)\n    for item in items:\n        This_page[&quot;商品说明&quot;] &#x3D; item.xpath(&#39;.&#x2F;&#x2F;div[@class&#x3D;&quot;p-name p-name-type-2&quot;]&#x2F;&#x2F;a&#x2F;&#x2F;em&#x2F;text()&#39;)[0].replace(&quot;\\n&quot;,&quot;&quot;).replace(&quot;\\t&quot;,&quot;&quot;)\n        This_page[&quot;商家名称&quot;] &#x3D; item.xpath(&#39;.&#x2F;&#x2F;div[@class&#x3D;&quot;p-shop&quot;]&#x2F;&#x2F;span[@class&#x3D;&quot;J_im_icon&quot;]&#x2F;&#x2F;a&#x2F;text()&#39;)\n        This_page[&quot;价格&quot;] &#x3D; item.xpath(&#39;.&#x2F;&#x2F;div[@class&#x3D;&quot;p-price&quot;]&#x2F;&#x2F;strong&#x2F;&#x2F;i&#x2F;text()&#39;)[0]\n        product_id &#x3D; item.xpath(&#39;.&#x2F;&#x2F;div[@class&#x3D;&quot;p-commit&quot;]&#x2F;strong&#x2F;a&#x2F;@id&#39;)[0].replace(&quot;J_comment_&quot;, &quot;&quot;)\n        This_page[&quot;评价数&quot;] &#x3D; get_id(product_id)\n        This_page[&quot;包装与规格&quot;] &#x3D; get_inside(product_id)  #子网页获得\n        print(This_page)\n        f.write(json.dumps(This_page,ensure_ascii&#x3D;False))\n        f.write((&quot;\\n&quot;))\nThis_page[&quot;商家名称&quot;] &#x3D; item.xpath(&#39;.&#x2F;&#x2F;div[@class&#x3D;&quot;p-shop&quot;]&#x2F;&#x2F;span[@class&#x3D;&quot;J_im_icon&quot;]&#x2F;&#x2F;a&#x2F;text()&#39;)\n\n评论This_page[&quot;评价数&quot;] &#x3D; get_id(product_id)\nThis_page[&quot;包装与规格&quot;] &#x3D; get_inside(product_id)  #子网页获得\n\n产品与规格（子页面）\nlist &#x3D; html.xpath(&#39;&#x2F;&#x2F;html&#x2F;&#x2F;body&#x2F;&#x2F;div[9]&#x2F;&#x2F;div[@class&#x3D;&quot;tab-con&quot;]&#x2F;&#x2F;&#39;\n                  &#39;div[@class&#x3D;&quot;hide&quot;]&#x2F;&#x2F;div[@class&#x3D;&quot;Ptable&quot;]&#x2F;&#x2F;&#39;\n                  &#39;div[@class&#x3D;&quot;Ptable-item&quot;]&#x2F;&#x2F;dl[@class&#x3D;&quot;clearfix&quot;]&#x2F;&#x2F;text()&#39;)\n成果\n","slug":"python期末","date":"2022-12-06T09:32:49.000Z","categories_index":"信管","tags_index":"python,信管,爬虫","author_index":"Algernon"},{"id":"cff508c862505ad67891de36ae9bac94","title":"【文本挖掘】业绩预告原因·其二","content":"任务目标\n查阅论文\n\n\n\n\n\n\n\n\nhttps://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CJFD&amp;dbname=CJFDLAST2022&amp;filename=GJMW202206010&amp;uniplatform=NZKPT&amp;v=zgMnwsUdz8HwQceXNIMzEMXvw0W1RoSQ8ZdrRfe8mkrlXYmgifhyGlArBkVKOGG-\n\n\n\n\n\n\n\n\n\n\nhttps://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CJFD&amp;dbname=CJFDLAST2022&amp;filename=JSGG202124001&amp;uniplatform=NZKPT&amp;v=3Qinehu7XHJ6wlh0QogCoRf-dNRmR6OQjVAHU7yOcDZcQjK2AwfnlyjtLXUnAMOV\n\n\n\n\n\n\n\n\n\n\nhttps://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CJFD&amp;dbname=CJFDLAST2022&amp;filename=GLSJ202210005&amp;uniplatform=NZKPT&amp;v=_fG3sk79BwA0xMfVDNeQBNlFphJtGMDF4oJ2Jh8vr9DtezvZs0M8Rbr9ppA65dSt\n\n\n\n\n\n\n\n\n\n\nhttps://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CJFD&amp;dbname=CJFDLAST2022&amp;filename=MESS202208013&amp;uniplatform=NZKPT&amp;v=adniY_3P-0NUNhG7dCR9at-B4i3QML6Qjod6WolYB_KV0_klGlnSXmqDW8F47nN4\n\n\n\n\n\n\n\n\n\n\nhttps://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CMFD&amp;dbname=CMFDTEMP&amp;filename=1022666919.nh&amp;uniplatform=NZKPT&amp;v=j5HEashON4I623naUk_5HGfuYQ_P6zX0zvFCRfOZGcrHozRccYwEiOxfTB_yK7Uu\n\n归纳关键词| 类别                | 可能关键词                                  || —————————- | —————————————————————- || 主营业务增长        | 竞争加剧（-）出售了（+）                    || 量价齐升            |                                             || 项目投产            | 本期竣工（+）结转完毕（-）尚未正式落实（-） || 成本控制            | 债务包袱沉重（-）投资亏损（-）              || 新产品/市场带来增长 |                                             || 管理改善            | —                                          || 上年同期基数低      |                                             || 非经常性损益增长    |                                             || 其他原因            | —                                          ||                     |                                             |\n","slug":"文本挖掘-业绩预告2","date":"2022-12-04T10:50:49.000Z","categories_index":"信管,机器学习","tags_index":"文本挖掘","author_index":"Algernon"},{"id":"a8e01e489f77aa1141e71d498b937811","title":"【区块链技术与应用】（八）","content":"\n\n\n\n\n\n\n\n\nhttps://blog.csdn.net/lakersssss24/article/details/125762826?spm=1001.2014.3001.5501https://blog.csdn.net/lakersssss24/article/details/126434147https://blog.csdn.net/lakersssss24/article/details/126671408?spm=1001.2101.3001.6650.3&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-3-126671408-blog-126434147.pc_relevant_3mothn_strategy_and_data_recovery&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-3-126671408-blog-126434147.pc_relevant_3mothn_strategy_and_data_recovery&amp;utm_relevant_index=4\n提前准备\nsudo apt-get update  更新源 \nsudo apt-get install ssh 安装远程客户端\nsudo apt-get install curl 安装命令行工具\nsudo apt-get install git 安装git\nsudo apt-get install gcc 安装gcc\nsudo apt-get install vim 安装vim文件编辑器\nsudo apt-get install make 安装make\nsudo apt-get install net-tools 安装网络工具\nsudo apt-get install net-tools  安装mousepad 类似于windows的记事本\n.&#x2F;bootstrap.sh\n\n\n\n\n\n\n\n\n\nhttps://teach.imcn.me/y2020/1146.html\ncouchDB安装 https://blog.csdn.net/TU_Dresden/article/details/126864418\n\n实验一network.&#x2F;network.sh up\n\n.&#x2F;network.sh up createChannel -s couchdb\n\n.&#x2F;network.sh deployCC -ccn basic -ccp ..&#x2F;asset-transfer-basic&#x2F;chaincode-go -ccl go\n\nexport PATH&#x3D;$&#123;PWD&#125;&#x2F;..&#x2F;bin:$PATH\nexport FABRIC_CFG_PATH&#x3D;$PWD&#x2F;..&#x2F;config&#x2F;\nexport CORE_PEER_TLS_ENABLED&#x3D;true\nexport CORE_PEER_LOCALMSPID&#x3D;&quot;Org1MSP&quot; \nexport CORE_PEER_TLS_ROOTCERT_FILE&#x3D;$&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;ca.crt\nexport CORE_PEER_MSPCONFIGPATH&#x3D;$&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;users&#x2F;Admin@org1.example.com&#x2F;msp\nexport CORE_PEER_ADDRESS&#x3D;localhost:7051\npeer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile &quot;$&#123;PWD&#125;&#x2F;organizations&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem&quot; -C mychannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles &quot;$&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;ca.crt&quot; --peerAddresses localhost:9051 --tlsRootCertFiles &quot;$&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;peers&#x2F;peer0.org2.example.com&#x2F;tls&#x2F;ca.crt&quot; -c &#39;&#123;&quot;function&quot;:&quot;InitLedger&quot;,&quot;Args&quot;:[&quot;&quot;]&#125;&#39;\nrestart \n.&#x2F;network.sh up createChannel -ca -s couchdb\n\n\ngin模板\npackage main\n \nimport (\n\t&quot;fmt&quot;\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n \ntype Stu struct &#123;\n\tName string &#96;form:&quot;name&quot;&#96;\n\tId   string &#96;form:&quot;id&quot;&#96;\n\tAge  string &#96;form:&quot;age&quot;&#96;\n&#125;\n \nfunc main() &#123;\n\tr :&#x3D; gin.Default()\n\tvar stu Stu\n\tr1 :&#x3D; r.Group(&quot;&#x2F;fabric2.4&quot;)\n\tr1.POST(&quot;&#x2F;setstu&quot;, func(c *gin.Context) &#123;\n\t\t&#x2F;&#x2F;var stu Stu\n\t\tc.ShouldBind(&amp;stu)\n\t\tc.JSON(200, stu)\n\t\tfmt.Println(&quot;stu:&quot;, stu)\n\t&#125;)\n\tr1.POST(&quot;&#x2F;ok1&quot;, func(c *gin.Context) &#123;\n\t\tc.JSON(200, &quot;ok1&quot;)\n\t&#125;)\n\tr.Run(&quot;:8080&quot;) &#x2F;&#x2F; 监听并在 0.0.0.0:8080 上启动服务\n \n&#125;\n链码的只要功能部分：package chaincode\n \nimport (\n\t&quot;encoding&#x2F;json&quot;\n\t&quot;fmt&quot;\n \n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-contract-api-go&#x2F;contractapi&quot;\n)\n \n&#x2F;&#x2F; SmartContract provides functions for managing an Asset\ntype SmartContract struct &#123;\n\tcontractapi.Contract\n&#125;\n \n&#x2F;&#x2F; Asset describes basic details of what makes up a simple asset\n&#x2F;&#x2F;Insert struct field in alphabetic order &#x3D;&gt; to achieve determinism across languages\n&#x2F;&#x2F; golang keeps the order when marshal to json but doesn&#39;t order automatically\ntype Asset struct &#123;\n\tAppraisedValue int    &#96;json:&quot;AppraisedValue&quot;&#96;\n\tColor          string &#96;json:&quot;Color&quot;&#96;\n\tID             string &#96;json:&quot;ID&quot;&#96;\n\tOwner          string &#96;json:&quot;Owner&quot;&#96;\n\tSize           int    &#96;json:&quot;Size&quot;&#96;\n&#125;\n \n&#x2F;&#x2F; InitLedger adds a base set of assets to the ledger\nfunc (s *SmartContract) InitLedger(ctx contractapi.TransactionContextInterface) error &#123;\n\tassets :&#x3D; []Asset&#123;\n\t\t&#123;ID: &quot;asset1&quot;, Color: &quot;blue&quot;, Size: 5, Owner: &quot;Tomoko&quot;, AppraisedValue: 300&#125;,\n\t\t&#123;ID: &quot;asset2&quot;, Color: &quot;red&quot;, Size: 5, Owner: &quot;Brad&quot;, AppraisedValue: 400&#125;,\n\t\t&#123;ID: &quot;asset3&quot;, Color: &quot;green&quot;, Size: 10, Owner: &quot;Jin Soo&quot;, AppraisedValue: 500&#125;,\n\t\t&#123;ID: &quot;asset4&quot;, Color: &quot;yellow&quot;, Size: 10, Owner: &quot;Max&quot;, AppraisedValue: 600&#125;,\n\t\t&#123;ID: &quot;asset5&quot;, Color: &quot;black&quot;, Size: 15, Owner: &quot;Adriana&quot;, AppraisedValue: 700&#125;,\n\t\t&#123;ID: &quot;asset6&quot;, Color: &quot;white&quot;, Size: 15, Owner: &quot;Michel&quot;, AppraisedValue: 800&#125;,\n\t&#125;\n \n\tfor _, asset :&#x3D; range assets &#123;\n\t\tassetJSON, err :&#x3D; json.Marshal(asset)\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn err\n\t\t&#125;\n \n\t\terr &#x3D; ctx.GetStub().PutState(asset.ID, assetJSON)\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn fmt.Errorf(&quot;failed to put to world state. %v&quot;, err)\n\t\t&#125;\n\t&#125;\n \n\treturn nil\n&#125;\n \n&#x2F;&#x2F; CreateAsset issues a new asset to the world state with given details.\nfunc (s *SmartContract) CreateAsset(ctx contractapi.TransactionContextInterface, id string, color string, size int, owner string, appraisedValue int) error &#123;\n\texists, err :&#x3D; s.AssetExists(ctx, id)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\tif exists &#123;\n\t\treturn fmt.Errorf(&quot;the asset %s already exists&quot;, id)\n\t&#125;\n \n\tasset :&#x3D; Asset&#123;\n\t\tID:             id,\n\t\tColor:          color,\n\t\tSize:           size,\n\t\tOwner:          owner,\n\t\tAppraisedValue: appraisedValue,\n\t&#125;\n\tassetJSON, err :&#x3D; json.Marshal(asset)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n \n\treturn ctx.GetStub().PutState(id, assetJSON)\n&#125;\n \n&#x2F;&#x2F; ReadAsset returns the asset stored in the world state with given id.\nfunc (s *SmartContract) ReadAsset(ctx contractapi.TransactionContextInterface, id string) (*Asset, error) &#123;\n\tassetJSON, err :&#x3D; ctx.GetStub().GetState(id)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, fmt.Errorf(&quot;failed to read from world state: %v&quot;, err)\n\t&#125;\n\tif assetJSON &#x3D;&#x3D; nil &#123;\n\t\treturn nil, fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n\t&#125;\n \n\tvar asset Asset\n\terr &#x3D; json.Unmarshal(assetJSON, &amp;asset)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n \n\treturn &amp;asset, nil\n&#125;\n \n&#x2F;&#x2F; UpdateAsset updates an existing asset in the world state with provided parameters.\nfunc (s *SmartContract) UpdateAsset(ctx contractapi.TransactionContextInterface, id string, color string, size int, owner string, appraisedValue int) error &#123;\n\texists, err :&#x3D; s.AssetExists(ctx, id)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\tif !exists &#123;\n\t\treturn fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n\t&#125;\n \n\t&#x2F;&#x2F; overwriting original asset with new asset\n\tasset :&#x3D; Asset&#123;\n\t\tID:             id,\n\t\tColor:          color,\n\t\tSize:           size,\n\t\tOwner:          owner,\n\t\tAppraisedValue: appraisedValue,\n\t&#125;\n\tassetJSON, err :&#x3D; json.Marshal(asset)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n \n\treturn ctx.GetStub().PutState(id, assetJSON)\n&#125;\n \n&#x2F;&#x2F; DeleteAsset deletes an given asset from the world state.\nfunc (s *SmartContract) DeleteAsset(ctx contractapi.TransactionContextInterface, id string) error &#123;\n\texists, err :&#x3D; s.AssetExists(ctx, id)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\tif !exists &#123;\n\t\treturn fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n\t&#125;\n \n\treturn ctx.GetStub().DelState(id)\n&#125;\n \n&#x2F;&#x2F; AssetExists returns true when asset with given ID exists in world state\nfunc (s *SmartContract) AssetExists(ctx contractapi.TransactionContextInterface, id string) (bool, error) &#123;\n\tassetJSON, err :&#x3D; ctx.GetStub().GetState(id)\n\tif err !&#x3D; nil &#123;\n\t\treturn false, fmt.Errorf(&quot;failed to read from world state: %v&quot;, err)\n\t&#125;\n \n\treturn assetJSON !&#x3D; nil, nil\n&#125;\n \n&#x2F;&#x2F; TransferAsset updates the owner field of asset with given id in world state, and returns the old owner.\nfunc (s *SmartContract) TransferAsset(ctx contractapi.TransactionContextInterface, id string, newOwner string) (string, error) &#123;\n\tasset, err :&#x3D; s.ReadAsset(ctx, id)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, err\n\t&#125;\n \n\toldOwner :&#x3D; asset.Owner\n\tasset.Owner &#x3D; newOwner\n \n\tassetJSON, err :&#x3D; json.Marshal(asset)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, err\n\t&#125;\n \n\terr &#x3D; ctx.GetStub().PutState(id, assetJSON)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, err\n\t&#125;\n \n\treturn oldOwner, nil\n&#125;\n \n&#x2F;&#x2F; GetAllAssets returns all assets found in world state\nfunc (s *SmartContract) GetAllAssets(ctx contractapi.TransactionContextInterface) ([]*Asset, error) &#123;\n\t&#x2F;&#x2F; range query with empty string for startKey and endKey does an\n\t&#x2F;&#x2F; open-ended query of all assets in the chaincode namespace.\n\tresultsIterator, err :&#x3D; ctx.GetStub().GetStateByRange(&quot;&quot;, &quot;&quot;)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\tdefer resultsIterator.Close()\n \n\tvar assets []*Asset\n\tfor resultsIterator.HasNext() &#123;\n\t\tqueryResponse, err :&#x3D; resultsIterator.Next()\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn nil, err\n\t\t&#125;\n \n\t\tvar asset Asset\n\t\terr &#x3D; json.Unmarshal(queryResponse.Value, &amp;asset)\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn nil, err\n\t\t&#125;\n\t\tassets &#x3D; append(assets, &amp;asset)\n\t&#125;\n \n\treturn assets, nil\n&#125;查看虚拟机的IP和地址：\nifconfig\ngin框架package main\n \nimport (\n\t&quot;bytes&quot;\n\t&quot;crypto&#x2F;x509&quot;\n\t&quot;encoding&#x2F;json&quot;\n\t&quot;fmt&quot;\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-gateway&#x2F;pkg&#x2F;client&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-gateway&#x2F;pkg&#x2F;identity&quot;\n\t&quot;google.golang.org&#x2F;grpc&quot;\n\t&quot;google.golang.org&#x2F;grpc&#x2F;credentials&quot;\n\t&quot;io&#x2F;ioutil&quot;\n\t&quot;path&quot;\n\t&quot;time&quot;\n)\n \nconst (\n\tmspID         &#x3D; &quot;Org1MSP&quot;\n\tcryptoPath    &#x3D; &quot;.&#x2F;peerOrganizations&#x2F;org1.example.com&quot;\n\tcertPath      &#x3D; cryptoPath + &quot;&#x2F;users&#x2F;User1@org1.example.com&#x2F;msp&#x2F;signcerts&#x2F;cert.pem&quot;\n\tkeyPath       &#x3D; cryptoPath + &quot;&#x2F;users&#x2F;User1@org1.example.com&#x2F;msp&#x2F;keystore&#x2F;&quot;\n\ttlsCertPath   &#x3D; cryptoPath + &quot;&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;ca.crt&quot;\n\tpeerEndpoint  &#x3D; &quot;192.168.136.130:7051&quot;\n\tgatewayPeer   &#x3D; &quot;peer0.org1.example.com&quot;\n\tchannelName   &#x3D; &quot;mychannel&quot;\n\tchaincodeName &#x3D; &quot;basic&quot;\n)\n \ntype Asset struct &#123;\n\tAppraisedValue int    &#96;form:&quot;appraisedValue&quot; json:&quot;appraisedValue&quot; &#96;\n\tColor          string &#96;form:&quot;color&quot; json:&quot;color&quot;&#96;\n\tID             string &#96;form:&quot;id&quot; json:&quot;id&quot;&#96;\n\tOwner          string &#96;form:&quot;owner&quot; json:&quot;owner&quot;&#96;\n\tSize           int    &#96;form:&quot;size&quot; json:&quot;size&quot;&#96;\n&#125;\n \nfunc main() &#123;\n\t&#x2F;&#x2F; The gRPC client connection should be shared by all Gateway connections to this endpoint\n\tclientConnection :&#x3D; newGrpcConnection()\n\tdefer clientConnection.Close()\n \n\tid :&#x3D; newIdentity()\n\tsign :&#x3D; newSign()\n \n\t&#x2F;&#x2F; Create a Gateway connection for a specific client identity\n\tgateway, err :&#x3D; client.Connect(\n\t\tid,\n\t\tclient.WithSign(sign),\n\t\tclient.WithClientConnection(clientConnection),\n\t\t&#x2F;&#x2F; Default timeouts for different gRPC calls\n\t\tclient.WithEvaluateTimeout(5*time.Second),\n\t\tclient.WithEndorseTimeout(15*time.Second),\n\t\tclient.WithSubmitTimeout(5*time.Second),\n\t\tclient.WithCommitStatusTimeout(1*time.Minute),\n\t)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n\tdefer gateway.Close()\n\tnetwork :&#x3D; gateway.GetNetwork(channelName)\n\tcontract :&#x3D; network.GetContract(chaincodeName)\n \n\tr :&#x3D; gin.Default()\n\tr1 :&#x3D; r.Group(&quot;&#x2F;fabric2.4&quot;)\n\tr1.POST(&quot;&#x2F;CreateAsset&quot;, func(c *gin.Context) &#123;\n\t\tvar asset Asset\n\t\tc.ShouldBind(&amp;asset)\n\t\tc.JSON(200, asset)\n\t\tmarshal, _ :&#x3D; json.Marshal(asset)\n\t\tfmt.Println(string(marshal))\n\t\tfmt.Println(&quot;asset:&quot;, asset)\n\t&#125;)\n\tr1.POST(&quot;&#x2F;GetAllAssets&quot;, func(c *gin.Context) &#123;\n\t\tresult :&#x3D; getAllAssets(contract)\n\t\tc.JSON(200, result)\n\t&#125;)\n\tr.Run(&quot;:8080&quot;) &#x2F;&#x2F; 监听并在 0.0.0.0:8080 上启动服务\n \n&#125;\n \n&#x2F;&#x2F; Evaluate a transaction to query ledger state.\nfunc getAllAssets(contract *client.Contract) string &#123;\n\tfmt.Println(&quot;Evaluate Transaction: GetAllAssets, function returns all the current assets on the ledger&quot;)\n \n\tevaluateResult, err :&#x3D; contract.EvaluateTransaction(&quot;GetAllAssets&quot;)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to evaluate transaction: %w&quot;, err))\n\t&#125;\n\tresult :&#x3D; formatJSON(evaluateResult)\n \n\tfmt.Printf(&quot;*** Result:%s\\n&quot;, result)\n \n\treturn string(evaluateResult)\n&#125;\n \n&#x2F;&#x2F; newGrpcConnection creates a gRPC connection to the Gateway server.\nfunc newGrpcConnection() *grpc.ClientConn &#123;\n\tcertificate, err :&#x3D; loadCertificate(tlsCertPath)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n \n\tcertPool :&#x3D; x509.NewCertPool()\n\tcertPool.AddCert(certificate)\n\ttransportCredentials :&#x3D; credentials.NewClientTLSFromCert(certPool, gatewayPeer)\n \n\tconnection, err :&#x3D; grpc.Dial(peerEndpoint, grpc.WithTransportCredentials(transportCredentials))\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to create gRPC connection: %w&quot;, err))\n\t&#125;\n \n\treturn connection\n&#125;\n \n&#x2F;&#x2F; newIdentity creates a client identity for this Gateway connection using an X.509 certificate.\nfunc newIdentity() *identity.X509Identity &#123;\n\tcertificate, err :&#x3D; loadCertificate(certPath)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n \n\tid, err :&#x3D; identity.NewX509Identity(mspID, certificate)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n \n\treturn id\n&#125;\n \nfunc loadCertificate(filename string) (*x509.Certificate, error) &#123;\n\tcertificatePEM, err :&#x3D; ioutil.ReadFile(filename)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, fmt.Errorf(&quot;failed to read certificate file: %w&quot;, err)\n\t&#125;\n\treturn identity.CertificateFromPEM(certificatePEM)\n&#125;\n \n&#x2F;&#x2F; newSign creates a function that generates a digital signature from a message digest using a private key.\nfunc newSign() identity.Sign &#123;\n\tfiles, err :&#x3D; ioutil.ReadDir(keyPath)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to read private key directory: %w&quot;, err))\n\t&#125;\n\tprivateKeyPEM, err :&#x3D; ioutil.ReadFile(path.Join(keyPath, files[0].Name()))\n \n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to read private key file: %w&quot;, err))\n\t&#125;\n \n\tprivateKey, err :&#x3D; identity.PrivateKeyFromPEM(privateKeyPEM)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n \n\tsign, err :&#x3D; identity.NewPrivateKeySign(privateKey)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n \n\treturn sign\n&#125;\n \n&#x2F;&#x2F; Format JSON data\nfunc formatJSON(data []byte) string &#123;\n\tvar prettyJSON bytes.Buffer\n\tif err :&#x3D; json.Indent(&amp;prettyJSON, data, &quot; &quot;, &quot;&quot;); err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to parse JSON: %w&quot;, err))\n\t&#125;\n\treturn prettyJSON.String()\n&#125;\n\n链码package chaincode\n \nimport (\n\t&quot;encoding&#x2F;json&quot;\n\t&quot;fmt&quot;\n \n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-contract-api-go&#x2F;contractapi&quot;\n)\n \n&#x2F;&#x2F; SmartContract provides functions for managing an Asset\ntype SmartContract struct &#123;\n\tcontractapi.Contract\n&#125;\n \n&#x2F;&#x2F; Asset describes basic details of what makes up a simple asset\n&#x2F;&#x2F;Insert struct field in alphabetic order &#x3D;&gt; to achieve determinism across languages\n&#x2F;&#x2F; golang keeps the order when marshal to json but doesn&#39;t order automatically\ntype Asset struct &#123;\n\tAppraisedValue int    &#96;json:&quot;AppraisedValue&quot;&#96;\n\tColor          string &#96;json:&quot;Color&quot;&#96;\n\tID             string &#96;json:&quot;ID&quot;&#96;\n\tOwner          string &#96;json:&quot;Owner&quot;&#96;\n\tSize           int    &#96;json:&quot;Size&quot;&#96;\n&#125;\n \n&#x2F;&#x2F; InitLedger adds a base set of assets to the ledger\nfunc (s *SmartContract) InitLedger(ctx contractapi.TransactionContextInterface) error &#123;\n\tassets :&#x3D; []Asset&#123;\n\t\t&#123;ID: &quot;asset1&quot;, Color: &quot;blue&quot;, Size: 5, Owner: &quot;Tomoko&quot;, AppraisedValue: 300&#125;,\n\t\t&#123;ID: &quot;asset2&quot;, Color: &quot;red&quot;, Size: 5, Owner: &quot;Brad&quot;, AppraisedValue: 400&#125;,\n\t\t&#123;ID: &quot;asset3&quot;, Color: &quot;green&quot;, Size: 10, Owner: &quot;Jin Soo&quot;, AppraisedValue: 500&#125;,\n\t\t&#123;ID: &quot;asset4&quot;, Color: &quot;yellow&quot;, Size: 10, Owner: &quot;Max&quot;, AppraisedValue: 600&#125;,\n\t\t&#123;ID: &quot;asset5&quot;, Color: &quot;black&quot;, Size: 15, Owner: &quot;Adriana&quot;, AppraisedValue: 700&#125;,\n\t\t&#123;ID: &quot;asset6&quot;, Color: &quot;white&quot;, Size: 15, Owner: &quot;Michel&quot;, AppraisedValue: 800&#125;,\n\t&#125;\n \n\tfor _, asset :&#x3D; range assets &#123;\n\t\tassetJSON, err :&#x3D; json.Marshal(asset)\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn err\n\t\t&#125;\n \n\t\terr &#x3D; ctx.GetStub().PutState(asset.ID, assetJSON)\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn fmt.Errorf(&quot;failed to put to world state. %v&quot;, err)\n\t\t&#125;\n\t&#125;\n \n\treturn nil\n&#125;\n \n&#x2F;&#x2F; CreateAsset issues a new asset to the world state with given details.\nfunc (s *SmartContract) CreateAsset(ctx contractapi.TransactionContextInterface, id string, color string, size int, owner string, appraisedValue int) error &#123;\n\texists, err :&#x3D; s.AssetExists(ctx, id)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\tif exists &#123;\n\t\treturn fmt.Errorf(&quot;the asset %s already exists&quot;, id)\n\t&#125;\n \n\tasset :&#x3D; Asset&#123;\n\t\tID:             id,\n\t\tColor:          color,\n\t\tSize:           size,\n\t\tOwner:          owner,\n\t\tAppraisedValue: appraisedValue,\n\t&#125;\n\tassetJSON, err :&#x3D; json.Marshal(asset)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n \n\treturn ctx.GetStub().PutState(id, assetJSON)\n&#125;\n \n&#x2F;&#x2F; ReadAsset returns the asset stored in the world state with given id.\nfunc (s *SmartContract) ReadAsset(ctx contractapi.TransactionContextInterface, id string) (*Asset, error) &#123;\n\tassetJSON, err :&#x3D; ctx.GetStub().GetState(id)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, fmt.Errorf(&quot;failed to read from world state: %v&quot;, err)\n\t&#125;\n\tif assetJSON &#x3D;&#x3D; nil &#123;\n\t\treturn nil, fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n\t&#125;\n \n\tvar asset Asset\n\terr &#x3D; json.Unmarshal(assetJSON, &amp;asset)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n \n\treturn &amp;asset, nil\n&#125;\n \n&#x2F;&#x2F; UpdateAsset updates an existing asset in the world state with provided parameters.\nfunc (s *SmartContract) UpdateAsset(ctx contractapi.TransactionContextInterface, id string, color string, size int, owner string, appraisedValue int) error &#123;\n\texists, err :&#x3D; s.AssetExists(ctx, id)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\tif !exists &#123;\n\t\treturn fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n\t&#125;\n \n\t&#x2F;&#x2F; overwriting original asset with new asset\n\tasset :&#x3D; Asset&#123;\n\t\tID:             id,\n\t\tColor:          color,\n\t\tSize:           size,\n\t\tOwner:          owner,\n\t\tAppraisedValue: appraisedValue,\n\t&#125;\n\tassetJSON, err :&#x3D; json.Marshal(asset)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n \n\treturn ctx.GetStub().PutState(id, assetJSON)\n&#125;\n \n&#x2F;&#x2F; DeleteAsset deletes an given asset from the world state.\nfunc (s *SmartContract) DeleteAsset(ctx contractapi.TransactionContextInterface, id string) error &#123;\n\texists, err :&#x3D; s.AssetExists(ctx, id)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\tif !exists &#123;\n\t\treturn fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n\t&#125;\n \n\treturn ctx.GetStub().DelState(id)\n&#125;\n \n&#x2F;&#x2F; AssetExists returns true when asset with given ID exists in world state\nfunc (s *SmartContract) AssetExists(ctx contractapi.TransactionContextInterface, id string) (bool, error) &#123;\n\tassetJSON, err :&#x3D; ctx.GetStub().GetState(id)\n\tif err !&#x3D; nil &#123;\n\t\treturn false, fmt.Errorf(&quot;failed to read from world state: %v&quot;, err)\n\t&#125;\n \n\treturn assetJSON !&#x3D; nil, nil\n&#125;\n \n&#x2F;&#x2F; TransferAsset updates the owner field of asset with given id in world state, and returns the old owner.\nfunc (s *SmartContract) TransferAsset(ctx contractapi.TransactionContextInterface, id string, newOwner string) (string, error) &#123;\n\tasset, err :&#x3D; s.ReadAsset(ctx, id)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, err\n\t&#125;\n \n\toldOwner :&#x3D; asset.Owner\n\tasset.Owner &#x3D; newOwner\n \n\tassetJSON, err :&#x3D; json.Marshal(asset)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, err\n\t&#125;\n \n\terr &#x3D; ctx.GetStub().PutState(id, assetJSON)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, err\n\t&#125;\n \n\treturn oldOwner, nil\n&#125;\n \n&#x2F;&#x2F; GetAllAssets returns all assets found in world state\nfunc (s *SmartContract) GetAllAssets(ctx contractapi.TransactionContextInterface) ([]*Asset, error) &#123;\n\t&#x2F;&#x2F; range query with empty string for startKey and endKey does an\n\t&#x2F;&#x2F; open-ended query of all assets in the chaincode namespace.\n\tresultsIterator, err :&#x3D; ctx.GetStub().GetStateByRange(&quot;&quot;, &quot;&quot;)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\tdefer resultsIterator.Close()\n \n\tvar assets []*Asset\n\tfor resultsIterator.HasNext() &#123;\n\t\tqueryResponse, err :&#x3D; resultsIterator.Next()\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn nil, err\n\t\t&#125;\n \n\t\tvar asset Asset\n\t\terr &#x3D; json.Unmarshal(queryResponse.Value, &amp;asset)\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn nil, err\n\t\t&#125;\n\t\tassets &#x3D; append(assets, &amp;asset)\n\t&#125;\n \n\treturn assets, nil\n&#125;\npostman测试自家网站：\n本地查询：自己的github：\n\n\n实验二ginpackage main\n \nimport (\n\t&quot;bytes&quot;\n\t&quot;crypto&#x2F;x509&quot;\n\t&quot;encoding&#x2F;json&quot;\n\t&quot;fmt&quot;\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-gateway&#x2F;pkg&#x2F;client&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-gateway&#x2F;pkg&#x2F;identity&quot;\n\t&quot;google.golang.org&#x2F;grpc&quot;\n\t&quot;google.golang.org&#x2F;grpc&#x2F;credentials&quot;\n\t&quot;io&#x2F;ioutil&quot;\n\t&quot;path&quot;\n\t&quot;time&quot;\n)\n \nconst (\n\tmspID         &#x3D; &quot;Org1MSP&quot;\n\tcryptoPath    &#x3D; &quot;.&#x2F;peerOrganizations&#x2F;org1.example.com&quot;\n\tcertPath      &#x3D; cryptoPath + &quot;&#x2F;users&#x2F;User1@org1.example.com&#x2F;msp&#x2F;signcerts&#x2F;cert.pem&quot;\n\tkeyPath       &#x3D; cryptoPath + &quot;&#x2F;users&#x2F;User1@org1.example.com&#x2F;msp&#x2F;keystore&#x2F;&quot;\n\ttlsCertPath   &#x3D; cryptoPath + &quot;&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;ca.crt&quot;\n\tpeerEndpoint  &#x3D; &quot;192.168.136.130:7051&quot;\n\tgatewayPeer   &#x3D; &quot;peer0.org1.example.com&quot;\n\tchannelName   &#x3D; &quot;mychannel&quot;\n\tchaincodeName &#x3D; &quot;basic&quot;\n)\n \ntype Asset struct &#123;\n\tAppraisedValue int    &#96;form:&quot;appraisedValue&quot; json:&quot;appraisedValue&quot; &#96;\n\tColor          string &#96;form:&quot;color&quot; json:&quot;color&quot;&#96;\n\tID             string &#96;form:&quot;id&quot; json:&quot;id&quot;&#96;\n\tOwner          string &#96;form:&quot;owner&quot; json:&quot;owner&quot;&#96;\n\tSize           int    &#96;form:&quot;size&quot; json:&quot;size&quot;&#96;\n&#125;\n \nfunc main() &#123;\n\t&#x2F;&#x2F; The gRPC client connection should be shared by all Gateway connections to this endpoint\n\tclientConnection :&#x3D; newGrpcConnection()\n\tdefer clientConnection.Close()\n \n\tid :&#x3D; newIdentity()\n\tsign :&#x3D; newSign()\n \n\t&#x2F;&#x2F; Create a Gateway connection for a specific client identity\n\tgateway, err :&#x3D; client.Connect(\n\t\tid,\n\t\tclient.WithSign(sign),\n\t\tclient.WithClientConnection(clientConnection),\n\t\t&#x2F;&#x2F; Default timeouts for different gRPC calls\n\t\tclient.WithEvaluateTimeout(5*time.Second),\n\t\tclient.WithEndorseTimeout(15*time.Second),\n\t\tclient.WithSubmitTimeout(5*time.Second),\n\t\tclient.WithCommitStatusTimeout(1*time.Minute),\n\t)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n\tdefer gateway.Close()\n\tnetwork :&#x3D; gateway.GetNetwork(channelName)\n\tcontract :&#x3D; network.GetContract(chaincodeName)\n \n\tr :&#x3D; gin.Default()\n\tr1 :&#x3D; r.Group(&quot;&#x2F;fabric2.4.2&quot;)\n\tr1.POST(&quot;&#x2F;Init&quot;, func(c *gin.Context) &#123;\n\t\tinitLedger(contract)\n\t\tc.JSON(200, &quot;init ok!&quot;)\n\t&#125;)\n\tr.Run(&quot;:8080&quot;) &#x2F;&#x2F; 监听并在 0.0.0.0:8080 上启动服务\n \n&#125;\n \n&#x2F;&#x2F; Evaluate a transaction to query ledger state.\nfunc getAllAssets(contract *client.Contract) string &#123;\n\tfmt.Println(&quot;Evaluate Transaction: GetAllAssets, function returns all the current assets on the ledger&quot;)\n \n\tevaluateResult, err :&#x3D; contract.EvaluateTransaction(&quot;GetAllAssets&quot;)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to evaluate transaction: %w&quot;, err))\n\t&#125;\n\tresult :&#x3D; formatJSON(evaluateResult)\n \n\tfmt.Printf(&quot;*** Result:%s\\n&quot;, result)\n \n\treturn string(evaluateResult)\n&#125;\n \n&#x2F;&#x2F; newGrpcConnection creates a gRPC connection to the Gateway server.\nfunc newGrpcConnection() *grpc.ClientConn &#123;\n\tcertificate, err :&#x3D; loadCertificate(tlsCertPath)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n \n\tcertPool :&#x3D; x509.NewCertPool()\n\tcertPool.AddCert(certificate)\n\ttransportCredentials :&#x3D; credentials.NewClientTLSFromCert(certPool, gatewayPeer)\n \n\tconnection, err :&#x3D; grpc.Dial(peerEndpoint, grpc.WithTransportCredentials(transportCredentials))\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to create gRPC connection: %w&quot;, err))\n\t&#125;\n \n\treturn connection\n&#125;\n \n&#x2F;&#x2F; newIdentity creates a client identity for this Gateway connection using an X.509 certificate.\nfunc newIdentity() *identity.X509Identity &#123;\n\tcertificate, err :&#x3D; loadCertificate(certPath)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n \n\tid, err :&#x3D; identity.NewX509Identity(mspID, certificate)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n \n\treturn id\n&#125;\n \nfunc loadCertificate(filename string) (*x509.Certificate, error) &#123;\n\tcertificatePEM, err :&#x3D; ioutil.ReadFile(filename)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, fmt.Errorf(&quot;failed to read certificate file: %w&quot;, err)\n\t&#125;\n\treturn identity.CertificateFromPEM(certificatePEM)\n&#125;\n \n&#x2F;&#x2F; newSign creates a function that generates a digital signature from a message digest using a private key.\nfunc newSign() identity.Sign &#123;\n\tfiles, err :&#x3D; ioutil.ReadDir(keyPath)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to read private key directory: %w&quot;, err))\n\t&#125;\n\tprivateKeyPEM, err :&#x3D; ioutil.ReadFile(path.Join(keyPath, files[0].Name()))\n \n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to read private key file: %w&quot;, err))\n\t&#125;\n \n\tprivateKey, err :&#x3D; identity.PrivateKeyFromPEM(privateKeyPEM)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n \n\tsign, err :&#x3D; identity.NewPrivateKeySign(privateKey)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n \n\treturn sign\n&#125;\n \n&#x2F;&#x2F; Format JSON data\nfunc formatJSON(data []byte) string &#123;\n\tvar prettyJSON bytes.Buffer\n\tif err :&#x3D; json.Indent(&amp;prettyJSON, data, &quot; &quot;, &quot;&quot;); err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to parse JSON: %w&quot;, err))\n\t&#125;\n\treturn prettyJSON.String()\n&#125;\nNew asset部分：把下图代码：改为这个：\nr1.POST(&quot;&#x2F;CreateAsset&quot;, func(c *gin.Context) &#123;\n\t\tvar asset Asset\n\t\tc.ShouldBind(&amp;asset)\n\t\tc.JSON(200, asset)\n\t\tmarshal, _ :&#x3D; json.Marshal(asset)\n\t\tCreateAsset(contract, asset)\n\t\tfmt.Println(&quot;存入成功！存入的数据是:&quot;, string(marshal))\n\t\t&#x2F;&#x2F;fmt.Println(&quot;asset:&quot;, asset)\n\t&#125;)\n函数：\nfunc CreateAsset(contract *client.Contract, asset Asset) string &#123;\n\tevaluateResult, err :&#x3D; contract.SubmitTransaction(&quot;CreateAsset&quot;, asset.ID, asset.Color, strconv.Itoa(asset.Size), asset.Owner, strconv.Itoa(asset.AppraisedValue))\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to evaluate transaction: %w&quot;, err))\n\t&#125;\n\tresult :&#x3D; formatJSON(evaluateResult)\n \n\tfmt.Printf(&quot;*** Result:%s\\n&quot;, result)\n \n\treturn string(evaluateResult)\n&#125;\n\n总结本次实验内容内容不多，难度颇大。其一在于作者默认搭好框架，所以需要按照前文做出适配。其二是网络搭好之后的查询，如果看了前文，可以知道作者是修改了\n\n\n\n\n\n\n\n\n\nhttps://github.com/hyperledger/fabric-samples/tree/main/asset-transfer-basic\n部分的代码，也就是本文的gin框架部分。修改也很多，然后就是代码，代码在我这里经常报错，然后为了解决一个bug往往会搞出更多的问题，尤其是网络接口的占用，就在写文档的现在，我的7051端口莫名被占用了，为了更好完成期末任务，决定找一个正确而清晰的文档从头开始配置。（很大的原因是这几次作业下来整个fabric文件夹臃肿不堪，fabric-samples就有好几个，隔着几周时间回去看，有能运行的，也有当初是坑，后来没删的，总之，归零重启更有效）\n在做两个实验之前，我先按照作者的思路配置了环境，主要是启动网络。其次是一种很新的工具，postman，现在还没有完全摸清这个软件的用途，目前仅做查询网址用途。\n第二个查询部分没有把assets查出来，可能是某个方面出了bug，之后会重新启用虚拟机，然后从头开始做一遍。\n\n","slug":"区块链8","date":"2022-11-24T14:50:49.000Z","categories_index":"信管","tags_index":"区块链","author_index":"Algernon"},{"id":"30cc2024ad37b5f81bb1a638f94642bf","title":"【文本挖掘】业绩预告原因·其一","content":"下载数据及提取信息在此单列前15行：000001,平安银行,预计本公司2006年度净利润与上一年度相比将增长300%-350%。2）业绩变化原因:利润的显著增长主要是由于利差的改善、资金运用效率的提高和贷款的良好增长，不良资产的成功清收和资产质量的改善使得所需减值拨备降低。这些因素连同有效税率的降低都进一步增强了我行的盈利能力。,利润的显著增长主要是由于利差的改善、资金运用效率的提高和贷款的良好增长，不良资产的成功清收和资产质量的改善使得所需减值拨备降低。这些因素连同有效税率的降低都进一步增强了我行的盈利能力。\n000001,平安银行,预计本公司2007年上半年净利润与上一年度同期相比将增长125%-145%2）业绩变化原因:存贷款的良好的增长、利差的改善、中间业务收入的增加及有效税率的降低。,存贷款的良好的增长、利差的改善、中间业务收入的增加及有效税率的降低。\n000001,平安银行,预计本公司2007年前三季度末累计净利润较去年同期相比将增长100%到120%。2）业绩变化原因:净利润大幅增长的原因主要是由于存贷款的增长，利差的扩大，中间业务收入的增加，资产质量的提高以及有效税率的降低。,净利润大幅增长的原因主要是由于存贷款的增长，利差的扩大，中间业务收入的增加，资产质量的提高以及有效税率的降低。\n000001,平安银行,预计本公司2007年1月至12月累计净利润较去年同期相比将增长100%到110%。2）业绩变化原因:净利润大幅增长的原因主要是由于存贷款的增长，利差的扩大，中间业务收入的增加，资产质量的提高以及有效税率的降低。,净利润大幅增长的原因主要是由于存贷款的增长，利差的扩大，中间业务收入的增加，资产质量的提高以及有效税率的降低。\n000001,平安银行,预计本公司2008年1月至3月累计净利润较去年同期相比将增长80%到90%。2）业绩变化原因:净利润较去年同期大幅增长的原因主要是由于存贷款的增长，利差的扩大，中间业务收入的增加，资产质量稳定以及有效税率的降低。,净利润较去年同期大幅增长的原因主要是由于存贷款的增长，利差的扩大，中间业务收入的增加，资产质量稳定以及有效税率的降低。\n000001,平安银行,预计公司2008年1月至6月累计净利润较去年同期相比将增长85%－95%。2）业绩变化原因:业绩大幅增长的原因在于存贷款的增加、利差扩大、中间收入增加、不良贷款减少以及有效税率的降低。,业绩大幅增长的原因在于存贷款的增加、利差扩大、中间收入增加、不良贷款减少以及有效税率的降低。\n000001,平安银行,预计2008年1-9月累计净利润较去年同期相比将增长75%到80%，为32.79亿元至33.73亿元2）业绩变化原因:存贷款的良好增长、利差改善、中间业务收入增加、有效的费用管控和有效税率的降低。2008年前三季度本公司的存款和贷款增长良好，贷款增长控制在信贷调控要求下，其中存款增长远高于贷款增长。预计本公司截至2008年9月30日的不良贷款绝对额和不良贷款率均继续维持下降趋势，实现较上一季度末减少。2005年以后发放的贷款不良率低于1％,存贷款的良好增长、利差改善、中间业务收入增加、有效的费用管控和有效税率的降低。2008年前三季度本公司的存款和贷款增长良好，贷款增长控制在信贷调控要求下，其中存款增长远高于贷款增长。预计本公司截至2008年9月30日的不良贷款绝对额和不良贷款率均继续维持下降趋势，实现较上一季度末减少。2005年以后发放的贷款不良率低于1％\n000001,平安银行,预计本报告期2008年1月1日2008年12月31日净利润约6亿元，比上年同期下降约77%，基本每股收益约0.20元，上年同期下降约79%。上年同期业绩：1.净利润：26.50亿元。2.基本每股收益：0.94元2）业绩变化原因:根据监管机构第四季度在当前国内外金融和经济形势下对中小银行的要求，我行在2008年年底进行了特别的大额拨备及核销。因此，我行第四季度新增拨备约为56亿元，核销约94亿元。核销了全部损失类和可疑类的不良贷款，以及很大一部分的次级类贷款。核销贷款的绝大部分为我行2005年以前发放的历史不良贷款。2008年第四季度核销前新增不良贷款净额约为3亿元，占贷款总额约0.1%。我行预计2008年12月31日的不良贷款余额约为19亿元，占总贷款比例不到1%，与2008年9月30日4.3%和2007年12月31日5.6%的不良贷款率相比大幅下降。2008年年底信贷拨备余额预计约为20亿元。本次特别大额拨备及核销后，我行拨备充足率预计将超过300%，拨备覆盖率（信贷拨备&#x2F;总不良贷款）预计约为105%。由于特别大额信贷拨备，2008年全年净利润降至约6亿元，即较2007年全年降低约77%,根据监管机构第四季度在当前国内外金融和经济形势下对中小银行的要求，我行在2008年年底进行了特别的大额拨备及核销。因此，我行第四季度新增拨备约为56亿元，核销约94亿元。核销了全部损失类和可疑类的不良贷款，以及很大一部分的次级类贷款。核销贷款的绝大部分为我行2005年以前发放的历史不良贷款。2008年第四季度核销前新增不良贷款净额约为3亿元，占贷款总额约0.1%。我行预计2008年12月31日的不良贷款余额约为19亿元，占总贷款比例不到1%，与2008年9月30日4.3%和2007年12月31日5.6%的不良贷款率相比大幅下降。2008年年底信贷拨备余额预计约为20亿元。本次特别大额拨备及核销后，我行拨备充足率预计将超过300%，拨备覆盖率（信贷拨备&#x2F;总不良贷款）预计约为105%。由于特别大额信贷拨备，2008年全年净利润降至约6亿元，即较2007年全年降低约77%\n000001,平安银行,预计公司2009年1-12月净利润同比增长在650%-720%之间。2）业绩变化原因:预计公司2009年1-12月净利润同比增长在650%-720%之间。,预计公司2009年1-12月净利润同比增长在650%-720%之间。\n000001,平安银行,&quot;预计2011-01-01到2011-03-31业绩：净利润236718万元至252499万元,增长幅度为50%至60%,基本每股收益0.68元至0.72元;上年同期业绩:净利润1578120000元,基本每股收益0.51元;2）业绩变化原因:本行2011年第一季度净利润同比大幅增长的主要原因是资产规模的稳定增长，以及利差改善和成本有效控制。&quot;,本行2011年第一季度净利润同比大幅增长的主要原因是资产规模的稳定增长，以及利差改善和成本有效控制。\n000001,平安银行,&quot;预计2011-01-01到2011-06-30业绩：净利润454968万元至485299万元,增长幅度为50%至60%,基本每股收益1.31元至1.39元;上年同期业绩:净利润3033120000元,基本每股收益0.98元;2）业绩变化原因:本行2011年上半年净利润同比大幅增长的主要原因是资产规模的稳定增长，以及利差改善和成本有效控制。&quot;,本行2011年上半年净利润同比大幅增长的主要原因是资产规模的稳定增长，以及利差改善和成本有效控制。\n000001,平安银行,&quot;预计2011-01-01到2011-09-30业绩：净利润754914万元至802096万元,增长幅度为60%至70%,基本每股收益1.96元至2.08元;上年同期业绩:净利润4718210000元,基本每股收益1.46元;2）业绩变化原因:1.合并报表因素。本公司于2011年7月通过非公开发行股份获得平安银行90.75%的股份,成为平安银行的控股股东。按照《企业会计准则》规定，本公司自2011年第三季度起编制合并报表，合并报表中2011年1-9月净利润包含母公司（深发展）1-9月的净利润和子公司（平安银行）自购买日至9月30日止的净利润，以及相应的合并调整项目；合并报表中2011年7-9月净利润包含母公司（深发展）7-9月的净利润和子公司（平安银行）自购买日至9月30日止的净利润，以及相应的合并调整项目；而上年同期净利润均为母公司（深发展）当期的净利润，没有合并报表因素；2.母公司（深发展）单体净利润同比大幅增长。母公司（深发展）1-9月净利润同比增长约50%，主要原因是资产规模的稳定增长，以及利差改善和成本有效控制。&quot;,&quot;1.合并报表因素。本公司于2011年7月通过非公开发行股份获得平安银行90.75%的股份,成为平安银行的控股股东。按照《企业会计准则》规定，本公司自2011年第三季度起编制合并报表，合并报表中2011年1-9月净利润包含母公司（深发展）1-9月的净利润和子公司（平安银行）自购买日至9月30日止的净利润，以及相应的合并调整项目；合并报表中2011年7-9月净利润包含母公司（深发展）7-9月的净利润和子公司（平安银行）自购买日至9月30日止的净利润，以及相应的合并调整项目；而上年同期净利润均为母公司（深发展）当期的净利润，没有合并报表因素；2.母公司（深发展）单体净利润同比大幅增长。母公司（深发展）1-9月净利润同比增长约50%，主要原因是资产规模的稳定增长，以及利差改善和成本有效控制。&quot;\n000001,平安银行,&quot;预计2011-01-01到2011-12-31业绩：净利润999446万元至1061912万元,增长幅度为60%至70%,基本每股收益2.40元至2.55元;上年同期业绩:净利润6246540000元,基本每股收益1.90元;2）业绩变化原因:1.合并报表因素。本公司于2011年7月通过非公开发行股份获得平安银行90.75%的股份，成为平安银行的控股股东。按照《企业会计准则》规定，本公司自2011年第三季度起编制合并报表，合并报表中2011年度净利润包含本公司（深发展）1-12月的净利润和子公司（平安银行）自购买日至12月31日止的净利润，以及相应的合并调整项目，而上年同期净利润均为本公司（深发展）当年的净利润，没有合并报表因素；2.本报告期本公司（深发展）单体净利润同比大幅增长。本公司（深发展）2011年度净利润同比增长约45%-50%，主要原因是资产规模的稳定增长，以及息差改善和成本有效控制。&quot;,1.合并报表因素。本公司于2011年7月通过非公开发行股份获得平安银行90.75%的股份，成为平安银行的控股股东。按照《企业会计准则》规定，本公司自2011年第三季度起编制合并报表，合并报表中2011年度净利润包含本公司（深发展）1-12月的净利润和子公司（平安银行）自购买日至12月31日止的净利润，以及相应的合并调整项目，而上年同期净利润均为本公司（深发展）当年的净利润，没有合并报表因素；2.本报告期本公司（深发展）单体净利润同比大幅增长。本公司（深发展）2011年度净利润同比增长约45%-50%，主要原因是资产规模的稳定增长，以及息差改善和成本有效控制。\n000001,平安银行,&quot;预计2015-01-01到2015-12-31业绩：净利润2079206万元至2277225万元,增长幅度为5%至15%,基本每股收益1.48元至1.62元;上年同期业绩:净利润19801960000元,基本每股收益1.44元;2）业绩变化原因:资产规模的稳定增长、息差改善以及成本有效控制。&quot;,资产规模的稳定增长、息差改善以及成本有效控制。\n000002,万科A,预计公司2006年全年净利润较去年增长50%~65%。2）业绩变化原因:公司2006年实现销售面积超过300万平方米，销售金额超过200亿元，可结算资源大幅上升，公司预计2006年可实现净利润数较上年同期将明显增长。,公司2006年实现销售面积超过300万平方米，销售金额超过200亿元，可结算资源大幅上升，公司预计2006年可实现净利润数较上年同期将明显增长。\n关键词词云import jieba\nimport jieba.analyse\nimport jieba\nimport jieba.posseg as psg\nfrom collections import Counter\n# 待分词的文本路径\nsourceTxt &#x3D; r&quot;D:\\\\学习\\\\excel\\\\文本分析\\\\数据集\\\\文本分析\\\\单列.txt&quot;\n# 分好词后的文本路径\ntargetTxt &#x3D; r&quot;D:\\\\学习\\\\excel\\\\文本分析\\\\数据集\\\\文本分析\\\\单列输出.txt&quot;\n\n# 对文本进行操作\n\nwith open(sourceTxt, &#39;r&#39;, encoding &#x3D; &#39;utf-8&#39;) as sourceFile, open(targetTxt, &#39;a+&#39;, encoding &#x3D; &#39;utf-8&#39;) as targetFile:\n    for line in sourceFile:\n        seg &#x3D; jieba.cut(line.strip(), cut_all &#x3D; False)\n        # 分好词之后之间用空格隔断\n        output &#x3D; &#39; &#39;.join(seg)\n        targetFile.write(output)\n        targetFile.write(&#39;\\n&#39;)\n    print(&#39;写入成功！&#39;)\n\n# 提取关键词\nwith open(targetTxt, &#39;r&#39;, encoding &#x3D; &#39;utf-8&#39;) as file:\n    text &#x3D; file.readlines()\n    &quot;&quot;&quot;\n    几个参数解释：\n        * text : 待提取的字符串类型文本\n        * topK : 返回TF-IDF权重最大的关键词的个数，默认为20个\n        * withWeight : 是否返回关键词的权重值，默认为False\n        * allowPOS : 包含指定词性的词，默认为空\n    &quot;&quot;&quot;\n    keywords &#x3D; jieba.analyse.extract_tags(str(text), topK &#x3D; 100, withWeight&#x3D;True, allowPOS&#x3D;())\n    print(keywords)\n    print(&#39;提取完毕！&#39;)\n\nimport jieba.analyse\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud,STOPWORDS,ImageColorGenerator\n\ncontent &#x3D; open(r&quot;D:\\\\学习\\\\excel\\\\文本分析\\\\数据集\\\\文本分析\\\\单列输出.txt&quot;, encoding &#x3D; &#39;UTF-8&#39;).read()\ntags &#x3D; jieba.analyse.extract_tags(content,topK&#x3D;200,withWeight&#x3D;False)\ntext &#x3D; &#39; &#39;.join(tags)\nwc &#x3D; WordCloud(font_path&#x3D;r&quot;D:\\\\coder\\\\randomnumbers\\\\Keywords_cloud\\\\msyh.ttf&quot;,\n              background_color&#x3D;&#39;white&#39;,max_words&#x3D;2000,\n              #max_font_size&#x3D;120,min_font_size&#x3D;10,\n\n              random_state&#x3D;42,width&#x3D;1200,height&#x3D;800)\nwc.generate(text)\nplt.imshow(wc)\nplt.axis(&#39;off&#39;)\nplt.show()\n\n\n\n当然，这是整体的内容，我们目前的研究对象是一行，也就是单篇业绩预告内容。现在我们研究单列：利润的显著增长主要是由于利差的改善、资金运用效率的提高和贷款的良好增长，不良资产的成功清收和资产质量的改善使得所需减值拨备降低。这些因素连同有效税率的降低都进一步增强了我行的盈利能力。,利润的显著增长主要是由于利差的改善、资金运用效率的提高和贷款的良好增长，不良资产的成功清收和资产质量的改善使得所需减值拨备降低。这些因素连同有效税率的降低都进一步增强了我行的盈利能力。\n\n\n\n\n\n\n\n\n\ndict_keys([‘清收’, ‘拨备’, ‘改善’, ‘降低’, ‘资金运用’, ‘我行’, ‘不良资产’, ‘减值’, ‘税率’, ‘增长’, ‘利差’, ‘效率’, ‘增强’, ‘质量’, ‘盈利’, ‘贷款’, ‘利润’, ‘成功’, ‘资产’, ‘能力’, ‘因素’, ‘进一步’, ‘提高’])\n但是我们同样发现，出现了“我行”、“效率”、“能力”这样单拎出来不知所云的词汇，难以判断这个公司业绩情况。现在找一个亏损的：\n由于公司受托管理实际控制人的房地产项目在业务上具有不均衡性；而自有在建项目因开发周期较长，短期内没有商品房销售。另公司的药产品生产和销售规模偏小，利润较薄。,由于公司受托管理实际控制人的房地产项目在业务上具有不均衡性；而自有在建项目因开发周期较长，短期内没有商品房销售。另公司的药产品生产和销售规模偏小，利润较薄。\n\n\n\n\n\n\n\n\n\ndict_keys([‘管理控制’, ‘长短期’, ‘开发周期’, ‘均衡性’, ‘销售’, ‘项目’, ‘受托’, ‘偏小’, ‘在建’, ‘商品房’, ‘自有’, ‘公司’, ‘利润’, ‘房地产’, ‘业务’, ‘规模’, ‘产品’, ‘生产’])\n也可以看出，类似“管理控制”这种词与判断依据无关，“房地产”、“项目”属于股票所属公司属性，所以需要专门设置停用词库去除:单篇效果如此，现在以一个公司不同阶段的业绩预告进行分析：\n利润的显著增长主要是由于利差的改善、资金运用效率的提高和贷款的良好增长，不良资产的成功清收和资产质量的改善使得所需减值拨备降低。这些因素连同有效税率的降低都进一步增强了我行的盈利能力。\n存贷款的良好的增长、利差的改善、中间业务收入的增加及有效税率的降低。\n净利润大幅增长的原因主要是由于存贷款的增长，利差的扩大，中间业务收入的增加，资产质量的提高以及有效税率的降低。\n净利润大幅增长的原因主要是由于存贷款的增长，利差的扩大，中间业务收入的增加，资产质量的提高以及有效税率的降低。\n净利润较去年同期大幅增长的原因主要是由于存贷款的增长，利差的扩大，中间业务收入的增加，资产质量稳定以及有效税率的降低。\n\n\n\n\n\n\n\n\n\n\n[(‘税率’, 0.3725221877421053), (‘利差’, 0.36716002475701753), (‘存贷款’, 0.34978428137719303), (‘增长’, 0.3350161822421052), (‘中间业务’, 0.33269603663789477), (‘降低’, 0.29716572473894737), (‘有效’, 0.2322897566864035), (‘质量’, 0.20333572805894737), (‘收入’, 0.18546077404877193), (‘资产’, 0.17689818716105263), (‘增加’, 0.16045609780982453), (‘净利润’, 0.15757601134973684), (‘改善’, 0.15078009112552632), (‘扩大’, 0.1404368651226316), (‘由于’, 0.1354583684880702), (‘大幅’, 0.13482306223973684), (‘原因’, 0.1303113663868421), (‘提高’, 0.12458380736263158), (‘清收’, 0.12193576887719298), (‘主要’, 0.12135314037964913), (‘以及’, 0.10513400793052632), (‘拨备’, 0.10486638160438595), (‘良好’, 0.09989638662561404), (‘资金运用’, 0.09026105034473685), (‘我行’, 0.08894278540614034), (‘偏小’, 0.08418081191903508), (‘不良资产’, 0.08317400915947369), (‘减值’, 0.07994022727359648), (‘连同’, 0.06692709842210527), (‘较长’, 0.06415024243114036), (‘均衡’, 0.06386495127587719), (‘去年同期’, 0.06311437330807018), (‘效率’, 0.06026933982692982), (‘显著’, 0.059756744502631576), (‘短期内’, 0.059525510557982456), (‘周期’, 0.05562384347342106), (‘增强’, 0.05085248573324561), (‘盈利’, 0.05019824726429825), (‘贷款’, 0.049768152786228065), (‘利润’, 0.04971904949219299), (‘使得’, 0.04911322709526316), (‘销售’, 0.04665139189157895), (‘成功’, 0.04652735881736842), (‘稳定’, 0.0453450990477193), (‘能力’, 0.04329248314184211), (‘因素’, 0.04320882878070176), (‘规模’, 0.04314688299114035), (‘进一步’, 0.042329687977280706), (‘这些’, 0.033722283029385965), (‘没有’, 0.02730546986973684)] \n500条呢？在不明确规定词库的情况下，我们可以看到很多与判断无关的词汇被嵌入词云，而且主语词占比较大；而且，由于没有设置专有词库，文本分得太细，也很难判断具体情况。\n单纯的“增长”、“减少”显然无法满足我们的要求。接下来，就是针对性停用词库的设计，以及固定搭配、专有词汇的收集。\n","slug":"文本挖掘-业绩预告1","date":"2022-11-23T09:30:49.000Z","categories_index":"机器学习","tags_index":"文本挖掘","author_index":"Algernon"},{"id":"5e052f8081ce63158164ffaae7cff66b","title":"【数据库系统概论】关系数据理论、范式","content":"数据库一二三范式简单解释\n第一范式一个关系模式应当是一个五元组。$R(U,D,DOM,F)$这里：\n\n关系名$R$是符号化的元组语义\n$U$为一组属性\n$D$为属性组$U$中的属性所来自的域\n$DOM$为属性到域的映射\n$F$为属性组$U$上的一组数据依赖\n\n由于$D,DOM$与模式设计关系不大，因此在此把关系模式看作一个三元组：$$当且仅当$U$上的一个关系$r$满足$F$时，$r$成为关系模式$R$的一个关系。\n作为一个二维表，关系要符合一个最基本的条件：每一个分量必须是不可分的数据项满足了这个条件的关系模式就属于第一范式（1NF）\n数据依赖：数据依赖是一个关系内部属性与属性之间的一种约束关系。这种约束关系是通过属性间值的相等与否体现出来的数据间相关联系。\n人们已经提出了许多种类型的数据依赖，其中最重要的是函数依赖和多值依赖\n但是，这个关系模式存在以下问题：\n 数据冗余 每一个系的系主任姓名重复出现，重复次数与该系所有学生的课程成绩出现的次数相同。 这将浪费大量的存储空间。更新异常某系更换系主任后，必须修改与该系学生有关的每一个元组。\n插入异常如果一个系刚成立，尚无学生，则无法将这个系及其系主任的信息存入数据库。\n删除异常如果某个系的学生全部毕业了，则在删除该系学生信息的同时，这个系及其系主任的信息也丢掉了。\n一个好的模式应当不会发生插入异常、删除异常和更新异常，数据冗余应尽可能少。\n规范化函数依赖设$R(U)$是属性集$U$上的关系模式，$X,Y$是$U$的子集。若对于$R(U)$的任意一个可能的关系$r$，$r$中不可能存在两个元组在$X$上的属性值相等，而在$Y$上的属性值不等，则称$X$函数确定$Y$或$Y$函数依赖于$X$。记作$X \\rightarrow Y$。函数依赖和别的数据依赖一样是语义范畴的概念，只能根据语义来确定一个函数依赖。\n下面介绍一些术语和记号\n\n\n$X \\rightarrow Y$，但$Y \\subsetneq X$,则称$X \\rightarrow Y$是非平凡的函数依赖。\n\n$X \\rightarrow Y$，但$Y \\subseteq X$,则称$X \\rightarrow Y$是平凡的函数依赖。对于任一关系模式，平凡函数依赖都是必然成立的，它不反映新的语义。若不特别声明，总是讨论平凡的函数依赖。\n\n若$X \\rightarrow Y$，则$X$称为这个函数依赖的决定属性组，也称为决定因素。\n\n若$X \\rightarrow Y$，$Y \\rightarrow X$，则记作$X \\leftarrow \\rightarrow Y$\n若$Y$函数不依赖于$X$，则记作$X \\nrightarrow Y$\n\n\n\n在$R(U)$中，如果$X \\rightarrow Y$，并且对于$X$的任何一个真子集$X^{‘}$,都有$X^{‘}\\nrightarrow Y$,则称$Y$对$X$完全函数依赖，记作$X{\\rightarrow}^{F} Y$如果$X \\rightarrow Y$，但$Y$不完全函数依赖于$X$，则称$Y$对$X$部分函数依赖，记作$X{\\rightarrow}^{P} Y$\n码码是关系模式中的一个重要概念。设$K$为$R$中的属性或属性组合，若$R{\\rightarrow}^{F} U$，则$K$为$R$的候选码。注意$U$是完全函数依赖于$K$，而不是部分函数依赖于$K$。一般地，如果$U$函数依赖于$K$，即$K{\\rightarrow} U$，则$K$称为超码。\n 候选码是一类特殊的超码，即候选码的超集（如果存在）一定是超码，候选码的任何真子集一定不是超码。\n若候选码多于一个，则选定其中的一个为主码。包含在任何一个候选码中的属性称为主属性；不包含在任何候选码中的属性称为非主属性或非码属性。最简单的情况，单个属性是码；最极端的情况，整个属性组是码，称为全码。\n范式关系数据库中的关系是要满足一定要求的，满足不同程度要求的为不同范式。\n一个低一级的范式的关系模式通过模式分解可以转换为若干高一级范式的关系模式的集合，这种过程就叫规范化。\n第二范式若$R\\in 1NF$，且每一个非主属性完全函数依赖于任何一个候选码，则$R\\in 2NF$。\n第三范式设关系模式$R \\in1NF$,若$R$中不存在这样的码$X$，属性组$Y$及非主属性$Z(Z \\subsetneq Y)$使得$X \\rightarrow Y$,$Y \\rightarrow Z$,$Y\\nrightarrow X$,则称$R\\in3NF$。\n扩充的第三范式BCNF是修正的第三范式，有时也称为扩充的第三范式。关系模式$R\\in1NF$,若$X \\rightarrow Y$且$Y\\subsetneq X$时$X$必含有码，则$R\\in BCNF$\n由$NCNF$的定义可以得到结论，一个满足$BCNF$的关系模式有：\n\n所有非主属性对每一个码都是完全函数依赖。\n所有主属性对每一个不包含它的码也是完全函数依赖。\n没有任何属性完全函数依赖于非码的任何一组属性。\n\n多值依赖设$R(U)$是属性集$U$上的一个关系模式。$X,Y,Z$是$U$的子集，并且$Z=U-X-Y$。关系模式$R(U)$中多值依赖$X\\rightarrow\\rightarrow Y$成立，当且仅当对$R(U)$的任一关系$r$，给定的一对$(x,z)$值，有一组$Y$的值，这组值仅仅决定于$x$值而与$z$值无关。\n 多值依赖具有以下性质：\n\n对称性\n传递性\n函数依赖可以看作是多值依赖的特殊情况\n与函数依赖相比，多值依赖有下面两个基本的区别：\n\n多值依赖的有效性与属性集的范围有关\n\n见P188\n\n4NF$4NF$就是限制关系模式的属性之间不允许有非平凡且非函数依赖的多值依赖。\n数据依赖的公理系统$Armstrong$公理系统:设$U$为属性集总体，$F$是$U$上的一组函数依赖，于是有关系模式$R$，对其来说有以下的推理法则：\n\nA1 自反律\nA2 增广律\nA3 传递律\n\n根据$A1,A2,A3$这三条推理规则可以得到下面三条有用的推理规则：\n\n合并规则\n伪传递规则\n分解规则\n\n\n","slug":"数据库范式","date":"2022-11-19T07:11:49.000Z","categories_index":"信管","tags_index":"数据库","author_index":"Algernon"},{"id":"cb8a81edf7e7c09fe49113ae9ef768ab","title":"【区块链技术与应用】（七）","content":"资料来源\n\n\n\n\n\n\n\n\nhttps://pkg.go.dev/github.com/hyperledger/fabric-sdk-go#section-readme\nhttps://github.com/hyperledger/fabric-sdk-gohttps://wiki.hyperledger.org/display/fabrichttps://github.com/hyperledger/fabric-samples\n书接上回，补充getway链码分析上期代码实战点击上次作业链接，查看三种实例的运行结果\nasset-transfer-basicassetTransfer.go&#x2F;*\nSPDX-License-Identifier: Apache-2.0\n*&#x2F;\n\npackage main\n\nimport (\n\t&quot;log&quot;\n\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-contract-api-go&#x2F;contractapi&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-samples&#x2F;asset-transfer-basic&#x2F;chaincode-go&#x2F;chaincode&quot;\n)\n\nfunc main() &#123;\n&#x2F;&#x2F;新建链码\n\tassetChaincode, err :&#x3D; contractapi.NewChaincode(&amp;chaincode.SmartContract&#123;&#125;)\n\tif err !&#x3D; nil &#123;\n\t\tlog.Panicf(&quot;Error creating asset-transfer-basic chaincode: %v&quot;, err)\n\t&#125;\n&#x2F;&#x2F;启动链码\n\tif err :&#x3D; assetChaincode.Start(); err !&#x3D; nil &#123;\n\t\tlog.Panicf(&quot;Error starting asset-transfer-basic chaincode: %v&quot;, err)\n\t&#125;\n&#125;\nsmartcontract.gopackage chaincode\n\nimport (\n\t&quot;encoding&#x2F;json&quot;\n\t&quot;fmt&quot;\n\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-contract-api-go&#x2F;contractapi&quot;\n)\n\n&#x2F;&#x2F; SmartContract provides functions for managing an Asset\n&#x2F;&#x2F;链码结构\ntype SmartContract struct &#123;\n\tcontractapi.Contract\n&#125;\n\n&#x2F;&#x2F; Asset describes basic details of what makes up a simple asset\n&#x2F;&#x2F;Insert struct field in alphabetic order &#x3D;&gt; to achieve determinism across languages\n&#x2F;&#x2F; golang keeps the order when marshal to json but doesn&#39;t order automatically\ntype Asset struct &#123;\n\tAppraisedValue int    &#96;json:&quot;AppraisedValue&quot;&#96;\n\tColor          string &#96;json:&quot;Color&quot;&#96;\n\tID             string &#96;json:&quot;ID&quot;&#96;\n\tOwner          string &#96;json:&quot;Owner&quot;&#96;\n\tSize           int    &#96;json:&quot;Size&quot;&#96;\n&#125;\n\n&#x2F;&#x2F; InitLedger adds a base set of assets to the ledger\nfunc (s *SmartContract) InitLedger(ctx contractapi.TransactionContextInterface) error &#123;\n\tassets :&#x3D; []Asset&#123;\n\t\t&#123;ID: &quot;asset1&quot;, Color: &quot;blue&quot;, Size: 5, Owner: &quot;Tomoko&quot;, AppraisedValue: 300&#125;,\n\t\t&#123;ID: &quot;asset2&quot;, Color: &quot;red&quot;, Size: 5, Owner: &quot;Brad&quot;, AppraisedValue: 400&#125;,\n\t\t&#123;ID: &quot;asset3&quot;, Color: &quot;green&quot;, Size: 10, Owner: &quot;Jin Soo&quot;, AppraisedValue: 500&#125;,\n\t\t&#123;ID: &quot;asset4&quot;, Color: &quot;yellow&quot;, Size: 10, Owner: &quot;Max&quot;, AppraisedValue: 600&#125;,\n\t\t&#123;ID: &quot;asset5&quot;, Color: &quot;black&quot;, Size: 15, Owner: &quot;Adriana&quot;, AppraisedValue: 700&#125;,\n\t\t&#123;ID: &quot;asset6&quot;, Color: &quot;white&quot;, Size: 15, Owner: &quot;Michel&quot;, AppraisedValue: 800&#125;,\n\t&#125;\n\n\tfor _, asset :&#x3D; range assets &#123;\n\t\n\t\tassetJSON, err :&#x3D; json.Marshal(asset)\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn err\n\t\t&#125;\n&#x2F;&#x2F;存放数据\n\t\terr &#x3D; ctx.GetStub().PutState(asset.ID, assetJSON)\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn fmt.Errorf(&quot;failed to put to world state. %v&quot;, err)\n\t\t&#125;\n\t&#125;\n\n\treturn nil\n&#125;\n\n&#x2F;&#x2F; CreateAsset issues a new asset to the world state with given details.\n&#x2F;&#x2F;查看代码中的创建资产函数名称及参数\nfunc (s *SmartContract) CreateAsset(ctx contractapi.TransactionContextInterface, id string, color string, size int, owner string, appraisedValue int) error &#123;\n\texists, err :&#x3D; s.AssetExists(ctx, id)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\tif exists &#123;\n\t\treturn fmt.Errorf(&quot;the asset %s already exists&quot;, id)\n\t&#125;\n\n\tasset :&#x3D; Asset&#123;\n\t\tID:             id,\n\t\tColor:          color,\n\t\tSize:           size,\n\t\tOwner:          owner,\n\t\tAppraisedValue: appraisedValue,\n\t&#125;\n\tassetJSON, err :&#x3D; json.Marshal(asset)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\n\treturn ctx.GetStub().PutState(id, assetJSON)\n&#125;\n\n&#x2F;&#x2F; ReadAsset returns the asset stored in the world state with given id.\nfunc (s *SmartContract) ReadAsset(ctx contractapi.TransactionContextInterface, id string) (*Asset, error) &#123;\n\tassetJSON, err :&#x3D; ctx.GetStub().GetState(id)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, fmt.Errorf(&quot;failed to read from world state: %v&quot;, err)\n\t&#125;\n\tif assetJSON &#x3D;&#x3D; nil &#123;\n\t\treturn nil, fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n\t&#125;\n\n\tvar asset Asset\n\terr &#x3D; json.Unmarshal(assetJSON, &amp;asset)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\n\treturn &amp;asset, nil\n&#125;\n\n&#x2F;&#x2F; UpdateAsset updates an existing asset in the world state with provided parameters.\nfunc (s *SmartContract) UpdateAsset(ctx contractapi.TransactionContextInterface, id string, color string, size int, owner string, appraisedValue int) error &#123;\n\texists, err :&#x3D; s.AssetExists(ctx, id)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\tif !exists &#123;\n\t\treturn fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n\t&#125;\n\n\t&#x2F;&#x2F; overwriting original asset with new asset\n\tasset :&#x3D; Asset&#123;\n\t\tID:             id,\n\t\tColor:          color,\n\t\tSize:           size,\n\t\tOwner:          owner,\n\t\tAppraisedValue: appraisedValue,\n\t&#125;\n\tassetJSON, err :&#x3D; json.Marshal(asset)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\n\treturn ctx.GetStub().PutState(id, assetJSON)\n&#125;\n\n&#x2F;&#x2F; DeleteAsset deletes an given asset from the world state.\nfunc (s *SmartContract) DeleteAsset(ctx contractapi.TransactionContextInterface, id string) error &#123;\n\texists, err :&#x3D; s.AssetExists(ctx, id)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\tif !exists &#123;\n\t\treturn fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n\t&#125;\n\n\treturn ctx.GetStub().DelState(id)\n&#125;\n\n&#x2F;&#x2F; AssetExists returns true when asset with given ID exists in world state\nfunc (s *SmartContract) AssetExists(ctx contractapi.TransactionContextInterface, id string) (bool, error) &#123;\n\tassetJSON, err :&#x3D; ctx.GetStub().GetState(id)\n\tif err !&#x3D; nil &#123;\n\t\treturn false, fmt.Errorf(&quot;failed to read from world state: %v&quot;, err)\n\t&#125;\n\n\treturn assetJSON !&#x3D; nil, nil\n&#125;\n\n&#x2F;&#x2F; TransferAsset updates the owner field of asset with given id in world state, and returns the old owner.\nfunc (s *SmartContract) TransferAsset(ctx contractapi.TransactionContextInterface, id string, newOwner string) (string, error) &#123;\n\tasset, err :&#x3D; s.ReadAsset(ctx, id)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, err\n\t&#125;\n\n\toldOwner :&#x3D; asset.Owner\n\tasset.Owner &#x3D; newOwner\n\n\tassetJSON, err :&#x3D; json.Marshal(asset)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, err\n\t&#125;\n\n\terr &#x3D; ctx.GetStub().PutState(id, assetJSON)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, err\n\t&#125;\n\n\treturn oldOwner, nil\n&#125;\n\n&#x2F;&#x2F; GetAllAssets returns all assets found in world state\nfunc (s *SmartContract) GetAllAssets(ctx contractapi.TransactionContextInterface) ([]*Asset, error) &#123;\n\t&#x2F;&#x2F; range query with empty string for startKey and endKey does an\n\t&#x2F;&#x2F; open-ended query of all assets in the chaincode namespace.\n\tresultsIterator, err :&#x3D; ctx.GetStub().GetStateByRange(&quot;&quot;, &quot;&quot;)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\tdefer resultsIterator.Close()\n\n\tvar assets []*Asset\n\tfor resultsIterator.HasNext() &#123;\n\t\tqueryResponse, err :&#x3D; resultsIterator.Next()\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn nil, err\n\t\t&#125;\n\n\t\tvar asset Asset\n\t\terr &#x3D; json.Unmarshal(queryResponse.Value, &amp;asset)\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn nil, err\n\t\t&#125;\n\t\tassets &#x3D; append(assets, &amp;asset)\n\t&#125;\n\n\treturn assets, nil\n&#125;\nasset-transfer-eventsconnect.go&#x2F;*\nCopyright 2022 IBM All Rights Reserved.\n\nSPDX-License-Identifier: Apache-2.0\n*&#x2F;\n\npackage main\n\nimport (\n\t&quot;crypto&#x2F;x509&quot;\n\t&quot;fmt&quot;\n\t&quot;os&quot;\n\t&quot;path&quot;\n\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-gateway&#x2F;pkg&#x2F;identity&quot;\n\t&quot;google.golang.org&#x2F;grpc&quot;\n\t&quot;google.golang.org&#x2F;grpc&#x2F;credentials&quot;\n)\n\nconst (\n\tmspID        &#x3D; &quot;Org1MSP&quot;\n\tcryptoPath   &#x3D; &quot;..&#x2F;..&#x2F;test-network&#x2F;organizations&#x2F;peerOrganizations&#x2F;org1.example.com&quot;\n\tcertPath     &#x3D; cryptoPath + &quot;&#x2F;users&#x2F;User1@org1.example.com&#x2F;msp&#x2F;signcerts&#x2F;cert.pem&quot;\n\tkeyPath      &#x3D; cryptoPath + &quot;&#x2F;users&#x2F;User1@org1.example.com&#x2F;msp&#x2F;keystore&#x2F;&quot;\n\ttlsCertPath  &#x3D; cryptoPath + &quot;&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;ca.crt&quot;\n\tpeerEndpoint &#x3D; &quot;localhost:7051&quot;\n\tgatewayPeer  &#x3D; &quot;peer0.org1.example.com&quot;\n)\n\n&#x2F;&#x2F; newGrpcConnection creates a gRPC connection to the Gateway server.\nfunc newGrpcConnection() *grpc.ClientConn &#123;\n\tcertificate, err :&#x3D; loadCertificate(tlsCertPath)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n\n\tcertPool :&#x3D; x509.NewCertPool()\n\tcertPool.AddCert(certificate)\n\ttransportCredentials :&#x3D; credentials.NewClientTLSFromCert(certPool, gatewayPeer)\n\n\tconnection, err :&#x3D; grpc.Dial(peerEndpoint, grpc.WithTransportCredentials(transportCredentials))\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to create gRPC connection: %w&quot;, err))\n\t&#125;\n\n\treturn connection\n&#125;\n\n&#x2F;&#x2F; newIdentity creates a client identity for this Gateway connection using an X.509 certificate.\nfunc newIdentity() *identity.X509Identity &#123;\n\tcertificate, err :&#x3D; loadCertificate(certPath)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n\n\tid, err :&#x3D; identity.NewX509Identity(mspID, certificate)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n\n\treturn id\n&#125;\n\nfunc loadCertificate(filename string) (*x509.Certificate, error) &#123;\n\tcertificatePEM, err :&#x3D; os.ReadFile(filename)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, fmt.Errorf(&quot;failed to read certificate file: %w&quot;, err)\n\t&#125;\n\treturn identity.CertificateFromPEM(certificatePEM)\n&#125;\n\n&#x2F;&#x2F; newSign creates a function that generates a digital signature from a message digest using a private key.\nfunc newSign() identity.Sign &#123;\n\tfiles, err :&#x3D; os.ReadDir(keyPath)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to read private key directory: %w&quot;, err))\n\t&#125;\n\tprivateKeyPEM, err :&#x3D; os.ReadFile(path.Join(keyPath, files[0].Name()))\n\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to read private key file: %w&quot;, err))\n\t&#125;\n\n\tprivateKey, err :&#x3D; identity.PrivateKeyFromPEM(privateKeyPEM)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n\n\tsign, err :&#x3D; identity.NewPrivateKeySign(privateKey)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n\n\treturn sign\n&#125;\napp.go&#x2F;*\nCopyright 2022 IBM All Rights Reserved.\n\nSPDX-License-Identifier: Apache-2.0\n*&#x2F;\n\npackage main\n\nimport (\n\t&quot;bytes&quot;\n\t&quot;context&quot;\n\t&quot;encoding&#x2F;json&quot;\n\t&quot;errors&quot;\n\t&quot;fmt&quot;\n\t&quot;time&quot;\n\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-gateway&#x2F;pkg&#x2F;client&quot;\n)\n\nconst (\n\tchannelName   &#x3D; &quot;mychannel&quot;\n\tchaincodeName &#x3D; &quot;events&quot;\n)\n\nvar now &#x3D; time.Now()\nvar assetID &#x3D; fmt.Sprintf(&quot;asset%d&quot;, now.Unix()*1e3+int64(now.Nanosecond())&#x2F;1e6)\n\nfunc main() &#123;\n\tclientConnection :&#x3D; newGrpcConnection()\n\tdefer clientConnection.Close()\n\n\tid :&#x3D; newIdentity()\n\tsign :&#x3D; newSign()\n\n\tgateway, err :&#x3D; client.Connect(\n\t\tid,\n\t\tclient.WithSign(sign),\n\t\tclient.WithClientConnection(clientConnection),\n\t\tclient.WithEvaluateTimeout(5*time.Second),\n\t\tclient.WithEndorseTimeout(15*time.Second),\n\t\tclient.WithSubmitTimeout(5*time.Second),\n\t\tclient.WithCommitStatusTimeout(1*time.Minute),\n\t)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n\tdefer gateway.Close()\n\n\tnetwork :&#x3D; gateway.GetNetwork(channelName)\n\tcontract :&#x3D; network.GetContract(chaincodeName)\n\n\t&#x2F;&#x2F; Context used for event listening\n\tctx, cancel :&#x3D; context.WithCancel(context.Background())\n\tdefer cancel()\n\n\t&#x2F;&#x2F; Listen for events emitted by subsequent transactions\n\tstartChaincodeEventListening(ctx, network)\n\n\tfirstBlockNumber :&#x3D; createAsset(contract)\n\tupdateAsset(contract)\n\ttransferAsset(contract)\n\tdeleteAsset(contract)\n\n\t&#x2F;&#x2F; Replay events from the block containing the first transaction\n\treplayChaincodeEvents(ctx, network, firstBlockNumber)\n&#125;\n&#x2F;&#x2F;开始监听\nfunc startChaincodeEventListening(ctx context.Context, network *client.Network) &#123;\n\tfmt.Println(&quot;\\n*** Start chaincode event listening&quot;)\n\n\tevents, err :&#x3D; network.ChaincodeEvents(ctx, chaincodeName)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to start chaincode event listening: %w&quot;, err))\n\t&#125;\n\n\tgo func() &#123;\n\t\tfor event :&#x3D; range events &#123;\n\t\t\tasset :&#x3D; formatJSON(event.Payload)\n\t\t\tfmt.Printf(&quot;\\n&lt;-- Chaincode event received: %s - %s\\n&quot;, event.EventName, asset)\n\t\t&#125;\n\t&#125;()\n&#125;\n\nfunc formatJSON(data []byte) string &#123;\n\tvar result bytes.Buffer\n\tif err :&#x3D; json.Indent(&amp;result, data, &quot;&quot;, &quot;  &quot;); err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to parse JSON: %w&quot;, err))\n\t&#125;\n\treturn result.String()\n&#125;\n\nfunc createAsset(contract *client.Contract) uint64 &#123;\n\tfmt.Printf(&quot;\\n--&gt; Submit transaction: CreateAsset, %s owned by Sam with appraised value 100\\n&quot;, assetID)\n\n\t_, commit, err :&#x3D; contract.SubmitAsync(&quot;CreateAsset&quot;, client.WithArguments(assetID, &quot;blue&quot;, &quot;10&quot;, &quot;Sam&quot;, &quot;100&quot;))\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to submit transaction: %w&quot;, err))\n\t&#125;\n\n\tstatus, err :&#x3D; commit.Status()\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to get transaction commit status: %w&quot;, err))\n\t&#125;\n\n\tif !status.Successful &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to commit transaction with status code %v&quot;, status.Code))\n\t&#125;\n\n\tfmt.Println(&quot;\\n*** CreateAsset committed successfully&quot;)\n\n\treturn status.BlockNumber\n&#125;\n\nfunc updateAsset(contract *client.Contract) &#123;\n\tfmt.Printf(&quot;\\n--&gt; Submit transaction: UpdateAsset, %s update appraised value to 200\\n&quot;, assetID)\n\n\t_, err :&#x3D; contract.SubmitTransaction(&quot;UpdateAsset&quot;, assetID, &quot;blue&quot;, &quot;10&quot;, &quot;Sam&quot;, &quot;200&quot;)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to submit transaction: %w&quot;, err))\n\t&#125;\n\n\tfmt.Println(&quot;\\n*** UpdateAsset committed successfully&quot;)\n&#125;\n\nfunc transferAsset(contract *client.Contract) &#123;\n\tfmt.Printf(&quot;\\n--&gt; Submit transaction: TransferAsset, %s to Mary\\n&quot;, assetID)\n\n\t_, err :&#x3D; contract.SubmitTransaction(&quot;TransferAsset&quot;, assetID, &quot;Mary&quot;)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to submit transaction: %w&quot;, err))\n\t&#125;\n\n\tfmt.Println(&quot;\\n*** TransferAsset committed successfully&quot;)\n&#125;\n\nfunc deleteAsset(contract *client.Contract) &#123;\n\tfmt.Printf(&quot;\\n--&gt; Submit transaction: DeleteAsset, %s\\n&quot;, assetID)\n\n\t_, err :&#x3D; contract.SubmitTransaction(&quot;DeleteAsset&quot;, assetID)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to submit transaction: %w&quot;, err))\n\t&#125;\n\n\tfmt.Println(&quot;\\n*** DeleteAsset committed successfully&quot;)\n&#125;\n\nfunc replayChaincodeEvents(ctx context.Context, network *client.Network, startBlock uint64) &#123;\n\tfmt.Println(&quot;\\n*** Start chaincode event replay&quot;)\n\n\tevents, err :&#x3D; network.ChaincodeEvents(ctx, chaincodeName, client.WithStartBlock(startBlock))\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to start chaincode event listening: %w&quot;, err))\n\t&#125;\n\n\tfor &#123;\n\t\tselect &#123;\n\t\tcase &lt;-time.After(10 * time.Second):\n\t\t\tpanic(errors.New(&quot;timeout waiting for event replay&quot;))\n\n\t\tcase event :&#x3D; &lt;-events:\n\t\t\tasset :&#x3D; formatJSON(event.Payload)\n\t\t\tfmt.Printf(&quot;\\n&lt;-- Chaincode event replayed: %s - %s\\n&quot;, event.EventName, asset)\n\n\t\t\tif event.EventName &#x3D;&#x3D; &quot;DeleteAsset&quot; &#123;\n\t\t\t\t&#x2F;&#x2F; Reached the last submitted transaction so return to stop listening for events\n\t\t\t\treturn\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n&#125;\nSDK运行参见SDK运行实战，这是之前实验的内容，在此不多赘述。\n\n\n\n\n\n\n\n\n\nhttps://algernon98.github.io/post/%E5%8C%BA%E5%9D%97%E9%93%BE4\n\ncd .. &amp;&amp; go build &amp;&amp; .&#x2F;fabric-go-sdk\n&gt;&gt; 开始创建通道......\n&gt;&gt;&gt;&gt; 使用每个org的管理员身份更新锚节点配置...\n&gt;&gt;&gt;&gt; 使用每个org的管理员身份更新锚节点配置完成\n&gt;&gt; 创建通道成功\n&gt;&gt; 加入通道......\n&gt;&gt; 加入通道成功\n&gt;&gt; 开始打包链码......\n&gt;&gt; 打包链码成功\n&gt;&gt; 开始安装链码......\n&gt;&gt; 安装链码成功\n&gt;&gt; 组织认可智能合约定义......\n&gt;&gt;&gt; chaincode approved by Org1 peers:\n\tpeer0.org1.example.com:7051\n\tpeer1.org1.example.com:9051\n&gt;&gt; 组织认可智能合约定义完成\n&gt;&gt; 检查智能合约是否就绪......\nLifecycleCheckCCCommitReadiness cc &#x3D; simplecc, &#x3D; &#123;map[Org1MSP:true]&#125;\nLifecycleCheckCCCommitReadiness cc &#x3D; simplecc, &#x3D; &#123;map[Org1MSP:true]&#125;\n&gt;&gt; 智能合约已经就绪\n&gt;&gt; 提交智能合约定义......\n&gt;&gt; 智能合约定义提交完成\n&gt;&gt; 调用智能合约初始化方法......\n&gt;&gt; 完成智能合约初始化\n&gt;&gt; 通过链码外部服务设置链码状态......\n&gt;&gt; 设置链码状态完成\n&lt;--- 添加信息　---&gt;： 18c0c86ce029d7de04461484976c5151992864b52ca28905d0ccf911443fdfcb\n&lt;--- 查询信息　---&gt;： 123\n\n---------------------------------\n作者: Algernon\n本文来自于: https:&#x2F;&#x2F;algernon98.github.io&#x2F;\n博客内容遵循 署名-非商业性使用-相同方式共享 4.0 国际 (CC BY-NC-SA 4.0) 协议\n\nsdk链码分析chaincode\n\n\n\n\n\n\n\n\nhttps://github.com/sxguan/fabric-go-sdk/blob/main/chaincode/chaincode.go\n完整代码package main\n\nimport (\n\t&quot;encoding&#x2F;json&quot;\n\t&quot;fmt&quot;\n\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-chaincode-go&#x2F;shim&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-protos-go&#x2F;peer&quot;\n)\n\n&#x2F;&#x2F; SimpleAsset implements a simple chaincode to manage an asset\ntype SimpleAsset struct &#123;\n&#125;\ntype outputEvent struct &#123;\n\tEventName string\n&#125;\n\n&#x2F;&#x2F; Init is called during chaincode instantiation to initialize any\n&#x2F;&#x2F; data. Note that chaincode upgrade also calls this function to reset\n&#x2F;&#x2F; or to migrate data.\nfunc (t *SimpleAsset) Init(stub shim.ChaincodeStubInterface) peer.Response &#123;\n\tfmt.Printf(&quot;init...&quot;)\n\treturn shim.Success(nil)\n&#125;\n\n&#x2F;&#x2F; Invoke is called per transaction on the chaincode. Each transaction is\n&#x2F;&#x2F; either a &#39;get&#39; or a &#39;set&#39; on the asset created by Init function. The Set\n&#x2F;&#x2F; method may create a new asset by specifying a new key-value pair.\nfunc (t *SimpleAsset) Invoke(stub shim.ChaincodeStubInterface) peer.Response &#123;\n\t&#x2F;&#x2F; Extract the function and args from the transaction proposal\n\tfn, args :&#x3D; stub.GetFunctionAndParameters()\n\n\tvar result string\n\tvar err error\n\tif fn &#x3D;&#x3D; &quot;set&quot; &#123;\n\t\tresult, err &#x3D; set(stub, args)\n\t&#125; else &#123; &#x2F;&#x2F; assume &#39;get&#39; even if fn is nil\n\t\tresult, err &#x3D; get(stub, args)\n\t&#125;\n\tif err !&#x3D; nil &#123;\n\t\treturn shim.Error(err.Error())\n\t&#125;\n\n\t&#x2F;&#x2F; Return the result as success payload\n\treturn shim.Success([]byte(result))\n&#125;\n\n&#x2F;&#x2F; Set stores the asset (both key and value) on the ledger. If the key exists,\n&#x2F;&#x2F; it will override the value with the new one\nfunc set(stub shim.ChaincodeStubInterface, args []string) (string, error) &#123;\n\tif len(args) !&#x3D; 2 &#123;\n\t\treturn &quot;&quot;, fmt.Errorf(&quot;Incorrect arguments. Expecting a key and a value&quot;)\n\t&#125;\n\n\terr :&#x3D; stub.PutState(args[0], []byte(args[1]))\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, fmt.Errorf(&quot;Failed to set asset: %s&quot;, args[0])\n\t&#125;\n\tevent :&#x3D; outputEvent&#123;\n\t\tEventName: &quot;set&quot;,\n\t&#125;\n\tpayload, err :&#x3D; json.Marshal(event)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, err\n\t&#125;\n\terr &#x3D; stub.SetEvent(&quot;chaincode-event&quot;, payload)\n\treturn args[1], nil\n&#125;\n\n&#x2F;&#x2F; Get returns the value of the specified asset key\nfunc get(stub shim.ChaincodeStubInterface, args []string) (string, error) &#123;\n\tif len(args) !&#x3D; 1 &#123;\n\t\treturn &quot;&quot;, fmt.Errorf(&quot;Incorrect arguments. Expecting a key&quot;)\n\t&#125;\n\n\tvalue, err :&#x3D; stub.GetState(args[0])\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, fmt.Errorf(&quot;Failed to get asset: %s with error: %s&quot;, args[0], err)\n\t&#125;\n\tif value &#x3D;&#x3D; nil &#123;\n\t\treturn &quot;&quot;, fmt.Errorf(&quot;Asset not found: %s&quot;, args[0])\n\t&#125;\n\treturn string(value), nil\n&#125;\n\n&#x2F;&#x2F; main function starts up the chaincode in the container during instantiate\nfunc main() &#123;\n\tif err :&#x3D; shim.Start(new(SimpleAsset)); err !&#x3D; nil &#123;\n\t\tfmt.Printf(&quot;Error starting SimpleAsset chaincode: %s&quot;, err)\n\t&#125;\n&#125;\n逐个分析现在我们来逐步分析代码：\n导入所需包之后的函数中都有这一部分，如遇到import导入部分则省略。\nimport (\n\t&quot;encoding&#x2F;json&quot;\n\t&quot;fmt&quot;\n\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-chaincode-go&#x2F;shim&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-protos-go&#x2F;peer&quot;\n)\nintegration\n\n\n\n\n\n\n\n\nhttps://github.com/sxguan/fabric-go-sdk/blob/main/sdkInit/integration.go\n完整代码package sdkInit\n\nimport (\n\t&quot;encoding&#x2F;hex&quot;\n\t&quot;fmt&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;client&#x2F;channel&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;client&#x2F;event&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;common&#x2F;errors&#x2F;retry&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;common&#x2F;errors&#x2F;status&quot;\n\tcontextAPI &quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;common&#x2F;providers&#x2F;context&quot;\n\tfabAPI &quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;common&#x2F;providers&#x2F;fab&quot;\n\tcontextImpl &quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;context&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;fabsdk&quot;\n\t&quot;log&quot;\n)\n\nfunc DiscoverLocalPeers(ctxProvider contextAPI.ClientProvider, expectedPeers int) ([]fabAPI.Peer, error) &#123;\n\tctx, err :&#x3D; contextImpl.NewLocal(ctxProvider)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, fmt.Errorf(&quot;error creating local context: %v&quot;, err)\n\t&#125;\n\n\tdiscoveredPeers, err :&#x3D; retry.NewInvoker(retry.New(retry.TestRetryOpts)).Invoke(\n\t\tfunc() (interface&#123;&#125;, error) &#123;\n\t\t\tpeers, serviceErr :&#x3D; ctx.LocalDiscoveryService().GetPeers()\n\t\t\tif serviceErr !&#x3D; nil &#123;\n\t\t\t\treturn nil, fmt.Errorf(&quot;getting peers for MSP [%s] error: %v&quot;, ctx.Identifier().MSPID, serviceErr)\n\t\t\t&#125;\n\t\t\tif len(peers) &lt; expectedPeers &#123;\n\t\t\t\treturn nil, status.New(status.TestStatus, status.GenericTransient.ToInt32(), fmt.Sprintf(&quot;Expecting %d peers but got %d&quot;, expectedPeers, len(peers)), nil)\n\t\t\t&#125;\n\t\t\treturn peers, nil\n\t\t&#125;,\n\t)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\n\treturn discoveredPeers.([]fabAPI.Peer), nil\n&#125;\nfunc (t *SdkEnvInfo) InitService(chaincodeID, channelID string, org *OrgInfo, sdk *fabsdk.FabricSDK) error &#123;\n\thandler :&#x3D; &amp;SdkEnvInfo&#123;\n\t\tChaincodeID: chaincodeID,\n\t&#125;\n\t&#x2F;&#x2F;prepare channel client context using client context\n\tclientChannelContext :&#x3D; sdk.ChannelContext(channelID, fabsdk.WithUser(org.OrgUser), fabsdk.WithOrg(org.OrgName))\n\t&#x2F;&#x2F; Channel client is used to query and execute transactions (Org1 is default org)\n\tvar err error\n\tt.ChClient, err &#x3D; channel.New(clientChannelContext)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\tt.EvClient, err &#x3D; event.New(clientChannelContext, event.WithBlockEvents())\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\thandler.ChClient &#x3D; t.ChClient\n\thandler.EvClient &#x3D; t.EvClient\n\treturn nil\n&#125;\n\nfunc regitserEvent(client *event.Client, chaincodeID string) (fabAPI.Registration, &lt;-chan *fabAPI.CCEvent) &#123;\n\teventName :&#x3D; &quot;chaincode-event&quot;\n\n\treg, notifier, err :&#x3D; client.RegisterChaincodeEvent(chaincodeID, eventName)\n\tif err !&#x3D; nil &#123;\n\t\tfmt.Println(&quot;注册链码事件失败: %s&quot;, err)\n\t&#125;\n\n\treturn reg, notifier\n&#125;\nfunc ChainCodeEventListener(c *event.Client, ccID string) fabAPI.Registration &#123;\n\n\treg, notifier :&#x3D; regitserEvent(c, ccID)\n\n\t&#x2F;&#x2F; consume event\n\tgo func() &#123;\n\t\tfor e :&#x3D; range notifier &#123;\n\t\t\tlog.Printf(&quot;Receive cc event, ccid: %v \\neventName: %v\\n&quot;+\n\t\t\t\t&quot;payload: %v \\ntxid: %v \\nblock: %v \\nsourceURL: %v\\n&quot;,\n\t\t\t\te.ChaincodeID, e.EventName, string(e.Payload), e.TxID, e.BlockNumber, e.SourceURL)\n\t\t&#125;\n\t&#125;()\n\n\treturn reg\n&#125;\n\nfunc TxListener(c *event.Client, txIDCh chan string) &#123;\n\tlog.Println(&quot;Transaction listener start&quot;)\n\tdefer log.Println(&quot;Transaction listener exit&quot;)\n\n\tfor id :&#x3D; range txIDCh &#123;\n\t\t&#x2F;&#x2F; Register monitor transaction event\n\t\tlog.Printf(&quot;Register transaction event for: %v&quot;, id)\n\t\ttxReg, txCh, err :&#x3D; c.RegisterTxStatusEvent(id)\n\t\tif err !&#x3D; nil &#123;\n\t\t\tlog.Printf(&quot;Register transaction event error: %v&quot;, err)\n\t\t\tcontinue\n\t\t&#125;\n\t\tdefer c.Unregister(txReg)\n\n\t\t&#x2F;&#x2F; Receive transaction event\n\t\tgo func() &#123;\n\t\t\tfor e :&#x3D; range txCh &#123;\n\t\t\t\tlog.Printf(&quot;Receive transaction event: txid: %v, &quot;+\n\t\t\t\t\t&quot;validation code: %v, block number: %v&quot;,\n\t\t\t\t\te.TxID,\n\t\t\t\t\te.TxValidationCode,\n\t\t\t\t\te.BlockNumber)\n\t\t\t&#125;\n\t\t&#125;()\n\t&#125;\n&#125;\n\nfunc BlockListener(ec *event.Client) fabAPI.Registration &#123;\n\t&#x2F;&#x2F; Register monitor block event\n\tbeReg, beCh, err :&#x3D; ec.RegisterBlockEvent()\n\tif err !&#x3D; nil &#123;\n\t\tlog.Printf(&quot;Register block event error: %v&quot;, err)\n\t&#125;\n\tlog.Println(&quot;Registered block event&quot;)\n\n\t&#x2F;&#x2F; Receive block event\n\tgo func() &#123;\n\t\tfor e :&#x3D; range beCh &#123;\n\t\t\tlog.Printf(&quot;Receive block event:\\nSourceURL: %v\\nNumber: %v\\nHash&quot;+\n\t\t\t\t&quot;: %v\\nPreviousHash: %v\\n\\n&quot;,\n\t\t\t\te.SourceURL,\n\t\t\t\te.Block.Header.Number,\n\t\t\t\thex.EncodeToString(e.Block.Header.DataHash),\n\t\t\t\thex.EncodeToString(e.Block.Header.PreviousHash))\n\t\t&#125;\n\t&#125;()\n\n\treturn beReg\n&#125;\n逐个分析查找本地结点func DiscoverLocalPeers(ctxProvider contextAPI.ClientProvider, expectedPeers int) ([]fabAPI.Peer, error) &#123;\n\tctx, err :&#x3D; contextImpl.NewLocal(ctxProvider)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, fmt.Errorf(&quot;error creating local context: %v&quot;, err)\n\t&#125;\n\n\tdiscoveredPeers, err :&#x3D; retry.NewInvoker(retry.New(retry.TestRetryOpts)).Invoke(\n\t\tfunc() (interface&#123;&#125;, error) &#123;\n\t\t\tpeers, serviceErr :&#x3D; ctx.LocalDiscoveryService().GetPeers()\n\t\t\tif serviceErr !&#x3D; nil &#123;\n\t\t\t\treturn nil, fmt.Errorf(&quot;getting peers for MSP [%s] error: %v&quot;, ctx.Identifier().MSPID, serviceErr)\n\t\t\t&#125;\n\t\t\tif len(peers) &lt; expectedPeers &#123;\n\t\t\t\treturn nil, status.New(status.TestStatus, status.GenericTransient.ToInt32(), fmt.Sprintf(&quot;Expecting %d peers but got %d&quot;, expectedPeers, len(peers)), nil)\n\t\t\t&#125;\n\t\t\treturn peers, nil\n\t\t&#125;,\n\t)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\n\treturn discoveredPeers.([]fabAPI.Peer), nil\n&#125;\nmain完整代码package main\n\nimport (\n\t&quot;fabric-go-sdk&#x2F;sdkInit&quot;\n\t&quot;fmt&quot;\n\t&quot;os&quot;\n\t&quot;time&quot;\n)\n\nconst (\n\tcc_name    &#x3D; &quot;simplecc&quot;\n\tcc_version &#x3D; &quot;1.0.0&quot;\n)\n\nvar App sdkInit.Application\n\nfunc main() &#123;\n\t&#x2F;&#x2F; init orgs information 初始化组织信息\n\n\torgs :&#x3D; []*sdkInit.OrgInfo&#123;\n\t\t&#123;\n\t\t\tOrgAdminUser:  &quot;Admin&quot;,\n\t\t\tOrgName:       &quot;Org1&quot;,\n\t\t\tOrgMspId:      &quot;Org1MSP&quot;,\n\t\t\tOrgUser:       &quot;User1&quot;,\n\t\t\tOrgPeerNum:    2,\n\t\t\tOrgAnchorFile: &quot;&#x2F;root&#x2F;go&#x2F;src&#x2F;fabric-go-sdk&#x2F;fixtures&#x2F;channel-artifacts&#x2F;Org1MSPanchors.tx&quot;,\n\t\t&#125;,\n\t&#125;\n\n\t&#x2F;&#x2F; init sdk env info 初始化sdk相关信息\n\tinfo :&#x3D; sdkInit.SdkEnvInfo&#123;\n\t\tChannelID:        &quot;mychannel&quot;,\n\t\tChannelConfig:    &quot;&#x2F;root&#x2F;go&#x2F;src&#x2F;fabric-go-sdk&#x2F;fixtures&#x2F;channel-artifacts&#x2F;channel.tx&quot;,\n\t\tOrgs:             orgs,\n\t\tOrdererAdminUser: &quot;Admin&quot;,\n\t\tOrdererOrgName:   &quot;OrdererOrg&quot;,\n\t\tOrdererEndpoint:  &quot;orderer.example.com&quot;,\n\t\tChaincodeID:      cc_name,\n\t\tChaincodePath:    &quot;&#x2F;root&#x2F;go&#x2F;src&#x2F;fabric-go-sdk&#x2F;chaincode&#x2F;&quot;,\n\t\tChaincodeVersion: cc_version,\n\t&#125;\n\n\t&#x2F;&#x2F; sdk setup  调用setup方法将sdk初始化\n\tsdk, err :&#x3D; sdkInit.Setup(&quot;config.yaml&quot;, &amp;info)\n\tif err !&#x3D; nil &#123;\n\t\tfmt.Println(&quot;&gt;&gt; SDK setup error:&quot;, err)\n\t\tos.Exit(-1)\n\t&#125;\n\n\t&#x2F;&#x2F; create channel and join  调用CreateAndJoinChannel方法，创建并加入通道\n\tif err :&#x3D; sdkInit.CreateAndJoinChannel(&amp;info); err !&#x3D; nil &#123;\n\t\tfmt.Println(&quot;&gt;&gt; Create channel and join error:&quot;, err)\n\t\tos.Exit(-1)\n\t&#125;\n\n\t&#x2F;&#x2F; create chaincode lifecycle  调用CreateCCLifecycle方法实现链码生命周期\n\tif err :&#x3D; sdkInit.CreateCCLifecycle(&amp;info, 1, false, sdk); err !&#x3D; nil &#123;\n\t\tfmt.Println(&quot;&gt;&gt; create chaincode lifecycle error: %v&quot;, err)\n\t\tos.Exit(-1)\n\t&#125;\n\n\t&#x2F;&#x2F; invoke chaincode set status\n\tfmt.Println(&quot;&gt;&gt; 通过链码外部服务设置链码状态......&quot;)\n\n\tif err :&#x3D; info.InitService(info.ChaincodeID, info.ChannelID, info.Orgs[0], sdk); err !&#x3D; nil &#123;\n\n\t\tfmt.Println(&quot;InitService successful&quot;)\n\t\tos.Exit(-1)\n\t&#125;\n\n\tApp &#x3D; sdkInit.Application&#123;\n\t\tSdkEnvInfo: &amp;info,\n\t&#125;\n\tfmt.Println(&quot;&gt;&gt; 设置链码状态完成&quot;)\n\n\tdefer info.EvClient.Unregister(sdkInit.BlockListener(info.EvClient))\n\tdefer info.EvClient.Unregister(sdkInit.ChainCodeEventListener(info.EvClient, info.ChaincodeID))\n\n\ta :&#x3D; []string&#123;&quot;set&quot;, &quot;ID1&quot;, &quot;123&quot;&#125;\n\tret, err :&#x3D; App.Set(a)\n\tif err !&#x3D; nil &#123;\n\t\tfmt.Println(err)\n\t&#125;\n\tfmt.Println(&quot;&lt;--- 添加信息　---&gt;：&quot;, ret)\n\n\ta &#x3D; []string&#123;&quot;set&quot;, &quot;ID2&quot;, &quot;456&quot;&#125;\n\tret, err &#x3D; App.Set(a)\n\tif err !&#x3D; nil &#123;\n\t\tfmt.Println(err)\n\t&#125;\n\tfmt.Println(&quot;&lt;--- 添加信息　---&gt;：&quot;, ret)\n\n\ta &#x3D; []string&#123;&quot;set&quot;, &quot;ID3&quot;, &quot;789&quot;&#125;\n\tret, err &#x3D; App.Set(a)\n\tif err !&#x3D; nil &#123;\n\t\tfmt.Println(err)\n\t&#125;\n\tfmt.Println(&quot;&lt;--- 添加信息　---&gt;：&quot;, ret)\n\n\ta &#x3D; []string&#123;&quot;get&quot;, &quot;ID3&quot;&#125;\n\tresponse, err :&#x3D; App.Get(a)\n\tif err !&#x3D; nil &#123;\n\t\tfmt.Println(err)\n\t&#125;\n\tfmt.Println(&quot;&lt;--- 查询信息　---&gt;：&quot;, response)\n\n\ttime.Sleep(time.Second * 10)\n\n&#125;\n逐个分析定义链码名称与版本const (\n\tcc_name    &#x3D; &quot;simplecc&quot;\n\tcc_version &#x3D; &quot;1.0.0&quot;\n)\nget完整代码package sdkInit\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;client&#x2F;channel&quot;\n)\n\nfunc (t *Application) Get(args []string) (string, error) &#123;\n\tresponse, err :&#x3D; t.SdkEnvInfo.ChClient.Query(channel.Request&#123;ChaincodeID: t.SdkEnvInfo.ChaincodeID, Fcn: args[0], Args: [][]byte&#123;[]byte(args[1])&#125;&#125;)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, fmt.Errorf(&quot;failed to query: %v&quot;, err)\n\t&#125;\n\n\treturn string(response.Payload), nil\n&#125;\nsdkInfo\n\n\n\n\n\n\n\n\nhttps://github.com/sxguan/fabric-go-sdk/blob/main/sdkInit/sdkInfo.go\n完整代码注释写在代码里了，就不单拿出来讲了。package sdkInit\n\nimport (\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;client&#x2F;channel&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;client&#x2F;event&quot;\n\tmspclient &quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;client&#x2F;msp&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;client&#x2F;resmgmt&quot;\n\tcontextAPI &quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;common&#x2F;providers&#x2F;context&quot;\n)\n\ntype OrgInfo struct &#123;\n\tOrgAdminUser          string &#x2F;&#x2F; like &quot;Admin&quot;\n\tOrgName               string &#x2F;&#x2F; like &quot;Org1&quot;\n\tOrgMspId              string &#x2F;&#x2F; like &quot;Org1MSP&quot;\n\tOrgUser               string &#x2F;&#x2F; like &quot;User1&quot;\n\torgMspClient          *mspclient.Client\n\tOrgAdminClientContext *contextAPI.ClientProvider\n\tOrgResMgmt            *resmgmt.Client\n\tOrgPeerNum            int\n\t&#x2F;&#x2F;Peers                 []*fab.Peer\n\tOrgAnchorFile string &#x2F;&#x2F; like .&#x2F;channel-artifacts&#x2F;Org2MSPanchors.tx\n&#125;\n\ntype SdkEnvInfo struct &#123;\n\t&#x2F;&#x2F; 通道信息\n\tChannelID     string &#x2F;&#x2F; like &quot;simplecc&quot;\n\tChannelConfig string &#x2F;&#x2F; like os.Getenv(&quot;GOPATH&quot;) + &quot;&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-samples&#x2F;test-network&#x2F;channel-artifacts&#x2F;testchannel.tx&quot;\n\n\t&#x2F;&#x2F; 组织信息\n\tOrgs []*OrgInfo\n\t&#x2F;&#x2F; 排序服务节点信息\n\tOrdererAdminUser     string &#x2F;&#x2F; like &quot;Admin&quot;\n\tOrdererOrgName       string &#x2F;&#x2F; like &quot;OrdererOrg&quot;\n\tOrdererEndpoint      string\n\tOrdererClientContext *contextAPI.ClientProvider\n\t&#x2F;&#x2F; 链码信息\n\tChaincodeID      string\n\tChaincodeGoPath  string\n\tChaincodePath    string\n\tChaincodeVersion string\n\tChClient         *channel.Client\n\tEvClient         *event.Client\n&#125;\n\ntype Application struct &#123;\n\tSdkEnvInfo *SdkEnvInfo\n&#125;\nsdkSetting完整代码\npackage sdkInit\n\nimport (\n\t&quot;fmt&quot;\n\tmb &quot;github.com&#x2F;hyperledger&#x2F;fabric-protos-go&#x2F;msp&quot;\n\tpb &quot;github.com&#x2F;hyperledger&#x2F;fabric-protos-go&#x2F;peer&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;client&#x2F;channel&quot;\n\tmspclient &quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;client&#x2F;msp&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;client&#x2F;resmgmt&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;common&#x2F;errors&#x2F;retry&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;common&#x2F;errors&#x2F;status&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;common&#x2F;providers&#x2F;fab&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;common&#x2F;providers&#x2F;msp&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;core&#x2F;config&quot;\n\tlcpackager &quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;fab&#x2F;ccpackager&#x2F;lifecycle&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;fabsdk&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;third_party&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;common&#x2F;policydsl&quot;\n\t&quot;strings&quot;\n)\n\nfunc Setup(configFile string, info *SdkEnvInfo) (*fabsdk.FabricSDK, error) &#123;\n\t&#x2F;&#x2F; Create SDK setup for the integration tests\n\tvar err error\n\tsdk, err :&#x3D; fabsdk.New(config.FromFile(configFile))\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\n\t&#x2F;&#x2F; 为组织获得Client句柄和Context信息\n\tfor _, org :&#x3D; range info.Orgs &#123;\n\t\torg.orgMspClient, err &#x3D; mspclient.New(sdk.Context(), mspclient.WithOrg(org.OrgName))\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn nil, err\n\t\t&#125;\n\t\torgContext :&#x3D; sdk.Context(fabsdk.WithUser(org.OrgAdminUser), fabsdk.WithOrg(org.OrgName))\n\t\torg.OrgAdminClientContext &#x3D; &amp;orgContext\n\n\t\t&#x2F;&#x2F; New returns a resource management client instance.\n\t\tresMgmtClient, err :&#x3D; resmgmt.New(orgContext)\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn nil, fmt.Errorf(&quot;根据指定的资源管理客户端Context创建通道管理客户端失败: %v&quot;, err)\n\t\t&#125;\n\t\torg.OrgResMgmt &#x3D; resMgmtClient\n\t&#125;\n\n\t&#x2F;&#x2F; 为Orderer获得Context信息\n\tordererClientContext :&#x3D; sdk.Context(fabsdk.WithUser(info.OrdererAdminUser), fabsdk.WithOrg(info.OrdererOrgName))\n\tinfo.OrdererClientContext &#x3D; &amp;ordererClientContext\n\treturn sdk, nil\n&#125;\n\nfunc CreateAndJoinChannel(info *SdkEnvInfo) error &#123;\n\tfmt.Println(&quot;&gt;&gt; 开始创建通道......&quot;)\n\tif len(info.Orgs) &#x3D;&#x3D; 0 &#123;\n\t\treturn fmt.Errorf(&quot;通道组织不能为空，请提供组织信息&quot;)\n\t&#125;\n\n\t&#x2F;&#x2F; 获得所有组织的签名信息\n\tsignIds :&#x3D; []msp.SigningIdentity&#123;&#125;\n\tfor _, org :&#x3D; range info.Orgs &#123;\n\t\t&#x2F;&#x2F; Get signing identity that is used to sign create channel request\n\t\torgSignId, err :&#x3D; org.orgMspClient.GetSigningIdentity(org.OrgAdminUser)\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn fmt.Errorf(&quot;GetSigningIdentity error: %v&quot;, err)\n\t\t&#125;\n\t\tsignIds &#x3D; append(signIds, orgSignId)\n\t&#125;\n\n\t&#x2F;&#x2F; 创建通道\n\tif err :&#x3D; createChannel(signIds, info); err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;Create channel error: %v&quot;, err)\n\t&#125;\n\n\tfmt.Println(&quot;&gt;&gt; 创建通道成功&quot;)\n\n\tfmt.Println(&quot;&gt;&gt; 加入通道......&quot;)\n\tfor _, org :&#x3D; range info.Orgs &#123;\n\t\t&#x2F;&#x2F; 加入通道\n\t\t&#x2F;&#x2F; Org peers join channel\n\t\tif err :&#x3D; org.OrgResMgmt.JoinChannel(info.ChannelID, resmgmt.WithRetry(retry.DefaultResMgmtOpts), resmgmt.WithOrdererEndpoint(&quot;orderer.example.com&quot;)); err !&#x3D; nil &#123;\n\t\t\treturn fmt.Errorf(&quot;%s peers failed to JoinChannel: %v&quot;, org.OrgName, err)\n\t\t&#125;\n\t&#125;\n\tfmt.Println(&quot;&gt;&gt; 加入通道成功&quot;)\n\treturn nil\n&#125;\n\nfunc createChannel(signIDs []msp.SigningIdentity, info *SdkEnvInfo) error &#123;\n\t&#x2F;&#x2F; Channel management client is responsible for managing channels (create&#x2F;update channel)\n\tchMgmtClient, err :&#x3D; resmgmt.New(*info.OrdererClientContext)\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;Channel management client create error: %v&quot;, err)\n\t&#125;\n\n\t&#x2F;&#x2F; create a channel for orgchannel.tx\n\treq :&#x3D; resmgmt.SaveChannelRequest&#123;ChannelID: info.ChannelID,\n\t\tChannelConfigPath: info.ChannelConfig,\n\t\tSigningIdentities: signIDs&#125;\n\n\tif _, err :&#x3D; chMgmtClient.SaveChannel(req, resmgmt.WithRetry(retry.DefaultResMgmtOpts), resmgmt.WithOrdererEndpoint(&quot;orderer.example.com&quot;)); err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;error should be nil for SaveChannel of orgchannel: %v&quot;, err)\n\t&#125;\n\n\tfmt.Println(&quot;&gt;&gt;&gt;&gt; 使用每个org的管理员身份更新锚节点配置...&quot;)\n\t&#x2F;&#x2F;do the same get ch client and create channel for each anchor peer as well (first for Org1MSP)\n\tfor i, org :&#x3D; range info.Orgs &#123;\n\t\treq &#x3D; resmgmt.SaveChannelRequest&#123;ChannelID: info.ChannelID,\n\t\t\tChannelConfigPath: org.OrgAnchorFile,\n\t\t\tSigningIdentities: []msp.SigningIdentity&#123;signIDs[i]&#125;&#125;\n\n\t\tif _, err &#x3D; org.OrgResMgmt.SaveChannel(req, resmgmt.WithRetry(retry.DefaultResMgmtOpts), resmgmt.WithOrdererEndpoint(&quot;orderer.example.com&quot;)); err !&#x3D; nil &#123;\n\t\t\treturn fmt.Errorf(&quot;SaveChannel for anchor org %s error: %v&quot;, org.OrgName, err)\n\t\t&#125;\n\t&#125;\n\tfmt.Println(&quot;&gt;&gt;&gt;&gt; 使用每个org的管理员身份更新锚节点配置完成&quot;)\n\t&#x2F;&#x2F;integration.WaitForOrdererConfigUpdate(t, configQueryClient, mc.channelID, false, lastConfigBlock)\n\treturn nil\n&#125;\n\nfunc CreateCCLifecycle(info *SdkEnvInfo, sequence int64, upgrade bool, sdk *fabsdk.FabricSDK) error &#123;\n\tif len(info.Orgs) &#x3D;&#x3D; 0 &#123;\n\t\treturn fmt.Errorf(&quot;the number of organization should not be zero.&quot;)\n\t&#125;\n\t&#x2F;&#x2F; Package cc\n\tfmt.Println(&quot;&gt;&gt; 开始打包链码......&quot;)\n\tlabel, ccPkg, err :&#x3D; packageCC(info.ChaincodeID, info.ChaincodeVersion, info.ChaincodePath)\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;pakcagecc error: %v&quot;, err)\n\t&#125;\n\tpackageID :&#x3D; lcpackager.ComputePackageID(label, ccPkg)\n\tfmt.Println(&quot;&gt;&gt; 打包链码成功&quot;)\n\n\t&#x2F;&#x2F; Install cc\n\tfmt.Println(&quot;&gt;&gt; 开始安装链码......&quot;)\n\tif err :&#x3D; installCC(label, ccPkg, info.Orgs); err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;installCC error: %v&quot;, err)\n\t&#125;\n\n\t&#x2F;&#x2F; Get installed cc package\n\tif err :&#x3D; getInstalledCCPackage(packageID, info.Orgs[0]); err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;getInstalledCCPackage error: %v&quot;, err)\n\t&#125;\n\n\t&#x2F;&#x2F; Query installed cc\n\tif err :&#x3D; queryInstalled(packageID, info.Orgs[0]); err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;queryInstalled error: %v&quot;, err)\n\t&#125;\n\tfmt.Println(&quot;&gt;&gt; 安装链码成功&quot;)\n\n\t&#x2F;&#x2F; Approve cc\n\tfmt.Println(&quot;&gt;&gt; 组织认可智能合约定义......&quot;)\n\tif err :&#x3D; approveCC(packageID, info.ChaincodeID, info.ChaincodeVersion, sequence, info.ChannelID, info.Orgs, info.OrdererEndpoint); err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;approveCC error: %v&quot;, err)\n\t&#125;\n\n\t&#x2F;&#x2F; Query approve cc\n\tif err:&#x3D;queryApprovedCC(info.ChaincodeID, sequence, info.ChannelID, info.Orgs);err!&#x3D;nil&#123;\n\t\treturn fmt.Errorf(&quot;queryApprovedCC error: %v&quot;, err)\n\t&#125;\n\tfmt.Println(&quot;&gt;&gt; 组织认可智能合约定义完成&quot;)\n\n\t&#x2F;&#x2F; Check commit readiness\n\tfmt.Println(&quot;&gt;&gt; 检查智能合约是否就绪......&quot;)\n\tif err:&#x3D;checkCCCommitReadiness(packageID, info.ChaincodeID, info.ChaincodeVersion, sequence, info.ChannelID, info.Orgs); err!&#x3D;nil&#123;\n\t\treturn fmt.Errorf(&quot;checkCCCommitReadiness error: %v&quot;, err)\n\t&#125;\n\tfmt.Println(&quot;&gt;&gt; 智能合约已经就绪&quot;)\n\n\t&#x2F;&#x2F; Commit cc\n\tfmt.Println(&quot;&gt;&gt; 提交智能合约定义......&quot;)\n\tif err:&#x3D;commitCC(info.ChaincodeID, info.ChaincodeVersion, sequence, info.ChannelID, info.Orgs, info.OrdererEndpoint);err!&#x3D;nil&#123;\n\t\treturn fmt.Errorf(&quot;commitCC error: %v&quot;, err)\n\t&#125;\n\t&#x2F;&#x2F; Query committed cc\n\tif err:&#x3D;queryCommittedCC(info.ChaincodeID, info.ChannelID, sequence, info.Orgs); err!&#x3D;nil&#123;\n\t\treturn fmt.Errorf(&quot;queryCommittedCC error: %v&quot;, err)\n\t&#125;\n\tfmt.Println(&quot;&gt;&gt; 智能合约定义提交完成&quot;)\n\n\t&#x2F;&#x2F; Init cc\n\tfmt.Println(&quot;&gt;&gt; 调用智能合约初始化方法......&quot;)\n\tif err:&#x3D;initCC(info.ChaincodeID, upgrade, info.ChannelID, info.Orgs[0], sdk); err!&#x3D;nil&#123;\n\t\treturn fmt.Errorf(&quot;initCC error: %v&quot;, err)\n\t&#125;\n\tfmt.Println(&quot;&gt;&gt; 完成智能合约初始化&quot;)\n\treturn nil\n&#125;\n\nfunc packageCC(ccName, ccVersion, ccpath string) (string, []byte, error) &#123;\n\tlabel :&#x3D; ccName + &quot;_&quot; + ccVersion\n\tdesc :&#x3D; &amp;lcpackager.Descriptor&#123;\n\t\tPath:  ccpath,\n\t\tType:  pb.ChaincodeSpec_GOLANG,\n\t\tLabel: label,\n\t&#125;\n\tccPkg, err :&#x3D; lcpackager.NewCCPackage(desc)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, nil, fmt.Errorf(&quot;Package chaincode source error: %v&quot;, err)\n\t&#125;\n\treturn desc.Label, ccPkg, nil\n&#125;\n\nfunc installCC(label string, ccPkg []byte, orgs []*OrgInfo) error &#123;\n\tinstallCCReq :&#x3D; resmgmt.LifecycleInstallCCRequest&#123;\n\t\tLabel:   label,\n\t\tPackage: ccPkg,\n\t&#125;\n\n\tpackageID :&#x3D; lcpackager.ComputePackageID(installCCReq.Label, installCCReq.Package)\n\tfor _, org :&#x3D; range orgs &#123;\n\t\torgPeers, err :&#x3D; DiscoverLocalPeers(*org.OrgAdminClientContext, org.OrgPeerNum)\n\t\tif err !&#x3D; nil &#123;\n\t\t\tfmt.Errorf(&quot;DiscoverLocalPeers error: %v&quot;, err)\n\t\t&#125;\n\t\tif flag, _ :&#x3D; checkInstalled(packageID, orgPeers[0], org.OrgResMgmt); flag &#x3D;&#x3D; false &#123;\n\t\t\tif _, err :&#x3D; org.OrgResMgmt.LifecycleInstallCC(installCCReq, resmgmt.WithTargets(orgPeers...), resmgmt.WithRetry(retry.DefaultResMgmtOpts)); err !&#x3D; nil &#123;\n\t\t\t\treturn fmt.Errorf(&quot;LifecycleInstallCC error: %v&quot;, err)\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\treturn nil\n&#125;\n\nfunc getInstalledCCPackage(packageID string, org *OrgInfo) error &#123;\n\t&#x2F;&#x2F; use org1\n\torgPeers, err :&#x3D; DiscoverLocalPeers(*org.OrgAdminClientContext, 1)\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;DiscoverLocalPeers error: %v&quot;, err)\n\t&#125;\n\n\tif _, err :&#x3D; org.OrgResMgmt.LifecycleGetInstalledCCPackage(packageID, resmgmt.WithTargets([]fab.Peer&#123;orgPeers[0]&#125;...)); err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;LifecycleGetInstalledCCPackage error: %v&quot;, err)\n\t&#125;\n\treturn nil\n&#125;\n\nfunc queryInstalled(packageID string, org *OrgInfo) error &#123;\n\torgPeers, err :&#x3D; DiscoverLocalPeers(*org.OrgAdminClientContext, 1)\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;DiscoverLocalPeers error: %v&quot;, err)\n\t&#125;\n\tresp1, err :&#x3D; org.OrgResMgmt.LifecycleQueryInstalledCC(resmgmt.WithTargets([]fab.Peer&#123;orgPeers[0]&#125;...))\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;LifecycleQueryInstalledCC error: %v&quot;, err)\n\t&#125;\n\tpackageID1 :&#x3D; &quot;&quot;\n\tfor _, t :&#x3D; range resp1 &#123;\n\t\tif t.PackageID &#x3D;&#x3D; packageID &#123;\n\t\t\tpackageID1 &#x3D; t.PackageID\n\t\t&#125;\n\t&#125;\n\tif !strings.EqualFold(packageID, packageID1) &#123;\n\t\treturn fmt.Errorf(&quot;check package id error&quot;)\n\t&#125;\n\treturn nil\n&#125;\n\nfunc checkInstalled(packageID string, peer fab.Peer, client *resmgmt.Client) (bool, error) &#123;\n\tflag :&#x3D; false\n\tresp1, err :&#x3D; client.LifecycleQueryInstalledCC(resmgmt.WithTargets(peer))\n\tif err !&#x3D; nil &#123;\n\t\treturn flag, fmt.Errorf(&quot;LifecycleQueryInstalledCC error: %v&quot;, err)\n\t&#125;\n\tfor _, t :&#x3D; range resp1 &#123;\n\t\tif t.PackageID &#x3D;&#x3D; packageID &#123;\n\t\t\tflag &#x3D; true\n\t\t&#125;\n\t&#125;\n\treturn flag, nil\n&#125;\n\nfunc approveCC(packageID string, ccName, ccVersion string, sequence int64, channelID string, orgs []*OrgInfo, ordererEndpoint string) error &#123;\n\tmspIDs :&#x3D; []string&#123;&#125;\n\tfor _, org :&#x3D; range orgs &#123;\n\t\tmspIDs &#x3D; append(mspIDs, org.OrgMspId)\n\t&#125;\n\tccPolicy :&#x3D; policydsl.SignedByNOutOfGivenRole(int32(len(mspIDs)), mb.MSPRole_MEMBER, mspIDs)\n\tapproveCCReq :&#x3D; resmgmt.LifecycleApproveCCRequest&#123;\n\t\tName:              ccName,\n\t\tVersion:           ccVersion,\n\t\tPackageID:         packageID,\n\t\tSequence:          sequence,\n\t\tEndorsementPlugin: &quot;escc&quot;,\n\t\tValidationPlugin:  &quot;vscc&quot;,\n\t\tSignaturePolicy:   ccPolicy,\n\t\tInitRequired:      true,\n\t&#125;\n\n\tfor _, org :&#x3D; range orgs&#123;\n\t\torgPeers, err :&#x3D; DiscoverLocalPeers(*org.OrgAdminClientContext, org.OrgPeerNum)\n\t\tfmt.Printf(&quot;&gt;&gt;&gt; chaincode approved by %s peers:\\n&quot;, org.OrgName)\n\t\tfor _, p :&#x3D; range orgPeers &#123;\n\t\t\tfmt.Printf(&quot;\t%s\\n&quot;, p.URL())\n\t\t&#125;\n\n\t\tif err!&#x3D;nil&#123;\n\t\t\treturn fmt.Errorf(&quot;DiscoverLocalPeers error: %v&quot;, err)\n\t\t&#125;\n\t\tif _, err :&#x3D; org.OrgResMgmt.LifecycleApproveCC(channelID, approveCCReq, resmgmt.WithTargets(orgPeers...), resmgmt.WithOrdererEndpoint(ordererEndpoint), resmgmt.WithRetry(retry.DefaultResMgmtOpts));err !&#x3D; nil &#123;\n\t\t\tfmt.Errorf(&quot;LifecycleApproveCC error: %v&quot;, err)\n\t\t&#125;\n\t&#125;\n\treturn nil\n&#125;\n\nfunc queryApprovedCC(ccName string, sequence int64, channelID string, orgs []*OrgInfo) error &#123;\n\tqueryApprovedCCReq :&#x3D; resmgmt.LifecycleQueryApprovedCCRequest&#123;\n\t\tName:     ccName,\n\t\tSequence: sequence,\n\t&#125;\n\n\tfor _, org :&#x3D; range orgs&#123;\n\t\torgPeers, err :&#x3D; DiscoverLocalPeers(*org.OrgAdminClientContext, org.OrgPeerNum)\n\t\tif err!&#x3D;nil&#123;\n\t\t\treturn fmt.Errorf(&quot;DiscoverLocalPeers error: %v&quot;, err)\n\t\t&#125;\n\t\t&#x2F;&#x2F; Query approve cc\n\t\tfor _, p :&#x3D; range orgPeers &#123;\n\t\t\tresp, err :&#x3D; retry.NewInvoker(retry.New(retry.TestRetryOpts)).Invoke(\n\t\t\t\tfunc() (interface&#123;&#125;, error) &#123;\n\t\t\t\t\tresp1, err :&#x3D; org.OrgResMgmt.LifecycleQueryApprovedCC(channelID, queryApprovedCCReq, resmgmt.WithTargets(p))\n\t\t\t\t\tif err !&#x3D; nil &#123;\n\t\t\t\t\t\treturn nil, status.New(status.TestStatus, status.GenericTransient.ToInt32(), fmt.Sprintf(&quot;LifecycleQueryApprovedCC returned error: %v&quot;, err), nil)\n\t\t\t\t\t&#125;\n\t\t\t\t\treturn resp1, err\n\t\t\t\t&#125;,\n\t\t\t)\n\t\t\tif err !&#x3D; nil &#123;\n\t\t\t\treturn fmt.Errorf(&quot;Org %s Peer %s NewInvoker error: %v&quot;, org.OrgName, p.URL(), err)\n\t\t\t&#125;\n\t\t\tif resp&#x3D;&#x3D;nil&#123;\n\t\t\t\treturn fmt.Errorf(&quot;Org %s Peer %s Got nil invoker&quot;, org.OrgName, p.URL())\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\treturn nil\n&#125;\n\nfunc checkCCCommitReadiness(packageID string, ccName, ccVersion string, sequence int64, channelID string, orgs []*OrgInfo) error &#123;\n\tmspIds :&#x3D; []string&#123;&#125;\n\tfor _, org :&#x3D; range orgs &#123;\n\t\tmspIds &#x3D; append(mspIds, org.OrgMspId)\n\t&#125;\n\tccPolicy :&#x3D; policydsl.SignedByNOutOfGivenRole(int32(len(mspIds)), mb.MSPRole_MEMBER, mspIds)\n\treq :&#x3D; resmgmt.LifecycleCheckCCCommitReadinessRequest&#123;\n\t\tName:              ccName,\n\t\tVersion:           ccVersion,\n\t\t&#x2F;&#x2F;PackageID:         packageID,\n\t\tEndorsementPlugin: &quot;escc&quot;,\n\t\tValidationPlugin:  &quot;vscc&quot;,\n\t\tSignaturePolicy:   ccPolicy,\n\t\tSequence:          sequence,\n\t\tInitRequired:      true,\n\t&#125;\n\tfor _, org :&#x3D; range orgs&#123;\n\t\torgPeers, err :&#x3D; DiscoverLocalPeers(*org.OrgAdminClientContext, org.OrgPeerNum)\n\t\tif err!&#x3D;nil&#123;\n\t\t\tfmt.Errorf(&quot;DiscoverLocalPeers error: %v&quot;, err)\n\t\t&#125;\n\t\tfor _, p :&#x3D; range orgPeers &#123;\n\t\t\tresp, err :&#x3D; retry.NewInvoker(retry.New(retry.TestRetryOpts)).Invoke(\n\t\t\t\tfunc() (interface&#123;&#125;, error) &#123;\n\t\t\t\t\tresp1, err :&#x3D; org.OrgResMgmt.LifecycleCheckCCCommitReadiness(channelID, req, resmgmt.WithTargets(p))\n\t\t\t\t\tfmt.Printf(&quot;LifecycleCheckCCCommitReadiness cc &#x3D; %v, &#x3D; %v\\n&quot;, ccName, resp1)\n\t\t\t\t\tif err !&#x3D; nil &#123;\n\t\t\t\t\t\treturn nil, status.New(status.TestStatus, status.GenericTransient.ToInt32(), fmt.Sprintf(&quot;LifecycleCheckCCCommitReadiness returned error: %v&quot;, err), nil)\n\t\t\t\t\t&#125;\n\t\t\t\t\tflag :&#x3D; true\n\t\t\t\t\tfor _, r :&#x3D; range resp1.Approvals &#123;\n\t\t\t\t\t\tflag &#x3D; flag &amp;&amp; r\n\t\t\t\t\t&#125;\n\t\t\t\t\tif !flag &#123;\n\t\t\t\t\t\treturn nil, status.New(status.TestStatus, status.GenericTransient.ToInt32(), fmt.Sprintf(&quot;LifecycleCheckCCCommitReadiness returned : %v&quot;, resp1), nil)\n\t\t\t\t\t&#125;\n\t\t\t\t\treturn resp1, err\n\t\t\t\t&#125;,\n\t\t\t)\n\t\t\tif err !&#x3D; nil &#123;\n\t\t\t\treturn fmt.Errorf(&quot;NewInvoker error: %v&quot;, err)\n\t\t\t&#125;\n\t\t\tif resp&#x3D;&#x3D;nil&#123;\n\t\t\t\treturn fmt.Errorf(&quot;Got nill invoker response&quot;)\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\n\treturn nil\n&#125;\n\nfunc commitCC(ccName, ccVersion string, sequence int64, channelID string, orgs []*OrgInfo, ordererEndpoint string) error&#123;\n\tmspIDs :&#x3D; []string&#123;&#125;\n\tfor _, org :&#x3D; range orgs &#123;\n\t\tmspIDs &#x3D; append(mspIDs, org.OrgMspId)\n\t&#125;\n\tccPolicy :&#x3D; policydsl.SignedByNOutOfGivenRole(int32(len(mspIDs)), mb.MSPRole_MEMBER, mspIDs)\n\n\treq :&#x3D; resmgmt.LifecycleCommitCCRequest&#123;\n\t\tName:              ccName,\n\t\tVersion:           ccVersion,\n\t\tSequence:          sequence,\n\t\tEndorsementPlugin: &quot;escc&quot;,\n\t\tValidationPlugin:  &quot;vscc&quot;,\n\t\tSignaturePolicy:   ccPolicy,\n\t\tInitRequired:      true,\n\t&#125;\n\t_, err :&#x3D; orgs[0].OrgResMgmt.LifecycleCommitCC(channelID, req, resmgmt.WithOrdererEndpoint(ordererEndpoint), resmgmt.WithRetry(retry.DefaultResMgmtOpts))\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;LifecycleCommitCC error: %v&quot;, err)\n\t&#125;\n\treturn nil\n&#125;\n\nfunc queryCommittedCC( ccName string, channelID string, sequence int64, orgs []*OrgInfo) error &#123;\n\treq :&#x3D; resmgmt.LifecycleQueryCommittedCCRequest&#123;\n\t\tName: ccName,\n\t&#125;\n\n\tfor _, org :&#x3D; range orgs &#123;\n\t\torgPeers, err :&#x3D; DiscoverLocalPeers(*org.OrgAdminClientContext, org.OrgPeerNum)\n\t\tif err!&#x3D;nil&#123;\n\t\t\treturn fmt.Errorf(&quot;DiscoverLocalPeers error: %v&quot;, err)\n\t\t&#125;\n\t\tfor _, p :&#x3D; range orgPeers &#123;\n\t\t\tresp, err :&#x3D; retry.NewInvoker(retry.New(retry.TestRetryOpts)).Invoke(\n\t\t\t\tfunc() (interface&#123;&#125;, error) &#123;\n\t\t\t\t\tresp1, err :&#x3D; org.OrgResMgmt.LifecycleQueryCommittedCC(channelID, req, resmgmt.WithTargets(p))\n\t\t\t\t\tif err !&#x3D; nil &#123;\n\t\t\t\t\t\treturn nil, status.New(status.TestStatus, status.GenericTransient.ToInt32(), fmt.Sprintf(&quot;LifecycleQueryCommittedCC returned error: %v&quot;, err), nil)\n\t\t\t\t\t&#125;\n\t\t\t\t\tflag :&#x3D; false\n\t\t\t\t\tfor _, r :&#x3D; range resp1 &#123;\n\t\t\t\t\t\tif r.Name &#x3D;&#x3D; ccName &amp;&amp; r.Sequence &#x3D;&#x3D; sequence &#123;\n\t\t\t\t\t\t\tflag &#x3D; true\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t&#125;\n\t\t\t\t\t&#125;\n\t\t\t\t\tif !flag &#123;\n\t\t\t\t\t\treturn nil, status.New(status.TestStatus, status.GenericTransient.ToInt32(), fmt.Sprintf(&quot;LifecycleQueryCommittedCC returned : %v&quot;, resp1), nil)\n\t\t\t\t\t&#125;\n\t\t\t\t\treturn resp1, err\n\t\t\t\t&#125;,\n\t\t\t)\n\t\t\tif err !&#x3D; nil &#123;\n\t\t\t\treturn  fmt.Errorf(&quot;NewInvoker error: %v&quot;, err)\n\t\t\t&#125;\n\t\t\tif resp&#x3D;&#x3D;nil&#123;\n\t\t\t\treturn fmt.Errorf(&quot;Got nil invoker response&quot;)\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\treturn nil\n&#125;\n\nfunc initCC(ccName string, upgrade bool, channelID string, org *OrgInfo, sdk *fabsdk.FabricSDK) error &#123;\n\t&#x2F;&#x2F;prepare channel client context using client context\n\tclientChannelContext :&#x3D; sdk.ChannelContext(channelID, fabsdk.WithUser(org.OrgUser), fabsdk.WithOrg(org.OrgName))\n\t&#x2F;&#x2F; Channel client is used to query and execute transactions (Org1 is default org)\n\tclient, err :&#x3D; channel.New(clientChannelContext)\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;Failed to create new channel client: %s&quot;, err)\n\t&#125;\n\n\t&#x2F;&#x2F; init\n\t_, err &#x3D; client.Execute(channel.Request&#123;ChaincodeID: ccName, Fcn: &quot;init&quot;, Args: nil, IsInit: true&#125;,\n\t\tchannel.WithRetry(retry.DefaultChannelOpts))\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;Failed to init: %s&quot;, err)\n\t&#125;\n\treturn nil\n&#125;\n逐个分析打包链码\n在被安装到peer节点之前，链码需要被打包进一个tar文件。当你创建一个链码包的时候，你需要提交一个用来创建简明易读的包描述的链码包标签。使用fabric-go-sdk将会自动以这个格式来创建文件。链码需要被打包进一个以 .tar.gz 文件扩展名结尾的tar文件。\nfunc packageCC(ccName, ccVersion, ccpath string) (string, []byte, error) &#123;\n   \n\tlabel :&#x3D; ccName + &quot;_&quot; + ccVersion &#x2F;&#x2F; 链码的标签\n\tdesc :&#x3D; &amp;lcpackager.Descriptor&#123;   &#x2F;&#x2F; 使用lcpackager包中的Descriptor结构体添加描述信息\n\t\tPath:  ccpath, &#x2F;&#x2F;链码路径\n\t\tType:  pb.ChaincodeSpec_GOLANG, &#x2F;&#x2F;链码的语言\n\t\tLabel: label, &#x2F;&#x2F; 链码的标签\n\t&#125;\n\tccPkg, err :&#x3D; lcpackager.NewCCPackage(desc) &#x2F;&#x2F; 使用lcpackager包中NewCCPackage方法对链码进行打包\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, nil, fmt.Errorf(&quot;Package chaincode source error: %v&quot;, err)\n\t&#125;\n\treturn desc.Label, ccPkg, nil\n&#125;\n\n安装链码\n你需要在每个要执行和背书交易的peer节点上安装链码包。使用SDK时，你需要以 Peer Administrator（peer所在组织的管理员） 的身份来完成这步。链码安装后，你的 peer 节点会构建链码，并且如果你的链码有问题，会返回一个构建错误。建议每个组织只打包链码一次，然后安装相同的包在属于他们组织的每一个peer节点上。如果某个通道希望确保每个组织都运行同样的链码，某一个组织可以打包链码并通过带外数据（不通过链上）把它发送给其他通道成员.通过指令成功安装链码后会返回链码包标识符，它是包标签和包哈希值的结合。这个包标识符用来关联安装在你的peer节点上的链码包已被批准的链码。为下一步的操作保存这个标识符。你也可以查询安装在peer节点上的包来查看包标识符。\nfunc installCC(label string, ccPkg []byte, orgs []*OrgInfo) error &#123;\n\tinstallCCReq :&#x3D; resmgmt.LifecycleInstallCCRequest&#123;\n\t\tLabel:   label,\n\t\tPackage: ccPkg,\n\t&#125;\n\t&#x2F;&#x2F; 使用lcpackager中的ComputePackageID方法查询并返回链码的packageID\n\tpackageID :&#x3D; lcpackager.ComputePackageID(installCCReq.Label, installCCReq.Package)\n\tfor _, org :&#x3D; range orgs &#123;\n\t\torgPeers, err :&#x3D; DiscoverLocalPeers(*org.OrgAdminClientContext, org.OrgPeerNum)\n\t\tif err !&#x3D; nil &#123;\n\t\t\tfmt.Errorf(&quot;DiscoverLocalPeers error: %v&quot;, err)\n\t\t&#125;\n        &#x2F;&#x2F; 检查是否安装链码，如果未安装则继续执行\n\t\tif flag, _ :&#x3D; checkInstalled(packageID, orgPeers[0], org.OrgResMgmt); flag &#x3D;&#x3D; false &#123;\n            &#x2F;&#x2F; 使用resmgmt中的LifecycleInstallCC方法安装链码，其中WithRetry方法为安装不成功时重试安装，DefaultResMgmtOpts为默认的重试安装规则\n\t\t\tif _, err :&#x3D; org.OrgResMgmt.LifecycleInstallCC(installCCReq, resmgmt.WithTargets(orgPeers...), resmgmt.WithRetry(retry.DefaultResMgmtOpts)); err !&#x3D; nil &#123;\n\t\t\t\treturn fmt.Errorf(&quot;LifecycleInstallCC error: %v&quot;, err)\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\treturn nil\n&#125;\n&#x2F;&#x2F;检查是否安装过链码\nfunc checkInstalled(packageID string, peer fab.Peer, client *resmgmt.Client) (bool, error) &#123;\n\tflag :&#x3D; false\n\tresp1, err :&#x3D; client.LifecycleQueryInstalledCC(resmgmt.WithTargets(peer))\n\tif err !&#x3D; nil &#123;\n\t\treturn flag, fmt.Errorf(&quot;LifecycleQueryInstalledCC error: %v&quot;, err)\n\t&#125;\n\tfor _, t :&#x3D; range resp1 &#123;\n\t\tif t.PackageID &#x3D;&#x3D; packageID &#123; \n\t\t\tflag &#x3D; true\n\t\t&#125;\n\t&#125;\n\treturn flag, nil\n&#125;\n获取已安装链码包func getInstalledCCPackage(packageID string, org *OrgInfo) error &#123;\n\t&#x2F;&#x2F; use org1\n\torgPeers, err :&#x3D; DiscoverLocalPeers(*org.OrgAdminClientContext, 1)\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;DiscoverLocalPeers error: %v&quot;, err)\n\t&#125;\n\t&#x2F;&#x2F; 使用resmgmt中的LifecycleGetInstalledCCPackage方法，对于给定的packageID检索已安装的链码包\n\tif _, err :&#x3D; org.OrgResMgmt.LifecycleGetInstalledCCPackage(packageID, resmgmt.WithTargets([]fab.Peer&#123;orgPeers[0]&#125;...)); err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;LifecycleGetInstalledCCPackage error: %v&quot;, err)\n\t&#125;\n\treturn nil\n&#125;\n\n查询安装func queryInstalled(packageID string, org *OrgInfo) error &#123;\n\torgPeers, err :&#x3D; DiscoverLocalPeers(*org.OrgAdminClientContext, 1)\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;DiscoverLocalPeers error: %v&quot;, err)\n\t&#125;\n    &#x2F;&#x2F; 使用resmgmt中的LifecycleQueryInstalledCC方法，返回在指定节点上安装的链码packageID\n\tresp1, err :&#x3D; org.OrgResMgmt.LifecycleQueryInstalledCC(resmgmt.WithTargets([]fab.Peer&#123;orgPeers[0]&#125;...))\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;LifecycleQueryInstalledCC error: %v&quot;, err)\n\t&#125;\n\tpackageID1 :&#x3D; &quot;&quot;\n\tfor _, t :&#x3D; range resp1 &#123;\n\t\tif t.PackageID &#x3D;&#x3D; packageID &#123;\n\t\t\tpackageID1 &#x3D; t.PackageID\n\t\t&#125;\n\t&#125;\n    &#x2F;&#x2F; 查询的packageID与给定的packageID不一致则报错\n\tif !strings.EqualFold(packageID, packageID1) &#123;\n\t\treturn fmt.Errorf(&quot;check package id error&quot;)\n\t&#125;\n\treturn nil\n&#125;\n\n各组织批准链码func approveCC(packageID string, ccName, ccVersion string, sequence int64, channelID string, orgs []*OrgInfo, ordererEndpoint string) error &#123;\n\tmspIDs :&#x3D; []string&#123;&#125;\n    &#x2F;&#x2F; 获取各个组织的mspID\n\tfor _, org :&#x3D; range orgs &#123;\n\t\tmspIDs &#x3D; append(mspIDs, org.OrgMspId)\n\t&#125;\n    &#x2F;&#x2F; 签名策略，由所有给出的mspid签名\n\tccPolicy :&#x3D; policydsl.SignedByNOutOfGivenRole(int32(len(mspIDs)), mb.MSPRole_MEMBER, mspIDs)\n    &#x2F;&#x2F; approve所需参数\n\tapproveCCReq :&#x3D; resmgmt.LifecycleApproveCCRequest&#123;\n\t\tName:              ccName,      &#x2F;&#x2F; 链码名\n\t\tVersion:           ccVersion,   &#x2F;&#x2F; 版本\n\t\tPackageID:         packageID,   &#x2F;&#x2F; 链码包id\n\t\tSequence:          sequence,    &#x2F;&#x2F; 序列号\n\t\tEndorsementPlugin: &quot;escc&quot;,      &#x2F;&#x2F; 系统内置链码escc\n\t\tValidationPlugin:  &quot;vscc&quot;,      &#x2F;&#x2F; 系统内置链码vscc\n\t\tSignaturePolicy:   ccPolicy,    &#x2F;&#x2F; 组织签名策略\n\t\tInitRequired:      true,        &#x2F;&#x2F; 是否初始化\n\t&#125;\n\n\tfor _, org :&#x3D; range orgs&#123;\n\t\torgPeers, err :&#x3D; DiscoverLocalPeers(*org.OrgAdminClientContext, org.OrgPeerNum)\n\t\tfmt.Printf(&quot;&gt;&gt;&gt; chaincode approved by %s peers:\\n&quot;, org.OrgName)\n\t\tfor _, p :&#x3D; range orgPeers &#123;\n\t\t\tfmt.Printf(&quot;\t%s\\n&quot;, p.URL())\n\t\t&#125;\n\n\t\tif err!&#x3D;nil&#123;\n\t\t\treturn fmt.Errorf(&quot;DiscoverLocalPeers error: %v&quot;, err)\n\t\t&#125;\n        &#x2F;&#x2F; 使用resmgmt中的LifecycleApproveCC方法为组织批准链码\n\t\tif _, err :&#x3D; org.OrgResMgmt.LifecycleApproveCC(channelID, approveCCReq, resmgmt.WithTargets(orgPeers...), resmgmt.WithOrdererEndpoint(ordererEndpoint), resmgmt.WithRetry(retry.DefaultResMgmtOpts));err !&#x3D; nil &#123;\n\t\t\tfmt.Errorf(&quot;LifecycleApproveCC error: %v&quot;, err)\n\t\t&#125;\n\t&#125;\n\treturn nil\n&#125;\n\n查询已批准的链码func queryApprovedCC(ccName string, sequence int64, channelID string, orgs []*OrgInfo) error &#123;\n\t&#x2F;&#x2F; queryApproved所需参数\n    queryApprovedCCReq :&#x3D; resmgmt.LifecycleQueryApprovedCCRequest&#123;\n\t\tName:     ccName,  &#x2F;&#x2F; 链码名称\n\t\tSequence: sequence,&#x2F;&#x2F; 序列号\n\t&#125;\n\n\tfor _, org :&#x3D; range orgs&#123;\n\t\torgPeers, err :&#x3D; DiscoverLocalPeers(*org.OrgAdminClientContext, org.OrgPeerNum)\n\t\tif err!&#x3D;nil&#123;\n\t\t\treturn fmt.Errorf(&quot;DiscoverLocalPeers error: %v&quot;, err)\n\t\t&#125;\n\t\t&#x2F;&#x2F; Query approve cc\n\t\tfor _, p :&#x3D; range orgPeers &#123;\n\t\t\tresp, err :&#x3D; retry.NewInvoker(retry.New(retry.TestRetryOpts)).Invoke(\n\t\t\t\tfunc() (interface&#123;&#125;, error) &#123;\n                    &#x2F;&#x2F; LifecycleQueryApprovedCC返回有关已批准的链码定义的信息\n\t\t\t\t\tresp1, err :&#x3D; org.OrgResMgmt.LifecycleQueryApprovedCC(channelID, queryApprovedCCReq, resmgmt.WithTargets(p))\n\t\t\t\t\tif err !&#x3D; nil &#123;\n\t\t\t\t\t\treturn nil, status.New(status.TestStatus, status.GenericTransient.ToInt32(), fmt.Sprintf(&quot;LifecycleQueryApprovedCC returned error: %v&quot;, err), nil)\n\t\t\t\t\t&#125;\n\t\t\t\t\treturn resp1, err\n\t\t\t\t&#125;,\n\t\t\t)\n\t\t\tif err !&#x3D; nil &#123;\n\t\t\t\treturn fmt.Errorf(&quot;Org %s Peer %s NewInvoker error: %v&quot;, org.OrgName, p.URL(), err)\n\t\t\t&#125;\n\t\t\tif resp&#x3D;&#x3D;nil&#123;\n\t\t\t\treturn fmt.Errorf(&quot;Org %s Peer %s Got nil invoker&quot;, org.OrgName, p.URL())\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\treturn nil\n&#125;\n\n检查智能合约是否就绪func checkCCCommitReadiness(packageID string, ccName, ccVersion string, sequence int64, channelID string, orgs []*OrgInfo) error &#123;\n\tmspIds :&#x3D; []string&#123;&#125;\n\tfor _, org :&#x3D; range orgs &#123;\n\t\tmspIds &#x3D; append(mspIds, org.OrgMspId)\n\t&#125;\n    &#x2F;&#x2F; 签名策略，由所有给出的mspid签名\n\tccPolicy :&#x3D; policydsl.SignedByNOutOfGivenRole(int32(len(mspIds)), mb.MSPRole_MEMBER, mspIds)\n    &#x2F;&#x2F; 所需所有参数，同上\n\treq :&#x3D; resmgmt.LifecycleCheckCCCommitReadinessRequest&#123;\n\t\tName:              ccName,\n\t\tVersion:           ccVersion,\n\t\t&#x2F;&#x2F;PackageID:         packageID,\n\t\tEndorsementPlugin: &quot;escc&quot;,\n\t\tValidationPlugin:  &quot;vscc&quot;,\n\t\tSignaturePolicy:   ccPolicy,\n\t\tSequence:          sequence,\n\t\tInitRequired:      true,\n\t&#125;\n\tfor _, org :&#x3D; range orgs&#123;\n\t\torgPeers, err :&#x3D; DiscoverLocalPeers(*org.OrgAdminClientContext, org.OrgPeerNum)\n\t\tif err!&#x3D;nil&#123;\n\t\t\tfmt.Errorf(&quot;DiscoverLocalPeers error: %v&quot;, err)\n\t\t&#125;\n\t\tfor _, p :&#x3D; range orgPeers &#123;\n\t\t\tresp, err :&#x3D; retry.NewInvoker(retry.New(retry.TestRetryOpts)).Invoke(\n\t\t\t\tfunc() (interface&#123;&#125;, error) &#123;\n                    &#x2F;&#x2F; 使用resmgmt中的LifecycleCheckCCCommitReadiness方法检查链代码的“提交准备”,返回组织批准。\n\t\t\t\t\tresp1, err :&#x3D; org.OrgResMgmt.LifecycleCheckCCCommitReadiness(channelID, req, resmgmt.WithTargets(p))\n\t\t\t\t\tfmt.Printf(&quot;LifecycleCheckCCCommitReadiness cc &#x3D; %v, &#x3D; %v\\n&quot;, ccName, resp1)\n\t\t\t\t\tif err !&#x3D; nil &#123;\n\t\t\t\t\t\treturn nil, status.New(status.TestStatus, status.GenericTransient.ToInt32(), fmt.Sprintf(&quot;LifecycleCheckCCCommitReadiness returned error: %v&quot;, err), nil)\n\t\t\t\t\t&#125;\n\t\t\t\t\tflag :&#x3D; true\n\t\t\t\t\tfor _, r :&#x3D; range resp1.Approvals &#123;\n\t\t\t\t\t\tflag &#x3D; flag &amp;&amp; r\n\t\t\t\t\t&#125;\n\t\t\t\t\tif !flag &#123;\n\t\t\t\t\t\treturn nil, status.New(status.TestStatus, status.GenericTransient.ToInt32(), fmt.Sprintf(&quot;LifecycleCheckCCCommitReadiness returned : %v&quot;, resp1), nil)\n\t\t\t\t\t&#125;\n\t\t\t\t\treturn resp1, err\n\t\t\t\t&#125;,\n\t\t\t)\n\t\t\tif err !&#x3D; nil &#123;\n\t\t\t\treturn fmt.Errorf(&quot;NewInvoker error: %v&quot;, err)\n\t\t\t&#125;\n\t\t\tif resp&#x3D;&#x3D;nil&#123;\n\t\t\t\treturn fmt.Errorf(&quot;Got nill invoker response&quot;)\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\n\treturn nil\n&#125;\n\n提交智能合约定义\n\n\n\n\n\n\n\n\n一旦足够多的通道成员同意一个链码定义，某个组织能够提交定义到通道。你可以用上述 checkcommitreadiness 方法在将链码定义提交到通道之前，基于哪个通道成员已经批准了该定义，来检查提交链码定义是否应该成功。（根据通道成员同意的状况，来判断提交是否可能成功）。提交交易请求首先发送给通道成员的 peer节点，peer节点会查询链码定义被他们组织同意的状况，并且为定义背书如果所在组织已经同意了。交易然后提交给排序服务，排序服务会把链码定义提交给通道。提交定义交易需要以 Organization Administrator 身份来提交。链码在被成功提交到通道之前，需要被同意的组织的数量是通过 Channel/Application/LifecycleEndorsement 策略来管理的。默认情况下，这个策略需要通道中大多数的组织来给交易背书。生命周期背书策略不同于链码背书策略。例如，尽管一个链码背书策略只需要一个或两个组织的签名，根据默认策略大多数的通道成员仍然需要批准链码定义。当提交一个通道定义，你需要面向足够多的 peer 组织，以确保你的生命周期背书策略被满足。你也可以设置 Channel/Application/LifecycleEndorsement 策略为一个签名策略并且明确指明通道上可以批准链码定义的组织集合。这允许你创建一个其中大多数组织作为链码管理者并且治理通道业务逻辑的通道。如果你的通道有大量的Idemix（身份混合，实现零知识证明）组织，你也可以用一个签名策略（策略只需要一个签名），因为这些组织不能批准链码定义或者为链码背书并且可能阻碍通道达成大多数成员同意的结果。一个组织在不安装链码包的条件下能够批准链码定义。如果一个组织不需要使用链码，他们可以在没有包身份的情况下批准一个链码定义来确保生命周期背书策略被满足。在链码定义已经提交到通道上后，链码容器会在所有的链码安装到的 peer 节点上启动，来允许通道成员开始使用链码。可能会花费几分钟的时间来启动链码容器。你可以用链码定义来要求调用 Init 方法初始化链码。如果 Init 方法调用是需要的，链码的第一个调用必须是调用 Init 方法。Init 方法的调用服从于链码的背书策略。\nfunc commitCC(ccName, ccVersion string, sequence int64, channelID string, orgs []*OrgInfo, ordererEndpoint string) error&#123;\n\tmspIDs :&#x3D; []string&#123;&#125;\n\tfor _, org :&#x3D; range orgs &#123;\n\t\tmspIDs &#x3D; append(mspIDs, org.OrgMspId)\n\t&#125;\n\tccPolicy :&#x3D; policydsl.SignedByNOutOfGivenRole(int32(len(mspIDs)), mb.MSPRole_MEMBER, mspIDs)\n\t&#x2F;&#x2F; commit所需参数信息，内容同上\n\treq :&#x3D; resmgmt.LifecycleCommitCCRequest&#123;\n\t\tName:              ccName,\n\t\tVersion:           ccVersion,\n\t\tSequence:          sequence,\n\t\tEndorsementPlugin: &quot;escc&quot;,\n\t\tValidationPlugin:  &quot;vscc&quot;,\n\t\tSignaturePolicy:   ccPolicy,\n\t\tInitRequired:      true,\n\t&#125;\n    &#x2F;&#x2F; LifecycleCommitCC将链代码提交给给定的通道\n\t_, err :&#x3D; orgs[0].OrgResMgmt.LifecycleCommitCC(channelID, req, resmgmt.WithOrdererEndpoint(ordererEndpoint), resmgmt.WithRetry(retry.DefaultResMgmtOpts))\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;LifecycleCommitCC error: %v&quot;, err)\n\t&#125;\n\treturn nil\n&#125;\n\n查询已提交的智能合约定义func queryCommittedCC( ccName string, channelID string, sequence int64, orgs []*OrgInfo) error &#123;\n\treq :&#x3D; resmgmt.LifecycleQueryCommittedCCRequest&#123;\n\t\tName: ccName,\n\t&#125;\n\n\tfor _, org :&#x3D; range orgs &#123;\n\t\torgPeers, err :&#x3D; DiscoverLocalPeers(*org.OrgAdminClientContext, org.OrgPeerNum)\n\t\tif err!&#x3D;nil&#123;\n\t\t\treturn fmt.Errorf(&quot;DiscoverLocalPeers error: %v&quot;, err)\n\t\t&#125;\n\t\tfor _, p :&#x3D; range orgPeers &#123;\n\t\t\tresp, err :&#x3D; retry.NewInvoker(retry.New(retry.TestRetryOpts)).Invoke(\n\t\t\t\tfunc() (interface&#123;&#125;, error) &#123;\n                    &#x2F;&#x2F; LifecycleQueryCommittedCC查询给定通道上提交的链码\n\t\t\t\t\tresp1, err :&#x3D; org.OrgResMgmt.LifecycleQueryCommittedCC(channelID, req, resmgmt.WithTargets(p))\n\t\t\t\t\tif err !&#x3D; nil &#123;\n\t\t\t\t\t\treturn nil, status.New(status.TestStatus, status.GenericTransient.ToInt32(), fmt.Sprintf(&quot;LifecycleQueryCommittedCC returned error: %v&quot;, err), nil)\n\t\t\t\t\t&#125;\n\t\t\t\t\tflag :&#x3D; false\n\t\t\t\t\tfor _, r :&#x3D; range resp1 &#123;\n\t\t\t\t\t\tif r.Name &#x3D;&#x3D; ccName &amp;&amp; r.Sequence &#x3D;&#x3D; sequence &#123;\n\t\t\t\t\t\t\tflag &#x3D; true\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t&#125;\n\t\t\t\t\t&#125;\n\t\t\t\t\tif !flag &#123;\n\t\t\t\t\t\treturn nil, status.New(status.TestStatus, status.GenericTransient.ToInt32(), fmt.Sprintf(&quot;LifecycleQueryCommittedCC returned : %v&quot;, resp1), nil)\n\t\t\t\t\t&#125;\n\t\t\t\t\treturn resp1, err\n\t\t\t\t&#125;,\n\t\t\t)\n\t\t\tif err !&#x3D; nil &#123;\n\t\t\t\treturn  fmt.Errorf(&quot;NewInvoker error: %v&quot;, err)\n\t\t\t&#125;\n\t\t\tif resp&#x3D;&#x3D;nil&#123;\n\t\t\t\treturn fmt.Errorf(&quot;Got nil invoker response&quot;)\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\treturn nil\n&#125;\n\n智能合约初始化func initCC(ccName string, upgrade bool, channelID string, org *OrgInfo, sdk *fabsdk.FabricSDK) error &#123;\n\t&#x2F;&#x2F; 准备通道客户端上下文\n\tclientChannelContext :&#x3D; sdk.ChannelContext(channelID, fabsdk.WithUser(org.OrgUser), fabsdk.WithOrg(org.OrgName))\n\t&#x2F;&#x2F; 通道客户端用于查询执行交易\n\tclient, err :&#x3D; channel.New(clientChannelContext)\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;Failed to create new channel client: %s&quot;, err)\n\t&#125;\n\n\t&#x2F;&#x2F; 调用链码初始化\n\t_, err &#x3D; client.Execute(channel.Request&#123;ChaincodeID: ccName, Fcn: &quot;init&quot;, Args: nil, IsInit: true&#125;,\n\t\tchannel.WithRetry(retry.DefaultChannelOpts))\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;Failed to init: %s&quot;, err)\n\t&#125;\n\treturn nil\n&#125;\n调用创建通道函数及加入通道func CreateAndJoinChannel(info *SdkEnvInfo) error &#123;\n\tfmt.Println(&quot;&gt;&gt; 开始创建通道......&quot;)\n\tif len(info.Orgs) &#x3D;&#x3D; 0 &#123;\n\t\treturn fmt.Errorf(&quot;通道组织不能为空，请提供组织信息&quot;)\n\t&#125;\n\n\t&#x2F;&#x2F; 获得所有组织的签名信息\n\tsignIds :&#x3D; []msp.SigningIdentity&#123;&#125;\n\tfor _, org :&#x3D; range info.Orgs &#123;\n\t\t&#x2F;&#x2F; Get signing identity that is used to sign create channel request\n\t\torgSignId, err :&#x3D; org.orgMspClient.GetSigningIdentity(org.OrgAdminUser)\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn fmt.Errorf(&quot;GetSigningIdentity error: %v&quot;, err)\n\t\t&#125;\n\t\tsignIds &#x3D; append(signIds, orgSignId)\n\t&#125;\n\n\t&#x2F;&#x2F; 创建通道，createChannel方法在下面定义\n\tif err :&#x3D; createChannel(signIds, info); err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;Create channel error: %v&quot;, err)\n\t&#125;\n\n\tfmt.Println(&quot;&gt;&gt; 创建通道成功&quot;)\n\n\tfmt.Println(&quot;&gt;&gt; 加入通道......&quot;)\n\tfor _, org :&#x3D; range info.Orgs &#123;\n\t\t&#x2F;&#x2F; 加入通道\n\t\tif err :&#x3D; org.OrgResMgmt.JoinChannel(info.ChannelID, resmgmt.WithRetry(retry.DefaultResMgmtOpts), resmgmt.WithOrdererEndpoint(&quot;orderer.example.com&quot;)); err !&#x3D; nil &#123;\n\t\t\treturn fmt.Errorf(&quot;%s peers failed to JoinChannel: %v&quot;, org.OrgName, err)\n\t\t&#125;\n\t&#125;\n\tfmt.Println(&quot;&gt;&gt; 加入通道成功&quot;)\n\treturn nil\n&#125;\n创建通道func createChannel(signIDs []msp.SigningIdentity, info *SdkEnvInfo) error &#123;\n\t&#x2F;&#x2F; Channel management client 负责管理通道，如创建更新通道\n\tchMgmtClient, err :&#x3D; resmgmt.New(*info.OrdererClientContext)\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;Channel management client create error: %v&quot;, err)\n\t&#125;\n\n\t&#x2F;&#x2F; 根据channel.tx创建通道\n\treq :&#x3D; resmgmt.SaveChannelRequest&#123;ChannelID: info.ChannelID,\n\t\tChannelConfigPath: info.ChannelConfig,\n\t\tSigningIdentities: signIDs&#125;\n\n\tif _, err :&#x3D; chMgmtClient.SaveChannel(req, resmgmt.WithRetry(retry.DefaultResMgmtOpts), resmgmt.WithOrdererEndpoint(&quot;orderer.example.com&quot;)); err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;error should be nil for SaveChannel of orgchannel: %v&quot;, err)\n\t&#125;\n\n\tfmt.Println(&quot;&gt;&gt;&gt;&gt; 使用每个org的管理员身份更新锚节点配置...&quot;)\n\t&#x2F;&#x2F;根据锚节点文件更新锚节点，与上面创建通道流程相同\n\tfor i, org :&#x3D; range info.Orgs &#123;\n\t\treq &#x3D; resmgmt.SaveChannelRequest&#123;ChannelID: info.ChannelID,\n\t\t\tChannelConfigPath: org.OrgAnchorFile,\n\t\t\tSigningIdentities: []msp.SigningIdentity&#123;signIDs[i]&#125;&#125;\n\n\t\tif _, err &#x3D; org.OrgResMgmt.SaveChannel(req, resmgmt.WithRetry(retry.DefaultResMgmtOpts), resmgmt.WithOrdererEndpoint(&quot;orderer.example.com&quot;)); err !&#x3D; nil &#123;\n\t\t\treturn fmt.Errorf(&quot;SaveChannel for anchor org %s error: %v&quot;, org.OrgName, err)\n\t\t&#125;\n\t&#125;\n\tfmt.Println(&quot;&gt;&gt;&gt;&gt; 使用每个org的管理员身份更新锚节点配置完成&quot;)\n\t\n\treturn nil\n&#125;\n智能合约完整生命周期func CreateCCLifecycle(info *SdkEnvInfo, sequence int64, upgrade bool, sdk *fabsdk.FabricSDK) error &#123;\n\tif len(info.Orgs) &#x3D;&#x3D; 0 &#123;\n\t\treturn fmt.Errorf(&quot;the number of organization should not be zero.&quot;)\n\t&#125;\n\t&#x2F;&#x2F; 打包链码\n\tfmt.Println(&quot;&gt;&gt; 开始打包链码......&quot;)\n\tlabel, ccPkg, err :&#x3D; packageCC(info.ChaincodeID, info.ChaincodeVersion, info.ChaincodePath)\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;pakcagecc error: %v&quot;, err)\n\t&#125;\n\tpackageID :&#x3D; lcpackager.ComputePackageID(label, ccPkg)\n\tfmt.Println(&quot;&gt;&gt; 打包链码成功&quot;)\n\n\t&#x2F;&#x2F; 安装链码\n\tfmt.Println(&quot;&gt;&gt; 开始安装链码......&quot;)\n\tif err :&#x3D; installCC(label, ccPkg, info.Orgs); err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;installCC error: %v&quot;, err)\n\t&#125;\n\n\t&#x2F;&#x2F; 检索已安装链码包\n\tif err :&#x3D; getInstalledCCPackage(packageID, info.Orgs[0]); err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;getInstalledCCPackage error: %v&quot;, err)\n\t&#125;\n\n\t&#x2F;&#x2F; 查询已安装链码\n\tif err :&#x3D; queryInstalled(packageID, info.Orgs[0]); err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;queryInstalled error: %v&quot;, err)\n\t&#125;\n\tfmt.Println(&quot;&gt;&gt; 安装链码成功&quot;)\n\n\t&#x2F;&#x2F; 批准链码\n\tfmt.Println(&quot;&gt;&gt; 组织认可智能合约定义......&quot;)\n\tif err :&#x3D; approveCC(packageID, info.ChaincodeID, info.ChaincodeVersion, sequence, info.ChannelID, info.Orgs, info.OrdererEndpoint); err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;approveCC error: %v&quot;, err)\n\t&#125;\n\n\t&#x2F;&#x2F; 查询批准\n\tif err:&#x3D;queryApprovedCC(info.ChaincodeID, sequence, info.ChannelID, info.Orgs);err!&#x3D;nil&#123;\n\t\treturn fmt.Errorf(&quot;queryApprovedCC error: %v&quot;, err)\n\t&#125;\n\tfmt.Println(&quot;&gt;&gt; 组织认可智能合约定义完成&quot;)\n\n\t&#x2F;&#x2F; 检查智能合约是否就绪\n\tfmt.Println(&quot;&gt;&gt; 检查智能合约是否就绪......&quot;)\n\tif err:&#x3D;checkCCCommitReadiness(packageID, info.ChaincodeID, info.ChaincodeVersion, sequence, info.ChannelID, info.Orgs); err!&#x3D;nil&#123;\n\t\treturn fmt.Errorf(&quot;checkCCCommitReadiness error: %v&quot;, err)\n\t&#125;\n\tfmt.Println(&quot;&gt;&gt; 智能合约已经就绪&quot;)\n\n\t&#x2F;&#x2F; Commit\n\tfmt.Println(&quot;&gt;&gt; 提交智能合约定义......&quot;)\n\tif err:&#x3D;commitCC(info.ChaincodeID, info.ChaincodeVersion, sequence, info.ChannelID, info.Orgs, info.OrdererEndpoint);err!&#x3D;nil&#123;\n\t\treturn fmt.Errorf(&quot;commitCC error: %v&quot;, err)\n\t&#125;\n\t&#x2F;&#x2F; 查询Commit结果\n\tif err:&#x3D;queryCommittedCC(info.ChaincodeID, info.ChannelID, sequence, info.Orgs); err!&#x3D;nil&#123;\n\t\treturn fmt.Errorf(&quot;queryCommittedCC error: %v&quot;, err)\n\t&#125;\n\tfmt.Println(&quot;&gt;&gt; 智能合约定义提交完成&quot;)\n\n\t&#x2F;&#x2F; 初始化\n\tfmt.Println(&quot;&gt;&gt; 调用智能合约初始化方法......&quot;)\n\tif err:&#x3D;initCC(info.ChaincodeID, upgrade, info.ChannelID, info.Orgs[0], sdk); err!&#x3D;nil&#123;\n\t\treturn fmt.Errorf(&quot;initCC error: %v&quot;, err)\n\t&#125;\n\tfmt.Println(&quot;&gt;&gt; 完成智能合约初始化&quot;)\n\treturn nil\n&#125;\nsetpackage sdkInit\n\nimport (\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;client&#x2F;channel&quot;\n)\n\nfunc (t *Application) Set(args []string) (string, error) &#123;\n\tvar tempArgs [][]byte\n\tfor i :&#x3D; 1; i &lt; len(args); i++ &#123;\n\t\ttempArgs &#x3D; append(tempArgs, []byte(args[i]))\n\t&#125;\n\n\trequest :&#x3D; channel.Request&#123;ChaincodeID: t.SdkEnvInfo.ChaincodeID, Fcn: args[0], Args: [][]byte&#123;[]byte(args[1]), []byte(args[2])&#125;&#125;\n\tresponse, err :&#x3D; t.SdkEnvInfo.ChClient.Execute(request)\n\tif err !&#x3D; nil &#123;\n\t\t&#x2F;&#x2F; 资产转移失败\n\t\treturn &quot;&quot;, err\n\t&#125;\n\n\t&#x2F;&#x2F;fmt.Println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; response:&quot;,response)\n\n\treturn string(response.TransactionID), nil\n&#125;\n","slug":"区块链7","date":"2022-11-17T08:12:49.000Z","categories_index":"信管","tags_index":"区块链","author_index":"Algernon"},{"id":"06d22af38396e195dd96ea5ad47e2bed","title":"【minimal problem】资料整理","content":"minimal problem关于计算机视觉中可能遇到的minimal problem资料收集整理与部分注解，主要来源于arxiv和各类顶会，也包括知网和CSDN上的内容\n\n\n\n\n\n\n\n\n\nuse as few data as to generate a system of algebraic equaIons with a finite number of soluIons\nminimal problem：\n使用尽可能少的数据来生成代数系统解数有限的方程\n以往工作基于神经网络解一元高次方程代码实战：解低次方程代码实战：解高次方程\n主要论文Principles    of    Solving    Minimal    Problems（ICCV2015）Minimal    problem:论文链接：\n\n\n\n\n\n\n\n\n\nhttp://cmp.felk.cvut.cz/minimal-iccv-2015/present/SMP-2015-Principles-Pajdla.pdf\n\n问题公式——&gt;代数方程\n解代数方程单一未知数——特征值余数明确定义的除数，不依赖于除数的顺序Groebner basis\n\n\n\n\n\n\n\n\n\n\n\n\nhttps://zhuanlan.zhihu.com/p/262906557\nGrobner基的功能类似于结式和特征列，可以用于解代数方程组。Grobner基不一定是三角列，但Grobner基的消元性质（Thm7.3.4）确保了变元的分离。所以可以从纯字典序的Grobner基求得一组多项式方程的解。所以我们需要计算最大公因式线性方程——代数方程\n通过构造Groebner basis求解多项式方程1888：大卫希尔伯特：有限性定理\n1965：Bruno Burchberger: Groebner basesComputational procedure for solving systemsof polynomial equations (Extremely simple: 20 lines of Maple code!) 求解系统的计算程序多项式方程  （极其简单：20 行 Maple 代码！）Gröbner基——Buchberger的发现，却以他导师的姓命名A dynamic F4 algorithm to compute Gröbner bases\n1998：Hans Stetter：乘法矩阵通过特征向量的稳定数值过程\nAutoma’c Generator of Minimal Problem(ECCV2008)ECCV    2008\n\n\n\n\n\n\n\n\n\nhttps://xueshu.baidu.com/usercenter/paper/show?paperid=de5e30310c5378bd033b9f0ba90e4da4&amp;site=xueshu_se\nAutomatic Generator of Minimal Problem Solvers\n\n斯图姆定理：\n\n\n\n\n\n\n\n\n\nhttps://baike.baidu.com/item/%E6%96%AF%E5%9B%BE%E5%A7%86%E5%AE%9A%E7%90%86/18881160\nhttps://zhuanlan.zhihu.com/p/164729380\n\n代码：\n\n\n\n\n\n\n\n\n\nhttps://github.com/PavelTrutman/Automatic-Generator/tree/development\n% \n% P6P rolling shutter (eliminated)\nfunction [eq, known, unknown, kngroups, cfg, algB] &#x3D; minimal_rolling_shutter_generator_linear_I_planar()\n\ng1 &#x3D; transpose(gbs_Vector(&#39;g1&#39;, 8));\ng2 &#x3D; transpose(gbs_Vector(&#39;g2&#39;, 8));\ng3 &#x3D; transpose(gbs_Vector(&#39;g3&#39;, 8));\ng4 &#x3D; transpose(gbs_Vector(&#39;g4&#39;, 8));\ng5 &#x3D; transpose(gbs_Vector(&#39;g5&#39;, 8));\ng6 &#x3D; transpose(gbs_Vector(&#39;g6&#39;, 8));\n\n\n\nsyms v_1 v_2 v_3 w_1 w_2 w_3;\n\n\nmon &#x3D; [v_3*w_3 v_1 v_2 v_3,  w_1, w_2, w_3, 1];\n\ncfg &#x3D; gbs_InitConfig();\n\nclear eq;\n\n\n% g1(1) &#x3D; 1\n% g2(1)&#x3D;0\n% g3(1)&#x3D;0\n% g4(1)&#x3D;1\n% g5(1)&#x3D;0\n% g6(1)&#x3D;0\n% \n% g1(5)&#x3D;0\n% g2(5)&#x3D;0\n% g3(5)&#x3D;0\n% g4(5)&#x3D;0\n% g5(5)&#x3D;0\n% g6(5) &#x3D; 1;\n% \n% g1(6)&#x3D;0\n% g2(6)&#x3D;0\n% g3(6)&#x3D;0\n% g4(6)&#x3D;0\n% g5(6)&#x3D;-1\n% g6(6)&#x3D;0\n% \n% g1(7) &#x3D; 0\n% g2(7) &#x3D; -1\n% g3(7) &#x3D; 1\n% g4(7) &#x3D; 0\n% g5(7)&#x3D;0\n% g6(7)&#x3D;0\n\n\neq(1) &#x3D; v_1*w_1 + g1*transpose(mon);\neq(2) &#x3D; v_1*w_2 + g2*transpose(mon);\neq(3) &#x3D; v_2*w_1 + g3*transpose(mon);\neq(4) &#x3D; v_2*w_2 + g4*transpose(mon);\neq(5) &#x3D; v_3*w_1 + g5*transpose(mon);\neq(6) &#x3D; v_3*w_2 + g6*transpose(mon);\n\n\n% g1 &#x3D; transpose(gbs_Vector(&#39;g1&#39;, 8));\n% g2 &#x3D; transpose(gbs_Vector(&#39;g2&#39;, 8));\n% g3 &#x3D; transpose(gbs_Vector(&#39;g3&#39;, 8));\n% g4 &#x3D; transpose(gbs_Vector(&#39;g4&#39;, 8));\n% g5 &#x3D; transpose(gbs_Vector(&#39;g5&#39;, 8));\n% g6 &#x3D; transpose(gbs_Vector(&#39;g6&#39;, 8));\n\nunknown &#x3D; &#123;&#39;v_1&#39; &#39;v_2&#39; &#39;v_3&#39; &#39;w_1&#39; &#39;w_2&#39; &#39;w_3&#39;&#125;;\nvars &#x3D; transpose([g1(:); g2(:); g3(:); g4(:); g5(:); g6(:)]);\nknown &#x3D; &#123;&#125;;\nfor var &#x3D; vars\n    known &#x3D; [known &#123;char(var)&#125;];\nend    \n\n% create symbolic vars\nfor mon &#x3D; unknown\n    eval([&#39;syms &#39; char(mon) &#39;;&#39;]);\nend\n\n%cfg.eqinstance &#x3D; R6P_planar_inst(cfg);\n\n% call code generator\nkngroups &#x3D; ones(8,1)*[1 2 3 4 5 6];\n%[res export] &#x3D; gbs_CreateCode(&#39;p6p_rs_lin_I_planar&#39;, eq, known, unknown, kngroups);\nalgB &#x3D; [];\n\n%[A symcoefs] &#x3D; rsSolver(&#39;imu3pr_peieg.m&#39;, eq, &#39;tan&#39;, unknown, known, kngroups);\nend\nLearning to Solve Hard Minimal Problems(CVPR2022)\n\n\n\n\n\n\n\n\nhttps://theigrams.github.io/zjblog/2022/07/18/learning-to-solve-hard-minimal-problems.html\n但是这篇论文的代码和结果不算特别好看，作为参考。\nminimal problem当从图像数据计算几何模型时会出现计算机视觉中的最小问题这个网站里有比较全面的收录：\n\n\n\n\n\n\n\n\n\nhttps://cmp.felk.cvut.cz/~kukelova/minimal/index.php\n作者报告github\n\n\n\n\n\n\n\n\n\nhttps://www.docin.com/p-1684946348.html\n4-pt absolute pose problem with unknown focal length (P4Pf)从四个 3D 参考点的图像确定具有未知焦距的透视相机位姿的通用解决方案。\nA general solution to the P4P problem for camera with unknown focal length（CVPR2008）论文链接：A general solution to the P4P problem for camera with unknown focal length\n5-pt relative pose problem从五个图像点对应估计两个完全校准相机的相对位姿。相关论文\n更多内容6-pt focal length problem\n8-pt radial distortion problem\n9-pt radial distortion problem从九个图像点对应的具有不同径向畸变的两个部分校准相机的对极几何和单参数径向畸变模型的同时估计。\n3-view triangulation problem三视图L2-最优三角剖分问题。\n网络平台百度学术\n\n\n\n\n\n\n\n\nhttps://xueshu.baidu.com/s?wd=minimal+problem&amp;tn=SE_baiduxueshu_c1gjeupa&amp;ie=utf-8&amp;sc_hit=1\nCSDNCVPR 2008 papers\n\n\n\n\n\n\n\n\n\nByr¨od, M., Kukelova, Z., Josephson, K., Pajdla, T., Astr¨ ˚ om, K.:Fast and robust numerical solutions to minimal problems for cameraswith radial distortion. In: CVPR 2008 (2008)\nTwo minimal problems for cameras with radial distortion\n\n\n\n\n\n\n\n\n\nhttps://schlr.cnki.net/en/Detail/index/GARJ2021_2/XQSPB7D061D4B0264289C699D9AA81C39AB8\narxiv\n\n\n\n\n\n\n\n\nhttps://arxiv.org/search/?query=algorithm+to+compute+Gr%C3%B6bner+bases&amp;searchtype=all&amp;source=header\n\nA clever elimination strategy for efficient minimal solvers\n\nA fast minimal solver for absolute camera pose with unknown focal length and radial distortion from four planar points这篇值得深读\nGPU-Based Homotopy Continuation for Minimal Problems in Computer Vision\n多项式⽅程组在计算机视觉中经常出现，尤其是在多视图⼏何问题中。解决这些系统的传统⽅法通常旨在消除变量以达到单变量多项式，例如，⽤于 5 点姿态估计的⼗阶多项式，使⽤巧妙的操作，或更⼀般地使⽤ Grobner 基础、结果和消除模板，导致多视图⼏何和其他问题的成功算法。\nOptimizing Elimination Templates by Greedy Parameter Search矩阵运算参考\n","slug":"minimal problem","date":"2022-11-16T12:28:49.000Z","categories_index":"深度学习","tags_index":"深度学习,计算机视觉,minimal problem","author_index":"Algernon"},{"id":"c856ef5ad42caa164991b416bd094fc5","title":"【文本挖掘】关键词提取","content":"统计关键词前20位数据集如下：地址：\n\n\n\n\n\n\n\n\n\nhttps://github.com/Algernon98/github-store/tree/main/data./text./genshin.\n\n\nfrom gensim import corpora, models\nimport config\nimport jieba\nimport jieba.analyse\nimport train\nfrom codecs import open\n\nstopwords_path &#x3D; config.stopwords_path\nsegmented_path &#x3D; config.segmented_path\ntest_path &#x3D; config.test_path\nraw_path &#x3D; config.raw_path\nresult_path &#x3D; config.result_path\ntopic_num &#x3D; 30\n\n\ndef get_stopwords_set(file_name):\n    with open(file_name, &#39;r&#39;, encoding&#x3D;&#39;utf-8&#39;) as f:\n        return set([line.strip() for line in f])\n\n\ndef get_words_list(file_name, stop_word_file):\n    stop_words_set &#x3D; get_stopwords_set(stop_word_file)\n    word_list &#x3D; []\n    with open(file_name, &#39;r&#39;, encoding&#x3D;&#39;utf-8&#39;) as f:\n        for line in f:\n            tmp_list &#x3D; list(jieba.cut(line.strip(), cut_all&#x3D;False))\n            word_list.append([i for i in tmp_list if i not in stop_words_set])\n        return word_list\n\n\ndef extract_theme(raw_file, stop_word_file, num_topics&#x3D;10):\n    result &#x3D; []\n    # 列表，每个元素也是列表，即分词后的词语列表\n    word_list &#x3D; get_words_list(raw_file, stop_word_file)\n    # 生成文档的词典，每个此与一个整形索引值对应\n    word_dict &#x3D; corpora.Dictionary(word_list)\n    # 词频统计，转化为空间向量格式\n    corpus_list &#x3D; [word_dict.doc2bow(text) for text in word_list]\n    lda &#x3D; models.ldamodel.LdaModel(corpus&#x3D;corpus_list, id2word&#x3D;word_dict, num_topics&#x3D;num_topics, alpha&#x3D;&#39;auto&#39;)\n    for pattern in lda.show_topics(num_topics&#x3D;num_topics, num_words&#x3D;1, formatted&#x3D;False):\n        result.append(pattern[1][0][0])\n    return result\n\n\ndef main():\n    files &#x3D; train.get_files(raw_path)\n    file_name &#x3D; result_path + &quot;&#x2F;theme_result.txt&quot;\n    f_word_result &#x3D; open(file_name, &quot;w+&quot;, encoding&#x3D;&#39;utf-8&#39;)\n    f_word_result.write(&quot;主题词提取&quot; + &quot;\\n&quot;)\n    for f in files:\n        f_word_result.write(&#39;\\n&#39; + f.split(&quot;\\\\&quot;)[-1][:-4] + &quot;:\\n&quot;)\n        \n        topics &#x3D; extract_theme(f, stopwords_path, 100)\n        topic_list &#x3D; []\n        for t in topics:\n            if t not in topic_list and len(topic_list) &lt; topic_num:\n                topic_list.append(t)\n                f_word_result.write(t + &#39;\\n&#39;)\n        print(f + &#39; save to: &#39; + file_name + &quot; ok.&quot;)\n    f_word_result.close()\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    main()\n\n结果：\n\n\n\n\n\n\n\n\n\nD:\\coder\\randomnumbers\\venv\\Scripts\\python.exe D:/coder/randomnumbers/text-feature-master/text-feature-master/theme.pyBuilding prefix dict from the default dictionary …Loading model from cache C:\\Users\\83854\\AppData\\Local\\Temp\\jieba.cacheLoading model cost 1.033 seconds.Prefix dict has been built successfully.data/raw\\捕鸟者的故事.txt save to: data/result/theme_result.txt ok.data/raw\\日月前事.txt save to: data/result/theme_result.txt ok.data/raw\\浮槃歌卷.txt save to: data/result/theme_result.txt ok.data/raw\\镜子与魔法师的故事.txt save to: data/result/theme_result.txt ok.data/raw\\阿赫玛尔的故事.txt save to: data/result/theme_result.txt ok.\n进程已结束,退出代码0\n主题词提取\n\n捕鸟者的故事:\n少年\n捕鸟\n筹备\n密林\n长久\n战争\n悲伤\n少女\n说\n之鸟\n鸟\n十分\n\n日月前事:\n写\n天上\n法涅斯\n诱惑\n种子\n原初\n发光\n太阳\n囚禁\n说\n国王\n禁令\n园丁\n时刻\n火\n影子\n先祖\n第一次\n到来\n嗣\n记录\n这种\n秘密\n制造\n全部\n日月\n大王\n奇迹\n归途\n立约\n\n浮槃歌卷:\n作者\n彻知\n迈出\n毫无保留\n逐诈\n深渊\n第一句\n缺漏\n遗迹\n拥有者\n遗体\n簇拥\n语言\n无法\n多么\n律法\n真的\n槃\n相比\n节\n浮\n无人\n当时\n精灵\n念诵\n永\n情人\n备注\n宛若\n馈\n\n镜子与魔法师的故事:\n一夜\n总是\n镜子\n魔法师\n女人\n漫漫长夜\n昔日\n故事\n宫殿\n这座\n话语\n般的\n已\n\n阿赫玛尔的故事:\n不可\n阿赫玛\n芬芳\n沙丘\n神王\n一夜\n回\n灾祸\n蒙昧\n手杖\n七重\n加\n书记\n想起\n沙漠\n众\n迷宫\n智慧\n过去\n旅团\n怎能\n一手\n生命\n住民\n震动\n惩罚\n陛下\n统帅\n理性\n\n情感分析\n\n\n\n\n\n\n\n\nhttps://github.com/shibing624/pysenti\nfrom pysenti import ModelClassifier\n\ntexts &#x3D; [&quot;我爱阿卓&quot;,\n         &quot;我喜欢阿卓&quot;,\n         &quot;阿卓最好了&quot;,\n         &quot;超喜欢阿卓捏&quot;,\n         &quot;没有阿卓我会难过&quot;,\n         &quot;阿卓，坏！&quot;]\n\nm &#x3D; ModelClassifier()\nfor i in texts:\n    r &#x3D; m.classify(i)\n    print(i, r)\n\n\n\n\n\n\n\n\n\n我爱阿卓 {‘positive_prob’: 0.8466820791295006, ‘negative_prob’: 0.15331792087049945}我喜欢阿卓 {‘positive_prob’: 0.6747967727946668, ‘negative_prob’: 0.32520322720533323}阿卓最好了 {‘positive_prob’: 0.5, ‘negative_prob’: 0.5}超喜欢阿卓捏 {‘positive_prob’: 0.7779255451248865, ‘negative_prob’: 0.22207445487511346}没有阿卓我会难过 {‘positive_prob’: 0.8653531007266904, ‘negative_prob’: 0.13464689927330964}阿卓，坏！ {‘positive_prob’: 0.17124756072277025, ‘negative_prob’: 0.8287524392772297}\n文本提取模板：\n\n\n\n\n\n\n\n\n\nhttps://github.com/letiantian/TextRank4ZH\n代码#-*- encoding:utf-8 -*-\nfrom __future__ import print_function\nimport importlib,sys\nimportlib.reload(sys)\n\nimport sys\ntry:\n    importlib.reload(sys)\n    sys.setdefaultencoding(&#39;utf-8&#39;)\nexcept:\n    pass\n\nimport codecs\nfrom textrank4zh import TextRank4Keyword, TextRank4Sentence\n\ntext &#x3D; codecs.open(&#39;..&#x2F;test&#x2F;doc&#x2F;01.txt&#39;, &#39;r&#39;, &#39;utf-8&#39;).read()\ntr4w &#x3D; TextRank4Keyword()\n\ntr4w.analyze(text&#x3D;text, lower&#x3D;True, window&#x3D;2)   # py2中text必须是utf8编码的str或者unicode对象，py3中必须是utf8编码的bytes或者str对象\n\nprint( &#39;关键词：&#39; )\nfor item in tr4w.get_keywords(20, word_min_len&#x3D;1):\n    print(item.word, item.weight)\n\nprint()\nprint( &#39;关键短语：&#39; )\nfor phrase in tr4w.get_keyphrases(keywords_num&#x3D;20, min_occur_num&#x3D; 2):\n    print(phrase)\n\ntr4s &#x3D; TextRank4Sentence()\ntr4s.analyze(text&#x3D;text, lower&#x3D;True, source &#x3D; &#39;all_filters&#39;)\n\nprint()\nprint( &#39;摘要：&#39; )\nfor item in tr4s.get_key_sentences(num&#x3D;3):\n    print(item.index, item.weight, item.sentence)\n数据集浮槃歌卷D:\\coder\\randomnumbers\\venv\\Scripts\\python.exe D:&#x2F;coder&#x2F;randomnumbers&#x2F;TextRank4ZH&#x2F;example&#x2F;example01.py\nBuilding prefix dict from the default dictionary ...\nLoading model from cache C:\\Users\\83854\\AppData\\Local\\Temp\\jieba.cache\nLoading model cost 0.489 seconds.\nPrefix dict has been built successfully.\n关键词：\n备注 0.009742484094232517\n谜题 0.00895192051928737\n无法 0.008928982024858924\n女主人 0.0084675400252497\n人们 0.008453594560064712\n王女 0.008415178312232818\n君王 0.008343775020150554\n作 0.006996706115774437\n梨 0.006637384687180664\n塔 0.006571901190830194\n知识 0.006521435305209939\n全部 0.006017572251023542\n缺词 0.006017572251023542\n回答 0.0057618736938632705\n说 0.005471815209872001\n无人 0.005469906201271802\n语言 0.005448693305806349\n智慧 0.005328745641089529\n抵御 0.005170270890198952\n摧垮 0.005170270890198952\n\n关键短语：\n女主人说\n\n摘要：\n17 0.0172286704332726 【室罗婆耽院诃般荼，塔法佐莉的备注：本节首句中，暂时无法确定含义的词语，也可译作「农田」或「墓园」\n52 0.016848163757853078 彻知的君王啊，若是你的智慧真的与人们传说的不差毫厘，\n72 0.016848163757853078 彻知的君王啊，若是你的智慧真的与人们传说的不差毫厘，\n\n进程已结束,退出代码0\n\n阿赫玛尔的故事D:\\coder\\randomnumbers\\venv\\Scripts\\python.exe D:&#x2F;coder&#x2F;randomnumbers&#x2F;TextRank4ZH&#x2F;example&#x2F;example01.py\nBuilding prefix dict from the default dictionary ...\nLoading model from cache C:\\Users\\83854\\AppData\\Local\\Temp\\jieba.cache\nLoading model cost 0.574 seconds.\nPrefix dict has been built successfully.\n关键词：\n智慧 0.014352705637079653\n王 0.010845562797082157\n知识 0.009491235284100272\n沙丘 0.009273868947831002\n镇灵 0.008765206011653781\n生命 0.008700254211786216\n贤者 0.008512954726829796\n尔 0.008334562709858306\n陛下 0.008235193740032542\n成为 0.007806746637740814\n说 0.007798790729346429\n回 0.007711778318750074\n君王 0.007378189784886893\n灾祸 0.007095572914054973\n玫瑰 0.007023821594126371\n阿赫玛 0.006940470647070925\n镀金 0.006864355408463337\n无底 0.006713895728302868\n往往 0.006630375398411197\n过去 0.006439889693916835\n\n关键短语：\n阿赫玛尔\n\n摘要：\n4 0.033449378499342035 因此即便贵为大地四方之王，深受三大部族无数子民信仰，又被难以捉摸的镇灵崇拜，每当仰视天穹时，回想起天上的九重又九重的乐园、回想起千百年前无情的惩治，阿赫玛尔仍不免垂下高贵的头颅，发出无解的叹息\n43 0.03244297229717682 他们说，阿赫玛尔的肉体在王座上渐渐腐朽，为巨虫所噬，而他的魂灵则同王都千百万尖叫的魂灵融成一体，永远在呼啸的末日中徘徊迷途，沿着蛇行的黑暗盘廊，向无底的深渊横冲直撞而去\n42 0.02884013537738098 他们说，阿赫玛尔最终将他自己的智慧抽离了骨血，投入了无穷无尽、永远向着深处曲折蛇行的回廊、阶梯、门洞与雕梁\n\n进程已结束,退出代码0\n\n白夜国馆藏\nD:\\coder\\randomnumbers\\venv\\Scripts\\python.exe D:&#x2F;coder&#x2F;randomnumbers&#x2F;TextRank4ZH&#x2F;example&#x2F;example01.py\nBuilding prefix dict from the default dictionary ...\nLoading model from cache C:\\Users\\83854\\AppData\\Local\\Temp\\jieba.cache\nLoading model cost 0.487 seconds.\nPrefix dict has been built successfully.\n关键词：\n会 0.00945293107094898\n龙蜥 0.008985161542912045\n海 0.007266934837240164\n太阳 0.006848229165971737\n白夜 0.0063326576390741705\n没有 0.006122751687146217\n人 0.005816887054897028\n人们 0.005680592314158335\n光 0.005250242836753312\n世界 0.0046159719828632205\n渊下 0.004480827111156577\n水 0.00441805817105551\n先祖 0.004354413330551786\n国 0.004345795461616112\n贤人 0.0043423433175067225\n实验 0.004267520239767349\n出现 0.004236880141916847\n元素 0.004210609549875028\n见 0.0042022717684937145\n风 0.003925479652771031\n时 0.003623991002497307\n龙 0.003577253592461393\n名字 0.003512549384231825\n影子 0.003489354931921611\n生物 0.0034446278574639675\n火 0.0033825500180776616\n研究 0.003260560214370052\n全部 0.003234997767633707\n去 0.003177858674726537\n日月 0.0031004664413358993\n\n关键短语：\n白夜国\n\n摘要：\n201 0.007251016661601182 著者可以忽略，或写研究所内之号，严禁暴露研究人员之古白夜国&#x2F;渊下宫名或现代海祇&#x2F;鸣神&#x2F;稻妻式名字\n229 0.006867967296295812 因为容不下海祇之血，龙蜥的身体会出现各种不良反应\n191 0.006850799238337301 根据预言，它应该就是贤人所展示的太阳，用来照亮没有见过光的洞穴\n\n进程已结束,退出代码0\n\n词云生成代码# -*- coding: utf-8 -*-\n\nfrom __future__ import print_function\n\nimport jieba.analyse\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\n\n\n# 设置相关的文件路径\n# bg_image_path &#x3D; &quot;bg_image.jpg&quot;\ntext_path &#x3D; &#39;.&#x2F;data&#x2F;xiaozhu.txt&#39;\nfont_path &#x3D; &#39;msyh.ttf&#39;\nstopwords_path &#x3D; &#39;stopword.txt&#39;\n\n\ndef clean_using_stopword(text):\n    &quot;&quot;&quot;\n    去除停顿词，利用常见停顿词表+自建词库\n    :param text: 输入文本\n    :return: 分词去停用词后的文本\n    &quot;&quot;&quot;\n    mywordlist &#x3D; []\n    seg_list &#x3D; jieba.cut(text, cut_all&#x3D;False)\n    liststr &#x3D; &quot;&#x2F;&quot;.join(seg_list)\n    with open(stopwords_path,encoding&#x3D;&#39;utf-8&#39;) as f_stop:\n        f_stop_text &#x3D; f_stop.read()\n        f_stop_text &#x3D; f_stop_text\n    f_stop_seg_list &#x3D; f_stop_text.split(&#39;\\n&#39;)\n    for myword in liststr.split(&#39;&#x2F;&#39;):  # 去除停顿词，生成新文档\n        if not (myword.strip() in f_stop_seg_list) and len(myword.strip()) &gt; 1:\n            mywordlist.append(myword)\n    return &#39;&#39;.join(mywordlist)\n\n\ndef preprocessing():\n    &quot;&quot;&quot;\n    文本预处理\n    :return:\n    &quot;&quot;&quot;\n    with open(text_path,encoding&#x3D;&#39;utf-8&#39;) as f:\n        content &#x3D; f.read()\n    return clean_using_stopword(content)\n    return content\n\n\ndef extract_keywords():\n    &quot;&quot;&quot;\n    利用jieba来进行中文分词。\n    analyse.extract_tags采用TF-IDF算法进行关键词的提取。\n    :return:\n    &quot;&quot;&quot;\n    # 抽取300个关键词，带权重，后面需要根据权重来生成词云\n    allow_pos &#x3D; (&#39;nr&#39;,)  # 词性\n    tags &#x3D; jieba.analyse.extract_tags(preprocessing(), 300, withWeight&#x3D;True)\n    keywords &#x3D; dict()\n    for i in tags:\n        # print(&quot;%s---%f&quot; % (i[0], i[1]))\n        keywords[i[0]] &#x3D; i[1]\n    print(keywords.keys())\n    return keywords\n\n\ndef draw_wordcloud():\n    &quot;&quot;&quot;\n    生成词云   1.配置WordCloud   2.plt进行显示\n    &quot;&quot;&quot;\n    # back_coloring &#x3D; plt.imread(&#39;bg_pic.jpg&#39;)  # 设置背景图片\n    # 设置词云属性\n    wc &#x3D; WordCloud(font_path&#x3D;font_path,  # 设置字体\n                   background_color&#x3D;&quot;white&quot;,  # 背景颜色\n                   max_words&#x3D;2000,  # 词云显示的最大词数\n                   width&#x3D;1200,  # 宽度\n                   height&#x3D;800,   # 高度\n                   # mask&#x3D;back_coloring,  # 设置背景图片\n                   )\n\n    wc.generate_from_frequencies(extract_keywords())\n    # 显示图\n    plt.figure()\n    plt.imshow(wc)\n    plt.axis(&quot;off&quot;)\n    plt.show()\n    # 保存到本地\n    wc.to_file(&quot;word_cloud.jpg&quot;)\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    draw_wordcloud()\n\n数据集白夜国馆藏D:\\coder\\randomnumbers\\venv\\Scripts\\python.exe D:&#x2F;coder&#x2F;randomnumbers&#x2F;Keywords_cloud&#x2F;wordCloud.py\nBuilding prefix dict from the default dictionary ...\nLoading model from cache C:\\Users\\83854\\AppData\\Local\\Temp\\jieba.cache\nLoading model cost 0.485 seconds.\nPrefix dict has been built successfully.\ndict_keys([&#39;白夜&#39;, &#39;原初&#39;, &#39;渊下&#39;, &#39;太阳&#39;, &#39;贤人&#39;, &#39;先祖&#39;, &#39;大御神&#39;, &#39;谜面&#39;, &#39;阿倍&#39;, &#39;龙嗣&#39;, &#39;深海&#39;, &#39;影子&#39;, &#39;大神&#39;, &#39;日月&#39;, &#39;园丁&#39;, &#39;实验&#39;, &#39;常世&#39;, &#39;谜底&#39;, &#39;祭司&#39;, &#39;良久&#39;, &#39;天上&#39;, &#39;名字&#39;, &#39;虚空&#39;, &#39;黑暗&#39;, &#39;大日&#39;, &#39;常夜&#39;, &#39;灵木&#39;, &#39;狭间&#39;, &#39;谜题&#39;, &#39;之子&#39;, &#39;记录&#39;, &#39;到来&#39;, &#39;布拉克&#39;, &#39;三界&#39;, &#39;赫利&#39;, &#39;树精&#39;, &#39;预言&#39;, &#39;纪年&#39;, &#39;孩子&#39;, &#39;理解&#39;, &#39;三隅&#39;, &#39;法涅斯&#39;, &#39;海渊&#39;, &#39;元素&#39;, &#39;七位&#39;, &#39;王座&#39;, &#39;水文&#39;, &#39;生活&#39;, &#39;恐怖&#39;, &#39;进化&#39;, &#39;世界&#39;, &#39;卷宗&#39;, &#39;未曾&#39;, &#39;大王&#39;, &#39;归途&#39;, &#39;子代&#39;, &#39;生物&#39;, &#39;乃是&#39;, &#39;最早&#39;, &#39;种子&#39;, &#39;落成&#39;, &#39;地理&#39;, &#39;答案&#39;, &#39;囚禁&#39;, &#39;化身&#39;, &#39;龙王&#39;, &#39;寿终&#39;, &#39;国王&#39;, &#39;比喻&#39;, &#39;蜃楼&#39;, &#39;小说&#39;, &#39;接纳&#39;, &#39;诱惑&#39;, &#39;常世国&#39;, &#39;宫民&#39;, &#39;衔枝&#39;, &#39;箱舟&#39;, &#39;过光&#39;, &#39;伊洛斯&#39;, &#39;俄斯&#39;, &#39;海渊之土&#39;, &#39;奥罗&#39;, &#39;巴洛斯&#39;, &#39;会以&#39;, &#39;零柒大御&#39;, &#39;腿数&#39;, &#39;阳炎幻&#39;, &#39;六十个&#39;, &#39;唯一&#39;, &#39;无始无终&#39;, &#39;幻想&#39;, &#39;崇拜&#39;, &#39;海面&#39;, &#39;版本&#39;, &#39;本书&#39;, &#39;腌臜&#39;, &#39;龙蛇&#39;, &#39;大蛇&#39;, &#39;谨记&#39;, &#39;大地&#39;, &#39;特令&#39;, &#39;去往&#39;, &#39;研究&#39;, &#39;崩落&#39;, &#39;现象&#39;, &#39;四十个&#39;, &#39;只能&#39;, &#39;环境&#39;, &#39;事物&#39;, &#39;著者&#39;, &#39;欢欣&#39;, &#39;禁止&#39;, &#39;时刻&#39;, &#39;谜语&#39;, &#39;小童&#39;, &#39;蛋壳&#39;, &#39;神智&#39;, &#39;外孙&#39;, &#39;十二岁&#39;, &#39;序号&#39;, &#39;砍伐&#39;, &#39;之下&#39;, &#39;元年&#39;, &#39;孙女&#39;, &#39;寻找&#39;, &#39;人形&#39;, &#39;眷属&#39;, &#39;白日&#39;, &#39;十二个&#39;, &#39;之神&#39;, &#39;六十&#39;, &#39;方圆&#39;, &#39;长成&#39;, &#39;筛选&#39;, &#39;第一次&#39;, &#39;洞窟&#39;, &#39;畜牧&#39;, &#39;移植&#39;, &#39;意义&#39;, &#39;亲近&#39;, &#39;祈祷&#39;, &#39;永恒&#39;, &#39;此书&#39;, &#39;宫里&#39;, &#39;莲花&#39;, &#39;拥有&#39;, &#39;树枝&#39;, &#39;三角&#39;, &#39;智力&#39;, &#39;落入&#39;, &#39;土地&#39;, &#39;课题&#39;, &#39;国土&#39;, &#39;称呼&#39;, &#39;子孙&#39;, &#39;这片&#39;, &#39;珊瑚&#39;, &#39;光明&#39;, &#39;请问&#39;, &#39;打败&#39;, &#39;漫长&#39;, &#39;大战&#39;, &#39;后代&#39;, &#39;宇宙&#39;, &#39;开门&#39;, &#39;描绘&#39;, &#39;收获&#39;, &#39;暴露&#39;, &#39;尝试&#39;, &#39;展示&#39;, &#39;执政&#39;, &#39;见过&#39;, &#39;姓名&#39;, &#39;诞生&#39;, &#39;改称&#39;, &#39;只不过&#39;, &#39;百千&#39;, &#39;寻回&#39;, &#39;勘校&#39;, &#39;无翼鸟&#39;, &#39;波西&#39;, &#39;修建&#39;, &#39;忘记&#39;, &#39;之地&#39;, &#39;交流&#39;, &#39;特性&#39;, &#39;一群&#39;, &#39;取材自&#39;, &#39;肆意妄为&#39;, &#39;安贞&#39;, &#39;得以&#39;, &#39;变动&#39;, &#39;遭遇&#39;, &#39;迷狂&#39;, &#39;艾普&#39;, &#39;对照组&#39;, &#39;摔断了腿&#39;, &#39;微风吹拂&#39;, &#39;阿斯克&#39;, &#39;秘密&#39;, &#39;势力&#39;, &#39;食物&#39;, &#39;习惯&#39;, &#39;雕梁&#39;, &#39;类图书&#39;, &#39;爱多&#39;, &#39;俯首称臣&#39;, &#39;御园&#39;, &#39;御使&#39;, &#39;掘出来&#39;, &#39;四百余年&#39;, &#39;塔斯&#39;, &#39;违逆&#39;, &#39;依序&#39;, &#39;住民&#39;, &#39;异常&#39;, &#39;神尚&#39;, &#39;有鸣&#39;, &#39;神岛&#39;, &#39;鸣神&#39;, &#39;五圣隐&#39;, &#39;初代&#39;, &#39;宣他&#39;, &#39;被常世&#39;, &#39;之子们&#39;, &#39;原如鸡&#39;, &#39;宫才&#39;, &#39;那龙嗣&#39;, &#39;如草&#39;, &#39;相抗&#39;, &#39;选立&#39;, &#39;赌约&#39;, &#39;庞巨&#39;, &#39;之感身&#39;, &#39;之众&#39;, &#39;此界&#39;, &#39;虽非&#39;, &#39;我民&#39;, &#39;终人子&#39;, &#39;有何&#39;, &#39;之民一蛇&#39;, &#39;侵攻&#39;, &#39;真王&#39;, &#39;它生&#39;, &#39;衔枝后&#39;, &#39;天地创造&#39;, &#39;从者&#39;, &#39;自此时起&#39;, &#39;贵金&#39;, &#39;高天&#39;, &#39;火之年&#39;, &#39;再开&#39;, &#39;海渊之民&#39;, &#39;千灯&#39;, &#39;逐入&#39;, &#39;为食&#39;, &#39;无时不刻&#39;, &#39;千风&#39;, &#39;我仅&#39;, &#39;目盲&#39;, &#39;俄斯目&#39;, &#39;新修&#39;, &#39;折下灵&#39;, &#39;一念则&#39;, &#39;千劫&#39;, &#39;新树&#39;, &#39;记写&#39;, &#39;我于&#39;, &#39;所过&#39;, &#39;天中&#39;, &#39;因海&#39;, &#39;之民&#39;, &#39;水之事&#39;, &#39;千风时&#39;, &#39;之千风&#39;, &#39;蜥界&#39;, &#39;阳炎&#39;, &#39;兴动&#39;, &#39;为标&#39;, &#39;国将&#39;, &#39;秘法&#39;, &#39;蛇心&#39;, &#39;古早&#39;, &#39;无鳞蛇&#39;, &#39;吕羽氏&#39;, &#39;伽玛&#39;, &#39;西隆&#39;, &#39;古海语&#39;, &#39;注经&#39;, &#39;应写&#39;, &#39;内之号&#39;, &#39;之古&#39;, &#39;宫名&#39;, &#39;神稻&#39;, &#39;妻式&#39;, &#39;水卷&#39;, &#39;高体&#39;, &#39;多眠&#39;, &#39;而龙&#39;, &#39;军械库&#39;])\n\n\n浮槃歌卷D:\\coder\\randomnumbers\\venv\\Scripts\\python.exe D:&#x2F;coder&#x2F;randomnumbers&#x2F;Keywords_cloud&#x2F;wordCloud.py\nBuilding prefix dict from the default dictionary ...\nLoading model from cache C:\\Users\\83854\\AppData\\Local\\Temp\\jieba.cache\nLoading model cost 0.476 seconds.\nPrefix dict has been built successfully.\ndict_keys([&#39;王女&#39;, &#39;女主人&#39;, &#39;谜题&#39;, &#39;君王&#39;, &#39;备注&#39;, &#39;彻知&#39;, &#39;缺词&#39;, &#39;智慧&#39;, &#39;回答&#39;, &#39;因论&#39;, &#39;自砂海&#39;, &#39;耽院诃般&#39;, &#39;法佐莉&#39;, &#39;教令&#39;, &#39;永恒&#39;, &#39;学者&#39;, &#39;残卷&#39;, &#39;挖掘出&#39;, &#39;万国&#39;, &#39;不差毫厘&#39;, &#39;无人&#39;, &#39;姣美&#39;, &#39;目睹&#39;, &#39;大宫&#39;, &#39;无从&#39;, &#39;确是&#39;, &#39;世间&#39;, &#39;室罗婆&#39;, &#39;本卷&#39;, &#39;护末&#39;, &#39;那院&#39;, &#39;伐护末&#39;, &#39;院诃般&#39;, &#39;亚莎&#39;, &#39;有翼者&#39;, &#39;高天&#39;, &#39;第一个&#39;, &#39;作者&#39;, &#39;摧垮&#39;, &#39;无穷尽&#39;, &#39;缺漏&#39;, &#39;遗迹&#39;, &#39;特尔&#39;, &#39;原初&#39;, &#39;第二个&#39;, &#39;屈服于&#39;, &#39;永世&#39;, &#39;身份&#39;, &#39;赞颂&#39;, &#39;译作&#39;, &#39;容颜&#39;, &#39;其下&#39;, &#39;星辰&#39;, &#39;仁慈&#39;, &#39;蔷薇&#39;, &#39;判断&#39;, &#39;深渊&#39;, &#39;地上&#39;, &#39;古代&#39;, &#39;依然&#39;, &#39;丝绸&#39;, &#39;香料&#39;, &#39;女王&#39;, &#39;宝石&#39;, &#39;统领&#39;, &#39;推测&#39;, &#39;抵御&#39;, &#39;翻译&#39;, &#39;纡尊降贵&#39;, &#39;无数&#39;, &#39;开口&#39;, &#39;晨露&#39;, &#39;知识&#39;, &#39;思恋&#39;, &#39;答出&#39;, &#39;红冠&#39;, &#39;语言&#39;, &#39;指代&#39;, &#39;倾尽全力&#39;, &#39;怨怒&#39;, &#39;暂时&#39;, &#39;首句&#39;, &#39;死而复生&#39;, &#39;波梨&#39;, &#39;袈国&#39;, &#39;吏兵&#39;, &#39;辉烁&#39;, &#39;细麻&#39;, &#39;昼星&#39;, &#39;装缀&#39;, &#39;节末句&#39;, &#39;与璃&#39;, &#39;神临&#39;, &#39;晨霜室&#39;, &#39;罗婆&#39;, &#39;塔法佐莉&#39;, &#39;造于&#39;, &#39;颂唱&#39;, &#39;你作&#39;, &#39;地向&#39;, &#39;易逝&#39;, &#39;满是&#39;, &#39;芯髓&#39;, &#39;其上&#39;, &#39;穹灵&#39;, &#39;逐诈&#39;, &#39;智差&#39;, &#39;之术&#39;, &#39;仿拓&#39;, &#39;劫灭&#39;, &#39;全知&#39;, &#39;敏黠&#39;, &#39;之物&#39;, &#39;荧华彻&#39;, &#39;不毁&#39;, &#39;原卷&#39;, &#39;残文&#39;, &#39;一人名&#39;, &#39;答过&#39;, &#39;缔下&#39;, &#39;考研&#39;, &#39;瞩望&#39;, &#39;晚春&#39;, &#39;第三句&#39;, &#39;第四句&#39;, &#39;身边&#39;, &#39;主宰者&#39;, &#39;死物&#39;, &#39;负责&#39;, &#39;虚像&#39;, &#39;冷意&#39;, &#39;谢礼&#39;, &#39;黄金&#39;, &#39;雅丽&#39;, &#39;墓园&#39;, &#39;醇香&#39;, &#39;必将会&#39;, &#39;明晨&#39;, &#39;花茎&#39;, &#39;第二句&#39;, &#39;迷醉&#39;, &#39;填入&#39;, &#39;树荫下&#39;, &#39;和煦&#39;, &#39;沙尘&#39;, &#39;拥有者&#39;, &#39;芳菲&#39;, &#39;倾慕&#39;, &#39;五体投地&#39;, &#39;心中&#39;, &#39;毫无保留&#39;, &#39;难住&#39;, &#39;子民&#39;, &#39;宛若&#39;, &#39;邪魔&#39;, &#39;萦绕&#39;, &#39;三个&#39;, &#39;非常感谢&#39;, &#39;搞不清楚&#39;, &#39;千万年&#39;, &#39;欢欣&#39;, &#39;重生&#39;, &#39;碎银&#39;, &#39;正法&#39;, &#39;问出&#39;, &#39;念诵&#39;, &#39;谜语&#39;, &#39;古往今来&#39;, &#39;尊奉&#39;, &#39;暖风&#39;, &#39;正理&#39;, &#39;降下&#39;, &#39;如故&#39;, &#39;箭矢&#39;, &#39;赠与&#39;, &#39;仆从&#39;, &#39;篱笆&#39;, &#39;枯萎&#39;, &#39;难解&#39;, &#39;立定&#39;, &#39;万象&#39;, &#39;盟约&#39;, &#39;秀美&#39;, &#39;妥善处理&#39;, &#39;从天而降&#39;, &#39;竟能&#39;, &#39;破除&#39;, &#39;悉心&#39;, &#39;散佚&#39;, &#39;自始至终&#39;, &#39;升天&#39;, &#39;俯伏&#39;, &#39;创造者&#39;, &#39;荆棘&#39;, &#39;聆听&#39;, &#39;从未见过&#39;, &#39;胆敢&#39;, &#39;铸成&#39;, &#39;微光&#39;, &#39;相仿&#39;, &#39;诸神&#39;, &#39;第一句&#39;, &#39;赞许&#39;, &#39;万千&#39;, &#39;割断&#39;, &#39;消逝&#39;, &#39;稍作&#39;, &#39;听过&#39;, &#39;油灯&#39;, &#39;教诲&#39;, &#39;溪流&#39;, &#39;词语&#39;, &#39;精灵&#39;, &#39;可否&#39;, &#39;美貌&#39;, &#39;何曾&#39;, &#39;称得上&#39;, &#39;盔甲&#39;, &#39;胜过&#39;, &#39;混淆&#39;, &#39;眷属&#39;, &#39;自上而下&#39;, &#39;卷起&#39;, &#39;迷茫&#39;, &#39;译本&#39;, &#39;话语&#39;, &#39;陪伴&#39;, &#39;俯身&#39;, &#39;同心&#39;, &#39;摘下&#39;, &#39;统辖&#39;, &#39;自下而上&#39;, &#39;奥秘&#39;, &#39;须臾&#39;, &#39;甜蜜&#39;, &#39;不动声色&#39;, &#39;一缕&#39;, &#39;困惑&#39;, &#39;情人&#39;, &#39;织物&#39;, &#39;侍女&#39;, &#39;捍卫&#39;, &#39;簇拥&#39;, &#39;芳香&#39;, &#39;遗体&#39;, &#39;禁忌&#39;, &#39;传授&#39;, &#39;远方&#39;, &#39;身着&#39;, &#39;迈出&#39;, &#39;冰冷&#39;, &#39;闪烁&#39;, &#39;花朵&#39;, &#39;真诚&#39;, &#39;佩服&#39;, &#39;绕过&#39;, &#39;不惜&#39;, &#39;解开&#39;, &#39;毁灭&#39;, &#39;臣民&#39;, &#39;幸运&#39;, &#39;疑虑&#39;, &#39;坚实&#39;, &#39;使者&#39;, &#39;自此&#39;, &#39;提及&#39;, &#39;神圣&#39;, &#39;第三个&#39;, &#39;行礼&#39;, &#39;月光&#39;, &#39;掌管&#39;, &#39;身旁&#39;, &#39;农田&#39;, &#39;城邦&#39;, &#39;不由&#39;, &#39;撰写&#39;, &#39;痕迹&#39;, &#39;书籍&#39;, &#39;鲜血&#39;, &#39;大师&#39;, &#39;特产&#39;, &#39;引领&#39;, &#39;月亮&#39;, &#39;本书&#39;, &#39;意图&#39;, &#39;遗憾&#39;, &#39;宫殿&#39;, &#39;七月&#39;, &#39;二位&#39;, &#39;含义&#39;, &#39;死去&#39;, &#39;眼中&#39;, &#39;脚下&#39;, &#39;世上&#39;, &#39;我会&#39;, &#39;乃是&#39;, &#39;花园&#39;, &#39;暗暗&#39;, &#39;所致&#39;, &#39;活着&#39;])\n\n\n阿赫玛尔的故事\nD:\\coder\\randomnumbers\\venv\\Scripts\\python.exe D:/coder/randomnumbers/Keywords_cloud/wordCloud.pyBuilding prefix dict from the default dictionary …Loading model from cache C:\\Users\\83854\\AppData\\Local\\Temp\\jieba.cacheLoading model cost 0.474 seconds.Prefix dict has been built successfully.dict_keys([‘阿赫玛’, ‘智慧’, ‘镇灵’, ‘贤者’, ‘住民’, ‘之王’, ‘沙丘’, ‘蒙昧’, ‘七重’, ‘吾王’, ‘沙漠’, ‘陛下’, ‘大地’, ‘镀金’, ‘君王’, ‘知识’, ‘永远’, ‘部族’, ‘怎能’, ‘尔以’, ‘四方’, ‘蛇行’, ‘佞臣’, ‘子民’, ‘天空’, ‘九重’, ‘千百万’, ‘千百年’, ‘魂灵’, ‘智者’, ‘进言’, ‘迷宫’, ‘生命’, ‘灾祸’, ‘呼啸’, ‘禁忌’, ‘玫瑰’, ‘绿洲’, ‘一千’, ‘预料’, ‘百年’, ‘终究’, ‘惩罚’, ‘统帅’, ‘震动’, ‘一手’, ‘深处’, ‘沉默’, ‘一夜’, ‘建立’, ‘历史’, ‘无数’, ‘园艺师’, ‘恶徒’, ‘镀成’, ‘谈情’, ‘诸元素’, ‘御者’, ‘魔神’, ‘雕梁’, ‘书记’, ‘权力’, ‘力能’, ‘狂想’, ‘智识’, ‘引路人’, ‘神王’, ‘制御’, ‘夜梦’, ‘三大’, ‘鸣泣’, ‘尽享’, ‘勇壮’, ‘同猛狮’, ‘如众贤’, ‘至贤’, ‘搏龙’, ‘食尸’, ‘全失’, ‘镇灵能’, ‘长歌’, ‘起于’, ‘咒诅’, ‘王众’, ‘乞谅’, ‘应知’, ‘溺于’, ‘旧梦’, ‘醉于’, ‘哀想’, ‘足使’, ‘以应’, ‘羊之王’, ‘天罚’, ‘尽藏’, ‘才行’, ‘顿地’, ‘之主生者’, ‘迎回’, ‘深黑’, ‘凡躯’, ‘狂沙’, ‘抽离’, ‘所噬’, ‘同王’, ‘盘廊’, ‘巨墙’, ‘其上’, ‘狮鹫’, ‘于己’, ‘愚行’, ‘旅团’, ‘众砾’, ‘如铁’, ‘将振帆’, ‘漫卷’, ‘九重天’, ‘融成’, ‘愚者’, ‘歌者’, ‘王土’, ‘夜莺’, ‘妙药’, ‘孤零’, ‘呓语’, ‘弃绝’, ‘沙海’, ‘比斯’, ‘垮塌’, ‘亡者’, ‘傲视’, ‘折腰’, ‘念旧’, ‘劝诫’, ‘王座’, ‘遗落’, ‘赫尔曼’, ‘骨殖’, ‘唤回’, ‘去往’, ‘天穹’, ‘专断’, ‘贵为’, ‘长久之计’, ‘迷途’, ‘高踞’, ‘查考’, ‘巨虫’, ‘难以捉摸’, ‘子嗣’, ‘骨血’, ‘懦夫’, ‘谄媚’, ‘蹙眉’, ‘倒伏’, ‘飘忽’, ‘困于’, ‘祸患’, ‘辈出’, ‘横冲直撞’, ‘某位’, ‘预知’, ‘手杖’, ‘公牛’, ‘谗言’, ‘亵渎’, ‘无边无际’, ‘哀悼’, ‘国度’, ‘沙暴’, ‘虚空’, ‘宫阙’, ‘横渡’, ‘圆柱’, ‘仰视’, ‘逝去’, ‘无底’, ‘芬芳’, ‘无穷无尽’, ‘悔恨’, ‘回首’, ‘永生’, ‘终极’, ‘迷失’, ‘未来’, ‘相聚’, ‘霸占’, ‘年岁’, ‘化作’, ‘藏身’, ‘安乐’, ‘今人’, ‘终是’, ‘献上’, ‘报应’, ‘门洞’, ‘妄图’, ‘回廊’, ‘幸存’, ‘妄想’, ‘唤醒’, ‘宫城’, ‘凡人’, ‘听信’, ‘征服者’, ‘责怪’, ‘无忧’, ‘荣耀’, ‘阶梯’, ‘掩埋’, ‘惩治’, ‘遗忘’, ‘受惠’, ‘远古’, ‘忧伤’, ‘复活’, ‘话语’, ‘末日’, ‘散落’, ‘一夜之间’, ‘勇士’, ‘流浪’, ‘世界’, ‘席卷’, ‘堕落’, ‘真实性’, ‘计策’, ‘肉体’, ‘尖叫’, ‘高贵’, ‘逃离’, ‘哑巴’, ‘夺回’, ‘典籍’, ‘深渊’, ‘头颅’, ‘每到’, ‘狂风’, ‘乐园’, ‘良机’, ‘忧郁’, ‘盲人’, ‘腐朽’, ‘之主’, ‘埋葬’, ‘不死’, ‘发抖’, ‘荒唐’, ‘以求’, ‘悲伤’, ‘神灵’, ‘怀抱’, ‘倾听’, ‘罪恶’, ‘直言’, ‘武士’, ‘不论是’, ‘无情’, ‘掩饰’, ‘空虚’, ‘宝石’, ‘讲述’, ‘情愿’, ‘时光’, ‘毁灭’, ‘永久’, ‘预言’, ‘使者’, ‘千年’, ‘之子’, ‘多有’, ‘帝王’, ‘月光’, ‘少女’, ‘梦想’, ‘深受’, ‘徘徊’, ‘崇拜’, ‘弥补’, ‘只顾’, ‘同一个’, ‘叹息’, ‘念头’, ‘来临’, ‘权威’, ‘一体’, ‘后代’, ‘恐惧’, ‘曲折’, ‘信仰’, ‘天上’, ‘少年’, ‘寻求’, ‘超越’, ‘之人’, ‘知名’, ‘首领’, ‘王国’, ‘理性’, ‘黑暗’])\n\n知乎回答：你认为《三体》中最震撼的一句话是什么？\n\n\n\n\n\n\n\n\nD:\\coder\\randomnumbers\\venv\\Scripts\\python.exe D:/coder/randomnumbers/Keywords_cloud/wordCloud.pyBuilding prefix dict from the default dictionary …Loading model from cache C:\\Users\\83854\\AppData\\Local\\Temp\\jieba.cacheLoading model cost 0.479 seconds.Prefix dict has been built successfully.dict_keys([‘魔戒’, ‘万有引力’, ‘墓地’, ‘罗辑’, ‘人类’, ‘三体’, ‘丁仪’, ‘白艾思’, ‘宇宙’, ‘地球’, ‘智子’, ‘黑暗’, ‘五十四年’, ‘恩斯’, ‘水洼’, ‘太空’, ‘森林’, ‘面壁’, ‘太阳’, ‘落下去’, ‘钢印’, ‘女孩’, ‘远处’, ‘飞船’, ‘建造’, ‘回答’, ‘孩子’, ‘核弹’, ‘相聚’, ‘思想’, ‘耐德’, ‘忏悔’, ‘物理’, ‘一束’, ‘惠子’, ‘世界’, ‘害怕’, ‘呼叫’, ‘一切都是’, ‘降临’, ‘十几代’, ‘四维空间’, ‘规律’, ‘北海’, ‘里教’, ‘史强’, ‘叶文洁’, ‘海干’, ‘低维’, ‘程心’, ‘飞机’, ‘高维’, ‘外星’, ‘这片’, ‘所有人’, ‘舰队’, ‘或者说’, ‘上帝’, ‘肯定’, ‘漫长’, ‘眼中’, ‘警告’, ‘物理学’, ‘不到’, ‘东方人’, ‘沙漠’, ‘经济学’, ‘沙漠化’, ‘两个’, ‘安全带’, ‘城府’, ‘飞越’, ‘晚霞’, ‘再也’, ‘十分钟’, ‘青铜时代’, ‘人类文明’, ‘生命’, ‘邪恶’, ‘加速器’, ‘徐徐’, ‘战舰’, ‘假象’, ‘样儿’, ‘夕阳’, ‘深渊’, ‘感觉’, ‘引擎’, ‘离开’, ‘西洋’, ‘三条’, ‘声音’, ‘空间’, ‘惩罚’, ‘审判’, ‘沙发’, ‘子孙’, ‘统帅’, ‘以色列’, ‘蓝色’, ‘震动’, ‘感谢’, ‘愿望’, ‘陆地’, ‘恐惧’, ‘军人’, ‘笑容’, ‘安慰’, ‘不该’, ‘聚集’, ‘未来’, ‘世纪’, ‘引水员’, ‘拉菲尔’, ‘预测出’, ‘供应线’, ‘干什么’, ‘想象’, ‘这场’, ‘文明’, ‘男孩儿’, ‘冤冤相报’, ‘兴奋’, ‘一遍’, ‘露出’, ‘办公室’, ‘正确’, ‘这话’, ‘明天’, ‘攻击’, ‘目光’, ‘失败主义’, ‘消失’, ‘两次’, ‘承认’, ‘同志’, ‘现实’, ‘关键’, ‘时间’, ‘苦短’, ‘投进来’, ‘和平主义者’, ‘展开’, ‘richtext’, ‘星河’, ‘铅色’, ‘中隐入’, ‘之穹’, ‘阴着’, ‘脸装’, ‘俗里’, ‘没个’, ‘你碍’, ‘味来’, ‘总沾着’, ‘向大史’, ‘光中’, ‘大史’, ‘这枚’, ‘汪淼大史’, ‘过妈’, ‘随船’, ‘八十二’, ‘常伟思’, ‘常伟思太多’, ‘外太空’, ‘汪淼’, ‘抬眼’, ‘两色’, ‘海是’, ‘海弄’, ‘海弄海’, ‘干前’, ‘同维’, ‘有鱼’, ‘系好’, ‘有窗’, ‘面墙’, ‘俩系’, ‘当罗辑’, ‘吴岳’, ‘19’, ‘张援’, ‘朝候’, ‘产室’, ‘30’, ‘10000’, ‘汇在’, ‘滔天罪行’, ‘请主来’, ‘执剑’, ‘守护人’, ‘交接仪式’, ‘血雾’, ‘地喊出’, ‘647’, ‘白艾’, ‘没人动’, ‘杨冬’, ‘空是’, ‘用空’, ‘升三体’, ‘以爱’, ‘没人能’, ‘事上’, ‘对山杉’, ‘我用’, ‘还会升’, ‘类似’, ‘地面’, ‘血与火’, ‘国际法庭’, ‘挖墓’, ‘之外’, ‘极端分子’, ‘自虐’, ‘光灿灿’, ‘指甲油’, ‘几十亿年’, ‘刚刚’, ‘主席’, ‘古筝’, ‘信息内容’, ‘大学’, ‘第一次’, ‘悸动’, ‘和平相处’, ‘怒视’, ‘很快’, ‘维德’, ‘计算’, ‘状态’, ‘一阵’, ‘媚眼’, ‘舷窗’, ‘执行’, ‘力量’, ‘血光’, ‘唯利是图’, ‘悠着点’, ‘猛跳’, ‘巴勒斯坦人’, ‘面前’, ‘一千八百’, ‘梦呓’, ‘越陷越深’, ‘女性化’, ‘咧嘴一笑’, ‘第三十二章’, ‘看着’, ‘连山’, ‘感到遗憾’, ‘照进’, ‘长路’, ‘瞎猜’, ‘永恒不变’, ‘不可理喻’, ‘恺撒’, ‘怪怪的’, ‘扫把’, ‘可有可无’, ‘七八米’, ‘无神论者’, ‘于海洋’, ‘有生之年’, ‘夕照’, ‘捐给’, ‘计算出来’, ‘俗气’, ‘电筒’, ‘维度’, ‘初始条件’, ‘老谋深算’, ‘拘押’, ‘返航’, ‘精神力量’, ‘婆婆妈妈’, ‘决定论’, ‘玩世不恭’, ‘眼睛’, ‘神采飞扬’, ‘画儿’, ‘开时’, ‘炸得’, ‘陷进’, ‘最终目标’, ‘弧度’, ‘文明史’, ‘超重’, ‘犯有’, ‘指战员’, ‘付出代价’, ‘这一’, ‘血肉模糊’, ‘半世纪’, ‘大大咧咧’, ‘起爆’, ‘计划’, ‘有件事’, ‘待发’])\n\nbilibili财报\n\n\n\n\n\n\n\n\nD:\\coder\\randomnumbers\\venv\\Scripts\\python.exe D:/coder/randomnumbers/Keywords_cloud/wordCloud.pyBuilding prefix dict from the default dictionary …Loading model from cache C:\\Users\\83854\\AppData\\Local\\Temp\\jieba.cacheLoading model cost 0.534 seconds.Prefix dict has been built successfully.dict_keys([‘嗶哩’, ‘開支’, ‘百萬’, ‘百萬元’, ‘準則’, ‘2021’, ‘總額’, ‘我們’, ‘虧損’, ‘用戶’, ‘認會計’, ‘指標’, ‘非公’, ‘美元’, ‘經營’, ‘回購’, ‘資產’, ‘財務’, ‘美國存’, ‘轉換’, ‘同期’, ‘每股’, ‘2022’, ‘負債’, ‘無形’, ‘相關’, ‘電話’, ‘公司’, ‘增加’, ‘股權’, ‘通過’, ‘則為’, ‘淨額’, ‘收購’, ‘獲得’, ‘資料’, ‘股數’, ‘355351263391248558393538141’, ‘股份’, ‘未經’, ‘優先票’, ‘服務’, ‘激勵’, ‘投資’, ‘會議’, ‘匯率’, ‘有限公司’, ‘中國’, ‘202231’, ‘付費’, ‘廣告’, ‘股東’, ‘營業額’, ‘銷售’, ‘營業’, ‘費用’, ‘經調’, ‘業務’, ‘經調整’, ‘現金’, ‘有關’, ‘業績’, ‘數據’, ‘成本’, ‘第一季度’, ‘前瞻性’, ‘未來’, ‘價值’, ‘遊戲’, ‘電商’, ‘營銷’, ‘及攤’, ‘計劃’, ‘會計’, ‘美國’, ‘流動’, ‘狀況’, ‘金額’, ‘所得’, ‘所致’, ‘收益’, ‘日期’, ‘審計’, ‘淨營業額’, ‘新冠’, ‘市場’, ‘影響’, ‘億元’, ‘移動’, ‘研發’, ‘損為’, ‘變動’, ‘美國公’, ‘單位’, ‘淨虧損’, ‘2.545’, ‘345.80’, ‘損攤’, ‘加權’, ‘股加權’, ‘攤薄’, ‘非流動’, ‘權益’, ‘2.504’, ‘224.20’, ‘平均’, ‘增值’, ‘公告’, ‘香港’, ‘和服’, ‘疫情’, ‘展望’, ‘行政’, ‘公允’, ‘千元’, ‘財務業績’, ‘標誌’, ‘社區’, ‘30%’, ‘商業化’, ‘發展’, ‘產品’, ‘同時’, ‘淨虧’, ‘整淨’, ‘價物’, ‘建議’, ‘預計’, ‘進行’, ‘估計’, ‘消費’, ‘調整’, ‘所載’, ‘公認’, ‘審計調’, ‘節表’, ‘活動’, ‘編號’, ‘網上’, ‘投資者’, ‘作為’, ‘視頻’, ‘評估’, ‘證券’, ‘電郵’, ‘止三個’, ‘20212021202231123131’, ‘股東淨’, ‘214395307470277862’, ‘應付’, ‘普通股’, ‘收入’, ‘品牌’, ‘能力’, ‘包括’, ‘定期存款’, ‘提供’, ‘管理’, ‘付款’, ‘毛利’, ‘同比增加’, ‘重播’, ‘平台’, ‘領先視頻’, ‘日止’, ‘054.1’, ‘797.3’, ‘33%’, ‘日活’, ‘創下’, ‘經濟’, ‘減少’, ‘16%’, ‘費用戶’, ‘數量’, ‘萬元’, ‘支為’, ‘攤銷開’, ‘支通’, ‘過業務’, ‘薄虧’, ‘薄淨虧’, ‘現金及’, ‘一項’, ‘萬股’, ‘聯交所’, ‘申請’, ‘現時’, ‘確定’, ‘整淨虧’, ‘損經’, ‘參閱’, ‘結尾’, ‘八時’, ‘電話會’, ‘httpirbilibilicom’, ‘中國年’, ‘輕人’, ‘決策’, ‘認為’, ‘識別’, ‘經營業績’, ‘整體’, ‘考慮’, ‘根據’, ‘委員會’, ‘報告’, ‘書面’, ‘娛樂’, ‘行業’, ‘bilibilitpgircom’, ‘簡明合’, ‘904859095767284132’, ‘少數’, ‘歸屬’, ‘903555088014281982’, ‘股淨’, ‘股淨虧’, ‘賬款’, ‘攤銷’, ‘261453322756997’, ‘514514981’, ‘22518796771641114’, ‘338779’, ‘生效’, ‘短期’, ‘提交’, ‘流量’, ‘上市公司’, ‘首席’, ‘因素’, ‘港交所’, ‘有助’, ‘有所提高’, ‘直播’, ‘列表’, ‘提升’, ‘日均’, ‘文化’, ‘月均’, ‘一代’, ‘董事’, ‘私人’, ‘特定’, ‘收到’, ‘比增’, ‘初步’, ‘新高’, ‘月票’, ‘一步’, ‘納斯達克代’, ‘BILI’, ‘代號’, ‘9626’, ‘活躍’, ‘293.6’, ‘百萬移’, ‘動端’, ‘戶達’, ‘276.4’, ‘分別’, ‘31%’, ‘活躍用’, ‘79.4’, ‘32%’, ‘27.2’, ‘面對’, ‘發和靜態’, ‘全國範圍’, ‘面臨’, ‘總部’, ‘期間’, ‘超過’, ‘000’, ‘名員工’, ‘辦公’, ‘任務確’, ‘保員’, ‘工維持’, ‘業務運營’, ‘執行面’, ‘這些’, ‘挑戰’, ‘活用戶’, ‘穩健’, ‘增長’, ‘活躍度’, ‘單個’, ‘時長’, ‘顯著’, ‘95’, ‘分鐘’, ‘此同’, ‘堅定’, ‘份額’, ‘縱觀’, ‘及收’, ‘緊費用’, ‘宏觀’, ‘壓力’])\n\n美团火锅\n\n\n\n\n\n\n\n\nD:\\coder\\randomnumbers\\venv\\Scripts\\python.exe D:/coder/randomnumbers/Keywords_cloud/wordCloud.pyBuilding prefix dict from the default dictionary …Loading model from cache C:\\Users\\83854\\AppData\\Local\\Temp\\jieba.cacheLoading model cost 0.508 seconds.Prefix dict has been built successfully.dict_keys([‘火锅’, ‘评论’, ‘重庆火锅’, ‘四川火锅’, ‘潮汕’, ‘牛肉’, ‘串串’, ‘大斌家’, ‘自助’, ‘牛羊肉’, ‘羊肉’, ‘长沙’, ‘广场’, ‘步行街’, ‘万家’, ‘涮羊肉’, ‘五一广场’, ‘河西’, ‘地摊’, ‘宁乡’, ‘步步高’, ‘串串香’, ‘城店’, ‘胡记’, ‘北京’, ‘大学城’, ‘溪湖’, ‘毛肚’, ‘黄兴路’, ‘七七’, ‘星沙’, ‘重庆’, ‘含浦’, ‘现切’, ‘涉外经济’, ‘小火锅’, ‘技术开发区’, ‘海底’, ‘雨花’, ‘特色’, ‘德思勤’, ‘银盆岭’, ‘沙岭’, ‘望城’, ‘学院’, ‘德庄’, ‘梅溪’, ‘湘江’, ‘国际’, ‘市井’, ‘新天地’, ‘天虹’, ‘川味’, ‘丽店’, ‘茶子山’, ‘洋湖’, ‘小龙’, ‘月亮’, ‘四方’, ‘喜盈门’, ‘南路’, ‘羊蝎子’, ‘一桥’, ‘星城’, ‘达美’, ‘新城’, ‘西站’, ‘烧烤’, ‘正荣’, ‘汇店’, ‘火锅店’, ‘北路’, ‘天街’, ‘桐梓’, ‘黄兴’, ‘德思勤店’, ‘吾悦店’, ‘泉塘’, ‘星沙店’, ‘新开铺’, ‘猪肚’, ‘中心店’, ‘芙蓉’, ‘解放’, ‘草本’, ‘世纪’, ‘西路’, ‘王府井’, ‘云塘’, ‘中茂城店’, ‘九记’, ‘路店’, ‘边炉’, ‘汤锅’, ‘牛腩’, ‘运达’, ‘涉外’, ‘新村’, ‘老九’, ‘沿线’, ‘环宇’, ‘友阿奥’, ‘锅圈’, ‘食汇’, ‘食材’, ‘总店’, ‘生鲜’, ‘高铁’, ‘浏阳’, ‘特莱斯’, ‘科技园’, ‘经济’, ‘杨家山’, ‘红星’, ‘汽车’, ‘城区’, ‘城市’, ‘荟聚店’, ‘犊门’, ‘袁家岭’, ‘大斌府’, ‘阿杜打’, ‘咸嘉’, ‘榔梨镇’, ‘五江’, ‘坡子’, ‘阳光’, ‘月湖’, ‘万象’, ‘医学院’, ‘海鲜’, ‘会展中心’, ‘凯德’, ‘喜乐’, ‘商学院’, ‘公园’, ‘柴火’, ‘理工’, ‘体育’, ‘铜锅’, ‘韩国菜’, ‘北辰’, ‘烤肉’, ‘东塘’, ‘旗舰店’, ‘亭店’, ‘桂花路’, ‘王记’, ‘鲜羊里’, ‘岳麓区’, ‘粤旺’, ‘栋烂’, ‘含浦店’, ‘首店’, ‘咸嘉湖’, ‘知味居’, ‘砂之船’, ‘大众传媒’, ‘侯家塘’, ‘罗家’, ‘超市’, ‘环保’, ‘科大’, ‘阿布杜’, ‘小区’, ‘五一’, ‘树木’, ‘大牛’, ‘财富’, ‘大侠’, ‘直营店’, ‘火车站’, ‘德政’, ‘武广’, ‘中心’, ‘二十九’, ‘清泉’, ‘一环’, ‘黄土岭’, ‘大道’, ‘奥克斯’, ‘大排档’, ‘华润’, ‘洋湖店’, ‘季季’, ‘老颜头’, ‘暮云’, ‘湖店’, ‘辣度’, ‘街店’, ‘淮川’, ‘美来’, ‘荟店’, ‘顶福胜’, ‘开福区’, ‘董记’, ‘三汁’, ‘开福寺’, ‘美蛙’, ‘复地’, ‘谭鸭血’, ‘爱涮’, ‘原切’, ‘庖丁’, ‘山店’, ‘阿华’, ‘泉塘店’, ‘MeetSun’, ‘韩式’, ‘懒汉’, ‘湾子’, ‘大学’, ‘南站’, ‘螺蛳’, ‘花城’, ‘店铺’, ‘中路’, ‘新疆’, ‘小羊’, ‘大虾’, ‘潭州’, ‘农业大学’, ‘鸡窝’, ‘龙华’, ‘砂锅’, ‘老四’, ‘老友’, ‘分店’, ‘大王’, ‘大福’, ‘天马’, ‘山镇’, ‘贺龙’, ‘万国’, ‘黄花’, ‘富兴’, ‘龙湖’, ‘小牛’, ‘铁道’, ‘中南大学’, ‘浪琴’, ‘金霞’, ‘港式’, ‘永安’, ‘中南’, ‘星光’, ‘莱茵’, ‘湘雅’, ‘朝阳路’, ‘一号’, ‘珠江’, ‘门口’, ‘中海’, ‘保利’, ‘黑山羊’, ‘书院’, ‘三角洲’, ‘鲜牛’, ‘正荣店’, ‘黄花镇’, ‘老佰老’, ‘潮正’, ‘理涛’, ‘龙炎阁’, ‘袁记’, ‘川锅’, ‘马栏’, ‘岛店’, ‘附一’, ‘丽发’, ‘美店’, ‘黄小椒’, ‘奥莱店’, ‘达美店’, ‘京贵楼’, ‘西店’, ‘伍家岭’, ‘傣妹’, ‘善弟’, ‘合牛记’, ‘福盛小鲜’, ‘园店’, ‘山语’, ‘鲜切’, ‘钰樽楼’, ‘太平街’, ‘洪西店’, ‘肆匠’, ‘开福’, ‘驴庄’, ‘涂家’, ‘冲店’, ‘浦沅’, ‘悦方’, ‘潮上’, ‘顺老’, ‘赵火火’, ‘鲜焖’, ‘卜蜂’, ‘烤串’])\n\n","slug":"文本挖掘-关键词提取","date":"2022-11-14T08:34:49.000Z","categories_index":"机器学习","tags_index":"NLP,数据挖掘,文本挖掘","author_index":"Algernon"},{"id":"ea5c0b3a795bb47248366f9d5d81a8f3","title":"【Python程序设计】网络爬虫与自动化","content":"网站爬取百度首页import requests\nr &#x3D; requests.get(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;)\nr.encoding &#x3D;&#39;utf-8&#39;\nr.text\n输出：&#39;&lt;!DOCTYPE html&gt;\\r\\n&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv&#x3D;content-type content&#x3D;text&#x2F;html;charset&#x3D;utf-8&gt;&lt;meta http-equiv&#x3D;X-UA-Compatible content&#x3D;IE&#x3D;Edge&gt;&lt;meta content&#x3D;always name&#x3D;referrer&gt;&lt;link rel&#x3D;stylesheet type&#x3D;text&#x2F;css href&#x3D;http:&#x2F;&#x2F;s1.bdstatic.com&#x2F;r&#x2F;www&#x2F;cache&#x2F;bdorz&#x2F;baidu.min.css&gt;&lt;title&gt;百度一下，你就知道&lt;&#x2F;title&gt;&lt;&#x2F;head&gt; &lt;body link&#x3D;#0000cc&gt; &lt;div id&#x3D;wrapper&gt; &lt;div id&#x3D;head&gt; &lt;div class&#x3D;head_wrapper&gt; &lt;div class&#x3D;s_form&gt; &lt;div class&#x3D;s_form_wrapper&gt; &lt;div id&#x3D;lg&gt; &lt;img hidefocus&#x3D;true src&#x3D;&#x2F;&#x2F;www.baidu.com&#x2F;img&#x2F;bd_logo1.png width&#x3D;270 height&#x3D;129&gt; &lt;&#x2F;div&gt; &lt;form id&#x3D;form name&#x3D;f action&#x3D;&#x2F;&#x2F;www.baidu.com&#x2F;s class&#x3D;fm&gt; &lt;input type&#x3D;hidden name&#x3D;bdorz_come value&#x3D;1&gt; &lt;input type&#x3D;hidden name&#x3D;ie value&#x3D;utf-8&gt; &lt;input type&#x3D;hidden name&#x3D;f value&#x3D;8&gt; &lt;input type&#x3D;hidden name&#x3D;rsv_bp value&#x3D;1&gt; &lt;input type&#x3D;hidden name&#x3D;rsv_idx value&#x3D;1&gt; &lt;input type&#x3D;hidden name&#x3D;tn value&#x3D;baidu&gt;&lt;span class&#x3D;&quot;bg s_ipt_wr&quot;&gt;&lt;input id&#x3D;kw name&#x3D;wd class&#x3D;s_ipt value maxlength&#x3D;255 autocomplete&#x3D;off autofocus&gt;&lt;&#x2F;span&gt;&lt;span class&#x3D;&quot;bg s_btn_wr&quot;&gt;&lt;input type&#x3D;submit id&#x3D;su value&#x3D;百度一下 class&#x3D;&quot;bg s_btn&quot;&gt;&lt;&#x2F;span&gt; &lt;&#x2F;form&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;div id&#x3D;u1&gt; &lt;a href&#x3D;http:&#x2F;&#x2F;news.baidu.com name&#x3D;tj_trnews class&#x3D;mnav&gt;新闻&lt;&#x2F;a&gt; &lt;a href&#x3D;http:&#x2F;&#x2F;www.hao123.com name&#x3D;tj_trhao123 class&#x3D;mnav&gt;hao123&lt;&#x2F;a&gt; &lt;a href&#x3D;http:&#x2F;&#x2F;map.baidu.com name&#x3D;tj_trmap class&#x3D;mnav&gt;地图&lt;&#x2F;a&gt; &lt;a href&#x3D;http:&#x2F;&#x2F;v.baidu.com name&#x3D;tj_trvideo class&#x3D;mnav&gt;视频&lt;&#x2F;a&gt; &lt;a href&#x3D;http:&#x2F;&#x2F;tieba.baidu.com name&#x3D;tj_trtieba class&#x3D;mnav&gt;贴吧&lt;&#x2F;a&gt; &lt;noscript&gt; &lt;a href&#x3D;http:&#x2F;&#x2F;www.baidu.com&#x2F;bdorz&#x2F;login.gif?login&amp;tpl&#x3D;mn&amp;u&#x3D;http%3A%2F%2Fwww.baidu.com%2f%3fbdorz_come%3d1 name&#x3D;tj_login class&#x3D;lb&gt;登录&lt;&#x2F;a&gt; &lt;&#x2F;noscript&gt; &lt;script&gt;document.write(\\&#39;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&#x2F;bdorz&#x2F;login.gif?login&amp;tpl&#x3D;mn&amp;u&#x3D;\\&#39;+ encodeURIComponent(window.location.href+ (window.location.search &#x3D;&#x3D;&#x3D; &quot;&quot; ? &quot;?&quot; : &quot;&amp;&quot;)+ &quot;bdorz_come&#x3D;1&quot;)+ \\&#39;&quot; name&#x3D;&quot;tj_login&quot; class&#x3D;&quot;lb&quot;&gt;登录&lt;&#x2F;a&gt;\\&#39;);&lt;&#x2F;script&gt; &lt;a href&#x3D;&#x2F;&#x2F;www.baidu.com&#x2F;more&#x2F; name&#x3D;tj_briicon class&#x3D;bri style&#x3D;&quot;display: block;&quot;&gt;更多产品&lt;&#x2F;a&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;div id&#x3D;ftCon&gt; &lt;div id&#x3D;ftConw&gt; &lt;p id&#x3D;lh&gt; &lt;a href&#x3D;http:&#x2F;&#x2F;home.baidu.com&gt;关于百度&lt;&#x2F;a&gt; &lt;a href&#x3D;http:&#x2F;&#x2F;ir.baidu.com&gt;About Baidu&lt;&#x2F;a&gt; &lt;&#x2F;p&gt; &lt;p id&#x3D;cp&gt;&amp;copy;2017&amp;nbsp;Baidu&amp;nbsp;&lt;a href&#x3D;http:&#x2F;&#x2F;www.baidu.com&#x2F;duty&#x2F;&gt;使用百度前必读&lt;&#x2F;a&gt;&amp;nbsp; &lt;a href&#x3D;http:&#x2F;&#x2F;jianyi.baidu.com&#x2F; class&#x3D;cp-feedback&gt;意见反馈&lt;&#x2F;a&gt;&amp;nbsp;京ICP证030173号&amp;nbsp; &lt;img src&#x3D;&#x2F;&#x2F;www.baidu.com&#x2F;img&#x2F;gs.gif&gt; &lt;&#x2F;p&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;body&gt; &lt;&#x2F;html&gt;\\r\\n&#39;\n\n\n\n\n\n\n\n\n\n‘&lt;!DOCTYPE html&gt;\\r\\n 百度一下，你就知道                     新闻 hao123 地图 视频 贴吧  登录  document.write(\\'登录\\'); 更多产品       关于百度 About Baidu  &copy;2017Baidu使用百度前必读 意见反馈京ICP证030173号       \\r\\n’\nb站首页import requests\nr &#x3D; requests.get(&quot;https:&#x2F;&#x2F;www.bilibili.com&#x2F;&quot;)\nr.encoding &#x3D;&#39;utf-8&#39;\nr.text\n\n&#39;&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;zh-CN&quot;&gt;&lt;head&gt;&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;&lt;title&gt;哔哩哔哩 (゜-゜)つロ 干杯~-bilibili&lt;&#x2F;title&gt;&lt;meta name&#x3D;&quot;description&quot; content&#x3D;&quot;bilibili是国内知名的视频弹幕网站，这里有及时的动漫新番，活跃的ACG氛围，有创意的Up主。大家可以在这里找到许多欢乐。&quot;&gt;&lt;meta name&#x3D;&quot;keywords&quot; content&#x3D;&quot;Bilibili,哔哩哔哩,哔哩哔哩动画,哔哩哔哩弹幕网,弹幕视频,B站,弹幕,字幕,AMV,MAD,MTV,ANIME,动漫,动漫音乐,游戏,游戏解说,二次元,游戏视频,ACG,galgame,动画,番组,新番,初音,洛天依,vocaloid,日本动漫,国产动漫,手机游戏,网络游戏,电子竞技,ACG燃曲,ACG神曲,追新番,新番动漫,新番吐槽,巡音,镜音双子,千本樱,初音MIKU,舞蹈MMD,MIKUMIKUDANCE,洛天依原创曲,洛天依翻唱曲,洛天依投食歌,洛天依MMD,vocaloid家族,OST,BGM,动漫歌曲,日本动漫音乐,宫崎骏动漫音乐,动漫音乐推荐,燃系mad,治愈系mad,MAD MOVIE,MAD高燃&quot;&gt;&lt;meta name&#x3D;&quot;renderer&quot; content&#x3D;&quot;webkit&quot;&gt;&lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;&lt;meta name&#x3D;&quot;spm_prefix&quot; content&#x3D;&quot;333.851&quot;&gt;&lt;meta name&#x3D;&quot;referrer&quot; content&#x3D;&quot;no-referrer-when-downgrade&quot;&gt;&lt;meta name&#x3D;&quot;baidu-site-verification&quot; content&#x3D;&quot;code-qkzzf7NQkQ&quot;&gt;&lt;meta name&#x3D;&quot;applicable-device&quot; content&#x3D;&quot;pc&quot;&gt;&lt;meta http-equiv&#x3D;&quot;Cache-Control&quot; content&#x3D;&quot;no-transform&quot;&gt;&lt;meta http-equiv&#x3D;&quot;Cache-Control&quot; content&#x3D;&quot;no-siteapp&quot;&gt;&lt;link rel&#x3D;&quot;canonical&quot; href&#x3D;&quot;https:&#x2F;&#x2F;www.bilibili.com&#x2F;&quot;&gt;&lt;link rel&#x3D;&quot;alternate&quot; media&#x3D;&quot;only screen and(max-width: 640px)&quot; href&#x3D;&quot;https:&#x2F;&#x2F;m.bilibili.com&quot;&gt;&lt;link rel&#x3D;&quot;dns-prefetch&quot; href&#x3D;&quot;&#x2F;&#x2F;s1.hdslb.com&quot;&gt;&lt;link rel&#x3D;&quot;apple-touch-icon&quot; href&#x3D;&quot;&#x2F;&#x2F;static.hdslb.com&#x2F;mobile&#x2F;img&#x2F;512.png&quot;&gt;&lt;link rel&#x3D;&quot;shortcut icon&quot; href&#x3D;&quot;&#x2F;favicon.ico?v&#x3D;1&quot;&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;function getIEVersion()&#123;var e&#x3D;99;if(&quot;Microsoft Internet Explorer&quot;&#x3D;&#x3D;navigator.appName)&#123;var t&#x3D;navigator.userAgent;null!&#x3D;new RegExp(&quot;MSIE ([0-9]&#123;1,&#125;[.0-9]&#123;0,&#125;)&quot;).exec(t)&amp;&amp;(e&#x3D;parseFloat(RegExp.$1))&#125;return e&#125;getIEVersion()&lt;11&amp;&amp;(window.location.href&#x3D;&quot;https:&#x2F;&#x2F;www.bilibili.com&#x2F;blackboard&#x2F;activity-I7btnS22Z.html&quot;)&lt;&#x2F;script&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;!function()&#123;var i&#x3D;window.navigator.userAgent,n&#x3D;[&quot;Android&quot;,&quot;iPhone&quot;,&quot;SymbianOS&quot;,&quot;Windows Phone&quot;,&quot;iPod&quot;],o&#x3D;!0;if(!&#x2F;\\\\sVR\\\\s&#x2F;g.test(i))&#123;for(var e&#x3D;0,r&#x3D;n.length;e&lt;r;e++)if(0&lt;i.indexOf(n[e]))&#123;o&#x3D;!1;break&#125;if(!o)&#123;var a&#x3D;window.location.href.replace(&quot;www&quot;,&quot;m&quot;);window.location.href&#x3D;a&#125;&#125;&#125;()&lt;&#x2F;script&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;function getCookie(e)&#123;var o&#x3D;new RegExp(&quot;(^| )&quot;+e+&quot;&#x3D;([^;]*)(;|$)&quot;),n&#x3D;document.cookie.match(o);return n?unescape(n[2]):null&#125;function reportfs()&#123;window.performance&amp;&amp;window.performance.timing&amp;&amp;(window.performance.timing.firstscreenfinish&#x3D;(new Date).getTime())&#125;window.spmReportData&#x3D;&#123;&#125;,window.reportConfig&#x3D;&#123;sample:1,scrollTracker:!0,msgObjects:&quot;spmReportData&quot;,errorTracker:!0&#125;,window.abtest||(window.abtest&#x3D;&#123;&#125;),window.abtest.b_ut&#x3D;getCookie(&quot;b_ut&quot;),window.abtest.i_wanna_go_back&#x3D;getCookie(&quot;i-wanna-go-back&quot;),window.page_load_time&#x3D;Date.now()&lt;&#x2F;script&gt;&lt;link rel&#x3D;&quot;prefetch&quot; as&#x3D;&quot;script&quot; href&#x3D;&quot;&#x2F;&#x2F;s1.hdslb.com&#x2F;bfs&#x2F;static&#x2F;player&#x2F;main&#x2F;video.js?v&#x3D;20221018&quot;&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;&#x2F;s1.hdslb.com&#x2F;bfs&#x2F;seed&#x2F;jinkela&#x2F;short&#x2F;config&#x2F;biliconfig.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;&#x2F;www.bilibili.com&#x2F;gentleman&#x2F;polyfill.js?features&#x3D;Promise%2CObject.assign%2CString.prototype.includes%2CNumber.isNaN&quot;&gt;&lt;&#x2F;script&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;&#x2F;s1.hdslb.com&#x2F;bfs&#x2F;static&#x2F;jinkela&#x2F;long&#x2F;js&#x2F;sentry&#x2F;sentry-5.7.1.min.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;&#x2F;s1.hdslb.com&#x2F;bfs&#x2F;static&#x2F;jinkela&#x2F;long&#x2F;js&#x2F;sentry&#x2F;sentry-5.7.1.vue.min.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;&#x2F;s1.hdslb.com&#x2F;bfs&#x2F;seed&#x2F;log&#x2F;report&#x2F;log-reporter.js&quot; crossorigin&gt;&lt;&#x2F;script&gt;&lt;link href&#x3D;&quot;&#x2F;&#x2F;s1.hdslb.com&#x2F;bfs&#x2F;static&#x2F;jinkela&#x2F;international-home&#x2F;css&#x2F;international-home.1.77082e04b103052da0fdd495b981836dfe347af3.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;&lt;link href&#x3D;&quot;&#x2F;&#x2F;s1.hdslb.com&#x2F;bfs&#x2F;static&#x2F;jinkela&#x2F;international-home&#x2F;css&#x2F;international-home.0.77082e04b103052da0fdd495b981836dfe347af3.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;div id&#x3D;&quot;international-home-app&quot;&gt;&lt;&#x2F;div&gt;&lt;div id&#x3D;&quot;biliMainFooter&quot;&gt;&lt;&#x2F;div&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;&#x2F;s1.hdslb.com&#x2F;bfs&#x2F;cm&#x2F;cm-sdk&#x2F;static&#x2F;js&#x2F;pc.js&quot;&gt;&lt;&#x2F;script&gt;&lt;div style&#x3D;&quot;display:none&quot;&gt;&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.bilibili.com&#x2F;v&#x2F;game&#x2F;match&#x2F;&quot;&gt;赛事库&lt;&#x2F;a&gt; &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.bilibili.com&#x2F;cheese&#x2F;&quot;&gt;课堂&lt;&#x2F;a&gt; &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.bilibili.com&#x2F;festival&#x2F;2021bnj&quot;&gt;2021拜年纪&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;&#x2F;s1.hdslb.com&#x2F;bfs&#x2F;static&#x2F;jinkela&#x2F;international-home&#x2F;1.international-home.77082e04b103052da0fdd495b981836dfe347af3.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;&#x2F;s1.hdslb.com&#x2F;bfs&#x2F;static&#x2F;jinkela&#x2F;international-home&#x2F;international-home.77082e04b103052da0fdd495b981836dfe347af3.js&quot;&gt;&lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;&#39;\n折枝落梦import requests\nr &#x3D; requests.get(&quot;https:&#x2F;&#x2F;www.bilibili.com&#x2F;video&#x2F;BV17D4y1t74j&#x2F;?spm_id_from&#x3D;333.337.search-card.all.click&amp;vd_source&#x3D;11bfc591eb1189ab7412b09ee29e1dcd&quot;)\nr.encoding &#x3D;&#39;utf-8&#39;\nr.text\n\n评论爬取import requests\nimport re\nimport jieba\nimport wordcloud\nimport time\nimport sys\nfrom bs4 import BeautifulSoup\n\n\nclass Bilibili:\n    def __init__(self, videourl, page, img_path):\n\n        self.img_path &#x3D; img_path\n        self.baseurl &#x3D; videourl.split(&#39;?&#39;)[0]\n\n    # 爬取弹幕和评论\n    def getAidAndCid(self):\n        cidurl &#x3D; self.baseurl + &quot;?p&#x3D;&quot; + page\n        cidRegx &#x3D; &#39;&#123;&quot;cid&quot;:([\\d]+),&quot;page&quot;:%s,&#39; % (page)\n        aidRegx &#x3D; &#39;&quot;aid&quot;:([\\d]+),&#39;\n        r &#x3D; requests.get(cidurl)\n        r.encoding &#x3D; &#39;utf-8&#39;\n        try:\n\n            self.cid &#x3D; re.findall(cidRegx, r.text)[0]\n            self.aid &#x3D; re.findall(aidRegx, r.text)[int(page) - 1]\n        except:\n            print(&#39;视频序号输入有误，请保证序号在1到最大值之间！&#39;)\n            time.sleep(3)\n            sys.exit()\n\n    def getBarrage(self):\n        print(&#39;正在获取弹幕......&#39;)\n\n        commentUrl &#x3D; &#39;https:&#x2F;&#x2F;comment.bilibili.com&#x2F;&#39; + self.cid + &#39;.xml&#39;\n\n        # 获取并提取弹幕 #\n        r &#x3D; requests.get(commentUrl)\n        r.encoding &#x3D; &#39;utf-8&#39;\n        content &#x3D; r.text\n        # 正则表达式匹配字幕文本\n        comment_list &#x3D; re.findall(&#39;&gt;(.*?)&lt;&#x2F;d&gt;&lt;d &#39;, content)\n\n        # jieba分词\n        self.barrage &#x3D; &quot;&quot;.join(comment_list)\n\n    def getComment(self, x, y):\n        for i in range(x, y + 1):\n            r &#x3D; requests.get(\n                &#39;https:&#x2F;&#x2F;api.bilibili.com&#x2F;x&#x2F;v2&#x2F;reply?pn&#x3D;&#123;&#125;&amp;type&#x3D;1&amp;oid&#x3D;&#123;&#125;&amp;sort&#x3D;2&#39;.format(i, self.aid)).json()\n            replies &#x3D; r[&#39;data&#39;][&#39;replies&#39;]\n            print(&#39;------评论列表------&#39;)\n            for repliy in replies:\n                print(repliy[&#39;content&#39;][&#39;message&#39;] + &#39;\\n&#39;)\n\n        pass\n\n    def genWordCloud(self):\n        print(&#39;正在分词......&#39;)\n\n        text &#x3D; &quot;&quot;.join(jieba.lcut(self.barrage))\n        # 实例化词云，\n        wc &#x3D; wordcloud.WordCloud(\n            # 选择字体路径，没有选择的话，中文无法正常显示\n            font_path&#x3D;&quot;C:\\\\Users\\\\83854\\\\Documents\\\\shujvji\\\\华文行楷.ttf&quot;,background_color&#x3D;&quot;white&quot;)\n        # 文本中生成词云\n        wc.generate(text)\n        # 保存成图片\n        wc.to_file(self.img_path + &#39;.jpg&#39;)\n        print(&#39;词云生成完毕，图片名称：&#123;&#125;.jpg&#39;.format(self.img_path))\n\n\ndef checkUrl(url):\n    try:\n        r &#x3D; requests.get(url)\n    except:\n        return 0\n    r.encoding &#x3D; &#39;utf-8&#39;\n    # 视频名称正则表达式\n    regx &#x3D; &#39;&quot;part&quot;:&quot;(.*?)&quot;&#39;\n    r.encoding &#x3D; &#39;utf-8&#39;\n    result &#x3D; re.findall(regx, r.text)\n    count &#x3D; 0\n    if len(result) &gt; 0:\n        print(&#39;------视频列表------&#39;)\n        for i in result:\n            count +&#x3D; 1\n            print(&quot;视频&quot; + str(count) + &quot; : &quot; + i)\n        return 1\n    return 0\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    # 视频地址\n    videourl &#x3D; input(&quot;请输入视频地址，例如:https:&#x2F;&#x2F;www.bilibili.com&#x2F;video&#x2F;BV1AG4y1h7Ap&#x2F;?spm_id_from&#x3D;333.999.0.0\\n&quot;)\n\n    if checkUrl(videourl):\n        print(&#39;------视频地址有效------&#39;)\n\n        # 第n个视频\n        page &#x3D; input(&#39;请输入视频的序号：&#39;)\n\n        # 图片储存路径\n        img_path &#x3D; input(&#39;请输入你要生成的词云的图片名称：&#39;)\n\n        # 计时\n        start_time &#x3D; time.time()\n\n        # 实例化类\n        b &#x3D; Bilibili(videourl, page, img_path)\n\n        # 获取aid和cid\n        b.getAidAndCid()\n\n        # 获取弹幕\n        b.getBarrage()\n\n        # 获取评论 起始页和结束页\n        b.getComment(1, 2)\n\n        # 生成词云\n        b.genWordCloud()\n\n        print(&#39;程序运行完毕，耗时:&#123;:.2f&#125;s&#39;.format(time.time() - start_time))\n    else:\n        print(&#39;视频地址无效&#39;)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nD:\\coder\\randomnumbers\\venv\\Scripts\\python.exe D:/coder/randomnumbers/chengxusheji.py请输入视频地址，例如:https://www.bilibili.com/video/BV1AG4y1h7Ap/?spm_id_from=333.999.0.0https://www.bilibili.com/video/BV1AG4y1h7Ap/?spm_id_from=333.999.0.0———视频列表———视频1 : 《原神》纳西妲角色PV——「生日快乐」视频2 : 日-《原神》纳西妲角色PV——「生日快乐」视频3 : 英-《原神》纳西妲角色PV——「生日快乐」视频4 : 韩-《原神》纳西妲角色PV——「生日快乐」———视频地址有效———请输入视频的序号：1请输入你要生成的词云的图片名称：nxd正在获取弹幕……———评论列表———囚车颠啊颠，大贤者睁开了眼，梦见旅行者坎蒂丝提纳里，左一拳右一拳，最后一个草灯莲送他见梦魇。囚车颠啊颠，大贤者睁开了眼，梦见牢头不给水饭，饿得头晕眼花不得眠囚车颠啊颠，大贤者睁开了眼，梦见须弥老百姓震天怒吼，打倒逆贼贤者，艾尔海森一拳让他睁不开眼。囚车颠啊颠，大贤者睁开了眼，梦见闸刀亮闪闪，吓得肝胆俱裂来世见\n我发布了一篇笔记，快来看看吧花车颠啊颠，纳西妲睁开眼The Flower carriage rocked. Nahida Opened her eyes.（花车摇晃，纳西妲睁开双…https://www.bilibili.com/h5/note-app/view?cvid=19349317&amp;pagefrom=comment&amp;richtext=true\n警惕七神pv逐渐噩梦化\n文案还是手下留情了 最后一句让博士来讲就好了&#34;生日快乐 草神大人&#34;\n这是我个人认为开服以来水平最高的一段个人PV。三段完全一样的台词，配上不同的画面，既对应了游戏里的“花神诞祭的轮回”，又表现出了纳西妲梦想与现实的落差。1:54 起的第三段，是为数不多让我在这个游戏里体验到“惊悚”这一感觉的PV片段。新生草神的无助和孤独在这一段里体现得淋漓尽致。不过不用害怕，纳西妲，因为旅行者和大家都来了，你的梦马上就要成真了你将要摆脱作为笼中鸟的束缚。不久后，人们就会快乐地围着你转着圈，对你由衷地说出：「生日快乐，纳西妲。」\n花车颠呀颠，大贤者闭上眼，他说刚刚做了梦，梦见教令院的忌日就是今天[doge]\n别哭，我会出手\n先不要着急发刀，我个人感觉这个PV应该是主线剧情的倒叙[tv_思考]纳西妲第一次过生日的时候，被教令院所囚禁，孤独与冰冷是第一次生日的回忆。[tv_难过]第二次过生日之时，在旅行者和其他伙伴的帮助下重新振作起来， 重登草神之位，真正得到了解放 。[tv_微笑]第三次过生日的时候应该是旅行者解决完这里的麻烦 ，那时候的纳西妲已经是一个合格的神明了，深受人民爱戴，[tv_斜眼笑]\n雷电将军pv：甜——刀纳西妲pv：甜——刀水神pv：——\n一个生日PV而已，能有什么刀呢？[墨镜]\n教令院！你给我开门！！！\nPV能不能倒放一下啊，爷现在就要扬了教令院给纳西妲快快乐乐过生日[Cat2_Boom!][阴险][阴险]\n这时间？这刀？午时问斩是吧！[生气]\n3.2版本的👴：教令院里的人听着，你们已经被包围了！马上交出博士散兵，释放神质！这是你们唯一的出路！\n日本主播看到这个pv时，提到最多的须弥地区是哪里？是喀万驿日本主播：啊，纳西妲！喀万驿！喀万驿！麻吉喀万驿！\n枪在手，跟我走。干贤者，救草神！[生气][生气][生气]\n[藏狐]花车颠呀颠，教令院的末日就在今天\n这就是纳西妲生日设在今天的原因？按照我的猜想，大慈树王的死亡离纳西妲诞生很近，也离坎瑞亚灾厄很近。时间方面还是挺严谨的，之前的文本提到过，炎之魔女回到蒙德是在秋天（终末弓）。因而怀疑烧了蒙德图书馆的秋分大火可能是她引发的。如果猜测成立，那坎瑞亚覆灭大概发生在夏末秋初吧。\n第一遍是梦中第二遍估计马上3.2就能看见了第三遍是几百年前教练员把纳西妲找到时候的情况(把神明当小孩子牵着走，教令院没救了……)\n啊啊啊啊可恶的教令院！！[囧][囧]什么时候开大贤者副本，我要打大贤者\n———评论列表———我德丽莎·阿波卡利斯，现正式辞去蒙德城火花骑士一职，前往须弥接任草神\n童话绘本般的风格，却如此令人悲伤……\n第一次见纳西妲这样妈妈属性和女儿属性融合得这么好的角色[保卫萝卜_哇]感觉既能带上街去各种换装玩奇迹暖暖，又能回家枕膝枕撒娇[保卫萝卜_哇]纳西妲，你带我走吧，呜呜呜呜[保卫萝卜_哭哭]\n[崩坏3·光辉矢愿_不可以看]花车颠啊颠，屠了教令院！[崩坏3_你好]\n纳西妲最近有很多人喜欢，这个现象不得不说惹人深思。在这个信息化的时代，人们想当然的认为媒体平台的发展能够得到更加丰富的信息量，这也意味着可以有更加全面和客观的认知，即便是隔着冰冷屏幕。但这条论断忽视了人性的因素，因为人是很容易受欲望支配的动物。举个例子，大家以为通过他的动态可以触及到他内心最为柔软的角落，全方位了解这个人。其实不然，大部分人是无法了解事物的全部的，就如同她现在对着屏幕笑，但屏幕那端的观众却无法看到躲在她桌子下面戴着项圈的我\n生日当天公开生日超浪漫的好叭！\nwhat&#39;s up.什么黑童话[热词系列_知识增加]\n按照田忌赛马原则纳西妲这种上流的神应该配下流的我[脱单doge][脱单doge][脱单doge]\nmd拳头硬了[阴险]教令院给我等着\n生日快乐！谁也别拦我！爷今天就要去砍翻教令院！阿扎尔！我要杀你一千次！一万次！也不够！！！[tv_发怒]\n纳西妲自比月亮，而可莉是逃跑的太阳所以可莉就是纳西妲的姐姐\n我现在就要给草神办生日会[大哭][大哭][大哭]\n不会真有人一直刷新等纳西妲吧，不会吧不会吧！那就是本大王hiahiahia纳西妲我来啦！！！\n教令院！！！！！！！！！[生气][生气][生气][生气][生气][生气][生气][生气][生气][生气][生气][生气][生气]\n今天是纳西妲瘾发作最严重的一次，躺在床上，拼命唱让风告诉你，难受的一直抓自己眼睛，以为刷b站没事，看到b站都在发纳西妲的二创，就我在看。我渴望创造一个纳西妲。我试着坐着云霄飞车用眼睛吃花生，我想用我的记忆用我对纳西妲的爱，创造出一个属于纳西妲的时空。无奈，这就是现实吧，我好想她，可她只是数据，刚才发生的一切都只是个故事，等到幕布完全落下，这个故事就结束了。该怎么说呢，角色们纷纷回归演员身份，站在舞台上向大家谢幕的样子……看着不免令人有些抓狂呢！悲剧并非终结，而是希望的起始。纳西妲在世间留下的足迹，终会在未来的某一日，成为我前行的灯火。这些现实世界的大道理我也懂，但是你让我如何忍受这一切！我只知道比起世界，纳西妲更重要！如果创造纳西妲是一种罪，那就由我来当这个罪人。我只是一介凡人，没有什么能力，只是想要满足这个简单的愿望。我真的不知道该怎么办，我真的想纳西妲想得要发疯了。我躺在床上会想纳西妲，我洗澡会想纳西妲，我出门会想纳西妲，我走路会想纳西妲，我坐车会想纳西妲，我工作会想纳西妲，我玩手机会想纳西妲，我盯着路边的纳西妲看，我盯着马路对面的纳西妲看，我盯着地铁里的纳西妲看，我盯着游戏里的纳西妲看，我每时每刻眼睛都直直地盯着纳西妲看，像一台雷达一样扫视经过我身边的每一个纳西妲，我真的觉得自己像中邪了一样，我对纳西妲的念想似乎都是病态的了，我好孤独啊！真的好孤独啊！这世界上那么多纳西妲为什么没有一个是属于我的。你知道吗？每到深夜，我的眼睛滚烫滚烫，我发病了我要疯狂看纳西妲，我要狠狠看纳西妲，我的眼睛受不了了，纳西妲😭😭😭，我的纳西妲😭😭😭，我的纳西妲😭😭😭，我的纳西妲😭😭😭，我的纳西妲😭😭😭，我的纳西妲😭😭😭，我的纳西妲😭😭😭，我的纳西妲😭😭😭，我的纳西妲😭😭😭是、是的…♡我想要纳西妲！我真的想要很多纳西妲！快把可爱的纳西妲给我…好想要…想要纳西妲…♡呜呜、不行了，我已经变成没纳西妲就不行的笨蛋了……啊啊♡好喜欢♡可爱的小脚脚、萌萌的小草神…是、哪怕有纳西妲也会觉得不够，什么时候都想要那种可爱的草神，除了纳西妲已经什么都想不了了…♡最喜欢的就是…纳西妲♡会说自己叫纳西妲之类的，根本满足不了…想要拥有可爱的小草神♡请、满足我…拜托…\n纳西妲生日快乐[打call]亲爱的小吉祥草王，可以让我的脸上长满帕蒂沙兰吗？[脱单doge]\n纳西妲的生日快乐！\n《诗经·原风·花车》\n夏桑菊真好喝\n花车槛槛，有女起兮。乃言尔梦，述其诞时。有女适觉，寺人求兮。言之神明，言之神往。花神遂祭，时人乐兮。百两御之，骖马别矣。\n花车将将，有女起兮。乃言尔梦，述其诞时。有女适觉，旅人求兮。言之神明，言之神往。花神遂祭，时人冁兮。百两将之，服马别矣。\n花车业业，有女起兮。乃言尔梦，述其诞时。有女适觉，贤人求兮。问之神明，感之神往。花神遂祭，时人伤兮。百两成之，班马别矣。\n@玻璃可乐呀 刀在手！跟我走！救草神！杀贤狗！\n@原宝的汪 这叫生日？！！！！我我我呜呜呜[保卫萝卜_哭哭][保卫萝卜_哭哭][保卫萝卜_哭哭][保卫萝卜_哭哭][保卫萝卜_哭哭][保卫萝卜_哭哭][保卫萝卜_哭哭][保卫萝卜_哭哭]\nBuilding prefix dict from the default dictionary …Loading model from cache C:\\Users\\83854\\AppData\\Local\\Temp\\jieba.cache正在分词……Loading model cost 0.471 seconds.Prefix dict has been built successfully.词云生成完毕，图片名称：nxd.jpg程序运行完毕，耗时:2.93s\n进程已结束,退出代码0\n\n","slug":"python爬虫","date":"2022-11-12T15:36:49.000Z","categories_index":"编程语言","tags_index":"python,爬虫","author_index":"Algernon"},{"id":"6b5256e96ce5fae4261cb8ad62f96b03","title":"【Python程序设计】图像手绘效果","content":"科学计算与可视化图像的手绘效果\nfrom PIL import Image\nimport numpy as np\nim&#x3D;np.array(Image.open(&quot;C:\\\\Users\\\\83854\\\\Pictures\\\\Saved Pictures\\\\1580222850659_edit_412586262269335.jpg&quot;))\nprint(im.shape,im.dtype)\n\n\n\n\n\n\n\n\n\n(2065, 1500, 3) uint8\nim&#x3D;np.array(Image.open(&quot;C:\\\\Users\\\\83854\\\\Pictures\\\\Saved Pictures\\\\1580222850659_edit_412586262269335.jpg&quot;).convert(&#39;L&#39;))\nprint(im.shape,im.dtype)\n\n\n\n\n\n\n\n\n\n(2065, 1500) uint8\nprint(im[20,300])\n\n\n\n\n\n\n\n\n\n146\nprint(int(im.min()),int(im.max()))\n\n\n\n\n\n\n\n\n\n0 255\nprint(im[10,:])\n\n\n\n\n\n\n\n\n\n[146 142 152 … 114 129 100]\nim0&#x3D;np.array(Image.open(&quot;C:\\\\Users\\\\83854\\\\Pictures\\\\Saved Pictures\\\\1580222850659_edit_412586262269335.jpg&quot;).convert(&#39;L&#39;))\nim1&#x3D;255-im0\nim2&#x3D;(100&#x2F;255)*im0+150 #区间变换\nim3&#x3D;255*(im1&#x2F;255)**2 #像素平方处理\npil_im&#x3D;Image.fromarray(np.uint(im1))#分别对im1,im2,im3执行\npil_im.show()\n\nfrom PIL import Image\nimport numpy as np\nvec_el&#x3D;np.pi&#x2F;2.2\nvec_az&#x3D;np.pi&#x2F;4\ndepth&#x3D;10\nim&#x3D;Image.open(&quot;C:\\\\Users\\\\83854\\\\Pictures\\\\Saved Pictures\\\\1580222850659_edit_412586262269335.jpg&quot;).convert(&#39;L&#39;)\na&#x3D;np.asarray(im).astype(&#39;float&#39;)\ngrad&#x3D;np.gradient(a)\ngrad_x,grad_y&#x3D;grad\ngrad_x&#x3D;grad_x*depth&#x2F;100\ngrad_y&#x3D;grad_y*depth&#x2F;100\ndx&#x3D;np.cos(vec_el)*np.cos(vec_az)\ndy&#x3D;np.cos(vec_el)*np.sin(vec_az)\ndz&#x3D;np.sin(vec_el)\nA&#x3D;np.sqrt(grad_x**2+grad_y**2+1.)\nuni_x&#x3D;grad_x&#x2F;A\nuni_y&#x3D;grad_y&#x2F;A\nuni_z&#x3D;1.&#x2F;A\na2&#x3D;255*(dx*uni_x+dy*uni_y+dz*uni_z)#光源归一化\na2&#x3D;a2.clip(0,255)\nim2&#x3D;Image.fromarray(a2.astype(&#39;uint8&#39;))#重构图像\nim2.save(&#39;2.jpg&#39;)\n查看图像\nim2.show()\n\n\n","slug":"PYTHON手绘效果","date":"2022-11-11T09:13:49.000Z","categories_index":"编程语言","tags_index":"python,cv","author_index":"Algernon"},{"id":"66ccb0ab9333327ecb5189567a6954b9","title":"【数据库系统概论】期中作业","content":"引言本文基于markdown格式书写，公式及表达式使用latex语句编码。\nPART 11.对于教学数据库的三个基本表s ( SNO , SNAME , AGE , SEX )   sc ( SNO , CNO , CNAME )c ( CNO, CNAME , TEACHER )试用关系代数表达式表示下列查询语句：\n(1）检索学号为S20220099同学所学课程的课程号和课程名。$\\Pi_{CNO,CNAME}(\\sigma_{SNO=’S20220099’}(sc))$\n(2）检索年龄大于20岁的女同学的学号和姓名。$\\Pi_{SNO,SNAME}(\\sigma_{AGE&gt;20 \\bigwedge SEX=’女’}(s))$\n(3）检索姓名为WANG学生所学课程的课程名与课程号。$\\Pi_{CNAME,CNO}(\\sigma_{SNAME=’WANG’}(s \\Join sc))$\n(4）检索至少教授WANG学生一门课的老师姓名。$\\Pi_{TEACHER}(\\sigma_{SNAME=’WANG’\\bigwedge SEX=’男’}(s\\Join c \\Join sc))$\n(5）检索 WANG 同学不学的课程的课程号。$\\Pi_{CNO}(C)-\\Pi_{CNO}(\\sigma_{SNAME=’WANG’}(s\\Join sc))$\n(6）检索至少教授两门课的教师姓名。$\\Pi_{TEACHER}(\\sigma_{C.TECAHER=A.TEACHER \\bigwedge C.CNAME !=A.CNAME}(c \\Join pA(c)))$\n(7）检索全部学生都选修的课程的课程号与课程名。$\\Pi_{CNO,{CNAME}}(C \\Join (\\Pi_{SNO,CNO}(SC)\\div\\Pi_{SNO}(S)) )$\n(8）检索选修课程包含 WANG 同学所选全部课程的学生学号。$\\Pi_{SNO,CNO}(SC)\\div\\Pi_{CNO}(\\sigma_{SNAME=’WANG’}(s \\Join sc))$\nPART 22．对于教学数据库的三个基本表： S ( SNO, SNAME, AGE, SEX ) SC ( SNO, CNo, GRADE ) C ( CNO, CNAME, TEACHER)试用 SQL 的查询语句表达下列査询：\n(1）在表 SC 中统计已选修课程的学生人数Use education1\nGO\n--在表 SC 中统计已选修课程的学生人数。\nSELECT COUNT(DISTINCT Sno)\nFROM SC\n验证：SC中已经选秀课程人数为3\n(2）求选修C0001课程的学生的姓名和性别。Use education1\nGO\n--求选修C0001课程的学生的姓名和性别\nSELECT S.Sname,S.Sex\nFROM S,SC\nWHERE SC.Cno&#x3D;&#39;C001&#39; AND SC.Sno&#x3D;S.Sno\n验证：选修C001的仅有S001同学，而S001对应liu同学\n\n(3）求王海同学所上每门课程的该门课学生平均成绩。Use education1\nGO\n--求王海同学所上每门课程的该门课学生平均成绩\nSELECT Cname,AVG(Grade) 平均成绩\nFROM SC ,C,S\n\nWHERE SC.Cno&#x3D;C.Cno AND SC.Sno&#x3D;S.Sno AND S.Sname&#x3D;&#39;王海&#39;\nGROUP BY C.Cno,Cname\n(4）统计每个学生选修课程的门数（超过5门的学生才统计）。要求输出学生学号和选修门数，查询结果按门数降序排列，若门数相同，按学号升序排列。\nUse education1\nGO\n--统计每个学生选修课程的门数（超过5门的学生才统计）。要求输出学生学号和选修门数，查询结果按门数降序排列，若门数相同，按学号升序排列\nSELECT DISTINCT Sno 学生学号,COUNT(Cno) 选修门数\nFROM SC\nGROUP BY  Sno\nHAVING COUNT(Cno)&gt;5\nORDER BY 2 DESC,Sno ASC\n(5）检索选修C0001课程成绩比 Liu 同学高的男学生姓名。Use education1\nGO\n--检索选修C0001课程成绩比 Liu 同学高的男学生姓名。\nSELECT Sname\nfrom S,SC\nWHERE S.Sno IN(SELECT Sno\n             FROM SC \n\t\t\t WHERE SC.Grade&gt;(SELECT Grade FROM SC,S WHERE Sname&#x3D;&#39;liu&#39; AND S.Sno&#x3D;SC.Sno AND SC.Cno&#x3D;&#39;C002&#39;)AND SC.Cno&#x3D;&#39;C001&#39;\n\t\t\t )\n       AND S.Sex&#x3D;&#39;男&#39; AND S.Sno&#x3D;SC.Sno AND SC.Cno&#x3D;&#39;C001&#39;\n(6）在表 SC 中检索成绩为空值的学生的学号和课程号。Use education1\nGO\n--在表 SC 中检索成绩为空值的学生的学号和课程号。\nSELECT Sno,Cno\nfrom SC\nWHERE Grade IS  NULL\n\n(7）检索课程名以 “计算机” 打头的所有课程的课程号和课程名。Use education1\nGO\n--检索课程名以 “计算机” 打头的所有课程的课程号和课程名\nSELECT DISTINCT  C.Cno,Cname\nfrom SC,C\nWHERE C.Cno&#x3D;SC.Cno AND C.Cname LIKE &#39;计算机%&#39;\n(8）求选修C0001课程成绩高于该门课程男同学平均成绩的女学生的姓名和年龄。Use education1\nGO\n--求选修C0001课程成绩高于该门课程男同学平均成绩的女学生的姓名和年龄\n\n\nSELECT Sname,Age\nFROM S\nWHERE Sno IN(SELECT Sno\n             FROM SC\n\t\t\t WHERE Grade&gt;(SELECT AVG(Grade)\n\t\t\t              FROM SC,S\n\t\t\t\t\t\t  WHERE S.Sno&#x3D;SC.Sno AND S.Sex&#x3D;&#39;男&#39; AND SC.Cno&#x3D;&#39;C001&#39;) \n\t\t\t\t   AND SC.Cno&#x3D;&#39;C001&#39; )\n\t  AND S.Sex&#x3D;&#39;女&#39;\n(9）检索全部学生都选修的课程的课程号与课程名。Use education1\nGO\n--检索全部学生都选修的课程的课程号与课程名\n\n Select  Sname from S \n where not Exists (select * from C where not Exists (select * from SC where  Sno&#x3D;S.Sno and Cno&#x3D;C.Cno))\n\n(10）检索选修课程包含 Liu 老师所授全部课程的学生学号。Use education1\nGO\n--检索选修课程包含 Liu 老师所授全部课程的学生学号。\n Select  DISTINCT SC.Sno\n from S\n where exists (select SNO\n from SC,C,S\n where SC.CNO&#x3D;C.CNO and SC.SNO &#x3D; S.SNO and  C.TEACHER &#x3D; &#39;Liu&#39;);\n\n\nPART 33.用 SQL 语句表达对2题中教学数据库关系 S 、 SC 、 C 的更新操作\n(1）向关系S中插入一条学生记录（“S20220099”，“宋刚”，18，“男”）Use education1\nGO\n--向关系S中插入一条学生记录（“S20220099”，“宋刚”，18，“男”）\n\nINSERT\nINTO S(Sno,Sname,Age,Sex)\nVALUES(&#39;S20220099&#39;,&#39;宋刚&#39;,18,&#39;男&#39;)\n(2）检索所授每门课程平均成绩均大于80分的教师姓名。Select TEACHER \nfrom C a where \nCNO in\n(select CNO \nfrom SC \ngroup by CNO \nhaving avg(GRADE)&gt;80) \ngroup by TEACHER \nhaving count(*)&#x3D;(select count(*) from C b where a.TEACHER&#x3D;b.TEACHER)\n\n(3）在 C 中删除无授课教师的选课元组。Use education1\nGO\n--在 C 中删除无授课教师的选课元组\n\nDELETE FROM C WHERE Teacher IS NULL\n(4）把选修“区块链技术”课程的女同学选课元组全部删去。Use education1\nGO\n\nDELECT FROM SC\nWHERE Sno IN(SELECT Sno FROM S WHERE Sex &#x3D;&#39;女&#39;)\nAND Cno IN (SELECT Cno FROM C WHERE Cname&#x3D;&#39;区块链技术&#39;)\n(5）把 MATHS 课六十分以下五十分以上的成绩全改为60分。Use education1\nGO\n--把 MATHS 课六十分以下五十分以上的成绩全改为60分\n\nUPDATE SC\nSET Grade &#x3D;60\nWHERE Grade &lt;60 AND Grade &gt;50\nAND Cno IN (SELECT Cno FROM C WHERE Cname&#x3D;&#39;MATHS&#39;)\n(6）把低于所有课程总平均成绩的同学成绩提高5%。Use education1\nGO\n--把低于所有课程总平均成绩的同学成绩提高5%\n\nUPDATE SC\nSET Grade&#x3D;Grade*1.05\nWHERE Sno IN (SELECT Sno FROM S ) AND Grade&lt;(SELECT AVG(Grade) FROM SC)\n(7）当某个成绩低于该门课程的平均成绩时提高5%。Use education1\nGO\n--当某个成绩低于该门课程的平均成绩时提高5%\n\n\nUPDATE SC\nSET Grade&#x3D;Grade*1.05\nWHERE Grade&lt;(SELECT AVG(Grade)\nFROM SC)\nPART 44．设数据库中有三个关系：职工表 EMP ( ENO , ENAME , AGE , SEX , ECITY )，其属性分别表示职工工号、姓名年龄、性别和籍贯。工作表 WORKS ( ENO , CNO , SALARY )，其属性分别表示职工工号、工作的公司编号和工资。公司表 COMP ( CNO , CNAME , CITY )，其属性分别表示公司编号、公司名称和公司所在城市。试用 SQL 语句写出下列操作：(1）用 CREATE TABLE 语句创建上述三个表，需指出主键和外键。(2）检索超过35岁的男职工的工号和姓名。(3）假设每个职工只能在一个公司工作，检索工资超过1000元的男性职工的工号姓名。(4）假设每个职工可在多个公司工作，检索在编号为C4和C8公司兼职的职工的工号和姓名。(5）检索在“联华公司”工作，工资超过1000元的男性职工的工号和姓名。(6）假设每个职工可在多个公司工作，检索每个职工的兼职公司数目和工资总数，显示（ ENO,NUМ,SUМ_ SALARY )，分别表示工号、公司数目和工资总数。(7）工号为E6的职工在多个公司工作，试检索至少在E6职工兼职的所有公司工作的职工工号。(8）检索华联公司中低于本公可平均工资的职工的工号和姓名。(9）在每一公司中为60岁以上职工加薪100元（若职工为多个公司工作，可重复加）。(10)在 EMP 表和WORKS表中删除年龄大于60岁的职工有关元组。\n\n\n\n\n\n\n\n\n\nhttps://blog.csdn.net/practical_sharp/article/details/89484451\n(1）用 CREATE TABLE 语句创建上述三个表，需指出主键和外键。Use Master;\nGO\nCREATE Database emp1\nON \n(   NAME&#x3D;emp1,\n    FILENAME&#x3D;&#39;C:\\MSML\\sqlserver\\database\\emp.mdf&#39;,\n\tSIZE&#x3D;2,\n\tMAXSIZE&#x3D;unlimited,\n\tFILEGROWTH&#x3D;1\n)\nLOG ON\n(  NAME&#x3D;emp1_log,\n    FILENAME&#x3D;&#39;C:\\MSML\\sqlserver\\database\\emp.ldf&#39;,\n\tSIZE&#x3D;1,\n\tMAXSIZE&#x3D;unlimited,\n\tFILEGROWTH&#x3D;1\n)\nGO\nUse emp1;\n\n\n\nCREATE table EMP(\n\tENO VARCHAR(2) constraint pk_EMP primary key,\n\t\tEname VARCHAR(10) not null,\n\t\t\tage smallint CHECK(age&gt;0 AND age&lt;120),\n\t\t\t\tsex char(2) check ( sex in(&#39;男&#39;,&#39;女&#39;)),\n\t\t\t\t\tEcity varchar(12)\n);\nINSERT into EMP(ENO,Ename,age,sex,Ecity) VALUES (&#39;E1&#39;,&#39;流浪者&#39;,&#39;18&#39;,&#39;男&#39;,&#39;稻妻&#39;);\nINSERT into EMP(ENO,Ename,age,sex,Ecity) VALUES (&#39;E2&#39;,&#39;珐露珊&#39;,&#39;100&#39;,&#39;女&#39;,&#39;须弥&#39;);\nINSERT into EMP(ENO,Ename,age,sex,Ecity) VALUES (&#39;E3&#39;,&#39;优菈&#39;,&#39;24&#39;,&#39;女&#39;,&#39;蒙德&#39;);\nINSERT into EMP(ENO,Ename,age,sex,Ecity) VALUES (&#39;E4&#39;,&#39;纳西妲&#39;,&#39;8&#39;,&#39;女&#39;,&#39;须弥&#39;);\nINSERT into EMP(ENO,Ename,age,sex,Ecity) VALUES (&#39;E5&#39;,&#39;妮露&#39;,&#39;18&#39;,&#39;女&#39;,&#39;须弥&#39;);\nINSERT into EMP(ENO,Ename,age,sex,Ecity) VALUES (&#39;E6&#39;,&#39;赛诺&#39;,&#39;17&#39;,&#39;男&#39;,&#39;须弥&#39;);\nINSERT into EMP(ENO,Ename,age,sex,Ecity) VALUES (&#39;E7&#39;,&#39;达达利亚&#39;,&#39;26&#39;,&#39;男&#39;,&#39;至冬&#39;);\nINSERT into EMP(ENO,Ename,age,sex,Ecity) VALUES (&#39;E8&#39;,&#39;夜兰&#39;,&#39;26&#39;,&#39;女&#39;,&#39;璃月&#39;);\n\nCREATE TABLE COMP(\n\tCNO VARCHAR(4) Constraint pk_Comp primary key,\n\t\tCname VARCHAR(12)  Constraint u_Comp unique,\n\t\t\tCity VARCHAR(12) not null\n);\nINSERT into COMP(CNO,Cname,City) VALUES(&#39;C1&#39;,&#39;愚人众&#39;,&#39;至冬&#39;);\nINSERT into COMP(CNO,Cname,City) VALUES(&#39;C2&#39;,&#39;教令院&#39;,&#39;须弥&#39;);\nINSERT into COMP(CNO,Cname,City) VALUES(&#39;C3&#39;,&#39;西风骑士团&#39;,&#39;蒙德&#39;);\nINSERT into COMP(CNO,Cname,City) VALUES(&#39;C4&#39;,&#39;净善宫&#39;,&#39;须弥&#39;);\nINSERT into COMP(CNO,Cname,City) VALUES(&#39;C5&#39;,&#39;祖拜尔剧场&#39;,&#39;须弥&#39;);\nINSERT into COMP(CNO,Cname,City) VALUES(&#39;C6&#39;,&#39;缄默之殿&#39;,&#39;须弥&#39;);\nINSERT into COMP(CNO,Cname,City) VALUES(&#39;C7&#39;,&#39;海祇岛&#39;,&#39;稻妻&#39;);\nINSERT into COMP(CNO,Cname,City) VALUES(&#39;C8&#39;,&#39;璃月总务司&#39;,&#39;璃月&#39;);\nINSERT into COMP(CNO,Cname,City) VALUES(&#39;C9&#39;,&#39;社奉行&#39;,&#39;稻妻&#39;);\nINSERT into COMP(CNO,Cname,City) VALUES(&#39;C10&#39;,&#39;镀金旅团&#39;,&#39;须弥&#39;);\n\nCREATE TABLE Works(\n\tENO VARCHAR(2),\n\t\tC VARCHAR(4), \n\t\t\tSalary int check(salary&gt;0),\n\t\t\tConstraint fk_e foreign key(E) references EMP(ENO),\n\t\t\tConstraint fk_c foreign key(C) references COMP(CNO)\n);\nINSERT into Works(ENO,CNO,Salary) VALUES(&#39;E1&#39;,&#39;C3&#39;,&#39;200&#39;);\nINSERT into Works(ENO,CNO,Salary) VALUES(&#39;E1&#39;,&#39;C5&#39;,&#39;900&#39;);\nINSERT into Works(ENO,CNO,Salary) VALUES(&#39;E2&#39;,&#39;C1&#39;,&#39;3000&#39;);\nINSERT into Works(ENO,CNO,Salary) VALUES(&#39;E2&#39;,&#39;C2&#39;,&#39;1000&#39;);\nINSERT into Works(ENO,CNO,Salary) VALUES(&#39;E2&#39;,&#39;C8&#39;,&#39;500&#39;);\nINSERT into Works(ENO,CNO,Salary) VALUES(&#39;E2&#39;,&#39;C6&#39;,&#39;300&#39;);\nINSERT into Works(ENO,CNO,Salary) VALUES(&#39;E3&#39;,&#39;C3&#39;,&#39;320&#39;);\nINSERT into Works(ENO,CNO,Salary) VALUES(&#39;E3&#39;,&#39;C7&#39;,&#39;1050&#39;);\nINSERT into Works(ENO,CNO,Salary) VALUES(&#39;E3&#39;,&#39;C9&#39;,&#39;250&#39;);\nINSERT into Works(ENO,CNO,Salary) VALUES(&#39;E3&#39;,&#39;C10&#39;,&#39;120&#39;);\nINSERT into Works(ENO,CNO,Salary) VALUES(&#39;E4&#39;,&#39;C1&#39;,&#39;240&#39;);\nINSERT into Works(ENO,CNO,Salary) VALUES(&#39;E4&#39;,&#39;C4&#39;,&#39;20&#39;);\nINSERT into Works(ENO,CNO,Salary) VALUES(&#39;E4&#39;,&#39;C6&#39;,&#39;400&#39;);\nINSERT into Works(ENO,CNO,Salary) VALUES(&#39;E5&#39;,&#39;C5&#39;,&#39;600&#39;);\nINSERT into Works(ENO,CNO,Salary) VALUES(&#39;E5&#39;,&#39;C6&#39;,&#39;1200&#39;);\nINSERT into Works(ENO,CNO,Salary) VALUES(&#39;E5&#39;,&#39;C7&#39;,&#39;900&#39;);\nINSERT into Works(ENO,CNO,Salary) VALUES(&#39;E5&#39;,&#39;C4&#39;,&#39;200&#39;);\nINSERT into Works(ENO,CNO,Salary) VALUES(&#39;E6&#39;,&#39;C7&#39;,&#39;400&#39;);\nINSERT into Works(ENO,CNO,Salary) VALUES(&#39;E6&#39;,&#39;C8&#39;,&#39;5000&#39;);\nINSERT into Works(ENO,CNO,Salary) VALUES(&#39;E6&#39;,&#39;C4&#39;,&#39;200&#39;);\nINSERT into Works(ENO,CNO,Salary) VALUES(&#39;E6&#39;,&#39;C3&#39;,&#39;20&#39;);\nINSERT into Works(ENO,CNO,Salary) VALUES(&#39;E7&#39;,&#39;C1&#39;,&#39;300&#39;);\nINSERT into Works(ENO,CNO,Salary) VALUES(&#39;E7&#39;,&#39;C2&#39;,&#39;25&#39;);\nINSERT into Works(ENO,CNO,Salary) VALUES(&#39;E7&#39;,&#39;C3&#39;,&#39;650&#39;);\nINSERT into Works(ENO,CNO,Salary) VALUES(&#39;E8&#39;,&#39;C2&#39;,&#39;4200&#39;);\nINSERT into Works(ENO,CNO,Salary) VALUES(&#39;E8&#39;,&#39;C7&#39;,&#39;21&#39;);\n\n\n(2）检索超过35岁的男职工的工号和姓名。use emp1\nGO\nselect ENO,Ename from EMP where sex &#x3D; &#39;男&#39; AND age&gt;35;\n(3）假设每个职工只能在一个公司工作，检索工资超过1000元的男性职工的工号姓名。use emp1\nGO\nselect EMP.ENO,EMP.ENAME from EMP,WORKS\n\twhere EMP.ENO &#x3D; WORKS.E AND EMP.SEX &#x3D; &#39;男&#39; AND WORKS.SALARY&gt;1000;\n(4）假设每个职工可在多个公司工作，检索在编号为C4和C8公司兼职的职工的工号和姓名。use emp1\nGO\nselect ENO,Ename from EMP where ENO in\n\t(select DISTINCT E from WORKS where C &#x3D; &#39;C4&#39; OR C &#x3D; &#39;C8&#39;);\n(5）检索在“联华公司”工作，工资超过1000元的男性职工的工号和姓名。use emp1\nGO\nselect EMP.ENO,EMP.Ename from EMP,WORKS,COMP \n\t\twhere EMP.ENO &#x3D; WORKS.E AND COMP.CNO &#x3D; WORKS.C AND\n\t\t\t\tEMP.SEX &#x3D; &#39;男&#39; AND WORKS.SALARY&gt;1000 AND COMP.CNAME&#x3D;&#39;联华公司&#39;;\n(6）假设每个职工可在多个公司工作，检索每个职工的兼职公司数目和工资总数，显示（ ENO,NUМ,SUМ_ SALARY )，分别表示工号、公司数目和工资总数。select ENO,COUNT(CNO) NUM,Sum(salary) SUM_SALARY\n   from WORKS\n\t\t\tGROUP BY ENO\n\t\t\t\tORDER BY ENO;\n\n\n(7）工号为E6的职工在多个公司工作，试检索至少在E6职工兼职的所有公司工作的职工工号。select DISTINCT ENO from WORKS where CNO \n\t\tin (select CNO from WORKS where ENO &#x3D; &#39;E6&#39;)\n\t\t\tORDER BY ENO;\n\n(8）检索华联公司中低于本公可平均工资的职工的工号和姓名。select WORKS.ENO,EMP.ENAME from WORKS,EMP,  \n\t\t\t(select CNO,avg(salary) avg_SALARY\n\t\t\t\t\t\tfrom WORKS\n\t\t\t\t\t\t\twhere CNO in(select CNO from COMP where cname &#x3D; &#39;联华公司&#39;)\n\t\t\t\t\t\t\t\t\tGROUP BY CNO)tb   \n\t\twhere WORKS.CNO&#x3D;TB.CNO AND EMP.ENO  &#x3D; WORKS.ENO AND  WORKS.SALARY&lt;TB.AVG_SALARY;\n在这里我们创建表的时候没有给出华联公司的信息，用 “教令院”替代\nselect WORKS.ENO,EMP.ENAME from WORKS,EMP,  \n\t\t\t(select CNO,avg(salary) avg_SALARY\n\t\t\t\t\t\tfrom WORKS\n\t\t\t\t\t\t\twhere CNO in(select CNO from COMP where cname &#x3D; &#39;教令院&#39;)\n\t\t\t\t\t\t\t\t\tGROUP BY CNO)tb   \n\t\twhere WORKS.CNO&#x3D;TB.CNO AND EMP.ENO  &#x3D; WORKS.ENO AND  WORKS.SALARY&lt;TB.AVG_SALARY;\n\n(9）在每一公司中为60岁以上职工加薪100元（若职工为多个公司工作，可重复加）。update WORKS set SALARY &#x3D; SALARY+100\n\twhere ENO in\n\t\t(select ENO from EMP where EMP.age&gt;60);\n(10)在 EMP 表和WORKS表中删除年龄大于60岁的职工有关元组。delete  from WORKS where ENO in\n\t(select ENO from EMP where age&gt;60);\ndelete from EMP where age&gt;60;\n","slug":"数据库期中","date":"2022-11-10T12:55:49.000Z","categories_index":"信管","tags_index":"SQL,数据库","author_index":"Algernon"},{"id":"0d120f5730c7a7a14db4689c0e15f358","title":"【区块链技术与应用】（六）","content":"\n引言本次任务相对顺利，因为是已经打包的案例。不过二三案例中不像案例一中有go的chaincode,执行需要花时间debug\n案例链接：\n\n\n\n\n\n\n\n\n\nhttps://pkg.go.dev/github.com/hyperledger/fabric-gateway/pkg/client#section-readme\n案例一：资产转移基本示例代码分析资产转移基本示例演示：\n\n将客户端应用程序连接到 Fabric 区块链网络。\n提交智能合约交易以更新账本状态。\n评估智能合约交易以查询账本状态。\n处理事务调用中的错误。\n\n\n\n\n\n\n\n\n\n\nhttps://blog.csdn.net/ling1998/article/details/127202209\n链码启动项目地址：\n\n\n\n\n\n\n\n\n\nhttps://github.com/hyperledger/fabric-samples/blob/main/asset-transfer-basic/chaincode-go/assetTransfer.go\n&#x2F;*\nSPDX-License-Identifier: Apache-2.0\n*&#x2F;\n\npackage main\n\nimport (\n\t&quot;log&quot;\n\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-contract-api-go&#x2F;contractapi&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-samples&#x2F;asset-transfer-basic&#x2F;chaincode-go&#x2F;chaincode&quot;\n)\n\nfunc main() &#123;\n\tassetChaincode, err :&#x3D; contractapi.NewChaincode(&amp;chaincode.SmartContract&#123;&#125;)\n\tif err !&#x3D; nil &#123;\n\t\tlog.Panicf(&quot;Error creating asset-transfer-basic chaincode: %v&quot;, err)\n\t&#125;\n\n\tif err :&#x3D; assetChaincode.Start(); err !&#x3D; nil &#123;\n\t\tlog.Panicf(&quot;Error starting asset-transfer-basic chaincode: %v&quot;, err)\n\t&#125;\n&#125;\n链码结构asset-transfer-basic/chaincode-go/chaincode/smartcontract.go\ntype SmartContract struct &#123;\n\tcontractapi.Contract\n&#125;\n完整代码package chaincode\n\nimport (\n\t&quot;encoding&#x2F;json&quot;\n\t&quot;fmt&quot;\n\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-contract-api-go&#x2F;contractapi&quot;\n)\n\n&#x2F;&#x2F; SmartContract provides functions for managing an Asset\ntype SmartContract struct &#123;\n\tcontractapi.Contract\n&#125;\n\n&#x2F;&#x2F; Asset describes basic details of what makes up a simple asset\n&#x2F;&#x2F;Insert struct field in alphabetic order &#x3D;&gt; to achieve determinism across languages\n&#x2F;&#x2F; golang keeps the order when marshal to json but doesn&#39;t order automatically\ntype Asset struct &#123;\n\tAppraisedValue int    &#96;json:&quot;AppraisedValue&quot;&#96;\n\tColor          string &#96;json:&quot;Color&quot;&#96;\n\tID             string &#96;json:&quot;ID&quot;&#96;\n\tOwner          string &#96;json:&quot;Owner&quot;&#96;\n\tSize           int    &#96;json:&quot;Size&quot;&#96;\n&#125;\n\n&#x2F;&#x2F; InitLedger adds a base set of assets to the ledger\nfunc (s *SmartContract) InitLedger(ctx contractapi.TransactionContextInterface) error &#123;\n\tassets :&#x3D; []Asset&#123;\n\t\t&#123;ID: &quot;asset1&quot;, Color: &quot;blue&quot;, Size: 5, Owner: &quot;Tomoko&quot;, AppraisedValue: 300&#125;,\n\t\t&#123;ID: &quot;asset2&quot;, Color: &quot;red&quot;, Size: 5, Owner: &quot;Brad&quot;, AppraisedValue: 400&#125;,\n\t\t&#123;ID: &quot;asset3&quot;, Color: &quot;green&quot;, Size: 10, Owner: &quot;Jin Soo&quot;, AppraisedValue: 500&#125;,\n\t\t&#123;ID: &quot;asset4&quot;, Color: &quot;yellow&quot;, Size: 10, Owner: &quot;Max&quot;, AppraisedValue: 600&#125;,\n\t\t&#123;ID: &quot;asset5&quot;, Color: &quot;black&quot;, Size: 15, Owner: &quot;Adriana&quot;, AppraisedValue: 700&#125;,\n\t\t&#123;ID: &quot;asset6&quot;, Color: &quot;white&quot;, Size: 15, Owner: &quot;Michel&quot;, AppraisedValue: 800&#125;,\n\t&#125;\n\n\tfor _, asset :&#x3D; range assets &#123;\n\t\tassetJSON, err :&#x3D; json.Marshal(asset)\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn err\n\t\t&#125;\n\n\t\terr &#x3D; ctx.GetStub().PutState(asset.ID, assetJSON)\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn fmt.Errorf(&quot;failed to put to world state. %v&quot;, err)\n\t\t&#125;\n\t&#125;\n\n\treturn nil\n&#125;\n\n&#x2F;&#x2F; CreateAsset issues a new asset to the world state with given details.\nfunc (s *SmartContract) CreateAsset(ctx contractapi.TransactionContextInterface, id string, color string, size int, owner string, appraisedValue int) error &#123;\n\texists, err :&#x3D; s.AssetExists(ctx, id)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\tif exists &#123;\n\t\treturn fmt.Errorf(&quot;the asset %s already exists&quot;, id)\n\t&#125;\n\n\tasset :&#x3D; Asset&#123;\n\t\tID:             id,\n\t\tColor:          color,\n\t\tSize:           size,\n\t\tOwner:          owner,\n\t\tAppraisedValue: appraisedValue,\n\t&#125;\n\tassetJSON, err :&#x3D; json.Marshal(asset)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\n\treturn ctx.GetStub().PutState(id, assetJSON)\n&#125;\n\n&#x2F;&#x2F; ReadAsset returns the asset stored in the world state with given id.\nfunc (s *SmartContract) ReadAsset(ctx contractapi.TransactionContextInterface, id string) (*Asset, error) &#123;\n\tassetJSON, err :&#x3D; ctx.GetStub().GetState(id)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, fmt.Errorf(&quot;failed to read from world state: %v&quot;, err)\n\t&#125;\n\tif assetJSON &#x3D;&#x3D; nil &#123;\n\t\treturn nil, fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n\t&#125;\n\n\tvar asset Asset\n\terr &#x3D; json.Unmarshal(assetJSON, &amp;asset)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\n\treturn &amp;asset, nil\n&#125;\n\n&#x2F;&#x2F; UpdateAsset updates an existing asset in the world state with provided parameters.\nfunc (s *SmartContract) UpdateAsset(ctx contractapi.TransactionContextInterface, id string, color string, size int, owner string, appraisedValue int) error &#123;\n\texists, err :&#x3D; s.AssetExists(ctx, id)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\tif !exists &#123;\n\t\treturn fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n\t&#125;\n\n\t&#x2F;&#x2F; overwriting original asset with new asset\n\tasset :&#x3D; Asset&#123;\n\t\tID:             id,\n\t\tColor:          color,\n\t\tSize:           size,\n\t\tOwner:          owner,\n\t\tAppraisedValue: appraisedValue,\n\t&#125;\n\tassetJSON, err :&#x3D; json.Marshal(asset)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\n\treturn ctx.GetStub().PutState(id, assetJSON)\n&#125;\n\n&#x2F;&#x2F; DeleteAsset deletes an given asset from the world state.\nfunc (s *SmartContract) DeleteAsset(ctx contractapi.TransactionContextInterface, id string) error &#123;\n\texists, err :&#x3D; s.AssetExists(ctx, id)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\tif !exists &#123;\n\t\treturn fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n\t&#125;\n\n\treturn ctx.GetStub().DelState(id)\n&#125;\n\n&#x2F;&#x2F; AssetExists returns true when asset with given ID exists in world state\nfunc (s *SmartContract) AssetExists(ctx contractapi.TransactionContextInterface, id string) (bool, error) &#123;\n\tassetJSON, err :&#x3D; ctx.GetStub().GetState(id)\n\tif err !&#x3D; nil &#123;\n\t\treturn false, fmt.Errorf(&quot;failed to read from world state: %v&quot;, err)\n\t&#125;\n\n\treturn assetJSON !&#x3D; nil, nil\n&#125;\n\n&#x2F;&#x2F; TransferAsset updates the owner field of asset with given id in world state, and returns the old owner.\nfunc (s *SmartContract) TransferAsset(ctx contractapi.TransactionContextInterface, id string, newOwner string) (string, error) &#123;\n\tasset, err :&#x3D; s.ReadAsset(ctx, id)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, err\n\t&#125;\n\n\toldOwner :&#x3D; asset.Owner\n\tasset.Owner &#x3D; newOwner\n\n\tassetJSON, err :&#x3D; json.Marshal(asset)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, err\n\t&#125;\n\n\terr &#x3D; ctx.GetStub().PutState(id, assetJSON)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, err\n\t&#125;\n\n\treturn oldOwner, nil\n&#125;\n\n&#x2F;&#x2F; GetAllAssets returns all assets found in world state\nfunc (s *SmartContract) GetAllAssets(ctx contractapi.TransactionContextInterface) ([]*Asset, error) &#123;\n\t&#x2F;&#x2F; range query with empty string for startKey and endKey does an\n\t&#x2F;&#x2F; open-ended query of all assets in the chaincode namespace.\n\tresultsIterator, err :&#x3D; ctx.GetStub().GetStateByRange(&quot;&quot;, &quot;&quot;)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\tdefer resultsIterator.Close()\n\n\tvar assets []*Asset\n\tfor resultsIterator.HasNext() &#123;\n\t\tqueryResponse, err :&#x3D; resultsIterator.Next()\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn nil, err\n\t\t&#125;\n\n\t\tvar asset Asset\n\t\terr &#x3D; json.Unmarshal(queryResponse.Value, &amp;asset)\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn nil, err\n\t\t&#125;\n\t\tassets &#x3D; append(assets, &amp;asset)\n\t&#125;\n\n\treturn assets, nil\n&#125;\n运行创建测试网络和通道.&#x2F;network.sh up createChannel -c mychannel -ca\n\n部署实现其中一个智能合约# To deploy the TypeScript chaincode implementation\n.&#x2F;network.sh deployCC -ccn basic -ccp ..&#x2F;asset-transfer-basic&#x2F;chaincode-typescript&#x2F; -ccl typescript\n\n# To deploy the Go chaincode implementation\n.&#x2F;network.sh deployCC -ccn basic -ccp ..&#x2F;asset-transfer-basic&#x2F;chaincode-go&#x2F; -ccl go\n\n# To deploy the Java chaincode implementation\n.&#x2F;network.sh deployCC -ccn basic -ccp ..&#x2F;asset-transfer-basic&#x2F;chaincode-java&#x2F; -ccl java\n\n运行应用程序# To run the Typescript sample application\ncd application-gateway-typescript\nnpm install\nnpm start\n\n# To run the Go sample application\ncd application-gateway-go\ngo run .\n\n# To run the Java sample application\ncd application-gateway-java\n.&#x2F;gradlew run\n\n结束.&#x2F;network.sh down\n案例二：资产转移事件示例资产转移事件示例演示：\n从智能合约交易函数发出链码事件。在客户端应用程序中接收链码事件。在客户端应用程序中重放以前的链码事件。\n运行创建测试网络和通道.&#x2F;network.sh up createChannel -c mychannel -ca\n\n部署实现其中一个智能合约# To deploy the JavaScript chaincode implementation\n.&#x2F;network.sh deployCC -ccn events -ccp ..&#x2F;asset-transfer-events&#x2F;chaincode-javascript&#x2F; -ccl javascript -ccep &quot;OR(&#39;Org1MSP.peer&#39;,&#39;Org2MSP.peer&#39;)&quot;\n\n# To deploy the Java chaincode implementation\n.&#x2F;network.sh deployCC -ccn events -ccp ..&#x2F;asset-transfer-events&#x2F;chaincode-java&#x2F; -ccl java -ccep &quot;OR(&#39;Org1MSP.peer&#39;,&#39;Org2MSP.peer&#39;)&quot;\n\n运行应用程序（从文件夹）asset-transfer-events\n# To run the Go sample application\ncd application-gateway-go\ngo run .\n\n# To run the Typescript sample application\ncd application-gateway-typescript\nnpm install\nnpm start\n\n# To run the Java sample application\ncd application-gateway-java\n.&#x2F;gradlew run\n\n结束回到test-network\n.&#x2F;network.sh down\n案例三：链下数据存储示例链下数据存储示例演示：\n\n在客户端应用程序中接收块事件。\n使用检查指针在发生故障或应用程序重新启动后恢复事件侦听。\n从区块事件中提取账本更新，以构建链下数据存储。\n\n运行创建测试网络和通道.&#x2F;network.sh up createChannel -c mychannel -ca\n\n部署资产转移基本智能合约实现之一# To deploy the TypeScript chaincode implementation\n.&#x2F;network.sh deployCC -ccn basic -ccp ..&#x2F;asset-transfer-basic&#x2F;chaincode-typescript&#x2F; -ccl typescript\n\n# To deploy the Go chaincode implementation\n.&#x2F;network.sh deployCC -ccn basic -ccp ..&#x2F;asset-transfer-basic&#x2F;chaincode-go&#x2F; -ccl go\n\n# To deploy the Java chaincode implementation\n.&#x2F;network.sh deployCC -ccn basic -ccp ..&#x2F;asset-transfer-basic&#x2F;chaincode-java&#x2F; -ccl java\n\n用一些资产填充账本，并使用事件来捕获账本更新从文件夹）。off_chain_data\n# To run the TypeScript sample application\ncd application-typescript\nnpm install\nnpm start transact listen\n\n# To run the Java sample application\ncd application-java\n.&#x2F;gradlew run --quiet --args&#x3D;&#39;transact listen&#39;\n使用Control-C 中断侦听器进程查看区块链的当前世界状态off_chain_datastore.log# To run the TypeScript sample application\ncd application-typescript\nnpm --silent start getAllAssets\n\n# To run the Java sample application\ncd application-java\n.&#x2F;gradlew run --quiet --args&#x3D;getAllAssets\n进行更多账本更新，然后观察侦听器恢复功能# To run the TypeScript sample application\ncd application-typescript\nnpm start transact\nSIMULATED_FAILURE_COUNT&#x3D;5 npm start listen\nnpm start listen\n\n# To run the Java sample application\ncd application-java\n.&#x2F;gradlew run --quiet --args&#x3D;transact\nSIMULATED_FAILURE_COUNT&#x3D;5 .&#x2F;gradlew run --quiet --args&#x3D;listen\n.&#x2F;gradlew run --quiet --args&#x3D;listen\n\n总结本周主要进行了三个案例的实战，跑代码很顺利所以心情也很好。需要注意的一点是，案例中同时给出了java和go的代码，第一次把两个都跑了，事实上只需要选择一个就可。建议还是用go。第一部分的资产转移案例还有拓展内容，可以作为参考\n\n\n\n\n\n\n\n\n\nhttps://blog.csdn.net/ling1998/article/details/127202209\n","slug":"区块链6","date":"2022-11-10T03:23:49.000Z","categories_index":"信管","tags_index":"区块链","author_index":"Algernon"},{"id":"08a3724cd6c5748cb3a50ed908393323","title":"SQL语言（二）数据更新","content":"数据更新数据更新操作有三种：\n\n向表中添加若干行数据\n修改表中的数据\n删除表中的若干行数据\n\n在SQL中有相应的三类语句\n插入数据插入语句INSERT通常有两种形式，一种是插入一个元组，另一种是插入子查询的结果。后者可以一次插入多个元组。\n插入元组将一个新学生元组插入到Student表中use school1\nGO\nINSERT\nINTO Student(Sno,Sname,Ssex,Sdept,Sage)\nVALUES(&#39;S07&#39;,&#39;陈冬&#39;,&#39;男&#39;,&#39;软件工程&#39;,18)\n修改前：修改后：\n对每一个系，求学生的平均年龄，并把结果存入数据库首先在数据库中建立一个新表，其中一列存放系名，另一列存放相应的学生平均年龄。\nCREATE TABLE Dept_age\n         (Sdept CHAR(15)\n\t\t    Avg_age SMALLINT)\n然后对Student表按系分组表示平均年龄，再把系名和平均年龄存入新表中。\nINSERT \nINTO Dept_age(Sdept,Avg_age)\nSELECT Sdept.AVG(Sage)\nFROM Student\nGROUP BY Sdept\n修改数据将学生的年龄改为22岁修改前：修改后：\n将所有学生的年龄都增加一岁use school1\nGO\nUPDATE Student\nSET Sage&#x3D;Sage+1\n将计算机科学系全体学生的成绩置零use school1\nGO\nUPDATE SC\nSET Grade&#x3D;0\nWHERE Sno IN \n     (SELECT Sno\n\t  FROM Student\n\t  WHERE Sdept&#x3D;&#39;计算机&#39;\t \n\t )\n删除数据删除某一个学生的学生记录\nuse school1\nGO\nDELETE \nFROM Student\nWHERE Sno&#x3D;&#39;S07&#39;\n\n修改前：修改后：\n空值处理选出选修1号课程的不及格的学生及缺考的学生use school1\nGO\nSELECT Sno\nFROM SC\nWHERE Grade&lt;60 AND Cno&#x3D;&#39;C01&#39;\nUNION\nSELECT Sno\nFROM SC\nWHERE Grade IS NULL  AND Cno&#x3D;&#39;CO1&#39;\n视图定义视图建立数学系学生的视图use school1\nGO\nCREATE VIEW IS_Student\nAS\nSELECT Sno,Sname,Sage\nFROM Student\nWHERE Sdept&#x3D;&#39;数学&#39;\n\n\n建立数学系学生的视图，并要求进行修改和插入操作时仍需保证该视图只有数学系的学生use school1\nGO\nCREATE VIEW IS_Student\nAS\nSELECT Sno,Sname,Sage\nFROM Student\nWHERE Sdept&#x3D;&#39;数学&#39;\nWITH CHECK OPTION\n建立自动化系选修了1号课程的学生的视图（包括学号、姓名、成绩）use school1\nGO\nCREATE VIEW IS_S1tudent(Sno,Sname,Grade)\nAS\nSELECT Student.Sno,Sname,Grade\nFROM Student,SC\nWHERE Sdept&#x3D;&#39;自动化&#39;AND Student.Sno&#x3D;SC.Sno AND SC.Cno&#x3D;&#39;C01&#39;\n\n定义一个反映学生出生年份的视图use school1\nGO\nCREATE VIEW BT_S(Sno,Sname,Sbirth)\nAS\nSELECT Sno,Sname,2014-Sage\nFROM Student\n\n将学生的学号及平均成绩定义为一个视图use school1\nGO\nCREATE VIEW S_G(Sno,Gavg)\nAS\nSELECT Sno,AVG(Grade)\nFROM SC\nGROUP BY Sno\n\n\n删除视图删除视图BT_S和视图IS_SI\nuse school1\nGO\nDROP VIEW BT_S\nDROP VIEW IS_S1tudent\n查询视图在数学系学生的视图中找出年龄小于20岁的学生use school1\nGO\nSELECT Sno,Sage\nFROM IS_Student\nWHERE Sage&lt;20\n\n在S_G视图中查询平均成绩在80分以上的学生学号和平均成绩use school1\nGO\nSELECT Sno,AVG(Grade)\nFROM SC\nGROUP BY Sno\nHAVING AVG(Grade)&gt;&#x3D;80\n\n更新视图更新视图是指通过视图来插入、删除和修改数据。由于视图是不实际存储数据的虚表，因此对视图的更新最终要转换为对基本表的更新将数学系学生视图IS_Student中学号为“S06”的学生姓名改为“长江”\nuse school1\nGO\nUPDATE IS_Student\nSET Sname&#x3D;&#39;长江&#39;\nWHERE Sno&#x3D;&#39;S06&#39;  \n","slug":"sql2","date":"2022-11-09T03:16:49.000Z","categories_index":"信管","tags_index":"SQL,数据库","author_index":"Algernon"},{"id":"894e67d0692c95671030339fe71cd366","title":"SQL语言(一)数据查询","content":"数据查询数据查询一般格式为：\nSELECT [ALL|DISTINCT]&lt;目标列表达式&gt;[,&lt;目标列表达式&gt;]···\nFROM&lt;表名或视图名&gt;[,&lt;表名或视图名&gt;···]|(&lt;SELECT语句&gt;)[AS]&lt;别名&gt;\n[WHERE&lt;条件表达式&gt;]\n[GROUP BY&lt;列名1&gt;[HAVING&lt;条件表达式&gt;]]\n[ORDER BY&lt;列名2&gt;[ASC |DESC]];\n整个SELECT语句的含义是，根据WHERE子句的条件表达式从FROM子句指定的基本表、视图或派生表中找出满足条件的元组，再按SELECT子句中的目标列表达式选出元组中的属性值形成结果表。\n如果有GROUP BY 子句，则将结果按&lt;列名1&gt;的值进行分组，该属性列值相等的元组为一个组。通常会在每组中作用聚集函数。如果GROUP BY子句带HAVING短语，则只有满足指定条件的组才予以输出。\n如果有ORDER BY子句，则结果表还要按照&lt;列名2&gt;的值的升序或降序排序。\n单表查询查询全体学生的姓名、学号、所在系Use school1\nGO\nSELECT Sname,Sno,Sdept\nFROM Student\n\n查询每个学生的详细记录Use school1\nGO\nSELECT *\nFROM Student\n\n查询全体学生的姓名及其出生年份Use school1\nGO\nSELECT Sname,2014-Sage &#x2F;* 查询结果的第二列是一个算数表达式*&#x2F;\nFROM Student\n\n查询全体学生的姓名、出生年份和所在的院系，要求用小写字母表示系名Use school1\nGO\nSELECT Sname,&#39;Year of Birth&#39;,2014-Sage,LOWER(Sdept) \nFROM Student\n可以通过指定别名来改变查询结果的列标题\nUse school1\nGO\nSELECT Sname,&#39;Year of Birth&#39;,2014-Sage BIRTHDAY,LOWER(Sdept) DEPARTMENT\nFROM Student\n消除重复的行\n查询选修了课程的学生学号Use school1\nGO\nSELECT Sno\nFROM SC\n查询结果中包含了许多重复的行。我们可以指定DISTINCT来去掉表中的重复行。\nUse school1\nGO\nSELECT DISTINCT Sno\nFROM SC\n\nWHERE子句常用查询条件\n\n\n\n查询条件\n谓词\n\n\n\n\n比较\n=,&gt;,&lt;,&gt;=,&lt;=,!=,&lt;&gt;,!&gt;,!&lt;;NOT+上述比较运算符\n\n\n确定范围\nBETWEEN AND,NOT BETWEEN AND\n\n\n确定集合\nIN,NOT IN\n\n\n字符匹配\nLIKE,NOT LIKE\n\n\n空值\nIS NOLL,IS NOT NULL\n\n\n多重条件（逻辑运算）\nAND,OR,NOT\n\n\n\n\n查询所有年龄在20岁以下的学生姓名及其年龄Use school1\nGO\nSELECT Sname,Sage\nFROM Student\nWHERE Sage&lt;20;\n\n查询年龄不在20~23岁之间的学生姓名、系别和年龄Use school1\nGO\nSELECT Sname,Sdept,Sage\nFROM Student\nWHERE Sage NOT BETWEEN 20 AND 23;\n谓词IN可以用来查找属性值属于指定集合的元组。查找计算机科学系（CS）、数学系（MA）和信息系（IS）学生的姓名和性别。\nUse school1\nGO\nSELECT Sname,Ssex\nFROM Student\nWHERE Sdept IN (&#39;计算机&#39;,&#39;数学&#39;,&#39;信息&#39;);\n\n字符匹配谓词LIKE可以用来进行字符串的匹配。\n查询所有姓刘的同学的姓名、学号和 性别。Use school1\nGO\nSELECT Sname,Sno,Ssex\nFROM Student\nWHERE Sname LIKE &#39;刘%&#39;\n\n查询姓“范”且全名为三个汉字的学生的姓名Use school1\nGO\nSELECT Sname\nFROM Student\nWHERE Sname LIKE &#39;范__&#39;;\n\n查询名字中第二个字为“林”的学生的姓名和学号Use school1\nGO\nSELECT Sname\nFROM Student\nWHERE Sname LIKE &#39;_林%&#39;;\n\n查询缺少成绩的学生的学号和相应的课程号某些学生选修课程后没有参加考试，所以有选课记录，但没有考试成绩。查询缺少成绩的学生的学号和相应的课程号。\nUse school1\nGO\nSELECT Sno,Cno\nFROM SC\nWHERE Grade IS  NULL;\n注意，这里的IS不能用等号代替。\nORDER BY 子句用户可以用ORDER BY子句对查询结果按照一个或多个属性列的升序（ASC）或降序（DESC）排列，默认值为升序。\n查询全体学生情况，查询结果按所在系的系号升序排列，同一系中的学生按年龄降序排列Use school1\nGO\nSELECT *\nFROM Student\nORDER BY Sdept,Sage DESC;\n\n聚集函数\n\n\n\nCOUNT(*)\n统计元组个数\n\n\n\n\nCOUNT([DISTINCT   ALL])&lt;列名&gt;\n统计一列中值的个数\n\n\nSUM\n计算一列值的总和（此列必须是数值型）\n\n\nAVG\n计算一列值的平均值（此列必须是数值型）\n\n\nMAX\n求一列值中的最大值\n\n\nMIN\n求一列值中的最小值\n\n\n\n\n查询学生总人数Use school1\nGO\nSELECT COUNT(*)\nFROM Student\n\n查询选修了课程的学生人数Use school1\nGO\nSELECT COUNT(DISTINCT Sno)\nFROM SC\n\n计算选修1号课程的学生平均成绩Use school1\nGO\nSELECT AVG(Grade)\nFROM SC\nWHERE Cno&#x3D;&#39;C01&#39;\n\n查询选修1号课程的学生的最高分数Use school1\nGO\nSELECT MAX(Grade)\nFROM SC\nWHERE Cno&#x3D;&#39;C01&#39;\n\n查询学生S01选秀课程的总学分数Use school1\nGO\nSELECT SUM(Credit)\nFROM SC,Course\nWHERE Sno&#x3D;&#39;S01&#39; AND SC.Cno&#x3D;Course.Cno\n验证：\nGROUP BY 子句GROUP BY子句将查询结果按某一列或多列的值分组，值相等的为一组。\n分组后聚集函数将作用于每一个组，即每一个组都有一个函数值。\n求各个课程号及相应的选课人数Use school1\nGO\nSELECT Cno,COUNT(Sno)\nFROM SC\nGROUP BY Cno\n\n查询选修了三门及以上课程的学生学号Use school1\nGO\nSELECT Sno\nFROM SC\nGROUP BY Sno\nHAVING COUNT(*)&gt;&#x3D;3\n\n查询平均成绩大于等于80分的学生学号和平均成绩Use school1\nGO\nSELECT Sno,AVG(Grade)\nFROM SC\nGROUP BY Sno\nHAVING AVG(Grade)&gt;&#x3D;80\n\n连接查询等值与非等值连接查询查询每个学生及其选修课程的情况Use school1\nGO\nSELECT Student.*,SC.*\nFROM Student,SC\nWHERE Student.Sno&#x3D;SC.Sno\n\n查询选修2号课程且成绩在90分以上的所有学生的学号和姓名Use school1\nGO\nSELECT Student.Sno,Sname\nFROM Student,SC\nWHERE Student.Sno&#x3D;SC.Sno AND SC.Cno&#x3D;&#39;C02&#39; AND SC.Grade&gt;90\n\n自身连接连接操作不仅可以在两个表中进行，也可以是一个表与其自己进行连接，称为表的自身连接。\n查询每一门课的间接先修课Use school1\nGO\nSELECT FIRST.Cno,SECOND.Pre_Cno\nFROM Course FIRST,Course SECOND\nWHERE FIRST.Cno&#x3D;SECOND.Pre_Cno\n\n外连接查询填入空值在“查询每个学生及其选修课程的情况”中，没有选课的学生没有数据，如果想要这些学生的数据，而选课填上空值NULL，则可以使用外连接：\nUse school1\nGO\nSELECT Student.Sno,Sname,Cno,Grade\nFROM Student LEFT OUTER JOIN SC ON (Student.Sno&#x3D;SC.Sno)\n\n多表连接查询每个学生的学号、姓名、选修的课程名及成绩Use school1\nGO\nSELECT Student.Sno,Sname,Cname,Grade\nFROM Student,SC,Course\nWHERE Student.Sno&#x3D;SC.Sno AND SC.Cno&#x3D;Course.Cno\n\n嵌套查询在SQL语言中，一个SELECT-FROM-WHERE语句称为一个查询块。将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询称为嵌套查询。\n带有IN谓词的子查询查询与“李伟”在同一个系学习的学生Use school1\nGO\nSELECT Sno,Sname,Sdept\nFROM Student\nWHERE Sdept IN \n      (SELECT Sdept\n\t   FROM Student\n\t   WHERE Sname&#x3D;&#39;李伟&#39;\t  \n\t  )\n\n查询选修了课程名为“数据库”的学生学号和姓名Use school1\nGO\nSELECT Sno,Sname\n\nFROM Student\nWHERE Sno IN \n      (SELECT Sno\n\t   FROM SC\n\t   WHERE Cno IN \n\t              (SELECT Cno\n\t\t\t\t   FROM Course\n\t\t\t\t   WHERE Cname&#x3D;&#39; 数据库&#39;\t        \t  \n\t               )\t  \n\t  );\n     \t  \n\t        \n\n带有比较运算符的子查询找出每个学生超过他自己选修课程平均成绩的课程号Use school1\nGO\nSELECT Sno,Cno\nFROM SC x\nWHERE Grade &gt;&#x3D; (SELECT AVG(Grade)\n                 FROM SC y\n\t\t\t\t WHERE y.Sno&#x3D;x.Sno\n                )\n\n查询非计算机科学系中比计算机科学系任意一个学生年龄大的学生姓名和年龄Use school1\nGO\nSELECT\tSname,Sage\nFROM Student\nWHERE Sage&gt;ANY(SELECT Sage \n               FROM Student\n\t\t\t   WHERE Sdept&#x3D;&#39;计算机&#39;)\nAND Sdept&lt;&gt;&#39;CS&#39;\n\n带有EXITS谓词的子查询带有EXITS谓词的子查询不返回任何数据，只产生逻辑真值true或逻辑假值false\n查询所有选修了1号课程的学生姓名Use school1\nGO\nSELECT\tSname\nFROM Student\nWHERE EXISTS(\n              SELECT *\n\t\t\t  FROM SC\n\t\t\t  WHERE Sno&#x3D;Student.Sno AND Cno&#x3D;&#39;C01&#39;\n             )\n使用存在量词EXISTS后，若内层查询结果非空，则外层的WHERE子句返回真值，否则返回假值。\n查询没有选修1号课程的学生姓名Use school1\nGO\nSELECT\tSname\nFROM Student\nWHERE NOT EXISTS(\n              SELECT *\n\t\t\t  FROM SC\n\t\t\t  WHERE Sno&#x3D;Student.Sno AND Cno&#x3D;&#39;C01&#39;\n             )\n\n查询选修了全部课程的学生姓名SQL中没有全称量词，可以将题目的意思转换成等价的用存在量词的形式：查询这样的学生，没有一门课程是他不选修的\nUse school1\nGO\nSELECT\tSname\nFROM Student\nWHERE NOT EXISTS(\n              SELECT *\n\t\t\t  FROM Course\n\t\t\t  WHERE NOT EXISTS(\n\t\t\t                    SELECT *\n\t\t\t\t\t\t\t\tFROM SC\n\t\t\t\t\t\t\t\tWHERE Sno&#x3D;Student.Sno AND Cno&#x3D;Course.Cno\n\t\t\t                  )\n             )\n答案是并没有这样的卷王\n集合查询SELECT语句的查询结果是元组的集合，所以多个SELECT语句的结果可进行集合操作。\n集合操作主要包括并操作UNION、交操作INTERSECT和差操作EXCEPT注意，参加集合操作的各查询结果的列数必须相同；对应项的数据类型也必须相同\n查询数学系的学生及年龄不大于19岁的学生Use school1\nGO\nSELECT\t*\nFROM Student\nWHERE Sdept&#x3D;&#39;数学&#39;\nUNION\nSELECT *\nFROM Student\nWHERE Sage&lt;&#x3D;19\n\n查询选修了课程1或者选修了课程2的学生本例即查询选修课程1与选修课程2的学生集合的并集\nUse school1\nGO\nSELECT\tSno\nFROM SC\nWHERE Cno&#x3D;&#39;C01&#39;\nUNION\nSELECT Sno\nFROM SC\nWHERE Cno&#x3D;&#39;C02&#39;\n\n查询数学系的学生与年龄不大于19岁的学生的交集Use school1\nGO\nSELECT\t*\nFROM Student\nWHERE Sdept&#x3D;&#39;数学&#39;\nINTERSECT\nSELECT *\nFROM Student\nWHERE Sage&lt;&#x3D;19\n\n查询既选修课课程1又选修了课程2的学生就是查询选修课程1的学生集合与选修课程2的学生集合的交集\nUse school1\nGO\nSELECT\tSno\nFROM SC\nWHERE Cno&#x3D;&#39;C01&#39;\nINTERSECT\nSELECT\tSno\nFROM SC\nWHERE Cno&#x3D;&#39;C02&#39;\n\n查询数学系的学生与年龄不大于19岁的学生的差集Use school1\nGO\nSELECT\t*\nFROM Student\nWHERE Sdept&#x3D;&#39;数学&#39;\nEXCEPT\nSELECT *\nFROM Student\nWHERE Sage&lt;&#x3D;19\n\n","slug":"sql1","date":"2022-11-08T13:30:49.000Z","categories_index":"","tags_index":"SQL,数据库","author_index":"Algernon"},{"id":"a49a00560b25464fbef355e1b153e4e1","title":"【文本分析】（三）","content":"\n\n\n\n\n\n\n\n\nhttps://zhuanlan.zhihu.com/p/109110105\n文本资料下载\n数据集制作文字存入word文本加入txt\n分词import jieba\nimport jieba.analyse\nimport jieba\nimport jieba.posseg as psg\nfrom collections import Counter\n# 待分词的文本路径\nsourceTxt &#x3D; r&quot;C:\\\\Users\\\\83854\\\\Documents\\\\shujvji\\bili\\\\2022-1.txt&quot;\n# 分好词后的文本路径\ntargetTxt &#x3D; r&quot;C:\\\\Users\\\\83854\\\\Documents\\\\shujvji\\\\bili\\\\fenci2.txt&quot;\n\n# 对文本进行操作\n\nwith open(sourceTxt, &#39;r&#39;, encoding &#x3D; &#39;utf-8&#39;) as sourceFile, open(targetTxt, &#39;a+&#39;, encoding &#x3D; &#39;utf-8&#39;) as targetFile:\n    for line in sourceFile:\n        seg &#x3D; jieba.cut(line.strip(), cut_all &#x3D; False)\n        # 分好词之后之间用空格隔断\n        output &#x3D; &#39; &#39;.join(seg)\n        targetFile.write(output)\n        targetFile.write(&#39;\\n&#39;)\n    print(&#39;写入成功！&#39;)\n\n# 提取关键词\nwith open(targetTxt, &#39;r&#39;, encoding &#x3D; &#39;utf-8&#39;) as file:\n    text &#x3D; file.readlines()\n    &quot;&quot;&quot;\n    几个参数解释：\n        * text : 待提取的字符串类型文本\n        * topK : 返回TF-IDF权重最大的关键词的个数，默认为20个\n        * withWeight : 是否返回关键词的权重值，默认为False\n        * allowPOS : 包含指定词性的词，默认为空\n    &quot;&quot;&quot;\n    keywords &#x3D; jieba.analyse.extract_tags(str(text), topK &#x3D; 100, withWeight&#x3D;True, allowPOS&#x3D;())\n    print(keywords)\n    print(&#39;提取完毕！&#39;)\n\n\n\n\n\n\n\n\n\n\nBuilding prefix dict from the default dictionary …Loading model from cache C:\\Users\\83854\\AppData\\Local\\Temp\\jieba.cacheLoading model cost 0.931 seconds.Prefix dict has been built successfully.写入成功！[(‘嗶哩’, 0.28779995840314815), (‘u3000’, 0.21252920005155554), (‘2021’, 0.11954767502899999), (‘開支’, 0.11954767502899999), (‘百萬’, 0.1106922916935185), (‘百萬元’, 0.10183690835803703), (‘虧損’, 0.10183690835803703), (‘2022’, 0.09740921669029629), (‘準則’, 0.09298152502255555), (‘人民’, 0.09261089956142222), (‘總額’, 0.08412614168707407), (‘我們’, 0.07969845001933333), (‘31’, 0.07527075835159258), (‘用戶’, 0.07527075835159258), (‘指標’, 0.07527075835159258), (‘資產’, 0.07084306668385185), (‘經營’, 0.06198768334837036), (‘認會計’, 0.06198768334837036), (‘非公’, 0.05814828026388889), (‘美元’, 0.05761432838455555), (‘回購’, 0.053132300012888885), (‘美國存’, 0.053132300012888885), (‘財務’, 0.053132300012888885), (‘電話’, 0.053132300012888885), (‘轉換’, 0.04870460834514814), (‘同期’, 0.045941715870059255), (‘每股’, 0.04504586402452593), (‘負債’, 0.04427691667740741), (‘通過’, 0.04427691667740741), (‘淨額’, 0.04427691667740741), (‘會議’, 0.04427691667740741), (‘業務’, 0.039849225009666665), (‘無形’, 0.039849225009666665), (‘相關’, 0.039849225009666665), (‘12’, 0.039849225009666665), (‘538’, 0.039849225009666665), (‘263’, 0.039849225009666665), (‘公司’, 0.03762986235697037), (‘增加’, 0.037261471602503704), (‘中國’, 0.03542153334192592), (‘費用’, 0.03542153334192592), (‘股權’, 0.03542153334192592), (‘服務’, 0.03542153334192592), (‘則為’, 0.03542153334192592), (‘收購’, 0.03542153334192592), (‘獲得’, 0.03542153334192592), (‘投資’, 0.03542153334192592), (‘經調整’, 0.03542153334192592), (‘資料’, 0.03542153334192592), (‘攤薄’, 0.03542153334192592), (‘股數’, 0.03542153334192592), (‘355’, 0.03542153334192592), (‘351’, 0.03542153334192592), (‘391’, 0.03542153334192592), (‘248’, 0.03542153334192592), (‘558’, 0.03542153334192592), (‘393’, 0.03542153334192592), (‘141’, 0.03542153334192592), (‘股份’, 0.0340388424320037), (‘未經’, 0.03099384167418518), (‘廣告’, 0.03099384167418518), (‘銷售’, 0.03099384167418518), (‘優先票’, 0.03099384167418518), (‘激勵’, 0.03099384167418518), (‘淨虧損’, 0.03099384167418518), (‘有關’, 0.03099384167418518), (‘會計’, 0.03099384167418518), (‘業績’, 0.03099384167418518), (‘美國’, 0.03099384167418518), (‘匯率’, 0.03099384167418518), (‘有限公司’, 0.026930249053711112), (‘基本’, 0.026673095083888886), (‘淨營業額’, 0.026566150006444442), (‘付費’, 0.026566150006444442), (‘營銷’, 0.026566150006444442), (‘股東’, 0.026566150006444442), (‘經調’, 0.026566150006444442), (‘及攤’, 0.026566150006444442), (‘現金’, 0.026566150006444442), (‘com’, 0.026566150006444442), (‘流動’, 0.026566150006444442), (‘數據’, 0.026566150006444442), (‘成本’, 0.02569325066231111), (‘第一季度’, 0.024095871573866667), (‘前瞻性’, 0.02356276039859259), (‘視頻’, 0.022138458338703704), (‘未來’, 0.022138458338703704), (‘價值’, 0.022138458338703704), (‘遊戲’, 0.022138458338703704), (‘電商’, 0.022138458338703704), (‘營業’, 0.022138458338703704), (‘整淨’, 0.022138458338703704), (‘5.80’, 0.022138458338703704), (‘2.54’, 0.022138458338703704), (‘4.20’, 0.022138458338703704), (‘2.50’, 0.022138458338703704), (‘計劃’, 0.022138458338703704), (‘公認’, 0.022138458338703704), (‘ir’, 0.022138458338703704), (‘bilibili’, 0.022138458338703704)]提取完毕！\n分词后的文档：\n2   嗶哩 嗶哩 股份 有限公司 宣 佈 2022 年 第一季度 財務業績   上海 ， 2022 年 6 月 9 日   —   嗶哩 嗶哩 股份 有限公司 （ 「 嗶哩 嗶哩 」 或 「 本 公司 」 ） （ 納斯達克代   號 ： BILI 及 港交所 代號 ： 9626 ） ， 中國 年 輕 一代 的 標誌 性 品牌 及 領先 的 視頻 社區 ， 今日 宣   佈 其 截至 2022 年 3 月 31 日止 第一季度 的 未經 審計 財務業績 。   2022 年 第一季度 摘要 ：   ‧   淨營業額 總額 達 人民 幣 5 , 054.1 百萬元 （ 797.3 百萬 美元 ） ， 較 2021 年 同期 增加 30% 。   ‧   月均 活躍用 戶 （ 月 活用戶 ） 達 293.6 百萬 ， 而 移動端 月 活用 戶達 276.4 百萬 ， 較 2021 年同   期分別 增加 31% 及 33% 。   ‧   日均 活躍用 戶 （ 日活 用戶 ） 達 79.4 百萬 ， 較 2021 年 同期 增加 32% 。   ‧   平均 每月 付費 用戶 （ 月均 付費 用戶 1   ） 達 27.2 百萬 ， 較 2021 年 同期 增加 33% 。   「 面對 突 如其 來 的 新冠 疫情 復 發和靜態 管理 等 措施 ， 第一季度 全國範圍 都 面臨 新 的 挑   戰 ， 尤其 是 我們 總部 所在 的 上海 。 在 此 期間 ， 我們 有 超過 8 , 000 名員工 居家 辦公 ， 我們 的   首要 任務 是 確保員工 的 安全 ， 以及 維持業務 的 正常 運營 」 嗶哩 嗶哩 主席 兼 首席 執行 官 陳   睿 先生 表示 ， 「 面對 這些 挑戰 ， 我們 的 月 活用戶 和 日活 用戶 保持 穩健 增長 ， 用戶 活躍度   亦 有所提高 。 第一季度 ， 單個 用戶 日均 使用 時長 顯著 增加 至 95 分鐘 ， 創下 新高 。 與 此同   時 ， 我們 堅定 的 提升 商業化 能力 ， 包括 增加 我們 的 付費 用戶 及 拓展 廣告 市場 份額 。 縱觀   全年 ， 控制 成本 及收 緊費用 支出 對 我們 克服 宏觀 經濟 壓力 有 至關 重要 的 作用 。 我們 期待   恢 復 到 正常 商業 發展 軌道 ， 並 共同努力 減輕 疫情 所帶 來 的 影響 。 」   嗶哩 嗶哩 首席 財務官 樊欣 先生 表示 ： 「 我們 第一季度 的 淨 收入 總額 達 人民 幣 51 億元 ， 同   比增 長 30% 。 為 滿足 用戶 需求 ， 我們 不斷 完善 產品 和服 務 ， 期內 付費率 達 到 9.3% ， 創下   歷史 新高 。 另一方面 ， 在 有 選擇 地 投入 研發以 幫助 我們 提升 商業化 能力 的 同時 ， 我們實   施 的 費用 控制 舉措 取得 了 一定 進展 ， 銷售 及 營銷 費用 環比 減少 。 未來 幾個 季度 將繼續採   取 更 多 成本 控制措施 。 此外 ， 為 增加 我們 的 股權 價值並 管理 我們 的 負債 ， 我們 在 本季度   回購 了 流通 的 美國存 託 股及 可 轉換 優先票 據 。 展望 未來 ， 我們將 致力 於 通過 增加收入 和   收窄 虧 損率 來 持續 為 股東 創造 價值 。 」   3   2022 年 第一季度 財務業績   淨營業額 總額 。 淨營業額 總額 為 人民 幣 5 , 054.1 百萬元 （ 797.3 百萬 美元 ） ， 較 2021 年 同期 增   加 30% 。   移動 遊戲 。 移動 遊戲 營業額 為 人民 幣 1 , 357.8 百萬元 （ 214.2 百萬 美元 ） ， 較 2021 年 同期 增加   16% 。 增加 主要 是 由 於 我們 新 推出 的 移動 遊戲 所致 。   增值 服務 。 增值 服務 營業額 為 人民 幣 2 , 052.2 百萬元 （ 323.7 百萬 美元 ） ， 較 2021 年 同期 增加   37% ， 主要 是 由 於 本 公司 加強 了 商業化 能力 建設 ， 且 本 公司 增值 服務 包括 大會員 、 直播   服務 及其 他 增值 服務 的 付費 用戶 數量 均 有 增加 所致 。   廣告 。 廣告 營業額 為 人民 幣 1 , 040.8 百萬元 （ 164.2 百萬 美元 ） ， 較 2021 年 同期 增加 46% 。 此   增加 主要 是 由 於 嗶哩 嗶哩 品牌 在 中國線 上 廣告 市場 得到 進 一步 認可 ， 以及 嗶哩 嗶哩 的   廣告 效率 有所提高 所致 。   電商 及其 他 。 電商 及其 他 營業額 為 人民 幣 603.3 百萬元 （ 95.2 百萬 美元 ） ， 較 2021 年 同期 增   加 16% ， 主要 是 由 於 本 公司 電商 平台 的 產品 銷售 增加 所致 。   營業 成本 。 營業 成本 為 人民 幣 4 , 246.9 百萬元 （ 669.9 百萬 美元 ） ， 較 2021 年 同期 增加 43% 。   收入 分成 成本 （ 營業 成本 的 重要 組成 部分 ） 為 人民 幣 2 , 145.5 百萬元 （ 338.4 百萬 美元 ） ， 較   2021 年 同期 增加 53% 。   毛利 潤 。 毛利 潤為 人民 幣 807.2 百萬元 （ 127.3 百萬 美元 ） ， 2021 年 同期 則為 人民 幣 937.9 百   萬元 。   經營 開支 總額 。 經營 開支 總額 為 人民 幣 2 , 798.1 百萬元 （ 441.4 百萬 美元 ） ， 較 2021 年 同期 增   加 42% 。   銷售 及 營銷 開支 。 銷售 及 營銷 開支 為 人民 幣 1 , 253.9 百萬元 （ 197.8 百萬 美元 ） ， 同比增加   25% 。 此 增加 主要 是 由 於 品牌 開支 以及 銷售 及 營銷 人員費用 增加 所致 。   一般 及 行政 開支 。 一般 及 行政 開支 為 人民 幣 535.3 百萬元 （ 84.4 百萬 美元 ） ， 同比增加 38% 。   此 增加 主要 是 由 於 一般 及 行政 人員 、 股權 激勵 費用 、 租金 開支 及其 他 一般 及 行政 開支 增   加 所致 。   研發 開支 。 研發開 支為 人民 幣 1 , 008.8 百萬元 （ 159.1 百萬 美元 ） ， 同比增加 74% 。 此 增加 主   要是 由 於 研發 人員及 股權 激勵 費用 增加 所致 。   4   經營 虧損 。 經營 虧 損為 人民 幣 1 , 990.8 百萬元 （ 314.0 百萬 美元 ） ， 2021 年 同期 則為 人民 幣   1 , 031.0 百萬元 。   其他 （ 淨額 ） 。 其他 （ 淨額 ） 為 人民 幣 397.2 百萬元 （ 62.7 百萬 美元 ） ， 2021 年 同期 則為 人民 幣   20.8 百萬元 ， 其 增加 主要 由 於 回購 可 轉換 優先票 據 錄得 收益 人民 幣 338.8 百萬元 所致 。   所得 稅開支 。 所得 稅開 支為 人民 幣 29.8 百萬元 （ 4.7 百萬 美元 ） ， 2021 年 同期 則為 人民 幣 12.5   百萬元 。   淨虧損 。 淨虧 損為 人民 幣 2 , 284.1 百萬元 （ 360.3 百萬 美元 ） ， 2021 年 同期 則為 人民 幣 904.9 百   萬元 。   經調 整淨 虧損 2   。 經調 整淨 虧損 （ 為 非公 認會計 準則 指標 ， 不含 股權 激勵 費用 、 通過 業務   收購 獲得 的 無形 資產 相關 的 攤銷 開支 、 通過 業務 收購 獲得 的 無形 資產 相關 的 所得 稅 、 對   上市公司 的 投資 的 公允 價值 變動 收益 ╱ 虧損 以及 回購 可 轉換 優先票 據 的 收益 ） 為 人民 幣   1 , 654.9 百萬元 （ 261.1 百萬 美元 ） ， 2021 年 同期 則為 人民 幣 891.0 百萬元 。   每股 基本 及攤 薄虧 損及 經調整 每股 基本 及攤 薄 虧損 2   。 每股 基本 及攤 薄淨虧 損為 人民 幣   5.80 元 （ 0.91 美元 ） ， 2021 年 同期 則為 人民 幣 2.54 元 。 經調整 每股 基本 及攤 薄淨虧 損為 人民   幣 4.20 元 （ 0.66 美元 ） ， 2021 年 同期 則為 人民 幣 2.50 元 。   現金及 現金 等 價物 、 定期存款 及 短期 投資 。 截至 2022 年 3 月 31 日 ， 本 公司 的 現金及 現金   等 價物 、 定期存款 及 短期 投資為 人民 幣 247 億元 （ 39 億 美元 ） 。   股份 回購 計劃 及 回購 可 轉換 優先票 據   本 公司 於 2022 年 3 月 宣 佈 ， 董事 會 已 批准 一項 股份 回購 計劃 ， 據此 ， 本 公司 可 於 未來 24   個 月 內 回購 最多 5 億 美元 的 美國存 託 股 。 截至 2022 年 3 月 31 日 ， 已根據 該 計劃 回購 約 1.4 百   萬股 美國存 託 股 ， 總 成本 為 30.0 百萬 美元 。 嗶哩 嗶哩 主席 兼 首席 執行 官 陳 睿 先生 知會本   公司 ， 截至 2022 年 3 月 31 日 ， 彼已 使用 其 私人 資金 在 公開 市場 購買 約 10 萬股 的 本 公司 美   國存 託 股 ， 總 成本 為 3.0 百萬 美元 。   此外 ， 截至 2022 年 3 月 31 日 ， 本 公司 以 總現 金對價 147.9 百萬 美元 回購 本金 總額 為 204.0 百   萬 美元 的 2026 年 12 月票 據 。   近期 發展   本 公司 已 就 建議 轉換 為 主要 上市 （ 「 建議 轉換 」 ） 向 香港 聯交所 提出 申請 ， 並 於 2022 年 4 月   29 日 就 建議 轉換 申請 收到 香港 聯交所 的 確認 。 建議 轉換 的 預計 生效 日期 為 2022 年 10 月 3   日 （ 「 生效 日期 」 ） 。 於 生效 日期 後 ， 本 公司 將於 香港 聯交所及 納斯達克 全球 精選 市場 雙重   主要 上市 。   5   展望   本 公司 現時 對 2022 年 第二季度 淨營業額 進行 了 展望 ， 預計 將達 到 人民 幣 48.5 億元 至 人民   幣 49.5 億元 。   上述 展望 是 基 於 目前 市況 ， 並 反映 本 公司 的 初步 估計 ， 而 該 等 初步 估計 均 受 不同 的 不確   定 因素 所影響 ， 包括 與 現時 新冠 疫情 有關 的 不 確定 因素 。   1   付費 用戶 指 在 我們 的 平台 上 就 多 項產品 及 服務 付款 的 用戶 ， 包括 在 遊戲 進行 的 消費 和 增值 服務 消費 （ 不 包括   在 我們 的 電商 平台 上 消費 ） 。 使用 同一 註 冊 賬 戶 為 我 們 平台 上 的 不同 產品 和服 務 進行 消費 的 用 戶將 被 視為 一   位付 費用戶 ， 我們 將貓 耳 的 付費 用戶 數計入 總付 費用戶 中 ， 而 不 消除 重 複 用戶 。   2   經調 整淨 虧損 以及 經調整 每股 基本 及攤 薄虧 損均 為 非公 認會計 準則 財務 指標 。 有關 非公 認會計 準則 財務 指標   的 更 多 資料 ， 請 參閱 「 使用 非公 認會計 準則 財務 指標 」 一節 以及 本 公告 結尾 所載 的 「 公認 會計 準則 及 非公 認會   計準則 業績 的 未經 審計調 節表 」 列表 。   電話 會議   本 公司 管理 層將 於 2022 年 6 月 9 日美國 東部 時間 上午 八時 正 （ 2022 年 6 月 9 日 北京 ╱ 香港 時   間 下午 八時 正 ） 召開業績 電話 會議 。   電話 會議 詳情 如下 ：   活動 名稱 ：   嗶哩 嗶哩 股份 有限公司 2022 年 第一季度 業績 電話 會議   會議 編號 ：   2597295   註 冊 鏈 接 ：   http : / / apac . directeventreg . com / registration / event / 2597295   所有 與 會者須 於 電話 會議 召開 前 使用 上文 提供 的 鏈接 完成 在 線 註 冊 程序 。 註 冊 後 ， 各 與   會者將 收到 一組 用以 參與 電話 會議 的 與 會者 撥入 號碼 、 活動 密碼 及 獨有 登記 編號 。   此外 ， 電話 會議 的 網上 直播 及存 檔 可 於 本 公司 投資者關 係 網站 http : / / ir . bilibili . com   獲取 。   電話 會議 的 重播 可 於 電話 會議 結束 兩小時 後 至 2022 年 6 月 22 日止 通過 致電 以下 號碼 收 聽 ：   美國 ：   + 1 - 855 - 452 - 5696   國際 ：   + 61 - 2 - 8199 - 0299   香港 ：   800 - 963 - 117   中國 ：   400 - 820 - 9035   重播 登入 編號 ：   2597295   6   關於 嗶哩 嗶哩 股份 有限公司   嗶哩 嗶哩 是 中國 年 輕 一代 的 標誌 性 品牌 及 領先 的 視頻 社區 ， 將 「 豐富 中國年 輕人 的 日常   生活 」 作為 公司 使命 。 嗶哩 嗶哩 以 「 你 感興趣 的 視頻 都 在 B 站 」 作為 品牌 主張 ， 向 用戶 提供   廣泛 的 視頻 內容 。 圍繞 著 有 文化 追求 的 用戶 、 高質量 的 內容 、 有才華 的 內容創 作者 以及   他們 之間 強大 的 情感 紐帶 ， 嗶哩 嗶哩 構建 了 自己 的 社區 。 同時 ， 嗶哩 嗶哩 引領 了 標誌 性   的 互動 功能 「 彈幕 」 ， 在 播放 界面 同時 展示 觀看 同一 視頻 的 用戶 的 評論 和 感想 ， 革新 了 觀   看體驗 並激發 了 用 戶間 的 共鳴 。 嗶哩 嗶哩現 已成 為 中國年 輕人 各類 興趣 的 聚集地 ， 是 向   世界 推廣中國 文化 的 前沿 。   有關 更 多 資料 ， 請 訪問 ： http : / / ir . bilibili . com 。   使用 非公 認會計 準則 財務 指標   本 公司 使用 經調 整淨 虧損 、 經調整 每股 及 每股 美國存 託 股 基本 及攤 薄淨 虧損 等 非公 認   會計 準則 指標 ， 以評 估其經 營業績 以及 用 於 制定 財務 和 經營 決策 。 本 公司 認為 ， 非公 認   會計 準則 指標 剔除 股權 激勵 費用 、 通過 業務 收購 獲得 的 無形 資產 相關 的 攤銷 開支 、 通過   業務 收購 獲得 的 無形 資產 相關 的 所得 稅 、 對 上市公司 的 投資 的 公允 價值 變動 收益 ╱ 虧   損 以及 回購 可 轉換 優先票 據 的 收益 （ 非現 金費用 ） 的 影響 ， 將 有助 於 識別 其業務 的 基本   趨勢 。 本 公司 認為 非公 認會計 準則 財務 指標 提供 了關 於 本 公司 經營業績 的 實用 資料 、 增   強對本 公司 過往 表現 及 未來 前景 的 整體 理解 ， 並且 有助 於 更 清晰 地 了解 本 公司 管理 層   在 財務 和 經營 決策 中 所 使用 的 核心 指標 。   非公 認會計 準則 財務 指標 並非 美國公 認會計 準則 所 界定 的 指標 ， 且 並無根據 美國 公認   會計 準則 呈 列 。 非公 認會計 準則 財務 指標 作為 分析 工具 有 局限性 ， 且 於 評估 本 公司 的經   營表現 、 現金 流量 或 流動 資金時 ， 投資者 不應 單獨 考慮 該 等 指標 ， 或 取代 根據 美國 公認   會計 準則 編 製 的 淨 虧 損 、 經營 活動 提供 的 現金 流量 或 其他 合 併 經營 狀況 以及 現金 流量   數據 。   本 公司 將 非公 認會計 準則 財務 指標 調整 至 最具 可比性 的 美國公 認會計 準則 業績 指標 ，   以 減少 該 等 限制 ， 所有 指標 均 應 於 評估 本 公司 業績 時 予以 考慮 。   有關 非公 認會計 準則 財務 指標 的 更 多 資料 ， 請 參閱 本 公告 結尾 所載 的 「 公認 會計 準則 及   非公 認會計 準則 業績 的 未經 審計調 節表 」 列表 。   匯率 資料   僅為 方便 讀者 ， 本 公告 所載 若干 人民 幣金額 按 特定 匯率 換算為 美元 。 除 另 有 指明 外 ， 人   民幣 兌 美元 的 所有 換算均 按 人民 幣 6.3393 元 兌 1.00 美元 的 匯率 換算 ， 該 匯率 為 美國 聯邦   儲備局 H.10 統計 數據 所發 佈 於 2022 年 3 月 31 日 的 匯率 。 本 公司 並無聲明 所述 人民 幣或美   元金額 可 按 任何 特定 匯率 或 任何 匯率 兌換 為 美元 或 人民 幣 （ 視情況 而定 ） 。   7   安全 港聲明   本 公告 載有 前瞻性 陳 述 。 該 等 陳 述 乃 根據 1995 年 《 美國 私人 證券 訴訟 改革 法中 》 的 「 安全   港 」 條文 作出 。 該 等 前瞻性 陳 述 可 從 所用 詞 彙 如 「 將 」 、 「 預期 」 、 「 預計 」 、 「 旨在 」 、 「 未   來 」 、 「 擬 」 、 「 計劃 」 、 「 相信 」 、 「 估計 」 、 「 有 信心 」 、 「 潛在 」 、 「 繼續 」 或 其他 類似 陳 述加   以識別 。 其中 ， 新冠 疫情 的 影響 、 本 公告 內 的 展望 和 引述 管理 層話語 的 部分 ， 以及 嗶哩   嗶哩 的 策略 和 經營 計劃 ， 均 含有 前瞻性 陳 述 。 嗶哩 嗶哩 亦 可能 在 向 美國 證券 交易 委員會   提交 的 定期 報告 、 向 股東 提交 的 中期 及 年度 報告 、 於 香港 聯合 交易所 有限公司 （ 「 香港 聯   交所 」 ） 網 站上 發 佈 的 公告 、 通函 或 其他 刊物 、 新聞稿 和 其他 書面 材料 以及 其高級 職員 、   董事 或 僱員向 第三方 作出 的 口頭陳述 作出 書面 或 口頭 前瞻性 陳 述 。 非歷 史事 實的陳述 ，   包括 但 不限 於 有關 嗶哩 嗶哩 的 信念 和 未來 期望 的 陳 述 ， 均屬 於 前瞻性 陳 述 。 前瞻性 陳 述   涉及 固有 的 風險 和 不 確定 因素 。 多項 因素 可能 導致 實際業績 與 任何 前瞻性 陳 述 所載 內   容出現 重大 差異 ， 包括 但 不限 於 以下 各項 ： 新冠 疫情 對 嗶哩 嗶哩 的 業務 、 經營業績 、 財   務狀況 及 股價 的 影響 ； 嗶哩 嗶哩 的 策略 ； 嗶哩 嗶哩 的 未 來業務 發展 、 財務 狀況 及 經營   業績 ； 嗶哩 嗶哩 在 挽留 及 提升 用戶 、 會員 和 廣告 客戶 的 數量 、 提供 優質 內容 、 產品 和服   務 以及 擴大 其產品 和服 務範圍 的 能力 ； 網上 娛樂 行業 的 競爭 ； 嗶哩 嗶哩 在 目標 用 戶社   區內 維持 其 文化 及 品牌形象 的 能力 ； 嗶哩 嗶哩 管理 成本 及 開支 的 能力 ； 與 網上 娛樂行   業有關 的 中國 政府 政策 及 規定 ， 全球 及 中國 整體 經濟 及業務 狀況 以及 與 上述 任何 一項   相關 或 有關 的 假設 。 有關 該 等 及其 他 風險 的 進 一步 資料 ， 載 於 本 公司 向 證券 交易 委員會   及 香港 聯交所 提交 的 文件 中 。 本 公告 及 附件 所 提供 的 全部 資料 均 截至 本 公告 日期 ， 而且   除根 據 適用 法律 外 ， 本 公司 並沒有 義務 更新 任何 該 等 資料 。   投資者 及 媒體 如有 查詢 ， 請 聯絡 ：   中國 ：   嗶哩 嗶哩 股份 有限公司   Juliet   Yang   電話 ： + 86 - 21 - 2509 - 9255 轉 8523   電郵 ： ir @ bilibili . com   The   Piacente   Group ,   Inc .   Emilie   Wu   電話 ： + 86 - 21 - 6039 - 8363   電郵 ： bilibili @ tpg - ir . com   美國 ：   The   Piacente   Group ,   Inc .   Brandi   Piacente   電話 ： + 1 - 212 - 481 - 2050   電郵 ： bilibili @ tpg - ir . com   8   嗶哩 嗶哩 股份 有限公司   未經 審計 簡明合 併 經營 狀況 表   （ 除了 股份 及 每股 數據 以外 ， 金額 以 千元 為 單位 ）   截至 以下 日期 止三個 月   2021 年   2021 年   2022 年   3 月 31 日   12 月 31 日   3 月 31 日   人民 幣   人民 幣   人民 幣   淨營業額 ：   　 移動 遊戲   1 , 170 , 746   1 , 295 , 350   1 , 357 , 818   　 增值 服務   1 , 496 , 529   1 , 894 , 518   2 , 052 , 192   　 廣告   714 , 687   1 , 587 , 616   1 , 040 , 770   　 電商 及其 他   519 , 111   1 , 003 , 299   603 , 319   淨營業額 總額   3 , 901 , 073   5 , 780 , 783   5 , 054 , 099   營業 成本   ( 2 , 963 , 197 )   ( 4 , 682 , 981 )   ( 4 , 246 , 858 )   毛利 潤   937 , 876   1 , 097 , 802   807 , 241   經營 開支 ：   　 銷售 及 營銷 開支   ( 1 , 000 , 059 )   ( 1 , 761 , 605 )   ( 1 , 253 , 914 )   　 一般 及 行政 開支   ( 388 , 531 )   ( 538 , 120 )   ( 535 , 296 )   　 研發 開支   ( 580 , 254 )   ( 797 , 617 )   ( 1 , 008 , 843 )   經營 開支 總額   ( 1 , 968 , 844 )   ( 3 , 097 , 342 )   ( 2 , 798 , 053 )   經營 虧損   ( 1 , 030 , 968 )   ( 1 , 999 , 540 )   ( 1 , 990 , 812 )   其他 收入 ╱ （ 開支 ） ：   　 投資 收入 ╱ （ 虧損 ） （ 淨額 ）   168 , 212   ( 93 , 331 )   ( 626 , 316 )   　 利息收入   11 , 277   26 , 583   34 , 300   　 利息 開支   ( 33 , 245 )   ( 50 , 097 )   ( 62 , 435 )   　 匯兌 （ 虧損 ） ╱ 收益   ( 28 , 423 )   4 , 056   ( 6 , 264 )   　 其他 （ 淨額 ）   20 , 763   49 , 349   397 , 154   其他 收入 ╱ （ 開支 ） 總額 （ 淨額 ）   138 , 584   ( 63 , 440 )   ( 263 , 561 )   除 所得 稅前 虧損   ( 892 , 384 )   ( 2 , 062 , 980 )   ( 2 , 254 , 373 )   　 所得 稅   ( 12 , 475 )   ( 32 , 787 )   ( 29 , 759 )   淨虧損   ( 904 , 859 )   ( 2 , 095 , 767 )   ( 2 , 284 , 132 )   　 少數 股東應 佔淨 虧損   1 , 304   7 , 753   2 , 150   歸屬 於 嗶哩 嗶哩 股份 有限公司 股東淨 虧損   ( 903 , 555 )   ( 2 , 088 , 014 )   ( 2 , 281 , 982 )   每股 淨虧損 （ 基本 ）   ( 2.54 )   ( 5.34 )   ( 5.80 )   每股 美國存 託 股淨 虧損 （ 基本 ）   ( 2.54 )   ( 5.34 )   ( 5.80 )   每股 淨虧損 （ 攤薄 ）   ( 2.54 )   ( 5.34 )   ( 5.80 )   每股 美國存 託 股淨 虧損 （ 攤薄 ）   ( 2.54 )   ( 5.34 )   ( 5.80 )   普通股 加權 平均 股數 （ 基本 ）   355 , 351 , 263   391 , 248 , 558   393 , 538 , 141   美國存 託 股加權 平均 股數 （ 基本 ）   355 , 351 , 263   391 , 248 , 558   393 , 538 , 141   普通股 加權 平均 股數 （ 攤薄 ）   355 , 351 , 263   391 , 248 , 558   393 , 538 , 141   美國存 託 股加權 平均 股數 （ 攤薄 ）   355 , 351 , 263   391 , 248 , 558   393 , 538 , 141   所附 附 註 為 本 新 聞 稿 的 組 成 部分 。   9   嗶哩 嗶哩 股份 有限公司   未經 審計 財務資料 附 註   （ 除了 股份 及 每股 數據 以外 ， 金額 以 千元 為 單位 ）   截至 以下 日期 止三個 月   2021 年   2021 年   2022 年   3 月 31 日   12 月 31 日   3 月 31 日   人民 幣   人民 幣   人民 幣   股權 激勵 開支 計入 ：   　 營業 成本   14 , 550   26 , 163   23 , 033   　 銷售 及 營銷 開支   13 , 012   15 , 257   12 , 592   　 一般 及 行政 開支   126 , 023   165 , 669   145 , 995   　 研發 開支   60 , 810   100 , 381   96 , 242   總計   214 , 395   307 , 470   277 , 862   10   嗶哩 嗶哩 股份 有限公司   未經 審計 簡明合 併 資產負 債表   （ 除了 股份 及 每股 數據 以外 ， 金額 以 千元 為 單位 ）   2021 年   2022 年   12 月 31 日   3 月 31 日   人民 幣   人民 幣   資產   流動 資產 ：   　 現金及 現金 等 價物   7 , 523 , 108   5 , 077 , 992   　 定期存款   7 , 632 , 334   6 , 580 , 545   　 應收 賬款 （ 淨額 ）   1 , 382 , 328   1 , 274 , 585   　 預 付款 項 及其 他 流動 資產   4 , 848 , 364   4 , 720 , 049   　 短期 投資   15 , 060 , 722   13 , 071 , 197   　 流動 資產 總額   36 , 446 , 856   30 , 724 , 368   非流動 資產 ：   　 物業 及 設備 （ 淨額 ）   1 , 350 , 256   1 , 303 , 154   　 製 作 成本 （ 淨額 ）   1 , 083 , 772   1 , 195 , 475   　 無形 資產 （ 淨額 ）   3 , 835 , 600   4 , 318 , 797   　 商譽   2 , 338 , 303   2 , 682 , 999   　 長 期 投資 （ 淨額 ）   5 , 502 , 524   5 , 946 , 991   　 其他 長 期資產   1 , 495 , 840   1 , 735 , 390   　 非流動 資產 總額   15 , 606 , 295   17 , 182 , 806   資產 總額   52 , 053 , 151   47 , 907 , 174   負債   流動 負債 ：   　 應付 賬款   4 , 360 , 906   4 , 301 , 876   　 應付 薪資及 福利   995 , 451   591 , 130   　 應付 稅款   203 , 770   205 , 574   　 短期 貸款   1 , 232 , 106   1 , 492 , 027   　 遞延 收入   2 , 645 , 389   2 , 634 , 532   　 應計 負債 及其 他應 付款 項   2 , 633 , 389   2 , 110 , 648   　 流動 負債 總額   12 , 071 , 011   11 , 335 , 787   非流動 負債 ：   　 長 期 債務   17 , 784 , 092   16 , 442 , 571   　 其他 長 期 負債   481 , 982   656 , 896   　 非流動 負債 總額   18 , 266 , 074   17 , 099 , 467   負債 總額   30 , 337 , 085   28 , 435 , 254   嗶哩 嗶哩 股份 有限公司 股東 權益 總額   21 , 703 , 667   19 , 461 , 671   少數 股東 的 權益   12 , 399   10 , 249   股東 權益 總額   21 , 716 , 066   19 , 471 , 920   負債 及 股東 權益 總額   52 , 053 , 151   47 , 907 , 174   11   嗶哩 嗶哩 股份 有限公司   公認 會計 準則 及 非公 認會計 準則 業績 的 未經 審計調 節表   （ 除了 股份 及 每股 數據 以外 ， 金額 以 千元 為 單位 ）   截至 以下 日期 止三個 月   2021 年   2021 年   2022 年   3 月 31 日   12 月 31 日   3 月 31 日   人民 幣   人民 幣   人民 幣   淨虧損   ( 904 , 859 )   ( 2 , 095 , 767 )   ( 2 , 284 , 132 )   加 ：   股權 激勵 費用   214 , 395   307 , 470   277 , 862   通過 業務 收購 獲得 的 無形 資產   　 相關 的 攤銷 開支   26 , 145   33 , 227   56 , 997   通過 業務 收購 獲得 的 無形 資產   　 相關 的 所得 稅   ( 1 , 514 )   ( 1 , 514 )   ( 7 , 981 )   對 上市公司 的 投資 的 公允 價值 變動   　 （ 收益 ） ╱ 虧損   ( 225 , 187 )   96 , 771   641 , 114   回購 可 轉換 優先票 據 的 （ 收益 ）   —   —   ( 338 , 779 )   經調 整淨 虧損   ( 891 , 020 )   ( 1 , 659 , 813 )   ( 1 , 654 , 919 )   歸屬 於 嗶哩 嗶哩 股份 有限公司 股東淨 虧損   ( 903 , 555 )   ( 2 , 088 , 014 )   ( 2 , 281 , 982 )   加 ：   股權 激勵 費用   214 , 395   307 , 470   277 , 862   通過 業務 收購 獲得 的 無形 資產   　 相關 的 攤銷 開支   26 , 145   33 , 227   56 , 997   通過 業務 收購 獲得 的 無形 資產   　 相關 的 所得 稅   ( 1 , 514 )   ( 1 , 514 )   ( 7 , 981 )   對 上市公司 的 投資 的 公允 價值 變動   　 （ 收益 ） ╱ 虧損   ( 225 , 187 )   96 , 771   641 , 114   回購 可 轉換 優先票 據 的 （ 收益 ）   —   —   ( 338 , 779 )   經調 整歸屬 於 嗶哩 嗶哩 股份 有限公司   　 股東淨 虧損   ( 889 , 716 )   ( 1 , 652 , 060 )   ( 1 , 652 , 769 )   經調整 每股 淨虧損 （ 基本 ）   ( 2.50 )   ( 4.22 )   ( 4.20 )   經調整 每股 美國存 託 股淨 虧損 （ 基本 ）   ( 2.50 )   ( 4.22 )   ( 4.20 )   經調整 每股 淨虧損 （ 攤薄 ）   ( 2.50 )   ( 4.22 )   ( 4.20 )   經調整 每股 美國存 託 股淨 虧損 （ 攤薄 ）   ( 2.50 )   ( 4.22 )   ( 4.20 )   普通股 加權 平均 股數 （ 基本 ）   355 , 351 , 263   391 , 248 , 558   393 , 538 , 141   美國存 託 股加權 平均 股數 （ 基本 ）   355 , 351 , 263   391 , 248 , 558   393 , 538 , 141   普通股 加權 平均 股數 （ 攤薄 ）   355 , 351 , 263   391 , 248 , 558   393 , 538 , 141   美國存 託 股加權 平均 股數 （ 攤薄 ）   355 , 351 , 263   391 , 248 , 558   393 , 538 , 1412   嗶哩 嗶哩 股份 有限公司 宣 佈 2022 年 第一季度 財務業績   上海 ， 2022 年 6 月 9 日   —   嗶哩 嗶哩 股份 有限公司 （ 「 嗶哩 嗶哩 」 或 「 本 公司 」 ） （ 納斯達克代   號 ： BILI 及 港交所 代號 ： 9626 ） ， 中國 年 輕 一代 的 標誌 性 品牌 及 領先 的 視頻 社區 ， 今日 宣   佈 其 截至 2022 年 3 月 31 日止 第一季度 的 未經 審計 財務業績 。   2022 年 第一季度 摘要 ：   ‧   淨營業額 總額 達 人民 幣 5 , 054.1 百萬元 （ 797.3 百萬 美元 ） ， 較 2021 年 同期 增加 30% 。   ‧   月均 活躍用 戶 （ 月 活用戶 ） 達 293.6 百萬 ， 而 移動端 月 活用 戶達 276.4 百萬 ， 較 2021 年同   期分別 增加 31% 及 33% 。   ‧   日均 活躍用 戶 （ 日活 用戶 ） 達 79.4 百萬 ， 較 2021 年 同期 增加 32% 。   ‧   平均 每月 付費 用戶 （ 月均 付費 用戶 1   ） 達 27.2 百萬 ， 較 2021 年 同期 增加 33% 。   「 面對 突 如其 來 的 新冠 疫情 復 發和靜態 管理 等 措施 ， 第一季度 全國範圍 都 面臨 新 的 挑   戰 ， 尤其 是 我們 總部 所在 的 上海 。 在 此 期間 ， 我們 有 超過 8 , 000 名員工 居家 辦公 ， 我們 的   首要 任務 是 確保員工 的 安全 ， 以及 維持業務 的 正常 運營 」 嗶哩 嗶哩 主席 兼 首席 執行 官 陳   睿 先生 表示 ， 「 面對 這些 挑戰 ， 我們 的 月 活用戶 和 日活 用戶 保持 穩健 增長 ， 用戶 活躍度   亦 有所提高 。 第一季度 ， 單個 用戶 日均 使用 時長 顯著 增加 至 95 分鐘 ， 創下 新高 。 與 此同   時 ， 我們 堅定 的 提升 商業化 能力 ， 包括 增加 我們 的 付費 用戶 及 拓展 廣告 市場 份額 。 縱觀   全年 ， 控制 成本 及收 緊費用 支出 對 我們 克服 宏觀 經濟 壓力 有 至關 重要 的 作用 。 我們 期待   恢 復 到 正常 商業 發展 軌道 ， 並 共同努力 減輕 疫情 所帶 來 的 影響 。 」   嗶哩 嗶哩 首席 財務官 樊欣 先生 表示 ： 「 我們 第一季度 的 淨 收入 總額 達 人民 幣 51 億元 ， 同   比增 長 30% 。 為 滿足 用戶 需求 ， 我們 不斷 完善 產品 和服 務 ， 期內 付費率 達 到 9.3% ， 創下   歷史 新高 。 另一方面 ， 在 有 選擇 地 投入 研發以 幫助 我們 提升 商業化 能力 的 同時 ， 我們實   施 的 費用 控制 舉措 取得 了 一定 進展 ， 銷售 及 營銷 費用 環比 減少 。 未來 幾個 季度 將繼續採   取 更 多 成本 控制措施 。 此外 ， 為 增加 我們 的 股權 價值並 管理 我們 的 負債 ， 我們 在 本季度   回購 了 流通 的 美國存 託 股及 可 轉換 優先票 據 。 展望 未來 ， 我們將 致力 於 通過 增加收入 和   收窄 虧 損率 來 持續 為 股東 創造 價值 。 」   3   2022 年 第一季度 財務業績   淨營業額 總額 。 淨營業額 總額 為 人民 幣 5 , 054.1 百萬元 （ 797.3 百萬 美元 ） ， 較 2021 年 同期 增   加 30% 。   移動 遊戲 。 移動 遊戲 營業額 為 人民 幣 1 , 357.8 百萬元 （ 214.2 百萬 美元 ） ， 較 2021 年 同期 增加   16% 。 增加 主要 是 由 於 我們 新 推出 的 移動 遊戲 所致 。   增值 服務 。 增值 服務 營業額 為 人民 幣 2 , 052.2 百萬元 （ 323.7 百萬 美元 ） ， 較 2021 年 同期 增加   37% ， 主要 是 由 於 本 公司 加強 了 商業化 能力 建設 ， 且 本 公司 增值 服務 包括 大會員 、 直播   服務 及其 他 增值 服務 的 付費 用戶 數量 均 有 增加 所致 。   廣告 。 廣告 營業額 為 人民 幣 1 , 040.8 百萬元 （ 164.2 百萬 美元 ） ， 較 2021 年 同期 增加 46% 。 此   增加 主要 是 由 於 嗶哩 嗶哩 品牌 在 中國線 上 廣告 市場 得到 進 一步 認可 ， 以及 嗶哩 嗶哩 的   廣告 效率 有所提高 所致 。   電商 及其 他 。 電商 及其 他 營業額 為 人民 幣 603.3 百萬元 （ 95.2 百萬 美元 ） ， 較 2021 年 同期 增   加 16% ， 主要 是 由 於 本 公司 電商 平台 的 產品 銷售 增加 所致 。   營業 成本 。 營業 成本 為 人民 幣 4 , 246.9 百萬元 （ 669.9 百萬 美元 ） ， 較 2021 年 同期 增加 43% 。   收入 分成 成本 （ 營業 成本 的 重要 組成 部分 ） 為 人民 幣 2 , 145.5 百萬元 （ 338.4 百萬 美元 ） ， 較   2021 年 同期 增加 53% 。   毛利 潤 。 毛利 潤為 人民 幣 807.2 百萬元 （ 127.3 百萬 美元 ） ， 2021 年 同期 則為 人民 幣 937.9 百   萬元 。   經營 開支 總額 。 經營 開支 總額 為 人民 幣 2 , 798.1 百萬元 （ 441.4 百萬 美元 ） ， 較 2021 年 同期 增   加 42% 。   銷售 及 營銷 開支 。 銷售 及 營銷 開支 為 人民 幣 1 , 253.9 百萬元 （ 197.8 百萬 美元 ） ， 同比增加   25% 。 此 增加 主要 是 由 於 品牌 開支 以及 銷售 及 營銷 人員費用 增加 所致 。   一般 及 行政 開支 。 一般 及 行政 開支 為 人民 幣 535.3 百萬元 （ 84.4 百萬 美元 ） ， 同比增加 38% 。   此 增加 主要 是 由 於 一般 及 行政 人員 、 股權 激勵 費用 、 租金 開支 及其 他 一般 及 行政 開支 增   加 所致 。   研發 開支 。 研發開 支為 人民 幣 1 , 008.8 百萬元 （ 159.1 百萬 美元 ） ， 同比增加 74% 。 此 增加 主   要是 由 於 研發 人員及 股權 激勵 費用 增加 所致 。   4   經營 虧損 。 經營 虧 損為 人民 幣 1 , 990.8 百萬元 （ 314.0 百萬 美元 ） ， 2021 年 同期 則為 人民 幣   1 , 031.0 百萬元 。   其他 （ 淨額 ） 。 其他 （ 淨額 ） 為 人民 幣 397.2 百萬元 （ 62.7 百萬 美元 ） ， 2021 年 同期 則為 人民 幣   20.8 百萬元 ， 其 增加 主要 由 於 回購 可 轉換 優先票 據 錄得 收益 人民 幣 338.8 百萬元 所致 。   所得 稅開支 。 所得 稅開 支為 人民 幣 29.8 百萬元 （ 4.7 百萬 美元 ） ， 2021 年 同期 則為 人民 幣 12.5   百萬元 。   淨虧損 。 淨虧 損為 人民 幣 2 , 284.1 百萬元 （ 360.3 百萬 美元 ） ， 2021 年 同期 則為 人民 幣 904.9 百   萬元 。   經調 整淨 虧損 2   。 經調 整淨 虧損 （ 為 非公 認會計 準則 指標 ， 不含 股權 激勵 費用 、 通過 業務   收購 獲得 的 無形 資產 相關 的 攤銷 開支 、 通過 業務 收購 獲得 的 無形 資產 相關 的 所得 稅 、 對   上市公司 的 投資 的 公允 價值 變動 收益 ╱ 虧損 以及 回購 可 轉換 優先票 據 的 收益 ） 為 人民 幣   1 , 654.9 百萬元 （ 261.1 百萬 美元 ） ， 2021 年 同期 則為 人民 幣 891.0 百萬元 。   每股 基本 及攤 薄虧 損及 經調整 每股 基本 及攤 薄 虧損 2   。 每股 基本 及攤 薄淨虧 損為 人民 幣   5.80 元 （ 0.91 美元 ） ， 2021 年 同期 則為 人民 幣 2.54 元 。 經調整 每股 基本 及攤 薄淨虧 損為 人民   幣 4.20 元 （ 0.66 美元 ） ， 2021 年 同期 則為 人民 幣 2.50 元 。   現金及 現金 等 價物 、 定期存款 及 短期 投資 。 截至 2022 年 3 月 31 日 ， 本 公司 的 現金及 現金   等 價物 、 定期存款 及 短期 投資為 人民 幣 247 億元 （ 39 億 美元 ） 。   股份 回購 計劃 及 回購 可 轉換 優先票 據   本 公司 於 2022 年 3 月 宣 佈 ， 董事 會 已 批准 一項 股份 回購 計劃 ， 據此 ， 本 公司 可 於 未來 24   個 月 內 回購 最多 5 億 美元 的 美國存 託 股 。 截至 2022 年 3 月 31 日 ， 已根據 該 計劃 回購 約 1.4 百   萬股 美國存 託 股 ， 總 成本 為 30.0 百萬 美元 。 嗶哩 嗶哩 主席 兼 首席 執行 官 陳 睿 先生 知會本   公司 ， 截至 2022 年 3 月 31 日 ， 彼已 使用 其 私人 資金 在 公開 市場 購買 約 10 萬股 的 本 公司 美   國存 託 股 ， 總 成本 為 3.0 百萬 美元 。   此外 ， 截至 2022 年 3 月 31 日 ， 本 公司 以 總現 金對價 147.9 百萬 美元 回購 本金 總額 為 204.0 百   萬 美元 的 2026 年 12 月票 據 。   近期 發展   本 公司 已 就 建議 轉換 為 主要 上市 （ 「 建議 轉換 」 ） 向 香港 聯交所 提出 申請 ， 並 於 2022 年 4 月   29 日 就 建議 轉換 申請 收到 香港 聯交所 的 確認 。 建議 轉換 的 預計 生效 日期 為 2022 年 10 月 3   日 （ 「 生效 日期 」 ） 。 於 生效 日期 後 ， 本 公司 將於 香港 聯交所及 納斯達克 全球 精選 市場 雙重   主要 上市 。   5   展望   本 公司 現時 對 2022 年 第二季度 淨營業額 進行 了 展望 ， 預計 將達 到 人民 幣 48.5 億元 至 人民   幣 49.5 億元 。   上述 展望 是 基 於 目前 市況 ， 並 反映 本 公司 的 初步 估計 ， 而 該 等 初步 估計 均 受 不同 的 不確   定 因素 所影響 ， 包括 與 現時 新冠 疫情 有關 的 不 確定 因素 。   1   付費 用戶 指 在 我們 的 平台 上 就 多 項產品 及 服務 付款 的 用戶 ， 包括 在 遊戲 進行 的 消費 和 增值 服務 消費 （ 不 包括   在 我們 的 電商 平台 上 消費 ） 。 使用 同一 註 冊 賬 戶 為 我 們 平台 上 的 不同 產品 和服 務 進行 消費 的 用 戶將 被 視為 一   位付 費用戶 ， 我們 將貓 耳 的 付費 用戶 數計入 總付 費用戶 中 ， 而 不 消除 重 複 用戶 。   2   經調 整淨 虧損 以及 經調整 每股 基本 及攤 薄虧 損均 為 非公 認會計 準則 財務 指標 。 有關 非公 認會計 準則 財務 指標   的 更 多 資料 ， 請 參閱 「 使用 非公 認會計 準則 財務 指標 」 一節 以及 本 公告 結尾 所載 的 「 公認 會計 準則 及 非公 認會   計準則 業績 的 未經 審計調 節表 」 列表 。   電話 會議   本 公司 管理 層將 於 2022 年 6 月 9 日美國 東部 時間 上午 八時 正 （ 2022 年 6 月 9 日 北京 ╱ 香港 時   間 下午 八時 正 ） 召開業績 電話 會議 。   電話 會議 詳情 如下 ：   活動 名稱 ：   嗶哩 嗶哩 股份 有限公司 2022 年 第一季度 業績 電話 會議   會議 編號 ：   2597295   註 冊 鏈 接 ：   http : / / apac . directeventreg . com / registration / event / 2597295   所有 與 會者須 於 電話 會議 召開 前 使用 上文 提供 的 鏈接 完成 在 線 註 冊 程序 。 註 冊 後 ， 各 與   會者將 收到 一組 用以 參與 電話 會議 的 與 會者 撥入 號碼 、 活動 密碼 及 獨有 登記 編號 。   此外 ， 電話 會議 的 網上 直播 及存 檔 可 於 本 公司 投資者關 係 網站 http : / / ir . bilibili . com   獲取 。   電話 會議 的 重播 可 於 電話 會議 結束 兩小時 後 至 2022 年 6 月 22 日止 通過 致電 以下 號碼 收 聽 ：   美國 ：   + 1 - 855 - 452 - 5696   國際 ：   + 61 - 2 - 8199 - 0299   香港 ：   800 - 963 - 117   中國 ：   400 - 820 - 9035   重播 登入 編號 ：   2597295   6   關於 嗶哩 嗶哩 股份 有限公司   嗶哩 嗶哩 是 中國 年 輕 一代 的 標誌 性 品牌 及 領先 的 視頻 社區 ， 將 「 豐富 中國年 輕人 的 日常   生活 」 作為 公司 使命 。 嗶哩 嗶哩 以 「 你 感興趣 的 視頻 都 在 B 站 」 作為 品牌 主張 ， 向 用戶 提供   廣泛 的 視頻 內容 。 圍繞 著 有 文化 追求 的 用戶 、 高質量 的 內容 、 有才華 的 內容創 作者 以及   他們 之間 強大 的 情感 紐帶 ， 嗶哩 嗶哩 構建 了 自己 的 社區 。 同時 ， 嗶哩 嗶哩 引領 了 標誌 性   的 互動 功能 「 彈幕 」 ， 在 播放 界面 同時 展示 觀看 同一 視頻 的 用戶 的 評論 和 感想 ， 革新 了 觀   看體驗 並激發 了 用 戶間 的 共鳴 。 嗶哩 嗶哩現 已成 為 中國年 輕人 各類 興趣 的 聚集地 ， 是 向   世界 推廣中國 文化 的 前沿 。   有關 更 多 資料 ， 請 訪問 ： http : / / ir . bilibili . com 。   使用 非公 認會計 準則 財務 指標   本 公司 使用 經調 整淨 虧損 、 經調整 每股 及 每股 美國存 託 股 基本 及攤 薄淨 虧損 等 非公 認   會計 準則 指標 ， 以評 估其經 營業績 以及 用 於 制定 財務 和 經營 決策 。 本 公司 認為 ， 非公 認   會計 準則 指標 剔除 股權 激勵 費用 、 通過 業務 收購 獲得 的 無形 資產 相關 的 攤銷 開支 、 通過   業務 收購 獲得 的 無形 資產 相關 的 所得 稅 、 對 上市公司 的 投資 的 公允 價值 變動 收益 ╱ 虧   損 以及 回購 可 轉換 優先票 據 的 收益 （ 非現 金費用 ） 的 影響 ， 將 有助 於 識別 其業務 的 基本   趨勢 。 本 公司 認為 非公 認會計 準則 財務 指標 提供 了關 於 本 公司 經營業績 的 實用 資料 、 增   強對本 公司 過往 表現 及 未來 前景 的 整體 理解 ， 並且 有助 於 更 清晰 地 了解 本 公司 管理 層   在 財務 和 經營 決策 中 所 使用 的 核心 指標 。   非公 認會計 準則 財務 指標 並非 美國公 認會計 準則 所 界定 的 指標 ， 且 並無根據 美國 公認   會計 準則 呈 列 。 非公 認會計 準則 財務 指標 作為 分析 工具 有 局限性 ， 且 於 評估 本 公司 的經   營表現 、 現金 流量 或 流動 資金時 ， 投資者 不應 單獨 考慮 該 等 指標 ， 或 取代 根據 美國 公認   會計 準則 編 製 的 淨 虧 損 、 經營 活動 提供 的 現金 流量 或 其他 合 併 經營 狀況 以及 現金 流量   數據 。   本 公司 將 非公 認會計 準則 財務 指標 調整 至 最具 可比性 的 美國公 認會計 準則 業績 指標 ，   以 減少 該 等 限制 ， 所有 指標 均 應 於 評估 本 公司 業績 時 予以 考慮 。   有關 非公 認會計 準則 財務 指標 的 更 多 資料 ， 請 參閱 本 公告 結尾 所載 的 「 公認 會計 準則 及   非公 認會計 準則 業績 的 未經 審計調 節表 」 列表 。   匯率 資料   僅為 方便 讀者 ， 本 公告 所載 若干 人民 幣金額 按 特定 匯率 換算為 美元 。 除 另 有 指明 外 ， 人   民幣 兌 美元 的 所有 換算均 按 人民 幣 6.3393 元 兌 1.00 美元 的 匯率 換算 ， 該 匯率 為 美國 聯邦   儲備局 H.10 統計 數據 所發 佈 於 2022 年 3 月 31 日 的 匯率 。 本 公司 並無聲明 所述 人民 幣或美   元金額 可 按 任何 特定 匯率 或 任何 匯率 兌換 為 美元 或 人民 幣 （ 視情況 而定 ） 。   7   安全 港聲明   本 公告 載有 前瞻性 陳 述 。 該 等 陳 述 乃 根據 1995 年 《 美國 私人 證券 訴訟 改革 法中 》 的 「 安全   港 」 條文 作出 。 該 等 前瞻性 陳 述 可 從 所用 詞 彙 如 「 將 」 、 「 預期 」 、 「 預計 」 、 「 旨在 」 、 「 未   來 」 、 「 擬 」 、 「 計劃 」 、 「 相信 」 、 「 估計 」 、 「 有 信心 」 、 「 潛在 」 、 「 繼續 」 或 其他 類似 陳 述加   以識別 。 其中 ， 新冠 疫情 的 影響 、 本 公告 內 的 展望 和 引述 管理 層話語 的 部分 ， 以及 嗶哩   嗶哩 的 策略 和 經營 計劃 ， 均 含有 前瞻性 陳 述 。 嗶哩 嗶哩 亦 可能 在 向 美國 證券 交易 委員會   提交 的 定期 報告 、 向 股東 提交 的 中期 及 年度 報告 、 於 香港 聯合 交易所 有限公司 （ 「 香港 聯   交所 」 ） 網 站上 發 佈 的 公告 、 通函 或 其他 刊物 、 新聞稿 和 其他 書面 材料 以及 其高級 職員 、   董事 或 僱員向 第三方 作出 的 口頭陳述 作出 書面 或 口頭 前瞻性 陳 述 。 非歷 史事 實的陳述 ，   包括 但 不限 於 有關 嗶哩 嗶哩 的 信念 和 未來 期望 的 陳 述 ， 均屬 於 前瞻性 陳 述 。 前瞻性 陳 述   涉及 固有 的 風險 和 不 確定 因素 。 多項 因素 可能 導致 實際業績 與 任何 前瞻性 陳 述 所載 內   容出現 重大 差異 ， 包括 但 不限 於 以下 各項 ： 新冠 疫情 對 嗶哩 嗶哩 的 業務 、 經營業績 、 財   務狀況 及 股價 的 影響 ； 嗶哩 嗶哩 的 策略 ； 嗶哩 嗶哩 的 未 來業務 發展 、 財務 狀況 及 經營   業績 ； 嗶哩 嗶哩 在 挽留 及 提升 用戶 、 會員 和 廣告 客戶 的 數量 、 提供 優質 內容 、 產品 和服   務 以及 擴大 其產品 和服 務範圍 的 能力 ； 網上 娛樂 行業 的 競爭 ； 嗶哩 嗶哩 在 目標 用 戶社   區內 維持 其 文化 及 品牌形象 的 能力 ； 嗶哩 嗶哩 管理 成本 及 開支 的 能力 ； 與 網上 娛樂行   業有關 的 中國 政府 政策 及 規定 ， 全球 及 中國 整體 經濟 及業務 狀況 以及 與 上述 任何 一項   相關 或 有關 的 假設 。 有關 該 等 及其 他 風險 的 進 一步 資料 ， 載 於 本 公司 向 證券 交易 委員會   及 香港 聯交所 提交 的 文件 中 。 本 公告 及 附件 所 提供 的 全部 資料 均 截至 本 公告 日期 ， 而且   除根 據 適用 法律 外 ， 本 公司 並沒有 義務 更新 任何 該 等 資料 。   投資者 及 媒體 如有 查詢 ， 請 聯絡 ：   中國 ：   嗶哩 嗶哩 股份 有限公司   Juliet   Yang   電話 ： + 86 - 21 - 2509 - 9255 轉 8523   電郵 ： ir @ bilibili . com   The   Piacente   Group ,   Inc .   Emilie   Wu   電話 ： + 86 - 21 - 6039 - 8363   電郵 ： bilibili @ tpg - ir . com   美國 ：   The   Piacente   Group ,   Inc .   Brandi   Piacente   電話 ： + 1 - 212 - 481 - 2050   電郵 ： bilibili @ tpg - ir . com   8   嗶哩 嗶哩 股份 有限公司   未經 審計 簡明合 併 經營 狀況 表   （ 除了 股份 及 每股 數據 以外 ， 金額 以 千元 為 單位 ）   截至 以下 日期 止三個 月   2021 年   2021 年   2022 年   3 月 31 日   12 月 31 日   3 月 31 日   人民 幣   人民 幣   人民 幣   淨營業額 ：   　 移動 遊戲   1 , 170 , 746   1 , 295 , 350   1 , 357 , 818   　 增值 服務   1 , 496 , 529   1 , 894 , 518   2 , 052 , 192   　 廣告   714 , 687   1 , 587 , 616   1 , 040 , 770   　 電商 及其 他   519 , 111   1 , 003 , 299   603 , 319   淨營業額 總額   3 , 901 , 073   5 , 780 , 783   5 , 054 , 099   營業 成本   ( 2 , 963 , 197 )   ( 4 , 682 , 981 )   ( 4 , 246 , 858 )   毛利 潤   937 , 876   1 , 097 , 802   807 , 241   經營 開支 ：   　 銷售 及 營銷 開支   ( 1 , 000 , 059 )   ( 1 , 761 , 605 )   ( 1 , 253 , 914 )   　 一般 及 行政 開支   ( 388 , 531 )   ( 538 , 120 )   ( 535 , 296 )   　 研發 開支   ( 580 , 254 )   ( 797 , 617 )   ( 1 , 008 , 843 )   經營 開支 總額   ( 1 , 968 , 844 )   ( 3 , 097 , 342 )   ( 2 , 798 , 053 )   經營 虧損   ( 1 , 030 , 968 )   ( 1 , 999 , 540 )   ( 1 , 990 , 812 )   其他 收入 ╱ （ 開支 ） ：   　 投資 收入 ╱ （ 虧損 ） （ 淨額 ）   168 , 212   ( 93 , 331 )   ( 626 , 316 )   　 利息收入   11 , 277   26 , 583   34 , 300   　 利息 開支   ( 33 , 245 )   ( 50 , 097 )   ( 62 , 435 )   　 匯兌 （ 虧損 ） ╱ 收益   ( 28 , 423 )   4 , 056   ( 6 , 264 )   　 其他 （ 淨額 ）   20 , 763   49 , 349   397 , 154   其他 收入 ╱ （ 開支 ） 總額 （ 淨額 ）   138 , 584   ( 63 , 440 )   ( 263 , 561 )   除 所得 稅前 虧損   ( 892 , 384 )   ( 2 , 062 , 980 )   ( 2 , 254 , 373 )   　 所得 稅   ( 12 , 475 )   ( 32 , 787 )   ( 29 , 759 )   淨虧損   ( 904 , 859 )   ( 2 , 095 , 767 )   ( 2 , 284 , 132 )   　 少數 股東應 佔淨 虧損   1 , 304   7 , 753   2 , 150   歸屬 於 嗶哩 嗶哩 股份 有限公司 股東淨 虧損   ( 903 , 555 )   ( 2 , 088 , 014 )   ( 2 , 281 , 982 )   每股 淨虧損 （ 基本 ）   ( 2.54 )   ( 5.34 )   ( 5.80 )   每股 美國存 託 股淨 虧損 （ 基本 ）   ( 2.54 )   ( 5.34 )   ( 5.80 )   每股 淨虧損 （ 攤薄 ）   ( 2.54 )   ( 5.34 )   ( 5.80 )   每股 美國存 託 股淨 虧損 （ 攤薄 ）   ( 2.54 )   ( 5.34 )   ( 5.80 )   普通股 加權 平均 股數 （ 基本 ）   355 , 351 , 263   391 , 248 , 558   393 , 538 , 141   美國存 託 股加權 平均 股數 （ 基本 ）   355 , 351 , 263   391 , 248 , 558   393 , 538 , 141   普通股 加權 平均 股數 （ 攤薄 ）   355 , 351 , 263   391 , 248 , 558   393 , 538 , 141   美國存 託 股加權 平均 股數 （ 攤薄 ）   355 , 351 , 263   391 , 248 , 558   393 , 538 , 141   所附 附 註 為 本 新 聞 稿 的 組 成 部分 。   9   嗶哩 嗶哩 股份 有限公司   未經 審計 財務資料 附 註   （ 除了 股份 及 每股 數據 以外 ， 金額 以 千元 為 單位 ）   截至 以下 日期 止三個 月   2021 年   2021 年   2022 年   3 月 31 日   12 月 31 日   3 月 31 日   人民 幣   人民 幣   人民 幣   股權 激勵 開支 計入 ：   　 營業 成本   14 , 550   26 , 163   23 , 033   　 銷售 及 營銷 開支   13 , 012   15 , 257   12 , 592   　 一般 及 行政 開支   126 , 023   165 , 669   145 , 995   　 研發 開支   60 , 810   100 , 381   96 , 242   總計   214 , 395   307 , 470   277 , 862   10   嗶哩 嗶哩 股份 有限公司   未經 審計 簡明合 併 資產負 債表   （ 除了 股份 及 每股 數據 以外 ， 金額 以 千元 為 單位 ）   2021 年   2022 年   12 月 31 日   3 月 31 日   人民 幣   人民 幣   資產   流動 資產 ：   　 現金及 現金 等 價物   7 , 523 , 108   5 , 077 , 992   　 定期存款   7 , 632 , 334   6 , 580 , 545   　 應收 賬款 （ 淨額 ）   1 , 382 , 328   1 , 274 , 585   　 預 付款 項 及其 他 流動 資產   4 , 848 , 364   4 , 720 , 049   　 短期 投資   15 , 060 , 722   13 , 071 , 197   　 流動 資產 總額   36 , 446 , 856   30 , 724 , 368   非流動 資產 ：   　 物業 及 設備 （ 淨額 ）   1 , 350 , 256   1 , 303 , 154   　 製 作 成本 （ 淨額 ）   1 , 083 , 772   1 , 195 , 475   　 無形 資產 （ 淨額 ）   3 , 835 , 600   4 , 318 , 797   　 商譽   2 , 338 , 303   2 , 682 , 999   　 長 期 投資 （ 淨額 ）   5 , 502 , 524   5 , 946 , 991   　 其他 長 期資產   1 , 495 , 840   1 , 735 , 390   　 非流動 資產 總額   15 , 606 , 295   17 , 182 , 806   資產 總額   52 , 053 , 151   47 , 907 , 174   負債   流動 負債 ：   　 應付 賬款   4 , 360 , 906   4 , 301 , 876   　 應付 薪資及 福利   995 , 451   591 , 130   　 應付 稅款   203 , 770   205 , 574   　 短期 貸款   1 , 232 , 106   1 , 492 , 027   　 遞延 收入   2 , 645 , 389   2 , 634 , 532   　 應計 負債 及其 他應 付款 項   2 , 633 , 389   2 , 110 , 648   　 流動 負債 總額   12 , 071 , 011   11 , 335 , 787   非流動 負債 ：   　 長 期 債務   17 , 784 , 092   16 , 442 , 571   　 其他 長 期 負債   481 , 982   656 , 896   　 非流動 負債 總額   18 , 266 , 074   17 , 099 , 467   負債 總額   30 , 337 , 085   28 , 435 , 254   嗶哩 嗶哩 股份 有限公司 股東 權益 總額   21 , 703 , 667   19 , 461 , 671   少數 股東 的 權益   12 , 399   10 , 249   股東 權益 總額   21 , 716 , 066   19 , 471 , 920   負債 及 股東 權益 總額   52 , 053 , 151   47 , 907 , 174   11   嗶哩 嗶哩 股份 有限公司   公認 會計 準則 及 非公 認會計 準則 業績 的 未經 審計調 節表   （ 除了 股份 及 每股 數據 以外 ， 金額 以 千元 為 單位 ）   截至 以下 日期 止三個 月   2021 年   2021 年   2022 年   3 月 31 日   12 月 31 日   3 月 31 日   人民 幣   人民 幣   人民 幣   淨虧損   ( 904 , 859 )   ( 2 , 095 , 767 )   ( 2 , 284 , 132 )   加 ：   股權 激勵 費用   214 , 395   307 , 470   277 , 862   通過 業務 收購 獲得 的 無形 資產   　 相關 的 攤銷 開支   26 , 145   33 , 227   56 , 997   通過 業務 收購 獲得 的 無形 資產   　 相關 的 所得 稅   ( 1 , 514 )   ( 1 , 514 )   ( 7 , 981 )   對 上市公司 的 投資 的 公允 價值 變動   　 （ 收益 ） ╱ 虧損   ( 225 , 187 )   96 , 771   641 , 114   回購 可 轉換 優先票 據 的 （ 收益 ）   —   —   ( 338 , 779 )   經調 整淨 虧損   ( 891 , 020 )   ( 1 , 659 , 813 )   ( 1 , 654 , 919 )   歸屬 於 嗶哩 嗶哩 股份 有限公司 股東淨 虧損   ( 903 , 555 )   ( 2 , 088 , 014 )   ( 2 , 281 , 982 )   加 ：   股權 激勵 費用   214 , 395   307 , 470   277 , 862   通過 業務 收購 獲得 的 無形 資產   　 相關 的 攤銷 開支   26 , 145   33 , 227   56 , 997   通過 業務 收購 獲得 的 無形 資產   　 相關 的 所得 稅   ( 1 , 514 )   ( 1 , 514 )   ( 7 , 981 )   對 上市公司 的 投資 的 公允 價值 變動   　 （ 收益 ） ╱ 虧損   ( 225 , 187 )   96 , 771   641 , 114   回購 可 轉換 優先票 據 的 （ 收益 ）   —   —   ( 338 , 779 )   經調 整歸屬 於 嗶哩 嗶哩 股份 有限公司   　 股東淨 虧損   ( 889 , 716 )   ( 1 , 652 , 060 )   ( 1 , 652 , 769 )   經調整 每股 淨虧損 （ 基本 ）   ( 2.50 )   ( 4.22 )   ( 4.20 )   經調整 每股 美國存 託 股淨 虧損 （ 基本 ）   ( 2.50 )   ( 4.22 )   ( 4.20 )   經調整 每股 淨虧損 （ 攤薄 ）   ( 2.50 )   ( 4.22 )   ( 4.20 )   經調整 每股 美國存 託 股淨 虧損 （ 攤薄 ）   ( 2.50 )   ( 4.22 )   ( 4.20 )   普通股 加權 平均 股數 （ 基本 ）   355 , 351 , 263   391 , 248 , 558   393 , 538 , 141   美國存 託 股加權 平均 股數 （ 基本 ）   355 , 351 , 263   391 , 248 , 558   393 , 538 , 141   普通股 加權 平均 股數 （ 攤薄 ）   355 , 351 , 263   391 , 248 , 558   393 , 538 , 141   美國存 託 股加權 平均 股數 （ 攤薄 ）   355 , 351 , 263   391 , 248 , 558   393 , 538 , 141\nimport jieba.analyse\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud,STOPWORDS,ImageColorGenerator\n\ncontent &#x3D; open(r&quot;C:\\\\Users\\\\83854\\\\Documents\\\\shujvji\\\\bili\\\\fenci2.txt&quot;, encoding &#x3D; &#39;UTF-8&#39;).read()\ntags &#x3D; jieba.analyse.extract_tags(content,topK&#x3D;200,withWeight&#x3D;False)\ntext &#x3D; &#39; &#39;.join(tags)\nwc &#x3D; WordCloud(font_path&#x3D;r&quot;C:\\Users\\83854\\Documents\\shujvji\\华文行楷.ttf&quot;,\n              background_color&#x3D;&#39;white&#39;,max_words&#x3D;100,\n              max_font_size&#x3D;120,min_font_size&#x3D;10,\n              random_state&#x3D;42,width&#x3D;1200,height&#x3D;900)\nwc.generate(text)\nplt.imshow(wc)\nplt.axis(&#39;off&#39;)\nplt.show()\n我们可以看到，这里出现了很多我们不需要的词语。我们需要使用停用词库，将这些非必要内容排除在外。\n情感偏向from snownlp import SnowNLP\ndoc&#x3D;&quot;纳西妲含着泪水抱住了大慈树王。在悲伤与不舍中，大慈树王最后的意识逐渐溶解，化作美丽的光芒照亮了夜空。一切梦境最终都归还给了须弥的民众。&quot;\\\n    &quot;「我们都栖息在智慧之树下，尝试阅读世界。&quot; \\\n    &quot;「从土中读、从雨中读，尔后化身白鸟攀上枝头…&quot; \\\n    &quot;「终于衔住了至关重要的那一片树叶。&quot; \\\n    &quot;「曾经，我是世上唯一能够做梦的个体。&quot; \\\n    &quot;「在我的梦里，所有人入夜后也都会进入梦乡。&quot; \\\n    &quot;「人们的脑海中飘出奇思异想，&quot; \\\n    &quot;「有些滚落地面，有些浮到天上。&quot; \\\n    &quot;「它将所有事物连接成一片万分夺目的网。&quot; \\\n    &quot;「三千世界之中，又有小小世界，&quot; \\\n    &quot;「所有命运，皆在此间沸腾。\\n&quot; \\\n    &quot;「我逐渐明白，这些不可被描述而又恒久变化之物，&quot; \\\n    &quot;「才是世间最深奥的东西。&quot; \\\n    &quot;「唯有它们，才能彻底驱逐那些疯狂。&quot; \\\n    &quot;「唯有梦，才能将意识从最深沉的黑暗中唤醒。&quot; \\\n    &quot;「我乃命题之人，亦是求解之人。&quot; \\\n    &quot;「以世人之梦挽救世界，曾是属于我的答案。&quot; \\\n    &quot;「而今，你们也寻到了属于自己的答案，&quot; \\\n    &quot;「我会将所有的梦归还世人。&quot; \\\n    &quot;「须弥的子民啊，再见了。&quot; \\\n    &quot;「愿你们今晚得享美梦。」&quot;\ns&#x3D;SnowNLP(doc)\nprint(&#39;词语:&#39;,s.words)\nprint(&#39;分句:&#39;,s.sentences)\nprint(&#39;情感偏向:&#39;,s.sentiments)\nprint(&#39;拼音:&#39;,s.pinyin)\nprint(&#39;关键字:&#39;,s.keywords(5))\nprint(&#39;摘要:&#39;,s.summary(5))\nprint(&#39;词频:&#39;,s.tf)\nprint(&#39;逆向文件频率:&#39;,s.idf)\n\n词语: [&#39;纳西&#39;, &#39;妲含&#39;, &#39;着&#39;, &#39;泪水&#39;, &#39;抱&#39;, &#39;住&#39;, &#39;了&#39;, &#39;大&#39;, &#39;慈&#39;, &#39;树&#39;, &#39;王&#39;, &#39;。&#39;, &#39;在&#39;, &#39;悲伤&#39;, &#39;与不舍&#39;, &#39;中&#39;, &#39;，&#39;, &#39;大&#39;, &#39;慈&#39;, &#39;树&#39;, &#39;王&#39;, &#39;最后&#39;, &#39;的&#39;, &#39;意识&#39;, &#39;逐渐&#39;, &#39;溶解&#39;, &#39;，&#39;, &#39;化&#39;, &#39;作&#39;, &#39;美丽&#39;, &#39;的&#39;, &#39;光芒&#39;, &#39;照亮&#39;, &#39;了&#39;, &#39;夜空&#39;, &#39;。&#39;, &#39;一切&#39;, &#39;梦境&#39;, &#39;最终&#39;, &#39;都&#39;, &#39;归还&#39;, &#39;给&#39;, &#39;了须&#39;, &#39;弥&#39;, &#39;的&#39;, &#39;民众&#39;, &#39;。「&#39;, &#39;我们&#39;, &#39;都&#39;, &#39;栖息&#39;, &#39;在&#39;, &#39;智慧&#39;, &#39;之树&#39;, &#39;下&#39;, &#39;，&#39;, &#39;尝试&#39;, &#39;阅读&#39;, &#39;世界&#39;, &#39;。「&#39;, &#39;从&#39;, &#39;土中&#39;, &#39;读&#39;, &#39;、&#39;, &#39;从雨&#39;, &#39;中&#39;, &#39;读&#39;, &#39;，&#39;, &#39;尔后&#39;, &#39;化身&#39;, &#39;白鸟&#39;, &#39;攀&#39;, &#39;上&#39;, &#39;枝头&#39;, &#39;…「&#39;, &#39;终于&#39;, &#39;衔住&#39;, &#39;了&#39;, &#39;至关重要&#39;, &#39;的&#39;, &#39;那&#39;, &#39;一片&#39;, &#39;树叶&#39;, &#39;。「&#39;, &#39;曾经&#39;, &#39;，&#39;, &#39;我&#39;, &#39;是&#39;, &#39;世&#39;, &#39;上&#39;, &#39;唯一&#39;, &#39;能够&#39;, &#39;做梦&#39;, &#39;的&#39;, &#39;个体&#39;, &#39;。「&#39;, &#39;在&#39;, &#39;我&#39;, &#39;的&#39;, &#39;梦里&#39;, &#39;，&#39;, &#39;所有&#39;, &#39;人&#39;, &#39;入夜&#39;, &#39;后&#39;, &#39;也&#39;, &#39;都&#39;, &#39;会&#39;, &#39;进入&#39;, &#39;梦乡&#39;, &#39;。「&#39;, &#39;人们&#39;, &#39;的&#39;, &#39;脑海&#39;, &#39;中&#39;, &#39;飘&#39;, &#39;出&#39;, &#39;奇&#39;, &#39;思&#39;, &#39;异想&#39;, &#39;，「&#39;, &#39;有些&#39;, &#39;滚&#39;, &#39;落地&#39;, &#39;面&#39;, &#39;，&#39;, &#39;有些&#39;, &#39;浮&#39;, &#39;到&#39;, &#39;天上&#39;, &#39;。「&#39;, &#39;它&#39;, &#39;将&#39;, &#39;所有&#39;, &#39;事物&#39;, &#39;连接&#39;, &#39;成一片&#39;, &#39;万分夺目&#39;, &#39;的&#39;, &#39;网&#39;, &#39;。「&#39;, &#39;三千世界&#39;, &#39;之中&#39;, &#39;，&#39;, &#39;又&#39;, &#39;有&#39;, &#39;小小&#39;, &#39;世界&#39;, &#39;，「&#39;, &#39;所有&#39;, &#39;命运&#39;, &#39;，&#39;, &#39;皆&#39;, &#39;在&#39;, &#39;此间&#39;, &#39;沸腾&#39;, &#39;。&#39;, &#39;「&#39;, &#39;我&#39;, &#39;逐渐&#39;, &#39;明白&#39;, &#39;，&#39;, &#39;这些&#39;, &#39;不可&#39;, &#39;被&#39;, &#39;描述&#39;, &#39;而&#39;, &#39;又&#39;, &#39;恒久&#39;, &#39;变化&#39;, &#39;之&#39;, &#39;物&#39;, &#39;，「&#39;, &#39;才&#39;, &#39;是&#39;, &#39;世间&#39;, &#39;最&#39;, &#39;深奥&#39;, &#39;的&#39;, &#39;东西&#39;, &#39;。「&#39;, &#39;唯有&#39;, &#39;它们&#39;, &#39;，&#39;, &#39;才&#39;, &#39;能&#39;, &#39;彻底&#39;, &#39;驱逐&#39;, &#39;那些&#39;, &#39;疯狂&#39;, &#39;。「&#39;, &#39;唯有&#39;, &#39;梦&#39;, &#39;，&#39;, &#39;才&#39;, &#39;能&#39;, &#39;将&#39;, &#39;意识&#39;, &#39;从&#39;, &#39;最&#39;, &#39;深沉&#39;, &#39;的&#39;, &#39;黑暗&#39;, &#39;中&#39;, &#39;唤醒&#39;, &#39;。「&#39;, &#39;我&#39;, &#39;乃&#39;, &#39;命题&#39;, &#39;之&#39;, &#39;人&#39;, &#39;，&#39;, &#39;亦&#39;, &#39;是求&#39;, &#39;解&#39;, &#39;之&#39;, &#39;人&#39;, &#39;。「&#39;, &#39;以&#39;, &#39;世人&#39;, &#39;之&#39;, &#39;梦&#39;, &#39;挽救&#39;, &#39;世界&#39;, &#39;，&#39;, &#39;曾&#39;, &#39;是&#39;, &#39;属于&#39;, &#39;我&#39;, &#39;的&#39;, &#39;答案&#39;, &#39;。「&#39;, &#39;而今&#39;, &#39;，&#39;, &#39;你们&#39;, &#39;也&#39;, &#39;寻到&#39;, &#39;了&#39;, &#39;属于&#39;, &#39;自己&#39;, &#39;的&#39;, &#39;答案&#39;, &#39;，「&#39;, &#39;我会&#39;, &#39;将&#39;, &#39;所有&#39;, &#39;的&#39;, &#39;梦&#39;, &#39;归还&#39;, &#39;世人&#39;, &#39;。「&#39;, &#39;须&#39;, &#39;弥&#39;, &#39;的&#39;, &#39;子民&#39;, &#39;啊&#39;, &#39;，&#39;, &#39;再见&#39;, &#39;了&#39;, &#39;。「&#39;, &#39;愿&#39;, &#39;你们&#39;, &#39;今晚&#39;, &#39;得&#39;, &#39;享美梦&#39;, &#39;。」&#39;]\n分句: [&#39;纳西妲含着泪水抱住了大慈树王&#39;, &#39;在悲伤与不舍中&#39;, &#39;大慈树王最后的意识逐渐溶解&#39;, &#39;化作美丽的光芒照亮了夜空&#39;, &#39;一切梦境最终都归还给了须弥的民众&#39;, &#39;「我们都栖息在智慧之树下&#39;, &#39;尝试阅读世界&#39;, &#39;「从土中读、从雨中读&#39;, &#39;尔后化身白鸟攀上枝头…「终于衔住了至关重要的那一片树叶&#39;, &#39;「曾经&#39;, &#39;我是世上唯一能够做梦的个体&#39;, &#39;「在我的梦里&#39;, &#39;所有人入夜后也都会进入梦乡&#39;, &#39;「人们的脑海中飘出奇思异想&#39;, &#39;「有些滚落地面&#39;, &#39;有些浮到天上&#39;, &#39;「它将所有事物连接成一片万分夺目的网&#39;, &#39;「三千世界之中&#39;, &#39;又有小小世界&#39;, &#39;「所有命运&#39;, &#39;皆在此间沸腾&#39;, &#39;「我逐渐明白&#39;, &#39;这些不可被描述而又恒久变化之物&#39;, &#39;「才是世间最深奥的东西&#39;, &#39;「唯有它们&#39;, &#39;才能彻底驱逐那些疯狂&#39;, &#39;「唯有梦&#39;, &#39;才能将意识从最深沉的黑暗中唤醒&#39;, &#39;「我乃命题之人&#39;, &#39;亦是求解之人&#39;, &#39;「以世人之梦挽救世界&#39;, &#39;曾是属于我的答案&#39;, &#39;「而今&#39;, &#39;你们也寻到了属于自己的答案&#39;, &#39;「我会将所有的梦归还世人&#39;, &#39;「须弥的子民啊&#39;, &#39;再见了&#39;, &#39;「愿你们今晚得享美梦&#39;, &#39;」&#39;]\n情感偏向: 1.0\n拼音: [&#39;na&#39;, &#39;xi&#39;, &#39;妲&#39;, &#39;han&#39;, &#39;zhe&#39;, &#39;lei&#39;, &#39;shui&#39;, &#39;bao&#39;, &#39;zhu&#39;, &#39;liao&#39;, &#39;da&#39;, &#39;慈&#39;, &#39;shu&#39;, &#39;wang&#39;, &#39;。&#39;, &#39;zai&#39;, &#39;bei&#39;, &#39;shang&#39;, &#39;与&#39;, &#39;bu&#39;, &#39;she&#39;, &#39;zhong&#39;, &#39;，&#39;, &#39;da&#39;, &#39;慈&#39;, &#39;shu&#39;, &#39;wang&#39;, &#39;zui&#39;, &#39;hou&#39;, &#39;de&#39;, &#39;yi&#39;, &#39;shi&#39;, &#39;zhu&#39;, &#39;jian&#39;, &#39;rong&#39;, &#39;jie&#39;, &#39;，&#39;, &#39;hua&#39;, &#39;zuo&#39;, &#39;mei&#39;, &#39;丽&#39;, &#39;de&#39;, &#39;guang&#39;, &#39;mang&#39;, &#39;zhao&#39;, &#39;liang&#39;, &#39;liao&#39;, &#39;ye&#39;, &#39;kong&#39;, &#39;。&#39;, &#39;yi&#39;, &#39;qie&#39;, &#39;meng&#39;, &#39;jing&#39;, &#39;zui&#39;, &#39;zhong&#39;, &#39;dou&#39;, &#39;gui&#39;, &#39;huan&#39;, &#39;gei&#39;, &#39;liao&#39;, &#39;xu&#39;, &#39;弥&#39;, &#39;de&#39;, &#39;min&#39;, &#39;zhong&#39;, &#39;。「&#39;, &#39;wo&#39;, &#39;men&#39;, &#39;dou&#39;, &#39;qi&#39;, &#39;xi&#39;, &#39;zai&#39;, &#39;zhi&#39;, &#39;hui&#39;, &#39;zhi&#39;, &#39;shu&#39;, &#39;xia&#39;, &#39;，&#39;, &#39;chang&#39;, &#39;shi&#39;, &#39;yue&#39;, &#39;du&#39;, &#39;shi&#39;, &#39;jie&#39;, &#39;。「&#39;, &#39;cong&#39;, &#39;tu&#39;, &#39;zhong&#39;, &#39;du&#39;, &#39;、&#39;, &#39;cong&#39;, &#39;yu&#39;, &#39;zhong&#39;, &#39;du&#39;, &#39;，&#39;, &#39;er&#39;, &#39;hou&#39;, &#39;hua&#39;, &#39;shen&#39;, &#39;bai&#39;, &#39;niao&#39;, &#39;pan&#39;, &#39;shang&#39;, &#39;zhi&#39;, &#39;tou&#39;, &#39;…「&#39;, &#39;zhong&#39;, &#39;yu&#39;, &#39;xian&#39;, &#39;zhu&#39;, &#39;liao&#39;, &#39;zhi&#39;, &#39;guan&#39;, &#39;zhong&#39;, &#39;yao&#39;, &#39;de&#39;, &#39;na&#39;, &#39;yi&#39;, &#39;pian&#39;, &#39;shu&#39;, &#39;ye&#39;, &#39;。「&#39;, &#39;ceng&#39;, &#39;jing&#39;, &#39;，&#39;, &#39;wo&#39;, &#39;shi&#39;, &#39;shi&#39;, &#39;shang&#39;, &#39;wei&#39;, &#39;yi&#39;, &#39;neng&#39;, &#39;gou&#39;, &#39;zuo&#39;, &#39;meng&#39;, &#39;de&#39;, &#39;ge&#39;, &#39;ti&#39;, &#39;。「&#39;, &#39;zai&#39;, &#39;wo&#39;, &#39;de&#39;, &#39;meng&#39;, &#39;li&#39;, &#39;，&#39;, &#39;suo&#39;, &#39;you&#39;, &#39;ren&#39;, &#39;ru&#39;, &#39;ye&#39;, &#39;hou&#39;, &#39;ye&#39;, &#39;du&#39;, &#39;hui&#39;, &#39;jin&#39;, &#39;ru&#39;, &#39;meng&#39;, &#39;xiang&#39;, &#39;。「&#39;, &#39;ren&#39;, &#39;men&#39;, &#39;de&#39;, &#39;nao&#39;, &#39;hai&#39;, &#39;zhong&#39;, &#39;piao&#39;, &#39;chu&#39;, &#39;qi&#39;, &#39;si&#39;, &#39;yi&#39;, &#39;xiang&#39;, &#39;，「&#39;, &#39;you&#39;, &#39;xie&#39;, &#39;gun&#39;, &#39;luo&#39;, &#39;di&#39;, &#39;mian&#39;, &#39;，&#39;, &#39;you&#39;, &#39;xie&#39;, &#39;fu&#39;, &#39;dao&#39;, &#39;tian&#39;, &#39;shang&#39;, &#39;。「&#39;, &#39;ta&#39;, &#39;jiang&#39;, &#39;suo&#39;, &#39;you&#39;, &#39;shi&#39;, &#39;wu&#39;, &#39;lian&#39;, &#39;jie&#39;, &#39;cheng&#39;, &#39;yi&#39;, &#39;pian&#39;, &#39;wan&#39;, &#39;fen&#39;, &#39;duo&#39;, &#39;mu&#39;, &#39;de&#39;, &#39;wang&#39;, &#39;。「&#39;, &#39;san&#39;, &#39;qian&#39;, &#39;shi&#39;, &#39;jie&#39;, &#39;zhi&#39;, &#39;zhong&#39;, &#39;，&#39;, &#39;you&#39;, &#39;you&#39;, &#39;xiao&#39;, &#39;xiao&#39;, &#39;shi&#39;, &#39;jie&#39;, &#39;，「&#39;, &#39;suo&#39;, &#39;you&#39;, &#39;ming&#39;, &#39;yun&#39;, &#39;，&#39;, &#39;jie&#39;, &#39;zai&#39;, &#39;ci&#39;, &#39;jian&#39;, &#39;fei&#39;, &#39;teng&#39;, &#39;。&#39;, &#39;「&#39;, &#39;wo&#39;, &#39;zhu&#39;, &#39;jian&#39;, &#39;ming&#39;, &#39;bai&#39;, &#39;，&#39;, &#39;zhe&#39;, &#39;xie&#39;, &#39;bu&#39;, &#39;ke&#39;, &#39;bei&#39;, &#39;miao&#39;, &#39;shu&#39;, &#39;er&#39;, &#39;you&#39;, &#39;heng&#39;, &#39;jiu&#39;, &#39;bian&#39;, &#39;hua&#39;, &#39;zhi&#39;, &#39;wu&#39;, &#39;，「&#39;, &#39;cai&#39;, &#39;shi&#39;, &#39;shi&#39;, &#39;jian&#39;, &#39;zui&#39;, &#39;shen&#39;, &#39;ao&#39;, &#39;de&#39;, &#39;dong&#39;, &#39;xi&#39;, &#39;。「&#39;, &#39;wei&#39;, &#39;you&#39;, &#39;ta&#39;, &#39;men&#39;, &#39;，&#39;, &#39;cai&#39;, &#39;neng&#39;, &#39;che&#39;, &#39;di&#39;, &#39;qu&#39;, &#39;zhu&#39;, &#39;na&#39;, &#39;xie&#39;, &#39;feng&#39;, &#39;kuang&#39;, &#39;。「&#39;, &#39;wei&#39;, &#39;you&#39;, &#39;meng&#39;, &#39;，&#39;, &#39;cai&#39;, &#39;neng&#39;, &#39;jiang&#39;, &#39;yi&#39;, &#39;shi&#39;, &#39;cong&#39;, &#39;zui&#39;, &#39;shen&#39;, &#39;chen&#39;, &#39;de&#39;, &#39;hei&#39;, &#39;an&#39;, &#39;zhong&#39;, &#39;huan&#39;, &#39;xing&#39;, &#39;。「&#39;, &#39;wo&#39;, &#39;nai&#39;, &#39;ming&#39;, &#39;ti&#39;, &#39;zhi&#39;, &#39;ren&#39;, &#39;，&#39;, &#39;yi&#39;, &#39;shi&#39;, &#39;qiu&#39;, &#39;jie&#39;, &#39;zhi&#39;, &#39;ren&#39;, &#39;。「&#39;, &#39;yi&#39;, &#39;shi&#39;, &#39;ren&#39;, &#39;zhi&#39;, &#39;meng&#39;, &#39;wan&#39;, &#39;jiu&#39;, &#39;shi&#39;, &#39;jie&#39;, &#39;，&#39;, &#39;zeng&#39;, &#39;shi&#39;, &#39;shu&#39;, &#39;yu&#39;, &#39;wo&#39;, &#39;de&#39;, &#39;da&#39;, &#39;an&#39;, &#39;。「&#39;, &#39;er&#39;, &#39;jin&#39;, &#39;，&#39;, &#39;ni&#39;, &#39;men&#39;, &#39;ye&#39;, &#39;xun&#39;, &#39;dao&#39;, &#39;liao&#39;, &#39;shu&#39;, &#39;yu&#39;, &#39;zi&#39;, &#39;ji&#39;, &#39;de&#39;, &#39;da&#39;, &#39;an&#39;, &#39;，「&#39;, &#39;wo&#39;, &#39;hui&#39;, &#39;jiang&#39;, &#39;suo&#39;, &#39;you&#39;, &#39;de&#39;, &#39;meng&#39;, &#39;gui&#39;, &#39;huan&#39;, &#39;shi&#39;, &#39;ren&#39;, &#39;。「&#39;, &#39;xu&#39;, &#39;弥&#39;, &#39;de&#39;, &#39;zi&#39;, &#39;min&#39;, &#39;a&#39;, &#39;，&#39;, &#39;zai&#39;, &#39;jian&#39;, &#39;liao&#39;, &#39;。「&#39;, &#39;yuan&#39;, &#39;ni&#39;, &#39;men&#39;, &#39;jin&#39;, &#39;wan&#39;, &#39;de&#39;, &#39;xiang&#39;, &#39;mei&#39;, &#39;meng&#39;, &#39;。」&#39;]\n关键字: [&#39;「&#39;, &#39;中&#39;, &#39;都&#39;, &#39;上&#39;, &#39;才&#39;]\n摘要: [&#39;「以世人之梦挽救世界&#39;, &#39;才能将意识从最深沉的黑暗中唤醒&#39;, &#39;「唯有梦&#39;, &#39;「我会将所有的梦归还世人&#39;, &#39;所有人入夜后也都会进入梦乡&#39;]\n词频: [&#123;&#39;纳&#39;: 1&#125;, &#123;&#39;西&#39;: 1&#125;, &#123;&#39;妲&#39;: 1&#125;, &#123;&#39;含&#39;: 1&#125;, &#123;&#39;着&#39;: 1&#125;, &#123;&#39;泪&#39;: 1&#125;, &#123;&#39;水&#39;: 1&#125;, &#123;&#39;抱&#39;: 1&#125;, &#123;&#39;住&#39;: 1&#125;, &#123;&#39;了&#39;: 1&#125;, &#123;&#39;大&#39;: 1&#125;, &#123;&#39;慈&#39;: 1&#125;, &#123;&#39;树&#39;: 1&#125;, &#123;&#39;王&#39;: 1&#125;, &#123;&#39;。&#39;: 1&#125;, &#123;&#39;在&#39;: 1&#125;, &#123;&#39;悲&#39;: 1&#125;, &#123;&#39;伤&#39;: 1&#125;, &#123;&#39;与&#39;: 1&#125;, &#123;&#39;不&#39;: 1&#125;, &#123;&#39;舍&#39;: 1&#125;, &#123;&#39;中&#39;: 1&#125;, &#123;&#39;，&#39;: 1&#125;, &#123;&#39;大&#39;: 1&#125;, &#123;&#39;慈&#39;: 1&#125;, &#123;&#39;树&#39;: 1&#125;, &#123;&#39;王&#39;: 1&#125;, &#123;&#39;最&#39;: 1&#125;, &#123;&#39;后&#39;: 1&#125;, &#123;&#39;的&#39;: 1&#125;, &#123;&#39;意&#39;: 1&#125;, &#123;&#39;识&#39;: 1&#125;, &#123;&#39;逐&#39;: 1&#125;, &#123;&#39;渐&#39;: 1&#125;, &#123;&#39;溶&#39;: 1&#125;, &#123;&#39;解&#39;: 1&#125;, &#123;&#39;，&#39;: 1&#125;, &#123;&#39;化&#39;: 1&#125;, &#123;&#39;作&#39;: 1&#125;, &#123;&#39;美&#39;: 1&#125;, &#123;&#39;丽&#39;: 1&#125;, &#123;&#39;的&#39;: 1&#125;, &#123;&#39;光&#39;: 1&#125;, &#123;&#39;芒&#39;: 1&#125;, &#123;&#39;照&#39;: 1&#125;, &#123;&#39;亮&#39;: 1&#125;, &#123;&#39;了&#39;: 1&#125;, &#123;&#39;夜&#39;: 1&#125;, &#123;&#39;空&#39;: 1&#125;, &#123;&#39;。&#39;: 1&#125;, &#123;&#39;一&#39;: 1&#125;, &#123;&#39;切&#39;: 1&#125;, &#123;&#39;梦&#39;: 1&#125;, &#123;&#39;境&#39;: 1&#125;, &#123;&#39;最&#39;: 1&#125;, &#123;&#39;终&#39;: 1&#125;, &#123;&#39;都&#39;: 1&#125;, &#123;&#39;归&#39;: 1&#125;, &#123;&#39;还&#39;: 1&#125;, &#123;&#39;给&#39;: 1&#125;, &#123;&#39;了&#39;: 1&#125;, &#123;&#39;须&#39;: 1&#125;, &#123;&#39;弥&#39;: 1&#125;, &#123;&#39;的&#39;: 1&#125;, &#123;&#39;民&#39;: 1&#125;, &#123;&#39;众&#39;: 1&#125;, &#123;&#39;。&#39;: 1&#125;, &#123;&#39;「&#39;: 1&#125;, &#123;&#39;我&#39;: 1&#125;, &#123;&#39;们&#39;: 1&#125;, &#123;&#39;都&#39;: 1&#125;, &#123;&#39;栖&#39;: 1&#125;, &#123;&#39;息&#39;: 1&#125;, &#123;&#39;在&#39;: 1&#125;, &#123;&#39;智&#39;: 1&#125;, &#123;&#39;慧&#39;: 1&#125;, &#123;&#39;之&#39;: 1&#125;, &#123;&#39;树&#39;: 1&#125;, &#123;&#39;下&#39;: 1&#125;, &#123;&#39;，&#39;: 1&#125;, &#123;&#39;尝&#39;: 1&#125;, &#123;&#39;试&#39;: 1&#125;, &#123;&#39;阅&#39;: 1&#125;, &#123;&#39;读&#39;: 1&#125;, &#123;&#39;世&#39;: 1&#125;, &#123;&#39;界&#39;: 1&#125;, &#123;&#39;。&#39;: 1&#125;, &#123;&#39;「&#39;: 1&#125;, &#123;&#39;从&#39;: 1&#125;, &#123;&#39;土&#39;: 1&#125;, &#123;&#39;中&#39;: 1&#125;, &#123;&#39;读&#39;: 1&#125;, &#123;&#39;、&#39;: 1&#125;, &#123;&#39;从&#39;: 1&#125;, &#123;&#39;雨&#39;: 1&#125;, &#123;&#39;中&#39;: 1&#125;, &#123;&#39;读&#39;: 1&#125;, &#123;&#39;，&#39;: 1&#125;, &#123;&#39;尔&#39;: 1&#125;, &#123;&#39;后&#39;: 1&#125;, &#123;&#39;化&#39;: 1&#125;, &#123;&#39;身&#39;: 1&#125;, &#123;&#39;白&#39;: 1&#125;, &#123;&#39;鸟&#39;: 1&#125;, &#123;&#39;攀&#39;: 1&#125;, &#123;&#39;上&#39;: 1&#125;, &#123;&#39;枝&#39;: 1&#125;, &#123;&#39;头&#39;: 1&#125;, &#123;&#39;…&#39;: 1&#125;, &#123;&#39;「&#39;: 1&#125;, &#123;&#39;终&#39;: 1&#125;, &#123;&#39;于&#39;: 1&#125;, &#123;&#39;衔&#39;: 1&#125;, &#123;&#39;住&#39;: 1&#125;, &#123;&#39;了&#39;: 1&#125;, &#123;&#39;至&#39;: 1&#125;, &#123;&#39;关&#39;: 1&#125;, &#123;&#39;重&#39;: 1&#125;, &#123;&#39;要&#39;: 1&#125;, &#123;&#39;的&#39;: 1&#125;, &#123;&#39;那&#39;: 1&#125;, &#123;&#39;一&#39;: 1&#125;, &#123;&#39;片&#39;: 1&#125;, &#123;&#39;树&#39;: 1&#125;, &#123;&#39;叶&#39;: 1&#125;, &#123;&#39;。&#39;: 1&#125;, &#123;&#39;「&#39;: 1&#125;, &#123;&#39;曾&#39;: 1&#125;, &#123;&#39;经&#39;: 1&#125;, &#123;&#39;，&#39;: 1&#125;, &#123;&#39;我&#39;: 1&#125;, &#123;&#39;是&#39;: 1&#125;, &#123;&#39;世&#39;: 1&#125;, &#123;&#39;上&#39;: 1&#125;, &#123;&#39;唯&#39;: 1&#125;, &#123;&#39;一&#39;: 1&#125;, &#123;&#39;能&#39;: 1&#125;, &#123;&#39;够&#39;: 1&#125;, &#123;&#39;做&#39;: 1&#125;, &#123;&#39;梦&#39;: 1&#125;, &#123;&#39;的&#39;: 1&#125;, &#123;&#39;个&#39;: 1&#125;, &#123;&#39;体&#39;: 1&#125;, &#123;&#39;。&#39;: 1&#125;, &#123;&#39;「&#39;: 1&#125;, &#123;&#39;在&#39;: 1&#125;, &#123;&#39;我&#39;: 1&#125;, &#123;&#39;的&#39;: 1&#125;, &#123;&#39;梦&#39;: 1&#125;, &#123;&#39;里&#39;: 1&#125;, &#123;&#39;，&#39;: 1&#125;, &#123;&#39;所&#39;: 1&#125;, &#123;&#39;有&#39;: 1&#125;, &#123;&#39;人&#39;: 1&#125;, &#123;&#39;入&#39;: 1&#125;, &#123;&#39;夜&#39;: 1&#125;, &#123;&#39;后&#39;: 1&#125;, &#123;&#39;也&#39;: 1&#125;, &#123;&#39;都&#39;: 1&#125;, &#123;&#39;会&#39;: 1&#125;, &#123;&#39;进&#39;: 1&#125;, &#123;&#39;入&#39;: 1&#125;, &#123;&#39;梦&#39;: 1&#125;, &#123;&#39;乡&#39;: 1&#125;, &#123;&#39;。&#39;: 1&#125;, &#123;&#39;「&#39;: 1&#125;, &#123;&#39;人&#39;: 1&#125;, &#123;&#39;们&#39;: 1&#125;, &#123;&#39;的&#39;: 1&#125;, &#123;&#39;脑&#39;: 1&#125;, &#123;&#39;海&#39;: 1&#125;, &#123;&#39;中&#39;: 1&#125;, &#123;&#39;飘&#39;: 1&#125;, &#123;&#39;出&#39;: 1&#125;, &#123;&#39;奇&#39;: 1&#125;, &#123;&#39;思&#39;: 1&#125;, &#123;&#39;异&#39;: 1&#125;, &#123;&#39;想&#39;: 1&#125;, &#123;&#39;，&#39;: 1&#125;, &#123;&#39;「&#39;: 1&#125;, &#123;&#39;有&#39;: 1&#125;, &#123;&#39;些&#39;: 1&#125;, &#123;&#39;滚&#39;: 1&#125;, &#123;&#39;落&#39;: 1&#125;, &#123;&#39;地&#39;: 1&#125;, &#123;&#39;面&#39;: 1&#125;, &#123;&#39;，&#39;: 1&#125;, &#123;&#39;有&#39;: 1&#125;, &#123;&#39;些&#39;: 1&#125;, &#123;&#39;浮&#39;: 1&#125;, &#123;&#39;到&#39;: 1&#125;, &#123;&#39;天&#39;: 1&#125;, &#123;&#39;上&#39;: 1&#125;, &#123;&#39;。&#39;: 1&#125;, &#123;&#39;「&#39;: 1&#125;, &#123;&#39;它&#39;: 1&#125;, &#123;&#39;将&#39;: 1&#125;, &#123;&#39;所&#39;: 1&#125;, &#123;&#39;有&#39;: 1&#125;, &#123;&#39;事&#39;: 1&#125;, &#123;&#39;物&#39;: 1&#125;, &#123;&#39;连&#39;: 1&#125;, &#123;&#39;接&#39;: 1&#125;, &#123;&#39;成&#39;: 1&#125;, &#123;&#39;一&#39;: 1&#125;, &#123;&#39;片&#39;: 1&#125;, &#123;&#39;万&#39;: 1&#125;, &#123;&#39;分&#39;: 1&#125;, &#123;&#39;夺&#39;: 1&#125;, &#123;&#39;目&#39;: 1&#125;, &#123;&#39;的&#39;: 1&#125;, &#123;&#39;网&#39;: 1&#125;, &#123;&#39;。&#39;: 1&#125;, &#123;&#39;「&#39;: 1&#125;, &#123;&#39;三&#39;: 1&#125;, &#123;&#39;千&#39;: 1&#125;, &#123;&#39;世&#39;: 1&#125;, &#123;&#39;界&#39;: 1&#125;, &#123;&#39;之&#39;: 1&#125;, &#123;&#39;中&#39;: 1&#125;, &#123;&#39;，&#39;: 1&#125;, &#123;&#39;又&#39;: 1&#125;, &#123;&#39;有&#39;: 1&#125;, &#123;&#39;小&#39;: 1&#125;, &#123;&#39;小&#39;: 1&#125;, &#123;&#39;世&#39;: 1&#125;, &#123;&#39;界&#39;: 1&#125;, &#123;&#39;，&#39;: 1&#125;, &#123;&#39;「&#39;: 1&#125;, &#123;&#39;所&#39;: 1&#125;, &#123;&#39;有&#39;: 1&#125;, &#123;&#39;命&#39;: 1&#125;, &#123;&#39;运&#39;: 1&#125;, &#123;&#39;，&#39;: 1&#125;, &#123;&#39;皆&#39;: 1&#125;, &#123;&#39;在&#39;: 1&#125;, &#123;&#39;此&#39;: 1&#125;, &#123;&#39;间&#39;: 1&#125;, &#123;&#39;沸&#39;: 1&#125;, &#123;&#39;腾&#39;: 1&#125;, &#123;&#39;。&#39;: 1&#125;, &#123;&#39;\\n&#39;: 1&#125;, &#123;&#39;「&#39;: 1&#125;, &#123;&#39;我&#39;: 1&#125;, &#123;&#39;逐&#39;: 1&#125;, &#123;&#39;渐&#39;: 1&#125;, &#123;&#39;明&#39;: 1&#125;, &#123;&#39;白&#39;: 1&#125;, &#123;&#39;，&#39;: 1&#125;, &#123;&#39;这&#39;: 1&#125;, &#123;&#39;些&#39;: 1&#125;, &#123;&#39;不&#39;: 1&#125;, &#123;&#39;可&#39;: 1&#125;, &#123;&#39;被&#39;: 1&#125;, &#123;&#39;描&#39;: 1&#125;, &#123;&#39;述&#39;: 1&#125;, &#123;&#39;而&#39;: 1&#125;, &#123;&#39;又&#39;: 1&#125;, &#123;&#39;恒&#39;: 1&#125;, &#123;&#39;久&#39;: 1&#125;, &#123;&#39;变&#39;: 1&#125;, &#123;&#39;化&#39;: 1&#125;, &#123;&#39;之&#39;: 1&#125;, &#123;&#39;物&#39;: 1&#125;, &#123;&#39;，&#39;: 1&#125;, &#123;&#39;「&#39;: 1&#125;, &#123;&#39;才&#39;: 1&#125;, &#123;&#39;是&#39;: 1&#125;, &#123;&#39;世&#39;: 1&#125;, &#123;&#39;间&#39;: 1&#125;, &#123;&#39;最&#39;: 1&#125;, &#123;&#39;深&#39;: 1&#125;, &#123;&#39;奥&#39;: 1&#125;, &#123;&#39;的&#39;: 1&#125;, &#123;&#39;东&#39;: 1&#125;, &#123;&#39;西&#39;: 1&#125;, &#123;&#39;。&#39;: 1&#125;, &#123;&#39;「&#39;: 1&#125;, &#123;&#39;唯&#39;: 1&#125;, &#123;&#39;有&#39;: 1&#125;, &#123;&#39;它&#39;: 1&#125;, &#123;&#39;们&#39;: 1&#125;, &#123;&#39;，&#39;: 1&#125;, &#123;&#39;才&#39;: 1&#125;, &#123;&#39;能&#39;: 1&#125;, &#123;&#39;彻&#39;: 1&#125;, &#123;&#39;底&#39;: 1&#125;, &#123;&#39;驱&#39;: 1&#125;, &#123;&#39;逐&#39;: 1&#125;, &#123;&#39;那&#39;: 1&#125;, &#123;&#39;些&#39;: 1&#125;, &#123;&#39;疯&#39;: 1&#125;, &#123;&#39;狂&#39;: 1&#125;, &#123;&#39;。&#39;: 1&#125;, &#123;&#39;「&#39;: 1&#125;, &#123;&#39;唯&#39;: 1&#125;, &#123;&#39;有&#39;: 1&#125;, &#123;&#39;梦&#39;: 1&#125;, &#123;&#39;，&#39;: 1&#125;, &#123;&#39;才&#39;: 1&#125;, &#123;&#39;能&#39;: 1&#125;, &#123;&#39;将&#39;: 1&#125;, &#123;&#39;意&#39;: 1&#125;, &#123;&#39;识&#39;: 1&#125;, &#123;&#39;从&#39;: 1&#125;, &#123;&#39;最&#39;: 1&#125;, &#123;&#39;深&#39;: 1&#125;, &#123;&#39;沉&#39;: 1&#125;, &#123;&#39;的&#39;: 1&#125;, &#123;&#39;黑&#39;: 1&#125;, &#123;&#39;暗&#39;: 1&#125;, &#123;&#39;中&#39;: 1&#125;, &#123;&#39;唤&#39;: 1&#125;, &#123;&#39;醒&#39;: 1&#125;, &#123;&#39;。&#39;: 1&#125;, &#123;&#39;「&#39;: 1&#125;, &#123;&#39;我&#39;: 1&#125;, &#123;&#39;乃&#39;: 1&#125;, &#123;&#39;命&#39;: 1&#125;, &#123;&#39;题&#39;: 1&#125;, &#123;&#39;之&#39;: 1&#125;, &#123;&#39;人&#39;: 1&#125;, &#123;&#39;，&#39;: 1&#125;, &#123;&#39;亦&#39;: 1&#125;, &#123;&#39;是&#39;: 1&#125;, &#123;&#39;求&#39;: 1&#125;, &#123;&#39;解&#39;: 1&#125;, &#123;&#39;之&#39;: 1&#125;, &#123;&#39;人&#39;: 1&#125;, &#123;&#39;。&#39;: 1&#125;, &#123;&#39;「&#39;: 1&#125;, &#123;&#39;以&#39;: 1&#125;, &#123;&#39;世&#39;: 1&#125;, &#123;&#39;人&#39;: 1&#125;, &#123;&#39;之&#39;: 1&#125;, &#123;&#39;梦&#39;: 1&#125;, &#123;&#39;挽&#39;: 1&#125;, &#123;&#39;救&#39;: 1&#125;, &#123;&#39;世&#39;: 1&#125;, &#123;&#39;界&#39;: 1&#125;, &#123;&#39;，&#39;: 1&#125;, &#123;&#39;曾&#39;: 1&#125;, &#123;&#39;是&#39;: 1&#125;, &#123;&#39;属&#39;: 1&#125;, &#123;&#39;于&#39;: 1&#125;, &#123;&#39;我&#39;: 1&#125;, &#123;&#39;的&#39;: 1&#125;, &#123;&#39;答&#39;: 1&#125;, &#123;&#39;案&#39;: 1&#125;, &#123;&#39;。&#39;: 1&#125;, &#123;&#39;「&#39;: 1&#125;, &#123;&#39;而&#39;: 1&#125;, &#123;&#39;今&#39;: 1&#125;, &#123;&#39;，&#39;: 1&#125;, &#123;&#39;你&#39;: 1&#125;, &#123;&#39;们&#39;: 1&#125;, &#123;&#39;也&#39;: 1&#125;, &#123;&#39;寻&#39;: 1&#125;, &#123;&#39;到&#39;: 1&#125;, &#123;&#39;了&#39;: 1&#125;, &#123;&#39;属&#39;: 1&#125;, &#123;&#39;于&#39;: 1&#125;, &#123;&#39;自&#39;: 1&#125;, &#123;&#39;己&#39;: 1&#125;, &#123;&#39;的&#39;: 1&#125;, &#123;&#39;答&#39;: 1&#125;, &#123;&#39;案&#39;: 1&#125;, &#123;&#39;，&#39;: 1&#125;, &#123;&#39;「&#39;: 1&#125;, &#123;&#39;我&#39;: 1&#125;, &#123;&#39;会&#39;: 1&#125;, &#123;&#39;将&#39;: 1&#125;, &#123;&#39;所&#39;: 1&#125;, &#123;&#39;有&#39;: 1&#125;, &#123;&#39;的&#39;: 1&#125;, &#123;&#39;梦&#39;: 1&#125;, &#123;&#39;归&#39;: 1&#125;, &#123;&#39;还&#39;: 1&#125;, &#123;&#39;世&#39;: 1&#125;, &#123;&#39;人&#39;: 1&#125;, &#123;&#39;。&#39;: 1&#125;, &#123;&#39;「&#39;: 1&#125;, &#123;&#39;须&#39;: 1&#125;, &#123;&#39;弥&#39;: 1&#125;, &#123;&#39;的&#39;: 1&#125;, &#123;&#39;子&#39;: 1&#125;, &#123;&#39;民&#39;: 1&#125;, &#123;&#39;啊&#39;: 1&#125;, &#123;&#39;，&#39;: 1&#125;, &#123;&#39;再&#39;: 1&#125;, &#123;&#39;见&#39;: 1&#125;, &#123;&#39;了&#39;: 1&#125;, &#123;&#39;。&#39;: 1&#125;, &#123;&#39;「&#39;: 1&#125;, &#123;&#39;愿&#39;: 1&#125;, &#123;&#39;你&#39;: 1&#125;, &#123;&#39;们&#39;: 1&#125;, &#123;&#39;今&#39;: 1&#125;, &#123;&#39;晚&#39;: 1&#125;, &#123;&#39;得&#39;: 1&#125;, &#123;&#39;享&#39;: 1&#125;, &#123;&#39;美&#39;: 1&#125;, &#123;&#39;梦&#39;: 1&#125;, &#123;&#39;。&#39;: 1&#125;, &#123;&#39;」&#39;: 1&#125;]\n逆向文件频率: &#123;&#39;纳&#39;: 5.597186628390382, &#39;西&#39;: 5.083885755835849, &#39;妲&#39;: 5.597186628390382, &#39;含&#39;: 5.597186628390382, &#39;着&#39;: 5.597186628390382, &#39;泪&#39;: 5.597186628390382, &#39;水&#39;: 5.597186628390382, &#39;抱&#39;: 5.597186628390382, &#39;住&#39;: 5.083885755835849, &#39;了&#39;: 4.118411588304738, &#39;大&#39;: 5.083885755835849, &#39;慈&#39;: 5.083885755835849, &#39;树&#39;: 4.491130136610542, &#39;王&#39;: 5.083885755835849, &#39;。&#39;: 3.041945116709123, &#39;在&#39;: 4.491130136610542, &#39;悲&#39;: 5.597186628390382, &#39;伤&#39;: 5.597186628390382, &#39;与&#39;: 5.597186628390382, &#39;不&#39;: 5.083885755835849, &#39;舍&#39;: 5.597186628390382, &#39;中&#39;: 4.118411588304738, &#39;，&#39;: 2.9341163068590213, &#39;最&#39;: 4.491130136610542, &#39;后&#39;: 4.74493212836325, &#39;的&#39;: 3.2958368660043287, &#39;意&#39;: 5.083885755835849, &#39;识&#39;: 5.083885755835849, &#39;逐&#39;: 4.74493212836325, &#39;渐&#39;: 5.083885755835849, &#39;溶&#39;: 5.597186628390382, &#39;解&#39;: 5.083885755835849, &#39;化&#39;: 4.74493212836325, &#39;作&#39;: 5.597186628390382, &#39;美&#39;: 5.083885755835849, &#39;丽&#39;: 5.597186628390382, &#39;光&#39;: 5.597186628390382, &#39;芒&#39;: 5.597186628390382, &#39;照&#39;: 5.597186628390382, &#39;亮&#39;: 5.597186628390382, &#39;夜&#39;: 5.083885755835849, &#39;空&#39;: 5.597186628390382, &#39;一&#39;: 4.491130136610542, &#39;切&#39;: 5.597186628390382, &#39;梦&#39;: 3.845128770598116, &#39;境&#39;: 5.597186628390382, &#39;终&#39;: 5.083885755835849, &#39;都&#39;: 4.74493212836325, &#39;归&#39;: 5.083885755835849, &#39;还&#39;: 5.083885755835849, &#39;给&#39;: 5.597186628390382, &#39;须&#39;: 5.083885755835849, &#39;弥&#39;: 5.083885755835849, &#39;民&#39;: 5.083885755835849, &#39;众&#39;: 5.597186628390382, &#39;「&#39;: 2.9341163068590213, &#39;我&#39;: 3.972804477688005, &#39;们&#39;: 4.287965674269989, &#39;栖&#39;: 5.597186628390382, &#39;息&#39;: 5.597186628390382, &#39;智&#39;: 5.597186628390382, &#39;慧&#39;: 5.597186628390382, &#39;之&#39;: 4.118411588304738, &#39;下&#39;: 5.597186628390382, &#39;尝&#39;: 5.597186628390382, &#39;试&#39;: 5.597186628390382, &#39;阅&#39;: 5.597186628390382, &#39;读&#39;: 4.74493212836325, &#39;世&#39;: 3.845128770598116, &#39;界&#39;: 4.491130136610542, &#39;从&#39;: 4.74493212836325, &#39;土&#39;: 5.597186628390382, &#39;、&#39;: 5.597186628390382, &#39;雨&#39;: 5.597186628390382, &#39;尔&#39;: 5.597186628390382, &#39;身&#39;: 5.597186628390382, &#39;白&#39;: 5.083885755835849, &#39;鸟&#39;: 5.597186628390382, &#39;攀&#39;: 5.597186628390382, &#39;上&#39;: 4.74493212836325, &#39;枝&#39;: 5.597186628390382, &#39;头&#39;: 5.597186628390382, &#39;…&#39;: 5.597186628390382, &#39;于&#39;: 4.74493212836325, &#39;衔&#39;: 5.597186628390382, &#39;至&#39;: 5.597186628390382, &#39;关&#39;: 5.597186628390382, &#39;重&#39;: 5.597186628390382, &#39;要&#39;: 5.597186628390382, &#39;那&#39;: 5.083885755835849, &#39;片&#39;: 5.083885755835849, &#39;叶&#39;: 5.597186628390382, &#39;曾&#39;: 5.083885755835849, &#39;经&#39;: 5.597186628390382, &#39;是&#39;: 4.491130136610542, &#39;唯&#39;: 4.74493212836325, &#39;能&#39;: 4.74493212836325, &#39;够&#39;: 5.597186628390382, &#39;做&#39;: 5.597186628390382, &#39;个&#39;: 5.597186628390382, &#39;体&#39;: 5.597186628390382, &#39;里&#39;: 5.597186628390382, &#39;所&#39;: 4.491130136610542, &#39;有&#39;: 3.731384242468407, &#39;人&#39;: 4.118411588304738, &#39;入&#39;: 5.083885755835849, &#39;也&#39;: 5.083885755835849, &#39;会&#39;: 5.083885755835849, &#39;进&#39;: 5.597186628390382, &#39;乡&#39;: 5.597186628390382, &#39;脑&#39;: 5.597186628390382, &#39;海&#39;: 5.597186628390382, &#39;飘&#39;: 5.597186628390382, &#39;出&#39;: 5.597186628390382, &#39;奇&#39;: 5.597186628390382, &#39;思&#39;: 5.597186628390382, &#39;异&#39;: 5.597186628390382, &#39;想&#39;: 5.597186628390382, &#39;些&#39;: 4.491130136610542, &#39;滚&#39;: 5.597186628390382, &#39;落&#39;: 5.597186628390382, &#39;地&#39;: 5.597186628390382, &#39;面&#39;: 5.597186628390382, &#39;浮&#39;: 5.597186628390382, &#39;到&#39;: 5.083885755835849, &#39;天&#39;: 5.597186628390382, &#39;它&#39;: 5.083885755835849, &#39;将&#39;: 4.74493212836325, &#39;事&#39;: 5.597186628390382, &#39;物&#39;: 5.083885755835849, &#39;连&#39;: 5.597186628390382, &#39;接&#39;: 5.597186628390382, &#39;成&#39;: 5.597186628390382, &#39;万&#39;: 5.597186628390382, &#39;分&#39;: 5.597186628390382, &#39;夺&#39;: 5.597186628390382, &#39;目&#39;: 5.597186628390382, &#39;网&#39;: 5.597186628390382, &#39;三&#39;: 5.597186628390382, &#39;千&#39;: 5.597186628390382, &#39;又&#39;: 5.083885755835849, &#39;小&#39;: 5.083885755835849, &#39;命&#39;: 5.083885755835849, &#39;运&#39;: 5.597186628390382, &#39;皆&#39;: 5.597186628390382, &#39;此&#39;: 5.597186628390382, &#39;间&#39;: 5.083885755835849, &#39;沸&#39;: 5.597186628390382, &#39;腾&#39;: 5.597186628390382, &#39;\\n&#39;: 5.597186628390382, &#39;明&#39;: 5.597186628390382, &#39;这&#39;: 5.597186628390382, &#39;可&#39;: 5.597186628390382, &#39;被&#39;: 5.597186628390382, &#39;描&#39;: 5.597186628390382, &#39;述&#39;: 5.597186628390382, &#39;而&#39;: 5.083885755835849, &#39;恒&#39;: 5.597186628390382, &#39;久&#39;: 5.597186628390382, &#39;变&#39;: 5.597186628390382, &#39;才&#39;: 4.74493212836325, &#39;深&#39;: 5.083885755835849, &#39;奥&#39;: 5.597186628390382, &#39;东&#39;: 5.597186628390382, &#39;彻&#39;: 5.597186628390382, &#39;底&#39;: 5.597186628390382, &#39;驱&#39;: 5.597186628390382, &#39;疯&#39;: 5.597186628390382, &#39;狂&#39;: 5.597186628390382, &#39;沉&#39;: 5.597186628390382, &#39;黑&#39;: 5.597186628390382, &#39;暗&#39;: 5.597186628390382, &#39;唤&#39;: 5.597186628390382, &#39;醒&#39;: 5.597186628390382, &#39;乃&#39;: 5.597186628390382, &#39;题&#39;: 5.597186628390382, &#39;亦&#39;: 5.597186628390382, &#39;求&#39;: 5.597186628390382, &#39;以&#39;: 5.597186628390382, &#39;挽&#39;: 5.597186628390382, &#39;救&#39;: 5.597186628390382, &#39;属&#39;: 5.083885755835849, &#39;答&#39;: 5.083885755835849, &#39;案&#39;: 5.083885755835849, &#39;今&#39;: 5.083885755835849, &#39;你&#39;: 5.083885755835849, &#39;寻&#39;: 5.597186628390382, &#39;自&#39;: 5.597186628390382, &#39;己&#39;: 5.597186628390382, &#39;子&#39;: 5.597186628390382, &#39;啊&#39;: 5.597186628390382, &#39;再&#39;: 5.597186628390382, &#39;见&#39;: 5.597186628390382, &#39;愿&#39;: 5.597186628390382, &#39;晚&#39;: 5.597186628390382, &#39;得&#39;: 5.597186628390382, &#39;享&#39;: 5.597186628390382, &#39;」&#39;: 5.597186628390382&#125;\n\n\n\n\n\n\n\n\n\n\n词语: [‘纳西’, ‘妲含’, ‘着’, ‘泪水’, ‘抱’, ‘住’, ‘了’, ‘大’, ‘慈’, ‘树’, ‘王’, ‘。’, ‘在’, ‘悲伤’, ‘与不舍’, ‘中’, ‘，’, ‘大’, ‘慈’, ‘树’, ‘王’, ‘最后’, ‘的’, ‘意识’, ‘逐渐’, ‘溶解’, ‘，’, ‘化’, ‘作’, ‘美丽’, ‘的’, ‘光芒’, ‘照亮’, ‘了’, ‘夜空’, ‘。’, ‘一切’, ‘梦境’, ‘最终’, ‘都’, ‘归还’, ‘给’, ‘了须’, ‘弥’, ‘的’, ‘民众’, ‘。「’, ‘我们’, ‘都’, ‘栖息’, ‘在’, ‘智慧’, ‘之树’, ‘下’, ‘，’, ‘尝试’, ‘阅读’, ‘世界’, ‘。「’, ‘从’, ‘土中’, ‘读’, ‘、’, ‘从雨’, ‘中’, ‘读’, ‘，’, ‘尔后’, ‘化身’, ‘白鸟’, ‘攀’, ‘上’, ‘枝头’, ‘…「’, ‘终于’, ‘衔住’, ‘了’, ‘至关重要’, ‘的’, ‘那’, ‘一片’, ‘树叶’, ‘。「’, ‘曾经’, ‘，’, ‘我’, ‘是’, ‘世’, ‘上’, ‘唯一’, ‘能够’, ‘做梦’, ‘的’, ‘个体’, ‘。「’, ‘在’, ‘我’, ‘的’, ‘梦里’, ‘，’, ‘所有’, ‘人’, ‘入夜’, ‘后’, ‘也’, ‘都’, ‘会’, ‘进入’, ‘梦乡’, ‘。「’, ‘人们’, ‘的’, ‘脑海’, ‘中’, ‘飘’, ‘出’, ‘奇’, ‘思’, ‘异想’, ‘，「’, ‘有些’, ‘滚’, ‘落地’, ‘面’, ‘，’, ‘有些’, ‘浮’, ‘到’, ‘天上’, ‘。「’, ‘它’, ‘将’, ‘所有’, ‘事物’, ‘连接’, ‘成一片’, ‘万分夺目’, ‘的’, ‘网’, ‘。「’, ‘三千世界’, ‘之中’, ‘，’, ‘又’, ‘有’, ‘小小’, ‘世界’, ‘，「’, ‘所有’, ‘命运’, ‘，’, ‘皆’, ‘在’, ‘此间’, ‘沸腾’, ‘。’, ‘「’, ‘我’, ‘逐渐’, ‘明白’, ‘，’, ‘这些’, ‘不可’, ‘被’, ‘描述’, ‘而’, ‘又’, ‘恒久’, ‘变化’, ‘之’, ‘物’, ‘，「’, ‘才’, ‘是’, ‘世间’, ‘最’, ‘深奥’, ‘的’, ‘东西’, ‘。「’, ‘唯有’, ‘它们’, ‘，’, ‘才’, ‘能’, ‘彻底’, ‘驱逐’, ‘那些’, ‘疯狂’, ‘。「’, ‘唯有’, ‘梦’, ‘，’, ‘才’, ‘能’, ‘将’, ‘意识’, ‘从’, ‘最’, ‘深沉’, ‘的’, ‘黑暗’, ‘中’, ‘唤醒’, ‘。「’, ‘我’, ‘乃’, ‘命题’, ‘之’, ‘人’, ‘，’, ‘亦’, ‘是求’, ‘解’, ‘之’, ‘人’, ‘。「’, ‘以’, ‘世人’, ‘之’, ‘梦’, ‘挽救’, ‘世界’, ‘，’, ‘曾’, ‘是’, ‘属于’, ‘我’, ‘的’, ‘答案’, ‘。「’, ‘而今’, ‘，’, ‘你们’, ‘也’, ‘寻到’, ‘了’, ‘属于’, ‘自己’, ‘的’, ‘答案’, ‘，「’, ‘我会’, ‘将’, ‘所有’, ‘的’, ‘梦’, ‘归还’, ‘世人’, ‘。「’, ‘须’, ‘弥’, ‘的’, ‘子民’, ‘啊’, ‘，’, ‘再见’, ‘了’, ‘。「’, ‘愿’, ‘你们’, ‘今晚’, ‘得’, ‘享美梦’, ‘。」’]分句: [‘纳西妲含着泪水抱住了大慈树王’, ‘在悲伤与不舍中’, ‘大慈树王最后的意识逐渐溶解’, ‘化作美丽的光芒照亮了夜空’, ‘一切梦境最终都归还给了须弥的民众’, ‘「我们都栖息在智慧之树下’, ‘尝试阅读世界’, ‘「从土中读、从雨中读’, ‘尔后化身白鸟攀上枝头…「终于衔住了至关重要的那一片树叶’, ‘「曾经’, ‘我是世上唯一能够做梦的个体’, ‘「在我的梦里’, ‘所有人入夜后也都会进入梦乡’, ‘「人们的脑海中飘出奇思异想’, ‘「有些滚落地面’, ‘有些浮到天上’, ‘「它将所有事物连接成一片万分夺目的网’, ‘「三千世界之中’, ‘又有小小世界’, ‘「所有命运’, ‘皆在此间沸腾’, ‘「我逐渐明白’, ‘这些不可被描述而又恒久变化之物’, ‘「才是世间最深奥的东西’, ‘「唯有它们’, ‘才能彻底驱逐那些疯狂’, ‘「唯有梦’, ‘才能将意识从最深沉的黑暗中唤醒’, ‘「我乃命题之人’, ‘亦是求解之人’, ‘「以世人之梦挽救世界’, ‘曾是属于我的答案’, ‘「而今’, ‘你们也寻到了属于自己的答案’, ‘「我会将所有的梦归还世人’, ‘「须弥的子民啊’, ‘再见了’, ‘「愿你们今晚得享美梦’, ‘」’]情感偏向: 1.0拼音: [‘na’, ‘xi’, ‘妲’, ‘han’, ‘zhe’, ‘lei’, ‘shui’, ‘bao’, ‘zhu’, ‘liao’, ‘da’, ‘慈’, ‘shu’, ‘wang’, ‘。’, ‘zai’, ‘bei’, ‘shang’, ‘与’, ‘bu’, ‘she’, ‘zhong’, ‘，’, ‘da’, ‘慈’, ‘shu’, ‘wang’, ‘zui’, ‘hou’, ‘de’, ‘yi’, ‘shi’, ‘zhu’, ‘jian’, ‘rong’, ‘jie’, ‘，’, ‘hua’, ‘zuo’, ‘mei’, ‘丽’, ‘de’, ‘guang’, ‘mang’, ‘zhao’, ‘liang’, ‘liao’, ‘ye’, ‘kong’, ‘。’, ‘yi’, ‘qie’, ‘meng’, ‘jing’, ‘zui’, ‘zhong’, ‘dou’, ‘gui’, ‘huan’, ‘gei’, ‘liao’, ‘xu’, ‘弥’, ‘de’, ‘min’, ‘zhong’, ‘。「’, ‘wo’, ‘men’, ‘dou’, ‘qi’, ‘xi’, ‘zai’, ‘zhi’, ‘hui’, ‘zhi’, ‘shu’, ‘xia’, ‘，’, ‘chang’, ‘shi’, ‘yue’, ‘du’, ‘shi’, ‘jie’, ‘。「’, ‘cong’, ‘tu’, ‘zhong’, ‘du’, ‘、’, ‘cong’, ‘yu’, ‘zhong’, ‘du’, ‘，’, ‘er’, ‘hou’, ‘hua’, ‘shen’, ‘bai’, ‘niao’, ‘pan’, ‘shang’, ‘zhi’, ‘tou’, ‘…「’, ‘zhong’, ‘yu’, ‘xian’, ‘zhu’, ‘liao’, ‘zhi’, ‘guan’, ‘zhong’, ‘yao’, ‘de’, ‘na’, ‘yi’, ‘pian’, ‘shu’, ‘ye’, ‘。「’, ‘ceng’, ‘jing’, ‘，’, ‘wo’, ‘shi’, ‘shi’, ‘shang’, ‘wei’, ‘yi’, ‘neng’, ‘gou’, ‘zuo’, ‘meng’, ‘de’, ‘ge’, ‘ti’, ‘。「’, ‘zai’, ‘wo’, ‘de’, ‘meng’, ‘li’, ‘，’, ‘suo’, ‘you’, ‘ren’, ‘ru’, ‘ye’, ‘hou’, ‘ye’, ‘du’, ‘hui’, ‘jin’, ‘ru’, ‘meng’, ‘xiang’, ‘。「’, ‘ren’, ‘men’, ‘de’, ‘nao’, ‘hai’, ‘zhong’, ‘piao’, ‘chu’, ‘qi’, ‘si’, ‘yi’, ‘xiang’, ‘，「’, ‘you’, ‘xie’, ‘gun’, ‘luo’, ‘di’, ‘mian’, ‘，’, ‘you’, ‘xie’, ‘fu’, ‘dao’, ‘tian’, ‘shang’, ‘。「’, ‘ta’, ‘jiang’, ‘suo’, ‘you’, ‘shi’, ‘wu’, ‘lian’, ‘jie’, ‘cheng’, ‘yi’, ‘pian’, ‘wan’, ‘fen’, ‘duo’, ‘mu’, ‘de’, ‘wang’, ‘。「’, ‘san’, ‘qian’, ‘shi’, ‘jie’, ‘zhi’, ‘zhong’, ‘，’, ‘you’, ‘you’, ‘xiao’, ‘xiao’, ‘shi’, ‘jie’, ‘，「’, ‘suo’, ‘you’, ‘ming’, ‘yun’, ‘，’, ‘jie’, ‘zai’, ‘ci’, ‘jian’, ‘fei’, ‘teng’, ‘。’, ‘「’, ‘wo’, ‘zhu’, ‘jian’, ‘ming’, ‘bai’, ‘，’, ‘zhe’, ‘xie’, ‘bu’, ‘ke’, ‘bei’, ‘miao’, ‘shu’, ‘er’, ‘you’, ‘heng’, ‘jiu’, ‘bian’, ‘hua’, ‘zhi’, ‘wu’, ‘，「’, ‘cai’, ‘shi’, ‘shi’, ‘jian’, ‘zui’, ‘shen’, ‘ao’, ‘de’, ‘dong’, ‘xi’, ‘。「’, ‘wei’, ‘you’, ‘ta’, ‘men’, ‘，’, ‘cai’, ‘neng’, ‘che’, ‘di’, ‘qu’, ‘zhu’, ‘na’, ‘xie’, ‘feng’, ‘kuang’, ‘。「’, ‘wei’, ‘you’, ‘meng’, ‘，’, ‘cai’, ‘neng’, ‘jiang’, ‘yi’, ‘shi’, ‘cong’, ‘zui’, ‘shen’, ‘chen’, ‘de’, ‘hei’, ‘an’, ‘zhong’, ‘huan’, ‘xing’, ‘。「’, ‘wo’, ‘nai’, ‘ming’, ‘ti’, ‘zhi’, ‘ren’, ‘，’, ‘yi’, ‘shi’, ‘qiu’, ‘jie’, ‘zhi’, ‘ren’, ‘。「’, ‘yi’, ‘shi’, ‘ren’, ‘zhi’, ‘meng’, ‘wan’, ‘jiu’, ‘shi’, ‘jie’, ‘，’, ‘zeng’, ‘shi’, ‘shu’, ‘yu’, ‘wo’, ‘de’, ‘da’, ‘an’, ‘。「’, ‘er’, ‘jin’, ‘，’, ‘ni’, ‘men’, ‘ye’, ‘xun’, ‘dao’, ‘liao’, ‘shu’, ‘yu’, ‘zi’, ‘ji’, ‘de’, ‘da’, ‘an’, ‘，「’, ‘wo’, ‘hui’, ‘jiang’, ‘suo’, ‘you’, ‘de’, ‘meng’, ‘gui’, ‘huan’, ‘shi’, ‘ren’, ‘。「’, ‘xu’, ‘弥’, ‘de’, ‘zi’, ‘min’, ‘a’, ‘，’, ‘zai’, ‘jian’, ‘liao’, ‘。「’, ‘yuan’, ‘ni’, ‘men’, ‘jin’, ‘wan’, ‘de’, ‘xiang’, ‘mei’, ‘meng’, ‘。」’]关键字: [‘「’, ‘中’, ‘都’, ‘上’, ‘才’]摘要: [‘「以世人之梦挽救世界’, ‘才能将意识从最深沉的黑暗中唤醒’, ‘「唯有梦’, ‘「我会将所有的梦归还世人’, ‘所有人入夜后也都会进入梦乡’]词频: [{‘纳’: 1}, {‘西’: 1}, {‘妲’: 1}, {‘含’: 1}, {‘着’: 1}, {‘泪’: 1}, {‘水’: 1}, {‘抱’: 1}, {‘住’: 1}, {‘了’: 1}, {‘大’: 1}, {‘慈’: 1}, {‘树’: 1}, {‘王’: 1}, {‘。’: 1}, {‘在’: 1}, {‘悲’: 1}, {‘伤’: 1}, {‘与’: 1}, {‘不’: 1}, {‘舍’: 1}, {‘中’: 1}, {‘，’: 1}, {‘大’: 1}, {‘慈’: 1}, {‘树’: 1}, {‘王’: 1}, {‘最’: 1}, {‘后’: 1}, {‘的’: 1}, {‘意’: 1}, {‘识’: 1}, {‘逐’: 1}, {‘渐’: 1}, {‘溶’: 1}, {‘解’: 1}, {‘，’: 1}, {‘化’: 1}, {‘作’: 1}, {‘美’: 1}, {‘丽’: 1}, {‘的’: 1}, {‘光’: 1}, {‘芒’: 1}, {‘照’: 1}, {‘亮’: 1}, {‘了’: 1}, {‘夜’: 1}, {‘空’: 1}, {‘。’: 1}, {‘一’: 1}, {‘切’: 1}, {‘梦’: 1}, {‘境’: 1}, {‘最’: 1}, {‘终’: 1}, {‘都’: 1}, {‘归’: 1}, {‘还’: 1}, {‘给’: 1}, {‘了’: 1}, {‘须’: 1}, {‘弥’: 1}, {‘的’: 1}, {‘民’: 1}, {‘众’: 1}, {‘。’: 1}, {‘「’: 1}, {‘我’: 1}, {‘们’: 1}, {‘都’: 1}, {‘栖’: 1}, {‘息’: 1}, {‘在’: 1}, {‘智’: 1}, {‘慧’: 1}, {‘之’: 1}, {‘树’: 1}, {‘下’: 1}, {‘，’: 1}, {‘尝’: 1}, {‘试’: 1}, {‘阅’: 1}, {‘读’: 1}, {‘世’: 1}, {‘界’: 1}, {‘。’: 1}, {‘「’: 1}, {‘从’: 1}, {‘土’: 1}, {‘中’: 1}, {‘读’: 1}, {‘、’: 1}, {‘从’: 1}, {‘雨’: 1}, {‘中’: 1}, {‘读’: 1}, {‘，’: 1}, {‘尔’: 1}, {‘后’: 1}, {‘化’: 1}, {‘身’: 1}, {‘白’: 1}, {‘鸟’: 1}, {‘攀’: 1}, {‘上’: 1}, {‘枝’: 1}, {‘头’: 1}, {‘…’: 1}, {‘「’: 1}, {‘终’: 1}, {‘于’: 1}, {‘衔’: 1}, {‘住’: 1}, {‘了’: 1}, {‘至’: 1}, {‘关’: 1}, {‘重’: 1}, {‘要’: 1}, {‘的’: 1}, {‘那’: 1}, {‘一’: 1}, {‘片’: 1}, {‘树’: 1}, {‘叶’: 1}, {‘。’: 1}, {‘「’: 1}, {‘曾’: 1}, {‘经’: 1}, {‘，’: 1}, {‘我’: 1}, {‘是’: 1}, {‘世’: 1}, {‘上’: 1}, {‘唯’: 1}, {‘一’: 1}, {‘能’: 1}, {‘够’: 1}, {‘做’: 1}, {‘梦’: 1}, {‘的’: 1}, {‘个’: 1}, {‘体’: 1}, {‘。’: 1}, {‘「’: 1}, {‘在’: 1}, {‘我’: 1}, {‘的’: 1}, {‘梦’: 1}, {‘里’: 1}, {‘，’: 1}, {‘所’: 1}, {‘有’: 1}, {‘人’: 1}, {‘入’: 1}, {‘夜’: 1}, {‘后’: 1}, {‘也’: 1}, {‘都’: 1}, {‘会’: 1}, {‘进’: 1}, {‘入’: 1}, {‘梦’: 1}, {‘乡’: 1}, {‘。’: 1}, {‘「’: 1}, {‘人’: 1}, {‘们’: 1}, {‘的’: 1}, {‘脑’: 1}, {‘海’: 1}, {‘中’: 1}, {‘飘’: 1}, {‘出’: 1}, {‘奇’: 1}, {‘思’: 1}, {‘异’: 1}, {‘想’: 1}, {‘，’: 1}, {‘「’: 1}, {‘有’: 1}, {‘些’: 1}, {‘滚’: 1}, {‘落’: 1}, {‘地’: 1}, {‘面’: 1}, {‘，’: 1}, {‘有’: 1}, {‘些’: 1}, {‘浮’: 1}, {‘到’: 1}, {‘天’: 1}, {‘上’: 1}, {‘。’: 1}, {‘「’: 1}, {‘它’: 1}, {‘将’: 1}, {‘所’: 1}, {‘有’: 1}, {‘事’: 1}, {‘物’: 1}, {‘连’: 1}, {‘接’: 1}, {‘成’: 1}, {‘一’: 1}, {‘片’: 1}, {‘万’: 1}, {‘分’: 1}, {‘夺’: 1}, {‘目’: 1}, {‘的’: 1}, {‘网’: 1}, {‘。’: 1}, {‘「’: 1}, {‘三’: 1}, {‘千’: 1}, {‘世’: 1}, {‘界’: 1}, {‘之’: 1}, {‘中’: 1}, {‘，’: 1}, {‘又’: 1}, {‘有’: 1}, {‘小’: 1}, {‘小’: 1}, {‘世’: 1}, {‘界’: 1}, {‘，’: 1}, {‘「’: 1}, {‘所’: 1}, {‘有’: 1}, {‘命’: 1}, {‘运’: 1}, {‘，’: 1}, {‘皆’: 1}, {‘在’: 1}, {‘此’: 1}, {‘间’: 1}, {‘沸’: 1}, {‘腾’: 1}, {‘。’: 1}, {‘\\n’: 1}, {‘「’: 1}, {‘我’: 1}, {‘逐’: 1}, {‘渐’: 1}, {‘明’: 1}, {‘白’: 1}, {‘，’: 1}, {‘这’: 1}, {‘些’: 1}, {‘不’: 1}, {‘可’: 1}, {‘被’: 1}, {‘描’: 1}, {‘述’: 1}, {‘而’: 1}, {‘又’: 1}, {‘恒’: 1}, {‘久’: 1}, {‘变’: 1}, {‘化’: 1}, {‘之’: 1}, {‘物’: 1}, {‘，’: 1}, {‘「’: 1}, {‘才’: 1}, {‘是’: 1}, {‘世’: 1}, {‘间’: 1}, {‘最’: 1}, {‘深’: 1}, {‘奥’: 1}, {‘的’: 1}, {‘东’: 1}, {‘西’: 1}, {‘。’: 1}, {‘「’: 1}, {‘唯’: 1}, {‘有’: 1}, {‘它’: 1}, {‘们’: 1}, {‘，’: 1}, {‘才’: 1}, {‘能’: 1}, {‘彻’: 1}, {‘底’: 1}, {‘驱’: 1}, {‘逐’: 1}, {‘那’: 1}, {‘些’: 1}, {‘疯’: 1}, {‘狂’: 1}, {‘。’: 1}, {‘「’: 1}, {‘唯’: 1}, {‘有’: 1}, {‘梦’: 1}, {‘，’: 1}, {‘才’: 1}, {‘能’: 1}, {‘将’: 1}, {‘意’: 1}, {‘识’: 1}, {‘从’: 1}, {‘最’: 1}, {‘深’: 1}, {‘沉’: 1}, {‘的’: 1}, {‘黑’: 1}, {‘暗’: 1}, {‘中’: 1}, {‘唤’: 1}, {‘醒’: 1}, {‘。’: 1}, {‘「’: 1}, {‘我’: 1}, {‘乃’: 1}, {‘命’: 1}, {‘题’: 1}, {‘之’: 1}, {‘人’: 1}, {‘，’: 1}, {‘亦’: 1}, {‘是’: 1}, {‘求’: 1}, {‘解’: 1}, {‘之’: 1}, {‘人’: 1}, {‘。’: 1}, {‘「’: 1}, {‘以’: 1}, {‘世’: 1}, {‘人’: 1}, {‘之’: 1}, {‘梦’: 1}, {‘挽’: 1}, {‘救’: 1}, {‘世’: 1}, {‘界’: 1}, {‘，’: 1}, {‘曾’: 1}, {‘是’: 1}, {‘属’: 1}, {‘于’: 1}, {‘我’: 1}, {‘的’: 1}, {‘答’: 1}, {‘案’: 1}, {‘。’: 1}, {‘「’: 1}, {‘而’: 1}, {‘今’: 1}, {‘，’: 1}, {‘你’: 1}, {‘们’: 1}, {‘也’: 1}, {‘寻’: 1}, {‘到’: 1}, {‘了’: 1}, {‘属’: 1}, {‘于’: 1}, {‘自’: 1}, {‘己’: 1}, {‘的’: 1}, {‘答’: 1}, {‘案’: 1}, {‘，’: 1}, {‘「’: 1}, {‘我’: 1}, {‘会’: 1}, {‘将’: 1}, {‘所’: 1}, {‘有’: 1}, {‘的’: 1}, {‘梦’: 1}, {‘归’: 1}, {‘还’: 1}, {‘世’: 1}, {‘人’: 1}, {‘。’: 1}, {‘「’: 1}, {‘须’: 1}, {‘弥’: 1}, {‘的’: 1}, {‘子’: 1}, {‘民’: 1}, {‘啊’: 1}, {‘，’: 1}, {‘再’: 1}, {‘见’: 1}, {‘了’: 1}, {‘。’: 1}, {‘「’: 1}, {‘愿’: 1}, {‘你’: 1}, {‘们’: 1}, {‘今’: 1}, {‘晚’: 1}, {‘得’: 1}, {‘享’: 1}, {‘美’: 1}, {‘梦’: 1}, {‘。’: 1}, {‘」’: 1}]逆向文件频率: {‘纳’: 5.597186628390382, ‘西’: 5.083885755835849, ‘妲’: 5.597186628390382, ‘含’: 5.597186628390382, ‘着’: 5.597186628390382, ‘泪’: 5.597186628390382, ‘水’: 5.597186628390382, ‘抱’: 5.597186628390382, ‘住’: 5.083885755835849, ‘了’: 4.118411588304738, ‘大’: 5.083885755835849, ‘慈’: 5.083885755835849, ‘树’: 4.491130136610542, ‘王’: 5.083885755835849, ‘。’: 3.041945116709123, ‘在’: 4.491130136610542, ‘悲’: 5.597186628390382, ‘伤’: 5.597186628390382, ‘与’: 5.597186628390382, ‘不’: 5.083885755835849, ‘舍’: 5.597186628390382, ‘中’: 4.118411588304738, ‘，’: 2.9341163068590213, ‘最’: 4.491130136610542, ‘后’: 4.74493212836325, ‘的’: 3.2958368660043287, ‘意’: 5.083885755835849, ‘识’: 5.083885755835849, ‘逐’: 4.74493212836325, ‘渐’: 5.083885755835849, ‘溶’: 5.597186628390382, ‘解’: 5.083885755835849, ‘化’: 4.74493212836325, ‘作’: 5.597186628390382, ‘美’: 5.083885755835849, ‘丽’: 5.597186628390382, ‘光’: 5.597186628390382, ‘芒’: 5.597186628390382, ‘照’: 5.597186628390382, ‘亮’: 5.597186628390382, ‘夜’: 5.083885755835849, ‘空’: 5.597186628390382, ‘一’: 4.491130136610542, ‘切’: 5.597186628390382, ‘梦’: 3.845128770598116, ‘境’: 5.597186628390382, ‘终’: 5.083885755835849, ‘都’: 4.74493212836325, ‘归’: 5.083885755835849, ‘还’: 5.083885755835849, ‘给’: 5.597186628390382, ‘须’: 5.083885755835849, ‘弥’: 5.083885755835849, ‘民’: 5.083885755835849, ‘众’: 5.597186628390382, ‘「’: 2.9341163068590213, ‘我’: 3.972804477688005, ‘们’: 4.287965674269989, ‘栖’: 5.597186628390382, ‘息’: 5.597186628390382, ‘智’: 5.597186628390382, ‘慧’: 5.597186628390382, ‘之’: 4.118411588304738, ‘下’: 5.597186628390382, ‘尝’: 5.597186628390382, ‘试’: 5.597186628390382, ‘阅’: 5.597186628390382, ‘读’: 4.74493212836325, ‘世’: 3.845128770598116, ‘界’: 4.491130136610542, ‘从’: 4.74493212836325, ‘土’: 5.597186628390382, ‘、’: 5.597186628390382, ‘雨’: 5.597186628390382, ‘尔’: 5.597186628390382, ‘身’: 5.597186628390382, ‘白’: 5.083885755835849, ‘鸟’: 5.597186628390382, ‘攀’: 5.597186628390382, ‘上’: 4.74493212836325, ‘枝’: 5.597186628390382, ‘头’: 5.597186628390382, ‘…’: 5.597186628390382, ‘于’: 4.74493212836325, ‘衔’: 5.597186628390382, ‘至’: 5.597186628390382, ‘关’: 5.597186628390382, ‘重’: 5.597186628390382, ‘要’: 5.597186628390382, ‘那’: 5.083885755835849, ‘片’: 5.083885755835849, ‘叶’: 5.597186628390382, ‘曾’: 5.083885755835849, ‘经’: 5.597186628390382, ‘是’: 4.491130136610542, ‘唯’: 4.74493212836325, ‘能’: 4.74493212836325, ‘够’: 5.597186628390382, ‘做’: 5.597186628390382, ‘个’: 5.597186628390382, ‘体’: 5.597186628390382, ‘里’: 5.597186628390382, ‘所’: 4.491130136610542, ‘有’: 3.731384242468407, ‘人’: 4.118411588304738, ‘入’: 5.083885755835849, ‘也’: 5.083885755835849, ‘会’: 5.083885755835849, ‘进’: 5.597186628390382, ‘乡’: 5.597186628390382, ‘脑’: 5.597186628390382, ‘海’: 5.597186628390382, ‘飘’: 5.597186628390382, ‘出’: 5.597186628390382, ‘奇’: 5.597186628390382, ‘思’: 5.597186628390382, ‘异’: 5.597186628390382, ‘想’: 5.597186628390382, ‘些’: 4.491130136610542, ‘滚’: 5.597186628390382, ‘落’: 5.597186628390382, ‘地’: 5.597186628390382, ‘面’: 5.597186628390382, ‘浮’: 5.597186628390382, ‘到’: 5.083885755835849, ‘天’: 5.597186628390382, ‘它’: 5.083885755835849, ‘将’: 4.74493212836325, ‘事’: 5.597186628390382, ‘物’: 5.083885755835849, ‘连’: 5.597186628390382, ‘接’: 5.597186628390382, ‘成’: 5.597186628390382, ‘万’: 5.597186628390382, ‘分’: 5.597186628390382, ‘夺’: 5.597186628390382, ‘目’: 5.597186628390382, ‘网’: 5.597186628390382, ‘三’: 5.597186628390382, ‘千’: 5.597186628390382, ‘又’: 5.083885755835849, ‘小’: 5.083885755835849, ‘命’: 5.083885755835849, ‘运’: 5.597186628390382, ‘皆’: 5.597186628390382, ‘此’: 5.597186628390382, ‘间’: 5.083885755835849, ‘沸’: 5.597186628390382, ‘腾’: 5.597186628390382, ‘\\n’: 5.597186628390382, ‘明’: 5.597186628390382, ‘这’: 5.597186628390382, ‘可’: 5.597186628390382, ‘被’: 5.597186628390382, ‘描’: 5.597186628390382, ‘述’: 5.597186628390382, ‘而’: 5.083885755835849, ‘恒’: 5.597186628390382, ‘久’: 5.597186628390382, ‘变’: 5.597186628390382, ‘才’: 4.74493212836325, ‘深’: 5.083885755835849, ‘奥’: 5.597186628390382, ‘东’: 5.597186628390382, ‘彻’: 5.597186628390382, ‘底’: 5.597186628390382, ‘驱’: 5.597186628390382, ‘疯’: 5.597186628390382, ‘狂’: 5.597186628390382, ‘沉’: 5.597186628390382, ‘黑’: 5.597186628390382, ‘暗’: 5.597186628390382, ‘唤’: 5.597186628390382, ‘醒’: 5.597186628390382, ‘乃’: 5.597186628390382, ‘题’: 5.597186628390382, ‘亦’: 5.597186628390382, ‘求’: 5.597186628390382, ‘以’: 5.597186628390382, ‘挽’: 5.597186628390382, ‘救’: 5.597186628390382, ‘属’: 5.083885755835849, ‘答’: 5.083885755835849, ‘案’: 5.083885755835849, ‘今’: 5.083885755835849, ‘你’: 5.083885755835849, ‘寻’: 5.597186628390382, ‘自’: 5.597186628390382, ‘己’: 5.597186628390382, ‘子’: 5.597186628390382, ‘啊’: 5.597186628390382, ‘再’: 5.597186628390382, ‘见’: 5.597186628390382, ‘愿’: 5.597186628390382, ‘晚’: 5.597186628390382, ‘得’: 5.597186628390382, ‘享’: 5.597186628390382, ‘」’: 5.597186628390382}\n","slug":"文本分析3","date":"2022-11-07T11:50:49.000Z","categories_index":"","tags_index":"文本分析","author_index":"Algernon"},{"id":"43a1012fc49c29546957054c50a893f0","title":"使用MATLAB画玫瑰花","content":"在知乎上看到一篇文章，用matlab跑了一下，觉得颜色很好看，特在此记录。原文链接：\n\n\n\n\n\n\n\n\n\nhttps://zhuanlan.zhihu.com/p/411819722\nfunction drawrose\nset(gca,&#39;CameraPosition&#39;,[2 2 2])\nhold on\ngrid on\n[x,t]&#x3D;meshgrid((0:24).&#x2F;24,(0:0.5:575).&#x2F;575.*20.*pi+4*pi);\np&#x3D;(pi&#x2F;2)*exp(-t.&#x2F;(8*pi));\nchange&#x3D;sin(15*t)&#x2F;150;\nu&#x3D;1-(1-mod(3.6*t,2*pi).&#x2F;pi).^4.&#x2F;2+change;\ny&#x3D;2*(x.^2-x).^2.*sin(p);\n\nr&#x3D;u.*(x.*sin(p)+y.*cos(p));\nh&#x3D;u.*(x.*cos(p)-y.*sin(p));\n\nmap&#x3D;[0.9176    0.9412    1.0000\n    0.8353    0.8706    0.9922\n    0.8196    0.8627    0.9804\n    0.7020    0.7569    0.9412\n    0.5176    0.5882    0.9255\n    0.3686    0.4824    0.9412\n    0.3059    0.4000    0.9333\n    0.2275    0.3176    0.8353\n    0.1216    0.2275    0.6471];\nXi&#x3D;1:size(map,1);Xq&#x3D;linspace(1,size(map,1),100);\nmap&#x3D;[interp1(Xi,map(:,1),Xq,&#39;linear&#39;)&#39;,...\n     interp1(Xi,map(:,2),Xq,&#39;linear&#39;)&#39;,...\n     interp1(Xi,map(:,3),Xq,&#39;linear&#39;)&#39;];\n\nsurface(r.*cos(t),r.*sin(t),h,&#39;EdgeAlpha&#39;,0.1,...\n    &#39;EdgeColor&#39;,[0 0 0],&#39;FaceColor&#39;,&#39;interp&#39;)\ncolormap(map)\nend\n\nfunction drawrose2\ngrid on\n[x,t]&#x3D;meshgrid((0:24).&#x2F;24,(0:0.5:575).&#x2F;575.*20.*pi-4*pi);\np&#x3D;(pi&#x2F;2)*exp(-t.&#x2F;(8*pi));\nchange&#x3D;sin(20*t)&#x2F;150;\nu&#x3D;1-(1-mod(3.3*t,2*pi).&#x2F;pi).^4.&#x2F;2+change;\ny&#x3D;2*(x.^2-x).^2.*sin(p);\n\nr&#x3D;u.*(x.*sin(p)+y.*cos(p)).*1.5;\nh&#x3D;u.*(x.*cos(p)-y.*sin(p));\n\nmap&#x3D;[0.2000    0.0941    0.3569\n    0.2627    0.0588    0.4510\n    0.3059    0.0784    0.4784\n    0.5137    0.1490    0.5059\n    0.6314    0.1882    0.5020\n    0.8706    0.2902    0.4314\n    0.9294    0.4118    0.3647\n    0.9765    0.5216    0.3765\n    0.9961    0.5647    0.4196\n    1.0000    0.6353    0.4471\n    0.9922    0.7490    0.5255\n    1.0000    0.8980    0.6510\n    0.9843    0.9529    0.7059];\nXi&#x3D;1:size(map,1);Xq&#x3D;linspace(1,size(map,1),100);\nmap&#x3D;[interp1(Xi,map(:,1),Xq,&#39;linear&#39;)&#39;,...\n     interp1(Xi,map(:,2),Xq,&#39;linear&#39;)&#39;,...\n     interp1(Xi,map(:,3),Xq,&#39;linear&#39;)&#39;];\n \nset(gca,&#39;CameraPosition&#39;,[2 2 2])\nhold on\nsurface(r.*cos(t),r.*sin(t),h,&#39;EdgeAlpha&#39;,0.1,...\n    &#39;EdgeColor&#39;,[0.5 0.5 0.5],&#39;FaceColor&#39;,&#39;interp&#39;)\ncolormap(map)\n\nend\n\nfunction roseBall(colorList)\n%曲面数据计算\n%&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n[x,t]&#x3D;meshgrid((0:24).&#x2F;24,(0:0.5:575).&#x2F;575.*20.*pi+4*pi);\np&#x3D;(pi&#x2F;2)*exp(-t.&#x2F;(8*pi));\nchange&#x3D;sin(15*t)&#x2F;150;\nu&#x3D;1-(1-mod(3.6*t,2*pi).&#x2F;pi).^4.&#x2F;2+change;\ny&#x3D;2*(x.^2-x).^2.*sin(p);\n\nr&#x3D;u.*(x.*sin(p)+y.*cos(p));\nh&#x3D;u.*(x.*cos(p)-y.*sin(p));\n\n%颜色映射表\n%&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nhMap&#x3D;(h-min(min(h))).&#x2F;(max(max(h))-min(min(h)));\ncol&#x3D;size(hMap,2);\nif nargin&lt;1\ncolorList&#x3D;[0.0200    0.0400    0.3900\n         0    0.0900    0.5800\n         0    0.1300    0.6400\n    0.0200    0.0600    0.6900\n         0    0.0800    0.7900\n    0.0100    0.1800    0.8500\n         0    0.1300    0.9600\n    0.0100    0.2600    0.9900\n         0    0.3500    0.9900\n    0.0700    0.6200    1.0000\n    0.1700    0.6900    1.0000];\nend\n\n\ncolorFunc&#x3D;colorFuncFactory(colorList);\ndataMap&#x3D;colorFunc(hMap&#39;);\ncolorMap(:,:,1)&#x3D;dataMap(:,1:col);\ncolorMap(:,:,2)&#x3D;dataMap(:,col+1:2*col);\ncolorMap(:,:,3)&#x3D;dataMap(:,2*col+1:3*col);\n\n    function colorFunc&#x3D;colorFuncFactory(colorList)\n        xx&#x3D;(0:size(colorList,1)-1).&#x2F;(size(colorList,1)-1);\n        y1&#x3D;colorList(:,1);y2&#x3D;colorList(:,2);y3&#x3D;colorList(:,3);\n        colorFunc&#x3D;@(X)[interp1(xx,y1,X,&#39;linear&#39;)&#39;,interp1(xx,y2,X,&#39;linear&#39;)&#39;,interp1(xx,y3,X,&#39;linear&#39;)&#39;];\n    end\n\n\n%曲面旋转及绘制\n%&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nsurface(r.*cos(t),r.*sin(t),h+0.35,&#39;EdgeAlpha&#39;,0.05,...\n    &#39;EdgeColor&#39;,[0 0 0],&#39;FaceColor&#39;,&#39;interp&#39;,&#39;CData&#39;,colorMap)\n\nhold on\n\nsurface(r.*cos(t),r.*sin(t),-h-0.35,&#39;EdgeAlpha&#39;,0.05,...\n    &#39;EdgeColor&#39;,[0 0 0],&#39;FaceColor&#39;,&#39;interp&#39;,&#39;CData&#39;,colorMap)\nXset&#x3D;r.*cos(t);\nYset&#x3D;r.*sin(t);\nZset&#x3D;h+0.35;\n\nyaw_z&#x3D;72*pi&#x2F;180;\nroll_x&#x3D;pi-acos(-1&#x2F;sqrt(5));\nR_z_2&#x3D;[cos(yaw_z),-sin(yaw_z),0;\n    sin(yaw_z),cos(yaw_z),0;\n    0,0,1];\nR_z_1&#x3D;[cos(yaw_z&#x2F;2),-sin(yaw_z&#x2F;2),0;\n    sin(yaw_z&#x2F;2),cos(yaw_z&#x2F;2),0;\n    0,0,1];\nR_x_2&#x3D;[1,0,0;\n     0,cos(roll_x),-sin(roll_x);\n     0,sin(roll_x),cos(roll_x)];\n \n[nX,nY,nZ]&#x3D;rotateXYZ(Xset,Yset,Zset,R_x_2);\nsurface(nX,nY,nZ,&#39;EdgeAlpha&#39;,0.05,...\n&#39;EdgeColor&#39;,[0 0 0],&#39;FaceColor&#39;,&#39;interp&#39;,&#39;CData&#39;,colorMap)\n\n\nfor k&#x3D;1:4\n    [nX,nY,nZ]&#x3D;rotateXYZ(nX,nY,nZ,R_z_2);\n    surface(nX,nY,nZ,&#39;EdgeAlpha&#39;,0.05,...\n    &#39;EdgeColor&#39;,[0 0 0],&#39;FaceColor&#39;,&#39;interp&#39;,&#39;CData&#39;,colorMap)\nend   \n\n[nX,nY,nZ]&#x3D;rotateXYZ(nX,nY,nZ,R_z_1);\n\nfor k&#x3D;1:5\n    [nX,nY,nZ]&#x3D;rotateXYZ(nX,nY,nZ,R_z_2);\n    surface(nX,nY,-nZ,&#39;EdgeAlpha&#39;,0.05,...\n    &#39;EdgeColor&#39;,[0 0 0],&#39;FaceColor&#39;,&#39;interp&#39;,&#39;CData&#39;,colorMap)\nend   \n \n%--------------------------------------------------------------------------\n    function [nX,nY,nZ]&#x3D;rotateXYZ(X,Y,Z,R)\n        nX&#x3D;zeros(size(X));\n        nY&#x3D;zeros(size(Y));\n        nZ&#x3D;zeros(size(Z));\n        for i&#x3D;1:size(X,1)\n            for j&#x3D;1:size(X,2)\n                v&#x3D;[X(i,j);Y(i,j);Z(i,j)];\n                nv&#x3D;R*v;\n                nX(i,j)&#x3D;nv(1);\n                nY(i,j)&#x3D;nv(2);\n                nZ(i,j)&#x3D;nv(3);\n            end\n        end\n    end\n%axes属性调整\n%&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nax&#x3D;gca;\ngrid on\nax.GridLineStyle&#x3D;&#39;--&#39;;\nax.LineWidth&#x3D;1.2;\nax.XColor&#x3D;[1,1,1].*0.4;\nax.YColor&#x3D;[1,1,1].*0.4;\nax.ZColor&#x3D;[1,1,1].*0.4;\nax.DataAspectRatio&#x3D;[1,1,1];\nax.DataAspectRatioMode&#x3D;&#39;manual&#39;;\nax.CameraPosition&#x3D;[-6.5914  -24.1625   -0.0384];\n\nend\n\n\n","slug":"matlab玫瑰花","date":"2022-11-07T03:28:49.000Z","categories_index":"编程语言","tags_index":"matlab","author_index":"Algernon"},{"id":"945967f7bfec67fb183fde63aba027f6","title":"《金融时间序列分析》笔记","content":"白噪声与线性时间序列白噪声时间序列{$r_t$}称为一个白噪声序列，如果{$r_t$}是一个具有有限值和有限方差的独立同分布随机变量序列。特别的，若$r_t$还服从均值为0、方差为$\\sigma^2$的正态分布，则称这个序列为高斯白噪声。\n对于白噪声序列，所有自相关函数项为零。在实际应用中，如果所有样本的自相关系数接近于零，则认为该序列是白噪声序列。\n简单自回归模型AR模型一阶自回归模型\nMA模型滑动平均模型MA\n简单ARMA模型单位根非平稳性在某些研究中，利率、汇率或资产的价格序列是研究对象，这些序列往往是非平稳的。对于资产价格序列，其非平稳性主要是由于价格没有固定的水平。这样的非平稳序列叫做单位根非平稳序列。单位根非平稳序列最著名的例子是随机游动模型。\n随机游动若时间序列{$p_t$}满足$p_t=p_{t-1}+a_t$其中$p_0$是一个实数，表示这个过程的起始值，{$a_t$}是一个白噪声序列，则称{$p_t$}为一个随机游动。\n带漂移的随机游动带趋势项的时间序列一般的单位根非平稳模型考虑ARMA模型，如果我们把ARMA模型推广到允许其AR多项式以1作为它的特征根，则模型就变为了自回归求和滑动平均模型（ARIMA）。因为其AR多项式有单位根1，故ARIMA模型称为是单位根非平稳的。\n 像随机游动模型一样，ARIMA模型具有强记忆性。\n  处理单位根非平稳性的惯用方法是用差分化。\n单位根检验\n季节模型有些金融时间序列，如 公司股票每股的季度盈利，呈现出一定的循环或周期性。这样的时间序列叫作季节性时间序列。\n季节性差分化多季节性模型条件异方差模型波动率在期权交易中是一个重要因素，它是标的资产收益率的条件标准差。\n 例如，        考虑一个欧式看涨期权的价格。欧式看涨期权是一个合同，它给持有者一个权利，可以在将来给定日期以固定的价格购买固定数量的一个具体股票的股份。 持有者在对自己不利的情况下可以不执行购买，这个固定的价格叫做敲定价格，通常记为$K$。给定的日期叫做到期日。\n 如果持有人能在到期日或者在到期日之前任何时刻执行他的权利，那么这种期权叫做美式看涨期权。\n","slug":"金融时间序列分析","date":"2022-11-07T03:23:49.000Z","categories_index":"学习笔记","tags_index":"数模","author_index":"Algernon"},{"id":"09de68b00742d7bbbc5cd25f6a8d984a","title":"《统计学习方法》笔记","content":"统计学习方法监督学习统计学习基本分类统计学习是关于计算机基于数据构建概率统计模型并运用模型对数据进行预测和分析的一门学科 。\n统计学习也称为统计机器学习。\n统计学习由监督学习、无监督学习和强化学习组成。（有时还包括半监督学习、主动学习）\n监督学习是指从标注数据中学习预测模型的机器学习问题。标注数据表示输入输出的对应关系，预测模型对给定的输入产生相应的输出。监督学习的本质是学习输入到输出的映射的统计规律。\n无监督学习是指从无标注数据中学习预测模型的机器学习问题。无标注数据是自然得到的数据，预测模型表示数据的类别、转换或概率。无监督学习的本质是学习数据中的统计规律或潜在结构。\n强化学习是指智能系统在与环境的连续互动中学习最优行为策略的机器学习问题。\n监督学习是指利用标注数据和未标注数据学习预测模型的机器学习问题。\n主动学习是指机器不断主动给出实例让教师进行标注，然后利用标注数据学习预测模型的机器学习问题。\n按模型分类概率模型和非概率模型统计学习的模型可以分为概率模型和非概率模型或者确定性模型。\n决策树、朴素贝叶斯、隐马尔可夫模型、条件随机场、概率潜在语义分析、潜在狄利克雷分配、高斯混合模型是概率模型。\n感知机、支持向量机、k近邻、AdaBoost、k均值、潜在语义分析，以及神经网络是非概率模型。\n逻辑斯蒂回归既可看作是概率模型，又可看作是非概率模型。\n学习模型与非线性模型如果函数$y=f(x)$或$z=g(x)$是线性函数，则称模型是线性模型，否则称模型是非线性模型。\n感知机、线性支持向量机、k近邻、k均值、潜在语义分析是线性模型。\n核函数支持向量机、AdaBoost、神经网络是非线性模型。\n参数化模型与非参数化模型参数化模型假设模型的维度固定，模型可以由有限维参数完全刻画；\n非参数化模型假设模型参数的维度不固定或者说无穷大，随着训练数据量的增加而不断增大。\n按算法分类可以分为在线学习与批量学习。\n在线学习是指每次接受一个样本，进行预测，之后学习模型，并不断重复该操作的机器学习。\n与之对应，批量学习一次接受所有数据、学习模型，之后进行预测。\n利用随机梯度下降的感知机学习算法就是在线学习算法。\n按技巧分类贝叶斯学习贝叶斯学习，又称为贝叶斯推理，是统计学、机器学习中重要的方法。\n其主要想法是，在概率模型的学习和推理中，利用贝叶斯定理，计算在给定数据条件下模型的条件概率，即后验概率，并应用这个原理进行模型的估计，以及对数据的预测。\n核方法核方法是使用核函数表示和学习非线性模型的一种机器学习方法，可以用于监督学习和无监督学习。\n有一些线性模型的学习方法基于相似度计算，更具体地，向量内积计算。核方法可以把它们扩展到非线性模型的学习，使其应用范围更加广泛。\n模型评估与模型选择训练误差与测试误差统计学习的目的是使学到的模型不仅对已知数据而且对未知数据都能有很好的预测能力。\n不同的学习方法会给出不同的模型。当损失函数给定时，基于损失函数的模型的训练误差和模型的测试误差就自然成为学习方法评估的标准。\n过拟合与模型选择如果一味追求提高对训练数据的预测能力，所选模型的复杂度则往往会比真模型更高。这种现象称为过拟合。\n过拟合是指学习时选择的模型所包含的参数过多，以至于出现这一模型对已知数据预测的很好，但对未知数据预测得很差的现象。\n正则化与交叉验证正则化模型选择的典型方法是正则化。\n正则化是结构风险最小化策略的实现，是在经验风险上加上一个正则化项或罚项。\n正则化项一般是模型复杂度的单调递增函数，模型越复杂，正则化值就越大。\n比如，正则化项可以是模型参数向量的范数。\n交叉验证如果给定的样本数据充足，进行模型选择的一种简单方法是随机地将数据集切分成三部分，分为训练集、验证集和测试集。\n训练集用来训练模型，验证集用于模型的选择，而测试集用于最终对学习方法的评估。\n\n简单交叉验证\nS折交叉验证\n留一交叉验证\n\n泛化能力泛化误差学习方法的泛化能力是指由该方法学习到的模型对未知数据的预测能力。\n泛化误差上界学习方法的泛化能力分析往往是通过研究泛化误差的概率上界进行的，简称为泛化误差上界。\n具体来说，就是通过比较两种学习方法的泛化误差上界的大小来比较它们的优劣。\n泛化误差上界通常具有以下性质：\n它是样本容量的函数，当样本容量增加时，泛化上界趋于0；\n它是假设空间容量的函数，假设空间容量越大，模型就越难学，泛化误差上界就越大。\n生成模型与判别模型监督学习方法又可以分为生成方法和判别方法。\n所学到的模型分别称为生成模型和判别模型。\n监督学习应用主要在三个方面：\n\n分类问题\n标注问题\n回归问题\n\n分类问题评价分类器性能的 指标一般是分类准确率，其定义是：对于给定的测试数据集，分类器正确分类的样本数与总样本数之比。\n也就是损失函数是0-1损失时测试数据集上的准确率。\n对于二分类问题常用的评价指标是精确率与召回率。\n通常以关注的类为正类，其它类为负类，分类器在测试数据集上的预测或正确或不正确，4种情况出现的总数分别记作：\nTP-将正类预测为正类数\nFN-将正类预测为负类数\nFP-将负类预测为正类数\nTN-将负类预测为负类数\n精确率定义为：\n$P=\\frac{TP}{TP+FP}$\n召回率定义为：\n$R=\\frac{TP}{TP+FN}$\n标注问题标注也是一个监督学习问题。\n标注问题的输入是一个观测序列，输出是一个标记序列或状态序列。\n标注问题的目标在于学习一个模型，使它能够对观测序列给出标记序列作为预测。注意，可能的标记个数是有限的，但其组合成的标记序列的个数是依序列长度呈指数级增长的。\n标注常用的统计学习方法有：隐马尔可夫模型、条件随机场。\n回归问题回归用于预测输入变量（自变量）和输出变量（因变量）之间的关系，特别是当输入变量的值发生变化时，输出变量的值随之发生的变化。\n回归模型正是表示从输入变量到输出变量之间映射的函数。\n感知机感知机是二类分类的线性分类模型，其输入为实例的特征向量，输出为实例的类别，取+1值和-1二值。\n感知机对应于输入空间（特征空间）中将实例划分为正负两类的分离超平面，属于判别模型。\n感知机学习旨在求出将训练数据进行线性划分的分离超平面，为此，导入基于误分类的损失函数，利用梯度下降法对损失函数进行极小化，求得感知机模型。\n感知机模型假设输入空间（特征空间）是$X\\subseteq R^n$，输出空间是$Y=${+1,-1}。输入$x\\in X$表示实例的特征向量，对应于输入空间（特征空间）的点；输出$y\\in Y$表示实例的类别。由输入空间到输出空间的如下函数：\n$f(x)=sign(\\omega·x+b)$\n称为感知机。其中，$\\omega$和$b$称为感知机模型参数。$\\omega \\in R^n$叫做权值或权值向量，$b \\in R$叫做偏置，$\\omega ·x$表示二者内积。\n$sign$是符号函数，即\n$sign(x)=\\begin{cases} +1&amp; \\text{x &gt;= 0}\\-1&amp; \\text{x&lt;0} \\end{cases}$\n感知机模型的假设空间是定义在特征空间的所有线性分类模型或线性分类器，\n即函数集合{$f|f(x)=\\omega ·x + b$}\n感知机学习策略损失函数的一个自然选择是误分类点的总数。\n损失函数的另一个选择是误分类点到超平面S的总距离，这是感知机所采用的。\nk近邻法k近邻算法给定一个训练数据集，对新的输入实例，在训练数据中找到与该实例最接近的k个实例，这k个实例的多数属于某个类，就把该输入实例分为这个类。\nk近邻模型特征空间中，对每个训练实例点$x_i$，距离该点比其他点更近的所有组合点组成一个区域，叫做单元。每个训练实例点拥有一个单元，所有训练实例点的单元构成对特征空间的一个划分。最近邻法将实例$x_i$的类$y_i$作为其单元中所有点的类标记。\n这样，每个单元的实例点的类别是确定的。\nkd树kd树是一种对k维空间中的实例点进行存储以便对其进行快速检索的树形数据结构。\nkd树是二叉树，表示对k维空间的一个划分。\n构造kd树相当于不断地用垂直于坐标轴的超平面将k维空间划分，构成一系列的k维超矩形区域。\nkd树的每一个结点对应于一个k维超矩形区域。\n朴素贝叶斯法朴素贝叶斯法是基于贝叶斯定理与特征条件独立假设的分类方法。\n对于给定的训练数据集，首先基于特征条件独立假设学习输入输出的联合概率分布；然后基于此模型，对给定的输入x，利用贝叶斯定理求出后验概率最大的输出y。朴素贝叶斯法实现简单，学习与预测的效率都很高，是一种常用的方法。\n朴素贝叶斯法的学习与分类朴素贝叶斯法的参数估计极大似然估计学习与分类算法决策树决策树学习通常包括3个步骤：特征选择、决策树的生成和决策树的修剪。\n决策树模型与学习\n\n\n\n\n\n\n\n\n决策树：分类决策树模型是一种描述对实例进行分类的树形结构。决策树由结点和有向边组成。\n结点有两种类型：内部结点和叶结点。\n内部结点表示一个特征或属性，叶结点表示一个类。\n用决策树分类，从根结点开始，对实例的某一特征进行测试，根据测试结果，将实例分配到其子节点；这时，每一个子结点对应着该特征的一个取值。如此递归地对实例进行测试并分配，直至达到叶结点。最后将实例分配到叶结点的类中。\n特征选择特征选择在于选取对训练数据具有分类能力的特征。\n通常特征选择的准则是信息增益或信息增益比。\n信息增益在信息论与概率统计中，熵是表示随机变量不确定的度量。\n信息增益表示得知特征X的信息而使得类Y的信息的不确定性减少的程度。\n\n\n\n\n\n\n\n\n\n特征A对训练数据集D的信息增益$g(D,A)$，定义为集合D的经验熵$H(D)$与特征A给定条件下D的经验条件熵$H(D|A)$之差，即\n$g(D,A)=H(D)-H(D|A)$\n一般地，熵$H(Y)$与条件熵$H(Y|X)$之差称为互信息。决策树学习中的信息增益等价于训练数据集中类与特征的互信息。\n决策树的生成ID3算法ID3算法的核心是在决策树各个结点上应用信息增益准则选择特征，递归地构建决策树。\n具体方法是：\n从根结点开始，对结点计算所有可能的特征的信息增益，选择信息增益最大的特征作为结点的特征，由该特征的不同取值建立子结点；\n再对子结点递归地调用以上方法，构建决策树；\n直到所有特征的信息增益均很小或没有特征可以选择为止。\n最后得到一棵决策树。\nID3相当于用极大似然法进行概率模型的选择。\nC4.5的生成算法决策树的剪枝决策树生成算法递归地产生决策树，直到不能继续下去为止。这样产生的树往往对训练数据的分类很准确，但对未知的测试数据的分类却没有那么准确，即出现过拟合现象。\n在决策树学习中将已生成的树进行简化的过程称为剪枝。具体来说，剪枝从已生成的树上裁掉一些子树或叶结点，并将其根结点或父结点作为新的叶结点，从而简化分类树模型。\nCART算法分类与回归树模型（CART）\nCART算法由以下两步组成：\n\n决策树生成：基于训练数据集生成决策树，生成的决策树要尽量大\n决策树剪枝：用验证数据集对已生成的树进行剪枝并选择最优子树，这时用损失函数最小作为剪枝的标准。\n\n逻辑斯谛回归与最大熵模型逻辑斯谛回归模型最大熵模型最大熵原理最大熵原理是概率模型学习的一个准则。\n最大熵原理认为，学习概率模型时，在所有可能的模型分布中，熵最大的模型是最好的模型。\n模型学习的最优化算法改进的迭代尺度法支持向量机支持向量机是一种二分类模型。\n它的基本模型是定义在特征空间上的间隔最大的线性分类器。\n线性可分支持向量机与硬间隔最大化线性可分支持向量机函数间隔与几何间隔间隔最大化支持向量机学习的基本想法是求解能够正确划分训练数据集并且几何间隔最大的分离超平面。\n对线性可分的训练数据集而言，线性可分分离超平面有无穷多个（等价于感知机），但是几何间隔最大的分离超平面是唯一的。\n线性支持向量机与软间隔最大化非线性支持向量机与核函数核技巧正定核序列最小最优化算法提升方法提升方法是一种常用的统计学习方法，应用广泛且有效。\n在分类问题中，它通过改变训练样本的权重，学习多个分类器，并将这些分类器进行线性组合，提高分类的性能。\nAdaBoost算法提升树EM算法及其推广EM算法的每次迭代由两步组成：\nE步，求期望；\nM步，求极大。\n所以这一算法称为期望极大算法。\n隐马尔可夫模型隐马尔可夫模型是可用于标注问题的统计学习模型，描述由隐藏的马尔可夫链随机生成观测数列的过程，属于生成模型。\n基本概念\n\n\n\n\n\n\n\n\n隐马尔可夫模型是关于时序的概率模型，描述由一个隐藏的马尔可夫链随机生成不可观测的状态随机序列，再由各个状态生成一个观测从而产生观测随机序列的过程。\n隐藏的马尔科夫链随机生成的状态的序列，称为状态序列；\n每个状态生成一个观测，而由此产生的观测的随机序列，称为观测序列。\n序列的每一个位置又可以看作是一个时刻\n概率计算算法直接计算法前向算法后向算法学习算法监督学习方法Baum-Welch算法预测算法近似算法维特比算法维特比算法实际是用动态规划解隐马尔可夫模型预测问题，即用动态规划求概率最大路径（最优路径）。\n条件随机场条件随机场（CRF）是给定一组输入随机变量下另一组输出随机向量的条件概率分布模型，其特点是假设输出随机变量构成马尔可夫随机场。\n概率无向图模型概率无向图模型，又称为马尔可夫随机场，是一个可以由无向图表示的联合概率分布。\n模型定义因子分解条件随机场定义条件随机场是给定随机变量X条件下，随机变量Y的马尔可夫随机场。\n在线性链上的特殊的条件随机场，称为线性链条件随机场。\n无监督学习概论无监督学习是从无标注的数据中学习数据的统计规律或者说内在结构的机器学习，主要包括聚降维、概率估计。\n无监督学习可以用于数据分析或者监督学习的前处理。\n聚类聚类是将样本集合中相似的样本（实例）分配到相同的类，不相似的样本分配到不同的类。\n如果一个样本只能属于一个类，则称为硬聚类；\n如果一个样本可以属于多个类，则称为软聚类。\n降维降维是将训练中的样本（实例）从高维空间转化到低维空间。假设样本原本存在于低维空间，或者近似地存在于低维空间，通过降维则可以更好地表示样本数据的结构，即更好地表示样本之间的关系。\n高维空间通常是高维的欧氏空间，而低维空间是低维的欧氏空间或者流形。\n概率模型估计简称概率估计，假设训练数据由一个概率模型生成，由训练数据学习概率模型的结构和参数。\n机器学习三要素模型、策略、算法\n模型就是函数$z=g_0(x)$，条件概率分布$P_0(z|x)$，或条件概率分布$P_0(x|z)$，在聚类、降维、概率模型估计中拥有不同的形式。\n比如，聚类中模型的输出就是类别；降维中模型的输出是低维向量；概率模型估计中的模型可以是混合概率模型，也可以是有向概率图模型和无向概率图模型。\n策略在不同的问题中有不同的形式，但都可以表示为目标函数的优化。\n比如，聚类中样本与所属类别中心距离的最小化，降维中样本从高维空间转换到低维空间过程中信息损失的最小化，概率模型估计中模型生成数据概率的最大化。\n算法通常是迭代算法，通过迭代目标达到目标函数的最优化，比如，梯度下降法。\n层次聚类法、k均值聚类是硬聚类方法，高斯混合模型EM算法是软聚类方法。主成分分析、潜在语义分析是降维方法。概率潜在语义分析、潜在狄利克雷分配是概率模型估计方法。\n聚类方法聚类的基本概念相似度或距离聚类的对象是观测数据、或样本集合。假设有n个样本，每个样本由m个属性的特征向量组成。\n聚类的核心概念是 相似度或距离，有多种相似度或距离的定义。\n因为相似度直接影响聚类的结果，所以其选择是聚类的根本问题。\n闵可夫斯基距离在聚类中，可以将样本集合看作是向量空间中点的集合，以该空间的距离表示样本之间的相似度。\n常用的距离有闵可夫斯基距离，特别是欧氏距离。\n闵可夫斯基距离越大相似度越小，距离越小相似度越大。\n马哈拉诺比斯距离简称马氏距离，也是另一种常用的相似度，考虑各个分量（特征）之间的相关性并与各个分量的尺度无关。\n马哈拉诺比斯距离越大相似度越小，距离越小相似度越大。\n相关系数相关系数的绝对值越接近于1，表示样本越相似；\n越接近于0，表示样本越不相似。\n夹角余弦样本之间的相似度也可以用夹角余弦来表示。\n夹角余弦越接近于1，表示样本越相似；\n越接近于0，表示样本越不相似。\n类或簇层次聚类层次聚类假设类别之间存在层次结构，将样本聚到层次化的类中。\n层次聚类又有聚合或自下而上聚类、分裂或自上而下聚类两种方法。\nk均值聚类是基于样本集合划分的聚类算法。\nk均值聚类将样本集合划分为k个子集，构成k个类，将n个样本分到k个类中，每个样本到其所属类的中心的距离最小。\n每个样本只能属于一个类，所以k均值聚类是硬聚类。\n奇异值分解奇异值分解（SVD）是一种矩阵因子分解方法。\n弗罗贝尼乌斯范数主成分分析主成分分析（PCA）是一种常用的无监督学习方法。\n这一方法利用正交变换把由线性相关变量表示的观测数据转换为少数几个由线性无关变量表示的数据，线性无关的变量称为主成分。\n主成分的个数通常小于原始变量的个数，所以主成分分析属于降维方法。\n潜在语义分析潜在语义分析（LSA）是一种无监督学习方法，主要用于文本的话题分析，其特点是通过矩阵分解发现文本与单词之间的基于话题的语义关系。\n单词向量空间与话题向量空间单词向量空间文本信息处理，比如文本信息检索、文本数据挖掘的一个核心问题是对文本的语义内容进行表示，并进行文本之间的语义相似度计算。\n最简单的方法是利用向量空间模型（VSM）。\n话题向量空间两个文本的语义相似度可以体现在两者的话题相似度上。\n概率潜在语义分析也称概率潜在语义索引，是一种利用概率生成模型对文本集合进行话题分析的无监督学习算法。\n模型的最大特点是用隐变量表示话题；整个模型表示文本生成话题，话题生成单词，从而得到单词-文本共现数据的过程；假设每个文本由一个话题分布决定，每个话题由一个单词分布决定。\n马尔可夫链蒙特卡罗法构建一个马尔可夫链，使其平稳分布就是要进行抽样的分布，首先基于该马尔可夫链进行随机游走，产生样本的序列，之后使用该平稳分布的样本进行近似数值计算。\n蒙特卡罗法随机抽样数学期望估计积分计算马尔可夫链Metropolis-Hastings算法吉布斯抽样吉布斯抽样用于多元变量联合分布的抽样和估计。\n其基本做法是，从联合概率分布定义满条件概率分布，依次对满条件概率分布进行抽样，得到样本的序列。\n潜在狄利克雷分配潜在狄利克雷分配（LDA）模型是文本集合的生成概率模型。假设每个文本由话题的一个多项分布表示，每个话题由单词的一个多项分布表示，特别假设文本的话题分布的先验分布是狄利克雷分布，话题的单词分布也是狄利克雷分布。\n先验分布的导入使LDA能够更好地应对话题模型学习中的过拟合现象。\nPageRank算法是图的链接分析的代表性算法，属于图数据上的无监督学习算法。\n算法的基本想法是在有向图上定义一个随机游走模型，即一阶马尔可夫链，描述随机游走者沿着有向图随机访问各个结点的行为。\n在一定条件下，极限情况访问每个结点的概率收敛到平稳分布，这时各个结点的平稳概率值就是其PageRank值，表示结点的重要度。\nPageRank是递归定义的，计算可以通过迭代算法进行。\n随机游走模型","slug":"统计学习方法","date":"2022-11-07T03:20:37.212Z","categories_index":"算法","tags_index":"算法","author_index":"Algernon"},{"id":"462a158341940f456227d8cf6c76d983","title":"【PYTHON程序设计】实训代码","content":"教材《Python语言程序设计基础》\n第二章作业（9.15实训）2.2TempStr &#x3D; input(&quot;请输入带有符号的温度值：&quot;)\nif TempStr[-1] in [&#39;F&#39;,&#39;f&#39;]:\n    C &#x3D; (eval(TempStr[0:-1])-32)&#x2F;1.8\n    print(&quot;转换后的温度是&#123;:.2f&#125;C&quot;.format(C))\nelif TempStr[-1] in [&#39;C&#39;,&#39;C&#39;]:\n    F&#x3D;1.8*eval(TempStr[0:-1])+32\n    print(&quot;转换后的温度是&#123;:.2f&#125;F&quot;.format(F))\nelse:\n    print(&quot;输入格式错误&quot;)\n\nTempStr &#x3D; input(&quot;请输入带有符号的金额：&quot;)\nif TempStr[-1] in [&#39;$&#39;]:\n    C &#x3D; (eval(TempStr[0:-1]))*6\n    print(&quot;该金额对应的人民币额度是&#123;:.2f&#125;￥&quot;.format(C))\nelif TempStr[-1] in [&#39;￥&#39;]:\n    F&#x3D;(eval(TempStr[0:-1]))&#x2F;6\n    print(&quot;该金额对应的美元额度是&#123;:.2f&#125;$&quot;.format(F))\nelse:\n    print(&quot;输入格式错误&quot;)\n\n2.3import turtle\nturtle.setup(650,350,200,200)\nturtle.penup()\nturtle.fd(-250)\nturtle.pendown()\nturtle.pensize(25)\nturtle.pencolor(&quot;purple&quot;)\nturtle.seth(-40)\nfor i in range(4):\n    turtle.circle(40,80)\n    turtle.circle(-40,80)\nturtle.circle(40,80&#x2F;2)\nturtle.fd(40)\nturtle.circle(16,180)\nturtle.fd(40*2&#x2F;3)\n\nimport turtle\na&#x3D;[&#39;green&#39;,&#39;red&#39;,&#39;yellow&#39;,&#39;pink&#39;]\nturtle.setup(650, 350, 200, 200)\nturtle.penup()\nturtle.fd(-250)\nturtle.pendown()\nturtle.pensize(25)\nturtle.seth(-40)\nfor i in range(4):\n   turtle.pencolor(a[i])\n   turtle.circle(40, 80)\n   turtle.circle(-40, 80)\nturtle.pencolor(&quot;purple&quot;)\nturtle.circle(40, 80&#x2F;2)\nturtle.fd(40)\nturtle.circle(16, 180)\nturtle.fd(40 * 2&#x2F;3)\nturtle.exitonclick()\n\n\n2.4import turtle\nfor i in range(3):\n   turtle.seth(i*120)\n   turtle.fd(100)\n\nturtle.exitonclick()\n\n2.5import turtle\n\nturtle.setup(800, 600)\n#turtle.pensize(20)\n# 设置画笔大小\n#turtle.pencolor(&#39;pink&#39;)\n# 设置颜色\nfor i in range(7):\n    # 绘制外层大三角形\n    if i &lt; 3:\n        turtle.fd(200)\n        turtle.left(120)\n        # 每次前进之后转向\n    # 绘制内层小三角形\n    elif i &lt; 5:\n        turtle.fd(100)\n        turtle.left(120)\n    else:\n        turtle.left(120)\n        turtle.fd(100)\n        turtle.left(120)\nturtle.done()\nturtle.exitonclick()\n\n2.6\nimport turtle\n\nturtle.pensize(2)\n\nturtle.seth(0)\nfor i in range(1,5):\n    turtle.penup()\n    turtle.forward(20)\n    turtle.pendown()\n    turtle.forward(100)\n    turtle.penup()\n    turtle.forward(20)\n    turtle.pendown()\n\n    turtle.left(90)\n\nturtle.done()\n\n2.7import turtle\n\nturtle.pensize(2)\n\nturtle.seth(30)\nturtle.forward(100)\nturtle.right(120)\nturtle.forward(100)\nturtle.right(120)\nturtle.forward(100)\n\nturtle.penup()\nturtle.seth(0)\nturtle.forward(115.6)\nturtle.pendown()\n\nturtle.seth(150)\nturtle.forward(100)\nturtle.left(120)\nturtle.forward(100)\nturtle.left(120)\nturtle.forward(100)\nturtle.exitonclick()\n\n2.8import turtle\n\nturtle.pensize(2)\nfor x in range(100):\n    turtle.forward(2*x)\n    turtle.left(90)\nturtle.done()\nturtle.exitonclick()\n\n第三章作业3.1重量计算\n\n\n\n\n\n\n\n\n月球上物体的体重是在地球上的16.5%，假如你在地球上每年增长0.5kg，编写程序输出未来10年你在地球和月球上的体重状况。\nm&#x3D;65\nn&#x3D;0\nfor i in range(1,11):\n    m+&#x3D;0.5\n    n &#x3D; 0.165*m\n\n    print(&quot;未来第&#123;:d&#125;年我在地球上的体重是&#123;:.2f&#125;kg&quot;.format(i,m))\n    print(&quot;未来第&#123;:d&#125;年我在月球上的体重是&#123;:.2f&#125;kg&quot;.format(i,n))\n\n\n\n\n\n\n\n\n\n\n未来第1年我在地球上的体重是65.50kg未来第1年我在月球上的体重是10.81kg未来第2年我在地球上的体重是66.00kg未来第2年我在月球上的体重是10.89kg未来第3年我在地球上的体重是66.50kg未来第3年我在月球上的体重是10.97kg未来第4年我在地球上的体重是67.00kg未来第4年我在月球上的体重是11.05kg未来第5年我在地球上的体重是67.50kg未来第5年我在月球上的体重是11.14kg未来第6年我在地球上的体重是68.00kg未来第6年我在月球上的体重是11.22kg未来第7年我在地球上的体重是68.50kg未来第7年我在月球上的体重是11.30kg未来第8年我在地球上的体重是69.00kg未来第8年我在月球上的体重是11.38kg未来第9年我在地球上的体重是69.50kg未来第9年我在月球上的体重是11.47kg未来第10年我在地球上的体重是70.00kg未来第10年我在月球上的体重是11.55kg\n\n3.2天天向上续（一）假设能力增长符合如下带有平台期的模型：以七天为一个周期，连续学习3天能力值不变，从第四天至第七天每天能力增长为前一天的1%。如果7天有一天间断学习，则周期从头计算。请编写程序回答，如果初始能力值为1，连续学习365天后能力值为多少？\nm&#x3D;1\nn&#x3D;0\nfor i in range(1,366):\n\n    n+&#x3D;1\n    if n&gt;3:\n        m&#x3D;1.01*m\nprint(&quot;连续学习&#123;:d&#125;天后能力值是&#123;:.2f&#125;&quot;.format(i,m))\n\n\n\n\n\n\n\n\n\n连续学习365天后能力值是36.67\n\n3.3天天向上续（二）如果初始能力值为1，固定每10天休息1天，365天后能力值是多少？15天休息一天呢？\nm&#x3D;1\nn&#x3D;0\nfor i in range(1,366):\n\n    n+&#x3D;1\n    if n&gt;3:\n        m&#x3D;1.01*m\n    if n&#x3D;&#x3D;11:\n        n&#x3D;0\nprint(&quot;连续学习&#123;:d&#125;天后能力值是&#123;:.2f&#125;&quot;.format(i,m))\n\n\n\n\n\n\n\n\n\n连续学习365天后能力值是13.83\n3.4 回文数判断设n是任意自然数，如果n的各位数字反向排列所得自然数与n相等，则n被称为回文数。从键盘输入一个5位数字，请编写程序判断这个数字是不是回文数。\nm&#x3D;(input(&quot;请输入5位整数:&quot;))\nn&#x3D;eval(m)\nif(10000&lt;n and n&lt;100000):\n    if m &#x3D;&#x3D; m[::-1]:\n        print(&quot;是回文数&quot;)\n    else:\n        print(&quot;不是回文数&quot;)\n  # print(&quot;连续学习&#123;:d&#125;天后能力值是&#123;:.2f&#125;&quot;.format(i,m))\nelse:\n    print(&quot;输入格式错误&quot;)\n\n\n\n\n\n\n\n\n\n请输入5位整数:12321是回文数\n\n3.5田字格的输出：a &#x3D; &quot; ＋ &quot;\nb &#x3D; &quot;   &quot;\nc &#x3D; &quot; — &quot;\nd &#x3D; &quot; ｜ &quot;\n\nfor h in range(1,12): #田字格有11行\n    for l in range(1,12): #田字格有11列\n\n        if h in [1,6,11] and l in [1,6,11]:\n            print(a,end&#x3D;&quot;&quot;)\n\n        if  h in [1,6,11] and l not in [1,6,11]:\n            print(c,end&#x3D;&quot;&quot;)\n        if h not in [1,6,11] and l in [1,6,11]:\n            print(d,end&#x3D;&quot;&quot;)\n        if h not in [1,6,11] and l not in [1,6,11]:\n            print(b,end&#x3D;&quot;&quot;)\n        if l&#x3D;&#x3D;11 :\n            print()\n ＋  —  —  —  —  ＋  —  —  —  —  ＋ \n ｜              ｜              ｜ \n ｜              ｜              ｜ \n ｜              ｜              ｜ \n ｜              ｜              ｜ \n ＋  —  —  —  —  ＋  —  —  —  —  ＋ \n ｜              ｜              ｜ \n ｜              ｜              ｜ \n ｜              ｜              ｜ \n ｜              ｜              ｜ \n ＋  —  —  —  —  ＋  —  —  —  —  ＋ \n\n进程已结束,退出代码0\n\n\n3.6文本进度条import time\nscale &#x3D; 10\nprint(&quot;staring&quot;,end&#x3D;&quot;&quot;)\nfor i in range(scale+1):\n    a &#x3D; &#39;·&#39;\n   # b &#x3D; &#39; . . &#39; * (scale - 1)\n    c &#x3D; (i &#x2F; scale) * 100\n    print(&quot; &#123;&#125;&quot;.format(a),end&#x3D;&quot;&quot;)\n    time.sleep(0.1)\nprint(&quot;Done!&quot;)\n\n3.7文本风格while  True:\n    for i in [&quot;&#x2F;&quot;,&quot;-&quot;,&quot;|&quot;,&quot;\\\\&quot;,&quot;|&quot;]:\n        print(&quot;%s\\r&quot; %i,end&#x3D;&#39;&#39;)\n\n\n3.8tqdmfrom tqdm import tqdm\nfrom time import sleep\nfor i in tqdm(range(1,100)):\n    sleep(0.01)\n\n\n第四章作业4.1猜数游戏在程序中预设一个0~9之间的整数，让用户通过键盘输入所猜的数，如果大于预设的数，显示“遗憾，太大了”；小于预设的数，显示“遗憾，太小了”，如此循环，直至猜中该数，显示“预测N次，你猜中了！”，其中N是用户输入数字的计数。\nimport random\nr&#x3D; random.randrange(0,9,1)\ni&#x3D;1\nwhile(1):\n    g&#x3D;eval(input(&quot;输入猜的数&quot;))\n    if(g&gt;r):\n        print(&quot;阿巴阿巴，大了&quot;)\n        i+&#x3D;1\n        continue\n    elif(g&lt;r):\n        print(&quot;欸嘿，小了&quot;)\n        i+&#x3D;1\n        continue\n    else:\n        print(&quot; 预测&#123;&#125;次后，你猜中了&quot;.format(i))\n        break\n\n4.2统计不同字符个数用户从键盘输入一行字符，编写一个程序，统计并输出其中英文字符、数字、空格和其他字符的个数。\ns&#x3D;input(&quot;输入一行字符：&quot;)\nalpha,number,space,other&#x3D;0,0,0,0\nfor i in s:\n    if(&#39;a&#39;&lt;&#x3D; i&lt;&#x3D;&#39;z&#39; or &#39;A&#39;&lt;&#x3D;i&lt;&#x3D;&#39;Z&#39; ):\n        alpha+&#x3D;1\n    elif(&#39;0&#39;&lt;&#x3D;i&lt;&#x3D;&#39;9&#39;):\n        number+&#x3D;1\n    elif(i&#x3D;&#x3D;&#39; &#39;):\n        space+&#x3D;1\n    else:\n        other+&#x3D;1\nprint(&quot;字母有&#123;&#125;个，数字有&#123;&#125;个，空格有&#123;&#125;个，其他有&#123;&#125;个&quot;.format(alpha,number,space,other))\n\n\n4.3最大公约数计算从键盘接受两个整数，编写程序求出这两个整数的最大公约数和最小公倍数（提示：求最大公约数可用辗转相除法，求最小公倍数则用两数的积除以最大公约数即可）\n\na&#x3D;int(input(&quot;输入第一个数：&quot;))\nb&#x3D;int(input(&quot;输入第二个数：&quot;))\n\nm&#x3D;max(a,b)\nn&#x3D;min(a,b)\nt&#x3D;m%n\nwhile t!&#x3D;0:\n    m,n&#x3D;n,t\n    t&#x3D;m%n\ns&#x3D;int(a*b&#x2F;n)\nprint(&quot;&#123;&#125;和&#123;&#125;的最大公约数为&#123;&#125;&quot;.format(a,b,n))\nprint(&quot;&#123;&#125;和&#123;&#125;的最小公倍数为&#123;&#125;&quot;.format(a,b,s))\n\n4.4猜数游戏续（一）改编4.1，让计算机能够随机产生一个预设数字，范围在0~100之间，其他游戏规则不变。\nimport random\nr&#x3D; random.randrange(0,100,)\ni&#x3D;1\nwhile(1):\n    g&#x3D;eval(input(&quot;输入猜的数&quot;))\n    if(g&gt;r):\n        print(&quot;阿巴阿巴，大了&quot;)\n        i+&#x3D;1\n        continue\n    elif(g&lt;r):\n        print(&quot;欸嘿，小了&quot;)\n        i+&#x3D;1\n        continue\n    else:\n        print(&quot; 预测&#123;&#125;次后，你猜中了&quot;.format(i))\n        break\n\n4.5猜数游戏续（二）对于4.4，当用户输入的不是整数（如字母、浮点数等）时，程序会终止执行并退出。改编该程序，当用户输入出错时给出“输入内容必须为整数！”的提示，并让用户重新输入。\nimport random\nr&#x3D; random.randrange(0,100,)\ni&#x3D;1\nwhile(1):\n    g&#x3D;(input(&quot;输入猜的数&quot;))\n    if &#39;0&#39;&lt;g and g&lt;&#39;9&#39;:\n       g&#x3D;eval(g)\n       if(g&gt;r):\n         print(&quot;阿巴阿巴，大了&quot;)\n         i+&#x3D;1\n         continue\n       elif(g&lt;r):\n         print(&quot;欸嘿，小了&quot;)\n         i+&#x3D;1\n         continue\n       else:\n         print(&quot; 预测&#123;&#125;次后，你猜中了&quot;.format(i))\n         break\n    else:\n        print(&quot;输入内容必须为整数！&quot;)\n\n4.6羊车门问题有三扇关闭的门，一扇门后面停着汽车、其余门后是山羊，只有主持人知道每扇门后面是什么。参赛者可以选择一扇门，在开启它之前，主持人会开启另一扇门，露出门后的山羊，然后允许参赛者更换自己的选择。请问，参赛者更换选择后能否增加猜中汽车的机会？\n请使用random库对这个随机事件进行预测，分别输出参赛者改变选择和坚持选择获胜的几率。\nimport random\nn&#x3D;0\nm&#x3D;0\nfor i in range(100000):\n    a&#x3D;random.randint(1,3)#规定1后面是车，23后面是羊,随机选择\n    if a&#x3D;&#x3D;1:\n        n&#x3D;n+1\n\nprint(&quot;不更改选中车的概率:&#123;&#125;&quot;.format(n&#x2F;100000))\nfor j in range(100000):\n    b&#x3D;random.randint(1,3)\n    if b&#x3D;&#x3D;1:#换后选中车建立在第一次选中羊的基础上\n        continue\n    else:#23等价，翻开的定义为3，选中的定义为2\n        c&#x3D;random.randint(1,2)#问题变为在两扇门间选择,且已经选中羊，更换必中车\n        m&#x3D;m+1\nprint(&quot;更改选中车的概率:&#123;&#125;&quot;.format(m&#x2F;(100000)))\n\n\n4.7异常处理请用异常处理改造实例（根据圆的半径计算圆的面积和周长），使其能够接收并处理用户的任何输入。\nimport math\ntry:\n  r&#x3D;eval(input(&quot;请输入半径：&quot;))\n\n  c&#x3D;math.pi *r*2\n  s&#x3D;math.pi *(r**2)\n  print(&quot;周长是&#123;:.2f&#125;，面积为&#123;:.2f&#125;&quot;.format(c,s))\n\nexcept NameError:\n    print(&quot;请输入正整数&quot;)\nexcept:\n    print(&quot;其他错误&quot;)\n\n第五章作业5.1 更大田字格仿造习题3.5输出一个更大的田字格，用函数简化其代码，田字格为4x4\na,b,c,d&#x3D;&#39;+ &#39;,&#39;-- &#39;,&#39;|&#39;,&#39; &#39;\ndef line(m):\n    for i in range(m*5+1):\n        print(&quot;&#123;&#125;&quot;.format(a if i%5&#x3D;&#x3D;0 else b),end&#x3D;&#39;&#39;)\n    print()\ndef littlesquare(m):\n    line(m)\n    for j in range((m+2)*4):\n        print(&quot;&#123;&#125;&#123;&#125;&quot;.format(c,d*13),end&#x3D;&#39;&#39;) if j%(m+2)!&#x3D;m+1 else print(&quot;&quot;)\ndef tsquare(m,n):\n    for i in range(n):\n        littlesquare(m)\n    line(m)\ntsquare(4,4)\n\n\n5.2 isOdd()函数实现isOdd()函数，参数为整数，如果整数为奇数，返回True，否则返回False\ndef isOdd(a):\n    if a%2 !&#x3D;0:\n        print(&quot;True&quot;)\n        return True\n    else:\n        print(&quot;False&quot;)\n        return False\nisOdd(3)\nisOdd(4)\n\n5.3 isNum()函数参数为一个字符串，如果这个字符串属于整数、浮点数或复数的表示，返回True，否则返回False\ndef isOdd(a):\n    if type(a) &#x3D;&#x3D; int or type(a) &#x3D;&#x3D; float or type(a) &#x3D;&#x3D; complex:\n        print(&quot;True&quot;)\n        return True\n    else:\n        print(&quot;False&quot;)\n        return False\nisOdd(&#39;m&#39;)\nisOdd(3)\n\n5.4 multi()函数参数个数不限，返回所有参数的乘积\ndef multi():\n    try:\n        str&#x3D;input(&quot;输入要相乘的参数，用空格隔开:&quot;)\n        c&#x3D;1\n        for item in str.split():\n\n            c&#x3D;c*int(item)\n        print(c)\n    except:\n        print(&quot;error&quot;)\n\nmulti()\n\n\n\n5.5 isPrime()函数参数为整数，要有异常处理。如果整数是质数，返回True，否则返回False。\nimport math\ndef isPrime(n):\n    try:\n            if n &lt;&#x3D; 1:\n                print(&quot;请输入大于一正整数&quot;)\n            for i in range(2, int(math.sqrt(n) + 1)):\n               if n % i &#x3D;&#x3D; 0:\n                  print(&quot;非质数&quot;)\n                  return False\n            print(&quot;是质数&quot;)\n            return True\n    except:\n        print(&quot;error&quot;)\nisPrime(3)\nisPrime(4)\nisPrime(5)\n\n5.6 datetime库使用datetime库，对自己的生日输出不少于10种日期格式。\n5.7 汉诺塔def hanoi(n,A,B,C):                   #定义汉诺塔函数,参数n是圆盘数，A、B、C是3根柱\n   if n&#x3D;&#x3D;1:                           #判断圆盘数，如果等于1，递归条件\n      print(A,&#39;--&gt;&#39;,C,&#39; &#39;,n)          # 直接将A柱上的圆盘移动到C柱上\n   else:                              #否则，进行递归移动\n      hanoi(n-1,A,C,B)               #递归将A柱最上方的n-1个盘子落在B柱\n      print(A,&#39;--&gt;&#39;,C,&#39; &#39;,n) # 输出将A柱上的圆盘移动到C柱上,也就是将A柱的最小面盘子落在C柱\n      hanoi(n-1,B,A,C)             #递归将B柱上的n-1个盘子，落在C柱\n\nhanoi(6,&#39;A&#39;,&#39;B&#39;,&#39;C&#39;)               #调用函数\n\n\n\n\n\n\n\n\n\n\n\nD:\\coder\\randomnumbers\\venv\\Scripts\\python.exe D:/coder/randomnumbers/chengxusheji.pyA —&gt; B   1A —&gt; C   2B —&gt; C   1A —&gt; B   3C —&gt; A   1C —&gt; B   2A —&gt; B   1A —&gt; C   4B —&gt; C   1B —&gt; A   2C —&gt; A   1B —&gt; C   3A —&gt; B   1A —&gt; C   2B —&gt; C   1A —&gt; B   5C —&gt; A   1C —&gt; B   2A —&gt; B   1C —&gt; A   3B —&gt; C   1B —&gt; A   2C —&gt; A   1C —&gt; B   4A —&gt; B   1A —&gt; C   2B —&gt; C   1A —&gt; B   3C —&gt; A   1C —&gt; B   2A —&gt; B   1A —&gt; C   6B —&gt; C   1B —&gt; A   2C —&gt; A   1B —&gt; C   3A —&gt; B   1A —&gt; C   2B —&gt; C   1B —&gt; A   4C —&gt; A   1C —&gt; B   2A —&gt; B   1C —&gt; A   3B —&gt; C   1B —&gt; A   2C —&gt; A   1B —&gt; C   5A —&gt; B   1A —&gt; C   2B —&gt; C   1A —&gt; B   3C —&gt; A   1C —&gt; B   2A —&gt; B   1A —&gt; C   4B —&gt; C   1B —&gt; A   2C —&gt; A   1B —&gt; C   3A —&gt; B   1A —&gt; C   2B —&gt; C   1\n八皇后问题参考：\n\n\n\n\n\n\n\n\n\nhttps://blog.csdn.net/Wangtuo1115/article/details/106862490?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166565012216800180668737%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=166565012216800180668737&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-106862490-null-null.142^v55^control,201^v3^add_ask&amp;utm_term=%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98python&amp;spm=1018.2226.3001.4187\ndef conflict(state, nextColumn):\n    &quot;&quot;&quot;\n   判断是否冲突\n   因为坐标是从0开始的，所以state的长度代表了下一行的行坐标\n   :param state:（7，4，6，0，2） 标记每行皇后所在的位置 （0，7）一行八列 （2，4） （3，6） （4，0） （5，2）\n   :param nextColumn:下一行的列坐标\n   :return:\n   &quot;&quot;&quot;\n    nextRow &#x3D; rows &#x3D; len(state)  # 5\n    for row in range(rows):  # 0,1,2,3,4\n        # 获取当前行的列\n        column &#x3D; state[row]\n        &quot;&quot;&quot;\n      如何判断是否冲突：\n          1. 如果列的差值为0，说明两皇后在同一列\n          2. 如果列的差值等于行的差值，说明两皇后在对角线上\n      &quot;&quot;&quot;\n        if abs(column - nextColumn) in [0, nextRow - row]:\n            return True\n    return False\n\n\n# 采用生成器的方式来产生每一个皇后的位置，并用递归来实现下一个皇后的位置\ndef queens(num, state&#x3D;()):\n    &quot;&quot;&quot;\n   基于递归采用回溯算法，算出每一种结果\n\n   :param num: 皇后的数量  8\n   :param state: 列坐标。初始为空。参数为元组不为列表，因为参数只能为不可变数据类型\n   :return:\n   &quot;&quot;&quot;\n    # 每一行的列坐标都是从0:7的\n    # 0,1,2,3,4,5,6,7\n    for pos in range(num):\n        # 默认state为空。长度为0，但是是不冲突的\n        # 判断是否冲突，state为空时不冲突\n        if not conflict(state, pos):  # 回溯法的体现\n            # 如果state的长度为7，即到达了倒数第二行，也就是前7行皇后都已经找到了位置，最后一行又没有冲突，返回最后一行的列坐标\n            if len(state) &#x3D;&#x3D; num - 1:\n                # 最后一行的（pos,）&#x3D;最后一行的result，然后再递归回去求倒数第二行的result\n                yield (pos,)\n            else:\n                for result in queens(num, state + (pos,)):\n                    &quot;&quot;&quot;\n               递归实现求state：\n                   1. 向下递归\n                   第一次（行）： pos&#x3D;0，刚开始不会进入if len(state) &#x3D;&#x3D; num - 1，进入执行else，会执行queens(num, state + (pos, ))，\n                   第二次（行）： 进入else，再调用queens(num, state + (pos, )),递归执行queens(num, state + (pos,) + (pos,))\n                   第三次（行）： 进入else，再调用queens(num, state + (pos,) + (pos,),递归执行queens(num, state + (pos,) + (pos,) + (pos,))\n                   ...\n                   第七次（行）： 执行和上面的一样，不过此时state的长度为7\n                   第八次（行）： 执行f len(state) &#x3D;&#x3D; num - 1:求出最后一行的列坐标(pos,)\n\n                   2.向上递归\n                   求出第八行的列坐标，就可以求出第七行的（pos,），返回的是第七行和第八行的列坐标（（pos，） + result）\n                   根据下一行的结果依次求出上一行的结果；\n                   ....\n                   最后求出第一行的列坐标，返回整体结果\n               &quot;&quot;&quot;\n                    yield (pos,) + result\n\n\ndef prettyprint(solution):\n    &quot;&quot;&quot;\n   进行友好展示：为了至关表现棋盘，用X表示皇后的位置\n   :param solution:\n   :return:\n   &quot;&quot;&quot;\n\n    def line(pos, length&#x3D;len(solution)):\n        return &#39;.&#39; * (pos) + &#39;@&#39; + &#39;.&#39; * (length - pos - 1)\n\n    for pos in solution:\n        print(line(pos))\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    solutions &#x3D; queens(8)\n    for index, solution in enumerate(solutions):\n        print(&#39;第%d种解决方案：&#39; % (index + 1), solution)\n        prettyprint(solution)\n        print(&#39;*&#39; * 50)\n\n第六章作业6.1 随机密码生成编写程序，在26个字母大小写和9个数字组成的列表中随机生成10个8位密码。\nimport random\nletter &#x3D; [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;,&#39;g&#39;,&#39;h&#39;,&#39;i&#39;,\n          &#39;j&#39;,&#39;k&#39;,&#39;l&#39;,&#39;m&#39;,&#39;n&#39;,&#39;o&#39;,&#39;p&#39;,&#39;q&#39;,&#39;r&#39;,\n          &#39;s&#39;,&#39;t&#39;,&#39;u&#39;,&#39;v&#39;,&#39;w&#39;,&#39;x&#39;,&#39;y&#39;,&#39;z&#39;,\n          &#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;,&#39;E&#39;,&#39;F&#39;,&#39;G&#39;,&#39;H&#39;,&#39;I&#39;,\n          &#39;J&#39;,&#39;K&#39;,&#39;L&#39;,&#39;M&#39;,&#39;N&#39;,&#39;O&#39;,&#39;P&#39;,&#39;Q&#39;,&#39;R&#39;,\n          &#39;S&#39;,&#39;T&#39;,&#39;U&#39;,&#39;V&#39;,&#39;W&#39;,&#39;X&#39;,&#39;Y&#39;,&#39;Z&#39;,\n          1,2,3,4,5,6,7,8,9]\ni &#x3D; 0\nwhile i &lt; 10:\n    password &#x3D; []\n    p &#x3D; 0\n    while p &lt; 8:\n        s &#x3D; random.randint(1,60)\n        password.append(letter[s])\n        p +&#x3D; 1\n    i +&#x3D; 1\n    print(&quot;生成的随机密码是：&#123;&#125;&#123;&#125;&#123;&#125;&#123;&#125;&#123;&#125;&#123;&#125;&#123;&#125;&#123;&#125;&quot;.format(password[0],password[1],password[2],\n       password[3],password[4],password[5],password[6],password[7]))\n\n6.2 重复元素判定编写一个函数，接受列表作为参数，如果一个元素在列表中出现了不止一次，则返回True，但不要改变原来列表的值。同时编写调用这个函数和测试结果的程序。\nstr1&#x3D;input(&#39;输入以英文逗号分隔列表元素&#39;)\nlist1&#x3D;str1.split(&#39;,&#39;)\n##print(tongji(list1))\ndef tongji(list1):\n    set1&#x3D;set(list1)\n    if len(set1)&lt;len(list1): #小于表示有重复元素，集合可以去除重复元素\n        return True\n    else:\n        return(&#39;列表没有重复元素&#39;)\nprint(tongji(list1))\n\n\ndef tongji(list1):\n    for p in list1:\n        num&#x3D;list1.count(p)\n        if num&gt;1:\n            return True\n        else:\n            continue\nstr1&#x3D;&#39;&#39;\nwhile True:\n    str2&#x3D;input(&#39;输入列表元素，以回车结束&#39;)\n    str1+&#x3D;str2\n    if str2&#x3D;&#x3D;&#39;&#39;:\n        break\nprint(str1)\nlist1&#x3D;list(str1)\nprint(tongji(list1))\n\n\n\n\n\n\n\n\n\n\n输入列表元素，以回车结束1输入列表元素，以回车结束2输入列表元素，以回车结束3输入列表元素，以回车结束123None\n6.3 重复元素判定（续）利用集合的无重复性改写6.2，获得一个更快更简洁的版本。\n6.4 文本字符分析编写程序接收字符串，按字符出现频率的降序打印字母。分别尝试录入一些中英文文章片段，比较不同语言之间字符频率的差别。\n#文本字符分析\n#统计输入的字符串，按字符出现频率并按照降序方式打印字母\n\ntext &#x3D; input(&quot;请输入一段文本（回车退出)：&quot;)\n\n\nwhile text !&#x3D; &#39;&#39;:#如果为空则退出循环\n    d &#x3D; &#123;&#125;\n    for word in text:\n        d[word] &#x3D; d.get(word,0) + 1\n\n        #转为列表类型对其排序\n    ls &#x3D; list(d.items())\n    ls.sort(key&#x3D;lambda x:x[1],reverse &#x3D; True)#以记录第二列排序\n\n    for i in range(len(ls)):\n        word, count &#x3D; ls[i]\n        print(&quot;&#123;0:&lt;10&#125;&#123;1:&gt;5&#125;&quot;.format(word,count))\n\n    text &#x3D; input(&quot;请输入一段文本（回车退出)：&quot;)\n\n\n\n\n\n\n\n\n\n\n\n请输入一段文本（回车退出)：玛娜桓那兰那阿薛那那             3玛             1娜             1桓             1兰             1阿             1薛             1\n6.5 生日悖论分析生日悖论指如果一个房间里有23人或以上，那么至少有两个人生日相同的概率大于50%。编写程序中，输出在不同随机样本数量下，23个人中至少有两个人生日相同的概率。\nimport random\ndef duplicate(lst):\n    lst1&#x3D;set(lst)\n    if len(lst)&gt;len(lst1):\n        return True\n    else:\n        return False\ndef generate(numbers):\n    birthday&#x3D;[]\n    for i in range(numbers):\n        birthday.append(random.randint(1,365))\n    return birthday\ndef match(students,samples):\n    count&#x3D;0\n    birthday&#x3D;[]\n    for i in range(samples):\n        birthday&#x3D;generate(students)\n        if duplicate(birthday):\n            count+&#x3D;1\n    return count\nstudents&#x3D;23\nsimulations&#x3D;100000\ncount&#x3D;match(students,simulations)\nrate&#x3D;(float(count)&#x2F;simulations)*100\nprint(&quot;rate is %f%%&quot;%rate)\n\n\n\n\n\n\n\n\n\n\nrate is 50.736000%\n类from math import *\nclass Circle2D(object):\n    def __init__(self,x&#x3D;0,y&#x3D;0,radius&#x3D;1):\n        self.radius&#x3D;radius\n        self.x&#x3D;x\n        self.y&#x3D;y\n\n    def getArea(self): #返回圆面积\n        radius&#x3D;self.radius\n        a&#x3D;pi*radius*radius\n        print(&quot;面积是&#123;&#125;&quot;.format(a))\n\n    def getPerimeter(self):#返回周长\n        radius &#x3D; self.radius\n        b&#x3D;2*pi*radius\n        print(&quot;周长是&#123;&#125;&quot;.format(b))\n\n    def contains(self,a,b): #判断是否在圆内\n        radius &#x3D; self.radius\n        x&#x3D;self.x\n        y&#x3D;self.y\n        m&#x3D;((x-a)**2+(y-b)**2)*0.5\n        if m &lt; radius:\n            return True\n        else:\n            return False\n\nc&#x3D;Circle2D(2,2,5.5)\nprint(c.getArea())\nprint(c.getPerimeter())\nprint(c.contains(3,3))\n\n\n\n\n\n\n\n\n\nD:\\coder\\randomnumbers\\venv\\Scripts\\python.exe D:/coder/randomnumbers/chengxusheji.py面积是95.03317777109123None周长是34.55751918948772NoneTrue\n","slug":"python程序设计作业","date":"2022-11-06T13:55:49.000Z","categories_index":"编程语言","tags_index":"python,信管","author_index":"Algernon"},{"id":"a3dd42f7fdfc58df8e8005286e07de07","title":"【数据库系统概论】实训（四）","content":"实验四\n使用数据库datatest\n\n备份datatest数据库。\n通过datatest数据库备份文件，建立数据库datatest02数据库。\n删除数据库datatest02中表student、class、course和score的所有记录。\n删除数据库datatest02中表student、class、course和score。\n删除数据库datatest02\n建立与student表数据结构完全相同的表studentnation，将表student中少数民族学生的记录整体存入表studentnation 。\n将会计学07（3）班的男同学的成绩增加5分。\n将王红敏同学选修的“数据库系统”课程的成绩改为88分\n将每个班级的学生人数填入到班级表的ClassNum\n删除选修了“大学语文”课程的选课记录\n删除平均分在60分到70分之间的同学选课记录\n创建仅包含少数民族学生的视图View-Studentnation\n查询视图View-Studentnation\n通过视图View-Studentnation，查询蒙古族学生\n创建一个包含学生学号、姓名、课程号、课程名、获得的学分和成绩（成绩大于等于60分）的View-Score60\n查询视图View- Score60\n通过视图View-Score60，查询选修“数据库系统”课程成绩大于等于85分的学生学号和姓名。\n删除视图View-Studentnation\n\n1.备份datatest数据库。\n\n\n\n\n\n\n\n\nhttps://blog.csdn.net/qq_42759120/article/details/123151453?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166773828316782412572853%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=166773828316782412572853&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-123151453-null-null.142^v63^control,201^v3^add_ask,213^v1^control&amp;utm_term=sql%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%BA%93&amp;spm=1018.2226.3001.4187\n2.通过datatest数据库备份文件，建立数据库datatest02数据库。3. 删除数据库datatest02中表student、class、course和score的所有记录。4. 删除数据库datatest02中表student、class、course和score。5. 删除数据库datatest026. 建立与student表数据结构完全相同的表studentnation，将表student中少数民族学生的记录整体存入表studentnation 。7. 将会计学07（3）班的男同学的成绩增加5分。USE datatest\nGO\n\nUPDATE Score \nSET score&#x3D;score+5\nFROM Score a, Student b, Class c\nWHERE a.studentNo&#x3D;b.studentNo AND b.classNo&#x3D;c.classNo\n      AND c.classno&#x3D;&#39;C0703&#39; AND sex&#x3D;&#39;男&#39;\n\nSELECT *\nFROM Score\n8. 将王红敏同学选修的“数据库系统”课程的成绩改为88分9. 将每个班级的学生人数填入到班级表的ClassNum班级数据\nUSE datatest\nGO\n\nUPDATE Class \nSET classNum&#x3D;sCount \nFROM Class a, \n              ( SELECT classNo, count(*) sCount\n                FROM Student\n                GROUP BY classNo ) b\nWHERE a.classNo&#x3D;b.classNo\n\nSELECT *\nFROM Class\n结果\n10. 删除选修了“大学语文”课程的选课记录11. 删除平均分在60分到70分之间的同学选课记录12. 创建仅包含少数民族学生的视图View-Studentnationuse datatest3\ngo\n\nCREATE VIEW ViewStudentnation\nAS\n      SELECT * \n      FROM Student\n      WHERE nation  &lt;&gt; &#39;汉族&#39;\n\n\n13. 查询视图View-Studentnationuse datatest3\ngo\n\nSELECT *\nFROM ViewStudentnation\n\n\n\n14. 通过视图View-Studentnation，查询蒙古族学生use datatest3\ngo\n\nSELECT *\nFROM ViewStudentnation\nWHERE nation &#x3D;&#39;蒙古族&#39;\n\n15. 创建一个包含学生学号、姓名、课程号、课程名、获得的学分和成绩（成绩大于等于60分）的View-Score60USE datatest\nGO\n\nCREATE VIEW ScoreView\nAS\n      \n      SELECT a.studentNo, a.studentname, b.courseNo,b.courseName, b.creditHour,c.Score\n      FROM Student a, Course b, Score c\n      WHERE a.studentNo&#x3D;c.studentNo AND b.courseNo&#x3D;c.courseNo AND c.Score&gt;&#x3D;60\n\n\n\n16. 查询视图View- Score60USE datatest\nGO\n\n--CREATE VIEW ScoreView\n--AS\n      \n--      SELECT a.studentNo, a.studentname, b.courseNo,b.courseName, b.creditHour,c.Score\n--      FROM Student a, Course b, Score c\n--      WHERE a.studentNo&#x3D;c.studentNo AND b.courseNo&#x3D;c.courseNo AND c.Score&gt;&#x3D;60\n\nSELECT *\nFROM ScoreView\n17. 通过视图View-Score60，查询选修“数据库系统”课程成绩大于等于85分的学生学号和姓名。SELECT studentNo,studentName\nFROM ScoreView\nWHERE courseName&#x3D;&#39;数据库系统&#39; AND Score &gt;&#x3D;65\n18. 删除视图View-StudentnationUSE datatest\nGO\n\n--CREATE VIEW Score60\n--AS\n      \n--      SELECT a.studentNo, a.studentname, b.courseNo,b.courseName, b.creditHour,c.Score\n--      FROM Student a, Course b, Score c\n--      WHERE a.studentNo&#x3D;c.studentNo AND b.courseNo&#x3D;c.courseNo AND c.Score&gt;&#x3D;60\nDROP VIEW Score60\n","slug":"数据库4","date":"2022-11-06T13:50:49.000Z","categories_index":"","tags_index":"数据库","author_index":"Algernon"},{"id":"9df1f1a911a2d4081370d4df69ee7eb1","title":"【数据库系统概论】实训（三）","content":"使用数据库school，用SQL语句完成以下查询\n1.实现两表的笛卡尔积运算\nuse school1\ngo\n\nselect  Student.Sno,Cno,Grade  from  student,sc  \n\n\nS01  \tC01  \t92.0\nS01  \tC03  \t84.0\nS01  \tC01  \t90.0\nS01  \tC02  \t94.0\nS01  \tC03  \t82.0\nS01  \tC01  \t72.0\nS01  \tC02  \t90.0\nS01  \tC03  \t75.0\nS02  \tC01  \t92.0\nS02  \tC03  \t84.0\nS02  \tC01  \t90.0\nS02  \tC02  \t94.0\nS02  \tC03  \t82.0\nS02  \tC01  \t72.0\nS02  \tC02  \t90.0\nS02  \tC03  \t75.0\nS03  \tC01  \t92.0\nS03  \tC03  \t84.0\nS03  \tC01  \t90.0\nS03  \tC02  \t94.0\nS03  \tC03  \t82.0\nS03  \tC01  \t72.0\nS03  \tC02  \t90.0\nS03  \tC03  \t75.0\nS04  \tC01  \t92.0\nS04  \tC03  \t84.0\nS04  \tC01  \t90.0\nS04  \tC02  \t94.0\nS04  \tC03  \t82.0\nS04  \tC01  \t72.0\nS04  \tC02  \t90.0\nS04  \tC03  \t75.0\nS05  \tC01  \t92.0\nS05  \tC03  \t84.0\nS05  \tC01  \t90.0\nS05  \tC02  \t94.0\nS05  \tC03  \t82.0\nS05  \tC01  \t72.0\nS05  \tC02  \t90.0\nS05  \tC03  \t75.0\nS06  \tC01  \t92.0\nS06  \tC03  \t84.0\nS06  \tC01  \t90.0\nS06  \tC02  \t94.0\nS06  \tC03  \t82.0\nS06  \tC01  \t72.0\nS06  \tC02  \t90.0\nS06  \tC03  \t75.0\n\n2.实现两表的等值连接\nuse school1\ngo\n\nselect   Student.*, SC.*   from  student,sc  where   Sdept  &#x3D;   &#39;自动化&#39;\n\n\n\n3.实现两表的自然连接\nuse school1\ngo\n\nselect   Student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade  from  student,sc  \n      where   student.sno&#x3D;Sc.Sno\n\n\n4.实现多表的自然连接\nuse school1\ngo\n\nselect  Sname,Cname,Grade  from  student,sc ,course\n       where   student.sno&#x3D;Sc.Sno  and  Sc.Cno&#x3D;Course.Cno  \n\n\n5.查询王建平同学生选修的课程号和相应的考试成绩use school1\ngo\nSELECT SC.Cno,SC.Grade\nFROM Student,SC\nWHERE\t  Student.Sname&#x3D;&#39;王建平&#39; and Student.Sno &#x3D; SC.Sno\n\n6.查询每一门课的间接先修课\nuse school1\ngo\n\nselect  A.Cno,A.Cname,B.Pre_Cno \n                 from  Course  A,Course  B\n                 where  A.Pre_Cno &#x3D;  B.Cno  and  B.Pre_Cno is not null \n\n\n\n\n\n7.查询同时选修了C01和C02课程的学生学号use school1\ngo\nselect  Sno,Grade  from  SC  where  Cno&#x3D;(select Cno from Course  where  Cname  like  &#39;数据结构&#39;)\n\nselect  Sno,Grade  from  SC ,Course where  SC.Cno&#x3D;Course.Cno and Cname  like  &#39;数据结构&#39;\n8.查询成绩表中有记录同学的详细情况（用两种方式实现）use school1\ngo\nSELECT Student.Sno,Sname,Grade\nFROM Student,SC\nWHERE\tStudent.Sno&#x3D;SC.Sno AND Grade IS NOT NULL\n\n9.查询女学生的学号、姓名和各科考试成绩use school1\ngo\nSELECT Student.Sno,Sname,Cname,Grade\nFROM Student,SC,Course\nWHERE\tStudent.Sno&#x3D;SC.Sno AND SC.Cno&#x3D;Course.Cno AND Ssex&#x3D;&#39;女&#39;\n如果改成男学生呢？\nuse school1\ngo\nSELECT Student.Sno,Sname,Cname,Grade\nFROM Student,SC,Course\nWHERE\tStudent.Sno&#x3D;SC.Sno AND SC.Cno&#x3D;Course.Cno AND Ssex&#x3D;&#39;男&#39;\n\n10.查询考试成绩大于总平均分的学生学号use school1\ngo\nSelect  distinct Sno from  SC  where  Grade&gt;(select avg(grade) from SC)\n\n\n11.查询有一门成绩比所有选修了C02号课程的学生成绩高的学生学号use school1\ngo\nSelect  Sno  from  SC where grade &gt; all (select  Grade from SC where Cno&#x3D;&#39;C02&#39;)  and  Cno&lt;&gt;&#39;C02&#39;\n\n12.查询成绩至少比选修了C02号课程的一个学生成绩高的学生学号use school1\ngo\nSelect  Sno  from  SC where grade &gt; (select  Min(Grade) from SC where Cno&#x3D;&#39;C02&#39;)  and  Cno&lt;&gt;&#39;C02&#39;\n\n\n13.查询王建平同学选修课程的课程详细信息（用两种方式实现）use school1\ngo\nSELECT Course.Cno,Cname,Pre_Cno,Credit \nFROM Course,SC\nWHERE\t  SC.Sno&#x3D;&#39;S01&#39; and Course.Cno &#x3D; SC.Cno\n\n14.查询与“刘华”在同一个系学习的学生（用多种方式实现）use school1\ngo\n --Select  Sno,Sname,Sdept  from  Student  where  Sdept IN  (select  Sdept from  student where  Sname&#x3D;&#39;刘华&#39;)\n\n--Select  S1.Sno,S1.Sname,S1.Sdept from  Student  S1,Student  S2 where  S1.Sdept&#x3D;S2.Sdept  and S2.Sname&#x3D;&#39;刘华&#39;\n\nSelect  Sno,Sname,Sdept  from  Student S1 where Exists  (select  *  from  student S2 where  S2.Sdept&#x3D;S1.Sdept and S2.Sname&#x3D;&#39;刘华&#39;)\n\n\n15.查询所有学生都选修了的课程号和课程名use school1\ngo\n Select  Sname from Student where not Exists (select * from course where not Exists (select * from SC where  Sno&#x3D;Student.Sno and Cno&#x3D;Course.Cno))\n\n16.查询至少选修了学生S03选修的全部课程的学生学号use school1\ngo\n Select  distinct Sno from  SC X  where  Not Exists (select  *  from  SC  Y   where  Y.sno&#x3D;&#39;S03&#39;and  not  Exists   (select  *  from  SC  Z   where  Z.Sno&#x3D;X.Sno  and  Z.Cno&#x3D;Y.Cno))\n\n\n17.查询同时选修了C01，C02和C03课程的学生学号18.查询18岁学生和计算机学生的基本信息（用两种方式实现）use school1\ngo\nSelect  *  from  student where  Sage&#x3D;18   and Sdept  like  &#39;计算机&#39;\n\nuse school1\ngo\n--Select  *  from  student where  Sage&#x3D;18   and Sdept  like  &#39;计算机&#39;\n\nSelect  *  from  student where  Sdept  like  &#39;计算机&#39;   and Sage  like &#39;18&#39;\n\n\nSelect  *  from  student where  Sdept  like  &#39;计算机&#39;   or Sage  like &#39;18&#39;\n\n19.查询计算机系中年龄大于18岁学生的基本信息（用两种方式实现）use school1\ngo\nSelect  *  from  student where  Sage&gt;18  intersect  select *  from  student     \n\n\nuse school1\ngo\nSelect  *  from  student where  Sage&gt;18  \n\n20.查询年龄大于18岁学生基本信息与计算机系学生基本信息的差集（用两种方式实现）use school1\ngo\nSelect  *  from  student where  Sage&gt;18 except  select *  from  student  where  Sdept like  &#39;计算机&#39; \n\nuse school1\ngo\nSelect  *  from  student where  Sage&gt;18   and Sdept not like  &#39;计算机&#39;\n\n","slug":"数据库3","date":"2022-11-05T13:51:49.000Z","categories_index":"","tags_index":"数据库","author_index":"Algernon"},{"id":"59f349df2cc5599b441353d5d290faf4","title":"【优雅的使用Matlab进行机器学习】","content":"这个名字显然不是我取的，是货真价实的信科院课程。【优雅】、【matlab】和【机器学习】，buff叠满了属于是。当然，至少到目前（4.7），还停留在matlab的阶段，机器学习下周开始。\nmatlab基础数据类型整型：无符号整型和有符号整型浮点型：single,double取整函数：round,fix,floor,ceil类型相同的数据才能运算\n运算符、表达式/（除或右除）\\（反除或左除）^乘幂‘共轭转置  \n.* 矩阵乘或点乘\n.&#x2F; 矩阵除或点除\n.\\ 矩阵左乘或左除\n.^ 矩阵乘幂或点乘幂\n.&#39; 转置 （矩阵行转换为列 ，复元素不做共轭）\n~= 不等于\n指数函数\n\n\n\n\n\n\n\n\n\nexp,log,log10,log2,pow2,sqrt\n取整函数和求余函数：\n\n\n\n\n\n\n\n\n\nround,fix,floor,ceil,rem,mod,sign\n矩阵变换函数：\n\n\n\n\n\n\n\n\n\nfliplr,flipud,flipidm,rot90,diag,tril,triu,det\n其他函数：\n\n\n\n\n\n\n\n\n\nmin,max,mean,median,std,diff,sort,length,norm,sum,prod,dot,cumsum,cumprod,cross\n输入输出\n\n\n\n\n\n\n\n\ninputdispfprintf\n分支结构if 语句if condition\n   Execute the statement\nend\n\n\n\n\n\n\n\n\n\nif—-elseif—-else———end多分支语句\nswitch语句switch 表达式\n   case 表达式1\n       语句1\n   case 表达式2\n       语句2\n   ... ...\n   case 表达式n\n       语句n\n   otherwise\n       语句n+1\nendfor 循环\n\n\n\n\n\n\n\n\n\nfor 循环变量=expr1:expr2:expr3         循环体语句         end\n#Example\ns&#x3D;0;\nfor i&#x3D;1:2:12\n    s&#x3D;s+i;\nend\nwhile 循环 \n\n\n\n\n\n\n\n\n\nwhlie &lt;循环判断的语句v&gt;循环体end\nExample:\ns&#x3D;0;\ni&#x3D;1;\nwhile i &lt;&#x3D;12\n   s&#x3D;s+i;\n   i&#x3D;i+2;\nend\n匿名函数\n\n\n\n\n\n\n\n\n\n匿名函数： fhandle=@(arglist)expr\nExample:\nfhandle&#x3D;@(x,y)(x.^3+y.^3);\na&#x3D;5;\nb&#x3D;8;\nfhandle(a,b）\n二维绘图plot(x1,y1,&#39;LineSpec1&#39;,x2,y2,&#39;LineSpec2&#39;,...,xn,yn,&#39;LineSpecn&#39;)\n添加坐标标注、标题、网格以及标注的图形。\n\n\n\n\n\n\n\n\n\nxlabel,ylabel,title,legend,grid on/off,axis.figure,text\n标注数据点\nscatter(x,y,sz,c,mkr,&#39;filled&#39;)\n\n\n\n\n\n\n\n\n\n（x,y)数据点sz数据点大小c颜色mkr标记‘filled’实心，默认空心\n曲线plot3(X1,Y1,Z1,&#39;LineSpace&#39;,...)\n\n\n\n\n\n\n\n\n\n绘制三维曲线图(sin(x),x,cos(x))\n条形图\n\n\n\n\n\n\n\n\n\nbar,barh,bar3,bar3h直方图hist(y,m),hist(y,x)\ny&#x3D;random(10,1);\ny&#x3D;randn(10,6);\n饼图\npie(x,explode,&#39;label&#39;);\npie3(x,explode,&#39;label&#39;);\n子图\n\n\n\n\n\n\n\n\n\nsubplot\n其他绘图\n\n\n\n\n\n\n\n\n\n双纵坐标图形plotyy封闭图形patch半对数图semilogx\n隐函数作图\n\n\n\n\n\n\n\n\n\nezplot,ezplot3,ezmesh,ezsurf\n课程作业第一次作业：matlab脚本文件输入长方形的长和宽，计算长方形的周长和面积并输出l &#x3D; input(&#39;输入长：&#39;);\n\n w &#x3D; input(&#39;输入宽：&#39;);\nzc&#x3D;2*l+2*w\ns &#x3D; l * w;\nfprintf(&#39;%d&#39;,zc);\nfprintf(&#39;%d&#39;,s);\n\n\n输入三角形的三条边（要满足构成三角形的条件），求三角形的周长和面积a &#x3D; input(&#39;输入第一条边：&#39;);\n\nb &#x3D; input(&#39;输入第二条边：&#39;);\n\nc &#x3D; input(&#39;输入第三条边：&#39;);\n\nif (a+b&gt;c &amp;&amp; a+c&gt;b &amp;&amp; b+c&gt;a)\n\n    zc&#x3D; a+b+c;\n\n    p &#x3D; zc*0.5;\n\n    s &#x3D; sqrt(p*(p-a)*(p-b)*(p-c));\n\n\n\nelse\n\n    fprintf(&#39;输入不正确&#39;);\n\nend\n\nfprintf(&#39;周长&#x3D;%d  &#39;,zc);\n\nfprintf(&#39;  面积&#x3D;%d&#39;,s);\n输入一元二次方程的三个系数，求一元二次方程的根。我的答案：\na &#x3D; input(&#39;输入第一个系数：&#39;);\n\nb &#x3D; input(&#39;输入第二个系数：&#39;);\n\nc &#x3D; input(&#39;输入第三个系数：&#39;);\n\nd&#x3D;b*b-4*a*c;\n\n\n\nif (d&gt;&#x3D;0)\n\n    x&#x3D;((-1*b)+sqrt(d))&#x2F;(2*a);\n\n    y&#x3D;((-1*b)-sqrt(d))&#x2F;(2*a);\n\n   fprintf(&#39;x1&#x3D;%d  &#39;,x); \n\n   fprintf(&#39;x2&#x3D;%d  &#39;,y);\n\nelse\n\n    fprintf(&#39;无实根&#39;);\n\nend\n给定半径，求球的体积和表面积。r &#x3D; input(&#39;输入半径：&#39;);\n\n\n\nv&#x3D;(4&#x2F;3)*pi*r^3;\n\ns&#x3D; 4*pi*r^2;\n\n\n\nfprintf(&#39;球的体积为：%d\\n&#39;,v);\n\n\n\nfprintf(&#39;球的面积为：%d&#39;,s);\n输入三个数，将其按照从小到大的顺序排列。a &#x3D; input(&#39;输入第一个数：&#39;);\n\nb &#x3D; input(&#39;输入第二个数：&#39;);\n\nc &#x3D; input(&#39;输入第三个数：&#39;);\n\narray &#x3D; [a,b,c];\n\n\n\nb&#x3D;sort(array);\n\n\n\n    fprintf(&#39;%d&#39;,b);\n第二次作业：分支语句输入一个字符，如果是大写字母，输出其后继字符及其ASCII值，如果不是大写字母，原样输出。例如，输入字符B，输出“字母B的后继字符为C，对应的ASCII码值为67”，注意字母Z的后继字符为A。ch&#x3D;input(&#39;请输入一个字符：&#39;,&#39;s&#39;);\n\nif ch&gt;&#x3D;&#39;A&#39; &amp;&amp; ch&lt;&#39;Z&#39;\n\n    fprintf(&#39;字母%c的后继字符为%c，对应的ASCII码值为%d&#39;,ch,ch+1,ch+1);\n\nelseif ch &#x3D;&#x3D;&#39;Z&#39;\n\n    fprintf(&#39;字母%c的后继字符为%c，对应的ASCII码值为%d&#39;,ch,ch-25,ch-25);\n\nelse\n\n           \n\n        fprintf(ch);\n\nend\n输入一个小于10000的整数，求出是几位数并且逆序输出。例如，输入123，输出“该数为3位整数，其逆序数为321”r &#x3D; input(&#39;输入一个整数：&#39;);\n\nn&#x3D;floor(log10(r))+1\n\na&#x3D;floor(r&#x2F;1000);\n\nb&#x3D;floor((r-1000*a)&#x2F;100);\n\nc&#x3D;floor((r-1000*a-100*b)&#x2F;10);\n\nd&#x3D;floor((r-1000*a-100*b-10*c)&#x2F;1);\n\nif n&#x3D;&#x3D;4\n\n\n\n    fprintf(&#39;该数为%d位整数，其逆序数为%d%d%d%d\\n&#39;,n,d,c,b,a);\n\nelseif n&#x3D;&#x3D;3\n\n\n\n      fprintf(&#39;该数为%d位整数，其逆序数为%d%d%d\\n&#39;,n,d,c,b);\n\nelseif n&#x3D;&#x3D;2\n\n fprintf(&#39;该数为%d位整数，其逆序数为%d%d\\n&#39;,n,d,c);\n\nelseif n&#x3D;&#x3D;1\n\n   fprintf(&#39;该数为%d位整数，其逆序数为%d\\n&#39;,n,d);\n\nelse\n\n    fprintf(&#39;输入格式错误&#39;);\n\nend\n在编辑窗口中：输入学生成绩，输出该成绩的等级。等级规定如下：[90，100]为A等，[80，90)为B等，[70，80)为C等，[60，70)为D等，[0，60)为E等g &#x3D; input(&#39;输入学生成绩：&#39;);\n\n\n\nif (90&lt;&#x3D;g)&amp;&amp;(g&lt;&#x3D;100)\n\n\n\n    fprintf(&#39;成绩等级为A等&#39;);\n\nelseif  (80&lt;&#x3D;g)&amp;&amp;(g&lt;90)\n\n\n\n    fprintf(&#39;成绩等级为B等&#39;);\n\nelseif  (70&lt;&#x3D;g)&amp;&amp;(g&lt;80)\n\n\n\n    fprintf(&#39;成绩等级为C等&#39;);\n\nelseif (60&lt;&#x3D;g)&amp;&amp;(g&lt;70)\n\n\n\n    fprintf(&#39;成绩等级为D等&#39;);\n\nelseif (0&lt;&#x3D;g)&amp;&amp;(g&lt;60)\n\n\n\n    fprintf(&#39;成绩等级为E等&#39;);\n\nelse\n\n    fprintf(&#39;输入格式错误&#39;);\n\nend\n商场购物，100件以下，不优惠，100~199件95折，200~399件90折，400~799件85折，800~1499件80折，1500件以上，75折。输入所购货物的单价、件数，求实际付款数目。p &#x3D; input(&#39;输入货物单价：&#39;);\n\nn &#x3D; input(&#39;输入货物件数：&#39;);\n\n\n\n\n\n\n\nif n&lt;100\n\n    fprintf(&#39;实际付款为%d&#39;,n*p);\n\nelseif  (100&lt;&#x3D;n)&amp;&amp;(n&lt;199)\n\n    fprintf(&#39;实际付款为%d&#39;,n*p*0.95);\n\nelseif  (200&lt;&#x3D;n)&amp;&amp;(n&lt;399)\n\n\n\n    fprintf(&#39;实际付款为%d&#39;,n*p*0.9);\n\n\n\nelseif (400&lt;&#x3D;n)&amp;&amp;(n&lt;799)\n\n\n\n    fprintf(&#39;实际付款为%d&#39;,n*p*0.85);\n\n\n\nelseif (800&lt;&#x3D;n)&amp;&amp;(n&lt;1499)\n\n\n\n    fprintf(&#39;实际付款为%d&#39;,n*p*0.8);\n\nelse\n\n    fprintf(&#39;实际付款为%d&#39;,n*p*0.75);\n\n\n\nend\n第三次作业：switch和循环从键盘输入两个数和运算符，用switch语句实现一个简单的四则运算计算器。采用循环设置10个题目，输出做对多少题。for i &#x3D; 1:10\n\n    fprintf(&#39;第%d题&#39;,i)\n\n    a &#x3D;input(&#39;a&#x3D;&#39;);\n\n    b &#x3D;input(&#39;b&#x3D;&#39;);\n\n    op&#x3D;input(&#39;op&#x3D;&#39;,&#39;s&#39;);\n\n    answer&#x3D;input(&#39;answer&#x3D;&#39;);\n\n    count&#x3D;0;\n\n    switch op\n\n        case &#39;+&#39;\n\n            fin&#x3D;a+b;\n\n       case &#39;-&#39;\n\n            fin&#x3D;a+b;\n\n       case &#39;x&#39;\n\n            fin&#x3D;a*b;\n\n       case &#39;&#x2F;&#39;\n\n            fin&#x3D;a&#x2F;b;\n\n    end\n\n    if fin &#x3D;&#x3D;answer\n\n        fprintf(&#39;正确\\n&#39;);\n\n    else\n\n        fprintf(&#39;错误\\n&#39;);\n\n    end\n\nend\n百钱买百鸡公鸡5文钱一只，母鸡3文钱一只，小鸡3只一文钱，用100文钱买一百只鸡, 其中公鸡，母鸡，小鸡都必须要有，问公鸡，母鸡，小鸡要买多少只刚好凑足100文钱。\nn&#x3D;100;\n\nfor x &#x3D;1: (floor(n &#x2F; 5) + 1)\n\n    for y &#x3D; 1: (floor(n &#x2F; 3) + 1)\n\n        s &#x3D; n - 5 * x - 3 * y;\n\n        z &#x3D; s*3;\n\n        p &#x3D; x + y + z;\n\n        if p &#x3D;&#x3D; n\n\n                fprintf(&quot;公鸡数量为%d  &quot; ,x );\n\n                fprintf(&quot;母鸡数量为%d  &quot; ,y );\n\n                fprintf(&quot;小鸡数量为%d\\n&quot;,  z);\n\n\n\n        else\n\n                continue\n\n        end\n\n     end\n\nend\n验证哥德巴赫猜想：任何一个大于4的偶数都可以表示为两个素数的和。n&#x3D;input(&#39;请输入一个大于4的偶数：&#39;);\n\ni&#x3D;2;\n\nwhile i&gt;1&amp;&amp;i&lt;n&#x2F;2\n\n    if isprime(i)&#x3D;&#x3D;1     \n\n        j&#x3D;n-i;     \n\n        if isprime(j)&#x3D;&#x3D;1     \n\n            fprintf(&#39;\\n%d&#x3D;%d+%d&#39;,n,i,j);\n\n        end\n\n    end\n\n    i&#x3D;i+1;\n\nend\n输入一个10进制整数，转换为二进制输出n&#x3D;input(&#39;请输入一个非负十进制整数：&#39;);\n\nnum&#x3D;dec2bin(n);\n\nfprintf(num)\n斐波那契数列斐波那契数列：又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波纳契数列以如下被以递推的方法定义：F(1)=1，F(2)=1, F(3)=2,F(n)=F(n-1)+F(n-2)（n&gt;=4，n∈N*）在现代物理、准晶体结构、化学等领域，斐波纳契数列都有直接的应用，为此，美国数学会从1963年起出版了以《斐波纳契数列季刊》为名的一份数学杂志，用于专门刊载这方面的研究成果。 \n要求:(1)编写函数fibo，功能是求斐波那契数列的第n项。（2）编写测试脚本，调用fibo函数，输出斐波那契数列的前30项。\nfunction [x]&#x3D;fibo(n)\n\n    if (n&#x3D;&#x3D;1) || (n&#x3D;&#x3D;2)\n\n        x&#x3D;1;\n\n    else\n\n        x&#x3D;fibo(n-1)+fib(n-2);\n\n    end\n\nend\n\n\n\n\n\nx&#x3D;fibo(30)\n\nfprintf(x)\n\n\n\n\n\nfor i&#x3D;1:30\n\n    fprintf(&#39;%d  \\n&#39;,fibo(i));\n\n    \n\nend\n第四次作业：数据可视化第一题作图：在同一图中显示正弦函数y1=sin(x)与直线y2=-x+0.5,要求显示标题、横坐标标签、纵坐标标签、图例，对y1、y2做文本标注。x取值[-2pi,2pi],然后通过解方程组将解在图中用星号标注\nclear\n\nh1&#x3D;figure(1)\n\n\n\nx&#x3D;-2*pi:0.1:2*pi;\n\ny1&#x3D;sin(x);\n\n\n\ny2&#x3D;(-1)*x+0.5;\n\nplot(x,y1,&#39;b-&#39;,&#39;linewidth&#39;,1)\n\n\n\nhold on\n\nplot(x,y2,&#39;r-..&#39;,&#39;linewidth&#39;,2)\n\nxlabel(&#39;x&#39;,&#39;fontsize&#39;,18)\n\nylabel(&#39;y&#39;,&#39;fontsize&#39;,18)\n\ntitle(&#39;示例曲线&#39;,&#39;Color&#39;,&#39;r&#39;,&#39;fontsize&#39;,18)\n\nlegend(&#39;y1&#x3D;sin(x)&#39;,&#39;y2&#x3D;-x+0.5&#39;)\n\ngrid on\n\n\n\nf &#x3D; @(x)(sin(x)+x-0.5);\n\nxj&#x3D;fzero(f,3);\n\nyj&#x3D;sin(xj)+xj-0.5\n\ntext(xj,yj+0.2,num2str(yj))\n\nplot(xj,yj+0.2,&#39;g-*&#39;)\n第二题在第1个子窗口用极坐标画图显示r=0.5(1+cos（θ）)，其中θ∈[0,2π]；在第2个子窗口作填充图，填充坐标矢量为X=[0 0.2 0.8 1 0.5 0],Y=[1 0 0 1 1.8 1],填充颜色为蓝色；在第3个子窗口作双y轴图y1=sin（t），t∈[0,4π]，y2=20*cos(t);在第4个子窗口显示相图x=sin（t），y=cos(t).如图所示。\nsubplot(2,2,1);\n\ntheta&#x3D;0:0.1:2*pi;\n\nr&#x3D;0.5*(1+cos(theta));\n\npolarplot(theta,r);\n\nsubplot(2,2,2);\n\nx2&#x3D;[0 0.2 0.8 1 0.5 0]\n\ny2&#x3D;[1 0 0 1 1.8 1]\n\nfill(x2,y2,&#39;b&#39;)\n\nsubplot(2,2,3);\n\nt&#x3D;0:0.01:4*pi;\n\ny1&#x3D;sin(t)\n\ny3&#x3D;20*cos(t)\n\nplotyy(t,y1,t,y3)\n\nsubplot(2,2,4);\n\nm&#x3D;-1:0.1:1;\n\nxt &#x3D;  cos(m);\n\nyt &#x3D;  sin(m);\n\nezplot(xt,yt,[-1,1])\n第三题\n第四题\n第五次作业：回归分析1\nclear\n\nt &#x3D; [0 0.5 1.0 1.5 2.0 2.5 3.0 3.5 4.0 5.0 6.0 6.1 7.0];\n\nf &#x3D; [300 281 261 244 228 214 202 191 181 164 151 149 141];\n\n% [p,S]&#x3D;polyfit(t,h,2);\n\n\n\nscatter(t,f)\n\n\n\np&#x3D;polyfit(t,f,3);  \n\n\n\nxi&#x3D;1:0.2:10;\n\n\n\nyi&#x3D;polyval(p,xi);  \n\n\n\nplot(xi,yi,t,f,&#39;r*&#39;);\n\nxlabel(&#39;time(时间)&#39;,&#39;fontsize&#39;,18)\n\n\n\nylabel(&#39;temp(温度)&#39;,&#39;fontsize&#39;,18)\n\nlegend(&#39;time(时间)-temp(温度)曲线&#39;)\n\nfprintf(&#39;由图及几何曲线可知，t&#x3D;9时f为126.4\\n&#39;);\n\n2\nclc;\n\nclear;\n\nclose all;\n\nx1 &#x3D; [180\t201\t205\t208\t213\t217\t218\t222\t226\t230\t233\t238\t240\t242\t253]&#39;;  % 跳高成绩\n\nx2 &#x3D; [280 240 226 224 220 217 225 221 211 213 199 198 195 186 183]&#39;;    % 1000m成绩\n\nx3 &#x3D; [153 170 162 160 162 165 170 168 169 179 172 172 175 181 176]&#39;;    % 跳绳个数\n\nY &#x3D; [60\t75 70 70 75\t75 85 80 80\t85 90 90 90\t95 95]&#39;;                    % 综合打分\n\n\n\nfigure(1);\n\nhold on;\n\nplot(x1,&#39;bo&#39;);\n\nplot(x2,&#39;ro&#39;);\n\nplot(x3,&#39;go&#39;);\n\nplot(Y,&#39;mo&#39;,&#39;LineWidth&#39;,1);\n\nlegend(&#39;跳高成绩(cm)&#39;,&#39;1000m成绩(s)&#39;,&#39;跳绳个数&#39;,&#39;去年的综合分数(100分制)&#39;)\n\n\n\n\n\n\n\n\n\nlen &#x3D; length(Y);\n\npelta &#x3D; ones(len,1);\n\nx &#x3D; [pelta, x1, x2, x3];\n\n\n\n[b,bint,r,rint,stats]&#x3D;regress(Y,x,0.03);     \n\n\n\nBS &#x3D; b(1) + b(2) .* x1 + b(3) .* x2 + b(4) .* x3 ;\n\n\n\nfigure(2);\n\nhold on;\n\nplot(x1,&#39;bo-&#39;);\n\nplot(x2,&#39;ro-&#39;);\n\nplot(x3,&#39;go-&#39;);\n\nplot(Y,&#39;mo-&#39;);\n\nplot(BS,&#39;kx-&#39;,&#39;LineWidth&#39;,1);\n\nlegend(&#39;跳高成绩(cm)&#39;,&#39;1000m成绩(s)&#39;,&#39;跳绳个数&#39;,&#39;去年的综合分数(100分制)&#39;,&#39;多元线性回归拟合曲线&#39;)\n\nR_2 &#x3D; 1 - sum( (BS - Y).^2 ).&#x2F; sum( (Y - mean(Y)).^2 );\n\nstr &#x3D; num2str(R_2);\n\ndisp([&#39;拟合优度为：&#39;,str])\n\nfprintf(&#39;由图可知，散点可以线性拟合，使用多元线性回归拟合\\n&#39;);\n","slug":"matlab机器学习","date":"2022-11-05T03:50:49.000Z","categories_index":"机器学习","tags_index":"matlab","author_index":"Algernon"},{"id":"8ccd071f2e3e334937c615ba766a420f","title":"【数据库系统概论】实训（二）","content":"小练习查询数学系全体学生的信息。\n\nuse school1\ngo\n\nSELECT *   FROM student  WHERE  Sdept&#x3D;&#39;数学&#39;;\n\n\n查询数学系的全体学生的学号和姓名\n\nuse school1\ngo\n\nSELECT Sno,Sname   FROM student  WHERE  Sdept&#x3D;&#39;数学&#39;;\n\n\n\nuse school1\ngo\n\n\nSELECT *   FROM   SC   WHERE  Grade&gt;&#x3D;60 and Cno&#x3D;&#39; C01 &#39; ;\n\n范围查询\nuse school1\ngo\n\n\nSELECT  Sname,Sdept,Sage  From  Student  where\n    Sage  between  20  and  23;\n\n\nSELECT  *  From  Student  where  Sdept &#x3D;&#39;计算机&#39;  or  Sdept&#x3D;&#39;自动化 &#39;;\n\nSELECT sno, cno, grade   FROM SC  WHERE cno &#x3D;&#39;C01&#39;   or  cno &#x3D;&#39;C05&#39;  or cno &#x3D;&#39; C03 &#39;;\n\n\nuse datatest3\ngo\n\n\nSELECT studentName, native, classNo   FROM Student\n   WHERE native NOT IN (&#39;南昌&#39;, &#39;上海&#39;)\n\n\n\n\n在课程Course表中查询有先修课程的课程信息\nSELECT *\n   FROM Course\n   WHERE priorCourse IS NOT NULL\n\n字符匹配查询use school1\ngo\n\n\nSELECT  Sno,Sname,Sage   FROM   Student  WHERE Sname  LIKE &#39;%王__&#39;\n\n排序查询use school1\ngo\n\nselect  *  from  Student order by sage,sno desc\n\n\n实验二使用数据库school，完成以下查询。\n\n查询学生所在系并去掉重复值。\n\nuse school1\ngo\n\nSELECT sdept,Sname   FROM student  \n\n\n查询所有课程的全部信息。\n\nSELECT *   FROM Course  \n\n\n查询所有班级的学号、学生姓名、年龄，要求用中文显示列名。\n\nSELECT Sno  学号,Sname  学生姓名,Sage  年龄    FROM Student\n\n\n查询全体学生的姓名、出生年份和学号，要求用小写字母表示学号中的字母。\n\nSELECT   Sname,&#39;Birth:&#39;  Title, year(getdate())-Sage   BirthYear, Lower(Sno)  Lsno     From   Student;\n\n\n查询选修C01课程的学生人数。\n\nselect cno,count(Sno) 选课人数 from SC group by  Cno having cno &#x3D;&#39;C01&#39;\n\n\n查询有课程记录的学生人数\n\nselect    count(distinct  Sno)  from   SC;\n\n\n计算C01号课程的学生平均成绩\n\nselect  avg(Grade)  from  SC  where   Cno&#x3D;&#39;C01&#39;;\n\n\n查询每门课程的平均成绩和选课人数\n\nselect cno,avg(Grade) 平均成绩,count(Sno) 选课人数 from SC group by  Cno\n\n\n查询C01号和C02号两门课程的平均成绩和选课人数\n\nselect AVG(Grade) as &#39;平均成绩&#39;,count(*) as &#39;选课人数&#39; from SC where Cno&#x3D;&#39;C01&#39; or Cno&#x3D;&#39;C02&#39;\n\n\n查询选课人数大于等于三人的课程的平均分、最高分和最低分\n\nSELECT Sno, AVG(Grade)  平均成绩, MAX(Grade)  最高分,MIN(Grade) 最低分\nFROM SC \nGROUP BY Sno\nhaving count(*) &gt; 2\n\n\n\n查询年龄在20至23岁学生的基本情况（用两种方法表达查询条件）\n\nSELECT *\nFROM Student\nwhere Sage &gt;&#x3D; 20\n  and Sage&lt;&#x3D;23\n\n\n查询选修C01号课程成绩在60分以上的学生学号和成绩\n\nSELECT Sno,Grade\nFROM SC\nwhere Cno&#x3D;&#39;C01&#39; and grade&gt;60\n\n\n查询计算机和自动化两系学生的基本情况（用两种方法表达查询条件）\n\nSELECT  *  From  Student  where  Sdept  in (&#39;计算机&#39;,&#39;自动化&#39;)\n\nSELECT  Sname,Ssex  From  Student  where  Sdept  in (&#39;计算机&#39;,&#39;自动化&#39;)\n\n\n查询不是计算机和自动化两系学生的基本情况\n\nSELECT  *  From  Student  where  Sdept not in (&#39;计算机&#39;,&#39;自动化&#39;)\n\n\n查询还没有录入考试成绩的学生学号及其课程号\n\nSELECT  Sno,Cno  From  SC where  Grade is null\n\n查询所有姓黄同学的信息\n\nSELECT  *   FROM   Student  WHERE Sname  LIKE &#39;黄%&#39;\n\n\n查询数学系中年龄为18岁的同学学号、姓名、性别\n\nSELECT  Sno,Sname ,Ssex  FROM   Student  WHERE Sdept&#x3D;&#39;数学&#39; and Sage&#x3D;18\n\n\n查询同时选修了“C01”和“C02”课程的同学的选课信息\n\nselect distinct  sc.Sno ,sc.Cno\nfrom student,sc\nwhere student.sno &#x3D; sc.sno \nand student.sno in\n    (select sno from sc\n     where cno &#x3D; &#39;c01&#39;\n      and sno in\n        ( select sno from sc\n            where cno &#x3D; &#39;c02&#39;\n            \n        )\n    ) ;\n\n\n","slug":"数据库2","date":"2022-11-05T02:50:49.000Z","categories_index":"","tags_index":"数据库","author_index":"Algernon"},{"id":"92f6b64b2c628f28d0dacf2b7d568ea8","title":"【数据库系统概论】实训（一）","content":"数据库实训1不加主键和外键的前提下创建表\n\n\n\n\n\n\n\n\nhttps://blog.csdn.net/weixin_41542329/article/details/79001240?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=sql%E8%AE%BE%E7%BD%AE%E4%B8%BB%E9%94%AE%E4%BB%A3%E7%A0%81&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-6-79001240.142^v51^control,201^v3^add_ask&amp;spm=1018.2226.3001.4187\n\n背景\n创建表的时候没有设置主键，可以通过SQL语句追加主键\n\n语句\n\n\n\n\n\n\n\n\n\n\n\nalter table 表名 add constraint 索引名称 primary key (成为主键的列)\n第三张表Use Master;\nGO\nCREATE Database education1\nON \n(   NAME&#x3D;education1,\n    FILENAME&#x3D;&#39;C:\\MSML\\sqlserver\\database\\education.mdf&#39;,\n\tSIZE&#x3D;2,\n\tMAXSIZE&#x3D;unlimited,\n\tFILEGROWTH&#x3D;1\n)\nLOG ON\n(  NAME&#x3D;education1_log,\n    FILENAME&#x3D;&#39;C:\\MSML\\sqlserver\\database\\education.ldf&#39;,\n\tSIZE&#x3D;1,\n\tMAXSIZE&#x3D;unlimited,\n\tFILEGROWTH&#x3D;1\n)\nGO\nUse education1;\nGO\n\nCREATE TABLE C(Cno  char(6),Cname char(20), Teacher char(10))\nCREATE TABLE S(Sno  char(6),Sname char(12),Age smallint, Sex char(2))\nCREATE TABLE SC(Sno char(6), Cno  char(6), Grade decimal(4,1))\n\nGO\nINSERT INTO S VALUES(&#39;S001&#39;,&#39; liu&#39;,20, &#39;男&#39;);\nINSERT INTO S VALUES(&#39;S002&#39;,&#39; zhang&#39;,21, &#39;女&#39;);\nINSERT INTO S VALUES(&#39;S003&#39;,&#39; zhao&#39;,19, &#39;男&#39;);\nINSERT INTO S VALUES(&#39;S004&#39;,&#39; wang&#39;,22, &#39;男&#39;);\nINSERT INTO S VALUES(&#39;S005&#39;,&#39; ren&#39;,18, &#39;女&#39;);\nINSERT INTO S VALUES(&#39;S006&#39;,&#39; xiao&#39;,19, &#39;女&#39;);\n\nINSERT INTO C VALUES(&#39;C001&#39;,&#39; 数据库系统原理&#39;,&#39;赵文昕&#39;);\nINSERT INTO C VALUES(&#39;C002&#39;,&#39; 计算机网络&#39;,&#39;舒伟&#39;);\nINSERT INTO C VALUES(&#39;C003&#39;,&#39; 网站开发与设计&#39;,&#39;舒伟&#39;);\nINSERT INTO C VALUES(&#39;C004&#39;,&#39; 移动端程序设计&#39;,&#39;黄万艮&#39;);\nINSERT INTO C VALUES(&#39;C005&#39;,&#39; 数据结构&#39;,&#39;黄万艮&#39;);\nINSERT INTO C VALUES(&#39;C006&#39;,&#39; Excel在管理系统中的应用&#39;,&#39;赵文昕&#39;);\nINSERT INTO C VALUES(&#39;C007&#39;,&#39; 高级数据库系统&#39;,&#39;李光荣&#39;);\nINSERT INTO C VALUES(&#39;C008&#39;,&#39; VC++&#39;,&#39;鲍钦河&#39;);\n\nINSERT INTO SC VALUES(&#39;S001&#39;,&#39; C001&#39;, &#39;93.0&#39;);\nINSERT INTO SC VALUES(&#39;S001&#39;,&#39; C002&#39;, &#39;90.0&#39;);\nINSERT INTO SC VALUES(&#39;S001&#39;,&#39; C003&#39;, &#39;83.0&#39;);\nINSERT INTO SC VALUES(&#39;S001&#39;,&#39; C004&#39;, &#39;90.0&#39;);\nINSERT INTO SC VALUES(&#39;S002&#39;,&#39; C002&#39;, &#39;89.0&#39;);\nINSERT INTO SC VALUES(&#39;S002&#39;,&#39; C003&#39;, &#39;76.0&#39;);\nINSERT INTO SC VALUES(&#39;S003&#39;,&#39; C002&#39;, &#39;83.0&#39;);\nINSERT INTO SC VALUES(&#39;S003&#39;,&#39; C004&#39;, &#39;90.0&#39;);\nGO\n\nSELECT *from C;\nSELECT *from S;\nSELECT *from SC;\n\n第二张表Use Master;\nGO\nCREATE Database school1\nON \n(   NAME&#x3D;education1,\n    FILENAME&#x3D;&#39;C:\\MSML\\sqlserver\\database\\school.mdf&#39;,\n\tSIZE&#x3D;2,\n\tMAXSIZE&#x3D;unlimited,\n\tFILEGROWTH&#x3D;1\n)\nLOG ON\n(  NAME&#x3D;school1_log,\n    FILENAME&#x3D;&#39;C:\\MSML\\sqlserver\\database\\school.ldf&#39;,\n\tSIZE&#x3D;1,\n\tMAXSIZE&#x3D;unlimited,\n\tFILEGROWTH&#x3D;1\n)\nGO\nUse school1;\nGO\n\nCREATE TABLE Student( Sno char(5), Sname char(12),Ssex char(2),Sage smallint ,Sdept char(12))\nCREATE TABLE Course(Cno char(5),Cname char(16),Pre_Cno  char(5),Credit smallint)\nCREATE TABLE SC(Sno char(5),Cno char(5),Grade numeric(4,1))  &#x2F;*Grade 取值范围0-100*&#x2F;\n\nGO\nINSERT INTO Student VALUES(&#39;S01&#39;,&#39; 王建平&#39;, &#39;男&#39;,21,&#39;自动化&#39;);\nINSERT INTO Student VALUES(&#39;S02&#39;,&#39; 刘华&#39;, &#39;男&#39;,19,&#39;自动化&#39;);\nINSERT INTO Student VALUES(&#39;S03&#39;,&#39; 范林军&#39;, &#39;男&#39;,18,&#39;计算机&#39;);\nINSERT INTO Student VALUES(&#39;S04&#39;,&#39; 李伟&#39;, &#39;男&#39;,19,&#39;数学&#39;);\nINSERT INTO Student VALUES(&#39;S05&#39;,&#39; 黄河&#39;, &#39;男&#39;,18,&#39;数学&#39;);\nINSERT INTO Student VALUES(&#39;S06&#39;,&#39; 长江&#39;, &#39;男&#39;,20,&#39;数学&#39;);\n\nINSERT INTO Course VALUES(&#39;C01&#39;,&#39; 英语&#39;,&#39;&#39;,4);\nINSERT INTO Course VALUES(&#39;C02&#39;,&#39; 数据结构&#39;,&#39;C05&#39;,2);\nINSERT INTO Course VALUES(&#39;C03&#39;,&#39; 数据库&#39;,&#39;C02&#39;,2);\nINSERT INTO Course VALUES(&#39;C04&#39;,&#39; DB_设计&#39;,&#39;C03&#39;,3);\nINSERT INTO Course VALUES(&#39;C05&#39;,&#39; C++&#39;,&#39;C05&#39;,3);\nINSERT INTO Course VALUES(&#39;C06&#39;,&#39; 网络原理&#39;,&#39;C07&#39;,3);\nINSERT INTO Course VALUES(&#39;C07&#39;,&#39; 操作系统&#39;,&#39;C05&#39;,3);\n\nINSERT INTO SC VALUES(&#39;S01&#39;,&#39; C01&#39;, &#39;92&#39;);\nINSERT INTO SC VALUES(&#39;S01&#39;,&#39; C03&#39;, &#39;84&#39;);\nINSERT INTO SC VALUES(&#39;S02&#39;,&#39; C01&#39;, &#39;90&#39;);\nINSERT INTO SC VALUES(&#39;S02&#39;,&#39; C02&#39;, &#39;94&#39;);\nINSERT INTO SC VALUES(&#39;S02&#39;,&#39; C03&#39;, &#39;82&#39;);\nINSERT INTO SC VALUES(&#39;S03&#39;,&#39; C01&#39;, &#39;72&#39;);\nINSERT INTO SC VALUES(&#39;S03&#39;,&#39; C02&#39;, &#39;90&#39;);\nINSERT INTO SC VALUES(&#39;S04&#39;,&#39; C03&#39;, &#39;75&#39;);\nGO\n\nSELECT *from Student;\nSELECT *from Course;\nSELECT *from SC;\n\n第一张表\n\nUse Master;\nGO\nCREATE Database datatest3\nON \n(   NAME&#x3D;datatest3,\n    FILENAME&#x3D;&#39;C:\\MSML\\sqlserver\\database\\datatest3.mdf&#39;,\n\tSIZE&#x3D;2,\n\tMAXSIZE&#x3D;unlimited,\n\tFILEGROWTH&#x3D;1\n)\nLOG ON\n(  NAME&#x3D;datatest3_log,\n    FILENAME&#x3D;&#39;C:\\MSML\\sqlserver\\database\\datatest3.ldf&#39;,\n\tSIZE&#x3D;1,\n\tMAXSIZE&#x3D;unlimited,\n\tFILEGROWTH&#x3D;1\n)\nGO\nUse datatest3;\nGO\n\nCREATE TABLE Student(studentno char(8),studentname char(12),sex char(2),birthday smalldatetime,native char(10),nation char(8),classno char(10))\nCREATE TABLE Class(classno char(10),classname char(20),instiute char(12),grade char(4),classnum  tinyint )\nCREATE TABLE Course(courseNo char(10),courseName varchar(20), creditHour tinyint ,courseHour    tinyint,precourse varchar(10))\nCREATE TABLE Score(studentno char(8),courseNo char(10),term char(5),Score  numeric(4,1))\n\nGO\nINSERT INTO Class VALUES(&#39;AC0703&#39;,&#39; 会计学07（3）班&#39;, &#39;会计学院&#39;,2007,46);\nINSERT INTO Class VALUES(&#39;CS0701&#39;,&#39; 计算机07（1）班&#39;, &#39;信息学院&#39;,2007,48);\nINSERT INTO Class VALUES(&#39;IS0802&#39;,&#39; 信息系统08（2）班&#39;, &#39;信息学院&#39;,2008,43);\n\nINSERT INTO Student VALUES(&#39;0701001&#39;,&#39; 李小勇&#39;, &#39;男&#39;,&#39;1990-12-21&#39;,&#39;南昌&#39;,&#39;汉族&#39;,&#39;CS0701&#39;);\nINSERT INTO Student VALUES(&#39;0701008&#39;,&#39; 王红&#39;, &#39;男&#39;,&#39;1992-04-26&#39;,&#39;上海&#39;,&#39;汉族&#39;,&#39;CS0701&#39;);\nINSERT INTO Student VALUES(&#39;0701010&#39;,&#39; 李宏冰&#39;, &#39;女&#39;,&#39;1992-03-09&#39;,&#39;太原&#39;,&#39;蒙古族&#39;,&#39;AC0703&#39;);\nINSERT INTO Student VALUES(&#39;0703045&#39;,&#39; 王红&#39;, &#39;男&#39;,&#39;1992-04-26&#39;,&#39;北京&#39;,&#39;汉族&#39;,&#39;AC0703&#39;);\nINSERT INTO Student VALUES(&#39;0802002&#39;,&#39; 刘方晨&#39;, &#39;女&#39;,&#39;1990-11-11&#39;,&#39;南昌&#39;,&#39;傣族&#39;,&#39;IS0802&#39;);\nINSERT INTO Student VALUES(&#39;0802005&#39;,&#39; 王红敏&#39;, &#39;女&#39;,&#39;1990-10-01&#39;,&#39;上海&#39;,&#39;蒙古族&#39;,&#39;IS0802&#39;);\n\nINSERT INTO Course VALUES(&#39;AC001&#39;,&#39; 基础会计&#39;, 48,3,&#39;NULL&#39;);\nINSERT INTO Course VALUES(&#39;CN028&#39;,&#39; 大学语文&#39;, 48,3,&#39;NULL&#39;);\nINSERT INTO Course VALUES(&#39;CS012&#39;,&#39; 操作系统&#39;, 80,5,&#39;NULL&#39;);\nINSERT INTO Course VALUES(&#39;CS015&#39;,&#39; 数据库系统&#39;, 64,4,&#39;CS012&#39;);\n\nINSERT INTO Score VALUES(&#39;0701001&#39;,&#39; CN028&#39;, 07081,85);\nINSERT INTO Score VALUES(&#39;0701001&#39;,&#39; CS012&#39;, 07082,88);\nINSERT INTO Score VALUES(&#39;0701001&#39;,&#39; CS015&#39;, 08091,92);\nINSERT INTO Score VALUES(&#39;0701008&#39;,&#39; AC001&#39;, 07081,76);\nINSERT INTO Score VALUES(&#39;0701008&#39;,&#39; CN028&#39;, 07081,86);\nINSERT INTO Score VALUES(&#39;0701008&#39;,&#39; CS012&#39;, 07082,93);\nINSERT INTO Score VALUES(&#39;0701008&#39;,&#39; CN015&#39;, 08091,96);\n\nINSERT INTO Score VALUES(&#39;0701010&#39;,&#39; AC001&#39;, 07081,92);\nINSERT INTO Score VALUES(&#39;0701010&#39;,&#39; CN028&#39;, 07081,83);\nINSERT INTO Score VALUES(&#39;0701010&#39;,&#39; CS012&#39;, 07082,73);\nINSERT INTO Score VALUES(&#39;0701045&#39;,&#39; AC001&#39;, 07081,52);\nINSERT INTO Score VALUES(&#39;0701045&#39;,&#39; AC001&#39;, 08091,94);\nINSERT INTO Score VALUES(&#39;0701045&#39;,&#39; CN028&#39;, 07081,80);\nINSERT INTO Score VALUES(&#39;0701045&#39;,&#39; CS015&#39;, 08091,82);\nINSERT INTO Score VALUES(&#39;0802002&#39;,&#39; AC001&#39;, 08091,98);\nINSERT INTO Score VALUES(&#39;0802002&#39;,&#39; CN028&#39;, 08091,72);\nINSERT INTO Score VALUES(&#39;0802002&#39;,&#39; CS015&#39;, 09101,85);\nINSERT INTO Score VALUES(&#39;0802005&#39;,&#39; AC001&#39;, 09101,88);\nINSERT INTO Score VALUES(&#39;0802005&#39;,&#39; CS012&#39;, 08092,90);\nINSERT INTO Score VALUES(&#39;0802005&#39;,&#39; CS015&#39;, 09101,87);\nGO\n\nSELECT *from Student;\nSELECT *from Course;\nSELECT *from Class;\nSELECT *from Score;\n\n加主键的前提下创建表","slug":"数据库1","date":"2022-11-05T02:49:49.000Z","categories_index":"","tags_index":"数据库","author_index":"Algernon"},{"id":"2fd43f509a9af98ba4a5a837c57604de","title":"【区块链技术与应用】（五）","content":"引言这周恰逢期中，时间仓促，代码上有许多地方可以优化，但也只能留到之后的几次作业上了。阅读建议：参考和链码样例为写链码前用样例试手内容，与作业相关的内容是“资产管理”之后的代码。代码参考及学习资料在“参考”一栏中。\n参考\n\n\n\n\n\n\n\n\nhttps://blog.csdn.net/zekdot/article/details/120397660?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-120397660-blog-125920006.pc_relevant_3mothn_strategy_and_data_recovery&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=4\nhttps://blog.csdn.net/weixin_49422491/article/details/125380911\nhttps://blog.csdn.net/weixin_44676392/article/details/87938176\nhttps://blog.csdn.net/weixin_44676392/article/details/87938451\n&gt;\n\n\n\n\n\n\n\n\n\nhttps://blog.csdn.net/qq_41988893/article/details/119706443\nfabric提供了fabric-contract-api-go和fabric-chaincode-go两个包来编写链码， 这里以fabric-contract-api-go为例进行链码编写\n链码样例1.声明合约package main\n\nimport (\n    &quot;errors&quot;\n    &quot;fmt&quot;\n\n    &quot;github.com&#x2F;hyperledger&#x2F;fabric-contract-api-go&#x2F;contractapi&quot;\n)\n\ntype SimpleContract struct &#123;\n    contractapi.Contract\n&#125;\n2.编写合约函数规则：1、第一个参数必须是*contractapi.TransactionContext类型2、函数最多返回两个值，第二个值必须是error类型\n&#x2F;&#x2F; 添加数据\nfunc (sc *SimpleContract) Create(ctx contractapi.TransactionContextInterface, key string, value string) error &#123;\n    existing, err :&#x3D; ctx.GetStub().GetState(key)\n\n    if err !&#x3D; nil &#123;\n        return errors.New(&quot;Unable to interact with world state&quot;)\n    &#125;\n\n    if existing !&#x3D; nil &#123;\n        return fmt.Errorf(&quot;Cannot create world state pair with key %s. Already exists&quot;, key)\n    &#125;\n\t\n    err &#x3D; ctx.GetStub().PutState(key, []byte(value))\n\n    if err !&#x3D; nil &#123;\n        return errors.New(&quot;Unable to interact with world state&quot;)\n    &#125;\n\n    return nil\n&#125;\n\n&#x2F;&#x2F; 读取数据\nfunc (sc *SimpleContract) Read(ctx contractapi.TransactionContextInterface, key string) (string, error) &#123;\n    existing, err :&#x3D; ctx.GetStub().GetState(key)\n\n    if err !&#x3D; nil &#123;\n        return &quot;&quot;, errors.New(&quot;Unable to interact with world state&quot;)\n    &#125;\n\n    if existing &#x3D;&#x3D; nil &#123;\n        return &quot;&quot;, fmt.Errorf(&quot;Cannot read world state pair with key %s. Does not exist&quot;, key)\n    &#125;\n\n    return string(existing), nil\n&#125;\n3.创建并启动链码package main\n\nimport (\n    &quot;github.com&#x2F;hyperledger&#x2F;fabric-contract-api-go&#x2F;contractapi&quot;\n)\n\nfunc main() &#123;\n    simpleContract :&#x3D; new(SimpleContract)\n\n    cc, err :&#x3D; contractapi.NewChaincode(simpleContract)\n\n    if err !&#x3D; nil &#123;\n        panic(err.Error())\n    &#125;\n\n    if err :&#x3D; cc.Start(); err !&#x3D; nil &#123;\n        panic(err.Error())\n    &#125;\n&#125;\n完整合约代码：\npackage main\n\nimport (\n    &quot;errors&quot;\n    &quot;fmt&quot;\n\n    &quot;github.com&#x2F;hyperledger&#x2F;fabric-contract-api-go&#x2F;contractapi&quot;\n)\ntype User struct &#123;\n\n&#125;\ntype SimpleContract struct &#123;\n    contractapi.Contract\n&#125;\n\n\n&#x2F;&#x2F;用户定义Struct\n\n\n&#x2F;&#x2F; 添加数据\nfunc (sc *SimpleContract) Create(ctx contractapi.TransactionContextInterface, key string, value string) error &#123;\n    existing, err :&#x3D; ctx.GetStub().GetState(key)\n\n    if err !&#x3D; nil &#123;\n        return errors.New(&quot;Unable to interact with world state&quot;)\n    &#125;\n\n    if existing !&#x3D; nil &#123;\n        return fmt.Errorf(&quot;Cannot create world state pair with key %s. Already exists&quot;, key)\n    &#125;\n\t\n    err &#x3D; ctx.GetStub().PutState(key, []byte(value))\n\n    if err !&#x3D; nil &#123;\n        return errors.New(&quot;Unable to interact with world state&quot;)\n    &#125;\n\n    return nil\n&#125;\n\n&#x2F;&#x2F; 读取数据\nfunc (sc *SimpleContract) Read(ctx contractapi.TransactionContextInterface, key string) (string, error) &#123;\n    existing, err :&#x3D; ctx.GetStub().GetState(key)\n\n    if err !&#x3D; nil &#123;\n        return &quot;&quot;, errors.New(&quot;Unable to interact with world state&quot;)\n    &#125;\n\n    if existing &#x3D;&#x3D; nil &#123;\n        return &quot;&quot;, fmt.Errorf(&quot;Cannot read world state pair with key %s. Does not exist&quot;, key)\n    &#125;\n\n    return string(existing), nil\n&#125;\n\nfunc main() &#123;\n    simpleContract :&#x3D; new(SimpleContract)\n\n    cc, err :&#x3D; contractapi.NewChaincode(simpleContract)\n\n    if err !&#x3D; nil &#123;\n        panic(err.Error())\n    &#125;\n\n    if err :&#x3D; cc.Start(); err !&#x3D; nil &#123;\n        panic(err.Error())\n    &#125;\n&#125;\n一个简单的智能合约就编写完了。\n\n\n\n\n\n\n\n\n\n特别注意，这不是一个完整的链码程序，中间缺少了用户定义的struct.\ntest-network网络测试启动fabric网络\n进入fabric-sample的test-network目录\n$ cd fabric-samples&#x2F;test-network\n\n运行./network.sh up启动网络\n\n\nmagpie@Goserver:~&#x2F;fabric-samples01&#x2F;test-network$ .&#x2F;network.sh up\nStarting nodes with CLI timeout of &#39;5&#39; tries and CLI delay of &#39;3&#39; seconds and using database &#39;leveldb&#39; with crypto from &#39;cryptogen&#39;\nLOCAL_VERSION&#x3D;2.4.6\nDOCKER_IMAGE_VERSION&#x3D;2.4.6\n&#x2F;home&#x2F;magpie&#x2F;fabric-samples01&#x2F;test-network&#x2F;..&#x2F;bin&#x2F;cryptogen\nGenerating certificates using cryptogen tool\nCreating Org1 Identities\n+ cryptogen generate --config&#x3D;.&#x2F;organizations&#x2F;cryptogen&#x2F;crypto-config-org1.yaml --output&#x3D;organizations\norg1.example.com\n+ res&#x3D;0\nCreating Org2 Identities\n+ cryptogen generate --config&#x3D;.&#x2F;organizations&#x2F;cryptogen&#x2F;crypto-config-org2.yaml --output&#x3D;organizations\norg2.example.com\n+ res&#x3D;0\nCreating Orderer Org Identities\n+ cryptogen generate --config&#x3D;.&#x2F;organizations&#x2F;cryptogen&#x2F;crypto-config-orderer.yaml --output&#x3D;organizations\n+ res&#x3D;0\nGenerating CCP files for Org1 and Org2\n&#x2F;home&#x2F;magpie&#x2F;fabric-samples01&#x2F;test-network&#x2F;..&#x2F;bin&#x2F;configtxgen\nGenerating Orderer Genesis block\n+ configtxgen -profile TwoOrgsOrdererGenesis -channelID system-channel -outputBlock .&#x2F;system-genesis-block&#x2F;genesis.block\n2022-10-16 06:15:53.999 UTC [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration\n2022-10-16 06:15:54.026 UTC [common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 002 orderer type: etcdraft\n2022-10-16 06:15:54.026 UTC [common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 003 Orderer.EtcdRaft.Options unset, setting to tick_interval:&quot;500ms&quot; election_tick:10 heartbeat_tick:1 max_inflight_blocks:5 snapshot_interval_size:16777216 \n2022-10-16 06:15:54.026 UTC [common.tools.configtxgen.localconfig] Load -&gt; INFO 004 Loaded configuration: &#x2F;home&#x2F;magpie&#x2F;fabric-samples01&#x2F;test-network&#x2F;configtx&#x2F;configtx.yaml\n2022-10-16 06:15:54.028 UTC [common.tools.configtxgen] doOutputBlock -&gt; INFO 005 Generating genesis block\n2022-10-16 06:15:54.028 UTC [common.tools.configtxgen] doOutputBlock -&gt; INFO 006 Writing genesis block\n+ res&#x3D;0\n[+] Running 7&#x2F;7\n ⠿ Volume &quot;docker_orderer.example.com&quot;     Created                            0.0s\n ⠿ Volume &quot;docker_peer0.org1.example.com&quot;  Created                            0.0s\n ⠿ Volume &quot;docker_peer0.org2.example.com&quot;  Created                            0.0s\n ⠿ Container peer0.org1.example.com        Started                            3.4s\n ⠿ Container peer0.org2.example.com        Started                            1.3s\n ⠿ Container orderer.example.com           Started                            2.3s\n ⠿ Container cli                           Started                            4.1s\nCONTAINER ID   IMAGE       COMMAND      CREATED          STATUS                PORTS                NAMES\n70d6427003ae   hyperledger&#x2F;fabric-tools:latest  &quot;&#x2F;bin&#x2F;bash&quot;  4 seconds ago    Up Less than a second   cli\n0f2f91968493   hyperledger&#x2F;fabric-peer:latest      &quot;peer node start&quot;        4 seconds ago    Up 3 seconds                0.0.0.0:9051-&gt;9051&#x2F;tcp, :::9051-&gt;9051&#x2F;tcp, 7051&#x2F;tcp, 0.0.0.0:9445-&gt;9445&#x2F;tcp, :::9445-&gt;9445&#x2F;tcp   peer0.org2.example.com\n615cea63009c   hyperledger&#x2F;fabric-orderer:latest   &quot;orderer&quot;                4 seconds ago    Up 2 seconds                0.0.0.0:7050-&gt;7050&#x2F;tcp, :::7050-&gt;7050&#x2F;tcp, 0.0.0.0:9443-&gt;9443&#x2F;tcp, :::9443-&gt;9443&#x2F;tcp             orderer.example.com\n1db85f663965   hyperledger&#x2F;fabric-peer:latest      &quot;peer node start&quot;        4 seconds ago    Up 1 second                 0.0.0.0:7051-&gt;7051&#x2F;tcp, :::7051-&gt;7051&#x2F;tcp, 0.0.0.0:9444-&gt;9444&#x2F;tcp, :::9444-&gt;9444&#x2F;tcp             peer0.org1.example.com\nd10bd7ff864d   hyperledger&#x2F;explorer:latest         &quot;docker-entrypoint.s…&quot;   34 minutes ago   Exited (1) 33 minutes ago                                                                                                    explorer.mynetwork.com\n2ad7a1e8464e   hyperledger&#x2F;explorer-db:latest      &quot;docker-entrypoint.s…&quot;   34 minutes ago   Up 34 minutes (healthy)     5432&#x2F;tcp                                                                                         explorerdb.mynetwork.com\nefd328836573   portainer&#x2F;portainer-ce              &quot;&#x2F;portainer&quot;             3 days ago       Up About an hour            0.0.0.0:8000-&gt;8000&#x2F;tcp, :::8000-&gt;8000&#x2F;tcp, 0.0.0.0:9000-&gt;9000&#x2F;tcp, :::9000-&gt;9000&#x2F;tcp, 9443&#x2F;tcp   portainer\n最终出现以上输出日志则表示网络启动成功，每个加入Fabric网络的Node和User都需要隶属于某个组织，以上网络中包含了两个平行组织—peer0.org1.example.com和peer0.org2.example.com，它还包括一个作为ordering service维护网络的orderer.example.com`。\n\n创建channel上节已经在机器上运行了peer节点和orderer节点，现在可以使用network.sh为Org1和Org2之间创建channel。channel是特定网络成员之间的私有通道，只能被属于该通道的组织使用，并且对网络的其他成员是不可见的。每个channel都有一个单独的区块链账本，属于该通道的组织可以让其下peer加入该通道，以让peer能够存储channel上的帐本并验证账本上的交易。使用以下命令创建自定义通道testchannel：\n$ .&#x2F;network.sh createChannel -c testchannel\n\n部署chaincode部署链码前，建议到链码子目录下执行go mod tidy，检查链码调用的包存在。同时，可能需要sudo apt install jq。创建通道后，您可以开始使用智能合约与通道账本交互。智能合约包含管理区块链账本上资产的业务逻辑，由成员运行的应用程序网络可以在账本上调用智能合约创建，更改和转让这些资产。可以通过./network.sh deployCC命令部署智能合约，但本过程可能会出现很多问题。使用以下命令部署chaincode：\n$ .&#x2F;network.sh deployCC -c testchannel -ccn basic -ccp ..&#x2F;asset-transfer-basic&#x2F;chaincode-go -ccl go\n此命令执行后可能会出现错误：scripts/deployCC.sh: line 114: log.txt: Permission denied，很明显这是权限不足所致，加上sudo试试：\n$sudo .&#x2F;network.sh deployCC -c testchannel -ccn basic -ccp ..&#x2F;asset-transfer-basic&#x2F;chaincode-go -ccl go\nchaincodecode1package main\n \nimport (\n  &quot;encoding&#x2F;json&quot;\n  &quot;fmt&quot;\n  &quot;log&quot;\n \n  &quot;github.com&#x2F;hyperledger&#x2F;fabric-contract-api-go&#x2F;contractapi&quot;\n)\n \n&#x2F;&#x2F; SmartContract provides functions for managing an Asset\ntype SmartContract struct &#123;\n  contractapi.Contract\n&#125;\n \n&#x2F;&#x2F; Asset describes basic details of what makes up a simple asset\ntype Asset struct &#123;\n  ID             string &#96;json:&quot;ID&quot;&#96;\n  Color          string &#96;json:&quot;color&quot;&#96;\n  Size           int    &#96;json:&quot;size&quot;&#96;\n  Owner          string &#96;json:&quot;owner&quot;&#96;\n  AppraisedValue int    &#96;json:&quot;appraisedValue&quot;&#96;\n&#125;\n \n&#x2F;&#x2F; InitLedger adds a base set of assets to the ledger\nfunc (s *SmartContract) InitLedger(ctx contractapi.TransactionContextInterface) error &#123;\n  assets :&#x3D; []Asset&#123;\n    &#123;ID: &quot;asset1&quot;, Color: &quot;blue&quot;, Size: 5, Owner: &quot;cuteAlgernon&quot;, AppraisedValue: 300&#125;,\n    &#123;ID: &quot;asset2&quot;, Color: &quot;red&quot;, Size: 5, Owner: &quot;Biosheep&quot;, AppraisedValue: 1000&#125;,\n    &#123;ID: &quot;asset3&quot;, Color: &quot;green&quot;, Size: 10, Owner: &quot;Jin Soo&quot;, AppraisedValue: 500&#125;,\n    &#123;ID: &quot;asset4&quot;, Color: &quot;yellow&quot;, Size: 10, Owner: &quot;Max&quot;, AppraisedValue: 600&#125;,\n    &#123;ID: &quot;asset5&quot;, Color: &quot;black&quot;, Size: 15, Owner: &quot;Adriana&quot;, AppraisedValue: 700&#125;,\n    &#123;ID: &quot;asset6&quot;, Color: &quot;white&quot;, Size: 15, Owner: &quot;Michel&quot;, AppraisedValue: 800&#125;,\n  &#125;\n \n  for _, asset :&#x3D; range assets &#123;\n    assetJSON, err :&#x3D; json.Marshal(asset)\n    if err !&#x3D; nil &#123;\n      return err\n    &#125;\n \n    err &#x3D; ctx.GetStub().PutState(asset.ID, assetJSON)\n    if err !&#x3D; nil &#123;\n      return fmt.Errorf(&quot;failed to put to world state. %v&quot;, err)\n    &#125;\n  &#125;\n \n  return nil\n&#125;\n \n&#x2F;&#x2F; CreateAsset issues a new asset to the world state with given details.\nfunc (s *SmartContract) CreateAsset(ctx contractapi.TransactionContextInterface, id string, color string, size int, owner string, appraisedValue int) error &#123;\n  exists, err :&#x3D; s.AssetExists(ctx, id)\n  if err !&#x3D; nil &#123;\n    return err\n  &#125;\n  if exists &#123;\n    return fmt.Errorf(&quot;the asset %s already exists&quot;, id)\n  &#125;\n \n  asset :&#x3D; Asset&#123;\n    ID:             id,\n    Color:          color,\n    Size:           size,\n    Owner:          owner,\n    AppraisedValue: appraisedValue,\n  &#125;\n  assetJSON, err :&#x3D; json.Marshal(asset)\n  if err !&#x3D; nil &#123;\n    return err\n  &#125;\n \n  return ctx.GetStub().PutState(id, assetJSON)\n&#125;\n \n&#x2F;&#x2F; ReadAsset returns the asset stored in the world state with given id.\nfunc (s *SmartContract) ReadAsset(ctx contractapi.TransactionContextInterface, id string) (*Asset, error) &#123;\n  assetJSON, err :&#x3D; ctx.GetStub().GetState(id)\n  if err !&#x3D; nil &#123;\n    return nil, fmt.Errorf(&quot;failed to read from world state: %v&quot;, err)\n  &#125;\n  if assetJSON &#x3D;&#x3D; nil &#123;\n    return nil, fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n  &#125;\n \n  var asset Asset\n  err &#x3D; json.Unmarshal(assetJSON, &amp;asset)\n  if err !&#x3D; nil &#123;\n    return nil, err\n  &#125;\n \n  return &amp;asset, nil\n&#125;\n \n&#x2F;&#x2F; UpdateAsset updates an existing asset in the world state with provided parameters.\nfunc (s *SmartContract) UpdateAsset(ctx contractapi.TransactionContextInterface, id string, color string, size int, owner string, appraisedValue int) error &#123;\n  exists, err :&#x3D; s.AssetExists(ctx, id)\n  if err !&#x3D; nil &#123;\n    return err\n  &#125;\n  if !exists &#123;\n    return fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n  &#125;\n \n  &#x2F;&#x2F; overwriting original asset with new asset\n  asset :&#x3D; Asset&#123;\n    ID:             id,\n    Color:          color,\n    Size:           size,\n    Owner:          owner,\n    AppraisedValue: appraisedValue,\n  &#125;\n  assetJSON, err :&#x3D; json.Marshal(asset)\n  if err !&#x3D; nil &#123;\n    return err\n  &#125;\n \n  return ctx.GetStub().PutState(id, assetJSON)\n&#125;\n \n&#x2F;&#x2F; DeleteAsset deletes an given asset from the world state.\nfunc (s *SmartContract) DeleteAsset(ctx contractapi.TransactionContextInterface, id string) error &#123;\n  exists, err :&#x3D; s.AssetExists(ctx, id)\n  if err !&#x3D; nil &#123;\n    return err\n  &#125;\n  if !exists &#123;\n    return fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n  &#125;\n \n  return ctx.GetStub().DelState(id)\n&#125;\n \n&#x2F;&#x2F; AssetExists returns true when asset with given ID exists in world state\nfunc (s *SmartContract) AssetExists(ctx contractapi.TransactionContextInterface, id string) (bool, error) &#123;\n  assetJSON, err :&#x3D; ctx.GetStub().GetState(id)\n  if err !&#x3D; nil &#123;\n    return false, fmt.Errorf(&quot;failed to read from world state: %v&quot;, err)\n  &#125;\n \n  return assetJSON !&#x3D; nil, nil\n&#125;\n \n&#x2F;&#x2F; TransferAsset updates the owner field of asset with given id in world state.\nfunc (s *SmartContract) TransferAsset(ctx contractapi.TransactionContextInterface, id string, newOwner string) error &#123;\n  asset, err :&#x3D; s.ReadAsset(ctx, id)\n  if err !&#x3D; nil &#123;\n    return err\n  &#125;\n \n  asset.Owner &#x3D; newOwner\n  assetJSON, err :&#x3D; json.Marshal(asset)\n  if err !&#x3D; nil &#123;\n    return err\n  &#125;\n \n  return ctx.GetStub().PutState(id, assetJSON)\n&#125;\n \n&#x2F;&#x2F; GetAllAssets returns all assets found in world state\nfunc (s *SmartContract) GetAllAssets(ctx contractapi.TransactionContextInterface) ([]*Asset, error) &#123;\n  &#x2F;&#x2F; range query with empty string for startKey and endKey does an\n  &#x2F;&#x2F; open-ended query of all assets in the chaincode namespace.\n  resultsIterator, err :&#x3D; ctx.GetStub().GetStateByRange(&quot;&quot;, &quot;&quot;)\n  if err !&#x3D; nil &#123;\n    return nil, err\n  &#125;\n  defer resultsIterator.Close()\n \n  var assets []*Asset\n  for resultsIterator.HasNext() &#123;\n    queryResponse, err :&#x3D; resultsIterator.Next()\n    if err !&#x3D; nil &#123;\n      return nil, err\n    &#125;\n \n    var asset Asset\n    err &#x3D; json.Unmarshal(queryResponse.Value, &amp;asset)\n    if err !&#x3D; nil &#123;\n      return nil, err\n    &#125;\n    assets &#x3D; append(assets, &amp;asset)\n  &#125;\n \n  return assets, nil\n&#125;\n \nfunc main() &#123;\n  assetChaincode, err :&#x3D; contractapi.NewChaincode(&amp;SmartContract&#123;&#125;)\n  if err !&#x3D; nil &#123;\n    log.Panicf(&quot;Error creating asset-transfer-basic chaincode: %v&quot;, err)\n  &#125;\n \n  if err :&#x3D; assetChaincode.Start(); err !&#x3D; nil &#123;\n    log.Panicf(&quot;Error starting asset-transfer-basic chaincode: %v&quot;, err)\n  &#125;\n&#125;\ncode2-1资产管理package atcc\n&#x2F;&#x2F; 导入必要的依赖\nimport (\n  &quot;fmt&quot;\n  &quot;encoding&#x2F;json&quot;\n  &quot;github.com&#x2F;hyperledger&#x2F;fabric-contract-api-go&#x2F;contractapi&quot;\n)\n\ntype SmartContract struct &#123;\n  contractapi.Contract\n&#125;\n&#x2F;&#x2F; 定义资产的数据结构，并使用注解的方式来辅助序列化，marshal函数会使用字母序对key进行排序，这样可以\n&#x2F;&#x2F; 保证其序列化之后具有唯一性，即不会出现导出的json字符串中ID字段在Color字段前面这种情况，\n&#x2F;&#x2F; 这样做的主要原因是为了保证输入输出的唯一性，防止背书验证的时候失败。\ntype Asset struct &#123;\n  AppraisedValue int    &#96;json:&quot;AppraisedValue&quot;&#96;\n  Color          string &#96;json:&quot;Color&quot;&#96;\n  ID             string &#96;json:&quot;ID&quot;&#96;\n  Owner          string &#96;json:&quot;Owner&quot;&#96;\n  Size           int    &#96;json:&quot;Size&quot;&#96;\n&#125;\n&#x2F;&#x2F; 使用数据对链码进行初始化。\nfunc (s *SmartContract) InitLedger(ctx contractapi.TransactionContextInterface) error &#123;\n  assets :&#x3D; []Asset&#123;\n    &#123;ID: &quot;asset1&quot;, Color: &quot;blue&quot;, Size: 5, Owner: &quot;Tomoko&quot;, AppraisedValue: 300&#125;,\n    &#123;ID: &quot;asset2&quot;, Color: &quot;red&quot;, Size: 5, Owner: &quot;Brad&quot;, AppraisedValue: 400&#125;,\n    &#123;ID: &quot;asset3&quot;, Color: &quot;green&quot;, Size: 10, Owner: &quot;Jin Soo&quot;, AppraisedValue: 500&#125;,\n    &#123;ID: &quot;asset4&quot;, Color: &quot;yellow&quot;, Size: 10, Owner: &quot;Max&quot;, AppraisedValue: 600&#125;,\n    &#123;ID: &quot;asset5&quot;, Color: &quot;black&quot;, Size: 15, Owner: &quot;Adriana&quot;, AppraisedValue: 700&#125;,\n    &#123;ID: &quot;asset6&quot;, Color: &quot;white&quot;, Size: 15, Owner: &quot;Michel&quot;, AppraisedValue: 800&#125;,\n  &#125;\n  for _, asset :&#x3D; range assets &#123;\n    &#x2F;&#x2F; 序列化资产\n    assetJSON, err :&#x3D; json.Marshal(asset)\n    if err !&#x3D; nil &#123;\n        return err\n    &#125;\n    &#x2F;&#x2F; 按照id存储序列化后的资产\n    err &#x3D; ctx.GetStub().PutState(asset.ID, assetJSON)\n    if err !&#x3D; nil &#123;\n        return fmt.Errorf(&quot;failed to put to world state. %v&quot;, err)\n    &#125;\n  &#125;\n  return nil\n&#125;\n&#x2F;&#x2F; 通过传入参数来创建一个账本上不存在的资产，这里有在后面实现的方法AssetExists来检查是否存在某个key为id的资产。\nfunc (s *SmartContract) CreateAsset(ctx contractapi.TransactionContextInterface, id string, color string, size int, owner string, appraisedValue int) error &#123;\n  exists, err :&#x3D; s.AssetExists(ctx, id)\n  if err !&#x3D; nil &#123;\n    return err\n  &#125;\n  if exists &#123;\n    return fmt.Errorf(&quot;the asset %s already exists&quot;, id)\n  &#125;\n  asset :&#x3D; Asset&#123;\n    ID:             id,\n    Color:          color,\n    Size:           size,\n    Owner:          owner,\n    AppraisedValue: appraisedValue,\n  &#125;\n  assetJSON, err :&#x3D; json.Marshal(asset)\n  if err !&#x3D; nil &#123;\n    return err\n  &#125;\n  return ctx.GetStub().PutState(id, assetJSON)\n&#125;\n&#x2F;&#x2F; 从账本中读取资产，调用GetState来实现\nfunc (s *SmartContract) ReadAsset(ctx contractapi.TransactionContextInterface, id string) (*Asset, error) &#123;\n  assetJSON, err :&#x3D; ctx.GetStub().GetState(id)\n  if err !&#x3D; nil &#123;\n    return nil, fmt.Errorf(&quot;failed to read from world state: %v&quot;, err)\n  &#125;\n  if assetJSON &#x3D;&#x3D; nil &#123;\n    return nil, fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n  &#125;\n  var asset Asset\n  err &#x3D; json.Unmarshal(assetJSON, &amp;asset)\n  if err !&#x3D; nil &#123;\n    return nil, err\n  &#125;\n  return &amp;asset, nil\n&#125;\n&#x2F;&#x2F; 更新资产，这里实现逻辑是根据传入参数创建一个新的资产并序列化，然后覆盖原来的资产。\nfunc (s *SmartContract) UpdateAsset(ctx contractapi.TransactionContextInterface, id string, color string, size int, owner string, appraisedValue int) error &#123;\n  exists, err :&#x3D; s.AssetExists(ctx, id)\n  if err !&#x3D; nil &#123;\n    return err\n  &#125;\n  if !exists &#123;\n    return fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n  &#125;\n\n  &#x2F;&#x2F; overwriting original asset with new asset\n  asset :&#x3D; Asset&#123;\n    ID:             id,\n    Color:          color,\n    Size:           size,\n    Owner:          owner,\n    AppraisedValue: appraisedValue,\n  &#125;\n  assetJSON, err :&#x3D; json.Marshal(asset)\n  if err !&#x3D; nil &#123;\n    return err\n  &#125;\n  return ctx.GetStub().PutState(id, assetJSON)\n&#125;\n&#x2F;&#x2F; 删除资产，直接调用DelState函数来实现删除。\nfunc (s *SmartContract) DeleteAsset(ctx contractapi.TransactionContextInterface, id string) error &#123;\n  exists, err :&#x3D; s.AssetExists(ctx, id)\n  if err !&#x3D; nil &#123;\n    return err\n  &#125;\n  if !exists &#123;\n    return fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n  &#125;\n  return ctx.GetStub().DelState(id)\n&#125;\n&#x2F;&#x2F; 检查id对应的资产是否存在，判断能不能读取出value即可。\nfunc (s *SmartContract) AssetExists(ctx contractapi.TransactionContextInterface, id string) (bool, error) &#123;\n  assetJSON, err :&#x3D; ctx.GetStub().GetState(id)\n  if err !&#x3D; nil &#123;\n    return false, fmt.Errorf(&quot;failed to read from world state: %v&quot;, err)\n  &#125;\n\n  return assetJSON !&#x3D; nil, nil\n&#125;\n&#x2F;&#x2F; 资产转移，实质是修改资产结构体的owner字段。\nfunc (s *SmartContract) TransferAsset(ctx contractapi.TransactionContextInterface, id string, newOwner string) error &#123;\n  asset, err :&#x3D; s.ReadAsset(ctx, id)\n  if err !&#x3D; nil &#123;\n    return err\n  &#125;\n  asset.Owner &#x3D; newOwner\n  assetJSON, err :&#x3D; json.Marshal(asset)\n  if err !&#x3D; nil &#123;\n    return err\n  &#125;\n  return ctx.GetStub().PutState(id, assetJSON)\n&#125;\n&#x2F;&#x2F; 读取全部资产，调用GetStateByRange函数来获取账本上的全部记录。\nfunc (s *SmartContract) GetAllAssets(ctx contractapi.TransactionContextInterface) ([]*Asset, error) &#123;\n  &#x2F;&#x2F; range query with empty string for startKey and endKey does an\n  &#x2F;&#x2F; open-ended query of all assets in the chaincode namespace.\n  resultsIterator, err :&#x3D; ctx.GetStub().GetStateByRange(&quot;&quot;, &quot;&quot;)\n  if err !&#x3D; nil &#123;\n    return nil, err\n  &#125;\n  defer resultsIterator.Close()\n\n  var assets []*Asset\n  for resultsIterator.HasNext() &#123;\n    queryResponse, err :&#x3D; resultsIterator.Next()\n    if err !&#x3D; nil &#123;\n      return nil, err\n    &#125;\n\n    var asset Asset\n    err &#x3D; json.Unmarshal(queryResponse.Value, &amp;asset)\n    if err !&#x3D; nil &#123;\n      return nil, err\n    &#125;\n    assets &#x3D; append(assets, &amp;asset)\n  &#125;\n  return assets, nil\n&#125;\n\ncode2-2assetsManager.go\npackage main\nimport (\n\t&quot;log&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-contract-api-go&#x2F;contractapi&quot;\n\t&quot;main&#x2F;atcc&quot;\n)\n\nfunc main() &#123;\n\tassetChaincode, err :&#x3D; contractapi.NewChaincode(&amp;atcc.SmartContract&#123;&#125;)\n\tif err !&#x3D; nil &#123;\n\t\tlog.Panicf(&quot;Error creating atcc chaincode: %v&quot;, err)\n\t&#125;\n\n\tif err :&#x3D; assetChaincode.Start(); err !&#x3D; nil &#123;\n\t\tlog.Panicf(&quot;Error starting atcc chaincode: %v&quot;, err)\n\t&#125;\n&#125;\n\n构建链码\ngo mod tidy\ngo mod vendor\n\n\n使用chaincode初始化账本peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile &quot;$ORDERER_CA&quot; -C $CHANNEL_NAME -n $&#123;CC_NAME&#125; --peerAddresses localhost:7051 --tlsRootCertFiles organizations&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles organizations&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;peers&#x2F;peer0.org2.example.com&#x2F;tls&#x2F;ca.crt --isInit -c &#39;&#123;&quot;function&quot;:&quot;InitLedger&quot;,&quot;Args&quot;:[]&#125;&#39;\n获取当前资产peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile &quot;$ORDERER_CA&quot; -C $CHANNEL_NAME -n $&#123;CC_NAME&#125; --peerAddresses localhost:7051 --tlsRootCertFiles organizations&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles organizations&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;peers&#x2F;peer0.org2.example.com&#x2F;tls&#x2F;ca.crt -c &#39;&#123;&quot;function&quot;:&quot;GetAllAssets&quot;,&quot;Args&quot;:[]&#125;&#39;\n\n总结随着实验次数的增多，肉眼可见的是文件夹越来越混乱——比如这次的网络，需要在前几次实验中找到内容，而每次实验都涉及到文件创建、下载、删除，有时哪怕一次实验，都会鼓捣出很多奇奇怪怪的文件夹，有时会出现这样一种状况：我知道网络是通的，但不知道是那个文件能够跑通，毕竟，如果按照教程顺利过关，是对具体内容没有深刻印象的，直到需要再次使用的时候。\n链码编写（改写）难度不算特别大，但如果 涉及到网络上跑通，再加之账本的增删改查，如果找不到之前实验的基础内容，无异于再做一次。\n","slug":"区块链5","date":"2022-11-04T13:50:49.000Z","categories_index":"","tags_index":"区块链","author_index":"Algernon"},{"id":"cf9a9d5a0eee25995f5e4d33651f0d31","title":"python期中作业","content":"PYTHON程序设计期中作业@[toc]\n题目要求代码及截图请参考终版\n初版设计了计算出勤率、总成绩和平均分的代码\n#fo&#x3D;open(&quot;D:\\\\coder\\\\randomnumbers\\\\成绩表 - 副本.csv&quot;,&quot;r&quot;,encoding&#x3D;&quot;utf-8&quot;)\nfr&#x3D;open(&quot;D:\\\\coder\\\\randomnumbers\\\\成绩表 - 副本.csv&quot;,&quot;r&quot;,encoding&#x3D;&quot;utf-8&quot;)\nfw&#x3D;open(&quot;D:\\\\coder\\\\randomnumbers\\\\grade.csv&quot;,&quot;w&quot;)\nls&#x3D;[]\nlist&#x3D;[]\nfor line in fr:\n    line&#x3D;line.replace(&quot;\\n&quot;,&quot;&quot;)\n    ls.append(line.split(&quot;,&quot;))\n#print(ls)\ndef chuqingnum(a,b,c):\n    num&#x3D;(a+b+c)&#x2F;3\n    return num\ndef kaoqin(a,b,c):\n    grade&#x3D;10-(3-a-b-c)*3\n    return grade\n\ndef zuoye(a,b,c):\n    grade&#x3D;((a+b+c)&#x2F;3)*0.1\n    return grade\ndef final(a,b,c,d):\n    grade&#x3D;(10-(3-a)*3)*1+(b)*0.1+c*0.2+d*0.4\n    return grade\nnum,pingshi,qizhong,qimo&#x3D;0,0,0,0\nsum&#x3D;0\nfor i in range(len(ls)):\n    num&#x3D;0\n    pingshi&#x3D;0\n    for j in range(len(ls[i])):\n        if ls[i][j].replace(&quot;.&quot;,&quot;&quot;).isnumeric():\n            ls[i][j] &#x3D; eval(ls[i][j])\n            if j&#x3D;&#x3D;1 or j&#x3D;&#x3D;2 or j&#x3D;&#x3D;3:\n                num+&#x3D;ls[i][j]\n\n            elif j&#x3D;&#x3D;4 or j&#x3D;&#x3D;5 or j&#x3D;&#x3D;6:\n                pingshi+&#x3D;ls[i][j]\n\n            elif  j&#x3D;&#x3D;7:\n                qizhong&#x3D;ls[i][j]\n\n            elif j&#x3D;&#x3D;8:\n                qimo&#x3D;ls[i][j]\n\n    numrate&#x3D;(num&#x2F;3)*100\n    #print(qizhong)\n\n    chuqinglv&#x3D;&quot;&#123;:.2f&#125;%&quot;.format(numrate)\n    final1&#x3D;final(num,pingshi,qizhong,qimo)\n    sum+&#x3D;final1\n    final1 &#x3D; &quot;&#123;:.2f&#125;&quot;.format(final1)\n\n    list.append(chuqinglv)\n    list.append(final1)\nlist[0]&#x3D;&#39;出勤率&#39;\nlist[1]&#x3D;&#39;总成绩&#39;\nlist0&#x3D;[]\nlist1&#x3D;[]\nlist2&#x3D;[]\nfor i in range(len(ls)):\n    list0.append(ls[i][0])\n#print(list0)\nfor i in range(len(list)):\n    if i%2&#x3D;&#x3D;0:\n        list1.append(list[i])\n    else:\n        list2.append(list[i])\nli&#x3D;[[0]*3 for _ in range(len(list1))]\n#print(li)\n\n\nfor i in range(len(list1)):\n\n    li[i][0]&#x3D;(list0[i])\n    li[i][1]&#x3D;(list1[i])\n    li[i][2]&#x3D;(list2[i])\n\nli[-1][-2]&#x3D;&#39;平均分&#39;\nsum&#x3D;sum&#x2F;(len(list1))\nli[-1][-1]&#x3D;&quot;&#123;:.2f&#125;&quot;.format(sum)\nprint(li)\nfor row in li:\n    #print(row)\n    #fw.write(&quot;,&quot;.join(row)+&quot;\\n&quot;)\n    fw.write(&quot;,&quot;.join(&#39;%s&#39; %id for id in row) + &quot;\\n&quot;)\n\nfr.close()\nfw.close()\n\n\n\n\n\n\n\n\n\n\n\n[[‘姓名’, ‘出勤率’, ‘总成绩’], [‘闵跃龙’, ‘100.00%’, ‘82.60’], [‘卢蓓蓓’, ‘100.00%’, ‘78.40’], [‘荣榕’, ‘100.00%’, ‘81.00’], [‘洪晨’, ‘33.33%’, ‘82.40’], [‘胡佳慧’, ‘100.00%’, ‘90.50’], [‘陈亚文’, ‘100.00%’, ‘91.40’], [‘曾小敏’, ‘100.00%’, ‘80.60’], [‘王松岩’, ‘100.00%’, ‘88.60’], [‘曹淑玲’, ‘66.67%’, ‘85.90’], [‘涂光超’, ‘100.00%’, ‘77.00’], [‘吴佳宁’, ‘100.00%’, ‘79.10’], [‘陈俊荣’, ‘66.67%’, ‘79.60’], [‘余倩瑶’, ‘100.00%’, ‘90.10’], [‘卓佼霏’, ‘66.67%’, ‘84.30’], [‘陈彩月’, ‘100.00%’, ‘85.00’], [‘陈昌祺’, ‘100.00%’, ‘85.50’], [‘朱文静’, ‘66.67%’, ‘85.40’], [‘阳宇’, ‘100.00%’, ‘85.60’], [‘覃莹’, ‘100.00%’, ‘85.00’], [‘’, ‘平均分’, ‘78.48’]]\n\n第二版简化了部分函数，将功能集成到一个函数中。\nfr&#x3D;open(&quot;D:\\\\coder\\\\randomnumbers\\\\成绩表 - 副本.csv&quot;,&quot;r&quot;,encoding&#x3D;&quot;utf-8&quot;)\nfw&#x3D;open(&quot;D:\\\\coder\\\\randomnumbers\\\\grade.csv&quot;,&quot;w&quot;)\nls,list&#x3D;[],[]\n\nfor line in fr:\n    line&#x3D;line.replace(&quot;\\n&quot;,&quot;&quot;)\n    ls.append(line.split(&quot;,&quot;))\n\ndef final(a,b,c,d):\n    grade&#x3D;(10-(3-a)*3)*1+(b)*0.1+c*0.2+d*0.4\n    return grade\nnum,pingshi,qizhong,qimo,sum&#x3D;0,0,0,0,0\n\nfor i in range(len(ls)):\n    num&#x3D;0\n    pingshi&#x3D;0\n    for j in range(len(ls[i])):\n        if ls[i][j].replace(&quot;.&quot;,&quot;&quot;).isnumeric():\n            ls[i][j] &#x3D; eval(ls[i][j])\n            if j&#x3D;&#x3D;1 or j&#x3D;&#x3D;2 or j&#x3D;&#x3D;3:\n                num+&#x3D;ls[i][j]\n            elif j&#x3D;&#x3D;4 or j&#x3D;&#x3D;5 or j&#x3D;&#x3D;6:\n                pingshi+&#x3D;ls[i][j]\n            elif  j&#x3D;&#x3D;7:\n                qizhong&#x3D;ls[i][j]\n            elif j&#x3D;&#x3D;8:\n                qimo&#x3D;ls[i][j]\n    numrate&#x3D;(num&#x2F;3)*100\n    chuqinglv&#x3D;&quot;&#123;:.2f&#125;%&quot;.format(numrate)\n    final1&#x3D;final(num,pingshi,qizhong,qimo)\n    sum+&#x3D;final1\n    final1 &#x3D; &quot;&#123;:.2f&#125;&quot;.format(final1)\n    list.append(chuqinglv)\n    list.append(final1)\n\nlist[0]&#x3D;&#39;出勤率&#39;\nlist[1]&#x3D;&#39;总成绩&#39;\nlist0,list1,list2&#x3D;[],[],[]\nfor i in range(len(ls)):\n    list0.append(ls[i][0])\n\nfor i in range(len(list)):\n    if i%2&#x3D;&#x3D;0:\n        list1.append(list[i])\n    else:\n        list2.append(list[i])\nli&#x3D;[[0]*3 for _ in range(len(list1))]\n\nfor i in range(len(list1)):\n    li[i][0]&#x3D;(list0[i])\n    li[i][1]&#x3D;(list1[i])\n    li[i][2]&#x3D;(list2[i])\n\nli[-1][-2]&#x3D;&#39;平均分&#39;\nsum&#x3D;sum&#x2F;(len(list1))\nli[-1][-1]&#x3D;&quot;&#123;:.2f&#125;&quot;.format(sum)\nprint(li)\nfor row in li:\n    fw.write(&quot;,&quot;.join(&#39;%s&#39; %id for id in row) + &quot;\\n&quot;)\n\nfr.close()\nfw.close()\n\n\n第三版代码分为读入文件，定义函数和执行主程序三个部分，并增加了注释。\n#定义打开和写入文件的路径\nfr&#x3D;open(&quot;D:\\\\coder\\\\randomnumbers\\\\成绩表 - 副本.csv&quot;,&quot;r&quot;,encoding&#x3D;&quot;utf-8&quot;)\nfw&#x3D;open(&quot;D:\\\\coder\\\\randomnumbers\\\\grade.csv&quot;,&quot;w&quot;)\n\n#声明变量和定义函数\nls,list&#x3D;[],[]\nsum&#x3D;0\ndef trans(l):    #将csv读入，转化，返回列表形式\n    for line in l:\n        line &#x3D; line.replace(&quot;\\n&quot;, &quot;&quot;)\n        ls.append(line.split(&quot;,&quot;))\n    return ls\n\ndef final(a,b,c,d):   #计算总分的函数\n    grade&#x3D;(10-(3-a)*3)*1+(b)*0.1+c*0.2+d*0.4\n    return grade\n\ndef main(ls):  #主函数，输入为处理好的列表，输出为列表形式的出勤率和总分\n    qizhong,qimo,numerate&#x3D;0,0,0\n    global sum\n    for i in range(len(ls)):\n        num&#x3D;0\n        pingshi&#x3D;0\n        for j in range(len(ls[i])):\n            if ls[i][j].replace(&quot;.&quot;, &quot;&quot;).isnumeric():\n                ls[i][j] &#x3D; eval(ls[i][j])\n                if j &#x3D;&#x3D; 1 or j &#x3D;&#x3D; 2 or j &#x3D;&#x3D; 3:\n                    num +&#x3D; ls[i][j]\n                elif j &#x3D;&#x3D; 4 or j &#x3D;&#x3D; 5 or j &#x3D;&#x3D; 6:\n                    pingshi +&#x3D; ls[i][j]\n                elif j &#x3D;&#x3D; 7:\n                    qizhong &#x3D; ls[i][j]\n                elif j &#x3D;&#x3D; 8:\n                    qimo &#x3D; ls[i][j]\n        numrate &#x3D; (num &#x2F; 3) * 100\n        chuqinglv &#x3D; &quot;&#123;:.2f&#125;%&quot;.format(numrate)\n        final1 &#x3D; final(num, pingshi, qizhong, qimo)\n        sum +&#x3D; final1\n        final1 &#x3D; &quot;&#123;:.2f&#125;&quot;.format(final1)\n        list.append(chuqinglv)\n        list.append(final1)\n    sum &#x3D; sum &#x2F; (len(list) &#x2F; 2)\n    return list\n\ndef shuru(list):   #将个人姓名和汉字部分加入，计算班级平均分，形成能够被csv文件读写的列表形式\n    list[0] &#x3D; &#39;出勤率&#39;\n    list[1] &#x3D; &#39;总成绩&#39;\n    list0, list1, list2 &#x3D; [], [], []\n    for i in range(len(ls)):\n        list0.append(ls[i][0])\n    for i in range(len(list)):\n        if i % 2 &#x3D;&#x3D; 0:\n            list1.append(list[i])\n        else:\n            list2.append(list[i])\n    li &#x3D; [[0] * 3 for _ in range(len(list1))]\n    for i in range(len(list1)):\n        li[i][0] &#x3D; (list0[i])\n        li[i][1] &#x3D; (list1[i])\n        li[i][2] &#x3D; (list2[i])\n    li[-1][-2]&#x3D;&#39;平均分&#39;\n    li[-1][-1]&#x3D;&quot;&#123;:.2f&#125;&quot;.format(sum)\n    return li\n#主程序\ntrans(fr)\nlist&#x3D;main(ls)\n\nli&#x3D;shuru(list)\nprint(li) #检查输出内容\nfor row in li: #写入csv文件\n    fw.write(&quot;,&quot;.join(&#39;%s&#39; %id for id in row) + &quot;\\n&quot;)\nfr.close()\nfw.close()\n\n\n\n\n\n\n\n\n\n\n\n[[‘姓名’, ‘出勤率’, ‘总成绩’], [‘闵跃龙’, ‘100.00%’, ‘82.60’], [‘卢蓓蓓’, ‘100.00%’, ‘78.40’], [‘荣榕’, ‘100.00%’, ‘81.00’], [‘洪晨’, ‘33.33%’, ‘82.40’], [‘胡佳慧’, ‘100.00%’, ‘90.50’], [‘陈亚文’, ‘100.00%’, ‘91.40’], [‘曾小敏’, ‘100.00%’, ‘80.60’], [‘王松岩’, ‘100.00%’, ‘88.60’], [‘曹淑玲’, ‘66.67%’, ‘85.90’], [‘涂光超’, ‘100.00%’, ‘77.00’], [‘吴佳宁’, ‘100.00%’, ‘79.10’], [‘陈俊荣’, ‘66.67%’, ‘79.60’], [‘余倩瑶’, ‘100.00%’, ‘90.10’], [‘卓佼霏’, ‘66.67%’, ‘84.30’], [‘陈彩月’, ‘100.00%’, ‘85.00’], [‘陈昌祺’, ‘100.00%’, ‘85.50’], [‘朱文静’, ‘66.67%’, ‘85.40’], [‘阳宇’, ‘100.00%’, ‘85.60’], [‘覃莹’, ‘100.00%’, ‘85.00’], [‘’, ‘平均分’, ‘78.48’]]\n\n第四版将所得数据写入初始表格。\n#定义打开和写入文件的路径\nfr&#x3D;open(&quot;D:\\\\coder\\\\randomnumbers\\\\成绩表 - 副本.csv&quot;,&quot;r&quot;,encoding&#x3D;&quot;utf-8&quot;)\nfw&#x3D;open(&quot;D:\\\\coder\\\\randomnumbers\\\\grade.csv&quot;,&quot;w&quot;)\n\n#声明变量和定义函数\nls,list&#x3D;[],[]\nsum&#x3D;0\ndef trans(l):    #将csv读入，转化，返回列表形式\n    for line in l:\n        line &#x3D; line.replace(&quot;\\n&quot;, &quot;&quot;)\n        ls.append(line.split(&quot;,&quot;))\n    return ls\n\ndef final(a,b,c,d):   #计算总分的函数\n    grade&#x3D;(10-(3-a)*3)*1+(b)*0.1+c*0.2+d*0.4\n    return grade\n\ndef main(ls):  #主函数，输入为处理好的列表，输出为列表形式的出勤率和总分\n    qizhong,qimo,numerate&#x3D;0,0,0\n    global sum\n    for i in range(len(ls)):\n        num&#x3D;0\n        pingshi&#x3D;0\n        for j in range(len(ls[i])):\n            if ls[i][j].replace(&quot;.&quot;, &quot;&quot;).isnumeric(): #检查是否为数字\n                ls[i][j] &#x3D; eval(ls[i][j])\n                if j &#x3D;&#x3D; 1 or j &#x3D;&#x3D; 2 or j &#x3D;&#x3D; 3:\n                    num +&#x3D; ls[i][j]\n                elif j &#x3D;&#x3D; 4 or j &#x3D;&#x3D; 5 or j &#x3D;&#x3D; 6:\n                    pingshi +&#x3D; ls[i][j]\n                elif j &#x3D;&#x3D; 7:\n                    qizhong &#x3D; ls[i][j]\n                elif j &#x3D;&#x3D; 8:\n                    qimo &#x3D; ls[i][j]\n        numrate &#x3D; (num &#x2F; 3) * 100\n        chuqinglv &#x3D; &quot;&#123;:.2f&#125;%&quot;.format(numrate)\n        final1 &#x3D; final(num, pingshi, qizhong, qimo)\n        sum +&#x3D; final1\n        final1 &#x3D; &quot;&#123;:.2f&#125;&quot;.format(final1)\n        list.append(chuqinglv)\n        list.append(final1)\n    sum &#x3D; sum &#x2F; (len(list) &#x2F; 2)\n    return list\n\ndef shuru(list,ls):   #将个人姓名和汉字部分加入，计算班级平均分，形成能够被csv文件读写的列表形式\n    list[0] &#x3D; &#39;出勤率&#39;\n    list[1] &#x3D; &#39;总成绩&#39;\n    list1, list2 &#x3D; [], []\n    for i in range(len(list)):\n        if i % 2 &#x3D;&#x3D; 0:\n            list1.append(list[i])\n        else:\n            list2.append(list[i])\n    for i in range(len(list1)-1):\n        ls[i].append(list1[i])\n        ls[i].append(list2[i])\n    ls[0].append(&#39;总成绩平均分&#39;)\n    grades&#x3D;&quot;&#123;:.2f&#125;&quot;.format(sum)\n    ls[1].append(grades)\n    return ls\n\n#主程序\n\nls&#x3D;trans(fr)\nlist&#x3D;main(ls)\nli&#x3D;shuru(list,ls)\nprint(li) #检查输出内容\nfor row in li: #写入csv文件\n    fw.write(&quot;,&quot;.join(&#39;%s&#39; %id for id in row) + &quot;\\n&quot;)\nfr.close()\nfw.close()\n\n\n\n\n\n\n\n\n\n\n\n[[‘姓名’, ‘考勤1’, ‘考勤2’, ‘考勤3’, ‘作业1’, ‘作业2’, ‘作业3’, ‘期中成绩’, ‘期末成绩’, ‘出勤率’, ‘总成绩’, ‘总成绩平均分’], [‘闵跃龙’, 1, 1, 1, 90, 80, 80, 78, 80, ‘100.00%’, ‘82.60’, ‘78.48’], [‘卢蓓蓓’, 1, 1, 1, 80, 72, 80, 82, 72, ‘100.00%’, ‘78.40’], [‘荣榕’, 1, 1, 1, 85, 75, 80, 85, 75, ‘100.00%’, ‘81.00’], [‘洪晨’, 1, 0, 0, 95, 85, 100, 82, 85, ‘33.33%’, ‘82.40’], [‘胡佳慧’, 1, 1, 1, 95, 88, 90, 90, 88, ‘100.00%’, ‘90.50’], [‘陈亚文’, 1, 1, 1, 100, 92, 90, 82, 92, ‘100.00%’, ‘91.40’], [‘曾小敏’, 1, 1, 1, 95, 75, 80, 78, 75, ‘100.00%’, ‘80.60’], [‘王松岩’, 1, 1, 1, 75, 92, 75, 88, 92, ‘100.00%’, ‘88.60’], [‘曹淑玲’, 1, 0, 1, 85, 88, 80, 92, 88, ‘66.67%’, ‘85.90’], [‘涂光超’, 1, 1, 1, 90, 72, 90, 65, 72, ‘100.00%’, ‘77.00’], [‘吴佳宁’, 1, 1, 1, 85, 72, 90, 78, 72, ‘100.00%’, ‘79.10’], [‘陈俊荣’, 0, 1, 1, 95, 75, 80, 88, 75, ‘66.67%’, ‘79.60’], [‘余倩瑶’, 1, 1, 1, 85, 90, 80, 93, 90, ‘100.00%’, ‘90.10’], [‘卓佼霏’, 0, 1, 1, 90, 85, 90, 84, 85, ‘66.67%’, ‘84.30’], [‘陈彩月’, 1, 1, 1, 90, 80, 90, 85, 80, ‘100.00%’, ‘85.00’], [‘陈昌祺’, 1, 1, 1, 90, 80, 75, 95, 80, ‘100.00%’, ‘85.50’], [‘朱文静’, 1, 1, 0, 90, 90, 80, 82, 90, ‘66.67%’, ‘85.40’], [‘阳宇’, 1, 1, 1, 90, 82, 80, 88, 82, ‘100.00%’, ‘85.60’], [‘覃莹’, 1, 1, 1, 100, 80, 90, 80, 80, ‘100.00%’, ‘85.00’], [‘’]]\n\n终版在个人出勤率的基础上，添加了班级出勤率。\n#定义打开和写入文件的路径\nfr&#x3D;open(&quot;D:\\\\coder\\\\randomnumbers\\\\成绩表 - 副本.csv&quot;,&quot;r&quot;,encoding&#x3D;&quot;utf-8&quot;)\nfw&#x3D;open(&quot;D:\\\\coder\\\\randomnumbers\\\\grade.csv&quot;,&quot;w&quot;)\n\n#声明变量和定义函数\nls,list&#x3D;[],[]\nsum,banji&#x3D;0,0\ndef trans(l):    #将csv读入，转化，返回列表形式\n    for line in l:\n        line &#x3D; line.replace(&quot;\\n&quot;, &quot;&quot;)\n        ls.append(line.split(&quot;,&quot;))\n    return ls\n\ndef final(a,b,c,d):   #计算总分的函数\n    grade&#x3D;(10-(3-a)*3)*1+(b)*0.1+c*0.2+d*0.4\n    return grade\n\ndef main(ls):  #主函数，输入为处理好的列表，输出为列表形式的出勤率和总分\n    qizhong,qimo,numerate&#x3D;0,0,0\n    global sum,banji\n    for i in range(len(ls)):\n        num&#x3D;0\n        pingshi&#x3D;0\n        for j in range(len(ls[i])):\n            if ls[i][j].replace(&quot;.&quot;, &quot;&quot;).isnumeric(): #检查是否为数字\n                ls[i][j] &#x3D; eval(ls[i][j])\n                if j &#x3D;&#x3D; 1 or j &#x3D;&#x3D; 2 or j &#x3D;&#x3D; 3:\n                    num +&#x3D; ls[i][j]\n                elif j &#x3D;&#x3D; 4 or j &#x3D;&#x3D; 5 or j &#x3D;&#x3D; 6:\n                    pingshi +&#x3D; ls[i][j]\n                elif j &#x3D;&#x3D; 7:\n                    qizhong &#x3D; ls[i][j]\n                elif j &#x3D;&#x3D; 8:\n                    qimo &#x3D; ls[i][j]\n        banji+&#x3D;num\n        numrate &#x3D; (num &#x2F; 3) * 100\n        chuqinglv &#x3D; &quot;&#123;:.2f&#125;%&quot;.format(numrate)\n        final1 &#x3D; final(num, pingshi, qizhong, qimo)\n        sum +&#x3D; final1\n        final1 &#x3D; &quot;&#123;:.2f&#125;&quot;.format(final1)\n        list.append(chuqinglv)\n        list.append(final1)\n    sum &#x3D; sum &#x2F; (len(list) &#x2F; 2)\n    banji&#x3D;banji&#x2F;(19*3)\n    return list\n\ndef shuru(list,ls):   #将个人姓名和汉字部分加入，计算班级平均分，形成能够被csv文件读写的列表形式\n    list[0] &#x3D; &#39;出勤率&#39;\n    list[1] &#x3D; &#39;总成绩&#39;\n    list1, list2 &#x3D; [], []\n    for i in range(len(list)):\n        if i % 2 &#x3D;&#x3D; 0:\n            list1.append(list[i])\n        else:\n            list2.append(list[i])\n    for i in range(len(list1)-1):\n        ls[i].append(list1[i])\n        ls[i].append(list2[i])\n    ls[0].append(&#39;总成绩平均分&#39;)\n    grades&#x3D;&quot;&#123;:.2f&#125;&quot;.format(sum)\n    ls[0].append(&#39;班级出勤率&#39;)\n    chuqinglv&#x3D;&quot;&#123;:.2f&#125;&quot;.format(banji)\n    ls[1].append(grades)\n    ls[1].append(chuqinglv)\n    return ls\n\n#主程序\n\nls&#x3D;trans(fr)   #读入数据\nlist&#x3D;main(ls)   #处理数据\nli&#x3D;shuru(list,ls)    #转化成输出数据\nprint(li) #检查输出内容\nfor row in li: #写入csv文件\n    fw.write(&quot;,&quot;.join(&#39;%s&#39; %id for id in row) + &quot;\\n&quot;)\nfr.close()\nfw.close()\n\n\n\n","slug":"python期中作业","date":"2022-11-03T15:15:49.000Z","categories_index":"","tags_index":"信管","author_index":"Algernon"},{"id":"c4d0eb90791df525d4565abe42524ee7","title":"【区块链技术与应用】（四）","content":"视频8\n\n\n\n\n\n\n\n\nhttps://pkg.go.dev/github.com/hyperledger/fabric-chaincode-go/shim#section-sourcefiles\n简单资产链码我们的应用程序是一个基本的示例链码，用来在账本上创建资产（键-值对）。\n选择一个位置存放代码如果你没有写过 Go 的程序，你可能需要确认一下你是否安装了 Go 以及你的系统是否配置正确。我们假设你用的是支持模块的版本。\n现在你需要为你的链码应用程序创建一个目录。\n简单起见，我们使用如下命令：\nmkdir sacc &amp;&amp; cd sacc\n现在，我们创建一个用于编写代码的源文件：\ngo mod init sacc\ntouch sacc.go\n内务首先，我们从内务开始。每一个链码都要实现 Chaincode 接口 中的 Init 和 Invoke 方法。所以，我们先使用 Go import 语句来导入链码必要的依赖。我们将导入链码 shim 包和 peer protobuf 包 。然后，我们加入一个 SimpleAsset 结构体来作为 Chaincode shim 方法的接收者。\npackage main\n\nimport (\n    &quot;fmt&quot;\n\n    &quot;github.com&#x2F;hyperledger&#x2F;fabric-chaincode-go&#x2F;shim&quot;\n    &quot;github.com&#x2F;hyperledger&#x2F;fabric-protos-go&#x2F;peer&quot;\n)\n\n&#x2F;&#x2F; SimpleAsset implements a simple chaincode to manage an asset\ntype SimpleAsset struct &#123;\n&#125;\n初始化链码然后，我们将实现 Init 方法。\n&#x2F;&#x2F; Init is called during chaincode instantiation to initialize any data.\nfunc (t *SimpleAsset) Init(stub shim.ChaincodeStubInterface) peer.Response &#123;\n\n&#125;\n注解\n注意，链码升级的时候也要调用这个方法。当写一个用来升级已存在的链码的时候，请确保合理更改 Init 方法。特别地，当升级时没有“迁移”或者没东西需要初始化时，可以提供一个空的 Init 方法。\n接下来，我们将使用 ChaincodeStubInterface.GetStringArgs 方法获取 Init 调用的参数，并且检查其合法性。在我们的用例中，我们希望得到一个键-值对。\n\n\n\n\n\n\n\n\n\n&#x2F;&#x2F; Init is called during chaincode instantiation to initialize any\n&#x2F;&#x2F; data. Note that chaincode upgrade also calls this function to reset\n&#x2F;&#x2F; or to migrate data, so be careful to avoid a scenario where you\n&#x2F;&#x2F; inadvertently clobber your ledger&#39;s data!\nfunc (t *SimpleAsset) Init(stub shim.ChaincodeStubInterface) peer.Response &#123;\n&#x2F;&#x2F; Get the args from the transaction proposal\nargs :&#x3D; stub.GetStringArgs()\nif len(args) !&#x3D; 2 &#123;\n return shim.Error(&quot;Incorrect arguments. Expecting a key and a value&quot;)\n&#125;\n&#125;\n\n接下来，我们已经确定了调用是合法的，我们将把初始状态存入账本中。我们将调用 ChaincodeStubInterface.PutState 并将键和值作为参数传递给它。假设一切正常，将返回一个 peer.Response 对象，表明初始化成功。\n&#x2F;&#x2F; Init is called during chaincode instantiation to initialize any\n&#x2F;&#x2F; data. Note that chaincode upgrade also calls this function to reset\n&#x2F;&#x2F; or to migrate data, so be careful to avoid a scenario where you\n&#x2F;&#x2F; inadvertently clobber your ledger&#39;s data!\nfunc (t *SimpleAsset) Init(stub shim.ChaincodeStubInterface) peer.Response &#123;\n  &#x2F;&#x2F; Get the args from the transaction proposal\n  args :&#x3D; stub.GetStringArgs()\n  if len(args) !&#x3D; 2 &#123;\n    return shim.Error(&quot;Incorrect arguments. Expecting a key and a value&quot;)\n  &#125;\n\n  &#x2F;&#x2F; Set up any variables or assets here by calling stub.PutState()\n\n  &#x2F;&#x2F; We store the key and the value on the ledger\n  err :&#x3D; stub.PutState(args[0], []byte(args[1]))\n  if err !&#x3D; nil &#123;\n    return shim.Error(fmt.Sprintf(&quot;Failed to create asset: %s&quot;, args[0]))\n  &#125;\n  return shim.Success(nil)\n&#125;\n调用链码首先，我们增加一个 Invoke 函数的签名。\n&#x2F;&#x2F; Invoke is called per transaction on the chaincode. Each transaction is\n&#x2F;&#x2F; either a &#39;get&#39; or a &#39;set&#39; on the asset created by Init function. The &#39;set&#39;\n&#x2F;&#x2F; method may create a new asset by specifying a new key-value pair.\nfunc (t *SimpleAsset) Invoke(stub shim.ChaincodeStubInterface) peer.Response &#123;\n\n&#125;\n就像上边的 Init 函数一样，我们需要从 ChaincodeStubInterface 中解析参数。Invoke 函数的参数是将要调用的链码应用程序的函数名。在我们的用例中，我们的应用程序将有两个方法： set 和 get ，用来设置或者获取资产当前的状态。我们先调用 ChaincodeStubInterface.GetFunctionAndParameters 来为链码应用程序的方法解析方法名和参数。\n&#x2F;&#x2F; Invoke is called per transaction on the chaincode. Each transaction is\n&#x2F;&#x2F; either a &#39;get&#39; or a &#39;set&#39; on the asset created by Init function. The Set\n&#x2F;&#x2F; method may create a new asset by specifying a new key-value pair.\nfunc (t *SimpleAsset) Invoke(stub shim.ChaincodeStubInterface) peer.Response &#123;\n    &#x2F;&#x2F; Extract the function and args from the transaction proposal\n    fn, args :&#x3D; stub.GetFunctionAndParameters()\n\n&#125;\n然后，我们将验证函数名是否为 set 或者 get ，并执行链码应用程序的方法，通过 shim.Success 或 shim.Error 返回一个适当的响应，这个响应将被序列化为 gRPC protobuf 消息。\n&#x2F;&#x2F; Invoke is called per transaction on the chaincode. Each transaction is\n&#x2F;&#x2F; either a &#39;get&#39; or a &#39;set&#39; on the asset created by Init function. The Set\n&#x2F;&#x2F; method may create a new asset by specifying a new key-value pair.\nfunc (t *SimpleAsset) Invoke(stub shim.ChaincodeStubInterface) peer.Response &#123;\n    &#x2F;&#x2F; Extract the function and args from the transaction proposal\n    fn, args :&#x3D; stub.GetFunctionAndParameters()\n\n    var result string\n    var err error\n    if fn &#x3D;&#x3D; &quot;set&quot; &#123;\n            result, err &#x3D; set(stub, args)\n    &#125; else &#123;\n            result, err &#x3D; get(stub, args)\n    &#125;\n    if err !&#x3D; nil &#123;\n            return shim.Error(err.Error())\n    &#125;\n\n    &#x2F;&#x2F; Return the result as success payload\n    return shim.Success([]byte(result))\n&#125;\n实现链码应用程序就像我们说的，我们的链码应用程序实现了两个功能，它们可以通过 Invoke 方法调用。我们现在来实现这些方法。注意我们之前提到的，要访问账本状态，我们需要使用链码 shim API 中的 ChaincodeStubInterface.PutState 和 ChaincodeStubInterface.GetState 方法。\n&#x2F;&#x2F; Set stores the asset (both key and value) on the ledger. If the key exists,\n&#x2F;&#x2F; it will override the value with the new one\nfunc set(stub shim.ChaincodeStubInterface, args []string) (string, error) &#123;\n    if len(args) !&#x3D; 2 &#123;\n            return &quot;&quot;, fmt.Errorf(&quot;Incorrect arguments. Expecting a key and a value&quot;)\n    &#125;\n\n    err :&#x3D; stub.PutState(args[0], []byte(args[1]))\n    if err !&#x3D; nil &#123;\n            return &quot;&quot;, fmt.Errorf(&quot;Failed to set asset: %s&quot;, args[0])\n    &#125;\n    return args[1], nil\n&#125;\n\n&#x2F;&#x2F; Get returns the value of the specified asset key\nfunc get(stub shim.ChaincodeStubInterface, args []string) (string, error) &#123;\n    if len(args) !&#x3D; 1 &#123;\n            return &quot;&quot;, fmt.Errorf(&quot;Incorrect arguments. Expecting a key&quot;)\n    &#125;\n\n    value, err :&#x3D; stub.GetState(args[0])\n    if err !&#x3D; nil &#123;\n            return &quot;&quot;, fmt.Errorf(&quot;Failed to get asset: %s with error: %s&quot;, args[0], err)\n    &#125;\n    if value &#x3D;&#x3D; nil &#123;\n            return &quot;&quot;, fmt.Errorf(&quot;Asset not found: %s&quot;, args[0])\n    &#125;\n    return string(value), nil\n&#125;\n把它们组合在一起最后，我们增加一个 main 方法，它将调用 shim.Start 方法。下边是我们链码程序的完整源码。\npackage main\n\nimport (\n    &quot;fmt&quot;\n\n    &quot;github.com&#x2F;hyperledger&#x2F;fabric-chaincode-go&#x2F;shim&quot;\n    &quot;github.com&#x2F;hyperledger&#x2F;fabric-protos-go&#x2F;peer&quot;\n)\n\n&#x2F;&#x2F; SimpleAsset implements a simple chaincode to manage an asset\ntype SimpleAsset struct &#123;\n&#125;\n\n&#x2F;&#x2F; Init is called during chaincode instantiation to initialize any\n&#x2F;&#x2F; data. Note that chaincode upgrade also calls this function to reset\n&#x2F;&#x2F; or to migrate data.\nfunc (t *SimpleAsset) Init(stub shim.ChaincodeStubInterface) peer.Response &#123;\n    &#x2F;&#x2F; Get the args from the transaction proposal\n    args :&#x3D; stub.GetStringArgs()\n    if len(args) !&#x3D; 2 &#123;\n            return shim.Error(&quot;Incorrect arguments. Expecting a key and a value&quot;)\n    &#125;\n\n    &#x2F;&#x2F; Set up any variables or assets here by calling stub.PutState()\n\n    &#x2F;&#x2F; We store the key and the value on the ledger\n    err :&#x3D; stub.PutState(args[0], []byte(args[1]))\n    if err !&#x3D; nil &#123;\n            return shim.Error(fmt.Sprintf(&quot;Failed to create asset: %s&quot;, args[0]))\n    &#125;\n    return shim.Success(nil)\n&#125;\n\n&#x2F;&#x2F; Invoke is called per transaction on the chaincode. Each transaction is\n&#x2F;&#x2F; either a &#39;get&#39; or a &#39;set&#39; on the asset created by Init function. The Set\n&#x2F;&#x2F; method may create a new asset by specifying a new key-value pair.\nfunc (t *SimpleAsset) Invoke(stub shim.ChaincodeStubInterface) peer.Response &#123;\n    &#x2F;&#x2F; Extract the function and args from the transaction proposal\n    fn, args :&#x3D; stub.GetFunctionAndParameters()\n\n    var result string\n    var err error\n    if fn &#x3D;&#x3D; &quot;set&quot; &#123;\n            result, err &#x3D; set(stub, args)\n    &#125; else &#123; &#x2F;&#x2F; assume &#39;get&#39; even if fn is nil\n            result, err &#x3D; get(stub, args)\n    &#125;\n    if err !&#x3D; nil &#123;\n            return shim.Error(err.Error())\n    &#125;\n\n    &#x2F;&#x2F; Return the result as success payload\n    return shim.Success([]byte(result))\n&#125;\n\n&#x2F;&#x2F; Set stores the asset (both key and value) on the ledger. If the key exists,\n&#x2F;&#x2F; it will override the value with the new one\nfunc set(stub shim.ChaincodeStubInterface, args []string) (string, error) &#123;\n    if len(args) !&#x3D; 2 &#123;\n            return &quot;&quot;, fmt.Errorf(&quot;Incorrect arguments. Expecting a key and a value&quot;)\n    &#125;\n\n    err :&#x3D; stub.PutState(args[0], []byte(args[1]))\n    if err !&#x3D; nil &#123;\n            return &quot;&quot;, fmt.Errorf(&quot;Failed to set asset: %s&quot;, args[0])\n    &#125;\n    return args[1], nil\n&#125;\n\n&#x2F;&#x2F; Get returns the value of the specified asset key\nfunc get(stub shim.ChaincodeStubInterface, args []string) (string, error) &#123;\n    if len(args) !&#x3D; 1 &#123;\n            return &quot;&quot;, fmt.Errorf(&quot;Incorrect arguments. Expecting a key&quot;)\n    &#125;\n\n    value, err :&#x3D; stub.GetState(args[0])\n    if err !&#x3D; nil &#123;\n            return &quot;&quot;, fmt.Errorf(&quot;Failed to get asset: %s with error: %s&quot;, args[0], err)\n    &#125;\n    if value &#x3D;&#x3D; nil &#123;\n            return &quot;&quot;, fmt.Errorf(&quot;Asset not found: %s&quot;, args[0])\n    &#125;\n    return string(value), nil\n&#125;\n\n&#x2F;&#x2F; main function starts up the chaincode in the container during instantiate\nfunc main() &#123;\n    if err :&#x3D; shim.Start(new(SimpleAsset)); err !&#x3D; nil &#123;\n            fmt.Printf(&quot;Error starting SimpleAsset chaincode: %s&quot;, err)\n    &#125;\n&#125;\n\n链码访问控制链码可以通过调用 GetCreator() 方法来使用客户端（提交者）证书进行访问控制决策。另外，Go shim 提供了扩展 API ，用于从提交者的证书中提取客户端标识用于访问控制决策，该证书可以是客户端身份本身，或者组织身份，或客户端身份属性。\n例如，一个以键-值对表示的资产可以将客户端的身份作为值的一部分保存其中（比如以 JSON 属性标识资产主人），以后就只有被授权的客户端才可以更新键-值对。\n详细信息请查阅 client identity (CID) library documentation\nTo add the client identity shim extension to your chaincode as a dependency, see 管理 Go 链码的扩展依赖.\n将客户端身份 shim 扩展作为依赖添加到你的链码，请查阅 管理 Go 链码的扩展依赖 。\n管理 Go 链码的扩展依赖你的 Go 链码需要 Go 标准库之外的一些依赖包（比如链码 shim）。当链码安装到 peer 的时候，这些报的源码必须被包含在你的链码包中。如果你将你的链码构造为一个模块，最简单的方法就是在打包你的链码之前使用 go mod vendor 来 “vendor” 依赖。\ngo mod tidy\ngo mod vendor\n这就把你链码的扩展依赖放进了本地的 vendor 目录。\n当依赖都引入到你的链码目录后， peer chaincode package 和 peer chaincode install 操作将把这些依赖一起放入链码包中。\n视频9拉取项目GOPATH&#96;设置为&#96;&#x2F;root&#x2F;go&#96; 进入&#96;GOPATH&#x2F;src\ncd $GOPATH&#x2F;src &amp;&amp; git clone https:&#x2F;&#x2F;github.com&#x2F;sxguan&#x2F;fabric-go-sdk.git\n启动节点cd .&#x2F;fabric-go-sdk&#x2F;fixtures&#x2F; &amp;&amp; docker-compose up -d\n\n启动项目cd .. &amp;&amp; go build &amp;&amp; .&#x2F;fabric-go-sdk\n&gt;&gt; 开始创建通道......\n&gt;&gt;&gt;&gt; 使用每个org的管理员身份更新锚节点配置...\n&gt;&gt;&gt;&gt; 使用每个org的管理员身份更新锚节点配置完成\n&gt;&gt; 创建通道成功\n&gt;&gt; 加入通道......\n&gt;&gt; 加入通道成功\n&gt;&gt; 开始打包链码......\n&gt;&gt; 打包链码成功\n&gt;&gt; 开始安装链码......\n&gt;&gt; 安装链码成功\n&gt;&gt; 组织认可智能合约定义......\n&gt;&gt;&gt; chaincode approved by Org1 peers:\n\tpeer0.org1.example.com:7051\n\tpeer1.org1.example.com:9051\n&gt;&gt; 组织认可智能合约定义完成\n&gt;&gt; 检查智能合约是否就绪......\nLifecycleCheckCCCommitReadiness cc &#x3D; simplecc, &#x3D; &#123;map[Org1MSP:true]&#125;\nLifecycleCheckCCCommitReadiness cc &#x3D; simplecc, &#x3D; &#123;map[Org1MSP:true]&#125;\n&gt;&gt; 智能合约已经就绪\n&gt;&gt; 提交智能合约定义......\n&gt;&gt; 智能合约定义提交完成\n&gt;&gt; 调用智能合约初始化方法......\n&gt;&gt; 完成智能合约初始化\n&gt;&gt; 通过链码外部服务设置链码状态......\n&gt;&gt; 设置链码状态完成\n&lt;--- 添加信息　---&gt;： 18c0c86ce029d7de04461484976c5151992864b52ca28905d0ccf911443fdfcb\n&lt;--- 查询信息　---&gt;： 123\n\nalgernon@algernon-Lenovo-Legion-Y7000:&#x2F;opt&#x2F;gopath&#x2F;src$ go build &amp;&amp; .&#x2F;fabric-go-sdk\ngithub.com&#x2F;hyperledger&#x2F;fabric-chaincode-go&#x2F;shim&#x2F;handler.go:11:2: cannot find package &quot;github.com&#x2F;golang&#x2F;protobuf&#x2F;proto&quot; in any of:\n\t&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;github.com&#x2F;golang&#x2F;protobuf&#x2F;proto (from $GOROOT)\n\t&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;golang&#x2F;protobuf&#x2F;proto (from $GOPATH)\ngithub.com&#x2F;hyperledger&#x2F;fabric-protos-go&#x2F;peer&#x2F;snapshot.pb.go:10:2: cannot find package &quot;github.com&#x2F;golang&#x2F;protobuf&#x2F;ptypes&#x2F;empty&quot; in any of:\n\t&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;github.com&#x2F;golang&#x2F;protobuf&#x2F;ptypes&#x2F;empty (from $GOROOT)\n\t&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;golang&#x2F;protobuf&#x2F;ptypes&#x2F;empty (from $GOPATH)\ngithub.com&#x2F;hyperledger&#x2F;fabric-chaincode-go&#x2F;shim&#x2F;interfaces.go:7:2: cannot find package &quot;github.com&#x2F;golang&#x2F;protobuf&#x2F;ptypes&#x2F;timestamp&quot; in any of:\n\t&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;github.com&#x2F;golang&#x2F;protobuf&#x2F;ptypes&#x2F;timestamp (from $GOROOT)\n\t&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;golang&#x2F;protobuf&#x2F;ptypes&#x2F;timestamp (from $GOPATH)\ngithub.com&#x2F;hyperledger&#x2F;fabric-protos-go&#x2F;peer&#x2F;chaincode_shim.pb.go:11:2: cannot find package &quot;google.golang.org&#x2F;grpc&quot; in any of:\n\t&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;google.golang.org&#x2F;grpc (from $GOROOT)\n\t&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;google.golang.org&#x2F;grpc (from $GOPATH)\ngithub.com&#x2F;hyperledger&#x2F;fabric-protos-go&#x2F;peer&#x2F;chaincode_shim.pb.go:12:2: cannot find package &quot;google.golang.org&#x2F;grpc&#x2F;codes&quot; in any of:\n\t&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;google.golang.org&#x2F;grpc&#x2F;codes (from $GOROOT)\n\t&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;google.golang.org&#x2F;grpc&#x2F;codes (from $GOPATH)\ngithub.com&#x2F;hyperledger&#x2F;fabric-chaincode-go&#x2F;shim&#x2F;internal&#x2F;client.go:13:2: cannot find package &quot;google.golang.org&#x2F;grpc&#x2F;credentials&quot; in any of:\n\t&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;google.golang.org&#x2F;grpc&#x2F;credentials (from $GOROOT)\n\t&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;google.golang.org&#x2F;grpc&#x2F;credentials (from $GOPATH)\ngithub.com&#x2F;hyperledger&#x2F;fabric-chaincode-go&#x2F;shim&#x2F;internal&#x2F;client.go:14:2: cannot find package &quot;google.golang.org&#x2F;grpc&#x2F;keepalive&quot; in any of:\n\t&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;google.golang.org&#x2F;grpc&#x2F;keepalive (from $GOROOT)\n\t&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;google.golang.org&#x2F;grpc&#x2F;keepalive (from $GOPATH)\ngithub.com&#x2F;hyperledger&#x2F;fabric-protos-go&#x2F;peer&#x2F;chaincode_shim.pb.go:13:2: cannot find package &quot;google.golang.org&#x2F;grpc&#x2F;status&quot; in any of:\n\t&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;google.golang.org&#x2F;grpc&#x2F;status (from $GOROOT)\n\t&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;google.golang.org&#x2F;grpc&#x2F;status (from $GOPATH)\n\n go build &amp;&amp; .&#x2F;fabric-go-sdk\n&gt;&gt; 开始创建通道......\n&gt;&gt; Create channel and join error: Create channel error: error should be nil for SaveChannel of orgchannel: create channel failed: create channel failed: SendEnvelope failed: calling orderer &#39;orderer.example.com:7050&#39; failed: Orderer Client Status Code: (2) CONNECTION_FAILED. Description: dialing connection on target [orderer.example.com:7050]: connection is in TRANSIENT_FAILURE\n\n\n\ngo build &amp;&amp; .&#x2F;fabric-go-sdk\n&gt;&gt; 开始创建通道......\n&gt;&gt; Create channel and join error: Create channel error: error should be nil for SaveChannel of orgchannel: create channel failed: create channel failed: SendEnvelope failed: calling orderer &#39;orderer.example.com:7050&#39; failed: Orderer Server Status Code: (400) BAD_REQUEST. Description: error applying config update to existing channel &#39;mychannel&#39;: error authorizing update: error validating ReadSet: proposed update requires that key [Group]  &#x2F;Channel&#x2F;Application be at version 0, but it is currently at version 1\n\n\ngo build &amp;&amp; .&#x2F;fabric-go-sdk\n&gt;&gt; 开始创建通道......\n&gt;&gt;&gt;&gt; 使用每个org的管理员身份更新锚节点配置...\n&gt;&gt;&gt;&gt; 使用每个org的管理员身份更新锚节点配置完成\n&gt;&gt; 创建通道成功\n&gt;&gt; 加入通道......\n&gt;&gt; 加入通道成功\n&gt;&gt; 开始打包链码......\n&gt;&gt; 打包链码成功\n&gt;&gt; 开始安装链码......\n [fabsdk&#x2F;fab] 2022&#x2F;10&#x2F;26 15:19:14 UTC - peer.(*peerEndorser).sendProposal -&gt; ERRO process proposal failed [rpc error: code &#x3D; DeadlineExceeded desc &#x3D; context deadline exceeded]\n [fabsdk&#x2F;fab] 2022&#x2F;10&#x2F;26 15:19:14 UTC - peer.(*peerEndorser).sendProposal -&gt; ERRO process proposal failed [rpc error: code &#x3D; DeadlineExceeded desc &#x3D; context deadline exceeded]\n&gt;&gt; create chaincode lifecycle error: %v installCC error: LifecycleInstallCC error: Multiple errors occurred: - Transaction processing for endorser [peer0.org1.example.com:7051]: gRPC Transport Status Code: (4) DeadlineExceeded. Description: context deadline exceeded - Transaction processing for endorser [peer1.org1.example.com:9051]: gRPC Transport Status Code: (4) DeadlineExceeded. Description: context deadline exceeded\n\ngo build &amp;&amp; .&#x2F;fabric-go-sdk\n&gt;&gt; 开始创建通道......\n&gt;&gt;&gt;&gt; 使用每个org的管理员身份更新锚节点配置...\n&gt;&gt;&gt;&gt; 使用每个org的管理员身份更新锚节点配置完成\n&gt;&gt; 创建通道成功\n&gt;&gt; 加入通道......\n&gt;&gt; 加入通道成功\n&gt;&gt; 开始打包链码......\n&gt;&gt; 打包链码成功\n&gt;&gt; 开始安装链码......\n&gt;&gt; 安装链码成功\n&gt;&gt; 组织认可智能合约定义......\n&gt;&gt;&gt; chaincode approved by Org1 peers:\n\tpeer0.org1.example.com:7051\n\tpeer1.org1.example.com:9051\n&gt;&gt; 组织认可智能合约定义完成\n&gt;&gt; 检查智能合约是否就绪......\nLifecycleCheckCCCommitReadiness cc &#x3D; simplecc, &#x3D; &#123;map[Org1MSP:true]&#125;\nLifecycleCheckCCCommitReadiness cc &#x3D; simplecc, &#x3D; &#123;map[Org1MSP:true]&#125;\n&gt;&gt; 智能合约已经就绪\n&gt;&gt; 提交智能合约定义......\n&gt;&gt; 智能合约定义提交完成\n&gt;&gt; 调用智能合约初始化方法......\n&gt;&gt; 完成智能合约初始化\n&gt;&gt; 通过链码外部服务设置链码状态......\n&gt;&gt; 设置链码状态完成\n&lt;--- 添加信息　---&gt;： 18c0c86ce029d7de04461484976c5151992864b52ca28905d0ccf911443fdfcb\n&lt;--- 查询信息　---&gt;： 123\n完整内容\n\n\n\n\n\n\n\n\nhttps://sxguan0529.gitbook.io/hyperledger-fabric/fabric-sdk-go#san-pei-zhi-wen-jian-config.yaml\n","slug":"区块链4","date":"2022-11-03T15:10:49.000Z","categories_index":"","tags_index":"区块链","author_index":"Algernon"},{"id":"fe7562c539a88737236a621707cb5848","title":"【文本分析】（二）","content":"import jieba\nimport jieba.posseg as psg\nfrom collections import Counter\ntext &#x3D; &#39;我现在在jupyter notebook上写文本分析的代码！&#39;\n\n\nfor w in jieba.cut(text):\n    print(w)\nBuilding prefix dict from the default dictionary ...\nLoading model from cache C:\\Users\\83854\\AppData\\Local\\Temp\\jieba.cache\nLoading model cost 0.417 seconds.\nPrefix dict has been built successfully.\n\n\n我\n现在\n在\njupyter\n\nnotebook\n上\n写\n文本\n分析\n的\n代码\n！\nimport jieba;\nseg_list &#x3D; jieba.cut(\n    &quot;甜豆腐脑和咸豆腐脑哪个更好吃呢？&quot;\n)\nfor w in seg_list:\n    print(w)\n甜\n豆腐脑\n和\n咸\n豆腐脑\n哪个\n更\n好吃\n呢\n？\n甜豆腐脑和咸豆腐脑属于常用词，我们换成专业名词，圣遗物“华馆梦醒形骸记”和“来歆余响”\nimport jieba;\nseg_list &#x3D; jieba.cut(\n    &quot;华馆梦醒形骸记和来歆余响哪个更适合神里呢？&quot;\n)\nfor w in seg_list:\n    print(w)\n华馆\n梦醒\n形骸\n记和来歆\n余响\n哪个\n更\n适合\n神里\n呢\n？\n可以看出，jieba并没有成功断开，现在我们导入词库\nimport jieba;\njieba.add_word(&#39;华馆梦醒形骸记&#39;)#添加词库\njieba.add_word(&#39;来歆余响&#39;)\nseg_list &#x3D; jieba.cut(\n    &quot;华馆梦醒形骸记和来歆余响哪个更适合神里呢？&quot;\n)\nfor w in seg_list:\n    print(w)\n华馆梦醒形骸记\n和\n来歆余响\n哪个\n更\n适合\n神里\n呢\n？\n现在我们可以看到，再加入特定词的词库后，jieba成功进行了分词\n我们可以用jieba.load_userdict(‘路径.txt’)方法一次性导入整个词库，txt文件中为每行一个特定的词\nimport jieba\nimport jieba.analyse\nimport jieba\nimport jieba.posseg as psg\nfrom collections import Counter\n# 待分词的文本路径\nsourceTxt &#x3D; r&quot;C:&#x2F;&#x2F;Users&#x2F;&#x2F;83854&#x2F;&#x2F;Documents&#x2F;&#x2F;shujvji&#x2F;&#x2F;genshin.txt&quot;\n# 分好词后的文本路径\ntargetTxt &#x3D; r&quot;C:&#x2F;&#x2F;Users&#x2F;&#x2F;83854&#x2F;&#x2F;Documents&#x2F;&#x2F;shujvji&#x2F;&#x2F;fenci2.txt&quot;\n\n# 对文本进行操作\n\nwith open(sourceTxt, &#39;r&#39;, encoding &#x3D; &#39;utf-8&#39;) as sourceFile, open(targetTxt, &#39;a+&#39;, encoding &#x3D; &#39;utf-8&#39;) as targetFile:\n    for line in sourceFile:\n        seg &#x3D; jieba.cut(line.strip(), cut_all &#x3D; False)\n        # 分好词之后之间用空格隔断\n        output &#x3D; &#39; &#39;.join(seg)\n        targetFile.write(output)\n        targetFile.write(&#39;\\n&#39;)\n    print(&#39;写入成功！&#39;)\n\n# 提取关键词\nwith open(targetTxt, &#39;r&#39;, encoding &#x3D; &#39;utf-8&#39;) as file:\n    text &#x3D; file.readlines()\n    &quot;&quot;&quot;\n    几个参数解释：\n        * text : 待提取的字符串类型文本\n        * topK : 返回TF-IDF权重最大的关键词的个数，默认为20个\n        * withWeight : 是否返回关键词的权重值，默认为False\n        * allowPOS : 包含指定词性的词，默认为空\n    &quot;&quot;&quot;\n    keywords &#x3D; jieba.analyse.extract_tags(str(text), topK &#x3D; 100, withWeight&#x3D;True, allowPOS&#x3D;())\n    print(keywords)\n    print(&#39;提取完毕！&#39;)\n\n写入成功！\n[(&#39;音乐&#39;, 0.30376152967529807), (&#39;须弥&#39;, 0.1346632360175712), (&#39;原神&#39;, 0.12497199124472864), (&#39;陈老师&#39;, 0.08320263205482652), (&#39;幕后&#39;, 0.06823193339024688), (&#39;真的&#39;, 0.06515894124271353), (&#39;hoyomix&#39;, 0.06115650635380338), (&#39;原宝&#39;, 0.058497527816681494), (&#39;mix&#39;, 0.05052059220531584), (&#39;团队&#39;, 0.04872411839589858), (&#39;那契&#39;, 0.03988467805682829), (&#39;hoyo&#39;, 0.03988467805682829), (&#39;视频&#39;, 0.039425474014386126), (&#39;感谢&#39;, 0.03666087076072954), (&#39;喜欢&#39;, 0.035514340588202846), (&#39;米哈&#39;, 0.035251415848932384), (&#39;好听&#39;, 0.03470912869932385), (&#39;数列&#39;, 0.033130735337255336), (&#39;yyds&#39;, 0.029248763908340747), (&#39;大佬&#39;, 0.0274163437665347), (&#39;呜呜&#39;, 0.027097537520004447), (&#39;斐波&#39;, 0.02658978537121886), (&#39;枫丹&#39;, 0.02658978537121886), (&#39;感觉&#39;, 0.026350321191172154), (&#39;游戏&#39;, 0.02558340660825623), (&#39;期待&#39;, 0.025368599082068503), (&#39;HOYO&#39;, 0.023930806834096974), (&#39;稻妻&#39;, 0.023930806834096974), (&#39;陈致&#39;, 0.023930806834096974), (&#39;旅人&#39;, 0.023280005443727755), (&#39;前瞻&#39;, 0.023228101079139234), (&#39;曲子&#39;, 0.02311102483163701), (&#39;啊啊啊&#39;, 0.022779475735409255), (&#39;就是&#39;, 0.022408588749270462), (&#39;战斗&#39;, 0.02202536894074733), (&#39;老师&#39;, 0.021263640122108542), (&#39;节奏&#39;, 0.02124655568899911), (&#39;创作&#39;, 0.020903159805560498), (&#39;但是&#39;, 0.020422561798879003), (&#39;角色&#39;, 0.020304841056014235), (&#39;可以&#39;, 0.019490209364768682), (&#39;配乐&#39;, 0.01754026047), (&#39;摩斯&#39;, 0.017058200780604982), (&#39;出来&#39;, 0.016520537436521352), (&#39;世界&#39;, 0.016514234852021796), (&#39;虽然&#39;, 0.016161079021601424), (&#39;那兰&#39;, 0.015953871222731317), (&#39;...&#39;, 0.015953871222731317), (&#39;不够看&#39;, 0.015953871222731317), (&#39;卧槽&#39;, 0.015458938669928826), (&#39;各位&#39;, 0.015299619790215747), (&#39;永远&#39;, 0.015225989643251779), (&#39;旅行者&#39;, 0.015167384782104092), (&#39;一个&#39;, 0.015040307680409253), (&#39;冰箱&#39;, 0.015034945192900358), (&#39;每次&#39;, 0.014728756026823843), (&#39;急急&#39;, 0.014410247823131671), (&#39;时候&#39;, 0.014308539813523131), (&#39;沙漠&#39;, 0.014100965526338969), (&#39;音乐会&#39;, 0.014064057475676158), (&#39;听到&#39;, 0.014041888104221531), (&#39;加油&#39;, 0.013711853238031585), (&#39;语言&#39;, 0.013708846917571176), (&#39;原石&#39;, 0.01329489268560943), (&#39;bgm&#39;, 0.01329489268560943), (&#39;MiX&#39;, 0.01329489268560943), (&#39;遐想&#39;, 0.013227349117540038), (&#39;一直&#39;, 0.013174950427226424), (&#39;雨林&#39;, 0.0131551953525), (&#39;审美&#39;, 0.013021219682989324), (&#39;钢琴&#39;, 0.012852894857720195), (&#39;落水&#39;, 0.012637714661650356), (&#39;不同&#39;, 0.012618082724641905), (&#39;太棒了&#39;, 0.012606459402246441), (&#39;现在&#39;, 0.012311491455160141), (&#39;带来&#39;, 0.012270374586959518), (&#39;故事&#39;, 0.012251639474339411), (&#39;剧情&#39;, 0.01219551207808719), (&#39;花絮&#39;, 0.012184429129003558), (&#39;已经&#39;, 0.012172770980925268), (&#39;玩家&#39;, 0.012024459773687721), (&#39;这个&#39;, 0.011901662937644573), (&#39;拍子&#39;, 0.011879228010564945), (&#39;还是&#39;, 0.011520793034270465), (&#39;一次&#39;, 0.011412670121385676), (&#39;小草&#39;, 0.011153777403358541), (&#39;什么&#39;, 0.011106902198087187), (&#39;国度&#39;, 0.010924310729615215), (&#39;看到&#39;, 0.010820306320840748), (&#39;中式&#39;, 0.010799625122275355), (&#39;用心&#39;, 0.010760160860511566), (&#39;演奏&#39;, 0.01064112761478203), (&#39;锁屏&#39;, 0.010635914148487545), (&#39;我要&#39;, 0.010635914148487545), (&#39;哔哩&#39;, 0.010635914148487545), (&#39;妮露&#39;, 0.010635914148487545), (&#39;吐槽&#39;, 0.010635914148487545), (&#39;死域&#39;, 0.010635914148487545), (&#39;太牛&#39;, 0.010635914148487545), (&#39;Mix&#39;, 0.010635914148487545)]\n提取完毕！\nimport jieba.analyse\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud,STOPWORDS,ImageColorGenerator\ncontent &#x3D; open(r&quot;C:\\Users\\83854\\Documents\\shujvji\\fenci2.txt&quot;, encoding &#x3D; &#39;UTF-8&#39;).read()\ntags &#x3D; jieba.analyse.extract_tags(content,topK&#x3D;200,withWeight&#x3D;False)\ntext &#x3D; &#39; &#39;.join(tags)\nwc &#x3D; WordCloud(font_path&#x3D;r&quot;C:\\Users\\83854\\Documents\\shujvji\\华文行楷.ttf&quot;,\n              background_color&#x3D;&#39;white&#39;,max_words&#x3D;100,\n              max_font_size&#x3D;120,min_font_size&#x3D;10,\n              random_state&#x3D;42,width&#x3D;1200,height&#x3D;900)\nwc.generate(text)\nplt.imshow(wc)\nplt.axis(&#39;off&#39;)\nplt.show()\n​\n​    \n我们改成前20个词语，并对参数做一些修改\ncontent &#x3D; open(r&quot;C:\\Users\\83854\\Documents\\shujvji\\fenci2.txt&quot;, encoding &#x3D; &#39;UTF-8&#39;).read()\ntags &#x3D; jieba.analyse.extract_tags(content,topK&#x3D;20,withWeight&#x3D;False)\ntext &#x3D; &#39; &#39;.join(tags)\nwc &#x3D; WordCloud(font_path&#x3D;r&quot;C:\\Users\\83854\\Documents\\shujvji\\华文行楷.ttf&quot;,\n              background_color&#x3D;&#39;white&#39;,max_words&#x3D;100,\n              max_font_size&#x3D;1000,min_font_size&#x3D;10,\n              random_state&#x3D;42,width&#x3D;1200,height&#x3D;900)\nwc.generate(text)\nplt.imshow(wc)\nplt.axis(&#39;off&#39;)\nplt.show()\n​    \n![在这里插入图片描述](https://img-blog.csdnimg.cn/c65a7fe1fe574ec495f3da8101012c58.png)\nimport pandas as pd\nfrom snownlp import SnowNLP\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.rcParams[&#39;font.sans-serif&#39;]&#x3D;[&#39;SimHei&#39;]\nplt.rcParams[&#39;axes.unicode_minus&#39;]&#x3D;False\nsns.set_style(&#39;whitegrid&#39;,&#123;&#39;font.sans-serif&#39;:[&#39;simhei&#39;,&#39;Arial&#39;]&#125;)\n\ncomments &#x3D; pd.read_csv(&quot;C:&#x2F;&#x2F;Users&#x2F;&#x2F;83854&#x2F;&#x2F;Documents&#x2F;&#x2F;shujvji&#x2F;&#x2F;genshinmusic.csv&quot;,&#39;gbk&#39;,index_col&#x3D;0)\ncomments.head()\n\nC:\\Users\\83854\\AppData\\Local\\Temp\\ipykernel_53740\\1497606228.py:1: FutureWarning: In a future version of pandas all arguments of read_csv except for the argument &#39;filepath_or_buffer&#39; will be keyword-only.\n  comments = pd.read_csv(&quot;C://Users//83854//Documents//shujvji//genshinmusic.csv&quot;,&#39;gbk&#39;,index_col=0)\nC:\\Users\\83854\\AppData\\Local\\Temp\\ipykernel_53740\\1497606228.py:1: ParserWarning: Falling back to the &#39;python&#39; engine because the &#39;c&#39; engine does not support regex separators (separators &gt; 1 char and different from &#39;\\s+&#39; are interpreted as regex); you can avoid this warning by specifying engine=&#39;python&#39;.\n  comments = pd.read_csv(&quot;C://Users//83854//Documents//shujvji//genshinmusic.csv&quot;,&#39;gbk&#39;,index_col=0)\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\n\n  \n    \n      \n    \n    \n      评论\n    \n  \n  \n    \n      超爱看幕后纪录有不一样的感动\n    \n    \n      \"科普一下音乐知识，\n    \n    \n      “主题”：一段可以辨认的旋律，是作品的核心，可以由音乐动机组成，可以用来象征某物某人\n    \n    \n      “模进”：类似把同样一句话轮流交给不同的人去说\n    \n    \n      “非均分律动”：把句子重音节奏等等进行不规则划分。假如简单理解唐诗是“均分律动”，那么宋词就是“非均分律动”\"\n    \n  \n\n\n\n\n\n\n\n# 读如数据并显示数据的前五条\nimport pandas as pd\ncomments &#x3D; pd.read_csv(r&quot;C:\\Users\\83854\\Documents\\shujvji\\genshinmusic.csv&quot;)    #去掉一些特殊符号，只留下纯文本评论,去掉无\ncomments.head()\nprint(len(comments))\n390\n# 使用SnowNLP计算对每条标题的文字评估情绪得分\n# 新建“情绪”一列\n\ncomments[&#39;情绪&#39;]&#x3D;None\n#comments.iloc[i,1]&#x3D;None\n# 所有文本长度\nlenOrig&#x3D;len(comments)\n\n\ni&#x3D;0\n# 计算情绪得分SnowNLP(数据二维表.iloc[行，列]).sentiments\nwhile(i&lt;lenOrig):\n    s&#x3D;SnowNLP(comments.iloc[i,0]).sentiments\n    comments.iloc[i,1]&#x3D;s\n    i&#x3D;i+1\n \n# 输出每行的情绪得分\nprint(&#39;情绪得分：&#39;)\n# 前五行\nprint(comments.head())\nprint(comments)\n\n情绪得分：\n                                                  评论        情绪\n0                                     超爱看幕后纪录有不一样的感动  0.942552\n1  科普一下音乐知识，\\n“主题”：一段可以辨认的旋律，是作品的核心，可以由音乐动机组成，可以用...       1.0\n2  虽然一直很喜欢HOYO-MIX的音乐，但此前专心欣赏这些配乐仅限于在游戏外，而须弥的配乐，是...       1.0\n3                             感觉这次不止是侧重陈老师，介绍了更多团队人员  0.995487\n4         直播间别刷兑换码了你但凡加个原神群都会有人贴出来，每次前瞻都会给，不用老是刷屏直播间  0.003928\n                                                    评论        情绪\n0                                       超爱看幕后纪录有不一样的感动  0.942552\n1    科普一下音乐知识，\\n“主题”：一段可以辨认的旋律，是作品的核心，可以由音乐动机组成，可以用...       1.0\n2    虽然一直很喜欢HOYO-MIX的音乐，但此前专心欣赏这些配乐仅限于在游戏外，而须弥的配乐，是...       1.0\n3                               感觉这次不止是侧重陈老师，介绍了更多团队人员  0.995487\n4           直播间别刷兑换码了你但凡加个原神群都会有人贴出来，每次前瞻都会给，不用老是刷屏直播间  0.003928\n..                                                 ...       ...\n385                                            幕后故事超有趣  0.966248\n386              流金疾驰已经难到，这么专业的队伍都得分段完成了么？！真想有朝一日能看现场啊  0.482386\n387                                           快把前瞻端上来罢  0.829795\n388                                               原宝贴贴  0.462915\n389                                      牛牛牛，整多点这样的，爱看  0.846666\n\n[390 rows x 2 columns]\n\n","slug":"文本分析2","date":"2022-11-03T15:07:49.000Z","categories_index":"","tags_index":"文本分析","author_index":"Algernon"},{"id":"f7d616ea92a89a59048707721827725d","title":"【PYTHON程序设计】期中准备","content":"期中测试主要要求\n熟练掌握文件的读写操作\n掌握csv文件二维数据的读写操作\n熟练掌握List的操作\n\n文件的读写用文本编辑器生成一个包含“今古诸事，激荡中流，宏图待看新秀”的txt格式文本文件，命名为jingu.txt。分别用文本文件方式和二进制文件方式读入，并打印输出效果。需要把编码改成UTF-8\ntextFile&#x3D;open(&quot;D:&#x2F;&#x2F;coder&#x2F;&#x2F;randomnumbers&#x2F;&#x2F;txt&#x2F;&#x2F;jingu.txt&quot;,&quot;rt&quot;,encoding&#x3D;&#39;UTF-8&#39;) #t表示文本文件方式\nprint(textFile.readline())\ntextFile.close()\nbinFile&#x3D;open(&quot;D:&#x2F;&#x2F;coder&#x2F;&#x2F;randomnumbers&#x2F;&#x2F;txt&#x2F;&#x2F;jingu.txt&quot;,&quot;rb&quot;) #t表示文本文件方式\nprint(binFile.readline())\nbinFile.close()\n\n\n\n\n\n\n\n\n\n今古诸事，激荡中流，宏图待看新秀b’\\xe4\\xbb\\x8a\\xe5\\x8f\\xa4\\xe8\\xaf\\xb8\\xe4\\xba\\x8b\\xef\\xbc\\x8c\\xe6\\xbf\\x80\\xe8\\x8d\\xa1\\xe4\\xb8\\xad\\xe6\\xb5\\x81\\xef\\xbc\\x8c\\xe5\\xae\\x8f\\xe5\\x9b\\xbe\\xe5\\xbe\\x85\\xe7\\x9c\\x8b\\xe6\\x96\\xb0\\xe7\\xa7\\x80’\nfname&#x3D;input(&quot;请输入要写入的文件:&quot;)\nfo&#x3D;open(fname,&quot;w+&quot;)\nls&#x3D;[&quot;树&quot;,&quot;花&quot;,&quot;沙&quot;]\nfo.writelines(ls)\nfo.seek(0)\nfor line in fo:\n   print(line)\nfo.close()\n会在文件目录下生成文件\n\n\n\n\n\n\n\n\n\n请输入要写入的文件:jingu树花沙\nPIL库image类from PIL import Image\nim&#x3D;Image.open(&quot;C:&#x2F;&#x2F;Users&#x2F;&#x2F;83854&#x2F;&#x2F;Pictures&#x2F;&#x2F;Saved Pictures&#x2F;&#x2F;src&#x3D;http___dl.bbs.9game.cn_attachments_forum_201901_29_110208d2p8j1hhmlboljom.jpg&amp;refer&#x3D;http___dl.bbs.9game.jpg&quot;)\nprint(im.format,im.size,im.mode)\n\n\n\n\n\n\n\n\n\nJPEG (1024, 980) RGB\nGIF文件from PIL import Image\nim&#x3D;Image.open(&quot;C:&#x2F;&#x2F;Users&#x2F;&#x2F;83854&#x2F;&#x2F;Pictures&#x2F;&#x2F;Saved Pictures&#x2F;&#x2F;bengbeng.gif&quot;)\n\nim.save(&#39;bengbeng.png&#39;)\n\n&#39;&#39;&#39;\ntry:\n    im.save(&#39;picframe&#123;:02d&#125;.png&#39;.format(im.tell()))\n    while True:\n        im.seek(im.tell()+1)\n        im.save(&#39;picframe&#123;:02d&#125;.png&#39;.format(im.tell()))\nexcept:\n    print(&quot;处理结束&quot;)\n&#39;&#39;&#39;\n\n图像颜色交换from PIL import Image\nim&#x3D;Image.open(&quot;C:\\\\Users\\\\83854\\\\Pictures\\\\Saved Pictures\\\\m6Q182-gdaqZqT3cSkb-sg.jpg&quot;)\nr,g,b&#x3D;im.split()\nom&#x3D;Image.merge(&quot;RGB&quot;,(b,g,r))\nom.save(&#39;birdnestBGR.jpg&#39;)\n\n\n图像的过滤与增强图像轮廓获取from PIL import Image\nfrom PIL import ImageFilter\nim&#x3D;Image.open(&quot;C:\\\\Users\\\\83854\\\\Pictures\\\\Saved Pictures\\\\m6Q182-gdaqZqT3cSkb-sg.jpg&quot;)\nom&#x3D;im.filter(ImageFilter.CONTOUR)\nom.save(&#39;birdnestContour.jpg&#39;)\n图像对比度增强\nfrom PIL import Image\nfrom PIL import ImageEnhance\nim&#x3D;Image.open(&quot;C:\\\\Users\\\\83854\\\\Pictures\\\\Saved Pictures\\\\v2-0070ccffb6906e80985a01f9998eb0ed_b.jpg&quot;)\nom&#x3D;ImageEnhance.Contrast(im)\nom.enhance(10).save(&#39;birdnestContour.jpg&#39;)\n增强图像的对比度为初始的10倍\n一二维数据的格式化处理导入CSV格式数据fo&#x3D;open(&quot;...&#x2F;&#x2F;genshinmusic.csv&quot;,&quot;r&quot;,encoding&#x3D;&quot;utf-8&quot;)\nls&#x3D;[]\nfor line in fo:\n    line&#x3D;line.replace(&quot;\\n&quot;,&quot;&quot;)\n\n    ls.append(line.split(&quot;,&quot;))\nprint(ls)\nfo.close()\n[[&#39;评论&#39;], [&#39;超爱看幕后纪录有不一样的感动&#39;], [&#39;&quot;科普一下音乐知识，&#39;], [&#39;“主题”：一段可以辨认的旋律，是作品的核心，可以由音乐动机组成，可以用来象征某物某人&#39;], [&#39;“模进”：类似把同样一句话轮流交给不同的人去说&#39;], [&#39;“非均分律动”：把句子重音节奏等等进行不规则划分。假如简单理解唐诗是“均分律动”，那么宋词就是“非均分律动”&quot;&#39;], [&#39;&quot;虽然一直很喜欢HOYO-MIX的音乐，但此前专心欣赏这些配乐仅限于在游戏外，而须弥的配乐，是我第一次在游戏进行到一半时愿意停下来去欣赏的，而且还是多次。相对于蒙德的舒缓，璃月的恢宏，稻妻的神秘，须弥音乐兼具欢快和幽远。&#39;], [&#39;在我的内心深处一直有一个梦，一个现实中找不到的地方。想起来可能是从小玩摩尔庄园，看吉卜力动画和爱尔兰童话糅合出来的想象。那里有郁郁葱葱的浆果丛林，溪水两边长着五颜六色的蘑菇，每到黄昏时有漫天的萤火虫飞舞。登上丛林最高的树冠可以远眺一望无际的平原，平原尽头是古国的遗迹，那些高耸的石柱诉说着它们曾经的辉煌。感谢“原神•须弥”，让我和童年幻想如此之近。&#39;], [&#39;我在须弥最喜欢四段配乐。第一段是奥摩斯港的配乐，我应该和大多数人一样，是在主线推进到奥摩斯港的时候注意到的。欢快的曲调显得整个港口都非常有活力。第二段是桓那兰那的配乐，贯穿整个森林书，虽然解密到处都有但从来听不腻。第三段是须弥主城的某个配乐，简谱“67176523”，第四段是降诸魔山的配乐，简谱“6271(高)765452”，这两段讨论的人较少，名字也没有，留个简谱给懂乐理的人看。它们共同的特点是都是很旷远，仿佛独自坐在港口的高塔上眺望着载满梦想的船消失在地平线。&quot;&#39;], [&#39;感觉这次不止是侧重陈老师，介绍了更多团队人员&#39;], [&#39;直播间别刷兑换码了你但凡加个原神群都会有人贴出来，每次前瞻都会给，不用老是刷屏直播间&#39;], [&#39;从铠甲勇士到天涯到原神，我的10岁到20岁都被陈老师拿捏了&#39;], [&#39;可以看出来mihoyo一直是在进步的，从开始的蒙德到现在的须弥雨林沙漠，在地图越来越精美的同时音乐也是越做越好，这次须弥的音乐是真的做的很有感觉，沙漠的苍凉雄浑和雨林的生机和美丽还有城市的烟火气息都很好的体现了出来，期待下一次的音乐！&#39;], [&#39;亲爱的旅行者，米游社跟qq音乐联合的音乐活动可以拿40原石哦&#39;], [&#39;陈老师真的好牛啊，我每一次觉得每一首歌都很符合地图谢谢陈老师呜呜呜&#39;], [&#39;评论区能不能多讨论一点音乐相关的内容！知道你们很急但是音乐团队这样的付出能不能多夸赞一下嘛&#39;], [&#39;怀里的梅比乌斯突然扭动起来了，大家有什么头绪吗&#39;], [&#39;真的很爱原宝的音乐呀！是用来做闹钟铃也不会感到厌烦的那种程度！&#39;], [&#39;说个题外话，原宝能不能加联机时传送到好友身边啊，真的很需要，不管是整活恶搞还是带萌新&#39;], [&#39;前瞻前瞻现在就开吧急急急我是急急国王&#39;], [&#39;有谁和我一样在每次登录的时候听着那飘渺的音乐想去天空岛上看看的&#39;], [&#39;你个小草神你还能逃出我的手掌心吗？你不能啦。呼呼哈哈，像你这样小草神出来就是没有童年的。想逃，逃跑是没有用的(大保)😍😍😍&#39;], [&#39;旅行者们，你们在遐想什么，遐想可以保底吗还是什么&#39;], [&#39;原宝在？为啥前瞻要放今天晚上？高中寄宿生今晚要返校&#39;], [&#39;希望要求出一个高级材料转化为低级材料的功能，然后转化出的低级材料独立于正常获取的低级材料，虽然可以升级天赋和武器，但无法再次合成&#39;], [&#39;原宝你还记得更新稻妻和璃月的活动吗原宝，想去璃月了&#39;], [&#39;&quot;不同角色去参加男生女生向前冲&#39;], [&#39;荧听说奖品除了冰箱还有原石...&#39;], [&#39;绫华和凯亚走水路&#39;], [&#39;雷泽:冰箱，是什么？&#39;], [&#39;魈宝不需要冰箱&#39;], [&#39;凝光和富人是赞助商&#39;], [&#39;萝莉组们只能在旁边观望了&#39;], [&#39;钟师傅用了柱子&#39;], [&#39;多莉派手下赢得冰箱后高价卖了出去&#39;], [&#39;班尼特第一关落水&#39;], [&#39;申鹤把大摆锤拆了&#39;], [&#39;甘雨中闯关时打瞌睡落水了&#39;], [&#39;小艾咪有些关靠奥兹过的 ，完事把冰箱赏赐给了莫娜&#39;], [&#39;温迪开了个风场飞了一段距离&#39;], [&#39;琴团长本来快落水了，但看到可莉在领奖台那边拿着蹦蹦八个蛋&#39;], [&#39;九条为了将军大人赢了台冰箱回来保存甜点心&#39;], [&#39;一斗挺嚣张，结果第一关落水&#39;], [&#39;大舅哥故意落水回家让托马洗衣服&#39;], [&#39;凯亚给迪卢克也报了一个，完事卢姥爷落水了，回家把凯亚揍了一顿&#39;], [&#39;阿贝多是阿贝少给他报的&#39;], [&#39;阿贝过关后，在雪山寻思这冰箱有啥用?&#39;], [&#39;冰胖胖因为吃树莓取消获奖资格&#39;], [&#39;柯莱给优菈报的，“这个仇，我记下了！”&#39;], [&#39;屑狐狸给影和五郎报了一个&#39;], [&#39;心海总结了攻略锦囊&#39;], [&#39;海哥计算出了运行轨迹&#39;], [&#39;队长刚把冰箱给扛回来:前年送给仆人，去年送给少女，今年就送给木偶吧&#39;], [&#39;结果不知哪些鳖孙给他报了《拳王争霸》，《一站到底》，《非诚勿扰》...&#39;], [&#39;那个女人跟主持人讲了很多甘雨和申鹤小时候的趣事，主持人回家后，被灭口；白术，烟绯和小鹿到现场，初步鉴定为自杀；胡桃收获客户一位&#39;], [&#39;（各位大佬有何高见？）&quot;&#39;], [&#39;喜欢把团队都介绍的氛围。&#39;], [&#39;10分左右的内容我建议大家看这个视频！【原神】揭秘须弥节奏最复杂战斗曲 斐波那契数列拍子 不愧是智慧的国度（锁屏可打？）&#39;], [&#39;&quot;09:53 的Fibonacci数列有大佬做了解释～&#39;], [&#39;【原神】揭秘须弥节奏最复杂战斗曲 斐波那契数列拍子 不愧是智慧的国度（锁屏可打？） 有空大家也能多多看看原音玩家的创作，hoyo-mix团队的创作手法和音乐评鉴都有许多新知识和乐趣&quot;&#39;], [&#39;省流：须弥音乐2019年原神没公测就已经开始做了，所以可以大致确定须弥在2020年刚开服那会儿就做了不少然后靠开服流水质量迅速起飞，然后2021年开稻妻那会儿传的在做枫丹也验证了，再结合2.8海岛秘境里面辛焱火山向秘境可以推断现在在做纳塔了已经，至冬也已经提上日程&#39;], [&#39;旅行者们，你们在遐想什么，遐想烧火棍绘制的画面吗 还是什么&#39;], [&#39;&quot;“把中式的语感和审美融入不同文化地区的标准”&#39;], [&#39;      音乐是对生活的经验性模仿，平时听到的声音影响着对声音的偏好。除开自然环境（如雨声、鸟鸣、汽笛、土壤），语音是人聆听的最丰富、最细致的对象。语言环境不同，对音乐的审美偏好不同。以民间-流行音乐为例，表音语言（如英语）的语音学特点就是辅音承载的信息更多，映射到器乐演奏上就是音头的处理，而且重音和停顿影响表达效率而不影响表意，韵母部分就可以拿来自由发挥搞和声层次。表意语言（如汉语）里面元音的调值、timing和dynamic都影响表意，所以器乐演奏更重旋律性。即使音乐是世界通行的语言，但各地都有方言呢（笑&#39;], [&#39;    小蔡总的这句话让我想起了米哈游最初吸引我的东西——用音乐诉说中国人眼中的世界！你现在有这份野心，也有支持这份野心的实力和影响力。同道者，加油！！！&quot;&#39;], [&#39;&quot;原宝可以出一些能唱的歌嘛，隔壁崩三有那么多好听的歌曲（ture，rubia等），方舟也有好多（秋绪，daydaydream等），王者都有好几首歌曲&#39;], [&#39;原神神女劈观质量很高，但是比较短，让风告诉你算二创（很好听）。。&#39;], [&#39;反正就是不够！！！多出一些嘛，求求你啦求求你啦&quot;&#39;], [&#39;还记得蔡老师在崩坏三五周年说过的：音乐只有在被人听到的一刻才是真的完满。这句话放在原神也非常适用啊&#39;], [&#39;“我们参观了大英博物馆，见到了古埃及与苏美尔文明的历史文物。”&#39;], [&#39;&quot;回顾一下前三国的音乐吧&#39;], [&#39;旅人的韵律——《原神》游戏音乐的幕后&#39;], [&#39;旅人的弦歌——《原神》璃月音乐的幕后&#39;], [&#39;旅人的幽思——《原神》稻妻音乐的幕后&#39;], [&#39;还有发现音乐幕后的题目都是旅人的❌❌&quot;&#39;], [&#39;5:07sitar演奏家说的是其他27根弦在主弦的作用下共振，所以英文应该是main string而不是mainstream1600原石不过分吧&#39;], [&#39;学到了！&#39;], [&#39;爷投的钱变成了艺术，爷骄傲&#39;], [&#39;“内行看门道，外行说woc”谁想出来的啊哈哈哈&#39;], [&#39;正常玩家可能不懂原音玩家看完这个视频有多激动&#39;], [&#39;原宝，b站发40分钟的长视频是被允许的，也是有人看的&#39;], [&#39;14分钟？我要半小时！&#39;], [&#39;真的很感动，每开一个新国家我最期待的就是音乐幕后部分，虽然我自己的钢琴弹的稀巴烂，而且后来因为学业繁重也不得不放下，但是也感谢钢琴把我领进音乐的大门。在我看来，音乐是人类文明、智慧、情感的结合体，是时间和空间的结合体。带上耳机去聆听音符的层次变化真的是一件很有趣很有趣的事情，像是在读一篇文章，在看一副画卷，在听一个传说。再次感谢全体hoyo-mix的老师们和演奏家们带来的动人的音乐，我也一如既往地期待着原神未来的作品。&#39;], [&#39;看完这个视频，反手又氪了4单&#39;], [&#39;把中式审美融入世界！&#39;], [&#39;希望各位尊重团队。不要老是说陈致逸yyds我觉得应该说hoyomix yyds。陈老师一个人没有团队的头脑风暴是很难创作出这么牛逼的曲子的。&#39;], [&#39;大家看看这个印度传统节奏示范，里面就出现了斐波那契数列的重音循环【【印度古典音乐】满级人类的节奏感！4.73秒111个音节，连斐波那契数列都能rap出来？！（原创解说，5P）-哔哩哔哩】 【印度古典音乐】满级人类的节奏感！4.73秒111个音节，连斐波那契数列都能rap出来？！（原创解说，5P）&#39;], [&#39;您团队突破需要什么材料 我去给您采&#39;], [&#39;从音乐爱好者的角度，每次试图从hoyomix写的旋律去猜测创作动机和意图 ，真的是很有意思的事情！也很感谢hoyomix愿意与玩家分享这些音乐本身是没有语义性的存在，但你们的创造力赋予其无限表达&#39;], [&#39;&quot;“我们参观了大英博物馆，见到了古埃及与苏美尔文明的历史文物。”&#39;], [&#39;看到这里有点没绷住&quot;&#39;], [&#39;球球原宝再生一个吧！不够看不够看，感觉须弥每一首曲子都可以拿来讲讲。比如妮露花神之舞的配乐那种BosaNova的感觉，比如森林书高潮那个两个版本相互嵌套的战斗音乐……不如直接开个几个小时纪录片吧（大胆发言）&#39;], [&#39;带节奏的逝一逝&#39;], [&#39;感谢所有团队成员为我们带来这么好的作品，啥也不说我先去氪个648，&#39;], [&#39;&quot;“创造出具有原神特色的世界音乐”&#39;], [&#39;居然是“原神特色的世界音乐”，而不是“世界特色的原神音乐”，这是代表着原神音乐创作者们已经不再局限于游戏，而是在创作一种新风格、新特色的严肃音乐了吗&quot;&#39;], [&#39;&quot;赛诺：你知道为什么阴宅里都有钢琴和邮箱吗？&#39;], [&#39;&#39;], [&#39;&#39;], [&#39;提纳里表面上：不知道。内心os：拜托，不是谐音梗不是谐音梗。&#39;], [&#39;&#39;], [&#39;&#39;], [&#39;赛诺：因为，钢琴住了几个妖，邮箱住了几个魔。（无慈悲）（唱）&#39;], [&#39;&#39;], [&#39;&#39;], [&#39;提纳里：cool。放到南极一定会大卖的。&quot;&#39;], [&#39;去年纪录片形式就蛮棒的，今年换成宣传片了&#39;], [&#39;&quot;蒙德——旅人的韵律&#39;], [&#39;璃月——旅人的弦歌&#39;], [&#39;稻妻——旅人的幽思&#39;], [&#39;须弥——旅人的遐想&#39;], [&#39;&quot;&#39;], [&#39;我们吐槽玩法，吐槽角色强度，吐槽剧情。唯独音乐是力压群口，无可吐槽的地方。&#39;], [&#39;幕后音乐花絮，是讲创作过程的，有的人不要来显摆自个无知。&#39;], [&#39;须弥音乐故事性很强啊，主城的BGM特别有生命破土而出的奇妙与宏伟，水天丛林的BGM特别有水汽与葱郁临场感，奥莫斯港的律动，桓那兰那的童真与善良，每首歌都表现的恰到好处。&#39;], [&#39;这是我从3.0前瞻开始一直等到现在的视频，比任何角色PV都更加期待，今天终于等到了，真的无比开心！！！但是不知道为什么，明明是含金量非常高的视频，在B站却上不了热搜，播放量也因此受到限制，原神的很多视频都有其他视频无法比拟的瞬间观看人数，播放量也是其他视频的几何倍数，却无法上B站的热搜，同时经常上热搜的确是些跟原神有关的“找宝箱”类视频，那些视频播放量并不夸张，却常常在首页挂一天，B站的热搜计算公式是不是该改改了？B站运营同学能看到吗？&#39;], [&#39;&quot;每个地区的特色音乐，都是该地区一张名片；&#39;], [&#39;到达新地区吸引人的风景只能占一半，而新音乐占领一半；如果没有音乐，这个初印象是不完美的&quot;&#39;], [&#39;当父母问你为什么要充648，请把这个视频发给他们。“我在投资一个世界性的音乐项目”&#39;], [&#39;陈老师和hoyo-mix就是游戏音乐界的瑰宝！&#39;], [&#39;喜欢这种幕后介绍，也喜欢了解这些大佬。&#39;], [&#39;其实我想看奥摩斯港那首曲子的幕后，我真的会为那首曲子发疯怎么能那么好听那么好听&#39;], [&#39;有个大胆的想法，角色演示音乐能不能塞进试用秘境，有些不看这些视频的听不到这些bgm好遗憾&#39;], [&#39;&quot;补上之前看过的大佬的节奏分析_(:з」∠)_&#39;], [&#39;【原神】揭秘须弥节奏最复杂战斗曲 斐波那契数列拍子 不愧是智慧的国度（锁屏可打？）&quot;&#39;], [&#39;将斐波那契数列融入须弥战斗音乐的节奏（9:48），看到这里真的感觉太有创意太有才了！&#39;], [&#39;芜湖，你能不能再多放点，我好喜欢看这种幕后故事&#39;], [&#39;和见面会硬刚的原宝&#39;], [&#39;能看到HoyoMix的大佬们分享创作思路和心得！！！&#39;], [&#39;&quot;在行看完: 卧槽&#39;], [&#39;内行看完: 卧槽&quot;&#39;], [&#39;我说怎么最近上线专辑里的那个曲子不叫狮尾之舞，而且万磁王吹的那一段旋律也有点不一样，原来雨林和沙漠的这首曲子是不一样的&#39;], [&#39;就爱看幕后创作，感谢hoyomix和音乐家们的精彩演绎&#39;], [&#39;虽然我不懂音乐但我知道背后有一个团队在默默付出，身为旅行者的我唯一能做的就是打开游戏浏览提瓦特的每一个角落，顺便上缴我的工资&#39;], [&#39;没有想到一次封闭集训竟然使我不见二次元不听游戏曲的朋友喜欢上了hoyomix的音乐，果然音乐的感染力从来就是互通互明的&#39;], [&#39;沙漠里我在盗墓的时候有一支超级恢宏的弦乐，独具埃及神秘的风格，非常有电影感。当时一进入陵墓的时候音乐适时响起，真有种我就是这部盗墓电影的主角正徐徐打开神秘埃及的面纱的感觉。&#39;], [&#39;希望以后能让丁谦、赵鑫和姜以君这三位老师也说两句视频里有五人开会的场景，这次没亮名字的应该就是这三位能在ost署名的？不管怎样都要谢谢hoyo-mix全员给大伙带来这么好的游戏音乐，这幕后我还能再看十遍&#39;], [&#39;Hoyomix的音乐，每次都会带来新的惊喜和享受，每到一个新地区，音乐总是自然而然的融入画面，从须弥城开浪船到维摩庄至奥摩斯港这一路上随着场景变化bgm搭配画面带来的视听享受，森林书遇到死域时紧张诡秘的战斗音乐，桓那兰那大梦的曲调，到最后在失梦的国土与无留陀化身的决战，踏入阿如村感受到沙漠异域风情，靠近赤王陵时的震撼和魄力，与剧情和画面场景搭配的音乐共同营造了原神某一地区的印象，hoyomix真的是在探索和突破中成了非常了不起的音乐团队，而且还在不断的倾听世界的声音，兼收并蓄，突破自我，让人不禁期待起枫丹纳塔至冬等之后的音乐又会是怎样的让人沉醉和享受&#39;], [&#39;这些是货真价实地财富，不仅仅是作品，这些一路过来的经验和如何将不同文化融合在同一首乐曲的经验和如何与世界审美接轨，如何与世界各地的艺术家共同创作的经历和能力这些都是宝贵的财富。原宝你做得好啊！&#39;], [&#39;原神这款游戏的成功音乐团队的功劳至少占到40%&#39;], [&#39;这期太短了吧，相比稻妻音乐幕后&#39;], [&#39;原神的每次幕后我都能看到原神的开发组们的满满的热爱&#39;], [&#39;&quot;陈致逸：我的音乐采用了斐波那契数列。&#39;], [&#39;我：刚学会算法实现斐波那契数列&quot;&#39;], [&#39;我已经一分钟没听见粥友说“钢琴不插电没声”了&#39;], [&#39;你们到底领先我们冒险家多少进度呢？音乐魔神们。&#39;], [&#39;所以赛诺和妮露的PV开1.25就很带感，是角色主题刻意让音乐缓下来的&#39;], [&#39;还有人记得消失的志琼吗&#39;], [&#39;说实话，角色设计越来越跟不上音乐和地图了，甚至连原魔设计3.0都在进步。&#39;], [&#39;对于这些会音乐的人来说，他们应该有一个我这个普通人无法感知的世界&#39;], [&#39;宛老师我也一直很爱你啊。神子的机思太好听了&#39;], [&#39;别往下翻了十连双黄真菌&#39;], [&#39;所以陈老师懂多少种乐器。我确实很好奇玩音乐的人学了一手钢琴，未来学其他乐器适应性会更强更快是么。其实就单纯好奇，毕竟以前玩v家扒谱只会看简谱抄作业&#39;], [&#39;质量很高！这是我能不花598听的吗&#39;], [&#39;米哈游招募大音乐家:陈致逸&#39;], [&#39;呜哇啊啊啊啊我超喜欢须弥交响乐主题曲部分！！就是因为很有天方夜谭内味啊啊啊啊啊啊！！！我超喜欢天方夜谭！！真的好棒啊啊啊啊啊啊啊呜呜呜呜呜呜呜&#39;], [&#39;可能是因为国家原型的原因，中国和日本大家其实接触的很多，璃月和稻妻的音乐都很棒，但是不会就是特别眼前一亮的感觉，但须弥就是纯纯的异域风情，平常听的少，然后突然进入一个全新的国度与文化带来的，是不一样的体验&#39;], [&#39;回去复习了下，才发现足迹pv里面须弥这一段的bgm就是须弥主题曲，七国的音乐在那时候就已经做好了，太牛了&#39;], [&#39;卧槽三年前？？那现在已经完成了至冬了吧&#39;], [&#39;好想看坨子哥战斗音乐的幕后啊&#39;], [&#39;我想起来须弥有一段战斗音乐解析出来后发现每一小节是以斐波那契数列进行递增的，当时就一整个人被震惊到了，很难想象音乐居然能与数学进行这样的结合。也不得不佩服陈致逸老师以及众多hoyo-mix的大佬的奇思妙想&#39;], [&#39;虽然我听不懂但是下次可以再长一点吗求求了hoyomix我的神呜呜呜呜&#39;], [&#39;死域的音乐确实吓人，好几次因为这音乐完全不想进死域。&#39;], [&#39;那个岩神像想要&#39;], [&#39;神仙音乐团队，提前开始期待枫丹音乐&#39;], [&#39;感谢HoYo-Mix，陈老师&#39;], [&#39;音乐是我入坑一大原因&#39;], [&#39;看完只能说：太专业了&#39;], [&#39;苑老师终于在花絮里露脸了！！！大爱HOYO-MiX&#39;], [&#39;【原神】揭秘须弥节奏最复杂战斗曲 斐波那契数列拍子 不愧是智慧的国度（锁屏可打？）&#39;], [&#39;每当侧滑给我气的血压飙升时，音乐团队们的表现，总是一剂最好的降压药&#39;], [&#39;我纯粹音乐外行，但是真的很喜欢原神的BGM创作，就是很有代入感，也很美，能感觉到制作团队的用心&#39;], [&#39;  @Samxqp20&#39;], [&#39;&quot;音乐是无国界的语言&#39;], [&#39;金钱是沟通的桥梁&quot;&#39;], [&#39;原神的音乐都很耐听，永远听不腻。hoyomix继续加油&#39;], [&#39;大战无留坨时的bgm也不错&#39;], [&#39;来来来那些带原神音乐会节奏的来好好瞅瞅&#39;], [&#39;&quot;站在阿如村仰望星空&#39;], [&#39;在镇守之森漫步&#39;], [&#39;在绝云间滑翔&#39;], [&#39;在摘星崖看晚霞&#39;], [&#39;我超满足的&quot;&#39;], [&#39;一想到氪的金被用来创造出了这么美妙动听的音乐 我就觉得对所有的游戏的付出都是值得的 我永远爱原神的音乐 也爱原神 给了我现实世界之上的生命体验&#39;], [&#39;太厉害了呜呜呜原宝呜呜呜呜音乐超级棒，虽然我完全不懂音乐，但是音乐好好听，可以理解到音乐蕴含的感情，不同的地区有不同的风格，之前层岩巨渊就被狠狠的惊艳了，这次的奥摩斯港和沙漠音乐都超棒我好爱！！呜呜呜呜原宝！我滴原宝！高中时候就玩崩坏二，当时就非常喜欢崩二的音乐，崩坏世界的歌姬什么的，这么多年了，米哈游一直在进步，真的感慨良多&#39;], [&#39;亲爱的旅行者，米游社跟qq音乐联合的音乐活动可以拿40原石哦&#39;], [&#39;烤肉man们要干活了&#39;], [&#39;@一期九&#39;], [&#39;看到须弥音乐的幕后出来后我突然想起来好像稻妻的没有，翻了下视频好像确实没有稻妻音乐幕后会不会补上呢&#39;], [&#39;原宝音乐部分一直都让我有新鲜感，也在不断期待着会有更多更美好更新奇的乐曲语言！hoyomix加油呀！还有，多来点幕后，我喜欢&#39;], [&#39;你个小草神你还能逃出我的手掌心吗？你不能啦。呼呼哈哈，像你这样小草神出来就是没有童年的。想逃，逃跑是没有用的(大保底)😍😍😍&#39;], [&#39;HOYO-MiX永远的神！！！我永远是HOYO-MiX的忠实信徒！！！&#39;], [&#39;在这样的音乐团队工作应该很有意思&#39;], [&#39;苑老师nb！！！&#39;], [&#39;居然是duduk。。猜萨克斯猜错了&#39;], [&#39;好短还想看看奥摩斯港的幕后&#39;], [&#39;我一开始就当个手游随便玩儿玩儿，结果，我很早就把它当做是一个由几百人共同完成的现代艺术杰作来看待了。HOYO Mix团队的每一位音乐艺术家都在我眼中发光！&#39;], [&#39;求求米哈游，枫丹的音乐把美国百老汇和伦敦西区的音乐剧搞过来吧😭😭😭希望能出个搞音乐剧的角色，枫丹&#39;], [&#39;还是那句话，我愿意在原神充钱，因为我看得到我的一份钱，他们用到了更好的地方去！&#39;], [&#39;加油！HOYO-Mix！&#39;], [&#39;米哈游，什么时候也把璃月音乐的创作灵感发一下？&#39;], [&#39;米哈游你知道今天下午就要返校的学生的痛吗！&#39;], [&#39;@灼灼霓裳&#39;], [&#39;须弥音乐真的牛逼&#39;], [&#39;疯狂表白hoyo-mix&#39;], [&#39;牌面，1w多人一起看&#39;], [&#39;虽然音乐做的很棒 但是很遗憾这视频太短了不够看啊&#39;], [&#39;3.2跟爷一起杀穿教令院&#39;], [&#39;那个限定渊下宫的战斗音乐也听好听的&#39;], [&#39;目前的剧情体验真的配不上音乐的水平 不是说剧本 演出 台词 节奏做得不好 而是音乐太过于出色了&#39;], [&#39;一直很喜欢原神的音乐！！不敢自诩原音玩家，也不是专业人士，只能算个爱好者吧每次都很期待音乐制作的幕后，让我更了解原神里的音乐都是怎么做出来的，感谢各位制作人员给我们带来的音乐盛宴！！&#39;], [&#39;太阳不起我不起！原宝就是了不起！！！&#39;], [&#39;这就是我喜欢这个米哈游公司的原因!!!&#39;], [&#39;&quot;说实话，我氪金大半都是因为游戏音乐做的太赞了。&#39;], [&#39;我很期待枫丹、纳塔、至冬的音乐。&quot;&#39;], [&#39;股东集合！&#39;], [&#39;须弥的音乐真的超级棒，当初3.0开锚点的时候跑到奥摩斯港直接愣住&#39;], [&#39;前瞻直播真能挑时间，大部分都在星期天，我们要晚修的时候&#39;], [&#39;说实话，死域那战斗音乐导致我很长一段时间不敢打死域，要不就是静音去打，真的有点吓人，我到现在3.2都快结束了也才只打了几个死域，只能说音乐真的很成功！！！！！虽然我有点小害怕&#39;], [&#39;陈老师：“我写的越来越难了”&#39;], [&#39;一年不见蔡近翰老师又变帅了🤤&#39;], [&#39;&quot;谢谢你hoyo-mix&#39;], [&#39;——爱来自璃月&quot;&#39;], [&#39;派蒙:哇嘎哒&#39;], [&#39;原宝经典12点发视频下饭，太高雅了（确信&#39;], [&#39;太短了，不够看的，快再出一段。什么？晚上前瞻了，急，绯红之王快抹去中间的等待时间&#39;], [&#39;音乐会钢琴不插电是哪个好兄弟来着？&#39;], [&#39;虽然有点ky，但是角色音乐那一段插进来说有点怪怪的，总觉得像是在平息最近pv节奏的样子&#39;], [&#39;感谢陈老师，感谢米哈游，感谢整个团队，能让我听到这么好听的音乐，是除毒奶粉之外的第二个&#39;], [&#39;hoyomix永远的神&#39;], [&#39;原神的音乐真的反反复复去听都不会腻，我去年网抑云歌单播放最多的就是各个ots，这些音乐一响起的时候就能对应不同的场景、不同的角色、不同的剧情，它们交织融合带来了原神完整的故事，也发扬宣传了很多不同国际地域的文化，真的就做到的音乐没有界限&#39;], [&#39;音乐总监蔡近翰是92年的啊 比陈致逸大佬还小8岁&#39;], [&#39;陈老师，太牛了&#39;], [&#39;没啥文化，一句陈老师和hoyomix团队yyds，感谢创作，期待以后更精彩的音乐&#39;], [&#39;我期待着枫丹那样的优雅的音乐，期待做得更好&#39;], [&#39;树与花的旋舞（视频里的最后一段音乐），真的太棒了，整个须弥最喜欢的一首&#39;], [&#39;每次去新的一个地区，我都会停下来听一遍，不得不说，真的很好，蒙德璃月稻妻须弥，在进入城的那一刻，音乐就像在给我介绍它的建筑雄伟壮观的感觉。 还有晚上歌曲的安宁让人放松下来。&#39;], [&#39;hoyomix我爱你&#39;], [&#39;没事，音乐会至少不用大会员&#39;], [&#39;虽然但是 陈老师的头发 是不是假发&#39;], [&#39;完全不够看嘛！！！幕后麻烦再加长些&#39;], [&#39;三年来……所以现在是不是已经在写至冬的音乐了&#39;], [&#39;神之灵知是常人理性无法理解的神圣知识&#39;], [&#39;原宝，在不直播我就在你身上爬&#39;], [&#39;赞美hoyo-mix 这次须弥音乐感觉每首都能拿来当铃声也不枉我一年的期待了&#39;], [&#39;原神的音乐从不让人失望，感谢各位音乐大佬！&#39;], [&#39;真的好喜欢须弥城的那首音乐啊，第一次去到须弥城听到这首音乐的时候有种全身毛孔炸裂的感觉。“欢迎来到须弥”这句话瞬间出现在我脑海里&#39;], [&#39;一人血书深渊自选战斗音乐!!!!&#39;], [&#39;好巧今天生日，前瞻预约草神，千万不要歪哦&#39;], [&#39;米哈游加油&#39;], [&#39;&quot;我曾三度遭到歪小保底，因而懂得世间万物不过是欺瞒的幌子。&#39;], [&#39;我的愤怒，绝不平息。&#39;], [&#39;其一为刻晴。我的雷神，我的「母亲」。&#39;], [&#39;其为强度所左右，迎接了无用的我。&#39;], [&#39;其二为迪卢克。我的万叶，我的可莉。&#39;], [&#39;其为正义所困缚，视我为可审判之物。&#39;], [&#39;其三为七七。我的甘雨，羽翼尚未丰满的幼年僵尸。&#39;], [&#39;其为寿限所控制，抢夺了我与椰羊的约定。&#39;], [&#39;&#39;], [&#39;人绝不可信，神亦令我憎恨。我舍弃所有UP，否定并嗤笑人间一切。&#39;], [&#39;我的十连不会再被常驻染指，摒弃掉人类低劣的情感。&#39;], [&#39;我空洞的卡池，将如抽卡之刻的金光那般，以满载神性的至高十连双黄来填满。&#39;], [&#39;&#39;], [&#39;「呵呵呵...哈哈哈哈!无需恐惧，歪了的疼痛只是一瞬。」&#39;], [&#39;「纳西妲的卡池...就要到来了。」&quot;&#39;], [&#39;&quot;别闹！原神音乐会怎么可能&quot;&quot;假弹&quot;&quot;？!&quot;&#39;], [&#39;预言音乐会的节奏会到这里&#39;], [&#39;真的好厉害啊！学到了很多感谢原神背后的音乐制作团队的用心！&#39;], [&#39;自信点，应该引领世界审美&#39;], [&#39;高雅的，正确的，人文的，多元文化的&#39;], [&#39;可以看出来mihoyo一直是在进步的，从开始的蒙德到现在的须弥雨林沙漠，在地图越来越精美的同时音乐也是越做越好，这次须弥的音乐是真的做的很有感觉，沙漠的苍凉雄浑和雨林的生机和美丽还有城市的烟火气息都很好的体现了出来，期待下一次的音乐！&#39;], [&#39;没事，我看音乐会至少不用大会员&#39;], [&#39;@云伸不知处 @OptimusPrime_110&#39;], [&#39;有没有可能，我是说可能，这个是幕后创作的花絮，音画同步并不是必须的&#39;], [&#39;中国人写的印度风格的曲，然后英国团队演奏，强啊&#39;], [&#39;斐波那契 【鼓手带你听懂变拍30次的须弥战斗曲 1:18惊呆了-哔哩哔哩】 https:&#x2F;&#x2F;b23.tv&#x2F;9dMxQ07&#39;], [&#39;感谢hoyomix给我们带来这么棒的音乐，各位老师都辛苦啦，祝hoyomix越来越好&#39;], [&#39;是一个很有意义的视频，总之三连支持一波&#39;], [&#39;太强了&#39;], [&#39;音乐总是美好的。太感动了，这句话说的太好了&#39;], [&#39;今晚八点我在直播间等你，300别忘拿&#39;], [&#39;真的好用心，玩的时候也一直在感叹音乐&#39;], [&#39;借楼，最近刚回归，有没有原神群可以加一起玩，好友都无了（疫情期间退了8，9个月）ID 白暮山 100219286&#39;], [&#39;那菈是好那菈，那菈的视频我很喜欢，我也知道那菈想要圆圆的，快乐的象征，但是我的圆圆的，快乐的象征已经用完了，但是那菈可以等，等到月亮升起又落下好几次，种子长成好几百个兰那罗那么高，我就能重新获得圆圆的，快乐的象征，如果那菈等不了，还可以去桓那兰那，桓那兰那的其他兰那罗会有圆圆的，快乐的象征，但是那菈需要小心路上的无留陀，十分可怕，兰那罗进去就出不来了，祝那菈快点到达桓那兰那，森林会记住一切。&#39;], [&#39;不行了，他越看越像欧布奥特曼&#39;], [&#39;感觉以后会有光遇那样的风景且自由飞翔，等待.....&#39;], [&#39;Hoyo-mix里真的好多神仙……最近很爱姜老师，海岛皇女的曲子和森林书终章打无留陀的电音居然都是他写的不知道这个幕后花絮姜老师有没有出镜，希望下次幕后花絮更新能介绍更多团队里的其他成员&#39;], [&#39;回看一遍PV足迹每个国家的主城音乐好像都给了一小段。&#39;], [&#39;简单直接：Hoyo-mix牛逼！！！！！！&#39;], [&#39;&quot;感谢各位大佬让我听到了这么好听的曲子&#39;], [&#39;感谢各位氪佬让我听到了这么好听的曲子&#39;], [&#39;&quot;&#39;], [&#39;什么时候可以出个音游（不是活动小游戏的真的那种），hoyomix的好音乐那么多，音游人真的很馋&#39;], [&#39;好爱，整个团队都值得被夸夸&#39;], [&#39;幕后做的也很用心&#39;], [&#39;如果七圣召唤能有独特的背景音乐将是绝杀&#39;], [&#39;感谢陈老师和团队的各位，很多曲子都让人印象深刻，也很有特色&#39;], [&#39;快把3.2端上来吧 急急&#39;], [&#39;虽然有些地方听不太懂 但音乐我只觉得牛逼 好听！&#39;], [&#39;多来点幕后，无论是音乐还是美术，还是上暗杀名单的ch&#39;], [&#39;总感觉枫丹音乐应该也差不多了，未定刚过去的活动情迷贝克伦就是类似的感觉&#39;], [&#39;这下都明说了，永不会再有犟种硬说须弥跟印度无关了吧。讨厌印度也好，看不起印度也好，都是个人自由，但不能否认事实啊，这不成🇰🇷人了？&#39;], [&#39;啊啊啊啊音乐真神团队出现了！&#39;], [&#39;原神：游戏界的一艘航母&#39;], [&#39;一个个看得都魔怔了是吧，这个点竟然还有一万多个人在看，你们这都是什么审美啊，不应该有十万个人在看的吗&#39;], [&#39;太喜欢须弥的音乐了，尤其是那个战斗音乐，第一次听到，我直接和怪绕了三分钟&#39;], [&#39;须弥每个场景的音乐都有独特的美感&#39;], [&#39;&quot;节拍斐波那契数列的那首音乐…牛啊！&#39;], [&#39;刚刚自己尝试了一下数节拍，怎么数都不对，我是第一次听音乐还要查攻略，真是开眼界了&#39;], [&#39;感谢hoyomix&quot;&#39;], [&#39;看的我好感动！钱花的真的值了&#39;], [&#39;刚开须倪的时候真的是走着走着就碰到一首很和煦很令人安心的曲子，也是经常走走停停，为了曲子而休息片刻&#39;], [&#39;原神的音乐真的是我坚持玩下去的最大动力之一了，希望hoyomix团队再接再厉，给我们带来更有创新和好听的音乐。陈老师你是我永远的偶像！！！&#39;], [&#39;我们去了盗宝团基地观察到了世界各地的文物&#39;], [&#39;&quot;怎么才这点？根本就不够嘛&#39;], [&#39;音乐太好听了，hoyo-mix永远的神&quot;&#39;], [&#39;有个大佬长的好像粤知一二的主持人阿峰&#39;], [&#39;陈老师，音乐之魔神&#39;], [&#39;陌生人你好，今天是我的生日，能给我个祝福嘛&#39;], [&#39;斐波那契数列拍子也是印度音乐爱用的&#39;], [&#39;看完这个视频反手就氪了6单，满命纳西妲 我在等你&#39;], [&#39;三幻神 帅呆了&#39;], [&#39;很喜欢这种关于音乐的制作过程和分析，请&#39;], [&#39;每一个音乐背后都有它的故事，我喜欢听故事&#39;], [&#39;音乐真的YYDS！原神的音乐是我为数不多愿意在游戏外每一首都仔细听的音乐&#39;], [&#39;呜呜呜，在多来点音乐幕后吧&#39;], [&#39;我说怎么雨林那边的战斗音乐中间的奈伊笛音色怎么不对，原来搞到沙漠里去了。&#39;], [&#39;各个国家的民族乐器加上交响管乐 混合中国人文精神 你们懂得！世界迟早是我们的！陈致逸 HoYo-mix加油啊&#39;], [&#39;来次渊下宫的音乐幕后吧&#39;], [&#39;米哈游考虑做纪录片吧  太牛了&#39;], [&#39;请务必复刻剧情和武器（1&#x2F;∞）&#39;], [&#39;hoyomix yyds!!&#39;], [&#39;好好好好好&#39;], [&#39;太棒啦！我永远爱hoyomix！！！&#39;], [&#39;为什么每次听到智慧，我都会想起德丽莎的表情&#39;], [&#39;Homo-mix音乐真的好听！&#39;], [&#39;NND 硬币快不够了&#39;], [&#39;终于来了&#39;], [&#39;我永远为原神的音乐沉醉！！！&#39;], [&#39;好！！！！！&#39;], [&#39;三年我是没想到的&#39;], [&#39;牛！！&#39;], [&#39;太棒了&#39;], [&#39;好耶 终于来了！&#39;], [&#39;音乐真的很棒哎很魔性听得很快乐&#39;], [&#39;奇怪的知识盲区增加了&#39;], [&#39;听不太懂，但是不明觉厉&#39;], [&#39;兰那罗：错付了&#39;], [&#39;太强了&#39;], [&#39;各位旅行者都看完了吧？看懂了吧？那谁来摸进一下？&#39;], [&#39;真的好棒啊！玩游戏，游社区，享受音乐，体验剧情，最让我有幸福感满足感的游戏了！&#39;], [&#39;&quot;&#39;], [&#39;感谢陪伴~&quot;&#39;], [&#39;用音乐构筑世界！&#39;], [&#39;你永远可以相信hoyo-mix！&#39;], [&#39;看这个像在看纪录片一样哈哈哈，我特别喜欢这些幕后设计，涨涨姿势&#39;], [&#39;能够把游戏的核心之一，音乐的创作思路等一系列的核心都分享出来，真的可以看出mhy的格局了&#39;], [&#39;下次拍一个两个小时的纪录片吧，十五分钟不够看啊&#39;], [&#39;真的太棒嘞！不仅是音乐，更是创作音乐的人们！&#39;], [&#39;突然想到，雷神说过她想把神之心改造成供能装置，但是她的技术对神之心不起作用，但是虚空最大化的输出功率居然可以导出神之心的力量?!&#39;], [&#39;我是棘棘国王和大风急官你们都别急，让我先急&#39;], [&#39;米哈游的音乐一直不会让玩家失望&#39;], [&#39;&#39;], [&#39;陈老师！我是您的斯旺！&#39;], [&#39;烤肉党们上班了&#39;], [&#39;&quot;璃月蒙德的音乐我都是游戏外听得比较多，&#39;], [&#39;但百人一揆传送门附近那首绫华曲变奏和绀田村bgm、以及须弥《原神》须弥篇OST「智妙明论之林」宣传MV 1:00起这首&#39;], [&#39;每次游戏里听到都会把它听完，挪不动道啊&quot;&#39;], [&#39;原宝宠粉啊，说要看制作特辑就有。&#39;], [&#39;哇，陈老师好个性，带着小头盔&#39;], [&#39;陈老师！！！&#39;], [&#39;通篇看下来，没看懂 就是感觉好牛逼&#39;], [&#39;好胆，敢这时候发&#39;], [&#39;苑老终于露脸了，他作曲编曲的荒波椛叶（万叶pv），流风无涯（万叶角色），风仪之舞（绫华角色），硝华流焰（宵宫角色）都超级带感&#39;], [&#39;这次幕后很有意义啊！ 加油呀，HOYO-MiX&#39;], [&#39;现在已经在准备至冬的主题曲音乐了吗&#39;], [&#39;&quot;9:47 &#39;], [&#39;&quot;&#39;], [&#39;几乎就是记录片（褒义&#39;], [&#39;估计现在已经开始枫丹的音乐创作了吧&#39;], [&#39;音乐不需要实质的语言，音乐本身就是一种语言，它的旋律，音律，音调和给人代入感就能告诉你好与坏&#39;], [&#39;想听兰那罗合唱的音乐mv，真的太好听了所以求求了！！！≥﹏≤&#39;], [&#39;你以为我那钱都是给谁花的，那都是给Hoyomix和陈老师花的&#39;], [&#39;牛逼呜呜呜呜我好喜欢hoyomix，感觉随着游戏的推进，音乐越做越好了。是那种单独拎出来就特别特别优秀的好，也是和探索体验环环相扣的好。开须弥之前我还害怕，稻妻鹤观渊下宫给了我那么大的期待，须弥会让我失望。但是没有！！！！须弥！！！hoyomix！！！！！牛逼！！！！！！！！！&#39;], [&#39;已经点亮第三命座的HOYO-MiX&#39;], [&#39;一群不懂音乐的人一起津津有味的看着不懂的音乐解说&#39;], [&#39;陈老师yyds hoyo-mix&#39;], [&#39;以前大家看到的只是陈老师，而现在看到的是hoyo-mix&#39;], [&#39;hoyo-mix真厉害&#39;], [&#39;所以没说奥莫斯港是因为这甚至对他们来说不算挑战吗&#39;], [&#39;三年来一直在酝酿，蓄势待发&#39;], [&#39;音乐生来学习音乐创作，虽然我是学键盘乐器的&#39;], [&#39;虽然我看得懂每一个字，但是我不能理解他们组合起来说的是什么意思，我也不懂音乐背后的故事。不过我有一点是知道的，音乐是真的好听！！&#39;], [&#39;全世界的大佬一起探讨音乐，为我们演奏！何等美妙的感觉&#39;], [&#39;惊坐起&#39;], [&#39;陈致逸老师我的神啊啊啊啊啊啊啊！！！希望能听到更多好听的音乐！HOYO_Mix冲！！！&#39;], [&#39;原神的音乐一直都特别用心啊！！&#39;], [&#39;虽然但是，我好希望赤王陵的奇观回来啊。。&#39;], [&#39;幕后故事终于发了！等你好久了&#39;], [&#39;期待着3.2版本的新音乐，冲啊！&#39;], [&#39;卧槽，原来陈致逸长这样，我以为年龄会很大&#39;], [&#39;陈老师yyds&#39;], [&#39;我可太喜欢看这些了&#39;], [&#39;陈老师yyds&#39;], [&#39;真的很感谢陈老师和制作团队，须弥的音乐真的很动听，须弥给我的感官和体验音乐占了一半疯狂表白喧繁之港，旅人的遐思（应该是这个吧）都很棒，翠翎恐蕈的那个音乐打起架来也能给我带来紧张刺激的感觉&#39;], [&#39;虽然一点都不懂音乐，但是就觉得好听，谢谢你米忽悠&#39;], [&#39;好久没见陈老师了！陈老师yyds！这次还见到了其他一起制作音乐的老师们！太强了！！&#39;], [&#39;陈致逸老师yyds&#39;], [&#39;终于端上来了罢&#39;], [&#39;原神乐理小课堂开课辣&#39;], [&#39;这一次的音乐幕后和上一次有点不一样啊，我还想看后面的音乐团队的选择呢。&#39;], [&#39;陈老师YYDS&#39;], [&#39;那个 蔡老师真帅&#39;], [&#39;hoyo-mix说到一点就是，他们在做游戏时是“把中式审美融入世界的文化中”，不是我们玩家平时说的“用中式价值观去讲世界的故事”。可能我有些过度解读，但这两个意思一样的句子其实展现出来的是两种截然不同的态度，我想这可能也是原神里虽然讲的实际上还是中式价值观的故事，但依旧能从中感受到对参考地区的人文保持了极大尊重的原因吧&#39;], [&#39;拜托，这可是《原神音乐世界》啊！&#39;], [&#39;须弥的音乐真的给人一种神秘森林的感觉&#39;], [&#39;真的太感动了&#39;], [&#39;原来是这样解决的吗？太厉害了！！&#39;], [&#39;Hoyomix！！！我爱你！音乐太棒了！期待枫丹的音乐！！！！！&#39;], [&#39;感谢演奏音乐的团队！须弥音乐确实给人以深刻印象&#39;], [&#39;我恨不得它把所有的音乐录制过程放出来，我直接全看完！&#39;], [&#39;没学过音乐，看不懂啊，求一个大佬解释解释&#39;], [&#39;很喜欢须弥音乐&#39;], [&#39;原神的音乐真就从入坑开始就深深震撼到我，直到现在从未失望过&#39;], [&#39;终于等到了！！！&#39;], [&#39;&quot;好耶！那么快一点，枫丹乃至于纳塔至冬的音乐都快端上来罢&#39;], [&#39;（喜喜喜喜喜）&quot;&#39;], [&#39;太牛啦，我真的会因为音乐留下来&#39;], [&#39;俺妈说等她退休了要玩原神，因为她喜欢原神的音乐&#39;], [&#39;陈老师是真大佬 音乐是毋庸置疑的啊&#39;], [&#39;原宝，吃不了了！吃不了了！&#39;], [&#39;原宝多来点这种幕后视频好不好&#39;], [&#39;蔡近翰！卡密！&#39;], [&#39;&quot;hoyomix真的是神中神，最喜欢的音乐团队&#39;], [&#39;&#39;], [&#39;顺便路过一支崩崩崩乐队&quot;&#39;], [&#39;歪个楼，突然觉得陈老师打眼一看一看有点像老鹅&#39;], [&#39;牛逼。&#39;], [&#39;&quot;！距离上次相见，已经太久了，是300多个地球自转的时间么？还是400多个地球公转的时间呢？&#39;], [&#39;&#39;], [&#39;还记得你第一次让我连续不歪的寒夜吗？我仰望星空，你告诉我&#39;, &#39;每一次的抽卡将更加欧，更加不歪...&#39;], [&#39;&#39;], [&#39;可是，未来的经纬，亦如历史般残酷&#39;, &#39;无数次的抽卡告诉我，非洲人体质从未消失 &#39;], [&#39;七七与刻晴，依然如影随形!  妮露和阿贝多，仍旧代价高昂!&#39;], [&#39;或许，人类的文明已然能够丈量穹顶的群星&#39;, &#39;却始终无法窥探虚无的深渊&#39;], [&#39;无论是氪金还是肝，终究无法与必然歪掉的命运相抗衡么？&quot;&#39;], [&#39;原宝，有点短哈&#39;], [&#39;须弥委托每日必出游光士现的举手&#39;], [&#39;来早了！！！ye！&#39;], [&#39;可以看出原神真的很用心&#39;], [&#39;有活力的团队&#39;], [&#39;我不懂音乐，本身就是个五音不全的人，但每次到须弥城以后不管是做任务还是提交每日，只要听到那段递进式的音乐我都会停下来好好的听完，那段音乐做的真的是太棒了，hoyo-mix永远的神&#39;], [&#39;卧槽牛逼&#39;], [&#39;才十四分钟，太短了，多采访几个人多说两句呗&#39;], [&#39;妮露最后登场，你们现在知道妮露含金量吧！&#39;], [&#39;前瞻呢？让我看看！&#39;], [&#39;米哈游能不能周六晚前瞻下一次，每一次周五周天晚上有事心惊胆战的猜测池子&#39;], [&#39;&quot;无声的呼唤，剧烈的声响，还有身体骤然传来的剧烈疼痛，都逼迫着我醒来。沉睡前最后的画面，是四面涌来将我淹没的黑暗、憎恶与谩骂。&#39;], [&#39;&#39;], [&#39;我为什么还活着？我睡了多久？这是又是哪里？在无尽的黑夜中睁开双眼，从漫长的梦境里醒来，抓住最后一片透着光的碎片...这一次，命运将会走向何方                 一一可恶的教令院&quot;&#39;], [&#39;加大胡桃！&#39;], [&#39;不是「旅人的遐想」我不是很认可&#39;], [&#39;音乐会不会是宇宙的通用语言，即便是不同语言的人在一起也能演奏出美妙动听的声音，表达出强烈的情感&#39;], [&#39;疯狂刷新，想要看到角色和武器池的你&#39;], [&#39;有野心的hoyomix我觉得这会成为历史&#39;], [&#39;陈老师!!!飞扑——&#39;], [&#39;陈老师yyds&#39;], [&#39;下个版本，我要看教令院血流成河！！！我要看小草神君临天下！！！&#39;], [&#39;每天12点来瞧瞧，有惊喜&#39;], [&#39;解密什么时候有追逐战&#39;], [&#39;最喜欢的就是所有的幕后    非常喜欢&#39;], [&#39;你怎么知道我和妮露结婚了啊，旅行者们&#39;], [&#39;音乐团队太棒了，我已经等不及要玩下一个版本了！急急急急急&#39;], [&#39;今日份电子榨菜&#39;], [&#39;芜湖&#39;], [&#39;&quot;刻晴是用 匣里龙吟还是纪行的那把剑还是试作斩岩&#39;], [&#39;现在有风鹰剑但是之后会给班尼特的…&#39;], [&#39;雷和物理都行&quot;&#39;], [&#39;生错了，重新生&#39;], [&#39;&quot;原宝，来个好听音乐&#39;], [&#39;&quot;&#39;], [&#39;好家伙那首战斗音乐的节奏真是按斐波那契数列来的&#39;], [&#39;生得好，再生一个&#39;], [&#39;我是急急急急急急国王&#39;], [&#39;赶紧开个新圣遗物本吧，朕的树脂没地方用了已经&#39;], [&#39;这一次模进用的真的是超级成功！&#39;], [&#39;陈致逸yyds &#39;], [&#39;被游戏耽误的音乐大师&#39;], [&#39;我要钟离钟离我呀，曾经可是很强的！&#39;], [&#39;这3.1我是一刻也待不下去了&#39;], [&#39;你疯狂刷新的样子真狼狈&#39;], [&#39;看得出陈老师是真的超爱这份工作的！&#39;], [&#39;给我原石&#39;], [&#39;感觉学到了好多很有新鲜独特的地方&#39;], [&#39;幕后故事超有趣&#39;], [&#39;流金疾驰已经难到，这么专业的队伍都得分段完成了么？！真想有朝一日能看现场啊&#39;], [&#39;快把前瞻端上来罢&#39;], [&#39;原宝贴贴&#39;], [&#39;牛牛牛，整多点这样的，爱看&#39;]]\n\n逐行处理CSV格式数据fo&#x3D;open(&quot;D:\\\\学习\\\\组会\\数据挖掘\\\\第四次作业\\\\genshinmusic.csv&quot;,&quot;r&quot;,encoding&#x3D;&quot;utf-8&quot;)\nls&#x3D;[]\nfor line in fo:\n    line&#x3D;line.replace(&quot;\\n&quot;,&quot;&quot;)\n\n    ls&#x3D;line.split(&quot;,&quot;)\n    lns&#x3D;&quot;&quot;\n    for s in ls:\n        lns +&#x3D;&quot;&#123;&#125;\\t&quot;.format(s)\n    print(lns)\n\nfo.close()\nD:\\coder\\randomnumbers\\venv\\Scripts\\python.exe D:&#x2F;coder&#x2F;randomnumbers&#x2F;chengxusheji.py\n评论\t\n超爱看幕后纪录有不一样的感动\t\n&quot;科普一下音乐知识，\t\n“主题”：一段可以辨认的旋律，是作品的核心，可以由音乐动机组成，可以用来象征某物某人\t\n“模进”：类似把同样一句话轮流交给不同的人去说\t\n“非均分律动”：把句子重音节奏等等进行不规则划分。假如简单理解唐诗是“均分律动”，那么宋词就是“非均分律动”&quot;\t\n&quot;虽然一直很喜欢HOYO-MIX的音乐，但此前专心欣赏这些配乐仅限于在游戏外，而须弥的配乐，是我第一次在游戏进行到一半时愿意停下来去欣赏的，而且还是多次。相对于蒙德的舒缓，璃月的恢宏，稻妻的神秘，须弥音乐兼具欢快和幽远。\t\n在我的内心深处一直有一个梦，一个现实中找不到的地方。想起来可能是从小玩摩尔庄园，看吉卜力动画和爱尔兰童话糅合出来的想象。那里有郁郁葱葱的浆果丛林，溪水两边长着五颜六色的蘑菇，每到黄昏时有漫天的萤火虫飞舞。登上丛林最高的树冠可以远眺一望无际的平原，平原尽头是古国的遗迹，那些高耸的石柱诉说着它们曾经的辉煌。感谢“原神•须弥”，让我和童年幻想如此之近。\t\n我在须弥最喜欢四段配乐。第一段是奥摩斯港的配乐，我应该和大多数人一样，是在主线推进到奥摩斯港的时候注意到的。欢快的曲调显得整个港口都非常有活力。第二段是桓那兰那的配乐，贯穿整个森林书，虽然解密到处都有但从来听不腻。第三段是须弥主城的某个配乐，简谱“67176523”，第四段是降诸魔山的配乐，简谱“6271(高)765452”，这两段讨论的人较少，名字也没有，留个简谱给懂乐理的人看。它们共同的特点是都是很旷远，仿佛独自坐在港口的高塔上眺望着载满梦想的船消失在地平线。&quot;\t\n感觉这次不止是侧重陈老师，介绍了更多团队人员\t\n直播间别刷兑换码了你但凡加个原神群都会有人贴出来，每次前瞻都会给，不用老是刷屏直播间\t\n从铠甲勇士到天涯到原神，我的10岁到20岁都被陈老师拿捏了\t\n可以看出来mihoyo一直是在进步的，从开始的蒙德到现在的须弥雨林沙漠，在地图越来越精美的同时音乐也是越做越好，这次须弥的音乐是真的做的很有感觉，沙漠的苍凉雄浑和雨林的生机和美丽还有城市的烟火气息都很好的体现了出来，期待下一次的音乐！\t\n亲爱的旅行者，米游社跟qq音乐联合的音乐活动可以拿40原石哦\t\n陈老师真的好牛啊，我每一次觉得每一首歌都很符合地图谢谢陈老师呜呜呜\t\n评论区能不能多讨论一点音乐相关的内容！知道你们很急但是音乐团队这样的付出能不能多夸赞一下嘛\t\n怀里的梅比乌斯突然扭动起来了，大家有什么头绪吗\t\n真的很爱原宝的音乐呀！是用来做闹钟铃也不会感到厌烦的那种程度！\t\n说个题外话，原宝能不能加联机时传送到好友身边啊，真的很需要，不管是整活恶搞还是带萌新\t\n前瞻前瞻现在就开吧急急急我是急急国王\t\n有谁和我一样在每次登录的时候听着那飘渺的音乐想去天空岛上看看的\t\n你个小草神你还能逃出我的手掌心吗？你不能啦。呼呼哈哈，像你这样小草神出来就是没有童年的。想逃，逃跑是没有用的(大保)😍😍😍\t\n旅行者们，你们在遐想什么，遐想可以保底吗还是什么\t\n原宝在？为啥前瞻要放今天晚上？高中寄宿生今晚要返校\t\n希望要求出一个高级材料转化为低级材料的功能，然后转化出的低级材料独立于正常获取的低级材料，虽然可以升级天赋和武器，但无法再次合成\t\n原宝你还记得更新稻妻和璃月的活动吗原宝，想去璃月了\t\n&quot;不同角色去参加男生女生向前冲\t\n荧听说奖品除了冰箱还有原石...\t\n绫华和凯亚走水路\t\n雷泽:冰箱，是什么？\t\n魈宝不需要冰箱\t\n凝光和富人是赞助商\t\n萝莉组们只能在旁边观望了\t\n钟师傅用了柱子\t\n多莉派手下赢得冰箱后高价卖了出去\t\n班尼特第一关落水\t\n申鹤把大摆锤拆了\t\n甘雨中闯关时打瞌睡落水了\t\n小艾咪有些关靠奥兹过的 ，完事把冰箱赏赐给了莫娜\t\n温迪开了个风场飞了一段距离\t\n琴团长本来快落水了，但看到可莉在领奖台那边拿着蹦蹦八个蛋\t\n九条为了将军大人赢了台冰箱回来保存甜点心\t\n一斗挺嚣张，结果第一关落水\t\n大舅哥故意落水回家让托马洗衣服\t\n凯亚给迪卢克也报了一个，完事卢姥爷落水了，回家把凯亚揍了一顿\t\n阿贝多是阿贝少给他报的\t\n阿贝过关后，在雪山寻思这冰箱有啥用?\t\n冰胖胖因为吃树莓取消获奖资格\t\n柯莱给优菈报的，“这个仇，我记下了！”\t\n屑狐狸给影和五郎报了一个\t\n心海总结了攻略锦囊\t\n海哥计算出了运行轨迹\t\n队长刚把冰箱给扛回来:前年送给仆人，去年送给少女，今年就送给木偶吧\t\n结果不知哪些鳖孙给他报了《拳王争霸》，《一站到底》，《非诚勿扰》...\t\n那个女人跟主持人讲了很多甘雨和申鹤小时候的趣事，主持人回家后，被灭口；白术，烟绯和小鹿到现场，初步鉴定为自杀；胡桃收获客户一位\t\n（各位大佬有何高见？）&quot;\t\n喜欢把团队都介绍的氛围。\t\n10分左右的内容我建议大家看这个视频！【原神】揭秘须弥节奏最复杂战斗曲 斐波那契数列拍子 不愧是智慧的国度（锁屏可打？）\t\n&quot;09:53 的Fibonacci数列有大佬做了解释～\t\n【原神】揭秘须弥节奏最复杂战斗曲 斐波那契数列拍子 不愧是智慧的国度（锁屏可打？） 有空大家也能多多看看原音玩家的创作，hoyo-mix团队的创作手法和音乐评鉴都有许多新知识和乐趣&quot;\t\n省流：须弥音乐2019年原神没公测就已经开始做了，所以可以大致确定须弥在2020年刚开服那会儿就做了不少然后靠开服流水质量迅速起飞，然后2021年开稻妻那会儿传的在做枫丹也验证了，再结合2.8海岛秘境里面辛焱火山向秘境可以推断现在在做纳塔了已经，至冬也已经提上日程\t\n旅行者们，你们在遐想什么，遐想烧火棍绘制的画面吗 还是什么\t\n&quot;“把中式的语感和审美融入不同文化地区的标准”\t\n      音乐是对生活的经验性模仿，平时听到的声音影响着对声音的偏好。除开自然环境（如雨声、鸟鸣、汽笛、土壤），语音是人聆听的最丰富、最细致的对象。语言环境不同，对音乐的审美偏好不同。以民间-流行音乐为例，表音语言（如英语）的语音学特点就是辅音承载的信息更多，映射到器乐演奏上就是音头的处理，而且重音和停顿影响表达效率而不影响表意，韵母部分就可以拿来自由发挥搞和声层次。表意语言（如汉语）里面元音的调值、timing和dynamic都影响表意，所以器乐演奏更重旋律性。即使音乐是世界通行的语言，但各地都有方言呢（笑\t\n    小蔡总的这句话让我想起了米哈游最初吸引我的东西——用音乐诉说中国人眼中的世界！你现在有这份野心，也有支持这份野心的实力和影响力。同道者，加油！！！&quot;\t\n&quot;原宝可以出一些能唱的歌嘛，隔壁崩三有那么多好听的歌曲（ture，rubia等），方舟也有好多（秋绪，daydaydream等），王者都有好几首歌曲\t\n原神神女劈观质量很高，但是比较短，让风告诉你算二创（很好听）。。\t\n反正就是不够！！！多出一些嘛，求求你啦求求你啦&quot;\t\n还记得蔡老师在崩坏三五周年说过的：音乐只有在被人听到的一刻才是真的完满。这句话放在原神也非常适用啊\t\n“我们参观了大英博物馆，见到了古埃及与苏美尔文明的历史文物。”\t\n&quot;回顾一下前三国的音乐吧\t\n旅人的韵律——《原神》游戏音乐的幕后\t\n旅人的弦歌——《原神》璃月音乐的幕后\t\n旅人的幽思——《原神》稻妻音乐的幕后\t\n还有发现音乐幕后的题目都是旅人的❌❌&quot;\t\n5:07sitar演奏家说的是其他27根弦在主弦的作用下共振，所以英文应该是main string而不是mainstream1600原石不过分吧\t\n学到了！\t\n爷投的钱变成了艺术，爷骄傲\t\n“内行看门道，外行说woc”谁想出来的啊哈哈哈\t\n正常玩家可能不懂原音玩家看完这个视频有多激动\t\n原宝，b站发40分钟的长视频是被允许的，也是有人看的\t\n14分钟？我要半小时！\t\n真的很感动，每开一个新国家我最期待的就是音乐幕后部分，虽然我自己的钢琴弹的稀巴烂，而且后来因为学业繁重也不得不放下，但是也感谢钢琴把我领进音乐的大门。在我看来，音乐是人类文明、智慧、情感的结合体，是时间和空间的结合体。带上耳机去聆听音符的层次变化真的是一件很有趣很有趣的事情，像是在读一篇文章，在看一副画卷，在听一个传说。再次感谢全体hoyo-mix的老师们和演奏家们带来的动人的音乐，我也一如既往地期待着原神未来的作品。\t\n看完这个视频，反手又氪了4单\t\n把中式审美融入世界！\t\n希望各位尊重团队。不要老是说陈致逸yyds我觉得应该说hoyomix yyds。陈老师一个人没有团队的头脑风暴是很难创作出这么牛逼的曲子的。\t\n大家看看这个印度传统节奏示范，里面就出现了斐波那契数列的重音循环【【印度古典音乐】满级人类的节奏感！4.73秒111个音节，连斐波那契数列都能rap出来？！（原创解说，5P）-哔哩哔哩】 【印度古典音乐】满级人类的节奏感！4.73秒111个音节，连斐波那契数列都能rap出来？！（原创解说，5P）\t\n您团队突破需要什么材料 我去给您采\t\n从音乐爱好者的角度，每次试图从hoyomix写的旋律去猜测创作动机和意图 ，真的是很有意思的事情！也很感谢hoyomix愿意与玩家分享这些音乐本身是没有语义性的存在，但你们的创造力赋予其无限表达\t\n&quot;“我们参观了大英博物馆，见到了古埃及与苏美尔文明的历史文物。”\t\n看到这里有点没绷住&quot;\t\n球球原宝再生一个吧！不够看不够看，感觉须弥每一首曲子都可以拿来讲讲。比如妮露花神之舞的配乐那种BosaNova的感觉，比如森林书高潮那个两个版本相互嵌套的战斗音乐……不如直接开个几个小时纪录片吧（大胆发言）\t\n带节奏的逝一逝\t\n感谢所有团队成员为我们带来这么好的作品，啥也不说我先去氪个648，\t\n&quot;“创造出具有原神特色的世界音乐”\t\n居然是“原神特色的世界音乐”，而不是“世界特色的原神音乐”，这是代表着原神音乐创作者们已经不再局限于游戏，而是在创作一种新风格、新特色的严肃音乐了吗&quot;\t\n&quot;赛诺：你知道为什么阴宅里都有钢琴和邮箱吗？\t\n\t\n\t\n提纳里表面上：不知道。内心os：拜托，不是谐音梗不是谐音梗。\t\n\t\n\t\n赛诺：因为，钢琴住了几个妖，邮箱住了几个魔。（无慈悲）（唱）\t\n\t\n\t\n提纳里：cool。放到南极一定会大卖的。&quot;\t\n去年纪录片形式就蛮棒的，今年换成宣传片了\t\n&quot;蒙德——旅人的韵律\t\n璃月——旅人的弦歌\t\n稻妻——旅人的幽思\t\n须弥——旅人的遐想\t\n&quot;\t\n我们吐槽玩法，吐槽角色强度，吐槽剧情。唯独音乐是力压群口，无可吐槽的地方。\t\n幕后音乐花絮，是讲创作过程的，有的人不要来显摆自个无知。\t\n须弥音乐故事性很强啊，主城的BGM特别有生命破土而出的奇妙与宏伟，水天丛林的BGM特别有水汽与葱郁临场感，奥莫斯港的律动，桓那兰那的童真与善良，每首歌都表现的恰到好处。\t\n这是我从3.0前瞻开始一直等到现在的视频，比任何角色PV都更加期待，今天终于等到了，真的无比开心！！！但是不知道为什么，明明是含金量非常高的视频，在B站却上不了热搜，播放量也因此受到限制，原神的很多视频都有其他视频无法比拟的瞬间观看人数，播放量也是其他视频的几何倍数，却无法上B站的热搜，同时经常上热搜的确是些跟原神有关的“找宝箱”类视频，那些视频播放量并不夸张，却常常在首页挂一天，B站的热搜计算公式是不是该改改了？B站运营同学能看到吗？\t\n&quot;每个地区的特色音乐，都是该地区一张名片；\t\n到达新地区吸引人的风景只能占一半，而新音乐占领一半；如果没有音乐，这个初印象是不完美的&quot;\t\n当父母问你为什么要充648，请把这个视频发给他们。“我在投资一个世界性的音乐项目”\t\n陈老师和hoyo-mix就是游戏音乐界的瑰宝！\t\n喜欢这种幕后介绍，也喜欢了解这些大佬。\t\n其实我想看奥摩斯港那首曲子的幕后，我真的会为那首曲子发疯怎么能那么好听那么好听\t\n有个大胆的想法，角色演示音乐能不能塞进试用秘境，有些不看这些视频的听不到这些bgm好遗憾\t\n&quot;补上之前看过的大佬的节奏分析_(:з」∠)_\t\n【原神】揭秘须弥节奏最复杂战斗曲 斐波那契数列拍子 不愧是智慧的国度（锁屏可打？）&quot;\t\n将斐波那契数列融入须弥战斗音乐的节奏（9:48），看到这里真的感觉太有创意太有才了！\t\n芜湖，你能不能再多放点，我好喜欢看这种幕后故事\t\n和见面会硬刚的原宝\t\n能看到HoyoMix的大佬们分享创作思路和心得！！！\t\n&quot;在行看完: 卧槽\t\n内行看完: 卧槽&quot;\t\n我说怎么最近上线专辑里的那个曲子不叫狮尾之舞，而且万磁王吹的那一段旋律也有点不一样，原来雨林和沙漠的这首曲子是不一样的\t\n就爱看幕后创作，感谢hoyomix和音乐家们的精彩演绎\t\n虽然我不懂音乐但我知道背后有一个团队在默默付出，身为旅行者的我唯一能做的就是打开游戏浏览提瓦特的每一个角落，顺便上缴我的工资\t\n没有想到一次封闭集训竟然使我不见二次元不听游戏曲的朋友喜欢上了hoyomix的音乐，果然音乐的感染力从来就是互通互明的\t\n沙漠里我在盗墓的时候有一支超级恢宏的弦乐，独具埃及神秘的风格，非常有电影感。当时一进入陵墓的时候音乐适时响起，真有种我就是这部盗墓电影的主角正徐徐打开神秘埃及的面纱的感觉。\t\n希望以后能让丁谦、赵鑫和姜以君这三位老师也说两句视频里有五人开会的场景，这次没亮名字的应该就是这三位能在ost署名的？不管怎样都要谢谢hoyo-mix全员给大伙带来这么好的游戏音乐，这幕后我还能再看十遍\t\nHoyomix的音乐，每次都会带来新的惊喜和享受，每到一个新地区，音乐总是自然而然的融入画面，从须弥城开浪船到维摩庄至奥摩斯港这一路上随着场景变化bgm搭配画面带来的视听享受，森林书遇到死域时紧张诡秘的战斗音乐，桓那兰那大梦的曲调，到最后在失梦的国土与无留陀化身的决战，踏入阿如村感受到沙漠异域风情，靠近赤王陵时的震撼和魄力，与剧情和画面场景搭配的音乐共同营造了原神某一地区的印象，hoyomix真的是在探索和突破中成了非常了不起的音乐团队，而且还在不断的倾听世界的声音，兼收并蓄，突破自我，让人不禁期待起枫丹纳塔至冬等之后的音乐又会是怎样的让人沉醉和享受\t\n这些是货真价实地财富，不仅仅是作品，这些一路过来的经验和如何将不同文化融合在同一首乐曲的经验和如何与世界审美接轨，如何与世界各地的艺术家共同创作的经历和能力这些都是宝贵的财富。原宝你做得好啊！\t\n原神这款游戏的成功音乐团队的功劳至少占到40%\t\n这期太短了吧，相比稻妻音乐幕后\t\n原神的每次幕后我都能看到原神的开发组们的满满的热爱\t\n&quot;陈致逸：我的音乐采用了斐波那契数列。\t\n我：刚学会算法实现斐波那契数列&quot;\t\n我已经一分钟没听见粥友说“钢琴不插电没声”了\t\n你们到底领先我们冒险家多少进度呢？音乐魔神们。\t\n所以赛诺和妮露的PV开1.25就很带感，是角色主题刻意让音乐缓下来的\t\n还有人记得消失的志琼吗\t\n说实话，角色设计越来越跟不上音乐和地图了，甚至连原魔设计3.0都在进步。\t\n对于这些会音乐的人来说，他们应该有一个我这个普通人无法感知的世界\t\n宛老师我也一直很爱你啊。神子的机思太好听了\t\n别往下翻了十连双黄真菌\t\n所以陈老师懂多少种乐器。我确实很好奇玩音乐的人学了一手钢琴，未来学其他乐器适应性会更强更快是么。其实就单纯好奇，毕竟以前玩v家扒谱只会看简谱抄作业\t\n质量很高！这是我能不花598听的吗\t\n米哈游招募大音乐家:陈致逸\t\n呜哇啊啊啊啊我超喜欢须弥交响乐主题曲部分！！就是因为很有天方夜谭内味啊啊啊啊啊啊！！！我超喜欢天方夜谭！！真的好棒啊啊啊啊啊啊啊呜呜呜呜呜呜呜\t\n可能是因为国家原型的原因，中国和日本大家其实接触的很多，璃月和稻妻的音乐都很棒，但是不会就是特别眼前一亮的感觉，但须弥就是纯纯的异域风情，平常听的少，然后突然进入一个全新的国度与文化带来的，是不一样的体验\t\n回去复习了下，才发现足迹pv里面须弥这一段的bgm就是须弥主题曲，七国的音乐在那时候就已经做好了，太牛了\t\n卧槽三年前？？那现在已经完成了至冬了吧\t\n好想看坨子哥战斗音乐的幕后啊\t\n我想起来须弥有一段战斗音乐解析出来后发现每一小节是以斐波那契数列进行递增的，当时就一整个人被震惊到了，很难想象音乐居然能与数学进行这样的结合。也不得不佩服陈致逸老师以及众多hoyo-mix的大佬的奇思妙想\t\n虽然我听不懂但是下次可以再长一点吗求求了hoyomix我的神呜呜呜呜\t\n死域的音乐确实吓人，好几次因为这音乐完全不想进死域。\t\n那个岩神像想要\t\n神仙音乐团队，提前开始期待枫丹音乐\t\n感谢HoYo-Mix，陈老师\t\n音乐是我入坑一大原因\t\n看完只能说：太专业了\t\n苑老师终于在花絮里露脸了！！！大爱HOYO-MiX\t\n【原神】揭秘须弥节奏最复杂战斗曲 斐波那契数列拍子 不愧是智慧的国度（锁屏可打？）\t\n每当侧滑给我气的血压飙升时，音乐团队们的表现，总是一剂最好的降压药\t\n我纯粹音乐外行，但是真的很喜欢原神的BGM创作，就是很有代入感，也很美，能感觉到制作团队的用心\t\n  @Samxqp20\t\n&quot;音乐是无国界的语言\t\n金钱是沟通的桥梁&quot;\t\n原神的音乐都很耐听，永远听不腻。hoyomix继续加油\t\n大战无留坨时的bgm也不错\t\n来来来那些带原神音乐会节奏的来好好瞅瞅\t\n&quot;站在阿如村仰望星空\t\n在镇守之森漫步\t\n在绝云间滑翔\t\n在摘星崖看晚霞\t\n我超满足的&quot;\t\n一想到氪的金被用来创造出了这么美妙动听的音乐 我就觉得对所有的游戏的付出都是值得的 我永远爱原神的音乐 也爱原神 给了我现实世界之上的生命体验\t\n太厉害了呜呜呜原宝呜呜呜呜音乐超级棒，虽然我完全不懂音乐，但是音乐好好听，可以理解到音乐蕴含的感情，不同的地区有不同的风格，之前层岩巨渊就被狠狠的惊艳了，这次的奥摩斯港和沙漠音乐都超棒我好爱！！呜呜呜呜原宝！我滴原宝！高中时候就玩崩坏二，当时就非常喜欢崩二的音乐，崩坏世界的歌姬什么的，这么多年了，米哈游一直在进步，真的感慨良多\t\n亲爱的旅行者，米游社跟qq音乐联合的音乐活动可以拿40原石哦\t\n烤肉man们要干活了\t\n@一期九\t\n看到须弥音乐的幕后出来后我突然想起来好像稻妻的没有，翻了下视频好像确实没有稻妻音乐幕后会不会补上呢\t\n原宝音乐部分一直都让我有新鲜感，也在不断期待着会有更多更美好更新奇的乐曲语言！hoyomix加油呀！还有，多来点幕后，我喜欢\t\n你个小草神你还能逃出我的手掌心吗？你不能啦。呼呼哈哈，像你这样小草神出来就是没有童年的。想逃，逃跑是没有用的(大保底)😍😍😍\t\nHOYO-MiX永远的神！！！我永远是HOYO-MiX的忠实信徒！！！\t\n在这样的音乐团队工作应该很有意思\t\n苑老师nb！！！\t\n居然是duduk。。猜萨克斯猜错了\t\n好短还想看看奥摩斯港的幕后\t\n我一开始就当个手游随便玩儿玩儿，结果，我很早就把它当做是一个由几百人共同完成的现代艺术杰作来看待了。HOYO Mix团队的每一位音乐艺术家都在我眼中发光！\t\n求求米哈游，枫丹的音乐把美国百老汇和伦敦西区的音乐剧搞过来吧😭😭😭希望能出个搞音乐剧的角色，枫丹\t\n还是那句话，我愿意在原神充钱，因为我看得到我的一份钱，他们用到了更好的地方去！\t\n加油！HOYO-Mix！\t\n米哈游，什么时候也把璃月音乐的创作灵感发一下？\t\n米哈游你知道今天下午就要返校的学生的痛吗！\t\n@灼灼霓裳\t\n须弥音乐真的牛逼\t\n疯狂表白hoyo-mix\t\n牌面，1w多人一起看\t\n虽然音乐做的很棒 但是很遗憾这视频太短了不够看啊\t\n3.2跟爷一起杀穿教令院\t\n那个限定渊下宫的战斗音乐也听好听的\t\n目前的剧情体验真的配不上音乐的水平 不是说剧本 演出 台词 节奏做得不好 而是音乐太过于出色了\t\n一直很喜欢原神的音乐！！不敢自诩原音玩家，也不是专业人士，只能算个爱好者吧每次都很期待音乐制作的幕后，让我更了解原神里的音乐都是怎么做出来的，感谢各位制作人员给我们带来的音乐盛宴！！\t\n太阳不起我不起！原宝就是了不起！！！\t\n这就是我喜欢这个米哈游公司的原因!!!\t\n&quot;说实话，我氪金大半都是因为游戏音乐做的太赞了。\t\n我很期待枫丹、纳塔、至冬的音乐。&quot;\t\n股东集合！\t\n须弥的音乐真的超级棒，当初3.0开锚点的时候跑到奥摩斯港直接愣住\t\n前瞻直播真能挑时间，大部分都在星期天，我们要晚修的时候\t\n说实话，死域那战斗音乐导致我很长一段时间不敢打死域，要不就是静音去打，真的有点吓人，我到现在3.2都快结束了也才只打了几个死域，只能说音乐真的很成功！！！！！虽然我有点小害怕\t\n陈老师：“我写的越来越难了”\t\n一年不见蔡近翰老师又变帅了🤤\t\n&quot;谢谢你hoyo-mix\t\n——爱来自璃月&quot;\t\n派蒙:哇嘎哒\t\n原宝经典12点发视频下饭，太高雅了（确信\t\n太短了，不够看的，快再出一段。什么？晚上前瞻了，急，绯红之王快抹去中间的等待时间\t\n音乐会钢琴不插电是哪个好兄弟来着？\t\n虽然有点ky，但是角色音乐那一段插进来说有点怪怪的，总觉得像是在平息最近pv节奏的样子\t\n感谢陈老师，感谢米哈游，感谢整个团队，能让我听到这么好听的音乐，是除毒奶粉之外的第二个\t\nhoyomix永远的神\t\n原神的音乐真的反反复复去听都不会腻，我去年网抑云歌单播放最多的就是各个ots，这些音乐一响起的时候就能对应不同的场景、不同的角色、不同的剧情，它们交织融合带来了原神完整的故事，也发扬宣传了很多不同国际地域的文化，真的就做到的音乐没有界限\t\n音乐总监蔡近翰是92年的啊 比陈致逸大佬还小8岁\t\n陈老师，太牛了\t\n没啥文化，一句陈老师和hoyomix团队yyds，感谢创作，期待以后更精彩的音乐\t\n我期待着枫丹那样的优雅的音乐，期待做得更好\t\n树与花的旋舞（视频里的最后一段音乐），真的太棒了，整个须弥最喜欢的一首\t\n每次去新的一个地区，我都会停下来听一遍，不得不说，真的很好，蒙德璃月稻妻须弥，在进入城的那一刻，音乐就像在给我介绍它的建筑雄伟壮观的感觉。 还有晚上歌曲的安宁让人放松下来。\t\nhoyomix我爱你\t\n没事，音乐会至少不用大会员\t\n虽然但是 陈老师的头发 是不是假发\t\n完全不够看嘛！！！幕后麻烦再加长些\t\n三年来……所以现在是不是已经在写至冬的音乐了\t\n神之灵知是常人理性无法理解的神圣知识\t\n原宝，在不直播我就在你身上爬\t\n赞美hoyo-mix 这次须弥音乐感觉每首都能拿来当铃声也不枉我一年的期待了\t\n原神的音乐从不让人失望，感谢各位音乐大佬！\t\n真的好喜欢须弥城的那首音乐啊，第一次去到须弥城听到这首音乐的时候有种全身毛孔炸裂的感觉。“欢迎来到须弥”这句话瞬间出现在我脑海里\t\n一人血书深渊自选战斗音乐!!!!\t\n好巧今天生日，前瞻预约草神，千万不要歪哦\t\n米哈游加油\t\n&quot;我曾三度遭到歪小保底，因而懂得世间万物不过是欺瞒的幌子。\t\n我的愤怒，绝不平息。\t\n其一为刻晴。我的雷神，我的「母亲」。\t\n其为强度所左右，迎接了无用的我。\t\n其二为迪卢克。我的万叶，我的可莉。\t\n其为正义所困缚，视我为可审判之物。\t\n其三为七七。我的甘雨，羽翼尚未丰满的幼年僵尸。\t\n其为寿限所控制，抢夺了我与椰羊的约定。\t\n\t\n人绝不可信，神亦令我憎恨。我舍弃所有UP，否定并嗤笑人间一切。\t\n我的十连不会再被常驻染指，摒弃掉人类低劣的情感。\t\n我空洞的卡池，将如抽卡之刻的金光那般，以满载神性的至高十连双黄来填满。\t\n\t\n「呵呵呵...哈哈哈哈!无需恐惧，歪了的疼痛只是一瞬。」\t\n「纳西妲的卡池...就要到来了。」&quot;\t\n&quot;别闹！原神音乐会怎么可能&quot;&quot;假弹&quot;&quot;？!&quot;\t\n预言音乐会的节奏会到这里\t\n真的好厉害啊！学到了很多感谢原神背后的音乐制作团队的用心！\t\n自信点，应该引领世界审美\t\n高雅的，正确的，人文的，多元文化的\t\n可以看出来mihoyo一直是在进步的，从开始的蒙德到现在的须弥雨林沙漠，在地图越来越精美的同时音乐也是越做越好，这次须弥的音乐是真的做的很有感觉，沙漠的苍凉雄浑和雨林的生机和美丽还有城市的烟火气息都很好的体现了出来，期待下一次的音乐！\t\n没事，我看音乐会至少不用大会员\t\n@云伸不知处 @OptimusPrime_110\t\n有没有可能，我是说可能，这个是幕后创作的花絮，音画同步并不是必须的\t\n中国人写的印度风格的曲，然后英国团队演奏，强啊\t\n斐波那契 【鼓手带你听懂变拍30次的须弥战斗曲 1:18惊呆了-哔哩哔哩】 https:&#x2F;&#x2F;b23.tv&#x2F;9dMxQ07\t\n感谢hoyomix给我们带来这么棒的音乐，各位老师都辛苦啦，祝hoyomix越来越好\t\n是一个很有意义的视频，总之三连支持一波\t\n太强了\t\n音乐总是美好的。太感动了，这句话说的太好了\t\n今晚八点我在直播间等你，300别忘拿\t\n真的好用心，玩的时候也一直在感叹音乐\t\n借楼，最近刚回归，有没有原神群可以加一起玩，好友都无了（疫情期间退了8，9个月）ID 白暮山 100219286\t\n那菈是好那菈，那菈的视频我很喜欢，我也知道那菈想要圆圆的，快乐的象征，但是我的圆圆的，快乐的象征已经用完了，但是那菈可以等，等到月亮升起又落下好几次，种子长成好几百个兰那罗那么高，我就能重新获得圆圆的，快乐的象征，如果那菈等不了，还可以去桓那兰那，桓那兰那的其他兰那罗会有圆圆的，快乐的象征，但是那菈需要小心路上的无留陀，十分可怕，兰那罗进去就出不来了，祝那菈快点到达桓那兰那，森林会记住一切。\t\n不行了，他越看越像欧布奥特曼\t\n感觉以后会有光遇那样的风景且自由飞翔，等待.....\t\nHoyo-mix里真的好多神仙……最近很爱姜老师，海岛皇女的曲子和森林书终章打无留陀的电音居然都是他写的不知道这个幕后花絮姜老师有没有出镜，希望下次幕后花絮更新能介绍更多团队里的其他成员\t\n回看一遍PV足迹每个国家的主城音乐好像都给了一小段。\t\n简单直接：Hoyo-mix牛逼！！！！！！\t\n&quot;感谢各位大佬让我听到了这么好听的曲子\t\n感谢各位氪佬让我听到了这么好听的曲子\t\n&quot;\t\n什么时候可以出个音游（不是活动小游戏的真的那种），hoyomix的好音乐那么多，音游人真的很馋\t\n好爱，整个团队都值得被夸夸\t\n幕后做的也很用心\t\n如果七圣召唤能有独特的背景音乐将是绝杀\t\n感谢陈老师和团队的各位，很多曲子都让人印象深刻，也很有特色\t\n快把3.2端上来吧 急急\t\n虽然有些地方听不太懂 但音乐我只觉得牛逼 好听！\t\n多来点幕后，无论是音乐还是美术，还是上暗杀名单的ch\t\n总感觉枫丹音乐应该也差不多了，未定刚过去的活动情迷贝克伦就是类似的感觉\t\n这下都明说了，永不会再有犟种硬说须弥跟印度无关了吧。讨厌印度也好，看不起印度也好，都是个人自由，但不能否认事实啊，这不成🇰🇷人了？\t\n啊啊啊啊音乐真神团队出现了！\t\n原神：游戏界的一艘航母\t\n一个个看得都魔怔了是吧，这个点竟然还有一万多个人在看，你们这都是什么审美啊，不应该有十万个人在看的吗\t\n太喜欢须弥的音乐了，尤其是那个战斗音乐，第一次听到，我直接和怪绕了三分钟\t\n须弥每个场景的音乐都有独特的美感\t\n&quot;节拍斐波那契数列的那首音乐…牛啊！\t\n刚刚自己尝试了一下数节拍，怎么数都不对，我是第一次听音乐还要查攻略，真是开眼界了\t\n感谢hoyomix&quot;\t\n看的我好感动！钱花的真的值了\t\n刚开须倪的时候真的是走着走着就碰到一首很和煦很令人安心的曲子，也是经常走走停停，为了曲子而休息片刻\t\n原神的音乐真的是我坚持玩下去的最大动力之一了，希望hoyomix团队再接再厉，给我们带来更有创新和好听的音乐。陈老师你是我永远的偶像！！！\t\n我们去了盗宝团基地观察到了世界各地的文物\t\n&quot;怎么才这点？根本就不够嘛\t\n音乐太好听了，hoyo-mix永远的神&quot;\t\n有个大佬长的好像粤知一二的主持人阿峰\t\n陈老师，音乐之魔神\t\n陌生人你好，今天是我的生日，能给我个祝福嘛\t\n斐波那契数列拍子也是印度音乐爱用的\t\n看完这个视频反手就氪了6单，满命纳西妲 我在等你\t\n三幻神 帅呆了\t\n很喜欢这种关于音乐的制作过程和分析，请\t\n每一个音乐背后都有它的故事，我喜欢听故事\t\n音乐真的YYDS！原神的音乐是我为数不多愿意在游戏外每一首都仔细听的音乐\t\n呜呜呜，在多来点音乐幕后吧\t\n我说怎么雨林那边的战斗音乐中间的奈伊笛音色怎么不对，原来搞到沙漠里去了。\t\n各个国家的民族乐器加上交响管乐 混合中国人文精神 你们懂得！世界迟早是我们的！陈致逸 HoYo-mix加油啊\t\n来次渊下宫的音乐幕后吧\t\n米哈游考虑做纪录片吧  太牛了\t\n请务必复刻剧情和武器（1&#x2F;∞）\t\nhoyomix yyds!!\t\n好好好好好\t\n太棒啦！我永远爱hoyomix！！！\t\n为什么每次听到智慧，我都会想起德丽莎的表情\t\nHomo-mix音乐真的好听！\t\nNND 硬币快不够了\t\n终于来了\t\n我永远为原神的音乐沉醉！！！\t\n好！！！！！\t\n三年我是没想到的\t\n牛！！\t\n太棒了\t\n好耶 终于来了！\t\n音乐真的很棒哎很魔性听得很快乐\t\n奇怪的知识盲区增加了\t\n听不太懂，但是不明觉厉\t\n兰那罗：错付了\t\n太强了\t\n各位旅行者都看完了吧？看懂了吧？那谁来摸进一下？\t\n真的好棒啊！玩游戏，游社区，享受音乐，体验剧情，最让我有幸福感满足感的游戏了！\t\n&quot;\t\n感谢陪伴~&quot;\t\n用音乐构筑世界！\t\n你永远可以相信hoyo-mix！\t\n看这个像在看纪录片一样哈哈哈，我特别喜欢这些幕后设计，涨涨姿势\t\n能够把游戏的核心之一，音乐的创作思路等一系列的核心都分享出来，真的可以看出mhy的格局了\t\n下次拍一个两个小时的纪录片吧，十五分钟不够看啊\t\n真的太棒嘞！不仅是音乐，更是创作音乐的人们！\t\n突然想到，雷神说过她想把神之心改造成供能装置，但是她的技术对神之心不起作用，但是虚空最大化的输出功率居然可以导出神之心的力量?!\t\n我是棘棘国王和大风急官你们都别急，让我先急\t\n米哈游的音乐一直不会让玩家失望\t\n\t\n陈老师！我是您的斯旺！\t\n烤肉党们上班了\t\n&quot;璃月蒙德的音乐我都是游戏外听得比较多，\t\n但百人一揆传送门附近那首绫华曲变奏和绀田村bgm、以及须弥《原神》须弥篇OST「智妙明论之林」宣传MV 1:00起这首\t\n每次游戏里听到都会把它听完，挪不动道啊&quot;\t\n原宝宠粉啊，说要看制作特辑就有。\t\n哇，陈老师好个性，带着小头盔\t\n陈老师！！！\t\n通篇看下来，没看懂 就是感觉好牛逼\t\n好胆，敢这时候发\t\n苑老终于露脸了，他作曲编曲的荒波椛叶（万叶pv），流风无涯（万叶角色），风仪之舞（绫华角色），硝华流焰（宵宫角色）都超级带感\t\n这次幕后很有意义啊！ 加油呀，HOYO-MiX\t\n现在已经在准备至冬的主题曲音乐了吗\t\n&quot;9:47 \t\n&quot;\t\n几乎就是记录片（褒义\t\n估计现在已经开始枫丹的音乐创作了吧\t\n音乐不需要实质的语言，音乐本身就是一种语言，它的旋律，音律，音调和给人代入感就能告诉你好与坏\t\n想听兰那罗合唱的音乐mv，真的太好听了所以求求了！！！≥﹏≤\t\n你以为我那钱都是给谁花的，那都是给Hoyomix和陈老师花的\t\n牛逼呜呜呜呜我好喜欢hoyomix，感觉随着游戏的推进，音乐越做越好了。是那种单独拎出来就特别特别优秀的好，也是和探索体验环环相扣的好。开须弥之前我还害怕，稻妻鹤观渊下宫给了我那么大的期待，须弥会让我失望。但是没有！！！！须弥！！！hoyomix！！！！！牛逼！！！！！！！！！\t\n已经点亮第三命座的HOYO-MiX\t\n一群不懂音乐的人一起津津有味的看着不懂的音乐解说\t\n陈老师yyds hoyo-mix\t\n以前大家看到的只是陈老师，而现在看到的是hoyo-mix\t\nhoyo-mix真厉害\t\n所以没说奥莫斯港是因为这甚至对他们来说不算挑战吗\t\n三年来一直在酝酿，蓄势待发\t\n音乐生来学习音乐创作，虽然我是学键盘乐器的\t\n虽然我看得懂每一个字，但是我不能理解他们组合起来说的是什么意思，我也不懂音乐背后的故事。不过我有一点是知道的，音乐是真的好听！！\t\n全世界的大佬一起探讨音乐，为我们演奏！何等美妙的感觉\t\n惊坐起\t\n陈致逸老师我的神啊啊啊啊啊啊啊！！！希望能听到更多好听的音乐！HOYO_Mix冲！！！\t\n原神的音乐一直都特别用心啊！！\t\n虽然但是，我好希望赤王陵的奇观回来啊。。\t\n幕后故事终于发了！等你好久了\t\n期待着3.2版本的新音乐，冲啊！\t\n卧槽，原来陈致逸长这样，我以为年龄会很大\t\n陈老师yyds\t\n我可太喜欢看这些了\t\n陈老师yyds\t\n真的很感谢陈老师和制作团队，须弥的音乐真的很动听，须弥给我的感官和体验音乐占了一半疯狂表白喧繁之港，旅人的遐思（应该是这个吧）都很棒，翠翎恐蕈的那个音乐打起架来也能给我带来紧张刺激的感觉\t\n虽然一点都不懂音乐，但是就觉得好听，谢谢你米忽悠\t\n好久没见陈老师了！陈老师yyds！这次还见到了其他一起制作音乐的老师们！太强了！！\t\n陈致逸老师yyds\t\n终于端上来了罢\t\n原神乐理小课堂开课辣\t\n这一次的音乐幕后和上一次有点不一样啊，我还想看后面的音乐团队的选择呢。\t\n陈老师YYDS\t\n那个 蔡老师真帅\t\nhoyo-mix说到一点就是，他们在做游戏时是“把中式审美融入世界的文化中”，不是我们玩家平时说的“用中式价值观去讲世界的故事”。可能我有些过度解读，但这两个意思一样的句子其实展现出来的是两种截然不同的态度，我想这可能也是原神里虽然讲的实际上还是中式价值观的故事，但依旧能从中感受到对参考地区的人文保持了极大尊重的原因吧\t\n拜托，这可是《原神音乐世界》啊！\t\n须弥的音乐真的给人一种神秘森林的感觉\t\n真的太感动了\t\n原来是这样解决的吗？太厉害了！！\t\nHoyomix！！！我爱你！音乐太棒了！期待枫丹的音乐！！！！！\t\n感谢演奏音乐的团队！须弥音乐确实给人以深刻印象\t\n我恨不得它把所有的音乐录制过程放出来，我直接全看完！\t\n没学过音乐，看不懂啊，求一个大佬解释解释\t\n很喜欢须弥音乐\t\n原神的音乐真就从入坑开始就深深震撼到我，直到现在从未失望过\t\n终于等到了！！！\t\n&quot;好耶！那么快一点，枫丹乃至于纳塔至冬的音乐都快端上来罢\t\n（喜喜喜喜喜）&quot;\t\n太牛啦，我真的会因为音乐留下来\t\n俺妈说等她退休了要玩原神，因为她喜欢原神的音乐\t\n陈老师是真大佬 音乐是毋庸置疑的啊\t\n原宝，吃不了了！吃不了了！\t\n原宝多来点这种幕后视频好不好\t\n蔡近翰！卡密！\t\n&quot;hoyomix真的是神中神，最喜欢的音乐团队\t\n\t\n顺便路过一支崩崩崩乐队&quot;\t\n歪个楼，突然觉得陈老师打眼一看一看有点像老鹅\t\n牛逼。\t\n&quot;！距离上次相见，已经太久了，是300多个地球自转的时间么？还是400多个地球公转的时间呢？\t\n\t\n还记得你第一次让我连续不歪的寒夜吗？我仰望星空，你告诉我\t每一次的抽卡将更加欧，更加不歪...\t\n\t\n可是，未来的经纬，亦如历史般残酷\t无数次的抽卡告诉我，非洲人体质从未消失 \t\n七七与刻晴，依然如影随形!  妮露和阿贝多，仍旧代价高昂!\t\n或许，人类的文明已然能够丈量穹顶的群星\t却始终无法窥探虚无的深渊\t\n无论是氪金还是肝，终究无法与必然歪掉的命运相抗衡么？&quot;\t\n原宝，有点短哈\t\n须弥委托每日必出游光士现的举手\t\n来早了！！！ye！\t\n可以看出原神真的很用心\t\n有活力的团队\t\n我不懂音乐，本身就是个五音不全的人，但每次到须弥城以后不管是做任务还是提交每日，只要听到那段递进式的音乐我都会停下来好好的听完，那段音乐做的真的是太棒了，hoyo-mix永远的神\t\n卧槽牛逼\t\n才十四分钟，太短了，多采访几个人多说两句呗\t\n妮露最后登场，你们现在知道妮露含金量吧！\t\n前瞻呢？让我看看！\t\n米哈游能不能周六晚前瞻下一次，每一次周五周天晚上有事心惊胆战的猜测池子\t\n&quot;无声的呼唤，剧烈的声响，还有身体骤然传来的剧烈疼痛，都逼迫着我醒来。沉睡前最后的画面，是四面涌来将我淹没的黑暗、憎恶与谩骂。\t\n\t\n我为什么还活着？我睡了多久？这是又是哪里？在无尽的黑夜中睁开双眼，从漫长的梦境里醒来，抓住最后一片透着光的碎片...这一次，命运将会走向何方                 一一可恶的教令院&quot;\t\n加大胡桃！\t\n不是「旅人的遐想」我不是很认可\t\n音乐会不会是宇宙的通用语言，即便是不同语言的人在一起也能演奏出美妙动听的声音，表达出强烈的情感\t\n疯狂刷新，想要看到角色和武器池的你\t\n有野心的hoyomix我觉得这会成为历史\t\n陈老师!!!飞扑——\t\n陈老师yyds\t\n下个版本，我要看教令院血流成河！！！我要看小草神君临天下！！！\t\n每天12点来瞧瞧，有惊喜\t\n解密什么时候有追逐战\t\n最喜欢的就是所有的幕后    非常喜欢\t\n你怎么知道我和妮露结婚了啊，旅行者们\t\n音乐团队太棒了，我已经等不及要玩下一个版本了！急急急急急\t\n今日份电子榨菜\t\n芜湖\t\n&quot;刻晴是用 匣里龙吟还是纪行的那把剑还是试作斩岩\t\n现在有风鹰剑但是之后会给班尼特的…\t\n雷和物理都行&quot;\t\n生错了，重新生\t\n&quot;原宝，来个好听音乐\t\n&quot;\t\n好家伙那首战斗音乐的节奏真是按斐波那契数列来的\t\n生得好，再生一个\t\n我是急急急急急急国王\t\n赶紧开个新圣遗物本吧，朕的树脂没地方用了已经\t\n这一次模进用的真的是超级成功！\t\n陈致逸yyds \t\n被游戏耽误的音乐大师\t\n我要钟离钟离我呀，曾经可是很强的！\t\n这3.1我是一刻也待不下去了\t\n你疯狂刷新的样子真狼狈\t\n看得出陈老师是真的超爱这份工作的！\t\n给我原石\t\n感觉学到了好多很有新鲜独特的地方\t\n幕后故事超有趣\t\n流金疾驰已经难到，这么专业的队伍都得分段完成了么？！真想有朝一日能看现场啊\t\n快把前瞻端上来罢\t\n原宝贴贴\t\n牛牛牛，整多点这样的，爱看\t\n\n进程已结束,退出代码0\n\n一维数据写入CSV文件fo&#x3D;open(&quot;..\\\\genshinmusic.csv&quot;,&quot;w&quot;,encoding&#x3D;&quot;utf-8&quot;)\nls&#x3D;[&#39;valanala&#39;,&#39;genshin&#39;,&#39;music&#39;]\nfo.write(&quot;,&quot;.join(ls)+&quot;\\n&quot;)\nfo.close()\n\n二维数据写入CSV文件fr&#x3D;open(&quot;D:\\\\coder\\\\randomnumbers\\\\jingu.csv&quot;,&quot;r&quot;)\nfw&#x3D;open(&quot;D:\\\\coder\\\\randomnumbers\\\\jinguout.csv&quot;,&quot;w&quot;)\nls&#x3D;[]\nfor line in fr:\n    line&#x3D;line.replace(&quot;\\n&quot;,&quot;&quot;)\n    ls.append(line.split(&quot;,&quot;))\nfor i in range(len(ls)):\n    for j in range(len(ls[i])):\n        if ls[i][j].replace(&quot;.&quot;,&quot;&quot;).isnumeric():\n            ls[i][j]&#x3D;&quot;&#123;:.2&#125;%&quot;.format(float(ls[i][j])&#x2F;100)\nfor row in ls:\n    print(row)\n    fw.write(&quot;,&quot;.join(row)+&quot;\\n&quot;)\nfr.close()\nfw.close()\n\n\n\n\n\n\n\n\n\n[‘城市’, ‘环比’, ‘同比’, ‘碇真’][‘北京’, ‘1.0%’, ‘1.2%’, ‘1.2%’][‘上海’, ‘1.0%’, ‘1.3%’, ‘1.3%’]\n\nCSV和JSON格式相互转换import json\nfr&#x3D;open(&quot;D:\\\\coder\\\\randomnumbers\\\\jingu.csv&quot;,&quot;r&quot;)\nls&#x3D;[]\nfor line in fr:\n    line&#x3D;line.replace(&quot;\\n&quot;,&quot;&quot;)\n    ls.append(line.split(&#39;,&#39;))\nfr.close()\nfw&#x3D;open(&quot;D:\\\\coder\\\\randomnumbers\\\\jingu.json&quot;,&quot;w&quot;)\nfor i in range(1,len(ls)):\n    ls[i]&#x3D;dict(zip(ls[0],ls[i]))\njson.dump(ls[1:],fw,sort_keys&#x3D;True,indent&#x3D;4)\nfw.close()\n\n\n\n\n\n\n\n\n\n[{   “\\u540c\\u6bd4”: “120.7”,   “\\u57ce\\u5e02”: “\\u5317\\u4eac”,   “\\u73af\\u6bd4”: “101.5”,   “\\u7887\\u771f”: “121.4”},{   “\\u540c\\u6bd4”: “127.3”,   “\\u57ce\\u5e02”: “\\u4e0a\\u6d77”,   “\\u73af\\u6bd4”: “101.2”,   “\\u7887\\u771f”: “127.8”}]\n如果要json库输出中文字符：import json\nfr&#x3D;open(&quot;D:\\\\coder\\\\randomnumbers\\\\jingu.csv&quot;,&quot;r&quot;)\nls&#x3D;[]\nfor line in fr:\n    line&#x3D;line.replace(&quot;\\n&quot;,&quot;&quot;)\n    ls.append(line.split(&#39;,&#39;))\nfr.close()\nfw&#x3D;open(&quot;D:\\\\coder\\\\randomnumbers\\\\jingu.json&quot;,&quot;w&quot;)\n\nfor i in range(1,len(ls)):\n    ls[i]&#x3D;dict(zip(ls[0],ls[i]))\njson.dump(ls[1:],fw,sort_keys&#x3D;True,indent&#x3D;4,ensure_ascii&#x3D;False)\nfw.close()\n\n\n\n\n\n\n\n\n\n[{   “同比”: “120.7”,   “城市”: “北京”,   “环比”: “101.5”,   “碇真”: “121.4”},{   “同比”: “127.3”,   “城市”: “上海”,   “环比”: “101.2”,   “碇真”: “127.8”}]\nList 列表类型及操作\n\n\n&gt;&gt;&gt;ls&#x3D;[425,&quot;BIT&quot;,[10,&quot;CS&quot;],425]\n&gt;&gt;&gt;ls\nOut[3]: [425, &#39;BIT&#39;, [10, &#39;CS&#39;], 425]\n&gt;&gt;&gt;ls[2][-1][0]\nOut[4]: &#39;C&#39;\n&gt;&gt;&gt;list((425,&quot;BIT&quot;,[10,&quot;CS&quot;],425))\nOut[5]: [425, &#39;BIT&#39;, [10, &#39;CS&#39;], 425]\n&gt;&gt;&gt;list(&quot;若你困于无风之地&quot;)\nOut[6]: [&#39;若&#39;, &#39;你&#39;, &#39;困&#39;, &#39;于&#39;, &#39;无&#39;, &#39;风&#39;, &#39;之&#39;, &#39;地&#39;]\n&gt;&gt;&gt;list()\nOut[7]: []\n\n以代码的形式：\nls&#x3D;[425,&quot;BIT&quot;,[10,&quot;CS&quot;],425]\nprint(ls)\nprint(ls[2][-1][0])\nprint(ls[2][1][1])\n\n[425, ‘BIT’, [10, ‘CS’], 425]CS\n \n&gt;&gt;&gt;vlist &#x3D;list(range(5))\n&gt;&gt;&gt;vlist\nOut[3]: [0, 1, 2, 3, 4]\n&gt;&gt;&gt;len(vlist[2:])\nOut[4]: 3\n&gt;&gt;&gt;2 in vlist\nOut[5]: True\n&gt;&gt;&gt;vlist[3]&#x3D;&#39;python&#39;\n&gt;&gt;&gt;vlist\nOut[7]: [0, 1, 2, &#39;python&#39;, 4]\n&gt;&gt;&gt;vlist[1:3]&#x3D;[&quot;new_bit&quot;,&quot;new_computer&quot;,123]\n&gt;&gt;&gt;vlist\nOut[9]: [0, &#39;new_bit&#39;, &#39;new_computer&#39;, 123, &#39;python&#39;, 4]\n&gt;&gt;&gt;vlist[1:3]&#x3D;[&quot;fewer&quot;]\n&gt;&gt;&gt;vlist\nOut[11]: [0, &#39;fewer&#39;, 123, &#39;python&#39;, 4]\n\n以代码的形式：vlist&#x3D;[0, &#39;fewer&#39;, 123, &#39;python&#39;, 4]\nfor e in vlist:\n    print(e, &quot;&quot;,end&#x3D;&quot;&quot;)\n\n\n\n\n\n\n\n\n\n0 fewer 123 python 4 \n","slug":"python期中准备","date":"2022-11-03T15:05:49.000Z","categories_index":"","tags_index":"信管","author_index":"Algernon"},{"id":"76ec75cbd224e987501c0cfda9dee811","title":"【文本分析】(一)","content":"浅浅试一下import jieba\nimport jieba.posseg as psg\nfrom collections import Counter\ntext &#x3D; &#39;我现在在jupyter notebook上写文本分析的代码！&#39;\ncut &#x3D; jieba.cut(text)\n&#39;&#x2F;&#39;.join(cut)\nprint(text)\n\n\n\n\n\n\n\n\n\n我现在在jupyter notebook上写文本分析的代码！\n1.试图将句子最准确的切开，适合文本分析：\nwords &#x3D; psg.cut(text)\nfor word,flag in words:\n    print(word,flag)\n我 r\n现在 t\n在 p\njupyter eng\n  x\nnotebook eng\n上写 v\n文本 n\n分析 vn\n的 uj\n代码 n\n！ x\n2.把句子中所有可以组成词的词语都扫描出来，速度快，但不能解决歧义：\n&#39;&#x2F;&#39;.join(jieba.cut(text,True))\n\n\n\n\n\n\n\n\n\n‘我/现在/在/jupyter// //notebook/上/写/文本/本分/分析/的/代码/！’\n数据采集\nimport jieba\nimport jieba.analyse\n\n# 待分词的文本路径\nsourceTxt &#x3D; r&quot;C:\\Users\\83854\\Documents\\shujvji\\news1.txt&quot;\n# 分好词后的文本路径\ntargetTxt &#x3D; r&quot;C:\\Users\\83854\\Documents\\shujvji\\fenci1.txt&quot;\n\n# 对文本进行操作\nwith open(sourceTxt, &#39;r&#39;, encoding &#x3D; &#39;utf-8&#39;) as sourceFile, open(targetTxt, &#39;a+&#39;, encoding &#x3D; &#39;utf-8&#39;) as targetFile:\n    for line in sourceFile:\n        seg &#x3D; jieba.cut(line.strip(), cut_all &#x3D; False)\n        # 分好词之后之间用空格隔断\n        output &#x3D; &#39; &#39;.join(seg)\n        targetFile.write(output)\n        targetFile.write(&#39;\\n&#39;)\n    prinf(&#39;写入成功！&#39;)\n\n# 提取关键词\nwith open(targetTxt, &#39;r&#39;, encoding &#x3D; &#39;utf-8&#39;) as file:\n    text &#x3D; file.readlines()\n    &quot;&quot;&quot;\n    几个参数解释：\n        * text : 待提取的字符串类型文本\n        * topK : 返回TF-IDF权重最大的关键词的个数，默认为20个\n        * withWeight : 是否返回关键词的权重值，默认为False\n        * allowPOS : 包含指定词性的词，默认为空\n    &quot;&quot;&quot;\n    keywords &#x3D; jieba.analyse.extract_tags(str(text), topK &#x3D; 10, withWeight&#x3D;True, allowPOS&#x3D;())\n    print(keywords)\n\tprint(&#39;提取完毕！&#39;)\n\n\nimport jieba\n\nimport jieba\nimport re\n\n#打开要处理的文章\nreader &#x3D; open( r&quot;C:\\Users\\83854\\Documents\\shujvji\\news1.txt&quot;,&#39;r&#39;,encoding&#x3D;&#39;utf8&#39;)\nstrs &#x3D;reader.read()\nresult &#x3D; open( r&quot;C:\\Users\\83854\\Documents\\shujvji\\fenci1.txt&quot;,&quot;w&quot;)\n\n# 分词，去重，列表\nword_list &#x3D; jieba.cut(strs,cut_all&#x3D;True)\n# 正则表达式去除数字，符号，单个字\nnew_words &#x3D; []\nfor i in word_list:\n    m &#x3D; re.search(&quot;\\d+&quot;,i)\n    n &#x3D; re.search(&quot;\\W+&quot;,i)\n    if not m and  not n and len(i)&gt;1:\n        new_words.append(i)\n\n# 统计词频\nword_count &#x3D; &#123;&#125; # 创建字典\nfor i in set(new_words): # 用set去除list中的重复项\n    word_count[i] &#x3D; new_words.count(i)\n\n# 格式整理\nlist_count &#x3D; sorted(word_count.items(),key&#x3D;lambda co:co[1],reverse&#x3D;True)\n\n# 打印结果\nfor i in range(300):\n    print(list_count[i],file&#x3D;result)\n\n#关闭文件\nreader.close()\nresult.close()\n\n\n","slug":"文本分析1","date":"2022-11-03T15:05:49.000Z","categories_index":"机器学习","tags_index":"文本分析","author_index":"Algernon"},{"id":"a8f74615832b979b7524788c050fb00a","title":"【区块链技术与应用】（三）","content":"\n引言本次内容复杂、且报错较多，部分图片没有放在最终文档里，而部分报错放在文档中，最终也没有删去。解决报错比单纯对着代码跑一遍难度更大，也更有意义，故予以保留。\n内容1.0  内容准备这一部分作为一些常用命令的存储，显然，我在搭建环境的过程中重新配置的一遍之前的内容。（呜呜呜破防了）\n\n\n\n\n\n\n\n\n\n正文从1.1开始\nsudo docker rm $(sudo docker ps -aq)\n\n\n\n\n\n\n\n\n\nhttps://blog.csdn.net/qq_28421553/article/details/126835125\n$ mkdir -p $GOPATH&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;\n$ cd $GOPATH&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;\n$ git clone https:&#x2F;&#x2F;github.com&#x2F;hyperledger&#x2F;fabric.git\n$ PROJECT_VERSION&#x3D;2.2.8\n$ LD_FLAGS&#x3D;&quot;-X github.com&#x2F;hyperledger&#x2F;fabric&#x2F;common&#x2F;metadata.Version&#x3D;$&#123;PROJECT_VERSION&#125; \\\n            -X github.com&#x2F;hyperledger&#x2F;fabric&#x2F;common&#x2F;metadata.BaseDockerLabel&#x3D;org.hyperledger.fabric \\\n            -X github.com&#x2F;hyperledger&#x2F;fabric&#x2F;common&#x2F;metadata.DockerNamespace&#x3D;hyperledger \\\n            -X github.com&#x2F;hyperledger&#x2F;fabric&#x2F;common&#x2F;metadata.BaseDockerNamespace&#x3D;hyperledger&quot;\n\n$ CGO_CFLAGS&#x3D;&quot; &quot; go install -tags &quot;&quot; -ldflags &quot;$LD_FLAGS&quot; \\\ngithub.com&#x2F;hyperledger&#x2F;fabric&#x2F;cmd&#x2F;peer\nhttps:&#x2F;&#x2F;hyperledger-fabric.readthedocs.io&#x2F;zh_CN&#x2F;release-2.2&#x2F;install.html\n# GOROOT\nexport GOROOT&#x3D;&#x2F;usr&#x2F;local&#x2F;go\n# GOROOT bin\nexport PATH&#x3D;$PATH:$GOROOT&#x2F;bin\n# GOPATH\nexport GOPATH&#x3D;$HOME&#x2F;go\n# GOPATH bin\nexport PATH&#x3D;$PATH:$GOPATH&#x2F;bin\nCGO_CFLAGS&#x3D;&quot; &quot; go install -tags &quot;&quot; -ldflags &quot;$LD_FLAGS&quot; \\\ngithub.com&#x2F;hyperledger&#x2F;fabric&#x2F;cmd&#x2F;peer\n1.1 生成证书及配置文件\n\n\n\n\n\n\n\n\nhttps://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/developing_applications.html\n代码来源：https://sunkaiyuan.blog.csdn.net/article/details/121585240\n利用cryptogen生成证书（构建一个网络所需要生成的所有证书文件）：\ncrypto 词根---加密\ngen    词根---证书\ncryptogen（使用cryptogen命令生成组织结构和身份证书文件）\n \n\n \ncryptogen\n是用于生成 Hyperledger Fabric 密钥材料的实用程序，它是作为一种为测试目的预配置网络的方式提供的，它通常不会用于生产网络的操作\n \n5个子命令：\nhelp\ngenerate     生成所有的证书命令\nshowtemplate 展示一个模板文件命令\nextend\nversion\n \n1、展示一个模板文件命令，随便找一个地新建一个文件夹 twonodes\n# 输出到终端展示\nroot@aa:~&#x2F;block&#x2F;geneg&#x2F;twonodes# cryptogen showtemplate\n# 导出一个文件\nroot@aa:~&#x2F;block&#x2F;geneg&#x2F;twonodes# cryptogen showtemplate &gt; cryptogen-config.yaml\nroot@aa:~&#x2F;block&#x2F;geneg&#x2F;twonodes# cat cryptogen-config.yaml\n# ---------------------------------------------------------------------------\n# &quot;OrdererOrgs&quot; - Definition of organizations managing orderer nodes\n# ---------------------------------------------------------------------------\nOrdererOrgs:\n  # ---------------------------------------------------------------------------\n  # Orderer   \n  # （1）排序节点的置\n  # ---------------------------------------------------------------------------\n  - Name: Orderer            # 排序节点的名称\n    Domain: example.com      # 排序节点的域名\n    EnableNodeOUs: false     # 是否使用OU配置，OU相当于组织下面的部门，我们的每个组织的下面有很多个节点，我们可以将一些节点作为类似于一个部门，\n\t                         # 也就是说你的组织下面可以有好几个部门，每个部门下面有多个节点\n    # ---------------------------------------------------------------------------\n    # &quot;Specs&quot; - See PeerOrgs below for complete description\n    # ---------------------------------------------------------------------------\n    Specs:\n      - Hostname: orderer\n \n# ---------------------------------------------------------------------------\n# &quot;PeerOrgs&quot; - Definition of organizations managing peer nodes\n# ---------------------------------------------------------------------------\nPeerOrgs:   （2）per节点的配置\n  # ---------------------------------------------------------------------------\n  # Org1                            \n  # ---------------------------------------------------------------------------\n  - Name: Org1                      # 组织1节点的名称\n    Domain: org1.example.com        # 组织1节点的域名\n    EnableNodeOUs: false            # 是否开启OU配置\n \n    # ---------------------------------------------------------------------------\n    # &quot;CA&quot;\n    # ---------------------------------------------------------------------------\n    # Uncomment this section to enable the explicit definition of the CA for this\n    # organization.  This entry is a Spec.  See &quot;Specs&quot; section below for details.\n    # ---------------------------------------------------------------------------\n \n \n    # Note: Template and Specs are not mutually exclusive.  You may define both\n    # sections and the aggregate nodes will be created for you.  Take care with\n    # name collisions\n    # ---------------------------------------------------------------------------\n    Template:               \n      Count: 1              # （3）在组织1下面生成1个节点\n      # Start: 5\n      # Hostname: &#123;&#123;.Prefix&#125;&#125;&#123;&#123;.Index&#125;&#125; # default\n      # SANS:\n      #   - &quot;&#123;&#123;.Hostname&#125;&#125;.alt.&#123;&#123;.Domain&#125;&#125;&quot;\n \n    # ---------------------------------------------------------------------------\n    # &quot;Users&quot;\n    # ---------------------------------------------------------------------------\n    # Count: The number of user accounts _in addition_ to Admin\n    # ---------------------------------------------------------------------------\n    Users:                  # （4）在组织下面有节点的概念，Users--&gt;就是真正操作节点的人的个数（操作终端的个数）\n      Count: 1\n \n  # ---------------------------------------------------------------------------\n  # Org2: See &quot;Org1&quot; for full specification\n  # ---------------------------------------------------------------------------\n  - Name: Org2\n    Domain: org2.example.com\n    EnableNodeOUs: false\n    Template:\n      Count: 1\n    Users:\n      Count: 1\n \n2、生成证书文件，--config指定配置文件\nroot@aa:~&#x2F;block&#x2F;geneg&#x2F;twonodes# cryptogen generate --config&#x3D;cryptogen-config.yaml\n# 生成了两个组织\norg1.example.com\norg2.example.com\nroot@aa:~&#x2F;block&#x2F;geneg&#x2F;twonodes# ls\ncrypto-config  cryptogen-config.yaml\nroot@aa:~&#x2F;block&#x2F;geneg&#x2F;twonodes# cd crypto-config&#x2F;\nroot@aa:~&#x2F;block&#x2F;geneg&#x2F;twonodes&#x2F;crypto-config# ls\n# 生成了一个排序节点，一个peer节点，两个组织的信息\nordererOrganizations  peerOrganizations\nroot@aa:~&#x2F;block&#x2F;geneg&#x2F;twonodes&#x2F;crypto-config# cd ordererOrganizations&#x2F;\nroot@aa:~&#x2F;block&#x2F;geneg&#x2F;twonodes&#x2F;crypto-config&#x2F;ordererOrganizations# ls\nexample.com\nroot@aa:~&#x2F;block&#x2F;geneg&#x2F;twonodes&#x2F;crypto-config&#x2F;ordererOrganizations# cd example.com&#x2F;\nroot@aa:~&#x2F;block&#x2F;geneg&#x2F;twonodes&#x2F;crypto-config&#x2F;ordererOrganizations&#x2F;example.com# ls\n# 排序节点组织的所有证书文件\nca  msp  orderers  tlsca  users\n \n这样我们就生成了组织结构，和所有的证书文件\n\n1.2 生成创世区块及通道文件生成创世区块configtxgen -profile TwoOrgsOrdererGenesis -outputBlock .&#x2F;channel-artifacts&#x2F;genesis.block -channelID fabric-channel生成通道configtxgen -profile TwoOrgsChannel -outputCreateChannelTX .&#x2F;channel-artifacts&#x2F;channel.tx -channelID mychannel生成组织1的锚节点文件configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate .&#x2F;channel-artifacts&#x2F;Org1MSPanchors.tx -channelID mychannel -asOrg Org1MSP生成组织2的锚节点文件\nconfigtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate .&#x2F;channel-artifacts&#x2F;Org2MSPanchors.tx -channelID mychannel -asOrg Org2MSP\n\n1.3 编写docker-compose文件algernon@algernon-Lenovo-Legion-Y7000:~&#x2F;twonodes$ configtxgen -profile TwoOrgsChannel -outputCreateChannelTX .&#x2F;channel-artifacts&#x2F;channel.tx -channelID mychannel\nflag provided but not defined: -outputCreateChannelTX\n\n在raft-test目录下，新建docker-compose.yaml文件。文件内容如下面所示。\n\n\n\n\n\n\n\n\n\ndocker-compose.yaml文件内容\n配置文件version: &#39;2.4&#39;\n\nvolumes:\n  orderer.example.com:\n  peer0.org1.example.com:\n  peer0.org2.example.com:\n  \nnetworks:\n  test:\n    name: twonodes_test\n\nservices:\n\n  orderer.example.com:\n    container_name: orderer.example.com\n    image: hyperledger&#x2F;fabric-orderer:latest\n    labels:\n        service: hyperledger-fabric\n    environment:\n      - FABRIC_LOGGING_SPEC&#x3D;INFO\n      - ORDERER_GENERAL_LISTENADDRESS&#x3D;0.0.0.0\n      - ORDERER_GENERAL_LISTENPORT&#x3D;7050\n      - ORDERER_GENERAL_LOCALMSPID&#x3D;OrdererMSP\n      - ORDERER_GENERAL_LOCALMSPDIR&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;msp\n      # enabled TLS\n      - ORDERER_GENERAL_TLS_ENABLED&#x3D;true\n      - ORDERER_GENERAL_TLS_PRIVATEKEY&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls&#x2F;server.key\n      - ORDERER_GENERAL_TLS_CERTIFICATE&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls&#x2F;server.crt\n      - ORDERER_GENERAL_TLS_ROOTCAS&#x3D;[&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls&#x2F;ca.crt]\n      - ORDERER_KAFKA_TOPIC_REPLICATIONFACTORY&#x3D;1\n      - ORDERER_KAFKA_VERBOSE&#x3D;true\n      - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls&#x2F;server.crt\n      - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls&#x2F;server.key\n      - ORDERER_GENERAL_CLUSTER_ROOTCAS&#x3D;[&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls&#x2F;ca.crt]\n      - ORDERER_GENERAL_BOOTSTRAPMETHOD&#x3D;none\n      - ORDERER_CHANNELPARTICIPATION_ENABLED&#x3D;true\n      - ORDERER_ADMIN_TLS_ENABLED&#x3D;true\n      - ORDERER_ADMIN_TLS_CERTIFICATE&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls&#x2F;server.crt\n      - ORDERER_ADMIN_TLS_PRIVATEKEY&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls&#x2F;server.key\n      - ORDERER_ADMIN_TLS_ROOTCAS&#x3D;[&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls&#x2F;ca.crt]\n      - ORDERER_ADMIN_TLS_CLIENTROOTCAS&#x3D;[&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls&#x2F;ca.crt]\n      - ORDERER_ADMIN_LISTENADDRESS&#x3D;0.0.0.0:7053\n#      - ORDERER_OPERATIONS_LISTENADDRESS&#x3D;orderer.example.com:9443\n#      - ORDERER_METRICS_PROVIDER&#x3D;prometheus\n    working_dir: &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric\n    command: orderer\n    volumes:\n        - .&#x2F;channel-artifacts&#x2F;genesis.block:&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;orderer.genesis.block\n        - .&#x2F;crypto-config&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp:&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;msp\n        - .&#x2F;crypto-config&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;tls&#x2F;:&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls\n        - orderer.example.com:&#x2F;var&#x2F;hyperledger&#x2F;production&#x2F;orderer\n    ports:\n      - 7050:7050\n      - 7053:7053\n    networks:\n      - test\n\n  peer0.org1.example.com:\n    container_name: peer0.org1.example.com\n    image: hyperledger&#x2F;fabric-peer:latest\n    labels:\n        service: hyperledger-fabric\n    environment:\n      #Generic peer variables\n      - CORE_VM_ENDPOINT&#x3D;unix:&#x2F;&#x2F;&#x2F;host&#x2F;var&#x2F;run&#x2F;docker.sock\n      # the following setting starts chaincode containers on the same\n      # bridge network as the peers\n      # https:&#x2F;&#x2F;docs.docker.com&#x2F;compose&#x2F;networking&#x2F;\n      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE&#x3D;twonodes_test\n      - FABRIC_LOGGING_SPEC&#x3D;INFO\n      #- FABRIC_LOGGING_SPEC&#x3D;DEBUG\n      - CORE_PEER_TLS_ENABLED&#x3D;true\n      - CORE_PEER_PROFILE_ENABLED&#x3D;true\n      - CORE_PEER_TLS_CERT_FILE&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;tls&#x2F;server.crt\n      - CORE_PEER_TLS_KEY_FILE&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;tls&#x2F;server.key\n      - CORE_PEER_TLS_ROOTCERT_FILE&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;tls&#x2F;ca.crt\n      # Peer specific variabes\n      - CORE_PEER_ID&#x3D;peer0.org1.example.com\n      - CORE_PEER_ADDRESS&#x3D;peer0.org1.example.com:7051\n      - CORE_PEER_LISTENADDRESS&#x3D;0.0.0.0:7051\n      - CORE_PEER_CHAINCODEADDRESS&#x3D;peer0.org1.example.com:7052\n      - CORE_PEER_CHAINCODELISTENADDRESS&#x3D;0.0.0.0:7052\n      - CORE_PEER_GOSSIP_BOOTSTRAP&#x3D;peer0.org1.example.com:7051\n      - CORE_PEER_GOSSIP_EXTERNALENDPOINT&#x3D;peer0.org1.example.com:7051\n      - CORE_PEER_LOCALMSPID&#x3D;Org1MSP\n \n    volumes:\n        - &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;host&#x2F;var&#x2F;run&#x2F;docker.sock\n        - .&#x2F;crypto-config&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;msp:&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;msp\n        - .&#x2F;crypto-config&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls:&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;tls\n        - peer0.org1.example.com:&#x2F;var&#x2F;hyperledger&#x2F;production\n    working_dir: &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer\n    command: peer node start\n    ports:\n      - 7051:7051\n    networks:\n      - test\n\n  peer0.org2.example.com:\n    container_name: peer0.org2.example.com\n    image: hyperledger&#x2F;fabric-peer:latest\n    labels:\n        service: hyperledger-fabric\n    environment:\n      #Generic peer variables\n      - CORE_VM_ENDPOINT&#x3D;unix:&#x2F;&#x2F;&#x2F;host&#x2F;var&#x2F;run&#x2F;docker.sock\n      # the following setting starts chaincode containers on the same\n      # bridge network as the peers\n      # https:&#x2F;&#x2F;docs.docker.com&#x2F;compose&#x2F;networking&#x2F;\n      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE&#x3D;twonodes_test\n      - FABRIC_LOGGING_SPEC&#x3D;INFO\n      #- FABRIC_LOGGING_SPEC&#x3D;DEBUG\n      - CORE_PEER_TLS_ENABLED&#x3D;true\n      - CORE_PEER_PROFILE_ENABLED&#x3D;true\n      - CORE_PEER_TLS_CERT_FILE&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;tls&#x2F;server.crt\n      - CORE_PEER_TLS_KEY_FILE&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;tls&#x2F;server.key\n      - CORE_PEER_TLS_ROOTCERT_FILE&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;tls&#x2F;ca.crt\n      # Peer specific variabes\n      - CORE_PEER_ID&#x3D;peer0.org2.example.com\n      - CORE_PEER_ADDRESS&#x3D;peer0.org2.example.com:9051\n      - CORE_PEER_LISTENADDRESS&#x3D;0.0.0.0:9051\n      - CORE_PEER_CHAINCODEADDRESS&#x3D;peer0.org2.example.com:9052\n      - CORE_PEER_CHAINCODELISTENADDRESS&#x3D;0.0.0.0:9052\n      - CORE_PEER_GOSSIP_EXTERNALENDPOINT&#x3D;peer0.org2.example.com:9051\n      - CORE_PEER_GOSSIP_BOOTSTRAP&#x3D;peer0.org2.example.com:9051\n      - CORE_PEER_LOCALMSPID&#x3D;Org2MSP\n    volumes:\n      - &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;host&#x2F;var&#x2F;run&#x2F;docker.sock\n      - .&#x2F;crypto-config&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;peers&#x2F;peer0.org2.example.com&#x2F;msp:&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;msp\n      - .&#x2F;crypto-config&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;peers&#x2F;peer0.org2.example.com&#x2F;tls:&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;tls\n      - peer0.org2.example.com:&#x2F;var&#x2F;hyperledger&#x2F;production\n    working_dir: &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer\n    command: peer node start\n    ports:\n      - 9051:9051\n    networks:\n      - test\n\n\n  cli1:\n    container_name: cli1\n    image: hyperledger&#x2F;fabric-tools:latest\n    tty: true\n    stdin_open: true\n    environment:                            # 环境变量相关设置\n      - GOPATH&#x3D;&#x2F;opt&#x2F;gopath\n      - CORE_VM_ENDPOINT&#x3D;unix:&#x2F;&#x2F;&#x2F;host&#x2F;var&#x2F;run&#x2F;docker.sock\n      - CORE_LOGGING_LEVEL&#x3D;INFO\n      - CORE_PEER_ID&#x3D;cli1\n      - CORE_PEER_ADDRESS&#x3D;peer0.org1.example.com:7051\n      - CORE_PEER_LOCALMSPID&#x3D;Org1MSP\n      - CORE_PEER_TLS_ENABLED&#x3D;true\n      - CORE_PEER_TLS_CERT_FILE&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;server.crt\n      - CORE_PEER_TLS_KEY_FILE&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;server.key\n      - CORE_PEER_TLS_ROOTCERT_FILE&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;ca.crt\n      - CORE_PEER_MSPCONFIGPATH&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;users&#x2F;Admin@org1.example.com&#x2F;msp\n      #- FABRIC_LOGGING_SPEC&#x3D;DEBUG\n    working_dir: &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer\n    command: &#x2F;bin&#x2F;bash\n    volumes:\n        # 挂载目录，默认就行\n        - &#x2F;var&#x2F;run&#x2F;:&#x2F;host&#x2F;var&#x2F;run&#x2F;\n        # 链码存放路径(go或者node.js写的链代码)\n        - .&#x2F;chaincode&#x2F;go&#x2F;:&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-cluster&#x2F;chaincode&#x2F;go\n        # 存放证书的路径\n        - .&#x2F;crypto-config:&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;\n        # 生成的创世块和管道以及更新的锚节点文件存放的路径(tx和block后缀的文件)\n        - .&#x2F;channel-artifacts:&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;channel-artifacts\n        # 注意：.&#x2F;channel-artifacts这种是指路径，需要本地有这个路径，或者改成自己的路径\n    networks:\n      - test\n\n  cli2:\n    container_name: cli2\n    image: hyperledger&#x2F;fabric-tools:latest\n    tty: true\n    stdin_open: true\n    environment:                            # 环境变量相关设置\n      - GOPATH&#x3D;&#x2F;opt&#x2F;gopath\n      - CORE_VM_ENDPOINT&#x3D;unix:&#x2F;&#x2F;&#x2F;host&#x2F;var&#x2F;run&#x2F;docker.sock\n      - CORE_LOGGING_LEVEL&#x3D;INFO\n      - CORE_PEER_ID&#x3D;cli2\n      - CORE_PEER_ADDRESS&#x3D;peer0.org2.example.com:9051\n      - CORE_PEER_LOCALMSPID&#x3D;Org2MSP\n      - CORE_PEER_TLS_ENABLED&#x3D;true\n      - CORE_PEER_TLS_CERT_FILE&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;peers&#x2F;peer0.org2.example.com&#x2F;tls&#x2F;server.crt\n      - CORE_PEER_TLS_KEY_FILE&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;peers&#x2F;peer0.org2.example.com&#x2F;tls&#x2F;server.key\n      - CORE_PEER_TLS_ROOTCERT_FILE&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;peers&#x2F;peer0.org2.example.com&#x2F;tls&#x2F;ca.crt\n      - CORE_PEER_MSPCONFIGPATH&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;users&#x2F;Admin@org2.example.com&#x2F;msp\n      #- FABRIC_LOGGING_SPEC&#x3D;DEBUG\n    working_dir: &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer\n    command: &#x2F;bin&#x2F;bash\n    volumes:\n        # 挂载目录，默认就行\n        - &#x2F;var&#x2F;run&#x2F;:&#x2F;host&#x2F;var&#x2F;run&#x2F;\n        # 链码存放路径(go或者node.js写的链代码)\n        - .&#x2F;chaincode&#x2F;go&#x2F;:&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-cluster&#x2F;chaincode&#x2F;go\n        # 存放证书的路径\n        - .&#x2F;crypto-config:&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;\n        # 生成的创世块和管道以及更新的锚节点文件存放的路径(tx和block后缀的文件)\n        - .&#x2F;channel-artifacts:&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;channel-artifacts\n        # 注意：.&#x2F;channel-artifacts这种是指路径，需要本地有这个路径，或者改成自己的路径\n    networks:\n      - test\n\n\n1.4 通道操作 链码代码来源：\n\n\n\n\n\n\n\n\n\nhttps://sunkaiyuan.blog.csdn.net/article/details/124315270\ndocker exec -it cli1 bash\nbash-5.1# peer channel create -o orderer.example.com:7050 -c mychannel -f .&#x2F;channel-artifacts&#x2F;channel.tx --tls true --cafile &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;ordererOrganizations&#x2F;example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem\n\ndocker exec -it cli1 bash\nbash-5.1# peer channel create -o orderer.example.com:7050 -c mychannel -f .&#x2F;channel-artifacts&#x2F;channel.tx --tls true -- cafile &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;ordererOrganizations&#x2F;example.com&#x2F;mps&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem\n2022-10-19 15:59:10.071 UTC 0001 WARN [main] InitCmd -&gt; CORE_LOGGING_LEVEL is no longer supported, please use the FABRIC_LOGGING_SPEC environment variable\n2022-10-19 15:59:10.073 UTC 0002 WARN [main] SetOrdererEnv -&gt; CORE_LOGGING_LEVEL is no longer supported, please use the FABRIC_LOGGING_SPEC environment variable\nError: failed to create deliver client for orderer: failed to load config for OrdererClient: unable to load orderer.tls.rootcert.file: open : no such file or directory\ncd &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer\n配置一下hosts\nvim &#x2F;etc&#x2F;hosts\n因为我们的终端容器cli1和cli2要加入同一个通道，所以我们需要将cli1中生成的通道文件 mychannel.block复制到cli2中：\ndocker cp cli1:&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;mychannel.block .&#x2F;\ndocker cp .&#x2F;mychannel.block cli2:&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer\n\nroot@aa:~&#x2F;twonodes# docker cp cli1:&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer\n&quot;docker cp&quot; requires exactly 2 arguments.\nSee &#39;docker cp --help&#39;.\n\nUsage:  docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-\n\tdocker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH\n\nCopy files&#x2F;folders between a container and the local filesystem\nroot@aa:~&#x2F;twonodes# docker cp cli1:&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;mychannel.block .&#x2F;\nroot@aa:~&#x2F;twonodes# ls\nchaincode          configtx.yaml  crypto-config.yaml   mychannel.block\nchannel-artifacts  crypto-config  docker-compose.yaml\nroot@aa:~&#x2F;twonodes# docker cp .&#x2F;mychannel.block cli2:&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer\nroot@aa:~&#x2F;twonodes# docker exec -it cli2 bash\nbash-5.1# ls\nchannel-artifacts  crypto             mychannel.block\nbash-5.1# \nbash-5.1# exit\nexit\nroot@aa:~&#x2F;twonodes# \n\n\n\n\n\n\n\n\n\n\n将 cli1和 cli2加入通道 mychannel.block\n$ docker exec -it cli1 bash\n$ peer channel join -b mychannel.block\n$ exit\n$ docker exec -it cli2 bash\n$ peer channel join -b mychannel.block\n$ exit\n\nroot@aa:~&#x2F;twonodes# docker exec -it cli1 bash\nbash-5.1# peer channel join -b mychannel.block\n2022-03-11 08:29:05.974 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized\n2022-03-11 08:29:06.048 UTC [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel\nbash-5.1# exit\nexit\nroot@aa:~&#x2F;twonodes# docker exec -it cli2 bash\nbash-5.1# peer channel join -b mychannel.block\n2022-03-11 08:29:32.601 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized\n2022-03-11 08:29:32.654 UTC [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel\nbash-5.1# exit\nexit\nroot@aa:~&#x2F;twonodes# \n\nbash-5.1# peer channel create -o orderer.example.com:7050 -c mychannel -f .&#x2F;channel-artifacts&#x2F;channel.tx --tls true --cafile &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;ordererOrganizations&#x2F;example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem\n2022-10-20 07:42:22.043 UTC 0001 WARN [main] InitCmd -&gt; CORE_LOGGING_LEVEL is no longer supported, please use the FABRIC_LOGGING_SPEC environment variable\n2022-10-20 07:42:22.044 UTC 0002 WARN [main] SetOrdererEnv -&gt; CORE_LOGGING_LEVEL is no longer supported, please use the FABRIC_LOGGING_SPEC environment variable\n2022-10-20 07:42:22.046 UTC 0003 INFO [channelCmd] InitCmdFactory -&gt; Endorser and orderer connections initialized\nError: got unexpected status: BAD_REQUEST -- channel creation request not allowed because the orderer system channel is not defined\n\npeer channel create -o orderer.example.com:7050 -c mychannel -f .&#x2F;channel-artifacts&#x2F;channel.tx --tls true --cafile &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;ordererOrganizations&#x2F;example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem\n\nfabric-samples里有示例链码sacc.go，当然你可以编写自己的链码，这里只做演示，整个链码的生命周期\n将链码复制到，项目的链码目录下 chaincode&#x2F;go\nroot@aa:~&#x2F;twonodes&#x2F;chaincode&#x2F;go# ls\nsacc.go\n\n打包链码-peer lifecycle chaincode packageroot@aa:~&#x2F;twonodes&#x2F;chaincode&#x2F;go# docker exec -it cli1 bash\nbash-5.1# cd &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-cluster&#x2F;chaincode&#x2F;go\nbash-5.1# ls\nsacc.go\n# Go Modules国内加速镜像加速，并打包依赖到vender\nbash-5.1# go env -w GO111MODULE&#x3D;on\nbash-5.1# go env -w GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy.cn,direct\nbash-5.1# go mod init\nbash-5.1# go mod vendor\nbash-5.1# go env -w GO111MODULE&#x3D;auto\nbash-5.1# ls\ngo.mod   go.sum   sacc.go  vendor\n# 回到工作目录，开始打包\nbash-5.1# cd &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer\nbash-5.1# ls\nchannel-artifacts  crypto             mychannel.block\nbash-5.1# peer lifecycle chaincode package sacc.tar.gz --path github.com&#x2F;hyperledger&#x2F;fabric-cluster&#x2F;chaincode&#x2F;go&#x2F; --label sacc_1\n---------------------------------------------------\n sacc.tar.gz  打包的名称\t\t\t\t\t\t\n --path       链码所在的路径\t\t\t\t\t   \n --label      链码的标签\t\t\t\t\t\t\n---------------------------------------------------\nbash-5.1# ls\nchannel-artifacts  crypto             mychannel.block    sacc.tar.gz\n# 将生成的打包文件复制到cli2里\nbash-5.1# exit\nroot@aa:~&#x2F;twonodes# docker cp cli1:&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;sacc.tar.gz .&#x2F;\nroot@aa:~&#x2F;twonodes# ls\nchaincode          configtx.yaml  crypto-config.yaml   mychannel.block\nchannel-artifacts  crypto-config  docker-compose.yaml  sacc.tar.gz\nroot@aa:~&#x2F;twonodes# docker cp sacc.tar.gz cli2:&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer\nroot@aa:~&#x2F;twonodes# docker exec -it cli2 bash\nbash-5.1# ls\nchannel-artifacts  crypto             mychannel.block    sacc.tar.gz\nbash-5.1# exit\n安装链码-peer lifecycle chaincode install\n# 在每一个节点上都要安装\n# 节点1上安装链码\ndocker exec -it cli1 bash\npeer lifecycle chaincode install sacc.tar.gz\nexit\npeer lifecycle chaincode install sacc.tar.gz\nexit\n查询链码的package-id即序列号-peer lifecycle chaincode approveformyorg\n# 查询链码的package-id，在组织批准链码的时候需要用到，其实在安装完链码之后，打印的日志就显示了package-id\nroot@aa:~&#x2F;twonodes# docker exec -it cli1 bash\nbash-5.1# ls\nchannel-artifacts  crypto             mychannel.block    sacc.tar.gz\nbash-5.1# peer lifecycle chaincode queryinstalled\nInstalled chaincodes on peer:\nPackage ID: sacc_1:9ffa6d574bee9027d9ae02ad3c8a6fb3c7d0f65e86dcf887e6e33f7216571af8, Label: sacc_1\nbash-5.1# exit\n\n组织批准链码-peer lifecycle chaincode approveformyorg\n# 每一个组织都要批准了这个链码，之后，这个链码才可以被安装在我们的通道上\n# 组织批准链码命令如下：\npeer lifecycle chaincode approveformyorg --channelID mychannel --name sacc --version 1.0 --init-required --package-id  --sequence 1 --tls true --cafile &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem\n--------------------------------------------------- \n --channelID\t  通道ID \n --name\t\t\t 链码的名称 \n --version        链码的版本号\t\t\t\t\t\n --init-required  链码是否需要初始化\t\t\t\t\t   \n --package-id     链码的序列号\n --tls            tls验证\n --cafile         ca证书文件的路径\n---------------------------------------------------\n\n1.5 多机搭建\n\n\n\n\n\n\n\n\nhttps://sxguan0529.gitbook.io/hyperledger-fabric/hyperledger-fabric-duo-ji-da-jian\n\n 生成Fabric证书\n\n创建项目目录 在三台虚拟机上使用以下命令创建相同的项目目录（三台虚拟机项目路径要相同）。 cd ~/hyperledgermkdir multinodes\n编写证书文件 首先使用以下命令进入项目目录。 cd ~/hyperledger/multinodes 使用以下命令将模板文件复制到当前目录下。 cryptogen showtemplate &gt; crypto-config.yaml将配置文件进行修改，修改如下。 OrdererOrgs:\n\n\nName: OrdererDomain: example.comEnableNodeOUs: true\nSpecs:\n\nHostname: orderer PeerOrgs:\n\n\nName: org1Domain: org1.example.comEnableNodeOUs: trueTemplate:  Count: 1Users:  Count: 1\n\nName: org2Domain: org2.example.comEnableNodeOUs: trueTemplate:  Count: 1Users:  Count: 1   \n\n生成证书文件 使用以下命令生成证书文件。 cryptogen generate —config=crypto-config.yaml 使用ls命令查看生成的文件，可以看到生成了crypto-config文件，这里存放所有的证书文件。 ls crypto-configcrypto-config.yaml 使用scp命令将证书文件复制到其他两台虚拟机中（使用scp命令时会要求输入主机密码）。 scp -r./crypto-config root@172.17.0.11:~/hyperledger/multinodes/ scp -r./crypto-config root@172.17.0.12:~/hyperledger/multinodes/复制后使用以下命令在其他两台虚拟机的multinodes目录下查看是否复制成功。 ls crypto-config\n\n\n\n\n1.6 浏览器搭建\n\n\n\n\n\n\n\n\ncd /opt/gopath/src/github.com/hyperledger/fabric-cluster/chaincode/go/sacc\n&#123;\n\t&quot;network-configs&quot;: &#123;\n\t\t&quot;test-network&quot;: &#123;\n\t\t\t&quot;name&quot;: &quot;Test Network&quot;,\n\t\t\t&quot;profile&quot;: &quot;.&#x2F;connection-profile&#x2F;test-network.json&quot;\n\t\t&#125;\n\t&#125;,\n\t&quot;license&quot;: &quot;Apache-2.0&quot;\n&#125;\nhttps:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;hyperledger&#x2F;blockchain-explorer&#x2F;main&#x2F;examples&#x2F;net1&#x2F;connection-profile&#x2F;test-network.json -P connection-profile\n\n\n# SPDX-License-Identifier: Apache-2.0\nversion: &#39;2.1&#39;\n\nvolumes:\n  pgdata:\n  walletstore:\n\nnetworks:\n  mynetwork.com:\n    name: fabric_test\n\nservices:\n\n  explorerdb.mynetwork.com:\n    image: hyperledger&#x2F;explorer-db:latest\n    container_name: explorerdb.mynetwork.com\n    hostname: explorerdb.mynetwork.com\n    environment:\n      - DATABASE_DATABASE&#x3D;fabricexplorer\n      - DATABASE_USERNAME&#x3D;hppoc\n      - DATABASE_PASSWORD&#x3D;password\n    healthcheck:\n      test: &quot;pg_isready -h localhost -p 5432 -q -U postgres&quot;\n      interval: 30s\n      timeout: 10s\n      retries: 5\n    volumes:\n      - pgdata:&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data\n    networks:\n      - mynetwork.com\n\n  explorer.mynetwork.com:\n    image: hyperledger&#x2F;explorer:latest\n    container_name: explorer.mynetwork.com\n    hostname: explorer.mynetwork.com\n    environment:\n      - DATABASE_HOST&#x3D;explorerdb.mynetwork.com\n      - DATABASE_DATABASE&#x3D;fabricexplorer\n      - DATABASE_USERNAME&#x3D;hppoc\n      - DATABASE_PASSWD&#x3D;password\n      - LOG_LEVEL_APP&#x3D;info\n      - LOG_LEVEL_DB&#x3D;info\n      - LOG_LEVEL_CONSOLE&#x3D;debug\n      - LOG_CONSOLE_STDOUT&#x3D;true\n      - DISCOVERY_AS_LOCALHOST&#x3D;false\n      - PORT&#x3D;$&#123;PORT:-8080&#125;\n    volumes:\n      - $&#123;EXPLORER_CONFIG_FILE_PATH&#125;:&#x2F;opt&#x2F;explorer&#x2F;app&#x2F;platform&#x2F;fabric&#x2F;config.json\n      - $&#123;EXPLORER_PROFILE_DIR_PATH&#125;:&#x2F;opt&#x2F;explorer&#x2F;app&#x2F;platform&#x2F;fabric&#x2F;connection-profile\n      - $&#123;FABRIC_CRYPTO_PATH&#125;:&#x2F;tmp&#x2F;crypto\n      - walletstore:&#x2F;opt&#x2F;explorer&#x2F;wallet\n    ports:\n      - $&#123;PORT:-8080&#125;:$&#123;PORT:-8080&#125;\n    depends_on:\n      explorerdb.mynetwork.com:\n        condition: service_healthy\n    networks:\n      - mynetwork.com\n将区块链网络的证书文件整个目录复制到 explorer下，并重命名为organizations:\ncd &#x2F;root&#x2F;block&#x2F;geneg&#x2F;twonodes&#x2F;\ncp -r crypto-config ..&#x2F;explorer&#x2F;organizations\n\nroot@aa:~&#x2F;block&#x2F;geneg# cd &#x2F;root&#x2F;block&#x2F;geneg&#x2F;\nroot@aa:~&#x2F;block&#x2F;geneg# pwd\n&#x2F;root&#x2F;block&#x2F;geneg\nroot@aa:~&#x2F;block&#x2F;geneg# ls\ntwonodes\nroot@aa:~&#x2F;block&#x2F;geneg# mkdir explorer\nroot@aa:~&#x2F;block&#x2F;geneg# ls\nexplorer  twonodes\nroot@aa:~&#x2F;block&#x2F;geneg# cd explorer\nroot@aa:~&#x2F;block&#x2F;geneg&#x2F;explorer# mkdir connection-profile\nroot@aa:~&#x2F;block&#x2F;geneg&#x2F;explorer# ls\nconnection-profile\n# SPDX-License-Identifier: Apache-2.0\nversion: &#39;2.1&#39;\n\nvolumes:\n  pgdata:\n  walletstore:\n\nnetworks:\n  mynetwork.com:\n    external:\n      name: twonodes_test\n\nservices:\n\n  explorerdb.mynetwork.com:\n    image: hyperledger&#x2F;explorer-db:latest\n    container_name: explorerdb.mynetwork.com\n    hostname: explorerdb.mynetwork.com\n    environment:\n      - DATABASE_DATABASE&#x3D;fabricexplorer\n      - DATABASE_USERNAME&#x3D;hppoc\n      - DATABASE_PASSWORD&#x3D;password\n    healthcheck:\n      test: &quot;pg_isready -h localhost -p 5432 -q -U postgres&quot;\n      interval: 30s\n      timeout: 10s\n      retries: 5\n    volumes:\n      - pgdata:&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data\n    networks:\n      - mynetwork.com\n\n  explorer.mynetwork.com:\n    image: hyperledger&#x2F;explorer:latest\n    container_name: explorer.mynetwork.com\n    hostname: explorer.mynetwork.com\n    environment:\n      - DATABASE_HOST&#x3D;explorerdb.mynetwork.com\n      - DATABASE_DATABASE&#x3D;fabricexplorer\n      - DATABASE_USERNAME&#x3D;hppoc\n      - DATABASE_PASSWD&#x3D;password\n      - LOG_LEVEL_APP&#x3D;info\n      - LOG_LEVEL_DB&#x3D;info\n      - LOG_LEVEL_CONSOLE&#x3D;debug\n      - LOG_CONSOLE_STDOUT&#x3D;true\n      - DISCOVERY_AS_LOCALHOST&#x3D;false\n    volumes:\n      - .&#x2F;config.json:&#x2F;opt&#x2F;explorer&#x2F;app&#x2F;platform&#x2F;fabric&#x2F;config.json\n      - .&#x2F;connection-profile:&#x2F;opt&#x2F;explorer&#x2F;app&#x2F;platform&#x2F;fabric&#x2F;connection-profile\n      - .&#x2F;organizations:&#x2F;tmp&#x2F;crypto\n      - walletstore:&#x2F;opt&#x2F;explorer&#x2F;wallet\n    ports:\n      - 8080:8080\n    depends_on:\n      explorerdb.mynetwork.com:\n        condition: service_healthy\n    networks:\n      - mynetwork.com\n\n# 新建文件夹，用于存放区块链浏览器搭建过程中的配置文件\nmkdir explorer\ncd explorer\n# wget配置文件，由于被墙，可能无法直接获取\nwget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;hyperledger&#x2F;blockchain-explorer&#x2F;main&#x2F;examples&#x2F;net1&#x2F;config.json\nwget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;hyperledger&#x2F;blockchain-explorer&#x2F;main&#x2F;examples&#x2F;net1&#x2F;connection-profile&#x2F;test-network.json -P connection-profile\nwget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;hyperledger&#x2F;blockchain-explorer&#x2F;main&#x2F;docker-compose.yaml\n# 解决方法，手动创建配置文件，并通过访问下面网址，将配置文件内容复制进去\n\n\n&#123;\n\t&quot;network-configs&quot;: &#123;\n\t\t&quot;org1-network&quot;: &#123;\n\t\t\t&quot;name&quot;: &quot;org1-network&quot;,\n\t\t\t&quot;profile&quot;: &quot;.&#x2F;connection-profile&#x2F;org1-network.json&quot;\n\t\t&#125;,\n\t\t&quot;org2-network&quot;: &#123;\n\t\t\t&quot;name&quot;: &quot;org2-network&quot;,\n\t\t\t&quot;profile&quot;: &quot;.&#x2F;connection-profile&#x2F;org2-network.json&quot;\n\t\t&#125;\n\t&#125;,\n\t&quot;license&quot;: &quot;Apache-2.0&quot;\n&#125;\n\ncd &#x2F;root&#x2F;block&#x2F;geneg&#x2F;twonodes&#x2F;\ncp -r crypto-config ..&#x2F;explorer&#x2F;organizations\n\nroot@kai:~&#x2F;block&#x2F;geneg# cd explorer\nroot@kai:~&#x2F;block&#x2F;geneg&#x2F;explorer# pwd\n&#x2F;root&#x2F;block&#x2F;geneg&#x2F;explorer\nroot@kai:~&#x2F;block&#x2F;geneg&#x2F;explorer# ls\nconfig.json  connection-profile  docker-compose.yaml  organizations\nroot@kai:~&#x2F;block&#x2F;geneg&#x2F;explorer# docker-compose up -d\nRecreating explorerdb.mynetwork.com ... done\nCreating explorer.mynetwork.com     ... done\nroot@kai:~&#x2F;block&#x2F;geneg&#x2F;explorer# docker ps -a\nhyperledger&#x2F;explorer:latest\nhyperledger&#x2F;explorer-db:latest\n\n\n总结这次的实验内容和强度一个顶七个。在debug的过程中，我把之前几乎所有的内容都重新做了一遍，从go语言的环境搭建到docker安装，因为这次视频里内容与实际版本有出入，在debug的过程中找了很久的文件。我这里找了一个相对清晰且全面的版本：\n\n\n\n\n\n\n\n\n\nhttps://blog.csdn.net/g950904/article/details/121143167?spm=1001.2014.3001.5506\n私以为这个内容完全值得两周的时长，因为他的第一部分就是几乎之前所有内容的总和，虽然已经配置过了，但为了避免与文档代码有出入，又重新配置了一遍。\n以下是总结的比较难的部分：\n\ngo语言环境配置，因为后面涉及到默认opt/gopath/src的路径，如果在一开始配置环境变量放在usr/local下就会很麻烦，最后得重新下载go语言，配置环境变量。当然，fabric也是需要重装的。\n内容准备。生成证书及文件，因为涉及到yaml文件的更改，而yaml文件对于格式要求很高。好几次我只是把名字改了或者路径改了都会报错，最终是复制其他部分的代码在此基础上修改。同样的内容一个报错一个不报，虽然最终文件成功运行，但第一次为什么会报错，百思不得其解。\ndocker-compose文件的编写。这个是最难的，因为这个做好了，通道也就搭好了，之后的内容没有太多难度。但docker-compose文件涉及的内容很多，各种奇怪的报错都有，越改越错。从周末到周四，五天时间，查遍资料，血压升高，恨不得钻进电脑帮代码连接通道。debug的过程是相当痛苦的，尤其是不知道错在哪里，而网上又没有其他人踩雷，debug仿佛遍历整个过程，从文档里空格和引号添加有无，到每一条路径是否有效，就像尝试解开一个死结，倒不如重开一个系统重新配置。可惜我是双系统，如果像以前一样用vmware，两分钟就可以创建一个新的，现在物理机上有很多其他的文件，重开不亚于重装系统。\n\n这次的任务流程，仅从结果上看，就是之前的5~6倍，以至于投入时间已经无法让进度线性增长，只要一卡进度立刻停滞，解决问题之后进度飞快，直到下一个治疗低血压的bug出现。\n不过这周也学了很多，之前只是跟着代码做，现在为了debug，不得不对整体内容和细节有了解。尤其是各种yaml文件，不亲自改出bug是不会对文件的内容有理解的，而我的bug越改越多，早知道还是原版。\n不过还是折磨，这几天凌晨两点睡觉，不是因为两点才完成一个内容，而是第二天有早八。事实上，有的bug即使通宵到第二天也解决不了，还得靠问。这次学的可比前几次充实多得多得多了，一行代码背后是整个文件，如果一路顺风还好，只要一个环节出了问题，就意味着命令相关的所有内容都得啃一遍，不然找不出bug。当然，找出了也不一定能改。（这次内容值得两周的ddl）\n\n","slug":"区块链3","date":"2022-11-03T15:00:49.000Z","categories_index":"","tags_index":"区块链","author_index":"Algernon"},{"id":"547202daa128845562f8d5d219a57a73","title":"【区块链技术与应用】（二）","content":"本地编译组件获取代码编译 Fabric 代码依赖一些开发库，可以通过如下命令安装：\nsudo apt-get update \\\n   &amp;&amp; sudo apt-get install -y libsnappy-dev zlib1g-dev libbz2-dev libyaml-dev libltdl-dev libtool\n目前，Fabric 官方仓库托管在 Github 仓库（github.com/hyperledger/fabric）中供下载使用。如果使用 1.13 之前版本的 Go 环境，需要将 Fabric 项目放到 $GOPATH 路径下。如下命令所示，创建 $GOPATH/src/github.com/hyperledger 目录结构并切换到该路径：\nmkdir -p $GOPATH&#x2F;src&#x2F;github.com&#x2F;hyperledger\ncd $GOPATH&#x2F;src&#x2F;github.com&#x2F;hyperledger\n获取 Peer 和 Orderer 组件编译所需要的代码，两者目前在同一个 fabric 仓库中：\ngit clone https:&#x2F;&#x2F;github.com&#x2F;hyperledger&#x2F;fabric.git\n为节约下载时间，读者可以指定 —single-branch -b master —depth 1 命令选项来指定只获取 master 分支最新代码：\ngit clone --single-branch -b master --depth 1 https:&#x2F;&#x2F;github.com&#x2F;hyperledger&#x2F;fabric.git\nFabric CA 组件在独立的 fabric-ca 仓库中，可以通过如下命令获取：\ngit clone https:&#x2F;&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-ca.git\n读者也可以直接访问 https://github.com/hyperledger/fabric/releases 和 https://github.com/hyperledger/fabric-ca/releases 来下载特定的 fabric 和 fabric-ca 发行版。最后，检查确认 fabric 和 fabric-ca 两个仓库下载成功：\nls $GOPATH&#x2F;src&#x2F;github.com&#x2F;hyperledger\nfabric fabric-ca\n\n编译安装peer组件配置版本号和编译参数：\n$ PROJECT_VERSION&#x3D;2.0.0\n$ LD_FLAGS&#x3D;&quot;-X github.com&#x2F;hyperledger&#x2F;fabric&#x2F;common&#x2F;metadata.Version&#x3D;$&#123;PROJECT_VERSION&#125; \\\n             -X github.com&#x2F;hyperledger&#x2F;fabric&#x2F;common&#x2F;metadata.BaseDockerLabel&#x3D;org.hyperledger.fabric \\\n             -X github.com&#x2F;hyperledger&#x2F;fabric&#x2F;common&#x2F;metadata.DockerNamespace&#x3D;hyperledger \\\n             -X github.com&#x2F;hyperledger&#x2F;fabric&#x2F;common&#x2F;metadata.BaseDockerNamespace&#x3D;hyperledger&quot;\n通过如下命令编译并安装 fabric 的 peer 组件到 $GOPATH/bin 下：\n$ CGO_CFLAGS&#x3D;&quot; &quot; go install -tags &quot;&quot; -ldflags &quot;$LD_FLAGS&quot; \\\n    github.com&#x2F;hyperledger&#x2F;fabric&#x2F;cmd&#x2F;peer\n\n当然，用户也可直接使用源码中的 Makefile 来进行编译，相关命令如下：\n$ make peer\n这种情况下编译生成的 peer 组件会默认放在 build/bin 路径下。\n编译安装 Orderer 组件通过如下命令编译并安装 fabric orderer 组件到 $GOPATH/bin 下：\n$ CGO_CFLAGS&#x3D;&quot; &quot; go install -tags &quot;&quot; -ldflags &quot;$LD_FLAGS&quot; \\\n    github.com&#x2F;hyperledger&#x2F;fabric&#x2F;cmd&#x2F;orderer\n同样的，也可使用 Makefile 来编译安装 orderer 组件到 build/bin 路径下：\n$ make orderer\n编译安装 Fabric CA 组件采用如下命令编译并安装 fabric-ca 相关组件到 $GOPATH/bin 下：\n$ go install -ldflags &quot;-X github.com&#x2F;hyperledger&#x2F;fabric-ca&#x2F;lib&#x2F;metadata.Version&#x3D;$PROJECT_VERSION -linkmode external -extldflags &#39;-static -lpthread&#39;&quot; \\\n    github.com&#x2F;hyperledger&#x2F;fabric-ca&#x2F;cmd&#x2F;...\n编译安装配置辅助工具Fabric 中还提供了一系列配置辅助工具，包括 cryptogen（本地生成组织结构和身份文件）、configtxgen（生成配置区块和配置交易）、configtxlator（解析转换配置信息）、discover（拓扑探测）、idemixgen（Idemix 证书生成）等，可以通过如下命令来快速编译和安装：\n# 编译安装 cryptogen，等价于执行 make cryptogen\n$ CGO_CFLAGS&#x3D;&quot; &quot; \\\n    go install -tags &quot;&quot; -ldflags &quot;$LD_FLAGS&quot; \\\n    github.com&#x2F;hyperledger&#x2F;fabric&#x2F;cmd&#x2F;cryptogen\n\n# 编译安装 configtxgen，等价于执行 make configtxgen\n$ CGO_CFLAGS&#x3D;&quot; &quot; \\\n    go install -tags &quot;&quot; -ldflags &quot;$LD_FLAGS&quot; \\\n    github.com&#x2F;hyperledger&#x2F;fabric&#x2F;cmd&#x2F;configtxgen\n\n# 编译安装 configtxlator，等价于执行 make configtxlator\n$ CGO_CFLAGS&#x3D;&quot; &quot; \\\n    go install -tags &quot;&quot; -ldflags &quot;$LD_FLAGS&quot; \\\n    github.com&#x2F;hyperledger&#x2F;fabric&#x2F;cmd&#x2F;configtxlator\n\n# 编译安装 discover，等价于执行 make discover\n$ CGO_CFLAGS&#x3D;&quot; &quot; \\\n    go install -tags &quot;&quot; -ldflags &quot;$LD_FLAGS&quot; \\\n    github.com&#x2F;hyperledger&#x2F;fabric&#x2F;cmd&#x2F;discover\n\n# 编译安装 idemixgen，等价于执行 make idemixgen\n$ CGO_CFLAGS&#x3D;&quot; &quot; \\\n    go install -tags &quot;&quot; -ldflags &quot;$LD_FLAGS&quot; \\\n    github.com&#x2F;hyperledger&#x2F;fabric&#x2F;cmd&#x2F;idemixgen\n另外，fabric 项目还提供了不少常见的编译命令，可以参考 Makefile 文件，例如编译所有的二进制文件可以使用如下命令：\n$ make native\n安装 Protobuf 支持和 Go 语言相关工具Fabric 代码由 Go 语言构建，开发者可以选择安装如下的 Go 语言相关工具，方便开发和调试：\n$ go get github.com&#x2F;golang&#x2F;protobuf&#x2F;protoc-gen-go \\\n    &amp;&amp; go get github.com&#x2F;maxbrunsfeld&#x2F;counterfeiter&#x2F;v6 \\\n    &amp;&amp; go get github.com&#x2F;axw&#x2F;gocov&#x2F;... \\\n    &amp;&amp; go get github.com&#x2F;AlekSi&#x2F;gocov-xml \\\n    &amp;&amp; go get golang.org&#x2F;x&#x2F;tools&#x2F;cmd&#x2F;goimports \\\n    &amp;&amp; go get golang.org&#x2F;x&#x2F;lint&#x2F;golint \\\n    &amp;&amp; go get github.com&#x2F;estesp&#x2F;manifest-tool \\\n    &amp;&amp; go get github.com&#x2F;client9&#x2F;misspell&#x2F;cmd&#x2F;misspell \\\n    &amp;&amp; go get github.com&#x2F;onsi&#x2F;ginkgo&#x2F;ginkgo\n\n容器方式获取除了从源码编译外，还可以直接从 Dockerhub 来拉取相关的镜像，命令格式为 docker pull 。例如，从社区仓库直接获取 fabric-peer、fabric-orderer、fabric-ca、fabric-tools 等镜像的 2.0.0 版本可以使用如下命令：\n$ ARCH&#x3D;amd64\n$ BASEIMAGE_RELEASE&#x3D;0.4.18\n$ PROJECT_VERSION&#x3D;2.0.0\n\n# 拉取镜像\n$ docker pull hyperledger&#x2F;fabric-peer:$ARCH-$PROJECT_VERSION \\\n  &amp;&amp; docker pull hyperledger&#x2F;fabric-orderer:$ARCH-$PROJECT_VERSION \\\n  &amp;&amp; docker pull hyperledger&#x2F;fabric-ca:$ARCH-$PROJECT_VERSION \\\n  &amp;&amp; docker pull hyperledger&#x2F;fabric-tools:$ARCH-$PROJECT_VERSION \\\n  &amp;&amp; docker pull hyperledger&#x2F;fabric-ccenv:$ARCH-$PROJECT_VERSION \\\n  &amp;&amp; docker pull hyperledger&#x2F;fabric-baseimage:$ARCH-$BASEIMAGE_RELEASE \\\n  &amp;&amp; docker pull hyperledger&#x2F;fabric-baseos:$ARCH-$PROJECT_VERSION\n\n此外，还可以从第三方仓库获取镜像，拉取后可以添加默认的镜像标签别名。例如，笔者仓库中构建了基于 Golang 基础镜像的相关 fabric 镜像，可以通过如下命令获取：\n# 拉取镜像\n$ docker pull yeasy&#x2F;hyperledger-fabric-base:$PROJECT_VERSION \\\n  &amp;&amp; docker pull yeasy&#x2F;hyperledger-fabric-peer:$PROJECT_VERSION \\\n  &amp;&amp; docker pull yeasy&#x2F;hyperledger-fabric-orderer:$PROJECT_VERSION \\\n  &amp;&amp; docker pull yeasy&#x2F;hyperledger-fabric-ca:$PROJECT_VERSION\n\n\n# 添加标签\n$ docker tag yeasy&#x2F;hyperledger-fabric-peer:$PROJECT_VERSION hyperledger&#x2F;fabric-peer:$ARCH-$PROJECT_VERSION \\\n  &amp;&amp; docker tag yeasy&#x2F;hyperledger-fabric-orderer:$PROJECT_VERSION hyperledger&#x2F;fabric-orderer:$ARCH-$PROJECT_VERSION \\\n  &amp;&amp; docker tag yeasy&#x2F;hyperledger-fabric-ca:$PROJECT_VERSION hyperledger&#x2F;fabric-ca:$ARCH-$PROJECT_VERSION \\\n  &amp;&amp; docker tag yeasy&#x2F;hyperledger-fabric-peer:$PROJECT_VERSION hyperledger&#x2F;fabric-tools:$ARCH-$PROJECT_VERSION \\\n  &amp;&amp; docker tag yeasy&#x2F;hyperledger-fabric-base:$PROJECT_VERSION hyperledger&#x2F;fabric-ccenv:$ARCH-$PROJECT_VERSION \\\n  &amp;&amp; docker tag yeasy&#x2F;hyperledger-fabric-base:$PROJECT_VERSION hyperledger&#x2F;fabric-baseimage:$ARCH-$BASEIMAGE_RELEASE \\\n  &amp;&amp; docker tag yeasy&#x2F;hyperledger-fabric-base:$PROJECT_VERSION hyperledger&#x2F;fabric-baseos:$ARCH-$PROJECT_VERSION\n\n本地方式启动 Fabric 网络生成组织关系和身份证书Fabric 网络作为联盟链，需要多个成员组织共同维护。成员之间通过身份来进行鉴权，网络通过身份来实现资源访问的权限管理。因此各成员组织都需要提前准备对应的身份文件，并部署到其所拥有的节点和客户端上。用户可通过标准 PKI 服务（如使用 Fabric CA 实现）或 OpenSSL 工具来手动生成各个实体的证书和私钥。Fabric 项目还提供了 cryptogen 工具（基于 Golang crypto 标准库）在本地生成，需要提前准备 crypto-config.yaml 配置文件。crypto-config.yaml 配置文件的结构十分简单，支持定义两种类型（OrdererOrgs 和 PeerOrgs）的若干组织。每个组织中又可以定义多个节点（Spec）和用户（User）。一个示例的 crypto-config.yaml 配置文件内容如下，其中定义了一个 OrdererOrgs 类型的组织 example.com，包括 3 个节点；两个 PeerOrgs 类型的组织 org1.example.com 和 org2.example.com，分别包括 2 个节点和 1 个普通用户身份：\nOrdererOrgs:\n  - Name: Orderer\n    Domain: example.com\n    CA:\n        Country: US\n        Province: California\n        Locality: San Francisco\n    Specs:\n      - Hostname: orderer0\n      - Hostname: orderer1\n      - Hostname: orderer2\nPeerOrgs:\n  - Name: Org1\n    Domain: org1.example.com\n    EnableNodeOUs: true\n    CA:\n        Country: US\n        Province: California\n        Locality: San Francisco\n    Template:\n      Count: 2\n    Users:\n      Count: 1\n  - Name: Org2\n    Domain: org2.example.com\n    EnableNodeOUs: true\n    CA:\n        Country: US\n        Province: California\n        Locality: San Francisco\n    Template:\n      Count: 2\n    Users:\n      Count: 1\n使用该配置文件，通过如下命令可生成指定组织结构的身份文件，并存放到 crypto-config 目录下：\n$ cryptogen generate \\\n    --config&#x3D;.&#x2F;crypto-config.yaml \\\n    --output .&#x2F;crypto-config\n\n用户修改配置后，还可以通过 extend 子命令来更新 crypto-config 目录：\n$ cryptogen extend \\\n    --config&#x3D;.&#x2F;crypto-config.yaml \\\n    --input .&#x2F;crypto-config\n查看刚生成的 crypto-config 目录，结构如下所示：\n$ tree -L 4 crypto-config\ncrypto-config\n|-- ordererOrganizations\n|   &#96;-- example.com\n|       |-- ca\n|       |   |-- 293def0fc6d07aab625308a3499cd97f8ffccbf9e9769bf4107d6781f5e8072b_sk\n|       |   &#96;-- ca.example.com-cert.pem\n|       |-- msp\n|       |   |-- admincerts&#x2F;\n|       |   |-- cacerts&#x2F;\n|       |   &#96;-- tlscacerts&#x2F;\n|       |-- orderers\n|       |   &#96;-- orderer0.example.com&#x2F;\n|       |   &#96;-- orderer1.example.com&#x2F;\n|       |   &#96;-- orderer2.example.com&#x2F;\n|       |-- tlsca\n|       |   |-- 2be5353baec06ca695f7c3b04ca0932912601a4411939bfcfd44af18274d5a65_sk\n|       |   &#96;-- tlsca.example.com-cert.pem\n|       &#96;-- users\n|           &#96;-- Admin@example.com&#x2F;\n&#96;-- peerOrganizations\n    |-- org1.example.com\n    |   |-- ca\n    |   |   |-- 501c5f828f58dfa3f7ee844ea4cdd26318256c9b66369727afe8437c08370aee_sk\n    |   |   &#96;-- ca.org1.example.com-cert.pem\n    |   |-- msp\n    |   |   |-- admincerts&#x2F;\n    |   |   |-- cacerts&#x2F;\n    |   |   &#96;-- tlscacerts&#x2F;\n    |   |-- peers\n    |   |   |-- peer0.org1.example.com&#x2F;\n    |   |   &#96;-- peer1.org1.example.com&#x2F;\n    |   |-- tlsca\n    |   |   |-- 592a08f84c99d6f083b3c5b9898b2ca4eb5fbb9d1e255f67df1fa14c123e4368_sk\n    |   |   &#96;-- tlsca.org1.example.com-cert.pem\n    |   &#96;-- users\n    |       |-- Admin@org1.example.com&#x2F;\n    |       &#96;-- User1@org1.example.com&#x2F;\n    &#96;-- org2.example.com\n        |-- ca\n        |   |-- 86d97f9eb601868611eab5dc7df88b1f6e91e129160651e683162b958a728162_sk\n        |   &#96;-- ca.org2.example.com-cert.pem\n        |-- msp\n        |   |-- admincerts&#x2F;\n        |   |-- cacerts&#x2F;\n        |   &#96;-- tlscacerts&#x2F;\n        |-- peers\n        |   |-- peer0.org2.example.com&#x2F;\n        |   &#96;-- peer1.org2.example.com&#x2F;\n        |-- tlsca\n        |   |-- 4b87c416978970948dffadd0639a64a2b03bc89f910cb6d087583f210fb2929d_sk\n        |   &#96;-- tlsca.org2.example.com-cert.pem\n        &#96;-- users\n            |-- Admin@org2.example.com&#x2F;\n            &#96;-- User1@org2.example.com&#x2F;\n\n按照 crypto-config.yaml 中定义，crypto-config 目录下包括多级目录结构。其中 ordererOrganizations 下包括构成 Orderer 组织（包括 3 个 Orderer 节点）的身份信息；peerOrganizations 下为所有的 Peer 节点组织（包括2 个组织，4 个节点）的相关身份信息。各个实体都含有 msp 和 tls 目录，分别包括对应的认证身份文件和 TLS 身份文件（公钥证书、私钥等）。对于 Orderer 节点来说，需要将 ordererOrganizations/example.com/orderers/ordererX.example.com 目录下内容（包括 msp 和 tls 两个子目录）复制到对应 Orderer 节点的配置路径（默认为 /etc/hyperledger/fabric）下。对于 Peer 节点来说，则需要复制 peerOrganizations 下对应的身份证书文件。以 org1 的 peer0 为例，将 peerOrganizations/org1.example.com/peers/peer0.org1.example.com 目录下内容（包括 msp 和 tls）复制到 Peer0 节点的配置路径（默认为 /etc/hyperledger/fabric）下。对于客户端节点来说，需要复制对应身份的用户目录，例如 Org1 的管理员身份为 peerOrganizations/org1.example.com/users/Admin@org1.example.com/。\n生成系统通道初始区块系统通道是网络启动后的首个通道，负责管理网络整体配置。排序节点在启动后，可以使用初始区块文件来创建一个新的网络。初始区块中包括了排序服务的相关配置信息（如排序节点信息、块大小、最大通道数、默认策略等）和示例联盟配置。可以使用 configtxgen 工具生成。生成过程依赖 configtx.yaml 文件。configtx.yaml 配置文件定义了整个网络中的相关配置和拓扑结构信息，用户可参考 sampleconfig/configtx.yaml 示例文件进行编写。这里采用如下内容，各个字段含义可参考后续配置说明章节：\nProfiles:\n    TwoOrgsOrdererGenesis:\n        &lt;&lt;: *ChannelDefaults\n        Capabilities:\n            &lt;&lt;: *ChannelCapabilities\n        Orderer:\n            &lt;&lt;: *OrdererDefaults\n            Organizations:\n                - *OrdererOrg\n            Capabilities:\n                &lt;&lt;: *OrdererCapabilities\n        Consortiums:\n            SampleConsortium:\n                Organizations:\n                    - *Org1\n                    - *Org2\n    TwoOrgsChannel:\n        Consortium: SampleConsortium\n        &lt;&lt;: *ChannelDefaults\n        Capabilities:\n            &lt;&lt;: *ChannelCapabilities\n        Application:\n            &lt;&lt;: *ApplicationDefaults\n            Organizations:\n                - *Org1\n                - *Org2\n            Capabilities:\n                &lt;&lt;: *ApplicationCapabilities\nOrganizations:\n    - &amp;OrdererOrg\n        Name: OrdererOrg\n        SkipAsForeign: false\n        ID: OrdererMSP\n        MSPDir: msp\n        Policies:\n            Readers:\n                Type: Signature\n                Rule: &quot;OR(&#39;OrdererMSP.member&#39;)&quot;\n            Writers:\n                Type: Signature\n                Rule: &quot;OR(&#39;OrdererMSP.member&#39;)&quot;\n            Admins:\n                Type: Signature\n                Rule: &quot;OR(&#39;OrdererMSP.admin&#39;)&quot;\n        OrdererEndpoints:\n            - &quot;orderer0.example.com:7050&quot;\n            - &quot;orderer1.example.com:7050&quot;\n            - &quot;orderer2.example.com:7050&quot;\n\n    - &amp;Org1\n        Name: Org1MSP\n        SkipAsForeign: false\n        ID: Org1MSP\n        MSPDir: msp\n        Policies:\n            Readers:\n                Type: Signature\n                Rule: &quot;OR(&#39;Org1MSP.admin&#39;, &#39;Org1MSP.peer&#39;, &#39;Org1MSP.client&#39;)&quot;\n            Writers:\n                Type: Signature\n                Rule: &quot;OR(&#39;Org1MSP.admin&#39;, &#39;Org1MSP.client&#39;)&quot;\n            Admins:\n                Type: Signature\n                Rule: &quot;OR(&#39;Org1MSP.admin&#39;)&quot;\n            Endorsement:\n                Type: Signature\n                Rule: &quot;OR(&#39;Org1MSP.member&#39;)&quot;\n        AnchorPeers:\n            - Host: peer0.org1.example.com\n              Port: 7051\n    - &amp;Org2\n        Name: Org2MSP\n        SkipAsForeign: false\n        ID: Org2MSP\n        MSPDir: msp\n        Policies:\n            Readers:\n                Type: Signature\n                Rule: &quot;OR(&#39;Org2MSP.admin&#39;, &#39;Org2MSP.peer&#39;, &#39;Org2MSP.client&#39;)&quot;\n            Writers:\n                Type: Signature\n                Rule: &quot;OR(&#39;Org2MSP.admin&#39;, &#39;Org2MSP.client&#39;)&quot;\n            Admins:\n                Type: Signature\n                Rule: &quot;OR(&#39;Org2MSP.admin&#39;)&quot;\n            Endorsement:\n                Type: Signature\n                Rule: &quot;OR(&#39;Org2MSP.member&#39;)&quot;\n        AnchorPeers:\n            - Host: peer0.org2.example.com\n              Port: 7051\nCapabilities:\n    Channel: &amp;ChannelCapabilities\n        V2_0: true\n    Orderer: &amp;OrdererCapabilities\n        V2_0: true\n    Application: &amp;ApplicationCapabilities\n        V2_0: true\nApplication: &amp;ApplicationDefaults\n    ACLs: &amp;ACLsDefault\n        _lifecycle&#x2F;CommitChaincodeDefinition: &#x2F;Channel&#x2F;Application&#x2F;Writers\n        _lifecycle&#x2F;QueryChaincodeDefinition: &#x2F;Channel&#x2F;Application&#x2F;Readers\n        _lifecycle&#x2F;QueryNamespaceDefinitions: &#x2F;Channel&#x2F;Application&#x2F;Readers\n        lscc&#x2F;ChaincodeExists: &#x2F;Channel&#x2F;Application&#x2F;Readers\n        lscc&#x2F;GetDeploymentSpec: &#x2F;Channel&#x2F;Application&#x2F;Readers\n        lscc&#x2F;GetChaincodeData: &#x2F;Channel&#x2F;Application&#x2F;Readers\n        lscc&#x2F;GetInstantiatedChaincodes: &#x2F;Channel&#x2F;Application&#x2F;Readers\n        qscc&#x2F;GetChainInfo: &#x2F;Channel&#x2F;Application&#x2F;Readers\n        qscc&#x2F;GetBlockByNumber: &#x2F;Channel&#x2F;Application&#x2F;Readers\n        qscc&#x2F;GetBlockByHash: &#x2F;Channel&#x2F;Application&#x2F;Readers\n        qscc&#x2F;GetTransactionByID: &#x2F;Channel&#x2F;Application&#x2F;Readers\n        qscc&#x2F;GetBlockByTxID: &#x2F;Channel&#x2F;Application&#x2F;Readers\n        cscc&#x2F;GetConfigBlock: &#x2F;Channel&#x2F;Application&#x2F;Readers        \n        peer&#x2F;Propose: &#x2F;Channel&#x2F;Application&#x2F;Writers\n        peer&#x2F;ChaincodeToChaincode: &#x2F;Channel&#x2F;Application&#x2F;Readers\n        event&#x2F;Block: &#x2F;Channel&#x2F;Application&#x2F;Readers\n        event&#x2F;FilteredBlock: &#x2F;Channel&#x2F;Application&#x2F;Readers\n    Organizations:\n    Policies:\n        LifecycleEndorsement:\n            Type: ImplicitMeta\n            Rule: &quot;MAJORITY Endorsement&quot;\n        Endorsement:\n            Type: ImplicitMeta\n            Rule: &quot;MAJORITY Endorsement&quot;\n        Readers:\n            Type: ImplicitMeta\n            Rule: &quot;ANY Readers&quot;\n        Writers:\n            Type: ImplicitMeta\n            Rule: &quot;ANY Writers&quot;\n        Admins:\n            Type: ImplicitMeta\n            Rule: &quot;MAJORITY Admins&quot;\n    Capabilities:\n        &lt;&lt;: *ApplicationCapabilities\nOrderer: &amp;OrdererDefaults\n    OrdererType: etcdraft\n    Addresses:\n        - orderer0.example.com:7050\n        - orderer1.example.com:7050\n        - orderer2.example.com:7050\n    BatchTimeout: 2s\n    BatchSize:\n        MaxMessageCount: 500\n        AbsoluteMaxBytes: 10 MB\n        PreferredMaxBytes: 2 MB\n    MaxChannels: 0\n    EtcdRaft:\n        Consenters:\n            - Host: orderer0.example.com\n              Port: 7050\n              ClientTLSCert: crypto-config&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer0.example.com&#x2F;tls&#x2F;server.crt\n              ServerTLSCert: crypto-config&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer0.example.com&#x2F;tls&#x2F;server.crt\n            - Host: orderer1.example.com\n              Port: 7050\n              ClientTLSCert: crypto-config&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer1.example.com&#x2F;tls&#x2F;server.crt\n              ServerTLSCert: crypto-config&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer1.example.com&#x2F;tls&#x2F;server.crt\n            - Host: orderer2.example.com\n              Port: 7050\n              ClientTLSCert: crypto-config&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer2.example.com&#x2F;tls&#x2F;server.crt\n              ServerTLSCert: crypto-config&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer2.example.com&#x2F;tls&#x2F;server.crt\n        Options:\n            TickInterval: 500ms\n            ElectionTick: 10\n            HeartbeatTick: 1\n            MaxInflightBlocks: 5\n            SnapshotIntervalSize: 16 MB\n    Organizations:\n    Policies:\n        Readers:\n            Type: ImplicitMeta\n            Rule: &quot;ANY Readers&quot;\n        Writers:\n            Type: ImplicitMeta\n            Rule: &quot;ANY Writers&quot;\n        Admins:\n            Type: ImplicitMeta\n            Rule: &quot;MAJORITY Admins&quot;\n        BlockValidation:\n            Type: ImplicitMeta\n            Rule: &quot;ANY Writers&quot;\n    Capabilities:\n        &lt;&lt;: *OrdererCapabilities\nChannel: &amp;ChannelDefaults\n    Policies:\n        Readers:\n            Type: ImplicitMeta\n            Rule: &quot;ANY Readers&quot;\n        Writers:\n            Type: ImplicitMeta\n            Rule: &quot;ANY Writers&quot;\n        Admins:\n            Type: ImplicitMeta\n            Rule: &quot;MAJORITY Admins&quot;\n    Capabilities:\n        &lt;&lt;: *ChannelCapabilities\n该配置文件中定义了两个模板：TwoOrgsOrdererGenesis 和 TwoOrgsChannel，其中前者定义了系统通道配置，可以用来创建系统通道所需初始区块文件；后者定义了应用通道配置，可以用来新建应用通道。排序服务的共识类型采用了 Raft 模式。可通过如下命令指定使用 configtx.yaml 文件中定义的 TwoOrgsOrdererGenesis 模板，来生成系统通道的初始区块文件：\n$ export SYS_CHANNEL&#x3D;testchainid\n$ export ORDERER_GENESIS_PROFILE&#x3D;TwoOrgsOrdererGenesis\n$ export ORDERER_GENESIS&#x3D;orderer.genesis.block\n$ configtxgen \\\n    -configPath .&#x2F; \\\n    -channelID $&#123;SYS_CHANNEL&#125; \\\n    -profile $&#123;ORDERER_GENESIS_PROFILE&#125; \\\n    -outputBlock $&#123;ORDERER_GENESIS&#125;\n\n将所生成的初始区块文件复制到排序节点上 ORDERER_GENERAL_BOOTSTRAPFILE 指定路径（默认为 /etc/hyperledger/fabric）下，供启动排序节点使用。\n生成新建应用通道配置交易新建应用通道需要先生成配置交易文件，其中包括了属于该通道的组织结构信息，这些信息会写入到该应用通道的初始区块中。同样使用 configtx.yaml 配置文件和 configtxgen 工具，注意这里使用 TwoOrgsChannel 模板。采用如下命令来生成配置交易文件，通道中包括两个初始成员：Org1 和 Org2：\n$ export APP_CHANNEL&#x3D;businesschannel\n$ export APP_CHANNEL_PROFILE&#x3D;TwoOrgsChannel\n$ configtxgen \\\n    -configPath .&#x2F; \\\n    -channelID $&#123;APP_CHANNEL&#125; \\\n    -profile $&#123;APP_CHANNEL_PROFILE&#125; \\\n    -outputCreateChannelTx $&#123;APP_CHANNEL&#125;.tx\n\n所生成的配置交易文件在后续步骤被客户端所使用，需要复制到客户端节点上。注：状态数据库如果选择 CouchDB 类型，应用通道名称只能包括小写的 ASCII 字符、点或中划线，并且首字符必须为字母，总长度不超过 249 个字符。该限制详情可参考 FAB-2487。\n生成锚节点配置更新文件锚节点用来辅助通道内多个组织之间的节点发现，修改锚节点需要发送更新通道配置交易。同样，基于 configtx.yaml 配置文件，为每个组织都生成配置交易文件，注意需要需要使用对应的组织身份：\n$ export UPDATE_ANCHOR_ORG1_TX&#x3D;Org1MSPanchors.tx \n$ export UPDATE_ANCHOR_ORG2_TX&#x3D;Org2MSPanchors.tx \n$ configtxgen \\\n    -configPath .&#x2F; \\\n    -channelID $&#123;APP_CHANNEL&#125; \\\n    -profile $&#123;APP_CHANNEL_PROFILE&#125; \\\n    -asOrg Org1MSP \\\n    -outputAnchorPeersUpdate $&#123;UPDATE_ANCHOR_ORG1_TX&#125;\n$ configtxgen \\\n    -configPath .&#x2F; \\\n    -channelID $&#123;APP_CHANNEL&#125; \\\n    -profile $&#123;APP_CHANNEL_PROFILE&#125; \\\n    -asOrg Org2MSP \\\n    -outputAnchorPeersUpdate $&#123;UPDATE_ANCHOR_ORG1_TX&#125;\n\n所生成的锚节点配置更新文件会在后续步骤被客户端所使用，因此需要复制到客户端节点上。所有配置文件都准备完毕后，即可启动网络。首先要启动 Orderer 节点，然后启动 Peer 节点。\n启动 Orderer 节点FABRIC_LOGGING_SPEC&#x3D;&quot;info:orderer.common.blockcutter,orderer.operations&#x3D;warning:orderer.common.cluster&#x3D;debug&quot;\nORDERER_GENERAL_LISTENADDRESS&#x3D;0.0.0.0\nORDERER_GENERAL_LISTENPORT&#x3D;7050\nORDERER_GENERAL_BOOTSTRAPMETHOD&#x3D;file\nORDERER_GENERAL_BOOTSTRAPFILE&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;orderer.genesis.block\nORDERER_GENERAL_LOCALMSPID&#x3D;OrdererMSP\nORDERER_GENERAL_LOCALMSPDIR&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;msp\nORDERER_GENERAL_LEDGERTYPE&#x3D;file\nORDERER_GENERAL_TLS_ENABLED&#x3D;true\nORDERER_GENERAL_TLS_PRIVATEKEY&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;tls&#x2F;server.key\nORDERER_GENERAL_TLS_CERTIFICATE&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;tls&#x2F;server.crt\nORDERER_GENERAL_TLS_ROOTCAS&#x3D;[&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;tls&#x2F;ca.crt]\nORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls&#x2F;server.key\nORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls&#x2F;server.crt\nORDERER_GENERAL_CLUSTER_ROOTCAS&#x3D;[&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls&#x2F;ca.crt]\nCORE_OPERATIONS_LISTENADDRESS&#x3D;0.0.0.0:8443\nCORE_METRICS_PROVIDER&#x3D;prometheus\n之后，用户可以采用如下命令来启动 Orderer 节点。启动成功后可以看到本地输出的开始提供服务的消息，此时 Orderer 采用指定的初始区块文件成功创建了系统通道：\n$ orderer start\n[orderer&#x2F;common&#x2F;server] prettyPrintStruct -&gt; INFO 002 Orderer config values:\n    General.LedgerType &#x3D; &quot;file&quot;\n    General.ListenAddress &#x3D; &quot;0.0.0.0&quot;\n    General.ListenPort &#x3D; 7050\n    General.TLS.Enabled &#x3D; true\n...\n[orderer&#x2F;common&#x2F;server] Start -&gt; INFO 007 Beginning to serve requests\n...\n启动 Peer 节点首先，检查配置路径（ 默认为 /etc/hyperledger/fabric ）下相关文件是否就绪：配置文件 core.yaml（可以参考 sampleconfig/core.yaml），指定了节点相关配置；生成的 msp 文件目录、tls 文件目录，存放身份信息。Peer 节点的配置可通过配置文件或环境变量方式进行指定，场景设置如下表所示。\nFABRIC_LOGGING_SPEC&#x3D;&quot;info:msp,gossip&#x3D;warning:chaincode&#x3D;debug&quot;\nCORE_PEER_ID&#x3D;peer0.org1.example.com\nCORE_PEER_LISTENADDRESS&#x3D;0.0.0.0:7051\nCORE_PEER_GOSSIP_EXTERNALENDPOINT&#x3D;peer0.org1.example.com:7051\nCORE_PEER_GOSSIP_USELEADERELECTION&#x3D;true\nCORE_PEER_GOSSIP_ORGLEADER&#x3D; false\nCORE_PEER_LOCALMSPID&#x3D;Org1MSP\nCORE_PEER_MSPCOCORE_VM_ENDPOINT&#x3D;unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sockNFIGPATH&#x3D;msp\nCORE_VM_ENDPOINT&#x3D;unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock\nCORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE&#x3D;host\nCORE_PEER_TLS_ENABLED&#x3D;true\nCORE_PEER_TLS_CERT_FILE&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;tls&#x2F;server.crt\nCORE_PEER_TLS_KEY_FILE&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;tls&#x2F;server.key\nCORE_PEER_TLS_ROOTCERT_FILE&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;tls&#x2F;ca.crt\nCORE_OPERATIONS_LISTENADDRESS&#x3D;0.0.0.0:9443\nCORE_METRICS_PROVIDER&#x3D;prometheus\n\n配置完成后，用户可以采用如下命令在多个服务器上分别启动 Peer 服务，启动成功后可以看到本地输出的日志消息：\n$ peer node start\nUTC [ledgermgmt] initialize -&gt; INFO 002 Starting peer:\n Version: 2.0.0\n Commit SHA: development build\n Go version: go1.13.4\n OS&#x2F;Arch: linux&#x2F;amd64\n Chaincode:\n  Base Docker Namespace: hyperledger\n  Base Docker Label: org.hyperledger.fabric\n  Docker Namespace: hyperledger&quot;\n...\nUTC [nodeCmd] serve -&gt; INFO 01e Started peer with ID&#x3D;[name:&quot;peer0.org1.example.com&quot; ], network ID&#x3D;[dev], address&#x3D;[peer0.org1.example.com:7051]\n...\n此时，Peer 节点已经启动起来，会尝试通过 gossip 发现邻居节点。\n创建通道Peer 节点启动后，由于尚未跟 Orderer 建立连接，暂时还未加入网络中的应用通道。下面在客户端发送请求给 Orderer 创建应用通道，并让 Peer 节点加入到通道中。默认情况下，只有联盟中成员组织的管理员身份才可以创建应用通道。例如使用 Org1 的管理员身份来创建新的应用通道，需要指定 msp 的 ID、msp 文件所在路径、排序服务地址、应用通道名称和新建通道交易文件，如果启用了 TLS，还需要指定排序服务的 TLSCA 的证书位置：\n$ APP_CHANNEL&#x3D;businesschannel\n$ TIMEOUT&#x3D;30\n$ CORE_PEER_LOCALMSPID&#x3D;&quot;Org1MSP&quot; \\\n    CORE_PEER_MSPCONFIGPATH&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;crypto-config&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;users&#x2F;Admin@org1.example.com&#x2F;msp \\\n    peer channel create \\\n    -o orderer.example.com:7050 \\\n    -c $&#123;APP_CHANNEL&#125; \\\n    -f .&#x2F;$APP_CHANNEL.tx \\\n    --timeout &quot;$&#123;TIMEOUT&#125;s&quot; \\\n    --tls \\\n    --cafile &#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;crypto-config&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem\n通道创建成功后，会在本地生成其初始区块文件（businesschannel.block），其中带有通道的初始配置信息和排序服务信息等。只有拥有该文件的 Peer 节点才可能加入到对应的通道中。\n加入通道应用通道的成员组织的 Peer 都可以加入到通道中。在客户端使用管理员身份依次让组织 Org1 和 Org2 中所有节点都加入新的应用通道。操作需要指定所操作的 Peer 的地址，以及通道的初始区块。以 Org1 中的 peer0 节点为例，可以执行如下操作：\n$ CORE_PEER_LOCALMSPID&#x3D;&quot;Org1MSP&quot; \\\n    CORE_PEER_MSPCONFIGPATH&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;crypto-config&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;users&#x2F;Admin@org1.example.com&#x2F;msp \\\n    CORE_PEER_ADDRESS&#x3D;peer0.org1.example.com:7051 \\\n    peer channel join \\\n    -b $&#123;APP_CHANNEL&#125;.block\n\nPeer joined the channel!\n此时，所操作的 Peer（如果成为组织的 Gossip Leader）会自动连接到应用通道指定的排序服务，开始接收区块。\n更新锚节点配置锚节点（作为组织内成员代表）负责跟其它组织节点进行信息交换。通道配置内会记录各组织的锚节点列表信息，Peer 通过访问其他组织的锚节点来获取其他组织内的 Peer 信息。使用锚节点配置更新文件，组织管理员可以更新通道中相关配置。例如，在客户端使用 Org1 的管理员身份来更新锚节点，如下所示：\n$ CORE_PEER_LOCALMSPID&#x3D;&quot;Org1MSP&quot; \\\n    CORE_PEER_MSPCONFIGPATH&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;crypto-config&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;users&#x2F;Admin@org1.example.com&#x2F;msp \\\n    peer channel update \\\n    -o orderer.example.com:7050 \\\n    -c $&#123;APP_CHANNEL&#125; \\\n    -f $&#123;UPDATE_ANCHOR_ORG1_TX&#125; \\\n    --tls \\\n    --cafile &#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;crypto-config&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem\n锚节点配置更新后，同一通道内不同组织之间的 Peer 也可以进行 Gossip 通信，共同维护通道账本。后续，用户可以在通道内通过智能合约更新账本记录。\n容器方式启动 Fabric 网络除了上面讲解的手动部署的方式，读者还可以基于容器方式来快速部署 Fabric 网络并验证功能。首先，按照如下命令下载 Docker-Compose 模板文件，并进入 hyperledger_fabric 目录，可以看到有对应多个 Fabric 版本的项目，用户可以根据需求选用特定版本：\ngit clone https:&#x2F;&#x2F;github.com&#x2F;yeasy&#x2F;docker-compose-files\ncd docker-compose-files&#x2F;hyperledger_fabric\n\n以 Fabric 2.0.0 版本为例，进入到对应目录下，并先下载所需镜像文件：\ncd v2.0.0\nmake download\n\n\n查看目录下内容，主要包括若干 Docker-Compose 模板文件，主要包括：docker-compose-2orgs-4peer-raft.yaml：包括 4 个 peer 节点（属于两个组织）、3 个Orderer 节点（Raft 模式）、2 个 CA 节点、1 个客户端节点；\n\ndocker-compose-1orgs-1peers-dev.yaml：包括 1 个 peer 节点、1 个 Orderer 节点、1个 CA 节点、1 个客户端节点。本地 Fabric 源码被挂载到了客户端节点中，方便进行调试；\n\n\n\ndocker-compose-2orgs-4peer-kafka.yaml：包括 4 个 peer 节点（属于两个组织）、3 个Orderer 节点（Kafka 模式）、2 个 CA 节点、1 个客户端节点；\ndocker-compose-2orgs-4peer-couchdb.yaml：包括 4 个 peer 节点（属于两个组织，启用couchDB 作为状态数据库）、2 个 Orderer 节点、1 个 CA 节点、1 个客户端节点。\n使用 Make  命令进行操作。例如使用 HLF_MODE 指定排序服务为 Raft 模式，快速启动网络并执行一系列测试：\n\n\nHLF_MODE&#x3D;raft make test\n\n运行过程中会自动创建网络并逐个完成通道和链码的相关测试，注意查看输出日志中无错误信息。网络启动后，可以通过 docker ps 命令查看本地系统中运行的容器信息\n$ docker ps\nCONTAINER ID        IMAGE                                     COMMAND                  CREATED             STATUS              PORTS                               NAMES\n1ee7db027b3f        yeasy&#x2F;hyperledger-fabric-peer:2.0.0      &quot;peer node start&quot;        27 seconds ago      Up 22 seconds       9443&#x2F;tcp, 0.0.0.0:8051-&gt;7051&#x2F;tcp    peer1.org1.example.com\n8f7bffcd14b3        yeasy&#x2F;hyperledger-fabric-peer:2.0.0      &quot;peer node start&quot;        27 seconds ago      Up 22 seconds       9443&#x2F;tcp, 0.0.0.0:10051-&gt;7051&#x2F;tcp   peer1.org2.example.com\n8a4e9aaec7ba        yeasy&#x2F;hyperledger-fabric-peer:2.0.0      &quot;peer node start&quot;        27 seconds ago      Up 22 seconds       9443&#x2F;tcp, 0.0.0.0:9051-&gt;7051&#x2F;tcp    peer0.org2.example.com\n7b9d394f26c0        yeasy&#x2F;hyperledger-fabric-peer:2.0.0      &quot;peer node start&quot;        27 seconds ago      Up 23 seconds       0.0.0.0:7051-&gt;7051&#x2F;tcp, 9443&#x2F;tcp    peer0.org1.example.com\nce9ca6c7b672        yeasy&#x2F;hyperledger-fabric-orderer:2.0.0   &quot;orderer start&quot;          30 seconds ago      Up 27 seconds       8443&#x2F;tcp, 0.0.0.0:8050-&gt;7050&#x2F;tcp    orderer1.example.com\n2646b7f0e462        yeasy&#x2F;hyperledger-fabric:2.0.0           &quot;bash -c &#39;cd &#x2F;tmp; s…&quot;   30 seconds ago      Up 15 seconds       7050-7054&#x2F;tcp                       fabric-cli\nc35e8694c634        yeasy&#x2F;hyperledger-fabric-orderer:2.0.0   &quot;orderer start&quot;          30 seconds ago      Up 27 seconds       8443&#x2F;tcp, 0.0.0.0:9050-&gt;7050&#x2F;tcp    orderer2.example.com\n1d6dd5009141        yeasy&#x2F;hyperledger-fabric-orderer:2.0.0   &quot;orderer start&quot;          30 seconds ago      Up 27 seconds       0.0.0.0:7050-&gt;7050&#x2F;tcp, 8443&#x2F;tcp    orderer0.example.com\n\n用户如果希望在客户端、Peer 或 Orderer 容器内执行命令，可以通过 make cli|peer|orderer 命令进入到容器中。例如，如下命令可以让用户登录到客户端节点，在其中以指定身份发送网络请求：\nmake cli\n用户也可以通过如下命令来查看日志输出：\nmake logs\n视频一、环境准备\n\n1、apt换源\nhttps:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;help&#x2F;ubuntu&#x2F;\nsudo gedit &#x2F;etc&#x2F;apt&#x2F;sources.list\nsudo apt update\n\n2、安装docker、docker-compose\nsudo apt install docker docker-compose\nsudo systemctl enable docker\nsudo usermod -a -G docker &lt;username&gt;\n\n3、安装golang\nhttps:&#x2F;&#x2F;go.dev&#x2F;doc&#x2F;install\nsudo su\nrm -rf &#x2F;usr&#x2F;local&#x2F;go &amp;&amp; tar -C &#x2F;usr&#x2F;local -xzf go1.17.6.linux-amd64.tar.gz\ngedit &#x2F;etc&#x2F;profile\n\texport PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;go&#x2F;bin\ngedit ~&#x2F;.bashrc\n\tsource &#x2F;etc&#x2F;profile\n\n4、docker加速器\nhttps:&#x2F;&#x2F;cr.console.aliyun.com&#x2F;cn-hangzhou&#x2F;instances&#x2F;mirrors\n\n二、安装fabric-sample\n\n1、手动创建脚本，安装samples、docker\nhttps:&#x2F;&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;blob&#x2F;main&#x2F;scripts&#x2F;bootstrap.sh\n修改binaries&#x3D;false\nsudo chmod u+x bootstrap.sh\n.&#x2F;bootstrap.sh\n\n2、安装binaries\nhttps:&#x2F;&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;releases&#x2F;download&#x2F;v2.4.6&#x2F;hyperledger-fabric-linux-amd64-2.4.6.tar.gz\nhttps:&#x2F;&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-ca&#x2F;releases&#x2F;download&#x2F;v1.5.5&#x2F;hyperledger-fabric-ca-linux-amd64-1.5.5.tar.gz\ntar -xzvf 压缩包名 -C 目的地\n\n3、配置go代理\ngo env -w GO111MODULE&#x3D;on\ngo env -w GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy.cn,direct\n\n\n\n\n\n\n\n\n","slug":"区块链2","date":"2022-11-03T14:59:49.000Z","categories_index":"","tags_index":"区块链","author_index":"Algernon"},{"id":"9707db72db0abf36328a217eb8d73065","title":"【区块链技术与应用】（一）","content":"技术胖开启docker使用systemctl start命令，开启Docker服务端。\nsudo systemctl start docker\n创建容器后，如果查看这个容器的信息和状态那？这时候你可以使用下面的命令。\ndocker container ls\n这时候我们需要学一个新的查看命令，比如只查看现在所有容器的ID,命令如下\ndocker container ps -aq\n\nattached 和detached模式在开启端口映射之前，你首先要之道Docker对应的容器端口是多少。比如Nginx镜像的端口诗80。知道这个端口后，就可以在启动容器的时候，用-p &lt;port:port&gt; 的形式，启用映射了。\n用Nginx举例:\ndocker container run -p 80:80 nginx\n等待项目启动后，打开浏览器窗口，在地址栏输入127.0.0.1，就可以打开nginx的默认网址。第一个端口是映射到服务器本机的端口;第二个端口是Docker容器使用的端口。 比如你想把Docker的80端口，映射到服务器的90端口。\ndocker container run -p 90:80 nginx\nattached模式\n两种模式最简单的对比理解就是：attached模式在前台运行，detached模式在后台运行。\n当你打开127.0.0.1网址的时候，PowerShell上打印出了相关的日志（log），平且每访问一次，都会增加一条日志。也就是说Docker容器的日志会实时的展现到窗口并且占用此端口。这种模式叫做attached模式。在windows系统下并不是一个完整的attached模式，只是帮我们打印出了Log。现在到Linux服务器上，这时候你按Ctrl+C,就会停止掉Docker服务。而现实中我们工作的环境恰恰是这种Linux环境。\n也就是在Linux上你的操作命令，会直接传递个Docker容器。这个缺点就是很容易误操作，比如在公司的生产环境中，你直接一个Ctrl+C，整个服务就崩掉了，你这个月的绩效也就没有了。\n所以我们需要一个更好的，更稳定的模式。也就是detached模式。attached模式更适用于容器和程序的调试阶段。\ndetached模式\ndetached模式的开启方法，就是加一个参数-d或者--detach。\ndocker run -d -p 80:80 nginx\n\ndocker交互模式有时候容器的镜像不是简单的一个服务，而是需要交互的操作系统。例如创建一个Ubuntu系统，然后需要到系统里输入各种Shell命令和系统进行交互。这时候attached模式和detached模式就不能满足要求了。需要使用交互模式。\n使用Ubuntu镜像并开启交互模式\ndocker container run -it ubuntu sh\n-it代表启用交互模式，sh代表可以使用Shell脚本。当你输入玩这个脚本后，Docker就会进入到交互模式。可以使用ls来得到目录下的文件，也可以使用hostname来查看计算机名称。\n这时候你想退出容器和交互模式可以输入exit命令。需要重点说明的是，随着命令退出后，容器也会跟着退出，变成Exited模式。\ndetached模式下的交互\n如果我们想退出交互，但是并不想停止容器。可以先开启detached模式，然后通过命令进入交互模式。我们来操作一下,先删除所有的容器。\ndocker container rm -f $(docker container ls -aq)\n然后再用detached模式创建一个nginx镜像的容器。\ndocker container run -d -p 80:80 nginx\n直接通过下面的命令就可以进入到交互模式下了。(这是我们以后要经常使用的一个命令)\ndocker exec -it &lt;ID or Image name&gt; sh \nexec是执行的意思，-it交互模式 ， sh交互的方式，用shell脚本进行交互\n\n\n\n\n\n\n\n\n\n整个命令的意思是：用shell脚本的方式执行交互模式。\n进入后可以使用ls来查看容器的文件系统。\n这种模式的优点是，再使用exit退出后，服务并不会停止，而只是退出了交互模式。可以自己尝试一下退出，然后使用docker container ls -a来查看一下容器的状态，你会发现依然是 up状态。\nImage镜像的拉取和删除从dockerhub上拉取镜像](https://jspang.com/article/75#toc339)\n当在PowerShell里输入docker image 命令后，会出现对于Image操作的所有命令和提示（算帮助信息吧）。\n查看镜像列表的方法\ndocker image ls\n通过这条命令就可以查看Docker中有的镜像和相关信息。\n初识Dockerfile什么是Dockerfile](https://jspang.com/article/75#toc347)\n\n\n\n\n\n\n\n\n\nDockerfile是一个包含用于组合映像的命令的文本文档。可以使用在命令行中调用任何命令。 Docker通过读取Dockerfile中的指令自动生成映像。\n可以简单总结为下面三点：\n\nDockerfile是用于构建docker镜像的文件\nDockerfile里包含了构建镜像所需的”指令“\nDockerfile有其特定的语法规则（重要学习）Demo-执行Python程序](https://jspang.com/article/75#toc348)\n\n有这样一个需求，制作一个镜像。镜像的操作系统是Ubuntu最新版，然后在系统上运行jspang.py程序。Python程序的内容非常简单，只要打印出Hello JSPang，就可以了。\n第一步，安装一个Ubuntu系统。\n第二步，下载安装Python环境\napt-get update &amp;&amp; \\\nDEBIAN_FRONTEND&#x3D;noninteractive apt-get install --no-install-recommends -y python3.9 python3-pip python3.9-dev\n第三步，准备jspang.py文件。这个可以在D盘新建一个DockerTest文件夹，然后在文件夹中新建一个jspang.py文件，然后编写下面的文件。\nprint(&quot;Hello JSPang&quot;)\n第四步，运行jspang.py\n$ python3 hello.py\nhello docker\n这是我们拆解的步骤，有步骤之后，我们看看如何写一个Dockerfile文件（建议把Dockerfile文件和jspang.py文件放在一起个文件夹下）\nFROM ubuntu:latest\nRUN  apt-get update &amp;&amp; \\\n         DEBIAN_FRONTEND&#x3D;noninteractive apt-get install --no-install-recommends -y python3.9 python3-pip python3.9-dev\nADD jspang.py &#x2F;\nCMD [&quot;python3&quot;,&quot;jspang.py&quot;]\n\n把镜像分享到Dockerhub如果你想上传属于自己的镜像，需要遵守社区规则，就是用户ID/镜像名称。可以最简单的方法，就是重新build一个镜像，镜像名称符合社区规则就可以了。\ndocker image build -t jspangcom&#x2F;jspang .\n这时候就会生成一下新的镜像，但是Image ID 是一摸一样的。\n也可以通过docker image tag命令，具体语法如下：\ndocker image tag &lt;old image name &gt; &lt;new iamge name&gt;\n例如把jspang这个镜像，改为jspangcom/jspang镜像,命令可以如下：\ndocker image tag jspang jspangcom&#x2F;jspang\n推送到Dockerhub上\n在推送前，需要先登录Dockerhub账号,登录命令如下：\ndocker login\n执行命令好，会要求输入Username，也就你Dockerhub ID，还需要输入密码。如果输入正确，并出现Login Succeeded就证明登录成功了。\ndocker image push Name[:TAG]\n比如就是把刚才的jspangcom/jspang镜像push到社区，就可以使用下面的命令。\ndocker image push jspangcom&#x2F;jspang\n输入完命令，就会给我们进行push到Dockerhub上了。这时候你可以到Dockerhub的profile页面，刷新一下，就可以看到刚刚push上去的镜像。\n（具体代码有修改，比如jspang我换成了biosheep）输入完命令，就会给我们进行push到Dockerhub上了。这时候你可以到Dockerhub的profile页面，刷新一下，就可以看到刚刚push上去的镜像。\nDockerfile命令操作纯净的Ubuntu系统是没有ipinfo命令的，在安装完系统后，都会安装ipinfo命令。步骤如下：\n$ apt-get update\n$ apt-get install wget\n$ wget https:&#x2F;&#x2F;github.com&#x2F;ipinfo&#x2F;cli&#x2F;releases&#x2F;download&#x2F;ipinfo-2.0.1&#x2F;ipinfo_2.0.1_linux_amd64.tar.gz\n$ tar zxf ipinfo_2.0.1_linux_amd64.tar.gz\n$ mv ipinfo_2.0.1_linux_amd64 &#x2F;usr&#x2F;bin&#x2F;ipinfo\n$ rm -rf ipinfo_2.0.1_linux_amd64.tar.gz\n上面这段代码需要你会一些Linux 的基本操作，其实就是安装，解压和删除下载文件 的一个过程。把所有执行命令放到一个RUN里，并用&amp;&amp; \\进行连接。就可以把很多命令写到一个RUN里边了。\nFROM ubuntu:latest\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y wget &amp;&amp; \\\n    wget https:&#x2F;&#x2F;github.com&#x2F;ipinfo&#x2F;cli&#x2F;releases&#x2F;download&#x2F;ipinfo-2.0.1&#x2F;ipinfo_2.0.1_linux_amd64.tar.gz &amp;&amp; \\\n    tar zxf ipinfo_2.0.1_linux_amd64.tar.gz &amp;&amp; \\\n    mv ipinfo_2.0.1_linux_amd64 &#x2F;usr&#x2F;bin&#x2F;ipinfo &amp;&amp; \\\n    rm -rf ipinfo_2.0.1_linux_amd64.tar.gz\n\n这样所有的RUN命令只生成一层image layer。打包出来的镜像也没有那么大了。我们把这个文件写到Dockerfile.good文件里，然后用命令进行打包。\ndocker image build -f dockerfile.good -t ipinfo-good .\n\n\n这时候再用docker image histroy &lt;Image ID&gt; 查看分层，就会看到分层少了很多。\nPS D:\\TestDocker&gt; docker image history e89\nIMAGE          CREATED         CREATED BY                                      SIZE      COMMENT\ne893cd98aa4e   2 minutes ago   RUN &#x2F;bin&#x2F;sh -c apt-get update &amp;&amp;     apt-get…   46.7MB    buildkit.dockerfile.v0\n&lt;missing&gt;      3 weeks ago     &#x2F;bin&#x2F;sh -c #(nop)  CMD [&quot;bash&quot;]                 0B\n&lt;missing&gt;      3 weeks ago     &#x2F;bin&#x2F;sh -c #(nop) ADD file:5c3d9d2597e01d1ce…   72.8MB\n两个包的体积也会有所变化,good镜像是119MB,bad镜像是134MB。\nPS D:\\TestDocker&gt; docker image ls\nREPOSITORY            TAG       IMAGE ID       CREATED          SIZE\nipinfo-good           latest    e893cd98aa4e   3 minutes ago    119MB\nipinfo-bad            latest    e9c79d165e5c   14 minutes ago   134MB\nCOPY和ADD`命令，在复制普通文件的时候，并没有什么太大的不同，两个命令都可以把本地文件，复制到镜像里。（如果复制的路径不存在，则会自动创建）\n现在我们写一个Dockerfile，里边的内容是用基础Node镜像，然后拷贝一个index.js文件进去。\nDockerfile.copy内容如下.\nFROM node:alpine3.14\nCOPY index.js  &#x2F;app&#x2F;index.js\n\n引用node3.13版本，然后把index.js文件，拷贝到app目录下面。\nindex.js文件如下。代码是我们在3000端口上，开启了一个最简单web服务，然后返回了Hello Nodejs两个单词。\n&#x2F;&#x2F;1. 导入 http 模块\n  const http &#x3D; require(&#39;http&#39;);\n  &#x2F;&#x2F;2. 创建服务器对象\n  const server &#x3D; http.createServer();\n  &#x2F;&#x2F;3. 开启服务器\n  server.listen(3000, () &#x3D;&gt; &#123;\n      console.log(&#39;Server is running...&#39;);\n  &#125;);\n  &#x2F;&#x2F;4. 监听浏览器请求并进行处理\n  server.on(&#39;request&#39;, (req, res) &#x3D;&gt; &#123;\n      &#x2F;&#x2F; end方法能够将数据返回给浏览器，浏览器会显示该字符串\n      res.end(&#39;Hello Nodejs&#39;);\n  &#125;);\n\n两个文件准备好以后，用build命令进行构建。\ndocker image build -f Dockerfile.copy -t hello-copy .\n构建完成后，可以使用doc\nker image ls命令进行查询。生成成功后，可以启用交互模式，再加上映射端口的形式，运行容器。\ndocker container run -it -p 3000:3000 hello-copy sh\n这里映射了3000端口，这样我们就可以用127.0.0.1:3000进行访问了。\n用ADD构建镜像\nADD 构建镜像和COPY最直观的一点不同，是ADD命令可以直接解压gzip压缩文件，这当我们有很多文件要上传操作的时候，就会变的简单很多。\nDockerfile.add文件内容\nFROM node:alpine3.14\nADD index.tar  &#x2F;app&#x2F;\n用ADD命令进行打包镜像\ndocker image build -f Dockerfile.add -t hello-gzip .\n打包好以后使用交互模式，开启容器。\ndocker container run -it -p 3000:3000 hello-gzip sh\n再进入app路径下面，可以看到下面自动给我们解压了index.tar文件。\n切换工作目录 WORKDIR\n在写Dockerfile文件时，默认的操作目录，是镜像的根目录。但有时候需要拷贝很多内容到镜像里是二级目录，就可以使用WORKDIR命令。把工作目录切换到二级，WORKDIR命令像我们操作linux下的cd命令。\n比如还是刚才的Dockerfile.add文件，我们可以使用WORKDIR命令，改成下面的形式。\nFROM node:alpine3.14\nWORKDIR &#x2F;app\nADD index.tar  index.js\n这时候进入系统后的工作目录，就是在/app下面了。\n数据持久化volume当知道了容器中的数据不能持久化后，可以在编写Dockerfile时用VOLUME命令设置持久化的目录。\n新建一个Dockerfile文件\n在CentOS下，新建一个test目录，然后在test目录下，新建一个Dockerfile文件，使用vim编辑文件，写入下面的命令。\nFROM NGINX\nVOLUME [&quot;&#x2F;app&quot;]\n有了Dockerfile文件后，开始构建镜像，\ndocker image build -t my-image .\n构建好镜像，启动镜像容器。\ndocker container run -d my-image\n启动后查看容器ID。\ndocker container ls\n进入交互模式\ndocker container exec -it &lt;ContainerID&gt; sh\n再安装vim.\napt-get update\napt-get install vim\n这时候再新建一个app目录，然后编写test.txt文件。\nHello JSPang.com\n这时候，再删除镜像，就可以找到我们持久化的数据了。那这些持久化的数据被保存到了那里哪？这就需要我们再学习一下docker volume的相关命令了。\ndocker volume 相关命令\n现在退出容器，来到CentOS当中，可以输入下面的命令,就可以看到docker volume相关的命令了。\n# docker volume\n\nUsage:  docker volume COMMAND\n\nManage volumes\n\nCommands:\n  create      Create a volume\n  inspect     Display detailed information on one or more volumes\n  ls          List volumes\n  prune       Remove all unused local volumes\n  rm          Remove one or more volumes\n\nRun &#39;docker volume COMMAND --help&#39; for more information on a command.\n可以用docker volume ls 查看所有的持久化空间，最主要的是可以看到存储空间的ID。\n有了 ID之后，使用下面的命令，可以查看到持久化的具体地址。\n# docker volume ls\nDRIVER    VOLUME NAME\nlocal     c9fe0c3841af7d052034df6c1bc0b6092c75d9fb9a83d6d7a849ce465981a4d8\n# docker volume inspect c9fe0c3841af7d052034df6c1bc0b6092c75d9fb9a83d6d7a849ce465981a4d8\n[\n    &#123;\n        &quot;CreatedAt&quot;: &quot;2021-08-16T10:07:52+08:00&quot;,\n        &quot;Driver&quot;: &quot;local&quot;,\n        &quot;Labels&quot;: null,\n        &quot;Mountpoint&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;c9fe0c3841af7d052034df6c1bc0b6092c75d9fb9a83d6d7a849ce465981a4d8&#x2F;_data&quot;,\n        &quot;Name&quot;: &quot;c9fe0c3841af7d052034df6c1bc0b6092c75d9fb9a83d6d7a849ce465981a4d8&quot;,\n        &quot;Options&quot;: null,\n        &quot;Scope&quot;: &quot;local&quot;\n    &#125;\n]\n其中的Mountpoint就是持久化的地址，复制这个地址，然后用cd命令进入。\ncd &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;c9fe0c3841af7d052034df6c1bc0b6092c75d9fb9a83d6d7a849ce465981a4d8&#x2F;_data\n然后输入ls，就可以看到在进行中我们编辑的test,.txt文件了。这时候再删除容器，这个文件也是存在的。想要复用持久化数据很简单，就是给volume起个名字。\n在启动一个容器的时候，可以使用-v，给容器中的volume起一个名字。比如还使用我们之前自己创建的镜像my-image。\ndocker container run -d -v &lt;Volume name:Dockerfile VOLUME path&gt;   my-image\n例如启动容器的时候给volume起个名字叫my-data,然后指定Dockerfile中的VOLUME命令路径。因为一个Dockerfile中可能有多个VOLUME命令，所以这里一定要准确指定路径。（注意是Dockerfile中VOLUME命令下的路径）。\ndocker container run -d -v my-data:&#x2F;app my-image\n这时候再查看volume，这时候的VOLUME NAME就不是一大串类似ID的东西了，而是我们起的名字。\n# docker volume ls\nDRIVER    VOLUME NAME\nlocal     my-data\n再通过下面的命令，查看一下持久化的详细地址。\n# docker volume inspect my-data\n[\n    &#123;\n        &quot;CreatedAt&quot;: &quot;2021-08-18T15:12:51+08:00&quot;,\n        &quot;Driver&quot;: &quot;local&quot;,\n        &quot;Labels&quot;: null,\n        &quot;Mountpoint&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;my-data&#x2F;_data&quot;,\n        &quot;Name&quot;: &quot;my-data&quot;,\n        &quot;Options&quot;: null,\n        &quot;Scope&quot;: &quot;local&quot;\n    &#125;\n]\n进入容器，修改数据\n为了证明数据可以复用，现在我们进入容器，然后新建一个test.txt文件，写点内容。\n进入容器的交互模式\ndocker container exec -it &lt;Docker ID&gt; sh\n再进入到/app目录下面，然后用echo向test.txt文件里写入内容。\necho &quot;Hello mybaby!&quot; &gt; test.txt\n删除容器后，重新开启容器\n现在强制删除刚才的容器。\ndocker container rm -f &lt;Container ID&gt;\n删除以后看一下volume是否还在，答案是肯定的，一定是在的。\n# docker volume ls\nDRIVER    VOLUME NAME\nlocal     my-data\n现在我们用这个镜像，再启动一个容器。\ndocker container exec -it &lt;Container ID&gt;  sh\n然后再查看test.txt内容，可以看到内容已经回到了容器中，可以继续修改并使用了。\nBind Mount数据持久化除了Data Volume外，还有一种叫做Bind Mount，从中文翻译来讲，就是挂载绑定。简单讲就是把容器中持久化的数据，绑定到本机的一个自定义位置。使用Bind Mount进行数据持久化的方法，和Data Volume类似，也需要在启动容器的时候用到-v参数，只是参数的编写结构不同。\n比如在windos11下进入PowerShell，运行一个Node的容器，然后把/app目录作为，把本机的当前目录作为绑定目录，意思是容器中的app目录和本机的当前目录绑定到了一起。命令如下：\ndocker container run -it -v $&#123;pwd&#125;:&#x2F;app node\n上面命令具体的意思是，用Bind Mount的形式，开启一个node容器。然后进入交互模式。\n其实这时候就实现了Bind Mount的数据持久化。而且你可以在本机新建和操作内容，然后在容器中运行。\n本机编写index.js插件\n比如在本机的绑定目录新建一个index.js文件，然后每秒钟显示一下时间。\nconsole.log(&#39;show Time&#39;)\nsetInterval(()&#x3D;&gt;&#123;\n    console.log(Date())\n&#125;,1000)\n写完这个文件后，到PowerShell里也是可以看到这个文件的。这样就算本机没有Node环境，可以在容器中进行使用。\n进入容器的/app 目录，运行node index.js命令，就可以显示时间了。\ndocker-compose[docker-compose ]介绍和安装什么是Docker-compose？\n熟悉Linux都知道，我们可以把很多相关的命令写成一个xxx.sh文件，而且这些步骤也是相对固定的。\n这样直接运行sh文件，就可以逐一执行很多相关的Docker命令。这种形式可以减少出错和解决复用问题。Docker很贴心的为我们准备了一个专门的工具docker-compose，实现类似sh文件的功能。让我们更加轻松的实现多Docker命令的操作。\n你也可以把docker-compose就是把很多Docker命令写入一个专属的文件docker-compose.yml，然后执行这个文件，就可以直接启动我们想要的容器。docker-compose也为我们提供了对应的操作命令。\n\n\n\n\n\n\n\n\n\n\ndocker-compose up\n\n\ndocker-compose stop\n\n也就是说，操作docker-compose 会有两个大的部分需要操作:\n\n第一部分是docker-compose.yam文件\n输入命令执行构建容器Linux官方推荐方法安装\n\nLinux系统默认是没有安装docker-compose工具的，可以进入下面的网址。\n\n\n\n\n\n\n\n\n\nhttps://docs.docker.com/desktop/\n进入亡之后，选择Product Manuals —&gt;Docker compose—&gt;Liunx后，可以看到三条命令，依次执行就可以安装docker-compose工具了。\n第一条命令：\nsudo curl -L &quot;https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.29.2&#x2F;docker-compose-$(uname -s)-$(uname -m)&quot; -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose\n如果一次安装不成功，可以多安装几次。一般是网络问题。\n第二条命令：\nsudo chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose\n第三条命令：\nsudo ln -s &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose &#x2F;usr&#x2F;bin&#x2F;docker-compose\n安装好以后，用docker-compose —version 进行检查，如果能出现版本，说明安装成功了。\n[docker-compose]文件的结构和版本yaml`文件里是对启动镜像相关设置的所有描述，下面就逐一讲解一下。\n基本的yaml格式docker-compose.yml\nversion: &quot;3.8&quot;\n\nservices: # 容器\n  servicename: # 服务名字，这个名字也是内部 bridge网络可以使用的 DNS name\n    image: # 镜像的名字\n    command: # 可选，如果设置，则会覆盖默认镜像里的 CMD命令\n    environment: # 可选，相当于 docker run里的 --env\n    volumes: # 可选，相当于docker run里的 -v\n    networks: # 可选，相当于 docker run里的 --network\n    ports: # 可选，相当于 docker run里的 -p\n  servicename2:\n\nvolumes: # 可选，相当于 docker volume create\n\nnetworks: # 可选，相当于 docker network create\n只是简单的看这些解释，你不可能学会yml文件的写法的，下面我们就以一个wordpress的镜像为例，制作yaml文件。\nwordpress的yaml文件写法\n用命令的写法：\ndocker container run -d -p 80:80 wordpress\nyaml文件的写法：\nversion: &quot;3.8&quot;\n\nservices:\n  my-wordpress:\n    image: wordpress:latest\n    ports:\n      - 80:80\n\n\n[docker-compose]镜像构建和拉取我们用Dockerfile拉去一个node的镜像，构建一个新的镜像。这里是学习，所以就不作其他的Dockerfile的复杂定义了，就用最简单的来进行模拟。\nDockerfile文件\nFROM node:latest\nCMD []\n这时候我们的docker-compose.yml文件如下。\nversion: &quot;3.8&quot;\n\nservices:\n  my-node:\n    image: my-node:latest\n这里的image: my-node:latest，是我们自己构建的镜像，但是目前还没有。如果用docker compose up 构建会直接报错。我们运行一下，可以看到下面的错误。\ndocker compose up\n[+] Running 0&#x2F;1\n - my-node Error                                                                                              4.6s\nError response from daemon: pull access denied for my-node, repository does not exist or may require &#39;docker login&#39;: denied: requested access to the resource is denied\n意思就是这个my-node镜像在网上找不到，仓库里没有。\n可以修改docker-compose.yml文件，让docker先构建镜像，然后再启动容器。\n修改后的docker-compose.yml文件\nversion: &quot;3.8&quot;\n\nservices:\n  my-node:\n    build: .&#x2F;file\n修改后，这时候再使用docker compose up命令，这时候就会先进行构建镜像，然后再开启容器。\n给自定义镜像命名\n这时候就不会报错了，也可以正常启动容器了。但是还是有问题的，用下面的命令查看镜像的名字。\n# docker image ls\nREPOSITORY     TAG       IMAGE ID       CREATED      SIZE\ntest_my-node   latest    edf569856ed9   2 days ago   907MB\n镜像的名字是test_my-node，这并不是我们想的叫做my-node。继续修改docker-compose.yml文件，增加image属性。\nversion: &quot;3.8&quot;\n\nservices:\n  my-node:\n    build: .&#x2F;file\n    image: my-node:latest\n在执行docker compose up 命令之前，可以执行下面的命令删除无用信息。\ndocker system prune -f  # 删除没有使用的容器\ndockers image prune  -a  # 删除不使用的镜像 \n然后再次输入下面的命令，启动容器\ndocker compose up\n容器启动之后，你再使用docker image ls 会看到镜像的名字已经变成了设置的名字。\n# docker image ls\nREPOSITORY   TAG       IMAGE ID       CREATED      SIZE\nmy-node      latest    edf569856ed9   2 days ago   907MB\n这样就实现了用docker compose自动逸镜像的名字。\n启动镜像前拉去镜像\n上节课在docker compose中使用了wordpress的镜像。这个容器启动的时间是很长的，因为如果本地没有wordpress镜像，就要去官网上进行拉去，这个占用了95%以上的时间。这时候可以先使用下面的命令进行拉去镜像。\ndocker compose pull\n拉去wordpress镜像的时间比较长，这里就演示拉去node 的了。修改docker-compose.yml文件。\nversion: &quot;3.8&quot;\n\nservices:\n  my-node:\n    image: node:latest\n再使用docker image ls查看镜像列表，可以看到镜像已经被拉去到本地了。\n[网络]Docker的网络模式一台服务器上可以跑很多容器，容器间是相互配合运行的。有配合就需要有网络通讯，就需要设置网络。\n比如现在我们启动一个nginx的容器，用detached模式启动，并映射端口到80上。\ndocker container run -d -p 80:80 nginx\n\n容器启动后，可以用查看容器的具体信息。命令如下。\ndocker inspect &lt;Container ID &gt;\n输入完成后，你可以看到有很多信息。其中有一项是Networks，这个就是容器的网路设置了。\n&quot;Networks&quot;: &#123;\n    &quot;bridge&quot;: &#123;\n       &quot;IPAMConfig&quot;: null,\n       &quot;Links&quot;: null,\n       &quot;Aliases&quot;: null,\n       &quot;NetworkID&quot;: &quot;bd2fe52b4c98ec5c5a11131a0bec714035ae25c791a518f7302d7f02c0aa8a75&quot;,\n       &quot;EndpointID&quot;: &quot;2b8e1ff95d9f0f56be7a9f3737a1a695f523c290aefcd8c5f08130b9fb4535df&quot;,\n       &quot;Gateway&quot;: &quot;172.17.0.1&quot;,\n       &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,\n        &quot;IPPrefixLen&quot;: 16,\n       &quot;IPv6Gateway&quot;: &quot;&quot;,\n       &quot;GlobalIPv6Address&quot;: &quot;&quot;,\n       &quot;GlobalIPv6PrefixLen&quot;: 0,\n       &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,\n       &quot;DriverOpts&quot;: null\n         &#125;\n    &#125;\n\n信息中是可以看出很多东西的，比如这个网络的连接方式是bridge，也就是桥接。然后IP地址IPAddress是172.17.0.2这个就是它的内网IP地址。\n为了看的更清晰，我们可以再启动一个nginx容器.\ndocker container run -d -p 8080:80 nginx\n这时候再使用docker inspect &lt;Container ID &gt;可以看到网络信息是下面这样的。\n&quot;Networks&quot;: &#123;\n    &quot;bridge&quot;: &#123;\n        &quot;IPAMConfig&quot;: null,\n        &quot;Links&quot;: null,\n        &quot;Aliases&quot;: null,\n        &quot;NetworkID&quot;: &quot;bd2fe52b4c98ec5c5a11131a0bec714035ae25c791a518f7302d7f02c0aa8a75&quot;,\n        &quot;EndpointID&quot;: &quot;4686cd198f9e6bbc22b25d1ce2b8e58dbadb60c6b20158a5afaf1bf2856bcdb3&quot;,\n        &quot;Gateway&quot;: &quot;172.17.0.1&quot;,\n        &quot;IPAddress&quot;: &quot;172.17.0.3&quot;,\n        &quot;IPPrefixLen&quot;: 16,\n        &quot;IPv6Gateway&quot;: &quot;&quot;,\n        &quot;GlobalIPv6Address&quot;: &quot;&quot;,\n        &quot;GlobalIPv6PrefixLen&quot;: 0,\n        &quot;MacAddress&quot;: &quot;02:42:ac:11:00:03&quot;,\n        &quot;DriverOpts&quot;: null\n    &#125;\n&#125;\n可以看到这个网络依然是桥接，IP地址变成了172.0.0.3.\n\n\n\n\n\n\n\n\n\n也就是说每一个容器启动后都会有一个IP，并且每个IP是不同，自动变化的。这就是Docker为我们作的默认网络配置。并且虽然容器的启动顺畅，给的IP地址也是递增的。\n这种默认的问题就是，如果每次启动的顺序不一样，IP地址就会不同，这样每次都要重新进行配置。这肯定在工作中是行不通的。真实工作中，可能一台服务器就有几十个容器，如果每次修改通讯地址，这个工作将变的混乱不堪，无法继续。\n那一般情况下，我们会通过- -name来置顶固定名称，然后再用名称进行通信。这种解决方案的前提就是需要了解网络模式和自定义网络后，才能实现可控状态。\n可以使用下面的命令进行查看主机上已经有的网络配置列表.\ndocker network ls\n\n如果你的主机 刚装好Docker，只有下面三种网络模式 名称：\n\nbridge ： 这个是网桥，我习惯性的说成桥接模式。为每一个容器分配、设置IP等，并将容器连接到一个docker0虚拟网桥，默认为该模式。\nhost ：使用主机模式，容器没有IP和网关这些，都是用实体主机的。容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。\nnone ：就是不创建自己的IP网络。也就是常说的没有网，当然你可以自己进行定义网络模式。容器有独立的Network namespace，但并没有对其继续任何网络设置，如分配veth pair 和网桥连接，IP等。\ncontainer : 就是利用其它容器的网络，别的容器有网络了，使用其它的容器网络。新创建的容器不会创建自己的网卡和配置自己的IP，而是和一个指定的容器共享IP、端口等。此种方式不是默认网络模式，它需要基于另一个容器。\n\n这些网络模式都会在后面的课程中讲解，所以不要着急。这节课我们主要讲解第一种网络模式Bridge模式.\nbridge网络模式在该模式中，Docker守护进程创建了一个虚拟以太网桥 docker 0,新建的容器会自动桥接到这个接口，附加在其上的任何网卡之间都能自动转发数据包。\n默认情况下，守护进程会创建一对 对等虚拟设备接口 veth pair, 将其中一个接口设置为容器的eth0 接口（也就是容器的网络/网卡接口），另一个接口放置在主机的命名空间中，以类似vethxxx这样的名字命名，从而将主机上的所有容器都连接到这个内部网络上。\n\n通过图可以清楚的看到桥接模式，eth0是主机网卡，docker0就是桥接网络，每个容器都有自己的teh0，然后通过docker0和主机进行通信，也形成了内部局域网。\n用busybox查看网络\n为了更好的理解Bridge模式，我们启动一个busybox的镜像。 然后查看一下网络。\n\n\n\n\n\n\n\n\n\nbusybox 被称为嵌入式Linux的瑞士军刀，整合了很多小的unix下的通用功能，并且只有一个很小的执行文件。\n启动busybox的命令，这里使用了交互模式，并且给容器起了一个名字bbox01。\ndocker run -it --name bbox01 busybox \n当这个容器启动后，新启动一个CentOS远程主机的会话，然后使用shell命令看一下现在主机网络会多出一个vethxxxxx的信息\nip  addr\n\n然后再到busybox中查看网络信息，可以看出他们形成了一组网络配置。\n通过这个案例，你再回来看上面那段话，就会有深刻的了解。其实就是通过一对 对等虚拟设备实现网络通信，也就是桥接模式。\nhost网络模式\n\n\n\n\n\n\n\n\nhost网络模式使用主机网络模式，容器没有IP和网关这些，都是用实体主机的。容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。\n\n采用host网络模式的Docker Container，可以直接使用主机的IP地址与外界进行通信，若主机的eth0是一个共有IP，那么容器有用这个共有IP。同时容器内服务的端口也可以使用端口，无需额外进行NAT转换。\n\n启动一个Nginx容器，这个容器的特点是不再使用默认的bridge模式，而是使用host模式。使用host模式的关键字是- - network host或者- - net host都可以\ndocker run -it --name nginx1 --network host nginx\n启动后，可以打开浏览器，然后直接输入主机的IP地址，我的IP地址是110.40.130.171,就可以看到nginx提供的默认页面了。这时候使用的是主机的网络设置，并没有映射80端口。\n再重新打开一个终端，利用ip addr查看网络情况。这时候是没有桥接网络的，进一步证明了我们使用的是host模式。\n[root@VM-0-12-centos ~]# ip addr\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1&#x2F;8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1&#x2F;128 scope host \n       valid_lft forever preferred_lft forever\n2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\n    link&#x2F;ether 52:54:00:5d:20:c6 brd ff:ff:ff:ff:ff:ff\n    inet 172.17.0.12&#x2F;20 brd 172.17.15.255 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::5054:ff:fe5d:20c6&#x2F;64 scope link \n       valid_lft forever preferred_lft forever\n3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default \n    link&#x2F;ether 02:42:0b:ee:d6:93 brd ff:ff:ff:ff:ff:ff\n    inet 172.18.0.1&#x2F;16 brd 172.18.255.255 scope global docker0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::42:bff:feee:d693&#x2F;64 scope link \n       valid_lft forever preferred_lft forever\n看起来使用host模式挺好，但是由于host网络模式可以让容器共享主机网络，虽然可以直接通信，但是容器的网络同样缺少隔离性。\nnone网络模式\n\n\n\n\n\n\n\n\nnone网络模式是指禁用网络功能，只有lo接口local的简写，代表127.0.0.1,既localhost本地环回接口。在创建容器时通过 - - net none或者--network none 指定。\n创建一个busybox的容器，使用none的网络模式\ndocker run -it --name bbox02 --network none busybox\nbbox02容器启动完成后，使用ip addr可以看到只有一个lo的网络。\n&#x2F; # ip addr\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000\n    link&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1&#x2F;8 scope host lo\n    valid_lft forever preferred_lft forever\n\n这里的lo就是local,代表着只有本地地址，没有其他操作了。也就是没有网络状态，需要自己进行配置。\n\n\n\n\n\n\n\n\n\nnone网络模式即不为Docker Container创建任何的网络环境，容器内部只能使用loopback网络设备，不会再有其他的网络资源。可以说none模式为Docker Container做了极少的网络设定，但是俗话说的好“少即是多”。在没有网络配置的情况下，作为Docker 开发者，才能在这基础做其他无限多的可能的网络定制开发。这也体现了Docker设计理念的开发。\ncontainer网络模式Container 网络模式是Docker中一种较为特别的网络模式。在创建时通过参数- - net container : 已运行的网络名称 | ID 或者- - network container : 已运行的容器名称 | ID 指定。\n处于这个模式下的Docker容器会共享一个网络栈，这样两个容器之间可以使用localhost高效通信。Container网络模式即新创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP、端口范围等。同样两个容器除了网络方面相同之外，其他的如文件系统、进程列表等还是隔离的。\n为了更好的理解container网络模式，我们创建2个busybox的容器。第一个使用默认的桥接模式bridge，第二个使用container模式。\n先来开启第一个容器，使用- -name给容器命名为bbox01。\ndocker run  - it --name bbox01  busybox\n第一个容器开启后，就会有一对 对等虚拟网络，也就是我们之前学到的桥接模式网络。可以新开一个窗口输入ip addr命令，查看这个虚拟网络。\n第一个开启后，再用- - network container:bbox01开启第二个容器。\ndocker run -it --name bbox02 --network container:bbox01 busybox\n容器创建好以后，在容器的交互模式下，使用ip addr查看，你会发现和bbox01容器中的网络是一样的。以此证明了bbox02使用了bbox01的网络。\n这时候使用ping 命令，查看一下百度的地址，是完全可以ping通的。\n主容器退出后，附容器无法联网\n如果主容器退出以后，那么附容器将没办法联网,这里的附的意思是依附于主容器。现在我们回到第一个shell窗口，然后使用exit退出bbox01容器。再回到第二个shell窗口，重新ping www.baidu.com，是没办法ping通的。\n说明主容器退出后，附容器将没办法再继续使用。\n再回到第一个shell窗口，启动bbox01容器。\ndocker container start bbox01\n然后再回到第二个shell窗口，网络依然不可以使用，这时候你要重新启动容器后，才能再次进行使用。\n先用exit命令退出容器，然后使用下面的命令重启。\ndocker container start bbox02\n然后使用exec命令进入交互模式。\ndocker exec -it bbox02 sh\n这时候在ping我的博客jspang.com就可以ping通了。\nDocker 上搭建Hadoop学习环境使用以下命令为Hadoop集群创建单独的网络:sudo docker network create --driver&#x3D;bridge hadoop\n3节点Hadoop集群搭建步骤下载Docker镜像sudo docker pull kiwenlau&#x2F;hadoop:1.0\n\n\n下载GitHub仓库git clone https:&#x2F;&#x2F;github.com&#x2F;kiwenlau&#x2F;hadoop-cluster-docker\n\n创建Hadoop网络sudo docker network create --driver&#x3D;bridge hadoop\n\n运行Docker容器cd hadoop-cluster-docker\n.&#x2F;start-container.sh\n\n启动hadoop.&#x2F;start-hadoop.sh\n\n\n运行wordcount.&#x2F;run-wordcount.sh\n\n\nN节点Hadoop集群搭建步骤重新构建Docker镜像.&#x2F;resize-cluster.sh 4\n\n\n.&#x2F;start-container.sh 4\n\n.&#x2F;start-hadoop.sh\n\n.&#x2F;run-wordcount.sh\n\n\n\n","slug":"区块链1","date":"2022-11-03T14:58:49.000Z","categories_index":"信管","tags_index":"区块链","author_index":"Algernon"},{"id":"5f49d908c20f45931c28cee8b97efd48","title":"【GO语言编程】（四）","content":"http编程 package main\n\n import (\n &quot;fmt&quot;\n &quot;net&#x2F;http&quot;\n )\n\n func main() &#123;\n &#x2F;&#x2F;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;go\n &#x2F;&#x2F; 单独写回调函数\n http.HandleFunc(&quot;&#x2F;go&quot;, myHandler)\n &#x2F;&#x2F;http.HandleFunc(&quot;&#x2F;ungo&quot;,myHandler2 )\n &#x2F;&#x2F; addr：监听的地址\n&#x2F;&#x2F; handler：回调函数\n http.ListenAndServe(&quot;127.0.0.1:8000&quot;, nil)\n &#125;\n\n &#x2F;&#x2F; handler函数\n func myHandler(w http.ResponseWriter, r *http.Request) &#123;\n fmt.Println(r.RemoteAddr, &quot;连接成功&quot;)\n\n&#x2F;&#x2F; 请求方式：GET POST DELETE PUT UPDATE\n fmt.Println(&quot;method:&quot;, r.Method)\n &#x2F;&#x2F; &#x2F;go\n fmt.Println(&quot;url:&quot;, r.URL.Path)\n fmt.Println(&quot;header:&quot;, r.Header)\n fmt.Println(&quot;body:&quot;, r.Body)\n &#x2F;&#x2F; 回复\n w.Write([]byte(&quot;www.5lmh.com&quot;))\n&#125;\n\npackage main\n\n import (\n &quot;fmt&quot;\n &quot;io&quot;\n &quot;net&#x2F;http&quot;\n )\n\n func main() &#123;\n &#x2F;&#x2F;resp, _ :&#x3D; http.Get(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;)\n &#x2F;&#x2F;fmt.Println(resp)\n resp, _ :&#x3D; http.Get(&quot;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;go&quot;)\n defer resp.Body.Close()\n &#x2F;&#x2F; 200 OK\n fmt.Println(resp.Status)\n fmt.Println(resp.Header)\n\n buf :&#x3D; make([]byte, 1024)\n for &#123;\n &#x2F;&#x2F; 接收服务端信息\n n, err :&#x3D; resp.Body.Read(buf)\n if err !&#x3D; nil &amp;&amp; err !&#x3D; io.EOF &#123;\n fmt.Println(err)\n return\n &#125; else &#123;\n fmt.Println(&quot;读取完毕&quot;)\n res :&#x3D; string(buf[:n])\n fmt.Println(res)\n break\n &#125;\n\n &#125;\n &#125;\n\ngo操作MYSQLMysql-install\n\n\n\n\n\n\n\n\n\nhttps://developer.aliyun.com/article/758177#:~:text=%E5%A6%82%E4%BD%95%E5%9C%A8%20Ubuntu%2020.04%20%E4%B8%8A%E5%AE%89%E8%A3%85%20MySQL%201%20%E4%B8%80%E3%80%81%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6%20%E7%A1%AE%E4%BF%9D%E4%BD%A0%E4%BB%A5,5%20%E4%BA%94%E3%80%81%E6%80%BB%E7%BB%93%20%E6%88%91%E4%BB%AC%E5%B7%B2%E7%BB%8F%E5%90%91%E4%BD%A0%E5%B1%95%E7%A4%BA%E5%A6%82%E4%BD%95%E5%9C%A8%20Ubuntu%2020.04%20%E4%B8%8A%E5%AE%89%E8%A3%85%20MySQL%E3%80%82%20\n\n一旦安装完成，MySQL 服务将会自动启动。想要验证 MySQL 服务器正在运行，输入：\nsudo systemctl status mysql\n\n● mysql.service - MySQL Community Server\n     Loaded: loaded (&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mysql.service; enabled; vendor preset: enabled)\n     Active: active (running) since Sun 2022-09-25 17:18:35 CST; 2min 10s ago\n   Main PID: 20386 (mysqld)\n     Status: &quot;Server is operational&quot;\n      Tasks: 38 (limit: 9294)\n     Memory: 360.0M\n     CGroup: &#x2F;system.slice&#x2F;mysql.service\n             └─20386 &#x2F;usr&#x2F;sbin&#x2F;mysqld\n\n9月 25 17:18:27 algernon-Lenovo-Legion-Y7000 systemd[1]: Starting MySQL Community Server...\n9月 25 17:18:35 algernon-Lenovo-Legion-Y7000 systemd[1]: Started MySQL Community Server.\n\n\nMysql使用新建test数据库，person、place 表\n CREATE TABLE &#96;person&#96; (\n &#96;user_id&#96; int(11) NOT NULL AUTO_INCREMENT,\n &#96;username&#96; varchar(260) DEFAULT NULL,\n &#96;sex&#96; varchar(260) DEFAULT NULL,\n &#96;email&#96; varchar(260) DEFAULT NULL,\n PRIMARY KEY (&#96;user_id&#96;)\n) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;2 DEFAULT CHARSET&#x3D;utf8;\n\n CREATE TABLE place (\n country varchar(200),\n city varchar(200),\n telcode int\n )ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;2 DEFAULT CHARSET&#x3D;utf8;\n\nmysql&gt; desc person;\n+----------+--------------+------+-----+---------+----------------+\n| Field | Type | Null | Key | Default | Extra |\n+----------+--------------+------+-----+---------+----------------+\n| user_id | int(11) | NO | PRI | NULL | auto_increment |\n| username | varchar(260) | YES | | NULL | |\n| sex | varchar(260) | YES | | NULL | |\n| email | varchar(260) | YES | | NULL | |\n+----------+--------------+------+-----+---------+----------------+\n4 rows in set (0.00 sec)\n\nmysql&gt; desc place;\n+---------+--------------+------+-----+---------+-------+\n| Field | Type | Null | Key | Default | Extra |\n+---------+--------------+------+-----+---------+-------+\n| country | varchar(200) | YES | | NULL | |\n| city | varchar(200) | YES | | NULL | |\n| telcode | int(11) | YES | | NULL | |\n+---------+--------------+------+-----+---------+-------+\n3 rows in set (0.01 sec)\n\n\n\n\n\n\n\n\n\nhttps://blog.csdn.net/kuangshp128/article/details/115816597\n+----------+--------------+------+-----+---------+----------------+\n| Field    | Type         | Null | Key | Default | Extra          |\n+----------+--------------+------+-----+---------+----------------+\n| user_id  | int          | NO   | PRI | NULL    | auto_increment |\n| username | varchar(260) | YES  |     | NULL    |                |\n| sex      | varchar(260) | YES  |     | NULL    |                |\n| email    | varchar(260) | YES  |     | NULL    |                |\n+----------+--------------+------+-----+---------+----------------+\n4 rows in set (0.01 sec)\n\nmysql&gt; desc place;\n+---------+--------------+------+-----+---------+-------+\n| Field   | Type         | Null | Key | Default | Extra |\n+---------+--------------+------+-----+---------+-------+\n| country | varchar(200) | YES  |     | NULL    |       |\n| city    | varchar(200) | YES  |     | NULL    |       |\n| telcode | int          | YES  |     | NULL    |       |\n+---------+--------------+------+-----+---------+-------+\n3 rows in set (0.01 sec)\n\n\nmysql使用\n\n\n\n\n\n\n\n\n使用第三方开源的mysql库: github.com/go-sql-driver/mysql （mysql驱动）github.com/jmoiron/sqlx （基于mysql驱动的封装）\ngo get github.com&#x2F;go-sql-driver&#x2F;mysql\ngo get github.com&#x2F;jmoiron&#x2F;sqlx\n链接mysql\ndatabase, err :&#x3D; sqlx.Open(&quot;mysql&quot;, &quot;root:XXXX@tcp(127.0.0.1:3306)&#x2F;test&quot;)\n&#x2F;&#x2F;database, err :&#x3D; sqlx.Open(&quot;数据库类型&quot;, &quot;用户名:密码@tcp(地址:端口)&#x2F;数据库名&quot;)\ndatabase, err :&#x3D; sqlx.Open(&quot;mysql&quot;, &quot;debian-sys-maint:ACrhxSvWeDh0z8Km@tcp(127.0.0.1:3306)&#x2F;test&quot;)\nInsert操作 package main\n\n import (\n &quot;fmt&quot;\n _ &quot;github.com&#x2F;go-sql-driver&#x2F;mysql&quot;\n &quot;github.com&#x2F;jmoiron&#x2F;sqlx&quot;\n )\n\n type Person struct &#123;\n UserId int &#96;db:&quot;user_id&quot;&#96;\n Username string &#96;db:&quot;username&quot;&#96;\n Sex string &#96;db:&quot;sex&quot;&#96;\n Email string &#96;db:&quot;email&quot;&#96;\n &#125;\n\n type Place struct &#123;\n Country string &#96;db:&quot;country&quot;&#96;\n City string &#96;db:&quot;city&quot;&#96;\n TelCode int &#96;db:&quot;telcode&quot;&#96;\n &#125;\n\n var Db *sqlx.DB\n\n func init() &#123;\n database, err :&#x3D; sqlx.Open(&quot;mysql&quot;, &quot;debian-sys-maint:ACrhxSvWeDh0z8Km@tcp(127.0.0.1:3306)&#x2F;test&quot;)\n if err !&#x3D; nil &#123;\n fmt.Println(&quot;open mysql failed,&quot;, err)\n return\n &#125;\n Db &#x3D; database\n &#125;\n\n func main() &#123;\n\nr, err :&#x3D; Db.Exec(&quot;insert into person(username, sex, email)values(?, ?,\n?)&quot;, &quot;stu001&quot;, &quot;man&quot;, &quot;stu01@qq.com&quot;)\n if err !&#x3D; nil &#123;\n fmt.Println(&quot;exec failed, &quot;, err)\n return\n &#125;\n id, err :&#x3D; r.LastInsertId()\n if err !&#x3D; nil &#123;\n fmt.Println(&quot;exec failed, &quot;, err)\n return\n &#125;\n\n fmt.Println(&quot;insert succ:&quot;, id)\n &#125;\n\nSelect操作 package main\n\n import (\n &quot;fmt&quot;\n\n _ &quot;github.com&#x2F;go-sql-driver&#x2F;mysql&quot;\n &quot;github.com&#x2F;jmoiron&#x2F;sqlx&quot;\n )\n\n type Person struct &#123;\n UserId int &#96;db:&quot;user_id&quot;&#96;\n Username string &#96;db:&quot;username&quot;&#96;\n Sex string &#96;db:&quot;sex&quot;&#96;\n Email string &#96;db:&quot;email&quot;&#96;\n &#125;\n type Place struct &#123;\n Country string &#96;db:&quot;country&quot;&#96;\n City string &#96;db:&quot;city&quot;&#96;\n TelCode int &#96;db:&quot;telcode&quot;&#96;\n &#125;\n\n var Db *sqlx.DB\n\n func init() &#123;\n\n database, err :&#x3D; sqlx.Open(&quot;mysql&quot;, &quot;debian-sys-maint:ACrhxSvWeDh0z8Km@tcp(127.0.0.1:3306)&#x2F;test&quot;)\n if err !&#x3D; nil &#123;\n fmt.Println(&quot;open mysql failed,&quot;, err)\n return\n &#125;\n\n Db &#x3D; database\n &#125;\n\n func main() &#123;\n\n var person []Person\n\nerr :&#x3D; Db.Select(&amp;person, &quot;select user_id, username, sex, email from person\nwhere user_id&#x3D;?&quot;, 1)\n if err !&#x3D; nil &#123;\n fmt.Println(&quot;exec failed, &quot;, err)\n return\n &#125;\n\n fmt.Println(&quot;select succ:&quot;, person)\n &#125;\nupdate操作 package main\n\n import (\n &quot;fmt&quot;\n\n _ &quot;github.com&#x2F;go-sql-driver&#x2F;mysql&quot;\n &quot;github.com&#x2F;jmoiron&#x2F;sqlx&quot;\n )\n\n type Person struct &#123;\n UserId int &#96;db:&quot;user_id&quot;&#96;\n Username string &#96;db:&quot;username&quot;&#96;\n Sex string &#96;db:&quot;sex&quot;&#96;\n Email string &#96;db:&quot;email&quot;&#96;\n &#125;\n\n type Place struct &#123;\n Country string &#96;db:&quot;country&quot;&#96;\n City string &#96;db:&quot;city&quot;&#96;\n TelCode int &#96;db:&quot;telcode&quot;&#96;\n &#125;\n\n var Db *sqlx.DB\n\n func init() &#123;\n\n database, err :&#x3D; sqlx.Open(&quot;mysql&quot;, &quot;root:root@tcp(127.0.0.1:3306)&#x2F;test&quot;)\n if err !&#x3D; nil &#123;\n fmt.Println(&quot;open mysql failed,&quot;, err)\n return\n &#125;\n\n Db &#x3D; database\n &#125;\n\n func main() &#123;\n\n\nres, err :&#x3D; Db.Exec(&quot;update person set username&#x3D;? where user_id&#x3D;?&quot;,\n&quot;stu0003&quot;, 1)\n if err !&#x3D; nil &#123;\n fmt.Println(&quot;exec failed, &quot;, err)\n return\n &#125;\n row, err :&#x3D; res.RowsAffected()\n if err !&#x3D; nil &#123;\n fmt.Println(&quot;rows failed, &quot;,err)\n &#125;\n fmt.Println(&quot;update succ:&quot;,row)\n\n &#125;\ndelete操作package main\n\nimport (\n&quot;fmt&quot;\n\n_ &quot;github.com&#x2F;go-sql-driver&#x2F;mysql&quot;\n&quot;github.com&#x2F;jmoiron&#x2F;sqlx&quot;\n)\n\ntype Person struct &#123;\nUserId int &#96;db:&quot;user_id&quot;&#96;\nUsername string &#96;db:&quot;username&quot;&#96;\nSex string &#96;db:&quot;sex&quot;&#96;\nEmail string &#96;db:&quot;email&quot;&#96;\n&#125;\n\ntype Place struct &#123;\nCountry string &#96;db:&quot;country&quot;&#96;\nCity string &#96;db:&quot;city&quot;&#96;\nTelCode int &#96;db:&quot;telcode&quot;&#96;\n&#125;\n\nvar Db *sqlx.DB\n\nfunc init() &#123;\n\ndatabase, err :&#x3D; sqlx.Open(&quot;mysql&quot;, &quot;root:root@tcp(127.0.0.1:3306)&#x2F;test&quot;)\nif err !&#x3D; nil &#123;\nfmt.Println(&quot;open mysql failed,&quot;, err)\nreturn\n&#125;\n\nDb &#x3D; database\n&#125;\n\nfunc main() &#123;\n\n&#x2F;*\n_, err :&#x3D; Db.Exec(&quot;delete from person where user_id&#x3D;?&quot;, 1)\nif err !&#x3D; nil &#123;\nfmt.Println(&quot;exec failed, &quot;, err)\nreturn\n&#125;\n*&#x2F;\n\nres, err :&#x3D; Db.Exec(&quot;delete from person where user_id&#x3D;?&quot;, 1)\nif err !&#x3D; nil &#123;\nfmt.Println(&quot;exec failed, &quot;, err)\nreturn\n&#125;\n\nrow,err :&#x3D; res.RowsAffected()\nif err !&#x3D; nil &#123;\nfmt.Println(&quot;rows failed, &quot;,err)\n&#125;\n\nfmt.Println(&quot;delete succ: &quot;,row)\n&#125;\nMysql事务 package main\n\n import (\n &quot;fmt&quot;\n\n _ &quot;github.com&#x2F;go-sql-driver&#x2F;mysql&quot;\n &quot;github.com&#x2F;jmoiron&#x2F;sqlx&quot;\n )\n\n type Person struct &#123;\n UserId int &#96;db:&quot;user_id&quot;&#96;\n Username string &#96;db:&quot;username&quot;&#96;\n Sex string &#96;db:&quot;sex&quot;&#96;\n Email string &#96;db:&quot;email&quot;&#96;\n &#125;\n\n type Place struct &#123;\n Country string &#96;db:&quot;country&quot;&#96;\n City string &#96;db:&quot;city&quot;&#96;\n TelCode int &#96;db:&quot;telcode&quot;&#96;\n &#125;\n\n var Db *sqlx.DB\n func init() &#123;\n\ndatabase, err :&#x3D; sqlx.Open(&quot;mysql&quot;,\n&quot;root:root@tcp(127.0.0.1:3306)&#x2F;test&quot;)\n if err !&#x3D; nil &#123;\n fmt.Println(&quot;open mysql failed,&quot;, err)\n return\n &#125;\n Db &#x3D; database\n &#125;\n\n func main() &#123;\n conn, err :&#x3D; Db.Begin()\n if err !&#x3D; nil &#123;\n fmt.Println(&quot;begin failed :&quot;, err)\n return\n &#125;\n\n\nr, err :&#x3D; conn.Exec(&quot;insert into person(username, sex, email)values(?,\n?, ?)&quot;, &quot;stu001&quot;, &quot;man&quot;, &quot;stu01@qq.com&quot;)\n if err !&#x3D; nil &#123;\n fmt.Println(&quot;exec failed, &quot;, err)\n conn.Rollback()\n return\n &#125;\n id, err :&#x3D; r.LastInsertId()\n if err !&#x3D; nil &#123;\n fmt.Println(&quot;exec failed, &quot;, err)\n conn.Rollback()\n return\n &#125;\n fmt.Println(&quot;insert succ:&quot;, id)\n\n\nr, err &#x3D; conn.Exec(&quot;insert into person(username, sex, email)values(?,\n?, ?)&quot;, &quot;stu001&quot;, &quot;man&quot;, &quot;stu01@qq.com&quot;)\n if err !&#x3D; nil &#123;\n fmt.Println(&quot;exec failed, &quot;, err)\n conn.Rollback()\n return\n &#125;\n id, err &#x3D; r.LastInsertId()\n if err !&#x3D; nil &#123;\n fmt.Println(&quot;exec failed, &quot;, err)\n conn.Rollback()\n return\n &#125;\n fmt.Println(&quot;insert succ:&quot;, id)\n\n conn.Commit()\n &#125;\n\n查看MySQL：\nmysql&gt; select * from person;\n+---------+----------+------+--------------+\n| user_id | username | sex | email |\n+---------+----------+------+--------------+\n| 2 | stu001 | man | stu01@qq.com |\n| 3 | stu001 | man | stu01@qq.com |\n+---------+----------+------+--------------+\n2 rows in set (0.00 sec)\nGin框架安装配置go get -u github.com&#x2F;gin-gonic&#x2F;gin\nimport &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n\n package main\n\n import (\n &quot;net&#x2F;http&quot;\n\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n )\n\n func main() &#123;\n &#x2F;&#x2F; 1.创建路由\n r :&#x3D; gin.Default()\n &#x2F;&#x2F; 2.绑定路由规则，执行的函数\n &#x2F;&#x2F; gin.Context，封装了request和response\n r.GET(&quot;&#x2F;&quot;, func(c *gin.Context) &#123;\n c.String(http.StatusOK, &quot;hello World!&quot;)\n &#125;)\n &#x2F;&#x2F; 3.监听端口，默认在8080\n&#x2F;&#x2F; Run(&quot;里面不指定端口号默认为8080&quot;)\n r.Run(&quot;:8000&quot;)\n &#125;\n\n\n\n\n\n\n\n\n\nhttps://zhuanlan.zhihu.com/p/453462046\nhttps://blog.csdn.net/weixin_63943623/article/details/124245012\n\ngin路由\npackage main\n\nimport (\n&quot;net&#x2F;http&quot;\n&quot;strings&quot;\n\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc main() &#123;\nr :&#x3D; gin.Default()\nr.GET(&quot;&#x2F;user&#x2F;:name&#x2F;*action&quot;, func(c *gin.Context) &#123;\nname :&#x3D; c.Param(&quot;name&quot;)\naction :&#x3D; c.Param(&quot;action&quot;)\n&#x2F;&#x2F;截取&#x2F;\naction &#x3D; strings.Trim(action, &quot;&#x2F;&quot;)\nc.String(http.StatusOK, name+&quot; is &quot;+action)\n&#125;)\n&#x2F;&#x2F;默认为监听8080端口\nr.Run(&quot;:8000&quot;)\n&#125;\npackage main\n\nimport (\n&quot;fmt&quot;\n&quot;net&#x2F;http&quot;\n\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc main() &#123;\nr :&#x3D; gin.Default()\nr.GET(&quot;&#x2F;user&quot;, func(c *gin.Context) &#123;\n&#x2F;&#x2F;指定默认值\n&#x2F;&#x2F;http:&#x2F;&#x2F;localhost:8080&#x2F;user 才会打印出来默认的值\nname :&#x3D; c.DefaultQuery(&quot;name&quot;, &quot;枯藤&quot;)\nc.String(http.StatusOK, fmt.Sprintf(&quot;hello %s&quot;, name))\n&#125;)\nr.Run()\n&#125;\n\n &lt;!DOCTYPE html&gt;\n &lt;html lang&#x3D;&quot;en&quot;&gt;\n &lt;head&gt;\n &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;\n &lt;title&gt;Document&lt;&#x2F;title&gt;\n &lt;&#x2F;head&gt;\n &lt;body&gt;\n\n&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;form&quot; method&#x3D;&quot;post&quot;\naction&#x3D;&quot;application&#x2F;x-www-form-urlencoded&quot;&gt;\n\n用户名：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; placeholder&#x3D;&quot;请输入你的用户名&quot;&gt;\n&lt;br&gt;\n\n密&amp;nbsp;&amp;nbsp;&amp;nbsp;码：&lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;userpassword&quot;\nplaceholder&#x3D;&quot;请输入你的密码&quot;&gt; &lt;br&gt;\n &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;\n &lt;&#x2F;form&gt;\n &lt;&#x2F;body&gt;\n &lt;&#x2F;html&gt;\npackage main\n\n &#x2F;&#x2F;\n import (\n &quot;fmt&quot;\n &quot;net&#x2F;http&quot;\n\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n )\n\n\n func main() &#123;\n r :&#x3D; gin.Default()\n r.POST(&quot;&#x2F;form&quot;, func(c *gin.Context) &#123;\n types :&#x3D; c.DefaultPostForm(&quot;type&quot;, &quot;post&quot;)\n username :&#x3D; c.PostForm(&quot;username&quot;)\n password :&#x3D; c.PostForm(&quot;userpassword&quot;)\n\n&#x2F;&#x2F; c.String(http.StatusOK,\nfmt.Sprintf(&quot;username:%s,password:%s,type:%s&quot;, username, password, types))\n\nc.String(http.StatusOK, fmt.Sprintf(&quot;username:%s,password:%s,type:%s&quot;,\nusername, password, types))\n &#125;)\n r.Run()\n &#125;\n\n上传单个文件 &lt;!DOCTYPE html&gt;\n &lt;html lang&#x3D;&quot;en&quot;&gt;\n &lt;head&gt;\n &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;\n &lt;title&gt;Document&lt;&#x2F;title&gt;\n &lt;&#x2F;head&gt;\n &lt;body&gt;\n\n&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;upload&quot; method&#x3D;&quot;post&quot;\nenctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;\n 上传文件:&lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;file&quot; &gt;\n &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;\n &lt;&#x2F;form&gt;\n &lt;&#x2F;body&gt;\n &lt;&#x2F;html&gt;\npackage main\n\nimport (\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc main() &#123;\nr :&#x3D; gin.Default()\n&#x2F;&#x2F;限制上传最大尺寸\nr.MaxMultipartMemory &#x3D; 8 &lt;&lt; 20\nr.POST(&quot;&#x2F;upload&quot;, func(c *gin.Context) &#123;\nfile, err :&#x3D; c.FormFile(&quot;file&quot;)\nif err !&#x3D; nil &#123;\nc.String(500, &quot;上传图片出错&quot;)\n&#125;\n&#x2F;&#x2F; c.JSON(200, gin.H&#123;&quot;message&quot;: file.Header.Context&#125;)\nc.SaveUploadedFile(file, file.Filename)\n\nc.String(http.StatusOK, file.Filename)\n&#125;)\nr.Run()\n&#125;\n\n\n上传特定文件 package main\n\n import (\n &quot;fmt&quot;\n &quot;log&quot;\n &quot;net&#x2F;http&quot;\n\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n )\n\n func main() &#123;\n r :&#x3D; gin.Default()\n r.POST(&quot;&#x2F;upload&quot;, func(c *gin.Context) &#123;\n _, headers, err :&#x3D; c.Request.FormFile(&quot;file&quot;)\n if err !&#x3D; nil &#123;\nlog.Printf(&quot;Error when try to get file: %v&quot;, err)\n &#125;\n &#x2F;&#x2F;headers.Size 获取文件大小\n if headers.Size &gt; 1024*1024*2 &#123;\n fmt.Println(&quot;文件太大了&quot;)\n return\n &#125;\n &#x2F;&#x2F;headers.Header.Get(&quot;Content-Type&quot;)获取上传文件的类型\n if headers.Header.Get(&quot;Content-Type&quot;) !&#x3D; &quot;image&#x2F;png&quot; &#123;\n fmt.Println(&quot;只允许上传png图片&quot;)\n return\n &#125;\n c.SaveUploadedFile(headers, &quot;.&#x2F;video&#x2F;&quot;+headers.Filename)\n c.String(http.StatusOK, headers.Filename)\n &#125;)\n r.Run()\n &#125;\n上传多个文件 &lt;!DOCTYPE html&gt;\n &lt;html lang&#x3D;&quot;en&quot;&gt;\n &lt;head&gt;\n &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;\n &lt;title&gt;Document&lt;&#x2F;title&gt;\n &lt;&#x2F;head&gt;\n &lt;body&gt;\n\n&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;localhost:8000&#x2F;upload&quot; method&#x3D;&quot;post&quot;\nenctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;\n 上传文件:&lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;files&quot; multiple&gt;\n &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;\n &lt;&#x2F;form&gt;\n &lt;&#x2F;body&gt;\n &lt;&#x2F;html&gt;\n package main\n\n import (\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n &quot;net&#x2F;http&quot;\n &quot;fmt&quot;\n )\n\n &#x2F;&#x2F; gin的helloWorld\n\n func main() &#123;\n &#x2F;&#x2F; 1.创建路由\n &#x2F;&#x2F; 默认使用了2个中间件Logger(), Recovery()\n r :&#x3D; gin.Default()\n &#x2F;&#x2F; 限制表单上传大小 8MB，默认为32MB\n r.MaxMultipartMemory &#x3D; 8 &lt;&lt; 20\n r.POST(&quot;&#x2F;upload&quot;, func(c *gin.Context) &#123;\n form, err :&#x3D; c.MultipartForm()\n if err !&#x3D; nil &#123;\n\nc.String(http.StatusBadRequest, fmt.Sprintf(&quot;get err %s&quot;,\nerr.Error()))\n &#125;\n &#x2F;&#x2F; 获取所有图片\n files :&#x3D; form.File[&quot;files&quot;]\n &#x2F;&#x2F; 遍历所有图片\n for _, file :&#x3D; range files &#123;\n &#x2F;&#x2F; 逐个存\n if err :&#x3D; c.SaveUploadedFile(file, file.Filename); err !&#x3D; nil &#123;\n\nc.String(http.StatusBadRequest, fmt.Sprintf(&quot;upload err %s&quot;,\nerr.Error()))\n return\n &#125;\n &#125;\n c.String(200, fmt.Sprintf(&quot;upload ok %d files&quot;, len(files)))\n &#125;)\n &#x2F;&#x2F;默认端口号是8080\n r.Run(&quot;:8000&quot;)\n &#125;\n\nroutes group package main\n\n import (\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n &quot;fmt&quot;\n )\n\n&#x2F;&#x2F; gin的helloWorld\n\n func main() &#123;\n &#x2F;&#x2F; 1.创建路由\n &#x2F;&#x2F; 默认使用了2个中间件Logger(), Recovery()\n r :&#x3D; gin.Default()\n &#x2F;&#x2F; 路由组1 ，处理GET请求\n v1 :&#x3D; r.Group(&quot;&#x2F;v1&quot;)\n &#x2F;&#x2F; &#123;&#125; 是书写规范\n &#123;\n v1.GET(&quot;&#x2F;login&quot;, login)\n v1.GET(&quot;submit&quot;, submit)\n &#125;\n v2 :&#x3D; r.Group(&quot;&#x2F;v2&quot;)\n &#123;\n v2.POST(&quot;&#x2F;login&quot;, login)\n v2.POST(&quot;&#x2F;submit&quot;, submit)\n &#125;\n r.Run(&quot;:8000&quot;)\n &#125;\n\n func login(c *gin.Context) &#123;\n name :&#x3D; c.DefaultQuery(&quot;name&quot;, &quot;jack&quot;)\n c.String(200, fmt.Sprintf(&quot;hello %s\\n&quot;, name))\n &#125;\n\n func submit(c *gin.Context) &#123;\n name :&#x3D; c.DefaultQuery(&quot;name&quot;, &quot;lily&quot;)\n c.String(200, fmt.Sprintf(&quot;hello %s\\n&quot;, name))\n &#125;\n\n路由拆分与注册基本的路由注册package main\n\nimport (\n&quot;net&#x2F;http&quot;\n\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc helloHandler(c *gin.Context) &#123;\nc.JSON(http.StatusOK, gin.H&#123;\n&quot;message&quot;: &quot;Hello www.topgoer.com!&quot;,\n&#125;)\n&#125;\n\nfunc main() &#123;\nr :&#x3D; gin.Default()\nr.GET(&quot;&#x2F;topgoer&quot;, helloHandler)\nif err :&#x3D; r.Run(); err !&#x3D; nil &#123;\nfmt.Println(&quot;startup service failed, err:%v\\n&quot;, err)\n&#125;\n&#125;\n路由拆分成单独文件或包当项目的规模增大后就不太适合继续在项目的main.go文件中去实现路由注册相关逻辑了，我们会倾向于把路由部分的代码都拆分出来，形成一个单独的文件或包：我们在routers.go文件中定义并注册路由信息：\npackage main\n\nimport (\n&quot;net&#x2F;http&quot;\n\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc helloHandler(c *gin.Context) &#123;\nc.JSON(http.StatusOK, gin.H&#123;\n&quot;message&quot;: &quot;Hello www.topgoer.com!&quot;,\n&#125;)\n&#125;\n\nfunc setupRouter() *gin.Engine &#123;\nr :&#x3D; gin.Default()\nr.GET(&quot;&#x2F;topgoer&quot;, helloHandler)\nreturn r\n&#125;\n此时main.go中调用上面定义好的setupRouter函数：\nfunc main() &#123;\nr :&#x3D; setupRouter()\nif err :&#x3D; r.Run(); err !&#x3D; nil &#123;\nfmt.Println(&quot;startup service failed, err:%v\\n&quot;, err)\n&#125;\n&#125;\nrouters/routers.go需要注意此时setupRouter需要改成首字母大写：\npackage routers\n\nimport (\n&quot;net&#x2F;http&quot;\n\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc helloHandler(c *gin.Context) &#123;\nc.JSON(http.StatusOK, gin.H&#123;\n&quot;message&quot;: &quot;Hello www.topgoer.com&quot;,\n&#125;)\n&#125;\n\n&#x2F;&#x2F; SetupRouter 配置路由信息\nfunc SetupRouter() *gin.Engine &#123;\nr :&#x3D; gin.Default()\nr.GET(&quot;&#x2F;topgoer&quot;, helloHandler)\nreturn r\n&#125;\nmain.go文件内容如下：\npackage main\n\nimport (\n&quot;fmt&quot;\n&quot;gin_demo&#x2F;routers&quot;\n)\n\nfunc main() &#123;\nr :&#x3D; routers.SetupRouter()\nif err :&#x3D; r.Run(); err !&#x3D; nil &#123;\nfmt.Println(&quot;startup service failed, err:%v\\n&quot;, err)\n&#125;\n&#125;\n路由拆分成多个文件我们可以分开定义多个路由文件，例如：\n1. gin_demo\n2. ├── go.mod\n3. ├── go.sum\n4. ├── main.go\n5. └── routers\n6. ├── blog.go\n7. └── shop.go\nrouters/shop.go中添加一个LoadShop的函数，将shop相关的路由注册到指定的路由器：\nfunc LoadShop(e *gin.Engine) &#123;\ne.GET(&quot;&#x2F;hello&quot;, helloHandler)\ne.GET(&quot;&#x2F;goods&quot;, goodsHandler)\ne.GET(&quot;&#x2F;checkout&quot;, checkoutHandler)\n...\n&#125;\nrouters/blog.go中添加一个LoadBlog的函数，将blog相关的路由注册到指定的路由器：\nfunc LoadBlog(e *gin.Engine) &#123;\ne.GET(&quot;&#x2F;post&quot;, postHandler)\ne.GET(&quot;&#x2F;comment&quot;, commentHandler)\n...\n&#125;\n在main函数中实现最终的注册逻辑如下：\nfunc main() &#123;\nr :&#x3D; gin.Default()\nrouters.LoadBlog(r)\nrouters.LoadShop(r)\nif err :&#x3D; r.Run(); err !&#x3D; nil &#123;\nfmt.Println(&quot;startup service failed, err:%v\\n&quot;, err)\n &#125;\n&#125;\n路由拆分到不同APP有时候项目规模实在太大，那么我们就更倾向于把业务拆分的更详细一些，例如把不同的业务代码拆分成不同的APP。因此我们在项目目录下单独定义一个app目录，用来存放我们不同业务线的代码文件，这样就很容易进行横向扩展。大致目录结构如下：\n1. gin_demo\n2. ├── app\n3. │ ├── blog\n4. │ │ ├── handler.go\n5. │ │ └── router.go\n6. │ └── shop\n7. │ ├── handler.go\n8. │ └── router.go\n9. ├── go.mod\n10. ├── go.sum\n11. ├── main.go\n12. └── routers\n13. └── routers.go\n其中app/blog/router.go用来定义post相关路由信息，具体内容如下：\nfunc Routers(e *gin.Engine) &#123;\ne.GET(&quot;&#x2F;post&quot;, postHandler)\ne.GET(&quot;&#x2F;comment&quot;, commentHandler)\n&#125;\napp/shop/router.go用来定义shop相关路由信息，具体内容如下：\nfunc Routers(e *gin.Engine) &#123;\ne.GET(&quot;&#x2F;goods&quot;, goodsHandler)\ne.GET(&quot;&#x2F;checkout&quot;, checkoutHandler)\n&#125;\nrouters/routers.go中根据需要定义Include函数用来注册子app中定义的路由，Init函数用来进行路由的初始化操作：\ntype Option func(*gin.Engine)\n\nvar options &#x3D; []Option&#123;&#125;\n\n&#x2F;&#x2F; 注册app的路由配置\nfunc Include(opts ...Option) &#123;\noptions &#x3D; append(options, opts...)\n&#125;\n\n&#x2F;&#x2F; 初始化\nfunc Init() *gin.Engine &#123;\nr :&#x3D; gin.New()\nfor _, opt :&#x3D; range options &#123;\nopt(r)\n&#125;\nreturn r\n&#125;\nmain.go中按如下方式先注册子app中的路由，然后再进行路由的初始化：\nfunc main() &#123;\n&#x2F;&#x2F; 加载多个APP的路由配置\nrouters.Include(shop.Routers, blog.Routers)\n&#x2F;&#x2F; 初始化路由\nr :&#x3D; routers.Init()\nif err :&#x3D; r.Run(); err !&#x3D; nil &#123;\nfmt.Println(&quot;startup service failed, err:%v\\n&quot;, err)\n&#125;\n&#125;\ngin数据解析与绑定Json 数据解析和绑定客户端传参，后端接收并解析到结构体：\n package main\n\n import (\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n &quot;net&#x2F;http&quot;\n )\n\n&#x2F;&#x2F; 定义接收数据的结构体\n type Login struct &#123;\n &#x2F;&#x2F; binding:&quot;required&quot;修饰的字段，若接收为空值，则报错，是必须字段\n\nUser string &#96;form:&quot;username&quot; json:&quot;user&quot; uri:&quot;user&quot; xml:&quot;user&quot;\nbinding:&quot;required&quot;&#96;\n\nPssword string &#96;form:&quot;password&quot; json:&quot;password&quot; uri:&quot;password&quot;\nxml:&quot;password&quot; binding:&quot;required&quot;&#96;\n &#125;\n\n func main() &#123;\n &#x2F;&#x2F; 1.创建路由\n &#x2F;&#x2F; 默认使用了2个中间件Logger(), Recovery()\n r :&#x3D; gin.Default()\n &#x2F;&#x2F; JSON绑定\n r.POST(&quot;loginJSON&quot;, func(c *gin.Context) &#123;\n &#x2F;&#x2F; 声明接收的变量\n var json Login\n &#x2F;&#x2F; 将request的body中的数据，自动按照json格式解析到结构体\n if err :&#x3D; c.ShouldBindJSON(&amp;json); err !&#x3D; nil &#123;\n &#x2F;&#x2F; 返回错误信息\n &#x2F;&#x2F; gin.H封装了生成json数据的工具\n c.JSON(http.StatusBadRequest, gin.H&#123;&quot;error&quot;: err.Error()&#125;)\n return\n &#125;\n &#x2F;&#x2F; 判断用户名密码是否正确\n if json.User !&#x3D; &quot;root&quot; || json.Pssword !&#x3D; &quot;admin&quot; &#123;\n c.JSON(http.StatusBadRequest, gin.H&#123;&quot;status&quot;: &quot;304&quot;&#125;)\n return\n &#125;\n c.JSON(http.StatusOK, gin.H&#123;&quot;status&quot;: &quot;200&quot;&#125;)\n &#125;)\n r.Run(&quot;:8000&quot;)\n &#125;\n\n表单数据解析和绑定 &lt;!DOCTYPE html&gt;\n &lt;html lang&#x3D;&quot;en&quot;&gt;\n &lt;head&gt;\n &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;\n &lt;title&gt;Document&lt;&#x2F;title&gt;\n &lt;&#x2F;head&gt;\n &lt;body&gt;\n\n&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;localhost:8000&#x2F;loginForm&quot; method&#x3D;&quot;post&quot;\nenctype&#x3D;&quot;application&#x2F;x-www-form-urlencoded&quot;&gt;\n 用户名&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&gt;&lt;br&gt;\n 密码&lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot;&gt;\n &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;\n &lt;&#x2F;form&gt;\n &lt;&#x2F;body&gt;\n &lt;&#x2F;html&gt;\n package main\n\n import (\n &quot;net&#x2F;http&quot;\n\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n )\n\n &#x2F;&#x2F; 定义接收数据的结构体\n type Login struct &#123;\n &#x2F;&#x2F; binding:&quot;required&quot;修饰的字段，若接收为空值，则报错，是必须字段\n\nUser string &#96;form:&quot;username&quot; json:&quot;user&quot; uri:&quot;user&quot; xml:&quot;user&quot;\nbinding:&quot;required&quot;&#96;\n\nPssword string &#96;form:&quot;password&quot; json:&quot;password&quot; uri:&quot;password&quot;\nxml:&quot;password&quot; binding:&quot;required&quot;&#96;\n &#125;\n\n func main() &#123;\n &#x2F;&#x2F; 1.创建路由\n &#x2F;&#x2F; 默认使用了2个中间件Logger(), Recovery()\n r :&#x3D; gin.Default()\n &#x2F;&#x2F; JSON绑定\n r.POST(&quot;&#x2F;loginForm&quot;, func(c *gin.Context) &#123;\n &#x2F;&#x2F; 声明接收的变量\n var form Login\n &#x2F;&#x2F; Bind()默认解析并绑定form格式\n &#x2F;&#x2F; 根据请求头中content-type自动推断\n if err :&#x3D; c.Bind(&amp;form); err !&#x3D; nil &#123;\n c.JSON(http.StatusBadRequest, gin.H&#123;&quot;error&quot;: err.Error()&#125;)\n return\n &#125;\n &#x2F;&#x2F; 判断用户名密码是否正确\n if form.User !&#x3D; &quot;root&quot; || form.Pssword !&#x3D; &quot;admin&quot; &#123;\n c.JSON(http.StatusBadRequest, gin.H&#123;&quot;status&quot;: &quot;304&quot;&#125;)\n return\n &#125;\n c.JSON(http.StatusOK, gin.H&#123;&quot;status&quot;: &quot;200&quot;&#125;)\n &#125;)\n r.Run(&quot;:8000&quot;)\n &#125;\n\nURI数据解析和绑定 package main\n\n import (\n &quot;net&#x2F;http&quot;\n\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n )\n\n &#x2F;&#x2F; 定义接收数据的结构体\n type Login struct &#123;\n &#x2F;&#x2F; binding:&quot;required&quot;修饰的字段，若接收为空值，则报错，是必须字段\n\nUser string &#96;form:&quot;username&quot; json:&quot;user&quot; uri:&quot;user&quot; xml:&quot;user&quot;\nbinding:&quot;required&quot;&#96;\n\nPssword string &#96;form:&quot;password&quot; json:&quot;password&quot; uri:&quot;password&quot;\nxml:&quot;password&quot; binding:&quot;required&quot;&#96;\n &#125;\n\n func main() &#123;\n &#x2F;&#x2F; 1.创建路由\n &#x2F;&#x2F; 默认使用了2个中间件Logger(), Recovery()\n r :&#x3D; gin.Default()\n &#x2F;&#x2F; JSON绑定\n r.GET(&quot;&#x2F;:user&#x2F;:password&quot;, func(c *gin.Context) &#123;\n &#x2F;&#x2F; 声明接收的变量\n var login Login\n &#x2F;&#x2F; Bind()默认解析并绑定form格式\n &#x2F;&#x2F; 根据请求头中content-type自动推断\n if err :&#x3D; c.ShouldBindUri(&amp;login); err !&#x3D; nil &#123;\n c.JSON(http.StatusBadRequest, gin.H&#123;&quot;error&quot;: err.Error()&#125;)\n return\n  &#125;\n &#x2F;&#x2F; 判断用户名密码是否正确\n if login.User !&#x3D; &quot;root&quot; || login.Pssword !&#x3D; &quot;admin&quot; &#123;\n c.JSON(http.StatusBadRequest, gin.H&#123;&quot;status&quot;: &quot;304&quot;&#125;)\n return\n &#125;\n c.JSON(http.StatusOK, gin.H&#123;&quot;status&quot;: &quot;200&quot;&#125;)\n &#125;)\n r.Run(&quot;:8000&quot;)\n &#125;\n\ngin渲染各种数据格式的响应package main\n\nimport (\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&#x2F;testdata&#x2F;protoexample&quot;\n)\n\n&#x2F;&#x2F; 多种响应方式\nfunc main() &#123;\n&#x2F;&#x2F; 1.创建路由\n&#x2F;&#x2F; 默认使用了2个中间件Logger(), Recovery()\nr :&#x3D; gin.Default()\n&#x2F;&#x2F; 1.json\nr.GET(&quot;&#x2F;someJSON&quot;, func(c *gin.Context) &#123;\nc.JSON(200, gin.H&#123;&quot;message&quot;: &quot;someJSON&quot;, &quot;status&quot;: 200&#125;)\n&#125;)\n&#x2F;&#x2F; 2. 结构体响应\nr.GET(&quot;&#x2F;someStruct&quot;, func(c *gin.Context) &#123;\nvar msg struct &#123;\nName string\nMessage string\nNumber int\n&#125;\nmsg.Name &#x3D; &quot;root&quot;\nmsg.Message &#x3D; &quot;message&quot;\nmsg.Number &#x3D; 123\nc.JSON(200, msg)\n&#125;)\n&#x2F;&#x2F; 3.XML\nr.GET(&quot;&#x2F;someXML&quot;, func(c *gin.Context) &#123;\nc.XML(200, gin.H&#123;&quot;message&quot;: &quot;abc&quot;&#125;)\n&#125;)\n&#x2F;&#x2F; 4.YAML响应\nr.GET(&quot;&#x2F;someYAML&quot;, func(c *gin.Context) &#123;\nc.YAML(200, gin.H&#123;&quot;name&quot;: &quot;zhangsan&quot;&#125;)\n&#125;)\n&#x2F;&#x2F; 5.protobuf格式,谷歌开发的高效存储读取的工具\n&#x2F;&#x2F; 数组？切片？如果自己构建一个传输格式，应该是什么格式？\nr.GET(&quot;&#x2F;someProtoBuf&quot;, func(c *gin.Context) &#123;\nreps :&#x3D; []int64&#123;int64(1), int64(2)&#125;\n&#x2F;&#x2F; 定义数据\nlabel :&#x3D; &quot;label&quot;\n&#x2F;&#x2F; 传protobuf格式数据\ndata :&#x3D; &amp;protoexample.Test&#123;\nLabel: &amp;label,\nReps: reps,\n&#125;\nc.ProtoBuf(200, data)\n&#125;)\n\nr.Run(&quot;:8000&quot;)\n&#125;\nHTML模板渲染 package main\n\n import (\n &quot;net&#x2F;http&quot;\n\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n )\n\n func main() &#123;\n r :&#x3D; gin.Default()\n r.LoadHTMLGlob(&quot;tem&#x2F;*&quot;)\n r.GET(&quot;&#x2F;index&quot;, func(c *gin.Context) &#123;\n\nc.HTML(http.StatusOK, &quot;index.html&quot;, gin.H&#123;&quot;title&quot;: &quot;我是测试&quot;, &quot;ce&quot;:\n&quot;123456&quot;&#125;)\n &#125;)\n r.Run()\n &#125;\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n&lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;\n&lt;title&gt;&#123;&#123;.title&#125;&#125;&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\nfgkjdskjdsh&#123;&#123;.ce&#125;&#125;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n代码如下：\n package main\n\n import (\n &quot;net&#x2F;http&quot;\n\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n )\n\n func main() &#123;\n r :&#x3D; gin.Default()\n r.LoadHTMLGlob(&quot;tem&#x2F;**&#x2F;*&quot;)\n r.GET(&quot;&#x2F;index&quot;, func(c *gin.Context) &#123;\n\nc.HTML(http.StatusOK, &quot;user&#x2F;index.html&quot;, gin.H&#123;&quot;title&quot;: &quot;我是测试&quot;,\n&quot;address&quot;: &quot;www.5lmh.com&quot;&#125;)\n &#125;)\n r.Run()\n &#125;\n&#123;&#123; define &quot;user&#x2F;index.html&quot; &#125;&#125;\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n&lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;\n&lt;title&gt;&#123;&#123;.title&#125;&#125;&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\nfgkjdskjdsh&#123;&#123;.address&#125;&#125;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n&#123;&#123; end &#125;&#125;\n\n package main\n\n import (\n &quot;net&#x2F;http&quot;\n\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n )\n\n func main() &#123;\n r :&#x3D; gin.Default()\n r.LoadHTMLGlob(&quot;tem&#x2F;**&#x2F;*&quot;)\n r.GET(&quot;&#x2F;index&quot;, func(c *gin.Context) &#123;\n\nc.HTML(http.StatusOK, &quot;user&#x2F;index.html&quot;, gin.H&#123;&quot;title&quot;: &quot;我是测试&quot;,\n&quot;address&quot;: &quot;www.5lmh.com&quot;&#125;)\n &#125;)\n r.Run()\n &#125;\nuser/index.html 文件代码：\n&#123;&#123; define &quot;user&#x2F;index.html&quot; &#125;&#125;\n&#123;&#123;template &quot;public&#x2F;header&quot; .&#125;&#125;\nfgkjdskjdsh&#123;&#123;.address&#125;&#125;\n&#123;&#123;template &quot;public&#x2F;footer&quot; .&#125;&#125;\n&#123;&#123; end &#125;&#125;\npublic/header.html 文件代码：\n&#123;&#123;define &quot;public&#x2F;header&quot;&#125;&#125;\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n&lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;\n&lt;title&gt;&#123;&#123;.title&#125;&#125;&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n\n&#123;&#123;end&#125;&#125;\npublic/footer.html 文件代码：\n&#123;&#123;define &quot;public&#x2F;footer&quot;&#125;&#125;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n&#123;&#123; end &#125;&#125;\n\n如果你需要引入静态文件需要定义一个静态文件目录\n\nr.Static(&quot;&#x2F;assets&quot;, &quot;.&#x2F;assets&quot;)\n重定向package main\n\nimport (\n&quot;net&#x2F;http&quot;\n\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc main() &#123;\nr :&#x3D; gin.Default()\nr.GET(&quot;&#x2F;index&quot;, func(c *gin.Context) &#123;\nc.Redirect(http.StatusMovedPermanently, &quot;http:&#x2F;&#x2F;www.5lmh.com&quot;)\n&#125;)\nr.Run()\n&#125;\n同步异步package main\n\nimport (\n&quot;log&quot;\n&quot;time&quot;\n\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc main() &#123;\n&#x2F;&#x2F; 1.创建路由\n&#x2F;&#x2F; 默认使用了2个中间件Logger(), Recovery()\nr :&#x3D; gin.Default()\n&#x2F;&#x2F; 1.异步\nr.GET(&quot;&#x2F;long_async&quot;, func(c *gin.Context) &#123;\n&#x2F;&#x2F; 需要搞一个副本\ncopyContext :&#x3D; c.Copy()\n&#x2F;&#x2F; 异步处理\ngo func() &#123;\ntime.Sleep(3 * time.Second)\nlog.Println(&quot;异步执行：&quot; + copyContext.Request.URL.Path)\n&#125;()\n&#125;)\n&#x2F;&#x2F; 2.同步\nr.GET(&quot;&#x2F;long_sync&quot;, func(c *gin.Context) &#123;\ntime.Sleep(3 * time.Second)\nlog.Println(&quot;同步执行：&quot; + c.Request.URL.Path)\n&#125;)\n\nr.Run(&quot;:8000&quot;)\n&#125;\ngin中间件全局中间件\n所有请求都经过此中间件\n\n package main\n\n import (\n &quot;fmt&quot;\n &quot;time&quot;\n\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n )\n\n &#x2F;&#x2F; 定义中间\n func MiddleWare() gin.HandlerFunc &#123;\n return func(c *gin.Context) &#123;\n t :&#x3D; time.Now()\n fmt.Println(&quot;中间件开始执行了&quot;)\n &#x2F;&#x2F; 设置变量到Context的key中，可以通过Get()取\nc.Set(&quot;request&quot;, &quot;中间件&quot;)\n status :&#x3D; c.Writer.Status()\n fmt.Println(&quot;中间件执行完毕&quot;, status)\n t2 :&#x3D; time.Since(t)\n fmt.Println(&quot;time:&quot;, t2)\n &#125;\n &#125;\n\n func main() &#123;\n &#x2F;&#x2F; 1.创建路由\n &#x2F;&#x2F; 默认使用了2个中间件Logger(), Recovery()\n r :&#x3D; gin.Default()\n &#x2F;&#x2F; 注册中间件\n r.Use(MiddleWare())\n &#x2F;&#x2F; &#123;&#125;为了代码规范\n &#123;\n r.GET(&quot;&#x2F;ce&quot;, func(c *gin.Context) &#123;\n &#x2F;&#x2F; 取值\n req, _ :&#x3D; c.Get(&quot;request&quot;)\n fmt.Println(&quot;request:&quot;, req)\n &#x2F;&#x2F; 页面接收\n c.JSON(200, gin.H&#123;&quot;request&quot;: req&#125;)\n &#125;)\n\n &#125;\n r.Run()\n &#125;\n\nnext()方法package main\n\nimport (\n&quot;fmt&quot;\n&quot;time&quot;\n\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\n&#x2F;&#x2F; 定义中间\nfunc MiddleWare() gin.HandlerFunc &#123;\nreturn func(c *gin.Context) &#123;\nt :&#x3D; time.Now()\nfmt.Println(&quot;中间件开始执行了&quot;)\n&#x2F;&#x2F; 设置变量到Context的key中，可以通过Get()取\nc.Set(&quot;request&quot;, &quot;中间件&quot;)\n&#x2F;&#x2F; 执行函数\nc.Next()\n&#x2F;&#x2F; 中间件执行完后续的一些事情\nstatus :&#x3D; c.Writer.Status()\nfmt.Println(&quot;中间件执行完毕&quot;, status)\nt2 :&#x3D; time.Since(t)\nfmt.Println(&quot;time:&quot;, t2)\n&#125;\n&#125;\n\nfunc main() &#123;\n&#x2F;&#x2F; 1.创建路由\n&#x2F;&#x2F; 默认使用了2个中间件Logger(), Recovery()\nr :&#x3D; gin.Default()\n&#x2F;&#x2F; 注册中间件\nr.Use(MiddleWare())\n&#x2F;&#x2F; &#123;&#125;为了代码规范\n&#123;\nr.GET(&quot;&#x2F;ce&quot;, func(c *gin.Context) &#123;\n&#x2F;&#x2F; 取值\nreq, _ :&#x3D; c.Get(&quot;request&quot;)\nfmt.Println(&quot;request:&quot;, req)\n&#x2F;&#x2F; 页面接收\nc.JSON(200, gin.H&#123;&quot;request&quot;: req&#125;)\n&#125;)\n&#125;\nr.Run()\n&#125;\n\n局部中间件package main\n\nimport (\n&quot;fmt&quot;\n&quot;time&quot;\n\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\n&#x2F;&#x2F; 定义中间\nfunc MiddleWare() gin.HandlerFunc &#123;\nreturn func(c *gin.Context) &#123;\nt :&#x3D; time.Now()\nfmt.Println(&quot;中间件开始执行了&quot;)\n&#x2F;&#x2F; 设置变量到Context的key中，可以通过Get()取\nc.Set(&quot;request&quot;, &quot;中间件&quot;)\n&#x2F;&#x2F; 执行函数\nc.Next()\n&#x2F;&#x2F; 中间件执行完后续的一些事情\nstatus :&#x3D; c.Writer.Status()\nfmt.Println(&quot;中间件执行完毕&quot;, status)\nt2 :&#x3D; time.Since(t)\nfmt.Println(&quot;time:&quot;, t2)\n&#125;\n&#125;\n\nfunc main() &#123;\n&#x2F;&#x2F; 1.创建路由\n&#x2F;&#x2F; 默认使用了2个中间件Logger(), Recovery()\nr :&#x3D; gin.Default()\n&#x2F;&#x2F;局部中间键使用\nr.GET(&quot;&#x2F;ce&quot;, MiddleWare(), func(c *gin.Context) &#123;\n&#x2F;&#x2F; 取值\nreq, _ :&#x3D; c.Get(&quot;request&quot;)\nfmt.Println(&quot;request:&quot;, req)\n&#x2F;&#x2F; 页面接收\nc.JSON(200, gin.H&#123;&quot;request&quot;: req&#125;)\n&#125;)\nr.Run()\n&#125;\n\n中间件练习\n定义程序计时中间件，然后定义2个路由，执行函数后应该打印统计的执行时间，如下：\n\npackage main\n\nimport (\n&quot;fmt&quot;\n&quot;time&quot;\n\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\n&#x2F;&#x2F; 定义中间\nfunc myTime(c *gin.Context) &#123;\nstart :&#x3D; time.Now()\nc.Next()\n&#x2F;&#x2F; 统计时间\nsince :&#x3D; time.Since(start)\nfmt.Println(&quot;程序用时：&quot;, since)\n&#125;\n\nfunc main() &#123;\n&#x2F;&#x2F; 1.创建路由\n&#x2F;&#x2F; 默认使用了2个中间件Logger(), Recovery()\nr :&#x3D; gin.Default()\n&#x2F;&#x2F; 注册中间件\nr.Use(myTime)\n&#x2F;&#x2F; &#123;&#125;为了代码规范\nshoppingGroup :&#x3D; r.Group(&quot;&#x2F;shopping&quot;)\n&#123;\nshoppingGroup.GET(&quot;&#x2F;index&quot;, shopIndexHandler)\nshoppingGroup.GET(&quot;&#x2F;home&quot;, shopHomeHandler)\n&#125;\nr.Run(&quot;:8000&quot;)\n&#125;\n\nfunc shopIndexHandler(c *gin.Context) &#123;\ntime.Sleep(5 * time.Second)\n&#125;\nfunc shopHomeHandler(c *gin.Context) &#123;\ntime.Sleep(3 * time.Second)\n&#125;\n\n会话控制Cookie介绍\nHTTP是无状态协议，服务器不能记录浏览器的访问状态，也就是说服务器不能区分两次请求是否 由同一个客户端发出\nCookie就是解决HTTP协议无状态的方案之一，中文是小甜饼的意思\nCookie实际上就是服务器保存在浏览器上的一段信息。浏览器有了Cookie之后，每次向服务器\n\n\n发送请求时都会同时将该信息发送给服务器，服务器收到请求后，就可以根据该信息处理请求\nCookie由服务器创建，并发送给浏览器，最终由浏览器保存cookie的用途测试服务端发送cookie给客户端，客户端请求时携带cookie\n\nCookie的使用测试服务端发送cookie给客户端，客户端请求时携带cookie\npackage main\n\nimport (\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n&quot;fmt&quot;\n)\n\nfunc main() &#123;\n&#x2F;&#x2F; 1.创建路由\n&#x2F;&#x2F; 默认使用了2个中间件Logger(), Recovery()\nr :&#x3D; gin.Default()\n&#x2F;&#x2F; 服务端要给客户端cookie\nr.GET(&quot;cookie&quot;, func(c *gin.Context) &#123;\n&#x2F;&#x2F; 获取客户端是否携带cookie\ncookie, err :&#x3D; c.Cookie(&quot;key_cookie&quot;)\nif err !&#x3D; nil &#123;\ncookie &#x3D; &quot;NotSet&quot;\n&#x2F;&#x2F; 给客户端设置cookie\n&#x2F;&#x2F; maxAge int, 单位为秒\n&#x2F;&#x2F; path,cookie所在目录\n&#x2F;&#x2F; domain string,域名\n&#x2F;&#x2F; secure 是否智能通过https访问\n&#x2F;&#x2F; httpOnly bool 是否允许别人通过js获取自己的cookie\nc.SetCookie(&quot;key_cookie&quot;, &quot;value_cookie&quot;, 60, &quot;&#x2F;&quot;,\n&quot;localhost&quot;, false, true)\n&#125;\nfmt.Printf(&quot;cookie的值是： %s\\n&quot;, cookie)\n&#125;)\nr.Run(&quot;:8000&quot;)\n&#125;\ncookie练习package main\n\nimport (\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n&quot;net&#x2F;http&quot;\n)\nfunc AuthMiddleWare() gin.HandlerFunc &#123;\nreturn func(c *gin.Context) &#123;\n&#x2F;&#x2F; 获取客户端cookie并校验\nif cookie, err :&#x3D; c.Cookie(&quot;abc&quot;); err &#x3D;&#x3D; nil &#123;\nif cookie &#x3D;&#x3D; &quot;123&quot; &#123;\nc.Next()\nreturn\n&#125;\n&#125;\n &#x2F;&#x2F; 返回错误\nc.JSON(http.StatusUnauthorized, gin.H&#123;&quot;error&quot;: &quot;err&quot;&#125;)\n&#x2F;&#x2F; 若验证不通过，不再调用后续的函数处理\nc.Abort()\nreturn\n&#125;\n&#125;\n\nfunc main() &#123;\n&#x2F;&#x2F; 1.创建路由\nr :&#x3D; gin.Default()\nr.GET(&quot;&#x2F;login&quot;, func(c *gin.Context) &#123;\n&#x2F;&#x2F; 设置cookie\nc.SetCookie(&quot;abc&quot;, &quot;123&quot;, 60, &quot;&#x2F;&quot;,\n&quot;localhost&quot;, false, true)\n&#x2F;&#x2F; 返回信息\nc.String(200, &quot;Login success!&quot;)\n&#125;)\nr.GET(&quot;&#x2F;home&quot;, AuthMiddleWare(), func(c *gin.Context) &#123;\nc.JSON(200, gin.H&#123;&quot;data&quot;: &quot;home&quot;&#125;)\n&#125;)\nr.Run(&quot;:8000&quot;)\n&#125;\n\nSessions package main\n\n import (\n &quot;fmt&quot;\n &quot;net&#x2F;http&quot;\n\n &quot;github.com&#x2F;gorilla&#x2F;sessions&quot;\n )\n\n &#x2F;&#x2F; 初始化一个cookie存储对象\n  &#x2F;&#x2F; something-very-secret应该是一个你自己的密匙，只要不被别人知道就行\n var store &#x3D; sessions.NewCookieStore([]byte(&quot;something-very-secret&quot;))\n\n func main() &#123;\n http.HandleFunc(&quot;&#x2F;save&quot;, SaveSession)\n http.HandleFunc(&quot;&#x2F;get&quot;, GetSession)\n err :&#x3D; http.ListenAndServe(&quot;:8080&quot;, nil)\n if err !&#x3D; nil &#123;\n fmt.Println(&quot;HTTP server failed,err:&quot;, err)\n return\n &#125;\n &#125;\n\nfunc SaveSession(w http.ResponseWriter, r *http.Request) &#123;\n &#x2F;&#x2F; Get a session. We&#39;re ignoring the error resulted from decoding an\n &#x2F;&#x2F; existing session: Get() always returns a session, even if empty.\n\n &#x2F;&#x2F; 获取一个session对象，session-name是session的名字\n session, err :&#x3D; store.Get(r, &quot;session-name&quot;)\n if err !&#x3D; nil &#123;\n http.Error(w, err.Error(), http.StatusInternalServerError)\n return\n &#125;\n\n &#x2F;&#x2F; 在session中存储值\n session.Values[&quot;foo&quot;] &#x3D; &quot;bar&quot;\n session.Values[42] &#x3D; 43\n&#x2F;&#x2F; 保存更改\n session.Save(r, w)\n &#125;\n func GetSession(w http.ResponseWriter, r *http.Request) &#123;\n session, err :&#x3D; store.Get(r, &quot;session-name&quot;)\n  if err !&#x3D; nil &#123;\n http.Error(w, err.Error(), http.StatusInternalServerError)\n return\n &#125; \n foo :&#x3D; session.Values[&quot;foo&quot;]\n fmt.Println(foo)\n &#125;\n删除session的值：\n&#x2F;&#x2F; 删除\n&#x2F;&#x2F; 将session的最大存储时间设置为小于零的数即为删除\nsession.Options.MaxAge &#x3D; -1\nsession.Save(r, w)\n参数校正结构体验证用gin框架的数据验证，可以不用解析数据，减少if else，会简洁许多。\npackage main\n\nimport (\n&quot;fmt&quot;\n&quot;time&quot;\n\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\n&#x2F;&#x2F;Person ..\ntype Person struct &#123;\n&#x2F;&#x2F;不能为空并且大于10\nAge int &#96;form:&quot;age&quot; binding:&quot;required,gt&#x3D;10&quot;&#96;\nName string &#96;form:&quot;name&quot; binding:&quot;required&quot;&#96;\nBirthday time.Time &#96;form:&quot;birthday&quot; time_format:&quot;2006-01-02&quot; time_utc:&quot;1&quot;&#96;\n&#125;\n\nfunc main() &#123;\nr :&#x3D; gin.Default()\nr.GET(&quot;&#x2F;5lmh&quot;, func(c *gin.Context) &#123;\nvar person Person\nif err :&#x3D; c.ShouldBind(&amp;person); err !&#x3D; nil &#123;\nc.String(500, fmt.Sprint(err))\nreturn\n&#125;\nc.String(200, fmt.Sprintf(&quot;%#v&quot;, person))\n&#125;)\nr.Run()\n&#125;\n\n自定义验证 package main\n\n import (\n &quot;net&#x2F;http&quot;\n &quot;reflect&quot;\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&#x2F;binding&quot;\n &quot;gopkg.in&#x2F;go-playground&#x2F;validator.v8&quot;\n )\n\n &#x2F;*\n 对绑定解析到结构体上的参数，自定义验证功能\n\n比如我们要对 name 字段做校验，要不能为空，并且不等于 admin ，类似这种需求，就无法\nbinding 现成的方法\n\n需要我们自己验证方法才能实现 官网示例（https:&#x2F;&#x2F;godoc.org&#x2F;gopkg.in&#x2F;goplayground&#x2F;validator.v8#hdr-Custom_Functions）\n 这里需要下载引入下 gopkg.in&#x2F;go-playground&#x2F;validator.v8\n *&#x2F;\n type Person struct &#123;\n Age int &#96;form:&quot;age&quot; binding:&quot;required,gt&#x3D;10&quot;&#96;\n &#x2F;&#x2F; 2、在参数 binding 上使用自定义的校验方法函数注册时候的名称\n Name string &#96;form:&quot;name&quot; binding:&quot;NotNullAndAdmin&quot;&#96;\n Address string &#96;form:&quot;address&quot; binding:&quot;required&quot;&#96;\n &#125;\n &#x2F;&#x2F; 1、自定义的校验方法\n\nfunc nameNotNullAndAdmin(v *validator.Validate, topStruct reflect.Value,\ncurrentStructOrField reflect.Value, field reflect.Value, fieldType\nreflect.Type, fieldKind reflect.Kind, param string) bool &#123;\n\n if value, ok :&#x3D; field.Interface().(string); ok &#123;\n &#x2F;&#x2F; 字段不能为空，并且不等于 admin\n return value !&#x3D; &quot;&quot; &amp;&amp; !(&quot;5lmh&quot; &#x3D;&#x3D; value)\n &#125;\n\n return true\n &#125;\n\n func main() &#123;\n r :&#x3D; gin.Default()\n\n &#x2F;&#x2F; 3、将我们自定义的校验方法注册到 validator中\n if v, ok :&#x3D; binding.Validator.Engine().(*validator.Validate); ok &#123;\n &#x2F;&#x2F; 这里的 key 和 fn 可以不一样最终在 struct 使用的是 key\n v.RegisterValidation(&quot;NotNullAndAdmin&quot;, nameNotNullAndAdmin)\n &#125;\n\n &#x2F;*\n\ncurl -X GET &quot;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;testing?\nname&#x3D;&amp;age&#x3D;12&amp;address&#x3D;beijing&quot;\n\ncurl -X GET &quot;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;testing?\nname&#x3D;lmh&amp;age&#x3D;12&amp;address&#x3D;beijing&quot;\n\ncurl -X GET &quot;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;testing?\nname&#x3D;adz&amp;age&#x3D;12&amp;address&#x3D;beijing&quot;\n *&#x2F;\n r.GET(&quot;&#x2F;5lmh&quot;, func(c *gin.Context) &#123;\n var person Person\n if e :&#x3D; c.ShouldBind(&amp;person); e &#x3D;&#x3D; nil &#123;\n c.String(http.StatusOK, &quot;%v&quot;, person)\n &#125; else &#123;\n c.String(http.StatusOK, &quot;person bind err:%v&quot;, e.Error())\n &#125;\n &#125;)\n r.Run()\n &#125;\n多语言翻译验证 package main\n\n import (\n &quot;fmt&quot;\n\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n &quot;github.com&#x2F;go-playground&#x2F;locales&#x2F;en&quot;\n &quot;github.com&#x2F;go-playground&#x2F;locales&#x2F;zh&quot;\n &quot;github.com&#x2F;go-playground&#x2F;locales&#x2F;zh_Hant_TW&quot;\n ut &quot;github.com&#x2F;go-playground&#x2F;universal-translator&quot;\n &quot;gopkg.in&#x2F;go-playground&#x2F;validator.v9&quot;\n en_translations &quot;gopkg.in&#x2F;go-playground&#x2F;validator.v9&#x2F;translations&#x2F;en&quot;\n zh_translations &quot;gopkg.in&#x2F;go-playground&#x2F;validator.v9&#x2F;translations&#x2F;zh&quot;\n zh_tw_translations &quot;gopkg.in&#x2F;go-playground&#x2F;validator.v9&#x2F;translations&#x2F;zh_tw&quot;\n )\n\n var (\n Uni *ut.UniversalTranslator\n Validate *validator.Validate\n )\n\n type User struct &#123;\n Username string &#96;form:&quot;user_name&quot; validate:&quot;required&quot;&#96;\n Tagline string &#96;form:&quot;tag_line&quot; validate:&quot;required,lt&#x3D;10&quot;&#96;\n Tagline2 string &#96;form:&quot;tag_line2&quot; validate:&quot;required,gt&#x3D;1&quot;&#96;\n &#125;\n\n func main() &#123;\n en :&#x3D; en.New()\n zh :&#x3D; zh.New()\n zh_tw :&#x3D; zh_Hant_TW.New()\n Uni &#x3D; ut.New(en, zh, zh_tw)\n Validate &#x3D; validator.New()\n\n route :&#x3D; gin.Default()\n route.GET(&quot;&#x2F;5lmh&quot;, startPage)\n route.POST(&quot;&#x2F;5lmh&quot;, startPage)\n route.Run(&quot;:8080&quot;)\n &#125;\n\n func startPage(c *gin.Context) &#123;\n &#x2F;&#x2F;这部分应放到中间件中\n locale :&#x3D; c.DefaultQuery(&quot;locale&quot;, &quot;zh&quot;)\n trans, _ :&#x3D; Uni.GetTranslator(locale)\n switch locale &#123;\n case &quot;zh&quot;:\n zh_translations.RegisterDefaultTranslations(Validate, trans)\n break\n case &quot;en&quot;:\n en_translations.RegisterDefaultTranslations(Validate, trans)\n break\n case &quot;zh_tw&quot;:\n zh_tw_translations.RegisterDefaultTranslations(Validate, trans)\n break\n default:\n zh_translations.RegisterDefaultTranslations(Validate, trans)\n break\n &#125;\n\n &#x2F;&#x2F;自定义错误内容\n\nValidate.RegisterTranslation(&quot;required&quot;, trans, func(ut ut.Translator)\nerror &#123;\n\nreturn ut.Add(&quot;required&quot;, &quot;&#123;0&#125; must have a value!&quot;, true) &#x2F;&#x2F; see\nuniversal-translator for details\n &#125;, func(ut ut.Translator, fe validator.FieldError) string &#123;\n t, _ :&#x3D; ut.T(&quot;required&quot;, fe.Field())\n return t\n &#125;)\n\n &#x2F;&#x2F;这块应该放到公共验证方法中\n user :&#x3D; User&#123;&#125;\n c.ShouldBind(&amp;user)\n fmt.Println(user)\n err :&#x3D; Validate.Struct(user)\n if err !&#x3D; nil &#123;\n errs :&#x3D; err.(validator.ValidationErrors)\n sliceErrs :&#x3D; []string&#123;&#125;\n for _, e :&#x3D; range errs &#123;\n sliceErrs &#x3D; append(sliceErrs, e.Translate(trans))\n &#125;\n c.String(200, fmt.Sprintf(&quot;%#v&quot;, sliceErrs))\n &#125;\n c.String(200, fmt.Sprintf(&quot;%#v&quot;, &quot;user&quot;))\n &#125;\n\n其他日志文件package main\n\nimport (\n&quot;io&quot;\n&quot;os&quot;\n\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc main() &#123;\ngin.DisableConsoleColor()\n\n&#x2F;&#x2F; Logging to a file.\nf, _ :&#x3D; os.Create(&quot;gin.log&quot;)\ngin.DefaultWriter &#x3D; io.MultiWriter(f)\n\n&#x2F;&#x2F; 如果需要同时将日志写入文件和控制台，请使用以下代码。\n&#x2F;&#x2F; gin.DefaultWriter &#x3D; io.MultiWriter(f, os.Stdout)\nr :&#x3D; gin.Default()\nr.GET(&quot;&#x2F;ping&quot;, func(c *gin.Context) &#123;\nc.String(200, &quot;pong&quot;)\n&#125;)\nr.Run()\n&#125;\n\ngin验证码后端代码 package main\n\n import (\n &quot;bytes&quot;\n &quot;github.com&#x2F;dchest&#x2F;captcha&quot;\n &quot;github.com&#x2F;gin-contrib&#x2F;sessions&quot;\n &quot;github.com&#x2F;gin-contrib&#x2F;sessions&#x2F;cookie&quot;\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n &quot;net&#x2F;http&quot;\n &quot;time&quot;\n )\n\n &#x2F;&#x2F; 中间件，处理session\n func Session(keyPairs string) gin.HandlerFunc &#123;\n store :&#x3D; SessionConfig()\n return sessions.Sessions(keyPairs, store)\n &#125;\n func SessionConfig() sessions.Store &#123;\n sessionMaxAge :&#x3D; 3600\n sessionSecret :&#x3D; &quot;topgoer&quot;\n var store sessions.Store\n store &#x3D; cookie.NewStore([]byte(sessionSecret))\n  store.Options(sessions.Options&#123;\n MaxAge: sessionMaxAge, &#x2F;&#x2F;seconds\n Path: &quot;&#x2F;&quot;,\n &#125;)\n return store\n &#125;\n\n func Captcha(c *gin.Context, length ...int) &#123;\n l :&#x3D; captcha.DefaultLen\n w, h :&#x3D; 107, 36\n if len(length) &#x3D;&#x3D; 1 &#123;\n l &#x3D; length[0]\n &#125;\n if len(length) &#x3D;&#x3D; 2 &#123;\n w &#x3D; length[1]\n &#125;\n if len(length) &#x3D;&#x3D; 3 &#123;\n h &#x3D; length[2]\n &#125;\n captchaId :&#x3D; captcha.NewLen(l)\n session :&#x3D; sessions.Default(c)\n session.Set(&quot;captcha&quot;, captchaId)\n _ &#x3D; session.Save()\n _ &#x3D; Serve(c.Writer, c.Request, captchaId, &quot;.png&quot;, &quot;zh&quot;, false, w, h)\n &#125;\n func CaptchaVerify(c *gin.Context, code string) bool &#123;\n session :&#x3D; sessions.Default(c)\n if captchaId :&#x3D; session.Get(&quot;captcha&quot;); captchaId !&#x3D; nil &#123;\n session.Delete(&quot;captcha&quot;)\n _ &#x3D; session.Save()\n if captcha.VerifyString(captchaId.(string), code) &#123;\n return true\n &#125; else &#123;\n return false\n &#125;\n &#125; else &#123;\n return false\n &#125;\n &#125;\n\nfunc Serve(w http.ResponseWriter, r *http.Request, id, ext, lang string,\ndownload bool, width, height int) error &#123;\n w.Header().Set(&quot;Cache-Control&quot;, &quot;no-cache, no-store, must-revalidate&quot;)\n w.Header().Set(&quot;Pragma&quot;, &quot;no-cache&quot;)\n w.Header().Set(&quot;Expires&quot;, &quot;0&quot;)\n\n var content bytes.Buffer\n switch ext &#123;\n case &quot;.png&quot;:\n w.Header().Set(&quot;Content-Type&quot;, &quot;image&#x2F;png&quot;)\n _ &#x3D; captcha.WriteImage(&amp;content, id, width, height)\n case &quot;.wav&quot;:\n w.Header().Set(&quot;Content-Type&quot;, &quot;audio&#x2F;x-wav&quot;)\n _ &#x3D; captcha.WriteAudio(&amp;content, id, lang)\n default:\n return captcha.ErrNotFound\n &#125;\n\n if download &#123;\n w.Header().Set(&quot;Content-Type&quot;, &quot;application&#x2F;octet-stream&quot;)\n &#125;\n\nhttp.ServeContent(w, r, id+ext, time.Time&#123;&#125;,\nbytes.NewReader(content.Bytes()))\n return nil\n &#125;\n\n func main() &#123;\n router :&#x3D; gin.Default()\n router.LoadHTMLGlob(&quot;.&#x2F;*.html&quot;)\n router.Use(Session(&quot;topgoer&quot;))\n router.GET(&quot;&#x2F;captcha&quot;, func(c *gin.Context) &#123;\n Captcha(c, 4)\n &#125;)\n router.GET(&quot;&#x2F;&quot;, func(c *gin.Context) &#123;\n c.HTML(http.StatusOK, &quot;index.html&quot;, nil)\n &#125;)\n router.GET(&quot;&#x2F;captcha&#x2F;verify&#x2F;:value&quot;, func(c *gin.Context) &#123;\n value :&#x3D; c.Param(&quot;value&quot;)\n if CaptchaVerify(c, value) &#123;\n c.JSON(http.StatusOK, gin.H&#123;&quot;status&quot;: 0, &quot;msg&quot;: &quot;success&quot;&#125;)\n &#125; else &#123;\n c.JSON(http.StatusOK, gin.H&#123;&quot;status&quot;: 1, &quot;msg&quot;: &quot;failed&quot;&#125;)\n &#125;\n &#125;)\n router.Run(&quot;:8080&quot;)\n &#125;前端代码：\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n&lt;title&gt;www.topgoer.com验证码&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;img src&#x3D;&quot;&#x2F;captcha&quot; onclick&#x3D;&quot;this.src&#x3D;&#39;&#x2F;captcha?v&#x3D;&#39;+Math.random()&quot;&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n\n浏览器访问http://127.0.0.1:8080访问http://127.0.0.1:8080/captcha/verify/5721 进行验证\n&#123;\n &quot;msg&quot;: &quot;failed&quot;,\n &quot;status&quot;: 1 &#125;\n \n生成解析token下面的代码是gin框架对jwt的封装\n package main\n\n import (\n &quot;fmt&quot;\n &quot;net&#x2F;http&quot;\n &quot;time&quot;\n\n &quot;github.com&#x2F;dgrijalva&#x2F;jwt-go&quot;\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n )\n\n &#x2F;&#x2F;自定义一个字符串\n var jwtkey &#x3D; []byte(&quot;www.topgoer.com&quot;)\n var str string\n\n type Claims struct &#123;\n UserId uint\n jwt.StandardClaims\n &#125;\n\n func main() &#123;\n r :&#x3D; gin.Default()\n r.GET(&quot;&#x2F;set&quot;, setting)\n r.GET(&quot;&#x2F;get&quot;, getting)\n &#x2F;&#x2F;监听端口默认为8080\n r.Run(&quot;:8080&quot;)\n &#125;\n\n &#x2F;&#x2F;颁发token\n func setting(ctx *gin.Context) &#123;\n expireTime :&#x3D; time.Now().Add(7 * 24 * time.Hour)\n claims :&#x3D; &amp;Claims&#123;\n UserId: 2,\n StandardClaims: jwt.StandardClaims&#123;\n ExpiresAt: expireTime.Unix(), &#x2F;&#x2F;过期时间\n IssuedAt: time.Now().Unix(),\n Issuer: &quot;127.0.0.1&quot;, &#x2F;&#x2F; 签名颁发者\n Subject: &quot;user token&quot;, &#x2F;&#x2F;签名主题\n &#125;,\n &#125;\n token :&#x3D; jwt.NewWithClaims(jwt.SigningMethodHS256, claims)\n &#x2F;&#x2F; fmt.Println(token)\n tokenString, err :&#x3D; token.SignedString(jwtkey)\n if err !&#x3D; nil &#123;\n fmt.Println(err)\n &#125;\n str &#x3D; tokenString\n ctx.JSON(200, gin.H&#123;&quot;token&quot;: tokenString&#125;)\n &#125;\n\n &#x2F;&#x2F;解析token\n func getting(ctx *gin.Context) &#123;\n tokenString :&#x3D; ctx.GetHeader(&quot;Authorization&quot;)\n &#x2F;&#x2F;vcalidate token formate\n if tokenString &#x3D;&#x3D; &quot;&quot; &#123;\n ctx.JSON(http.StatusUnauthorized, gin.H&#123;&quot;code&quot;: 401, &quot;msg&quot;: &quot;权限不足&quot;&#125;)\n ctx.Abort()\n return\n &#125;\n\n token, claims, err :&#x3D; ParseToken(tokenString)\n if err !&#x3D; nil || !token.Valid &#123;\n ctx.JSON(http.StatusUnauthorized, gin.H&#123;&quot;code&quot;: 401, &quot;msg&quot;: &quot;权限不足&quot;&#125;)\n ctx.Abort()\n return\n &#125;\n fmt.Println(111)\n fmt.Println(claims.UserId)\n &#125;\n\n func ParseToken(tokenString string) (*jwt.Token, *Claims, error) &#123;\n Claims :&#x3D; &amp;Claims&#123;&#125;\n\ntoken, err :&#x3D; jwt.ParseWithClaims(tokenString, Claims, func(token\n*jwt.Token) (i interface&#123;&#125;, err error) &#123;\n return jwtkey, nil\n &#125;)\n return token, Claims, err\n &#125;\n","slug":"GO4","date":"2022-11-03T14:57:49.000Z","categories_index":"编程语言","tags_index":"GO","author_index":"Algernon"},{"id":"6fcdfe05d0345160147b0e4b83a609f1","title":"【数据挖掘】（一）用jupyter编程","content":"为熟悉jupyter，找了一本书练习。参考资料：《Python数据挖掘入门与实践》数据集：\n\n\n\n\n\n\n\n\n\nhttps://github.com/packtpublishing/learning-data-mining-with-python\n第一行代码import numpy as np\ndataset_filename &#x3D; &quot;affinity_dataset.txt&quot;\nX &#x3D;np.loadtxt(dataset_filename)\nprint(X[:5])\n\n\n\n\n\n\n\n\n\n[[0. 0. 1. 1. 1.] [1. 1. 0. 1. 0.] [1. 0. 1. 1. 0.] [0. 0. 1. 1. 1.] [0. 1. 0. 0. 1.]]\n\nnum_apple_purchases&#x3D;0\nfor sample in X:\n  if sample[3]&#x3D;&#x3D;1:\n     num_apple_purchases +&#x3D;1\nprint(&quot;&#123;0&#125;prople bought Apples&quot;.format(num_apple_purchases))\n\n分类鸢尾花数据集\nfrom sklearn.datasets import load_iris\ndataset &#x3D;load_iris()\nX&#x3D;dataset.data\ny&#x3D;dataset.target\nprint(dataset.DESCR)\n把连续值转变为类别型，这个过程叫做离散化。最简单的离散化方法，莫过于确定一个阈值，将低于该阈值的特征值置为0，高于阈值的置为1.我们把某项特征的阈值设定为该特征所有特征值的均值。每个特征的均值计算方法如下：\nattribute_means &#x3D;X.mean(axis&#x3D;0)\n我们得到了一个长度为4的数组，这是特征的数量。数组的第一项是第一个特征的均值，以此类推。接下来，用该方法将数据集打散，把连续的特征值转换为类别型。\nX_d&#x3D;np.array(X &gt;&#x3D; attribute_means,dtype&#x3D;&#39;int&#39;)\n后面的训练和测试，都将用到新得到的X_d数据集（打散后的数组X），而不使用原来的数据集（X）\nattribute_means &#x3D; X.mean(axis&#x3D;0)\nassert attribute_means.shape &#x3D;&#x3D; (n_features,)\nX_d &#x3D; np.array(X &gt;&#x3D; attribute_means, dtype&#x3D;&#39;int&#39;)\nimport sklearn.model_selection\nfrom sklearn.model_selection import train_test_split\n\n# Set the random state to the same number to get the same results as in the book\nrandom_state &#x3D; 14\n\nX_train, X_test, y_train, y_test &#x3D; train_test_split(X_d, y, random_state&#x3D;random_state)\nprint(&quot;There are &#123;&#125; training samples&quot;.format(y_train.shape))\nprint(&quot;There are &#123;&#125; testing samples&quot;.format(y_test.shape))\n\n\n\n\n\n\n\n\n\nThere are (112,) training samplesThere are (38,) testing samples\n\nfrom collections import defaultdict\nfrom operator import itemgetter\n\n\ndef train(X, y_true, feature):\n    &quot;&quot;&quot;Computes the predictors and error for a given feature using the OneR algorithm\n    \n    Parameters\n    ----------\n    X: array [n_samples, n_features]\n        The two dimensional array that holds the dataset. Each row is a sample, each column\n        is a feature.\n    \n    y_true: array [n_samples,]\n        The one dimensional array that holds the class values. Corresponds to X, such that\n        y_true[i] is the class value for sample X[i].\n    \n    feature: int\n        An integer corresponding to the index of the variable we wish to test.\n        0 &lt;&#x3D; variable &lt; n_features\n        \n    Returns\n    -------\n    predictors: dictionary of tuples: (value, prediction)\n        For each item in the array, if the variable has a given value, make the given prediction.\n    \n    error: float\n        The ratio of training data that this rule incorrectly predicts.\n    &quot;&quot;&quot;\n    # Check that variable is a valid number\n    n_samples, n_features &#x3D; X.shape\n    assert 0 &lt;&#x3D; feature &lt; n_features\n    # Get all of the unique values that this variable has\n    values &#x3D; set(X[:,feature])\n    # Stores the predictors array that is returned\n    predictors &#x3D; dict()\n    errors &#x3D; []\n    for current_value in values:\n        most_frequent_class, error &#x3D; train_feature_value(X, y_true, feature, current_value)\n        predictors[current_value] &#x3D; most_frequent_class\n        errors.append(error)\n    # Compute the total error of using this feature to classify on\n    total_error &#x3D; sum(errors)\n    return predictors, total_error\n\n# Compute what our predictors say each sample is based on its value\n#y_predicted &#x3D; np.array([predictors[sample[feature]] for sample in X])\n    \n\ndef train_feature_value(X, y_true, feature, value):\n    # Create a simple dictionary to count how frequency they give certain predictions\n    class_counts &#x3D; defaultdict(int)\n    # Iterate through each sample and count the frequency of each class&#x2F;value pair\n    for sample, y in zip(X, y_true):\n        if sample[feature] &#x3D;&#x3D; value:\n            class_counts[y] +&#x3D; 1\n    # Now get the best one by sorting (highest first) and choosing the first item\n    sorted_class_counts &#x3D; sorted(class_counts.items(), key&#x3D;itemgetter(1), reverse&#x3D;True)\n    most_frequent_class &#x3D; sorted_class_counts[0][0]\n    # The error is the number of samples that do not classify as the most frequent class\n    # *and* have the feature value.\n    n_samples &#x3D; X.shape[1]\n    error &#x3D; sum([class_count for class_value, class_count in class_counts.items()\n                 if class_value !&#x3D; most_frequent_class])\n    return most_frequent_class, error\n# Compute all of the predictors\nall_predictors &#x3D; &#123;variable: train(X_train, y_train, variable) for variable in range(X_train.shape[1])&#125;\nerrors &#x3D; &#123;variable: error for variable, (mapping, error) in all_predictors.items()&#125;\n# Now choose the best and save that as &quot;model&quot;\n# Sort by error\nbest_variable, best_error &#x3D; sorted(errors.items(), key&#x3D;itemgetter(1))[0]\nprint(&quot;The best model is based on variable &#123;0&#125; and has error &#123;1:.2f&#125;&quot;.format(best_variable, best_error))\n\n# Choose the bset model\nmodel &#x3D; &#123;&#39;variable&#39;: best_variable,\n         &#39;predictor&#39;: all_predictors[best_variable][0]&#125;\nprint(model)\n\n\n\n\n\n\n\n\n\nThe best model is based on variable 2 and has error 37.00{‘variable’: 2, ‘predictor’: {0: 0, 1: 2}}\ndef predict(X_test, model):\n    variable &#x3D; model[&#39;variable&#39;]\n    predictor &#x3D; model[&#39;predictor&#39;]\n    y_predicted &#x3D; np.array([predictor[int(sample[variable])] for sample in X_test])\n    return y_predicted\n我们经常需要一次对多条数据进行预测，因此用代码实现这个函数，通过遍历数据集中的每条数据来完成预测。\ny_predicted &#x3D; predict(X_test, model)\nprint(y_predicted)\n\n\n\n\n\n\n\n\n\n[0 0 0 2 2 2 0 2 0 2 2 0 2 2 0 2 0 2 2 2 0 0 0 2 0 2 0 2 2 0 0 0 2 0 2 0 2 2]\n比较预测结果和实际类别，就能得到正确率是多少。# Compute the accuracy by taking the mean of the amounts that y_predicted is equal to y_test\naccuracy &#x3D; np.mean(y_predicted &#x3D;&#x3D; y_test) * 100\nprint(&quot;The test accuracy is &#123;:.1f&#125;%&quot;.format(accuracy))\n\n\n\n\n\n\n\n\n\nThe test accuracy is 65.8%\n\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test, y_predicted))\n\n近邻主目录位置\n数据集：\n\n\n\n\n\n\n\n\n\nhttp://archive.ics.uci.edu/ml/datasets/Ionosphere\n\n# Change this to the location of your dataset\ndata_folder &#x3D; os.path.join(home_folder, &quot;Data&quot;, &quot;Ionosphere&quot;)\ndata_filename &#x3D; os.path.join(data_folder, &quot;ionosphere.data&quot;)\nprint(data_filename)\n\n\n\n\n\n\n\n\n\nC:\\Users\\83854\\Data\\Ionosphere\\ionosphere.data\nimport csv\nimport numpy as np\n\n# Size taken from the dataset and is known\nX &#x3D; np.zeros((351, 34), dtype&#x3D;&#39;float&#39;)\ny &#x3D; np.zeros((351,), dtype&#x3D;&#39;bool&#39;)\n\nwith open(data_filename, &#39;r&#39;) as input_file:\n    reader &#x3D; csv.reader(input_file)\n    for i, row in enumerate(reader):\n        # Get the data, converting each item to a float\n        data &#x3D; [float(datum) for datum in row[:-1]]\n        # Set the appropriate row in our dataset\n        X[i] &#x3D; data\n        # 1 if the class is &#39;g&#39;, 0 otherwise\n        y[i] &#x3D; row[-1] &#x3D;&#x3D; &#39;g&#39;\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test &#x3D; train_test_split(X, y, random_state&#x3D;14)\nprint(&quot;There are &#123;&#125; samples in the training dataset&quot;.format(X_train.shape[0]))\nprint(&quot;There are &#123;&#125; samples in the testing dataset&quot;.format(X_test.shape[0]))\nprint(&quot;Each sample has &#123;&#125; features&quot;.format(X_train.shape[1]))\n\n\n\n\n\n\n\n\n\nThere are 263 samples in the training datasetThere are 88 samples in the testing datasetEach sample has 34 features\nfrom sklearn.neighbors import KNeighborsClassifier\n\nestimator &#x3D; KNeighborsClassifier()\nestimator.fit(X_train, y_train)\n\ny_predicted &#x3D; estimator.predict(X_test)\naccuracy &#x3D; np.mean(y_test &#x3D;&#x3D; y_predicted) * 100\nprint(&quot;The accuracy is &#123;0:.1f&#125;%&quot;.format(accuracy))\n\n\n\n\n\n\n\n\n\nThe accuracy is 86.4%\nfrom sklearn.model_selection import cross_val_score\nscores &#x3D; cross_val_score(estimator, X, y, scoring&#x3D;&#39;accuracy&#39;)\naverage_accuracy &#x3D; np.mean(scores) * 100\nprint(&quot;The average accuracy is &#123;0:.1f&#125;%&quot;.format(average_accuracy))\n\n\n\n\n\n\n\n\n\nThe average accuracy is 82.6%\n\navg_scores &#x3D; []\nall_scores &#x3D; []\nparameter_values &#x3D; list(range(1, 21))  # Including 20\nfor n_neighbors in parameter_values:\n    estimator &#x3D; KNeighborsClassifier(n_neighbors&#x3D;n_neighbors)\n    scores &#x3D; cross_val_score(estimator, X, y, scoring&#x3D;&#39;accuracy&#39;)\n    avg_scores.append(np.mean(scores))\n    all_scores.append(scores)\nfrom matplotlib import pyplot as plt\nplt.figure(figsize&#x3D;(32,20))\nplt.plot(parameter_values, avg_scores, &#39;-o&#39;, linewidth&#x3D;5, markersize&#x3D;24)\n#plt.axis([0, max(parameter_values), 0, 1.0])\n\n\nfor parameter, scores in zip(parameter_values, all_scores):\n    n_scores &#x3D; len(scores)\n    plt.plot([parameter] * n_scores, scores, &#39;-o&#39;)\n\nplt.plot(parameter_values, all_scores, &#39;bx&#39;)\n\n\n\n\n\n\n\n\n\n[, , , , ]\n\n电影推荐数据集：\n\n\n\n\n\n\n\n\n\nhttps://grouplens.org/datasets/movielens/\nimport os\nimport pandas as pd\n#data_folder &#x3D;os.path.join(os.path.expanduser(&quot;~&quot;),&quot;shujvji&quot;,&quot;ml-100k&quot;)\n#ratings_filename&#x3D;os.path.join(data_folder,&quot;u.data&quot;)\nratings_filename &#x3D; r&quot;D:\\coder\\randomnumbers\\shujvji\\ml-100k\\u.data&quot;\n该数据集非常规整，但有几点与pandas.read_csv方法的默认设置有出入，所以要调整参数设置。第一个问题是数据集每行的几个数据之间用制表符而不是逗号分隔。其次，没有表头，这表示数据集的第一行就是数据部分，我们需要手动为各列添加名称。\nall_ratings&#x3D;pd.read_csv(ratings_filename,delimiter&#x3D;&quot;\\t&quot;,header&#x3D;None,names&#x3D;[&quot;UserID&quot;,&quot;MovieID&quot;,&quot;Rating&quot;,&quot;Datetime&quot;])\n运行下面代码，看一下前五条记录：\nall_ratings[:5]\n\n\n\n\n\n\n\n\n\n    UserID    MovieID    Rating    Datetime\n0    196    242    3    881250949\n1    186    302    3    891717742\n2    22    377    1    878887116\n3    244    51    2    880606923\n4    166    346    1    886397596\n\n\n完整代码下面是完整代码：\nimport os\ndata_folder &#x3D; os.path.join(os.path.expanduser(&quot;~&quot;), &quot;Data&quot;, &quot;ml-100k&quot;)\nratings_filename &#x3D; os.path.join(data_folder, &quot;u.data&quot;)\nimport pandas as pd\nall_ratings &#x3D; pd.read_csv(ratings_filename, delimiter&#x3D;&quot;\\t&quot;, header&#x3D;None, names &#x3D; [&quot;UserID&quot;, &quot;MovieID&quot;, &quot;Rating&quot;, &quot;Datetime&quot;])\nall_ratings[&quot;Datetime&quot;] &#x3D; pd.to_datetime(all_ratings[&#39;Datetime&#39;],unit&#x3D;&#39;s&#39;)\nall_ratings[:5]\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\n\n  \n    \n      \n      UserID\n      MovieID\n      Rating\n      Datetime\n    \n  \n  \n    \n      0\n      196\n      242\n      3\n      1997-12-04 15:55:49\n    \n    \n      1\n      186\n      302\n      3\n      1998-04-04 19:22:22\n    \n    \n      2\n      22\n      377\n      1\n      1997-11-07 07:18:36\n    \n    \n      3\n      244\n      51\n      2\n      1997-11-27 05:02:03\n    \n    \n      4\n      166\n      346\n      1\n      1998-02-02 05:33:16\n    \n  \n\n\n\n\n\n\n\nall_ratings[all_ratings[&quot;UserID&quot;] &#x3D;&#x3D; 675].sort_values(&quot;MovieID&quot;)  \n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\n\n  \n    \n      \n      UserID\n      MovieID\n      Rating\n      Datetime\n    \n  \n  \n    \n      81098\n      675\n      86\n      4\n      1998-03-10 00:26:14\n    \n    \n      90696\n      675\n      223\n      1\n      1998-03-10 00:35:51\n    \n    \n      92650\n      675\n      235\n      1\n      1998-03-10 00:35:51\n    \n    \n      95459\n      675\n      242\n      4\n      1998-03-10 00:08:42\n    \n    \n      82845\n      675\n      244\n      3\n      1998-03-10 00:29:35\n    \n    \n      53293\n      675\n      258\n      3\n      1998-03-10 00:11:19\n    \n    \n      97286\n      675\n      269\n      5\n      1998-03-10 00:08:07\n    \n    \n      93720\n      675\n      272\n      3\n      1998-03-10 00:07:11\n    \n    \n      73389\n      675\n      286\n      4\n      1998-03-10 00:07:11\n    \n    \n      77524\n      675\n      303\n      5\n      1998-03-10 00:08:42\n    \n    \n      47367\n      675\n      305\n      4\n      1998-03-10 00:09:08\n    \n    \n      44300\n      675\n      306\n      5\n      1998-03-10 00:08:07\n    \n    \n      53730\n      675\n      311\n      3\n      1998-03-10 00:10:47\n    \n    \n      54284\n      675\n      312\n      2\n      1998-03-10 00:10:24\n    \n    \n      63291\n      675\n      318\n      5\n      1998-03-10 00:21:13\n    \n    \n      87082\n      675\n      321\n      2\n      1998-03-10 00:11:48\n    \n    \n      56108\n      675\n      344\n      4\n      1998-03-10 00:12:34\n    \n    \n      53046\n      675\n      347\n      4\n      1998-03-10 00:07:11\n    \n    \n      94617\n      675\n      427\n      5\n      1998-03-10 00:28:11\n    \n    \n      69915\n      675\n      463\n      5\n      1998-03-10 00:16:43\n    \n    \n      46744\n      675\n      509\n      5\n      1998-03-10 00:24:25\n    \n    \n      46598\n      675\n      531\n      5\n      1998-03-10 00:18:28\n    \n    \n      52962\n      675\n      650\n      5\n      1998-03-10 00:32:51\n    \n    \n      94029\n      675\n      750\n      4\n      1998-03-10 00:08:07\n    \n    \n      53223\n      675\n      874\n      4\n      1998-03-10 00:11:19\n    \n    \n      62277\n      675\n      891\n      2\n      1998-03-10 00:12:59\n    \n    \n      77274\n      675\n      896\n      5\n      1998-03-10 00:09:35\n    \n    \n      66194\n      675\n      900\n      4\n      1998-03-10 00:10:24\n    \n    \n      54994\n      675\n      937\n      1\n      1998-03-10 00:35:51\n    \n    \n      61742\n      675\n      1007\n      4\n      1998-03-10 00:25:22\n    \n    \n      49225\n      675\n      1101\n      4\n      1998-03-10 00:33:49\n    \n    \n      50692\n      675\n      1255\n      1\n      1998-03-10 00:35:51\n    \n    \n      74202\n      675\n      1628\n      5\n      1998-03-10 00:30:37\n    \n    \n      47866\n      675\n      1653\n      5\n      1998-03-10 00:31:53\n    \n  \n\n\n\n\n\n\n\nall_ratings[&quot;Favorable&quot;] &#x3D; all_ratings[&quot;Rating&quot;] &gt; 3\nall_ratings[10:15]\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\n\n  \n    \n      \n      UserID\n      MovieID\n      Rating\n      Datetime\n      Favorable\n    \n  \n  \n    \n      10\n      62\n      257\n      2\n      1997-11-12 22:07:14\n      False\n    \n    \n      11\n      286\n      1014\n      5\n      1997-11-17 15:38:45\n      True\n    \n    \n      12\n      200\n      222\n      5\n      1997-10-05 09:05:40\n      True\n    \n    \n      13\n      210\n      40\n      3\n      1998-03-27 21:59:54\n      False\n    \n    \n      14\n      224\n      29\n      3\n      1998-02-21 23:40:57\n      False\n    \n  \n\n\n\n\n\n\n\nall_ratings[all_ratings[&quot;UserID&quot;] &#x3D;&#x3D; 1][:5]\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\n\n  \n    \n      \n      UserID\n      MovieID\n      Rating\n      Datetime\n      Favorable\n    \n  \n  \n    \n      202\n      1\n      61\n      4\n      1997-11-03 07:33:40\n      True\n    \n    \n      305\n      1\n      189\n      3\n      1998-03-01 06:15:28\n      False\n    \n    \n      333\n      1\n      33\n      4\n      1997-11-03 07:38:19\n      True\n    \n    \n      334\n      1\n      160\n      4\n      1997-09-24 03:42:27\n      True\n    \n    \n      478\n      1\n      20\n      4\n      1998-02-14 04:51:23\n      True\n    \n  \n\n\n\n\n\n\n\nratings &#x3D; all_ratings[all_ratings[&#39;UserID&#39;].isin(range(200))]  # &amp; ratings[&quot;UserID&quot;].isin(range(100))]\nfavorable_ratings &#x3D; ratings[ratings[&quot;Favorable&quot;]]\nfavorable_ratings[:5]\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\n\n  \n    \n      \n      UserID\n      MovieID\n      Rating\n      Datetime\n      Favorable\n    \n  \n  \n    \n      16\n      122\n      387\n      5\n      1997-11-11 17:47:39\n      True\n    \n    \n      20\n      119\n      392\n      4\n      1998-01-30 16:13:34\n      True\n    \n    \n      21\n      167\n      486\n      4\n      1998-04-16 14:54:12\n      True\n    \n    \n      26\n      38\n      95\n      5\n      1998-04-13 01:14:54\n      True\n    \n    \n      28\n      63\n      277\n      4\n      1997-10-01 23:10:01\n      True\n    \n  \n\n\n\n\n\n\n\nfavorable_reviews_by_users &#x3D; dict((k, frozenset(v.values)) for k, v in favorable_ratings.groupby(&quot;UserID&quot;)[&quot;MovieID&quot;])\nlen(favorable_reviews_by_users)\n199\nnum_favorable_by_movie &#x3D; ratings[[&quot;MovieID&quot;, &quot;Favorable&quot;]].groupby(&quot;MovieID&quot;).sum()\nnum_favorable_by_movie.sort_values(&quot;Favorable&quot;, ascending&#x3D;False)[:5]\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\n\n  \n    \n      \n      Favorable\n    \n    \n      MovieID\n      \n    \n  \n  \n    \n      50\n      100\n    \n    \n      100\n      89\n    \n    \n      258\n      83\n    \n    \n      181\n      79\n    \n    \n      174\n      74\n    \n  \n\n\n\n\n\n\n\nfrom collections import defaultdict\n\ndef find_frequent_itemsets(favorable_reviews_by_users, k_1_itemsets, min_support):\n    counts &#x3D; defaultdict(int)\n    for user, reviews in favorable_reviews_by_users.items():\n        for itemset in k_1_itemsets:\n            if itemset.issubset(reviews):\n                for other_reviewed_movie in reviews - itemset:\n                    current_superset &#x3D; itemset | frozenset((other_reviewed_movie,))\n                    counts[current_superset] +&#x3D; 1\n    return dict([(itemset, frequency) for itemset, frequency in counts.items() if frequency &gt;&#x3D; min_support])\nimport sys\nfrequent_itemsets &#x3D; &#123;&#125;  # itemsets are sorted by length\nmin_support &#x3D; 50\n\n# k&#x3D;1 candidates are the isbns with more than min_support favourable reviews\nfrequent_itemsets[1] &#x3D; dict((frozenset((movie_id,)), row[&quot;Favorable&quot;])\n                                for movie_id, row in num_favorable_by_movie.iterrows()\n                                if row[&quot;Favorable&quot;] &gt; min_support)\n\nprint(&quot;There are &#123;&#125; movies with more than &#123;&#125; favorable reviews&quot;.format(len(frequent_itemsets[1]), min_support))\nsys.stdout.flush()\nfor k in range(2, 20):\n    # Generate candidates of length k, using the frequent itemsets of length k-1\n    # Only store the frequent itemsets\n    cur_frequent_itemsets &#x3D; find_frequent_itemsets(favorable_reviews_by_users, frequent_itemsets[k-1],\n                                                   min_support)\n    if len(cur_frequent_itemsets) &#x3D;&#x3D; 0:\n        print(&quot;Did not find any frequent itemsets of length &#123;&#125;&quot;.format(k))\n        sys.stdout.flush()\n        break\n    else:\n        print(&quot;I found &#123;&#125; frequent itemsets of length &#123;&#125;&quot;.format(len(cur_frequent_itemsets), k))\n        #print(cur_frequent_itemsets)\n        sys.stdout.flush()\n        frequent_itemsets[k] &#x3D; cur_frequent_itemsets\n# We aren&#39;t interested in the itemsets of length 1, so remove those\ndel frequent_itemsets[1]\nThere are 16 movies with more than 50 favorable reviews\nI found 93 frequent itemsets of length 2\nI found 295 frequent itemsets of length 3\nI found 593 frequent itemsets of length 4\nI found 785 frequent itemsets of length 5\nI found 677 frequent itemsets of length 6\nI found 373 frequent itemsets of length 7\nI found 126 frequent itemsets of length 8\nI found 24 frequent itemsets of length 9\nI found 2 frequent itemsets of length 10\nDid not find any frequent itemsets of length 11\nprint(&quot;Found a total of &#123;0&#125; frequent itemsets&quot;.format(sum(len(itemsets) for itemsets in frequent_itemsets.values())))\nFound a total of 2968 frequent itemsets\ncandidate_rules &#x3D; []\nfor itemset_length, itemset_counts in frequent_itemsets.items():\n    for itemset in itemset_counts.keys():\n        for conclusion in itemset:\n            premise &#x3D; itemset - set((conclusion,))\n            candidate_rules.append((premise, conclusion))\nprint(&quot;There are &#123;&#125; candidate rules&quot;.format(len(candidate_rules)))\nThere are 15285 candidate rules\nprint(candidate_rules[:5])\n[(frozenset(&#123;7&#125;), 1), (frozenset(&#123;1&#125;), 7), (frozenset(&#123;50&#125;), 1), (frozenset(&#123;1&#125;), 50), (frozenset(&#123;1&#125;), 56)]\ncorrect_counts &#x3D; defaultdict(int)\nincorrect_counts &#x3D; defaultdict(int)\nfor user, reviews in favorable_reviews_by_users.items():\n    for candidate_rule in candidate_rules:\n        premise, conclusion &#x3D; candidate_rule\n        if premise.issubset(reviews):\n            if conclusion in reviews:\n                correct_counts[candidate_rule] +&#x3D; 1\n            else:\n                incorrect_counts[candidate_rule] +&#x3D; 1\nrule_confidence &#x3D; &#123;candidate_rule: correct_counts[candidate_rule] &#x2F; float(correct_counts[candidate_rule] + incorrect_counts[candidate_rule])\n              for candidate_rule in candidate_rules&#125;\nmin_confidence &#x3D; 0.9\nrule_confidence &#x3D; &#123;rule: confidence for rule, confidence in rule_confidence.items() if confidence &gt; min_confidence&#125;\nprint(len(rule_confidence))\n5152\nfrom operator import itemgetter\nsorted_confidence &#x3D; sorted(rule_confidence.items(), key&#x3D;itemgetter(1), reverse&#x3D;True)\nfor index in range(5):\n    print(&quot;Rule #&#123;0&#125;&quot;.format(index + 1))\n    (premise, conclusion) &#x3D; sorted_confidence[index][0]\n    print(&quot;Rule: If a person recommends &#123;0&#125; they will also recommend &#123;1&#125;&quot;.format(premise, conclusion))\n    print(&quot; - Confidence: &#123;0:.3f&#125;&quot;.format(rule_confidence[(premise, conclusion)]))\n    print(&quot;&quot;)\nRule #1\nRule: If a person recommends frozenset(&#123;98, 181&#125;) they will also recommend 50\n - Confidence: 1.000\n\nRule #2\nRule: If a person recommends frozenset(&#123;172, 79&#125;) they will also recommend 174\n - Confidence: 1.000\n\nRule #3\nRule: If a person recommends frozenset(&#123;258, 172&#125;) they will also recommend 174\n - Confidence: 1.000\n\nRule #4\nRule: If a person recommends frozenset(&#123;1, 181, 7&#125;) they will also recommend 50\n - Confidence: 1.000\n\nRule #5\nRule: If a person recommends frozenset(&#123;1, 172, 7&#125;) they will also recommend 174\n - Confidence: 1.000\n​    \nmovie_name_filename &#x3D; os.path.join(data_folder, &quot;u.item&quot;)\nmovie_name_data &#x3D; pd.read_csv(movie_name_filename, delimiter&#x3D;&quot;|&quot;, header&#x3D;None, encoding &#x3D; &quot;mac-roman&quot;)\nmovie_name_data.columns &#x3D; [&quot;MovieID&quot;, &quot;Title&quot;, &quot;Release Date&quot;, &quot;Video Release&quot;, &quot;IMDB&quot;, &quot;&lt;UNK&gt;&quot;, &quot;Action&quot;, &quot;Adventure&quot;,\n                           &quot;Animation&quot;, &quot;Children&#39;s&quot;, &quot;Comedy&quot;, &quot;Crime&quot;, &quot;Documentary&quot;, &quot;Drama&quot;, &quot;Fantasy&quot;, &quot;Film-Noir&quot;,\n                           &quot;Horror&quot;, &quot;Musical&quot;, &quot;Mystery&quot;, &quot;Romance&quot;, &quot;Sci-Fi&quot;, &quot;Thriller&quot;, &quot;War&quot;, &quot;Western&quot;]\ndef get_movie_name(movie_id):\n    title_object &#x3D; movie_name_data[movie_name_data[&quot;MovieID&quot;] &#x3D;&#x3D; movie_id][&quot;Title&quot;]\n    title &#x3D; title_object.values[0]\n    return title\nget_movie_name(4)\n&#39;Get Shorty (1995)&#39;\nfor index in range(5):\n    print(&quot;Rule #&#123;0&#125;&quot;.format(index + 1))\n    (premise, conclusion) &#x3D; sorted_confidence[index][0]\n    premise_names &#x3D; &quot;, &quot;.join(get_movie_name(idx) for idx in premise)\n    conclusion_name &#x3D; get_movie_name(conclusion)\n    print(&quot;Rule: If a person recommends &#123;0&#125; they will also recommend &#123;1&#125;&quot;.format(premise_names, conclusion_name))\n    print(&quot; - Confidence: &#123;0:.3f&#125;&quot;.format(rule_confidence[(premise, conclusion)]))\n    print(&quot;&quot;)\nRule #1\nRule: If a person recommends Silence of the Lambs, The (1991), Return of the Jedi (1983) they will also recommend Star Wars (1977)\n - Confidence: 1.000\n\nRule #2\nRule: If a person recommends Empire Strikes Back, The (1980), Fugitive, The (1993) they will also recommend Raiders of the Lost Ark (1981)\n - Confidence: 1.000\n\nRule #3\nRule: If a person recommends Contact (1997), Empire Strikes Back, The (1980) they will also recommend Raiders of the Lost Ark (1981)\n - Confidence: 1.000\n\nRule #4\nRule: If a person recommends Toy Story (1995), Return of the Jedi (1983), Twelve Monkeys (1995) they will also recommend Star Wars (1977)\n - Confidence: 1.000\n\nRule #5\nRule: If a person recommends Toy Story (1995), Empire Strikes Back, The (1980), Twelve Monkeys (1995) they will also recommend Raiders of the Lost Ark (1981)\n - Confidence: 1.000\n​    \n# Evaluation using test data\ntest_dataset &#x3D; all_ratings[~all_ratings[&#39;UserID&#39;].isin(range(200))]\ntest_favorable &#x3D; test_dataset[test_dataset[&quot;Favorable&quot;]]\n#test_not_favourable &#x3D; test_dataset[~test_dataset[&quot;Favourable&quot;]]\ntest_favorable_by_users &#x3D; dict((k, frozenset(v.values)) for k, v in test_favorable.groupby(&quot;UserID&quot;)[&quot;MovieID&quot;])\n#test_not_favourable_by_users &#x3D; dict((k, frozenset(v.values)) for k, v in test_not_favourable.groupby(&quot;UserID&quot;)[&quot;MovieID&quot;])\n#test_users &#x3D; test_dataset[&quot;UserID&quot;].unique()\ntest_dataset[:5]\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\n\n  \n    \n      \n      UserID\n      MovieID\n      Rating\n      Datetime\n      Favorable\n    \n  \n  \n    \n      3\n      244\n      51\n      2\n      1997-11-27 05:02:03\n      False\n    \n    \n      5\n      298\n      474\n      4\n      1998-01-07 14:20:06\n      True\n    \n    \n      7\n      253\n      465\n      5\n      1998-04-03 18:34:27\n      True\n    \n    \n      8\n      305\n      451\n      3\n      1998-02-01 09:20:17\n      False\n    \n    \n      11\n      286\n      1014\n      5\n      1997-11-17 15:38:45\n      True\n    \n  \n\n\n\n\n\n\n\ncorrect_counts &#x3D; defaultdict(int)\nincorrect_counts &#x3D; defaultdict(int)\nfor user, reviews in test_favorable_by_users.items():\n    for candidate_rule in candidate_rules:\n        premise, conclusion &#x3D; candidate_rule\n        if premise.issubset(reviews):\n            if conclusion in reviews:\n                correct_counts[candidate_rule] +&#x3D; 1\n            else:\n                incorrect_counts[candidate_rule] +&#x3D; 1\ntest_confidence &#x3D; &#123;candidate_rule: correct_counts[candidate_rule] &#x2F; float(correct_counts[candidate_rule] + incorrect_counts[candidate_rule])\n                   for candidate_rule in rule_confidence&#125;\nprint(len(test_confidence))\n5152\nsorted_test_confidence &#x3D; sorted(test_confidence.items(), key&#x3D;itemgetter(1), reverse&#x3D;True)\nprint(sorted_test_confidence[:5])\n[((frozenset(&#123;64, 1, 7, 79, 50&#125;), 174), 1.0), ((frozenset(&#123;64, 1, 98, 7, 79&#125;), 174), 1.0), ((frozenset(&#123;64, 1, 7, 172, 79&#125;), 174), 1.0), ((frozenset(&#123;64, 1, 7, 79, 181&#125;), 174), 1.0), ((frozenset(&#123;64, 1, 172, 79, 56&#125;), 174), 1.0)]\nfor index in range(10):\n    print(&quot;Rule #&#123;0&#125;&quot;.format(index + 1))\n    (premise, conclusion) &#x3D; sorted_confidence[index][0]\n    premise_names &#x3D; &quot;, &quot;.join(get_movie_name(idx) for idx in premise)\n    conclusion_name &#x3D; get_movie_name(conclusion)\n    print(&quot;Rule: If a person recommends &#123;0&#125; they will also recommend &#123;1&#125;&quot;.format(premise_names, conclusion_name))\n    print(&quot; - Train Confidence: &#123;0:.3f&#125;&quot;.format(rule_confidence.get((premise, conclusion), -1)))\n    print(&quot; - Test Confidence: &#123;0:.3f&#125;&quot;.format(test_confidence.get((premise, conclusion), -1)))\n    print(&quot;&quot;)\nRule #1\nRule: If a person recommends Silence of the Lambs, The (1991), Return of the Jedi (1983) they will also recommend Star Wars (1977)\n - Train Confidence: 1.000\n - Test Confidence: 0.936\n\nRule #2\nRule: If a person recommends Empire Strikes Back, The (1980), Fugitive, The (1993) they will also recommend Raiders of the Lost Ark (1981)\n - Train Confidence: 1.000\n - Test Confidence: 0.876\n\nRule #3\nRule: If a person recommends Contact (1997), Empire Strikes Back, The (1980) they will also recommend Raiders of the Lost Ark (1981)\n - Train Confidence: 1.000\n - Test Confidence: 0.841\n\nRule #4\nRule: If a person recommends Toy Story (1995), Return of the Jedi (1983), Twelve Monkeys (1995) they will also recommend Star Wars (1977)\n - Train Confidence: 1.000\n - Test Confidence: 0.932\n\nRule #5\nRule: If a person recommends Toy Story (1995), Empire Strikes Back, The (1980), Twelve Monkeys (1995) they will also recommend Raiders of the Lost Ark (1981)\n - Train Confidence: 1.000\n - Test Confidence: 0.903\n\nRule #6\nRule: If a person recommends Pulp Fiction (1994), Toy Story (1995), Star Wars (1977) they will also recommend Raiders of the Lost Ark (1981)\n - Train Confidence: 1.000\n - Test Confidence: 0.816\n\nRule #7\nRule: If a person recommends Pulp Fiction (1994), Toy Story (1995), Return of the Jedi (1983) they will also recommend Star Wars (1977)\n - Train Confidence: 1.000\n - Test Confidence: 0.970\n\nRule #8\nRule: If a person recommends Toy Story (1995), Silence of the Lambs, The (1991), Return of the Jedi (1983) they will also recommend Star Wars (1977)\n - Train Confidence: 1.000\n - Test Confidence: 0.933\n\nRule #9\nRule: If a person recommends Toy Story (1995), Empire Strikes Back, The (1980), Return of the Jedi (1983) they will also recommend Star Wars (1977)\n - Train Confidence: 1.000\n - Test Confidence: 0.971\n\nRule #10\nRule: If a person recommends Pulp Fiction (1994), Toy Story (1995), Shawshank Redemption, The (1994) they will also recommend Silence of the Lambs, The (1991)\n - Train Confidence: 1.000\n - Test Confidence: 0.794\n​    \n\n特征抽取第一部分数据集：\n\nhttp://archive.ics.uci.edu/ml/machine-learning-databases/adult/\n完整代码import os\nimport pandas as pd\ndata_folder &#x3D; os.path.join(os.path.expanduser(&quot;~&quot;), &quot;Data&quot;, &quot;Adult&quot;)\nadult_filename &#x3D; os.path.join(data_folder, &quot;adult.data&quot;)\nprint(adult_filename)\nC:\\Users\\83854\\Data\\Adult\\adult.data\nadult &#x3D; pd.read_csv(adult_filename, header&#x3D;None, names&#x3D;[&quot;Age&quot;, &quot;Work-Class&quot;, &quot;fnlwgt&quot;, &quot;Education&quot;,\n                                                        &quot;Education-Num&quot;, &quot;Marital-Status&quot;, &quot;Occupation&quot;,\n                                                        &quot;Relationship&quot;, &quot;Race&quot;, &quot;Sex&quot;, &quot;Capital-gain&quot;,\n                                                        &quot;Capital-loss&quot;, &quot;Hours-per-week&quot;, &quot;Native-Country&quot;,\n                                                        &quot;Earnings-Raw&quot;])\nadult.dropna(how&#x3D;&#39;all&#39;, inplace&#x3D;True)\nadult.columns\nIndex([&#39;Age&#39;, &#39;Work-Class&#39;, &#39;fnlwgt&#39;, &#39;Education&#39;, &#39;Education-Num&#39;,\n       &#39;Marital-Status&#39;, &#39;Occupation&#39;, &#39;Relationship&#39;, &#39;Race&#39;, &#39;Sex&#39;,\n       &#39;Capital-gain&#39;, &#39;Capital-loss&#39;, &#39;Hours-per-week&#39;, &#39;Native-Country&#39;,\n       &#39;Earnings-Raw&#39;],\n      dtype=&#39;object&#39;)\nadult[&quot;Hours-per-week&quot;].describe()\ncount    32561.000000\nmean        40.437456\nstd         12.347429\nmin          1.000000\n25%         40.000000\n50%         40.000000\n75%         45.000000\nmax         99.000000\nName: Hours-per-week, dtype: float64\nadult[&quot;Education-Num&quot;].median()\n10.0\nadult[&quot;Work-Class&quot;].unique()\narray([&#39; State-gov&#39;, &#39; Self-emp-not-inc&#39;, &#39; Private&#39;, &#39; Federal-gov&#39;,\n       &#39; Local-gov&#39;, &#39; ?&#39;, &#39; Self-emp-inc&#39;, &#39; Without-pay&#39;,\n       &#39; Never-worked&#39;], dtype=object)\nimport numpy as np\nX &#x3D; np.arange(30).reshape((10, 3))\nX\narray([[ 0,  1,  2],\n       [ 3,  4,  5],\n       [ 6,  7,  8],\n       [ 9, 10, 11],\n       [12, 13, 14],\n       [15, 16, 17],\n       [18, 19, 20],\n       [21, 22, 23],\n       [24, 25, 26],\n       [27, 28, 29]])\nX[:,1] &#x3D; 1\nX\narray([[ 0,  1,  2],\n       [ 3,  1,  5],\n       [ 6,  1,  8],\n       [ 9,  1, 11],\n       [12,  1, 14],\n       [15,  1, 17],\n       [18,  1, 20],\n       [21,  1, 23],\n       [24,  1, 26],\n       [27,  1, 29]])\nfrom sklearn.feature_selection import VarianceThreshold\nvt &#x3D; VarianceThreshold()\nXt &#x3D; vt.fit_transform(X)\nXt\narray([[ 0,  2],\n       [ 3,  5],\n       [ 6,  8],\n       [ 9, 11],\n       [12, 14],\n       [15, 17],\n       [18, 20],\n       [21, 23],\n       [24, 26],\n       [27, 29]])\nprint(vt.variances_)\n[27.  0. 27.]\nX &#x3D; adult[[&quot;Age&quot;, &quot;Education-Num&quot;, &quot;Capital-gain&quot;, &quot;Capital-loss&quot;, &quot;Hours-per-week&quot;]].values\ny &#x3D; (adult[&quot;Earnings-Raw&quot;] &#x3D;&#x3D; &#39; &gt;50K&#39;).values\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\ntransformer &#x3D; SelectKBest(score_func&#x3D;chi2, k&#x3D;3)\nXt_chi2 &#x3D; transformer.fit_transform(X, y)\nprint(transformer.scores_)\n[8.60061182e+03 2.40142178e+03 8.21924671e+07 1.37214589e+06\n 6.47640900e+03]\nfrom scipy.stats import pearsonr\n\ndef multivariate_pearsonr(X, y):\n    scores, pvalues &#x3D; [], []\n    for column in range(X.shape[1]):\n        cur_score, cur_p &#x3D; pearsonr(X[:,column], y)\n        scores.append(abs(cur_score))\n        pvalues.append(cur_p)\n    return (np.array(scores), np.array(pvalues))\ntransformer &#x3D; SelectKBest(score_func&#x3D;multivariate_pearsonr, k&#x3D;3)\nXt_pearson &#x3D; transformer.fit_transform(X, y)\nprint(transformer.scores_)\n[0.2340371  0.33515395 0.22332882 0.15052631 0.22968907]\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import cross_val_score\nclf &#x3D; DecisionTreeClassifier(random_state&#x3D;14)\nscores_chi2 &#x3D; cross_val_score(clf, Xt_chi2, y, scoring&#x3D;&#39;accuracy&#39;)\nscores_pearson &#x3D; cross_val_score(clf, Xt_pearson, y, scoring&#x3D;&#39;accuracy&#39;)\nprint(&quot;Chi2 performance: &#123;0:.3f&#125;&quot;.format(scores_chi2.mean()))\nprint(&quot;Pearson performance: &#123;0:.3f&#125;&quot;.format(scores_pearson.mean()))\nChi2 performance: 0.829\nPearson performance: 0.772\nfrom sklearn.base import TransformerMixin\nfrom sklearn.utils import as_float_array\n\nclass MeanDiscrete(TransformerMixin):\n    def fit(self, X, y&#x3D;None):\n        X &#x3D; as_float_array(X)\n        self.mean &#x3D; np.mean(X, axis&#x3D;0)\n        return self\n\n    def transform(self, X):\n        X &#x3D; as_float_array(X)\n        assert X.shape[1] &#x3D;&#x3D; self.mean.shape[0]\n        return X &gt; self.mean\nmean_discrete &#x3D; MeanDiscrete()\nX_mean &#x3D; mean_discrete.fit_transform(X)\n%%file adult_tests.py\nimport numpy as np\nfrom numpy.testing import assert_array_equal\n\ndef test_meandiscrete():\n    X_test &#x3D; np.array([[ 0,  2],\n                        [ 3,  5],\n                        [ 6,  8],\n                        [ 9, 11],\n                        [12, 14],\n                        [15, 17],\n                        [18, 20],\n                        [21, 23],\n                        [24, 26],\n                        [27, 29]])\n    mean_discrete &#x3D; MeanDiscrete()\n    mean_discrete.fit(X_test)\n    assert_array_equal(mean_discrete.mean, np.array([13.5, 15.5]))\n    X_transformed &#x3D; mean_discrete.transform(X_test)\n    X_expected &#x3D; np.array([[ 0,  0],\n                            [ 0, 0],\n                            [ 0, 0],\n                            [ 0, 0],\n                            [ 0, 0],\n                            [ 1, 1],\n                            [ 1, 1],\n                            [ 1, 1],\n                            [ 1, 1],\n                            [ 1, 1]])\n    assert_array_equal(X_transformed, X_expected)\nWriting adult_tests.py\ntest_meandiscrete()\n---------------------------------------------------------------------------\n\nNameError                                 Traceback (most recent call last)\n\nCell In [41], line 1\n----&gt; 1 test_meandiscrete()\n\n\nNameError: name &#39;test_meandiscrete&#39; is not defined\nfrom sklearn.pipeline import Pipeline\n\npipeline &#x3D; Pipeline([(&#39;mean_discrete&#39;, MeanDiscrete()),\n                     (&#39;classifier&#39;, DecisionTreeClassifier(random_state&#x3D;14))])\nscores_mean_discrete &#x3D; cross_val_score(pipeline, X, y, scoring&#x3D;&#39;accuracy&#39;)\nprint(&quot;Mean Discrete performance: &#123;0:.3f&#125;&quot;.format(scores_mean_discrete.mean()))\nMean Discrete performance: 0.803\n\n第二部分数据集：\n\n\n\n\n\n\n\n\n\nhttp://archive.ics.uci.edu/ml/datasets/Internet+Advertisements\n用神经网络破解验证码import numpy as np\nfrom PIL import Image, ImageDraw, ImageFont\nfrom skimage import transform as tf\ndef create_captcha(text, shear&#x3D;0, size&#x3D;(100,24)):\n    im &#x3D; Image.new(&quot;L&quot;, size, &quot;black&quot;)\n    draw &#x3D; ImageDraw.Draw(im)\n    font &#x3D; ImageFont.truetype(r&quot;Coval.otf&quot;, 22)\n    draw.text((2, 2), text, fill&#x3D;1, font&#x3D;font)\n    image &#x3D; np.array(im)\n    affine_tf &#x3D; tf.AffineTransform(shear&#x3D;shear)\n    image &#x3D; tf.warp(image, affine_tf)\n    return image &#x2F; image.max()\n%matplotlib inline\nfrom matplotlib import pyplot as plt\nimage &#x3D; create_captcha(&quot;GENE&quot;, shear&#x3D;0.3)\nplt.imshow(image, cmap&#x3D;&quot;gray&quot;)\n&lt;matplotlib.image.AxesImage at 0x1b3b5c3d060&gt;\n​\n​    \nfrom skimage.measure import label, regionprops\n\ndef segment_image(image):\n    labeled_image &#x3D; label(image &gt; 0)\n    subimages &#x3D; []\n    for region in regionprops(labeled_image):\n        start_x, start_y, end_x, end_y &#x3D; region.bbox\n        subimages.append(image[start_x:end_x, start_y:end_y])\n    if len(subimages) &#x3D;&#x3D; 0:\n        return [image,]\n    return subimages\nsubimages &#x3D; segment_image(image)\nf, axes &#x3D; plt.subplots(1, len(subimages), figsize&#x3D;(10, 3))\nfor i in range(len(subimages)):\n    axes[i].imshow(subimages[i], cmap&#x3D;&quot;gray&quot;)\n​\n​    \nfrom sklearn.utils import check_random_state\nrandom_state &#x3D; check_random_state(14)\nletters &#x3D; list(&quot;ACBDEFGHIJKLMNOPQRSTUVWXYZ&quot;)\nshear_values &#x3D; np.arange(0, 0.5, 0.05)\ndef generate_sample(random_state&#x3D;None):\n    random_state &#x3D; check_random_state(random_state)\n    letter &#x3D; random_state.choice(letters)\n    shear &#x3D; random_state.choice(shear_values)\n    return create_captcha(letter, shear&#x3D;shear, size&#x3D;(20, 20)), letters.index(letter)\nimage, target &#x3D; generate_sample(random_state)\nplt.imshow(image, cmap&#x3D;&quot;gray&quot;)\nprint(&quot;The target for this image is: &#123;0&#125;&quot;.format(target))\nThe target for this image is: 11\n\n​    \ndataset, targets &#x3D; zip(*(generate_sample(random_state) for i in\nrange(3000)))\ndataset &#x3D; np.array(dataset, dtype&#x3D;&#39;float&#39;)\ntargets &#x3D; np.array(targets)\nfrom sklearn.preprocessing import OneHotEncoder\nonehot &#x3D; OneHotEncoder()\ny &#x3D; onehot.fit_transform(targets.reshape(targets.shape[0],1))\ny &#x3D; y.todense()\nfrom skimage.transform import resize\ndataset &#x3D; np.array([resize(segment_image(sample)[0], (20, 20)) for\nsample in dataset])\nX &#x3D; dataset.reshape((dataset.shape[0], dataset.shape[1] *\ndataset.shape[2]))\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test &#x3D; \\\ntrain_test_split(X, y, train_size&#x3D;0.9)\n\nfrom pybrain.datasets import SupervisedDataSet\n\n\ntraining &#x3D; SupervisedDataSet(X.shape[1], y.shape[1])\nfor i in range(X_train.shape[0]):\n    training.addSample(X_train[i], y_train[i])\ntesting &#x3D; SupervisedDataSet(X.shape[1], y.shape[1])\nfor i in range(X_test.shape[0]):\n    testing.addSample(X_test[i], y_test[i])\nimport scipy\nfrom pybrain.tools.shortcuts import buildNetwork\nnet &#x3D; buildNetwork(X.shape[1], 100, y.shape[1], bias&#x3D;True)\nfrom pybrain.supervised.trainers import BackpropTrainer\ntrainer &#x3D; BackpropTrainer(net, training, learningrate&#x3D;0.01,\nweightdecay&#x3D;0.01)\ntrainer.trainEpochs(epochs&#x3D;20)\npredictions &#x3D; trainer.testOnClassData(dataset&#x3D;testing)\n下面这行代码micro部分是添加处理数据问题\nfrom sklearn.metrics import f1_score\nprint(&quot;F-score: &#123;0:.2f&#125;&quot;.format(f1_score(predictions, y_test.argmax(axis&#x3D;1), average&#x3D;&#39;weighted&#39;)))\nF-score: 0.89\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test.argmax(axis&#x3D;1), predictions))\n              precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00         8\n           1       0.72      1.00      0.84        13\n           2       1.00      0.83      0.91        12\n           3       1.00      1.00      1.00        12\n           4       0.00      0.00      0.00        13\n           5       0.41      1.00      0.58         9\n           6       1.00      1.00      1.00        12\n           7       1.00      1.00      1.00        12\n           8       0.36      1.00      0.53         9\n           9       0.00      0.00      0.00        10\n          10       1.00      1.00      1.00        13\n          11       0.33      0.14      0.20         7\n          12       0.92      0.92      0.92        13\n          13       0.95      1.00      0.98        20\n          14       0.91      1.00      0.95        10\n          15       0.90      1.00      0.95        19\n          16       1.00      0.50      0.67        12\n          17       1.00      1.00      1.00        13\n          18       1.00      1.00      1.00        10\n          19       1.00      1.00      1.00        11\n          20       0.00      0.00      0.00         2\n          21       1.00      0.93      0.96        14\n          22       1.00      1.00      1.00        12\n          23       1.00      1.00      1.00        13\n          24       1.00      1.00      1.00         8\n          25       1.00      1.00      1.00        13\n\n    accuracy                           0.86       300\n   macro avg       0.79      0.82      0.79       300\nweighted avg       0.84      0.86      0.84       300\n​    \nD:\\coder\\randomnumbers\\venv\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\nD:\\coder\\randomnumbers\\venv\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\nD:\\coder\\randomnumbers\\venv\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\ndef predict_captcha(captcha_image, neural_network):\n    subimages &#x3D; segment_image(captcha_image)\n    predicted_word &#x3D; &quot;&quot;\n    for subimage in subimages:\n        subimage &#x3D; resize(subimage, (20, 20))\n        outputs &#x3D; net.activate(subimage.flatten())\n        prediction &#x3D; np.argmax(outputs)\n        predicted_word +&#x3D; letters[prediction]\n    return predicted_word\nword &#x3D; &quot;GENE&quot;\ncaptcha &#x3D; create_captcha(word, shear&#x3D;0.2)\nprint(predict_captcha(captcha, net))\nANAA\ndef test_prediction(word, net, shear&#x3D;0.2):\n    captcha &#x3D; create_captcha(word, shear&#x3D;shear)\n    prediction &#x3D; predict_captcha(captcha, net)\n    prediction &#x3D; prediction[:4]\n    return word &#x3D;&#x3D; prediction, word, prediction\nfrom nltk.corpus import words\nimport nltk\n\n\n\nvalid_words &#x3D; [word.upper() for word in words.words() if len(word) &#x3D;&#x3D; 4]\nnum_correct &#x3D; 0\nnum_incorrect &#x3D; 0\nfor word in valid_words:\n    correct, word, prediction &#x3D; test_prediction(word, net, shear&#x3D;0.2)\n    if correct:\n        num_correct +&#x3D; 1\n    else:\n        num_incorrect +&#x3D; 1\nprint(&quot;Number correct is &#123;0&#125;&quot;.format(num_correct))\nprint(&quot;Number incorrect is &#123;0&#125;&quot;.format(num_incorrect))\nNumber correct is 57\nNumber incorrect is 5456\nfrom sklearn.metrics import confusion_matrix\ncm &#x3D; confusion_matrix(np.argmax(y_test, axis&#x3D;1), predictions)\nplt.figure(figsize&#x3D;(20,20))\nplt.imshow(cm, cmap&#x3D;&quot;Blues&quot;)\n&lt;matplotlib.image.AxesImage at 0x1b3ba7a4f40&gt;\n\n\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/073c0b14c1354724b2b59a6b9ae4e3f3.png)\nfrom nltk.metrics import edit_distance\nsteps &#x3D; edit_distance(&quot;STEP&quot;, &quot;STOP&quot;)\nprint(&quot;The number of steps needed is: &#123;0&#125;&quot;.format(steps))\nThe number of steps needed is: 1\ndef compute_distance(prediction, word):\n    return len(prediction) - sum(prediction[i] &#x3D;&#x3D; word[i] for i in range(len(prediction)))\nfrom operator import itemgetter\ndef improved_prediction(word, net, dictionary, shear&#x3D;0.2):\n    captcha &#x3D; create_captcha(word, shear&#x3D;shear)\n    prediction &#x3D; predict_captcha(captcha, net)\n    prediction &#x3D; prediction[:4]\n    if prediction not in dictionary:\n        distances &#x3D; sorted([(word, compute_distance(prediction, word))\n                            for word in dictionary],\n                           key&#x3D;itemgetter(1))\n        best_word &#x3D; distances[0]\n        prediction &#x3D; best_word[0]\n    return word &#x3D;&#x3D; prediction, word, prediction\nnum_correct &#x3D; 0\nnum_incorrect &#x3D; 0\nfor word in valid_words:\n    correct, word, prediction &#x3D; improved_prediction (word, net, valid_words, shear&#x3D;0.2)\n    if correct:\n        num_correct +&#x3D; 1\n    else:\n        num_incorrect +&#x3D; 1\nprint(&quot;Number correct is &#123;0&#125;&quot;.format(num_correct))\nprint(&quot;Number incorrect is &#123;0&#125;&quot;.format(num_incorrect))\nNumber correct is 123\nNumber incorrect is 5390\n\n","slug":"数据挖掘1","date":"2022-11-03T14:56:49.000Z","categories_index":"机器学习","tags_index":"数据挖掘","author_index":"Algernon"},{"id":"424355acc1981b780ee62e0097527e8c","title":"【GO语言编程】（三）","content":"方法方法** 其实就是一个函数，在 func 这个关键字和方法名中间加入了一个特殊的接收器类型。接收器可以是结构体类型或者是非结构体类型。接收器是可以在方法的内部访问的。\nGO\nfunc (t Type) methodName(parameterList) returnList&#123;\n&#125;\n上面的代码片段创建了一个接收器类型为 Type 的方法 methodName 。\n实例绑定GO\npackage main\n\nimport &quot;fmt&quot;\n\n&#x2F;&#x2F; Lesson 定义一个名为 Lesson 的结构体\ntype Lesson struct &#123;\n\tName   string\n\tTarget string\n&#125;\n\n&#x2F;&#x2F; PrintInfo 定义一个与 Lesson 的绑定的方法\nfunc (lesson Lesson) PrintInfo() &#123;\n\tfmt.Println(&quot;name:&quot;, lesson.Name)\n\tfmt.Println(&quot;target:&quot;, lesson.Target)\n&#125;\n\nfunc main() &#123;\n\tl :&#x3D; Lesson&#123;\n\t\tName:   &quot;可爱电子羊&quot;,\n\t\tTarget: &quot;咖喱饭真好吃&quot;,\n\t&#125;\n\tl.PrintInfo()\n&#125;\n\n上面的程序中定义了一个与结构体 Lesson 绑定的方法 PrintInfo() ，其中 PrintInfo 是方法名， (lesson Lesson) 表示将此方法与 Lesson 的实例绑定，这里我们把 Lesson 称为方法的接收者，而 lesson 表示实例本身，相当于 Python 中的 self ，Java 中的 this。\n当然，你可以把上面程序的方法改成一个函数，如下：\nGO\npackage main\n\nimport &quot;fmt&quot;\n\ntype Lesson struct &#123;\n    Name   string\n    Target string\n&#125;\n\nfunc PrintInfo(lesson Lesson) &#123;\n    fmt.Println(&quot;name:&quot;, lesson.Name)\n    fmt.Println(&quot;target:&quot;, lesson.Target)\n&#125;\n\nfunc main() &#123;\n    lesson :&#x3D; Lesson&#123;\n        Name: &quot;可爱电子羊&quot;,\n        Target: &quot;咖喱饭真好吃&quot;,\n    &#125;\n    PrintInfo(lesson)\n&#125;\n\n运行这个程序，也同样会输出上面一样的答案，那么我们为什么还要用方法呢？因为在 Go 中，相同的名字的方法可以定义在不同的类型上，而相同名字的函数是不被允许的。如果你在上面这个程序添加一个同名函数，就会报错。但是在不同的结构体上面定义同名的方法就是可行的。\nGO\npackage main\n\nimport &quot;fmt&quot;\n\ntype Lesson struct &#123;\n    Name   string\n    Target string\n&#125;\n\nfunc (lesson Lesson) PrintInfo() &#123;\n    fmt.Println(&quot;Lesson name:&quot;, lesson.Name)\n    fmt.Println(&quot;Lesson target:&quot;, lesson.Target)\n&#125;\n\ntype Author struct &#123;\n    Name string\n&#125;\n\nfunc (author Author) PrintInfo() &#123;\n    fmt.Println(&quot;author name:&quot;, author.name)\n&#125;\n\nfunc main() &#123;\n    lesson :&#x3D; Lesson&#123;\n        Name: &quot;电子羊想吃咖喱饭&quot;,\n        Target: &quot;咖喱饭呀咖喱饭&quot;,\n    &#125;\n    lesson.PrintInfo()\n    author :&#x3D; Author&#123;&quot;电子羊&quot;&#125;\n    author.PrintInfo()\n&#125;\n指针接收器与值接收器值接收器和指针接收器之间的区别在于，在指针接收器的方法内部的改变对于调用者是可见的，然而值接收器的方法内部的改变对于调用者是不可见的，所以若要改变实例的属性时，必须使用指针作为方法的接收者。看看下面的例子就知道了：\nGO\npackage main\n\nimport &quot;fmt&quot;\n\n&#x2F;&#x2F; Lesson 定义一个名为 Lesson 的结构体\ntype Lesson struct &#123;\n    Name string\n    Target  string\n    SpendTime int\n&#125;\n\n&#x2F;&#x2F; PrintInfo 定义一个与 Lesson 的绑定的方法\nfunc (lesson Lesson) PrintInfo() &#123;\n    fmt.Println(&quot;name:&quot;, lesson.Name)\n    fmt.Println(&quot;target:&quot;, lesson.Target)\n    fmt.Println(&quot;spendTime:&quot;, lesson.SpendTime)\n&#125;\n\nfunc (lesson Lesson) ChangeLessonName(name string) &#123;\n&#x2F;&#x2F;    lesson.name &#x3D; name\n&#125;\n\n&#x2F;&#x2F; AddSpendTime 定义一个与 Person 的绑定的方法，使 age 值加 n\nfunc (lesson *Lesson) AddSpendTime(n int) &#123;\n    lesson.SpendTime &#x3D; lesson.SpendTime + n\n&#125;\n\nfunc main() &#123;\n    lesson :&#x3D; Lesson&#123;\n        Name: &quot;电子羊想吃咖喱饭&quot;,\n        Target: &quot;咖喱饭呀咖喱饭&quot;,\n        PrintTimes:  1,\n    &#125;\n    fmt.Println(&quot;before change&quot;)\n    lesson.PrintInfo()\n\n    fmt.Println(&quot;after change&quot;)\n    lesson.AddSpendTime(2)\n    lesson.ChangeLessonName(&quot;印度长米搭配孜然羊肉的玛莎拉咖喱饭&quot;)\n    lesson.PrintInfo()\n&#125;\n\n在上面的程序中， AddSpendTime 使用指针接收器最终能改变实例的 SpendTime 值，然而使用值接收器的 ChangeLessonName 最终没有改变实例 Name 的值。\n在方法中使用值接收器 与 在函数中使用值参数当一个函数有一个值参数，它只能接受一个值参数。当一个方法有一个值接收器，它可以接受值接收器和指针接收器。\nGO\npackage main\n\nimport &quot;fmt&quot;\n\ntype Lesson struct &#123;\n    Name string\n    Target  string\n    PrintTimes int\n&#125;\n\nfunc (lesson Lesson) PrintInfo() &#123;\n    fmt.Println(lesson.Name)\n&#125;\n\nfunc PrintInfo(lesson Lesson) &#123;\n    fmt.Println(lesson.name)\n&#125;\n\nfunc main() &#123;\n    lesson :&#x3D; Lesson&#123;&quot;Go语言微服务核心架构22讲&quot;&#125;\n    PrintInfo(lesson)\n    lesson.PrintInfo()\n\n    bPtr :&#x3D; &amp;lesson\n    &#x2F;&#x2F;PrintInfo(bPtr) &#x2F;&#x2F; error\n    bPtr.PrintInfo()\n&#125;\n在上面的程序中，使用值参数 PrintInfo(lesson) 来调用这个函数是合法的，使用值接收器来调用 lesson.PrintInfo() 也是合法的。\n然后在程序中我们创建了一个指向 Lesson 的指针 bPtr ，通过使用指针接收器来调用 bPtr.PrintInfo() 是合法的，但使用值参数调用 PrintInfo(bPtr) 是非法的。\n在非结构体上的方法不仅可以在结构体类型上定义方法，也可以在非结构体类型上定义方法，但是有一个问题。为了在一个类型上定义一个方法，方法的接收器类型定义和方法的定义应该在同一个包中。例如：\nGO\npackage main\n\nimport &quot;fmt&quot;\n\ntype myInt int\n\nfunc (a myInt) add(b myInt) myInt &#123;\n    return a + b\n&#125;\n\nfunc main() &#123;\n    var x myInt &#x3D; 50\n    var y myInt &#x3D; 7\n    fmt.Println(x.add(y))   &#x2F;&#x2F; 57\n&#125;\n接口在 Go 语言中， 接口 就是方法签名(Method Signature)的集合。在面向对象的领域里，接口定义一个对象的行为，接口只指定了对象应该做什么，至于如何实现这个行为，则由对象本身去确定。当一个类型实现了接口中的所有方法，我们称它实现了该接口。接口指定了一个类型应该具有的方法，并由该类型决定如何实现这些方法。\n接口的定义使用 type 关键字可以定义接口：\nGO\ntype interface_name interface &#123;\n    method()\n&#125;\n接口的实现创建类型或者结构体，并为其绑定接口定义的方法，接收者为该类型或结构体，方法名为接口中定义的方法名，这样就说该类型或者结构体实现了该接口。例如：\nGO\npackage main\n\nimport &quot;fmt&quot;\n\ntype Study interface &#123;\n    learn()\n&#125;\n\ntype Student struct &#123;\n    name string\n&#125;\n\nfunc (s Student) learn() &#123;\n    fmt.Printf(&quot;%s 在读 %s&quot;, s.name, s.book)\n&#125;\n\nfunc main() &#123;\n    student1 :&#x3D; Student&#123;\n        name: &quot;张三&quot;,\n        book: &quot;《Go语言极简一本通》&quot;,\n    &#125;\n    student1.learn()\n&#125;\n上面的程序定义了一个名为 Study 的接口，接口中有未实现的方法 learn() ，这里还定义了名为 Student 的结构体，其绑定了方法 learn() ，也就隐式实现了 Study 接口，实现的内容是打印语句。\n上面的例子使用了值接受者实现接口，下面的例子使用了指针接受者实现接口。\nGO\npackage main\n\nimport &quot;fmt&quot;\n\ntype Study interface &#123;\n    learn()\n&#125;\n\n...\n\ntype Worker struct &#123;\n    name string\n    book string\n    by   string\n&#125;\n\nfunc (w *Worker) learn() &#123;\n    fmt.Printf(&quot;%s 在读 %s,通过方式 %s&quot;, w.name, w.book, w.by)\n&#125;\n\nfunc main() &#123;\n    var s1 Study\n    var s2 Study\n\n    student2 :&#x3D; Student&#123;\n        name: &quot;李四&quot;,\n        book: &quot;《Go语言极简一本通》&quot;,\n    &#125;\n    s1 &#x3D; student2\n    s1.learn()\n\n    student3 :&#x3D; Student&#123;\n        name: &quot;王五&quot;,\n        book: &quot;Go语言微服务架构核心22讲&quot;,\n    &#125;\n    s1 &#x3D; &amp;student3\n    s1.learn()\n\n    worker1 :&#x3D; Worker&#123;\n        name: &quot;老王&quot;,\n        book: &quot;从0到Go语言微服务架构师&quot;,\n        by:   &quot;视频&quot;,\n    &#125;\n    &#x2F;&#x2F; s2 &#x3D; worker1 &#x2F;&#x2F; error\n    s2 &#x3D; &amp;worker1\n    s2.learn()\n&#125;\n该程序定义了结构体 Student ，使用其作为值接受者实现 Study 接口。student2 的类型为 Student ， student2 赋值给 s1 ，由于 Student 实现了接口变量 s1 所以会有输出。而接下来 s1 又被赋值为 &amp;student3 ，同样有输出。接下来的结构体 Worker 使用指针接受者实现 Study 接口。worker1 的类型为 Worker ， s2 被赋值为 &amp;worker1 ，所以会有输出。但如果把 s2 赋值为 worker1 会报错，对于使用指针接受者的方法，用一个指针或者一个可取得地址的值来调用都是合法的。但接口中存储的具体值(Concrete Value)并不能取到地址，因此对于编译器无法自动获取 worker1 的地址，于是程序报错。\n接口实现多态使用接口可以实现多态，例如下面的程序，定义了名为 Study 的接口，接口中有方法 learn() 。程序中还定义了结构体 Student 和 Worker ，分别实现了 Study 接口，Student 的 learn name: &quot;李四&quot;, book: &quot;《Go语言极简一本通》&quot; 而 Worker 的 learn 为 name: &quot;张三&quot;,book: &quot;从0到Go语言微服务架构师&quot;,by: &quot;视频&quot; ，利用的接口实现了不同的功能，这就是多态。\nGO\npackage main\n\nfunc main() &#123;\n    ...\n    s2.learn()\n    worker1.learn()\n&#125;\n接口的内部表示可以把接口的内部看做 (type, value)。type 是接口底层的具体类型(Concrete Type)，而 value 是具体类型的值。\nGO\npackage main\n\nimport &quot;fmt&quot;\n\n...\n\nfunc ShowInterface(s Study) &#123;\n    fmt.Printf(&quot;接口类型: %T\\n,接口值: %v\\n&quot;, s, s)\n&#125;\n\nfunc main() &#123;\n    var s Study\n    s &#x3D; student2\n    ShowInterface(s)\n    s.learn()\n&#125;\n在上面的程序中，定义了 Study 接口，其中有 learn() 方法，结构体 Student 实现了该接口。使用 s = student2 语句我们把 student2 ( Student 类型)赋值给了 s ( Study 类型)，现在打印出 Study 的具体类型为 Student ，而 student2 的值为 name: &quot;李四&quot;, book: &quot;《Go语言极简一本通》&quot; 。\n空接口空接口 是特殊形式的接口类型，没有定义任何方法的接口就称为空接口，可以说所有类型都至少实现了空接口，空接口表示为 interface&#123;&#125; 。例如，我们之前的写过的空接口参数函数，可以接受任何类型的参数：\nGO\npackage main\n\nimport &quot;fmt&quot;\n\nfunc ShowType(i interface&#123;&#125;) &#123;\n    fmt.Printf(&quot;类型: %T, 值: %v\\n&quot;, i, i)\n&#125;\n\nfunc main() &#123;\n    str :&#x3D; &quot;从0到Go语言微服务架构师&quot;\n    ShowType(str)\n    num :&#x3D; 3.14\n    ShowType(num)\n&#125;\n上面的程序中我们定义了函数 ShowType 使用空接口作为参数，所以可以给这个函数传递任何类型的参数。\n通过上面的例子不难发现接口都有两个属性，一个是值，而另一个是类型。对于空接口来说，这两个属性都为 nil ：\nGO\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n    var i interface&#123;&#125;\n    fmt.Printf(&quot;Type: %T, Value: %v&quot;, i, i)\n    &#x2F;&#x2F; Type: &lt;nil&gt;, Value: &lt;nil&gt;\n&#125;\n除了上面讲到的使用空接口作为函数参数的用法，空接口还有以下两种用法。\n直接使用 interface&#123;&#125; 作为类型声明一个实例，这个实例就能承载任何类型的值：\nGO\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n    var i interface&#123;&#125;\n\n    i &#x3D; &quot;从0到Go语言微服务架构师&quot;\n    fmt.Println(i) &#x2F;&#x2F; Let&#39;s go\n\n    i &#x3D; 3.14\n    fmt.Println(i) &#x2F;&#x2F; 3.14\n&#125;\n我们也可以定义一个接收任何类型的 array 、 slice 、 map 、 strcut 。例如：\nGO\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n    x :&#x3D; make([]interface&#123;&#125;, 3)\n    x[0] &#x3D; &quot;从0到Go语言微服务架构师&quot;\n    x[1] &#x3D; 3.14\n    x[2] &#x3D; []int&#123;1, 2, 3&#125;\n    for _, value :&#x3D; range x &#123;\n        fmt.Println(value)\n    &#125;\n&#125;\n空接口可以承载任何值，但是空接口类型的对象是不能赋值给另一个固定类型对象的。\nGO\npackage main\n\nfunc main() &#123;\n    var num &#x3D; 1\n    var i interface&#123;&#125; &#x3D; num\n    var str string &#x3D; i &#x2F;&#x2F; error\n&#125;\n当空接口承载数组和切片后，该对象无法再进行切片。\nGO\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n    var s &#x3D; []int&#123;1, 2, 3&#125;\n\n    var i interface&#123;&#125; &#x3D; s\n\n    var s2 &#x3D; i[1:2] &#x2F;&#x2F; error\n    fmt.Println(s2)\n&#125;\n类型断言类型断言用于提取接口的底层值(Underlying Value)。使用 interface.(Type) 可以获取接口的底层值，其中接口 interface 的具体类型是 Type 。\nGO\npackage main\n\nimport &quot;fmt&quot;\n\nfunc assert(i interface&#123;&#125;) &#123;\n    value, ok :&#x3D; i.(int)\n    fmt.Println(value, ok)\n&#125;\n\nfunc main() &#123;\n    var x interface&#123;&#125; &#x3D; 3\n    assert(x)\n    var y interface&#123;&#125; &#x3D; &quot;从0到Go语言微服务架构师&quot;\n    assert(y)\n&#125;\n类型选择类型选择用于将接口的具体类型与 case 语句所指定的类型进行比较。它其实就是一个 switch 语句，但在 switch 后面跟的是 i.(type) ，并且每个 case 后面跟的是类型。\nGO\npackage main\n\nimport &quot;fmt&quot;\n\nfunc getTypeValue(i interface&#123;&#125;) &#123;\n    switch i.(type) &#123;\n    case int:\n        fmt.Printf(&quot;Type: int, Value: %d\\n&quot;, i.(int))\n    case string:\n        fmt.Printf(&quot;Type: string, Value: %s\\n&quot;, i.(string))\n    default:\n        fmt.Printf(&quot;Unknown type\\n&quot;)\n    &#125;\n&#125;\n\nfunc main() &#123;\n    getTypeValue(300)\n    getTypeValue(&quot;从0到Go语言微服务架构师&quot;)\n    getTypeValue(true)\n&#125;\n实现多个接口类型或者结构体可以实现多个接口，例如：\nGO\npackage main\n\nimport &quot;fmt&quot;\n\n...\n\n\ntype Happy interface &#123;\n\trest()\n&#125;\n\nfunc (s Student) rest() &#123;\n    fmt.Printf(&quot;%s 放学了，出去玩...&quot;, s.name)\n&#125;\n\nfunc (w *Worker) rest() &#123;\n    fmt.Printf(&quot;%s 下班了，吃大餐去...&quot;, w.name)\n&#125;\n\nfunc main() &#123;\n    worker2 :&#x3D; Worker&#123;\n        name: &quot;小明&quot;,\n        book: &quot;从0到Go语言微服务架构师&quot;,\n        by:   &quot;视频&quot;,\n    &#125;\n    worker2.learn()\n    worker2.rest()\n&#125;\n接口的嵌套虽然在 Go 中没有继承机制，但可以通过接口的嵌套实现类似功能。例如：\nGO\npackage main\n\nimport &quot;fmt&quot;\n\n...\n\ntype Life interface &#123;\n    Study\n    Happy\n&#125;\n\nfunc main() &#123;\n    worker2 :&#x3D; Worker&#123;\n        name: &quot;小明&quot;,\n        book: &quot;从0到Go语言微服务架构师&quot;,\n        by:   &quot;视频&quot;,\n    &#125;\n    worker2.learn()\n    worker2.rest()\n&#125;\ngo 协程Go 语言的 协程(Groutine) 是与其他函数或方法一起并发运行的工作方式。协程可以看作是轻量级线程。与线程相比，创建一个协程的成本很小。因此在 Go 应用中，常常会看到会有很多协程并发地运行。\n启动一个 go 协程调用函数或者方法时，如果在前面加上关键字 go ，就可以让一个新的 Go 协程并发地运行。\nGO\n&#x2F;&#x2F; 定义一个函数\nfunc functionName(parameterList) &#123;\n    code\n&#125;\n\n&#x2F;&#x2F; 执行一个函数\nfunctionName(parameterList)\n\n&#x2F;&#x2F; 开启一个协程执行这个函数\ngo functionName(parameterList)\n下面是启动一个协程的例子， go PrintInfo() ， PrintInfo() 函数与 main() 函数会并发执行，主函数运行在一个特殊的协程上，这个协程称之为 主协程(Main Goroutine) 。\n启动一个新的协程时，协程的调用会立即返回。与函数不同，程序控制不会去等待 Go 协程执行完毕。在调用 Go 协程之后，程序控制会立即返回到代码的下一行，忽略该协程的任何返回值。如果 Go 主协程终止，则程序终止，于是其他 Go 协程也会终止。为了让新的协程能继续运行，我们在 main() 函数添加了 time.Sleep(1 * time.Second) 使主协程休眠 1 秒，但这种做法并不推荐，这里只是为了演示而添加。\nGO\npackage main\n\nimport (\n &quot;fmt&quot;\n &quot;time&quot;\n)\n\nfunc PrintInfo() &#123;\n fmt.Println(&quot;从0到Go语言微服务架构师&quot;)\n&#125;\n\nfunc main() &#123;\n &#x2F;&#x2F; 开启一个协程执行 PrintInfo 函数\n go PrintInfo()\n &#x2F;&#x2F; 使主协程休眠 1 秒\n time.Sleep(1 * time.Second)\n &#x2F;&#x2F; 打印 main\n fmt.Println(&quot;main&quot;)\n&#125;\n\n启动多个 Go 协程通过下面的例子，可以观察到两个协程就如两个线程一样，并发执行：\nGO\npackage main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;time&quot;\n)\n\nfunc PrintNum(num int) &#123;\n\tfor i :&#x3D; 0; i &lt; 3; i++ &#123;\n\t\tfmt.Println(num)\n\t\t&#x2F;&#x2F; 避免观察不到并发效果 加个休眠\n\t\ttime.Sleep(100 * time.Millisecond)\n\t&#125;\n&#125;\n\nfunc main() &#123;\n\t&#x2F;&#x2F; 开启 1 号协程\n\tgo PrintNum(1)\n\t&#x2F;&#x2F; 开启 2 号协程\n\tgo PrintNum(2)\n\t&#x2F;&#x2F; 使主协程休眠 1 秒\n\ttime.Sleep(time.Second)\n&#125;\n\nchannel 通道通道(channel) ，就是一个管道，可以想像成 Go 协程之间通信的管道。它是一种队列式的数据结构，遵循先入先出的规则。\n通道的声明每个通道都只能传递一种数据类型的数据，在你声明的时候，我们要指定通道的类型。chan Type 表示 Type 类型的通道。通道的零值为 nil 。\nGO\nvar channel_name chan channel_types\n下面的语句声明了一个类型为 string 的通道 nameChan ，该通道 nameChan 的值为 nil 。\nGO\nvar ch chan string\n通道的初始化声明完通道后，通道的值为 nil ，我们不能直接使用，必须先使用 make 函数对通道进行初始化操作。\nGO\nch &#x3D; make(chan channel_type)\n使用下面的语句我们可以对上面声明过的通道 ch 进行初始化：\nGO\nch &#x3D; make(chan string)\n这样，我们就已经定义好了一个 string 类型的通道 nameChan 。当然，也可以使用简短声明语句一次性定义一个通道：\nGO\nch :&#x3D; make(chan string)\n使用通道发送和接收数据往通道发送数据使用的是下面的语法：\nGO\n&#x2F;&#x2F; 把 data 数据发送到 channel_name 通道中\n&#x2F;&#x2F; 即把 data 数据写入到 channel_name 通道中\nchannel_name &lt;- data\n从通道接收数据使用的是下面的语法：\nGO\n&#x2F;&#x2F; 从 channel_name 通道中接收数据到 value\n&#x2F;&#x2F; 即从 channel_name 通道中读取数据到 value\nvalue :&#x3D; &lt;- channel_name\n通道旁的箭头方向指定了是发送数据还是接收数据。箭头指向通道，代表数据写入到通道中；箭头往通道指向外，代表从通道读数据出去。\n下面的例子演示了通道的使用：\npackage main\n\nimport (\n\t&quot;fmt&quot;\n)\n\nfunc PrintChan(c chan string) &#123;\n\t&#x2F;&#x2F; 往通道传入数据 &quot;从0到Go语言微服务架构师&quot;\n\tc &lt;- &quot;赤土之王与三朝圣者&quot;\n&#125;\n\nfunc main() &#123;\n\t&#x2F;&#x2F; 创建一个通道\n\tch :&#x3D; make(chan string)\n\n\tfmt.Println(&quot;3.1版本更新&quot;)\n\t&#x2F;&#x2F; 开启协程\n\tgo PrintChan(ch)\n\t&#x2F;&#x2F; 从通道接收数据\n\trec :&#x3D; &lt;-ch\n\t&#x2F;&#x2F; 打印从通道接收到的数据\n\tfmt.Println(rec)\n\t&#x2F;&#x2F; 打印 &quot;学习目标:全面掌握Go语言微服务落地，代码级一次性解决微服务和分布式系统。&quot;\n\tfmt.Println(&quot;虚空劫灰往事书&quot;)\n&#125;\n\n\n该程序模拟了两个协程并发调用的场景，在 main 函数中，创建了一个通道，在 main 函数中先打印了 学习课程: ，然后开启协程运行 PrintChan 函数，而 main 函数通过协程接收数据，主协程发生了阻塞，等待通道 ch 发送的数据，在函数中，数据 从0到Go语言微服务架构师 传入通道中，当写入完成时，主协程接收了数据，解除了阻塞状态，打印出从通道接收到的数据 从0到Go语言微服务架构师 ，最后打印 `学习目标:全面掌握 Go 语言微服务落地，代码级一次性解决微服务和分布式系统。Tips: 发送与接收默认是阻塞的\n\n从上面的例子我们知道，如果从通道接收数据没接收完主协程是不会继续执行下去的。当把数据发送到通道时，会在发送数据的语句处发生阻塞，直到有其它协程从通道读取到数据，才会解除阻塞。与此类似，当读取通道的数据时，如果没有其它的协程把数据写入到这个通道，那么读取过程就会一直阻塞着。\n\n通道的关闭对于一个已经使用完毕的通道，我们要将其进行关闭。\nGO\nclose(channel_name)\n这里要注意，对于一个已经关闭的通道如果再次关闭会导致报错，我们可以在接收数据时，判断通道是否已经关闭，从通道读取数据返回的第二个值表示通道是否没被关闭，如果已经关闭，返回值为 false ；如果还未关闭，返回值为 true 。\nGO\nvalue, ok :&#x3D; &lt;- channel_name\n通道的容量与长度我们在前面讲过 make 函数是可以接收两个参数的，同理，创建通道可以传入第二个参数——容量。\n\n当容量为 0 时，说明通道中不能存放数据，在发送数据时，必须要求立马有人接收，否则会报错。此时的通道称之为无缓冲通道。\n当容量为 1 时，说明通道只能缓存一个数据，若通道中已有一个数据，此时再往里发送数据，会造成程序阻塞。利用这点可以利用通道来做锁。\n当容量大于 1 时，通道中可以存放多个数据，可以用于多个协程之间的通信管道，共享资源。\n\n既然通道有容量和长度，那么我们可以通过 cap 函数和 len 函数获取通道的容量和长度。\nGO\npackage main\n\nimport (\n\t&quot;fmt&quot;\n)\n\nfunc main() &#123;\n\t&#x2F;&#x2F; 创建一个通道\n\tc :&#x3D; make(chan int, 3)\n\tfmt.Println(&quot;初始化后：&quot;)\n\tfmt.Println(&quot;cap &#x3D;&quot;, cap(c))\n\tfmt.Println(&quot;len &#x3D;&quot;, len(c))\n\tc &lt;- 1\n\tc &lt;- 2\n\tfmt.Println(&quot;传入两个数后：&quot;)\n\tfmt.Println(&quot;cap &#x3D;&quot;, cap(c))\n\tfmt.Println(&quot;len &#x3D;&quot;, len(c))\n\t&lt;- c\n\tfmt.Println(&quot;取出一个数后：&quot;)\n\tfmt.Println(&quot;cap &#x3D;&quot;, cap(c))\n\tfmt.Println(&quot;len &#x3D;&quot;, len(c))\n&#125;\n\n缓冲通道与无缓冲通道按照是否可缓冲数据可分为：缓冲通道 与 无缓冲通道 。\n无缓冲通道在通道里无法存储数据，接收端必须先于发送端准备好，以确保你发送完数据后，有人立马接收数据，否则发送端就会造成阻塞，原因很简单，通道中无法存储数据。也就是说发送端和接收端是同步运行的。\nGO\nc :&#x3D; make(chan int)\n&#x2F;&#x2F; 或者\nc :&#x3D; make(chan int, 0)\n缓冲通道允许通道里存储一个或多个数据，设置缓冲区后，发送端和接收端可以处于异步的状态。\nGO\nc :&#x3D; make(chan int, 3)\n双向通道到目前为止，上面定义的都是双向通道，既可以发送数据也可以接收数据。例如：\nGO\npackage main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;time&quot;\n)\n\nfunc main() &#123;\n\t&#x2F;&#x2F; 创建一个通道\n\tc :&#x3D; make(chan int)\n\n\t&#x2F;&#x2F; 发送数据\n\tgo func() &#123;\n\t\tfmt.Println(&quot;send: 1&quot;)\n\t\tc &lt;- 1\n\t&#125;()\n\n\t&#x2F;&#x2F; 接收数据\n\tgo func() &#123;\n\t\tn :&#x3D; &lt;- c\n\t\tfmt.Println(&quot;receive:&quot;, n)\n\t&#125;()\n\n\t&#x2F;&#x2F; 主协程休眠\n\ttime.Sleep(time.Millisecond)\n&#125;\n单向通道单向通道只能发送或者接收数据。所以可以具体细分为只读通道和只写通道。\n&lt;-chan 表示只读通道：\nGO\n&#x2F;&#x2F; 定义只读通道\nc :&#x3D; make(chan string)\n&#x2F;&#x2F; 定义类型\ntype Receiver &#x3D; &lt;-chan string\nvar receiver Receiver &#x3D; c\n\n&#x2F;&#x2F; 或者简单写成下面的形式\ntype Receiver &#x3D; &lt;-chan int\nreceiver :&#x3D; make(Receiver)\nchan&lt;- 表示只写通道：\nGO\n&#x2F;&#x2F; 定义只写通道\nc :&#x3D; make(chan int)\n&#x2F;&#x2F; 定义类型\ntype Sender &#x3D; chan&lt;- int\nvar sender Sender &#x3D; c\n\n&#x2F;&#x2F; 或者简单写成下面的形式\ntype Sender &#x3D; chan&lt;- int\nsender :&#x3D; make(Sender)\n下面是一个例子：\nGO\npackage main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;time&quot;\n)\n\n&#x2F;&#x2F; Sender 只写通道类型\ntype Sender &#x3D; chan&lt;- string\n\n&#x2F;&#x2F; Receiver 只读通道类型\ntype Receiver &#x3D; &lt;-chan string\n\nfunc main() &#123;\n\t&#x2F;&#x2F; 创建一个双向通道\n\tvar ch &#x3D; make(chan string)\n\n\t&#x2F;&#x2F; 开启一个协程\n\tgo func() &#123;\n\t\t&#x2F;&#x2F; 只能写通道\n\t\tvar sender Sender &#x3D; ch\n\t\tfmt.Println(&quot;即将学习:&quot;)\n\t\tsender &lt;- &quot;Go语言微服务架构核心22讲&quot;\n\t&#125;()\n\n\t&#x2F;&#x2F; 开启一个协程\n\tgo func() &#123;\n\t\t&#x2F;&#x2F; 只能读通道\n\t\tvar receiver Receiver &#x3D; ch\n\t\tmessage :&#x3D; &lt;-receiver\n\t\tfmt.Println(&quot;开始学习: &quot;, message)\n\t&#125;()\n\n\ttime.Sleep(time.Millisecond)\n&#125;\n\n遍历通道使用 for range 循环可以遍历通道，但在遍历时要确保通道是处于关闭状态，否则循环会被阻塞。\nGO\npackage main\n\nimport (\n   &quot;fmt&quot;\n)\n\nfunc loopPrint(c chan int) &#123;\n   for i :&#x3D; 0; i &lt; 10; i++ &#123;\n      c &lt;- i\n   &#125;\n   &#x2F;&#x2F; 记得要关闭通道\n   &#x2F;&#x2F; 否则主协程遍历完不会结束，而会阻塞\n   close(c)\n&#125;\n\nfunc main() &#123;\n   &#x2F;&#x2F; 创建一个通道\n   var ch2 &#x3D; make(chan int, 5)\n   go loopPrint(ch2)\n   for v :&#x3D; range ch2 &#123;\n      fmt.Println(v)\n   &#125;\n&#125;\n用通道做锁上面讲过，当通道容量为 1 时，说明通道只能缓存一个数据，若通道中已有一个数据，此时再往里发送数据，会造成程序阻塞。例如：\nGO\npackage main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;time&quot;\n)\n\n&#x2F;&#x2F; 由于 x &#x3D; x+1 不是原子操作\n&#x2F;&#x2F; 所以应避免多个协程对 x 进行操作\n&#x2F;&#x2F; 使用容量为 1 的通道可以达到锁的效果\nfunc increment(ch chan bool, x *int) &#123;\n\tch &lt;- true\n\t*x &#x3D; *x + 1\n\t&lt;- ch\n&#125;\n\nfunc main() &#123;\n\tch3 :&#x3D; make(chan bool, 1)\n\tvar x int\n\tfor i :&#x3D; 0; i &lt; 10000; i++ &#123;\n\t\tgo increment(ch3, &amp;x)\n\t&#125;\n\ttime.Sleep(time.Millisecond)\n\tfmt.Println(&quot;x &#x3D;&quot;, x)\n&#125;\n死锁讲完了锁，不得不提死锁。当协程给一个通道发送数据时，照理说会有其他 Go 协程来接收数据。如果没有的话，程序就会在运行时触发 panic ，形成死锁。同理，当有协程等着从一个通道接收数据时，我们期望其他的 Go 协程会向该通道写入数据，要不然程序也会触发 panic 。\nGO\npackage main\n\nfunc main() &#123;\n\tch :&#x3D; make(chan bool)\n\tch &lt;- true\n&#125;\n运行上面的程序，会触发 panic ，报下面的错误：\nGO\nfatal error: all goroutines are asleep - deadlock!\n下面再来看看几个例子。\nGO\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n\tch :&#x3D; make(chan bool)\n\tch &lt;- true\n\tfmt.Println(&lt;-ch)\n&#125;\n上面的代码你看起来可能觉得没啥问题，创建一个通道，往里面写入数据，再从里面读出数据，但运行后会报同样的错误：\nGO\nfatal error: all goroutines are asleep - deadlock!\n那么为什么会出现死锁呢？前面的基础学的好的就不难想到使用 make 函数创建通道时默认不传递第二个参数，通道中不能存放数据，在发送数据时，必须要求立马有人接收，即该通道为无缓冲通道。所以在接收者没有准备好前，发送操作会被阻塞。\n分析完引发异常的原因后，我们可以将代码修改如下，使用协程，将接收者代码放在另一个协程里：\nGO\npackage main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;time&quot;\n)\n\nfunc funcRecieve(c chan bool) &#123;\n\tfmt.Println(&lt;-c)\n&#125;\nfunc main() &#123;\n\tch4 :&#x3D; make(chan bool)\n\tgo funcRecieve(ch4)\n\tch4 &lt;- true\n\ttime.Sleep(time.Millisecond)\n&#125;\n当然，还有一种更加直接的方法，把无缓冲通道改为缓冲通道就行了：\nGO\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n\tch5 :&#x3D; make(chan bool, 1)\n\tch5 &lt;- true\n\tfmt.Println(&lt;-ch5)\n&#125;\n有时候我们定义了通道的容量，但通道里的容量已经放不下新的数据，而没有接收者接收数据，就会造成阻塞，而对于一个协程来说就会造成死锁：\nGO\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n\tch6 :&#x3D; make(chan bool, 1)\n\tch6 &lt;- true\n\tch6 &lt;- false\n\tfmt.Println(&lt;-ch6)\n&#125;\n同理，当程序一直在等待从通道里读取数据，而此时并没有发送者会往通道中写入数据。此时程序就会陷入死循环，造成死锁。\nWaitGroup在实际开发中我们并不能保证每个协程执行的时间，如果需要等待多个协程，全部结束任务后，再执行某个业务逻辑。下面我们介绍处理这种情况的方式。\nWaitGroup 有几个方法：\n\nAdd：初始值为 0 ，这里直接传入子协程的数量，你传入的值会往计数器上加。\nDone：当某个子协程完成后，可调用此方法，会从计数器上减一，即子协程的数量减一，通常使用 defer 来调用。\nWait：阻塞当前协程，直到实例里的计数器归零。\n\n使用信道信道可以实现多个协程间的通信，于是乎我们可以定义一个信道，在任务执行完成后，往信道中写入 true ，然后在主协程中获取到 true ，就可以认为子协程已经执行完毕。\nGO\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n\tisDone :&#x3D; make(chan bool)\n\tgo func() &#123;\n\t\tfor i :&#x3D; 0; i &lt; 5; i++&#123;\n\t\t\tfmt.Println(i)\n\t\t&#125;\n\t\tisDone &lt;- true\n\t&#125;()\n\t&lt;- isDone\n&#125;\n运行上面的程序，主协程就会等待创建的协程执行完毕后退出。\n使用 WaitGroup使用上面的信道方法，虽然可行，但在你程序中使用很多协程的话，你的代码就会看起来很复杂，这里就要介绍一种更好的方法，那就是使用 sync 包中提供的 WaitGroup 类型。WaitGroup 用于等待一批 Go 协程执行结束。程序控制会一直阻塞，直到这些协程全部执行完毕。当然 WaitGroup 也可以用于实现工作池。\nWaitGroup 实例化后就能使用：\nGO\nvar name sync.WaitGroup\n下面看具体示例：\nGO\npackage main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;sync&quot;\n)\n\nfunc task(taskNum int, wg *sync.WaitGroup) &#123;\n\t&#x2F;&#x2F; 延迟调用 执行完子协程计数器减一\n\tdefer wg.Done()\n\t&#x2F;&#x2F; 输出任务号\n\tfor i :&#x3D; 0; i &lt; 3; i++ &#123;\n\t\tfmt.Printf(&quot;task %d: %d\\n&quot;, taskNum, i)\n\t&#125;\n&#125;\n\nfunc main() &#123;\n\t&#x2F;&#x2F; 实例化 sync.WaitGroup\n\tvar waitGroup sync.WaitGroup\n\t&#x2F;&#x2F; 传入子协程的数量\n\twaitGroup.Add(3)\n\t&#x2F;&#x2F; 开启一个子协程 协程 1 以及 实例 waitGroup\n\tgo task(1, &amp;waitGroup)\n\t&#x2F;&#x2F; 开启一个子协程 协程 2 以及 实例 waitGroup\n\tgo task(2, &amp;waitGroup)\n\t&#x2F;&#x2F; 开启一个子协程 协程 3 以及 实例 waitGroup\n\tgo task(3, &amp;waitGroup)\n\t&#x2F;&#x2F; 实例 waitGroup 阻塞当前协程 等待所有子协程执行完\n\twaitGroup.Wait()\n&#125;\nSelectselect 语句用在多个发送/接收通道操作中进行选择。\n\nselect 语句会一直阻塞，直到发送/接收操作准备就绪。\n如果有多个通道操作准备完毕， select 会随机地选取其中之一执行。\n\nselect 语法如下：\nGO\nselect &#123;\n    case expression1:\n        code\n    case expression2:\n        code\n    default:\n        code\n&#125;\n下面是使用 select-case 的一个简单例子：\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n\t&#x2F;&#x2F; 创建3个通道\n\tch1 :&#x3D; make(chan string, 1)\n\tch2 :&#x3D; make(chan string, 1)\n\tch3 :&#x3D; make(chan string, 1)\n\t&#x2F;&#x2F; 往通道 1 千朵玫瑰带来的黎明\n\tch1 &lt;- &quot;千朵玫瑰带来的黎明&quot;\n\t&#x2F;&#x2F; 往通道 2 发送数据 赤土之王3与三朝圣者\n\tch2 &lt;- &quot;赤土之王3与三朝圣者&quot;\n\t&#x2F;&#x2F; 往通道 3 发送数据 虚空劫灰往事书\n\tch3 &lt;- &quot;虚空劫灰往事书&quot;\n\n\tselect &#123;\n\t&#x2F;&#x2F; 如果从通道 1 收到数据\n\tcase message1 :&#x3D; &lt;-ch1:\n\t\tfmt.Println(&quot;ch1 received:&quot;, message1)\n\t&#x2F;&#x2F; 如果从通道 2 收到数据\n\tcase message2 :&#x3D; &lt;-ch2:\n\t\tfmt.Println(&quot;ch2 received:&quot;, message2)\n\t&#x2F;&#x2F; 如果从通道 3 收到数据\n\tcase message3 :&#x3D; &lt;-ch3:\n\t\tfmt.Println(&quot;ch3 received:&quot;, message3)\n\t&#x2F;&#x2F; 默认输出\n\tdefault:\n\t\tfmt.Println(&quot;No data received.&quot;)\n\t&#125;\n&#125;\n\n\n上面的程序创建了 3 个通道，并在执行 select 语句之前往通道 1 、通道 2 和 通道 3 分别发送数据，在执行 select 语句时，如果有机会的话会运行所有表达式，只要其中一个通道接收到数据，那么就会执行对应的 case 代码，然后退出。所以运行该程序可能输出下面的语句：\nSHELL\nch3 received: 虚空劫灰往事书\n也有可能输出下面的这条语句，具体看哪个通道首先接收到数据：\nSHELL\nch2 received: 赤土之王3与三朝圣者\nch1 received: 千朵玫瑰带来的黎明\nselect 的应用每个任务执行的时间不同，使用 select 语句等待相应的通道发出响应。select 会选择首先响应先完成的 task，而忽略其它的响应。使用这种方法，我们可以做多个 task，并给用户返回最快的 task 结果。\n下面的程序模拟了这种服务：\npackage main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;time&quot;\n)\n\nfunc task1(ch chan string) &#123;\n\ttime.Sleep(5 * time.Second)\n\tch &lt;- &quot;正法炬书&quot;\n&#125;\n\nfunc task2(ch chan string) &#123;\n\ttime.Sleep(7 * time.Second)\n\tch &lt;- &quot;水天供书&quot;\n&#125;\n\nfunc task3(ch chan string) &#123;\n\ttime.Sleep(2 * time.Second)\n\tch &lt;- &quot;吉祥具书&quot;\n&#125;\n\nfunc main() &#123;\n\t&#x2F;&#x2F; 创建两个通道\n\tch1 :&#x3D; make(chan string)\n\tch2 :&#x3D; make(chan string)\n\tch3 :&#x3D; make(chan string)\n\tgo task1(ch1)\n\tgo task2(ch2)\n\tgo task3(ch3)\n\n\tselect &#123;\n\t&#x2F;&#x2F; 如果从通道 1 收到数据\n\tcase message1 :&#x3D; &lt;-ch1:\n\t\tfmt.Println(&quot;ch1 received:&quot;, message1)\n\t&#x2F;&#x2F; 如果从通道 2 收到数据\n\tcase message2 :&#x3D; &lt;-ch2:\n\t\tfmt.Println(&quot;ch2 received:&quot;, message2)\n\t&#x2F;&#x2F; 如果从通道 3 收到数据\n\tcase message3 :&#x3D; &lt;-ch3:\n\t\tfmt.Println(&quot;ch3 received:&quot;, message3)\n\t&#125;\n&#125;\n\n\n当然，上面的程序会发现，没有 default 分支，因为如果加了该默认分支，如果还没从通道接收到数据， select 语句就会直接执行 default 分支然后退出，而不是被阻塞。\n造成死锁上面的例子引出了一个新的问题，那就是如果没有 default 分支， select 就会阻塞，如果一直没有命中其中的某个 case 最后会造成死锁。\nGO\npackage main\n\nimport (\n    &quot;fmt&quot;\n)\n\nfunc main() &#123;\n    &#x2F;&#x2F; 创建两个通道\n    ch1 :&#x3D; make(chan string, 1)\n    ch2 :&#x3D; make(chan string, 1)\n    ch3 :&#x3D; make(chan string, 1)\n\n    select &#123;\n    &#x2F;&#x2F; 如果从通道 1 收到数据\n    case message1 :&#x3D; &lt;-ch1:\n        fmt.Println(&quot;ch1 received:&quot;, message1)\n    &#x2F;&#x2F; 如果从通道 2 收到数据\n    case message2 :&#x3D; &lt;-ch2:\n        fmt.Println(&quot;ch2 received:&quot;, message2)\n\t&#x2F;&#x2F; 如果从通道 3 收到数据\n    case message3 :&#x3D; &lt;-ch3:\n        fmt.Println(&quot;ch3 received:&quot;, message3)\n    &#125;\n&#125;\n运行上面的程序会造成死锁。解决该问题的方法是写好 default 分支。\n当然还有另一种情况会导致死锁的发生，那就是使用空 select ：\nGO\npackage main\n\nfunc main() &#123;\n    select &#123;&#125;\n&#125;\n运行上面的程序会抛出 panic 。\nTips：\n\n前面学习 switch-case 的时候，里面的 case 是顺序执行的，但在 select 里并不是顺序执行的。在上面的第一个例子就可以看出，当 select 由多个 case 准备就绪时，将会随机地选取其中之一去执行。\n\nselect 超时处理当 case 里的通道始终没有接收到数据时，而且也没有 default 语句时， select 整体就会阻塞，但是有时我们并不希望 select 一直阻塞下去，这时候就可以手动设置一个超时时间。\nGO\npackage main\n\nimport (\n    &quot;fmt&quot;\n    &quot;time&quot;\n)\n\nfunc makeTimeout(ch chan bool, t int) &#123;\n    time.Sleep(time.Second * time.Duration(t))\n    ch &lt;- true\n&#125;\n\nfunc main() &#123;\n    c1 :&#x3D; make(chan string, 1)\n    c2 :&#x3D; make(chan string, 1)\n    c3 :&#x3D; make(chan string, 1)\n    timeout :&#x3D; make(chan bool, 1)\n\n    go makeTimeout(timeout, 2)\n\n    select &#123;\n    case msg1 :&#x3D; &lt;-c1:\n        fmt.Println(&quot;c1 received: &quot;, msg1)\n    case msg2 :&#x3D; &lt;-c2:\n        fmt.Println(&quot;c2 received: &quot;, msg2)\n    case msg3 :&#x3D; &lt;-c3:\n        fmt.Println(&quot;c3 received: &quot;, msg3)\n    case &lt;-timeout:\n        fmt.Println(&quot;Timeout, exit.&quot;)\n    &#125;\n&#125;\n读取/写入数据select 里的 case 表达式只能对通道进行操作，不管你是往通道写入数据，还是从通道读出数据。\nGO\npackage main\n\nimport (\n    &quot;fmt&quot;\n)\n\nfunc main() &#123;\n    c1 :&#x3D; make(chan string, 2)\n\n    c1 &lt;- &quot;千朵玫瑰带来的黎明&quot;\n    select &#123;\n    case c1 &lt;- &quot;捕风的异乡人&quot;:\n        fmt.Println(&quot;c1 received: &quot;, &lt;-c1)\n        fmt.Println(&quot;c1 received: &quot;, &lt;-c1)\n    default:\n        fmt.Println(&quot;channel blocking&quot;)\n    &#125;\n&#125;\n\n线程同步在 Go 语言中，经常会遇到并发的问题，当然我们会优先考虑使用通道，同时 Go 语言也给出了传统的解决方式 Mutex(互斥锁) 和 RWMutex(读写锁) 来处理竞争条件。\n\npackage main\ntype Bank struct &#123;\n    balance int\n&#125;\n\nfunc (b *Bank) Deposit(amount int) &#123;\n    b.balance +&#x3D; amount\n&#125;\n\nfunc (b *Bank) Balance() int &#123;\n    return b.balance\n&#125;\n\nfunc main() &#123;\n    b :&#x3D; &amp;Bank&#123;&#125;\n\n    b.Deposit(1000)\n    b.Deposit(1000)\n    b.Deposit(1000)\n\n    fmt.Println(b.Balance())  &#x2F;&#x2F;3000\n&#125;\n\n\n\n\n\n\n\n\n\n3000\n\n临界区首先我们要理解并发编程中临界区的概念。当程序并发地运行时，多个 Go 协程不应该同时访问那些修改共享资源的代码。这些修改共享资源的代码称为临界区 。\nGO\nfunc main() &#123;\n    var wg sync.WaitGroup\n    b :&#x3D; &amp;Bank&#123;&#125;\n\n    n :&#x3D; 1000\n    wg.Add(n)\n    for i :&#x3D; 1; i &lt;&#x3D; n; i++ &#123;\n        go func() &#123;\n            b.Deposit(1000)\n            wg.Done()\n        &#125;()\n    &#125;\n    wg.Wait()\n    fmt.Println(b.Balance())  &#x2F;&#x2F;972000,962000,941000\n&#125;\n\n我们这里举一个简单的例子，当前变量的值增加 b.balance += amount\n当然，对于只有一个协程的程序来说，上面的代码没有任何问题。但是，如果有多个协程并发运行时，就会发生错误，这种情况就称之为数据竞争(data race)。使用下面的互斥锁 Mutex 就能避免这种情况的发生。\n互斥锁 Mutex互斥锁(Mutex，mutual exclusion) 用于提供一种 加锁机制(Locking Mechanism) ，可确保在某时刻只有一个协程在临界区运行，以防止出现竞争。也是为了来保护一个资源不会因为并发操作而引起冲突导致数据不准确。\nMutex 有两个方法，分别是 Lock() 和 Unlock() ，即对应的加锁和解锁。在 Lock() 和 Unlock() 之间的代码，都只能由一个协程执行，就能避免竞争条件。\n如果有一个协程已经持有了锁(Lock)，当其他协程试图获得该锁时，这些协程会被阻塞，直到Mutex解除锁定。\n下面使用一个例子来讲一讲互斥锁的使用 ：\nGO\npackage main\n\nimport (\n    &quot;fmt&quot;\n    &quot;sync&quot;\n)\n\ntype BankV2 struct &#123;\n    balance int\n    m       sync.Mutex\n&#125;\n\nfunc (b *BankV2) Deposit(amount int) &#123;\n    b.m.Lock()\n    b.balance +&#x3D; amount\n    b.m.Unlock()\n&#125;\n\nfunc (b *BankV2) Balance() int &#123;\n    return b.balance\n&#125;\n\nfunc main() &#123;\n    var wg sync.WaitGroup\n    b :&#x3D; &amp;BankV2&#123;&#125;\n\n    n :&#x3D; 1000\n    wg.Add(n)\n    for i :&#x3D; 1; i &lt;&#x3D; n; i++ &#123;\n        go func() &#123;\n            b.Deposit(1000)\n            wg.Done()\n        &#125;()\n    &#125;\n    wg.Wait()\n    fmt.Println(b.Balance()) &#x2F;&#x2F;1000000\n&#125;\n为了解决竞争问题，我们就要对 Deposit 这个方法中加上互斥锁，使同一时刻，只能有一个协程对 balance 进行操作：\n更改后的代码不管运行多少次，都只会输出一个结果，那就是 1000000 。\n使用互斥锁很简单，但要注意同一协程里不要在尚未解锁时再次加锁，也不要对已经解锁的锁再次解锁。\n当然，使用通道也可以处理竞争条件，把通道作为锁在前面讲通道的时候已经讲过，这里就不再赘述。\n读写锁 RWMutexsync.RWMutex 类型实现读写互斥锁，适用于读多写少的场景，它规定了当有人还在读取数据（即读锁占用）时，不允许有人更新这个数据（即写锁会阻塞）；为了保证程序的效率，多个人（协程）读取数据（拥有读锁）时，互不影响不会造成阻塞，它不会像 Mutex 那样只允许有一个人（协程）读取同一个数据。读锁与读锁兼容，读锁与写锁互斥，写锁与写锁互斥。\n\n可以同时申请多个读锁；\n有读锁时申请写锁将阻塞，有写锁时申请读锁将阻塞；\n只要有写锁，后续申请读锁和写锁都将阻塞。\n\n定义一个 RWMuteux 读写锁：\nGO\nvar rwMutex sync.RWMutex\nRWMutex 里提供了两种锁，每种锁分别对应两个方法，为了避免死锁，两个方法应成对出现，必要时请使用 defer 。\n\n读锁：调用 RLock 方法开启锁，调用 RUnlock 释放锁；\n写锁：调用 Lock 方法开启锁，调用 Unlock 释放锁。\n\nGO\npackage main\n\nimport (\n    &quot;fmt&quot;\n    &quot;sync&quot;\n    &quot;time&quot;\n)\n\ntype BankV3 struct &#123;\n    balance int\n    rwMutex sync.RWMutex &#x2F;&#x2F; read write lock\n&#125;\n\nfunc (b *BankV3) Deposit(amount int) &#123;\n    b.rwMutex.Lock() &#x2F;&#x2F; write lock\n    b.balance +&#x3D; amount\n    b.rwMutex.Unlock() &#x2F;&#x2F; wirte unlock\n&#125;\n\nfunc (b *BankV3) Balance() (balance int) &#123;\n    b.rwMutex.RLock() &#x2F;&#x2F; read lock\n    balance &#x3D; b.balance\n    b.rwMutex.RUnlock() &#x2F;&#x2F; read unlock\n    return\n&#125;\n\nfunc main() &#123;\n    var wg sync.WaitGroup\n    b :&#x3D; &amp;BankV3&#123;&#125;\n\n    n :&#x3D; 1000\n    wg.Add(n)\n    for i :&#x3D; 1; i &lt;&#x3D; n; i++ &#123;\n        go func() &#123;\n            b.Deposit(1000)\n            wg.Done()\n        &#125;()\n    &#125;\n    wg.Wait()\n    fmt.Println(b.Balance())\n&#125;\n\n条件变量 sync.CondCond 实现了一个条件变量，在 Locker 的基础上增加的一个消息通知的功能，保存了一个通知列表，用来唤醒一个或所有因等待条件变量而阻塞的 Go 程，以此来实现多个 Go 程间的同步。\nGO\ntype Cond struct &#123;\n    ...\n    L Locker\n    ...\n&#125;\n\n&#x2F;&#x2F; 创建一个带锁的条件变量，Locker 通常是一个 *Mutex 或 *RWMutex\nfunc NewCond(l Locker) *Cond\n\n&#x2F;&#x2F; 唤醒所有因等待条件变量 c 阻塞的 goroutine\nfunc (c *Cond) Broadcast()\n\n&#x2F;&#x2F; 唤醒一个因等待条件变量 c 阻塞的 goroutine\nfunc (c *Cond) Signal()\n\n&#x2F;&#x2F; 等待 c.L 解锁并挂起 goroutine，在稍后恢复执行后，Wait 返回前锁定 c.L，\n&#x2F;&#x2F; 只有当被 Broadcast 和 Signal 唤醒，Wait 才能返回。\nfunc (c *Cond) Wait()\n注意：在调用 Signal，Broadcast 之前，应确保目标 Go 程进入 Wait 阻塞状态。\npackage main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;os&quot;\n\t&quot;os&#x2F;signal&quot;\n\t&quot;sync&quot;\n\t&quot;time&quot;\n)\n\nfunc listen(name string, s []string, c *sync.Cond) &#123;\n\tc.L.Lock()\n\tc.Wait()\n\tfmt.Println(name, &quot; 大梦的曲调:&quot;, s)\n\tc.L.Unlock()\n&#125;\n\nfunc broadcast(event string, c *sync.Cond) &#123;\n\ttime.Sleep(time.Second)\n\tc.L.Lock()\n\tfmt.Println(event)\n\tc.Broadcast()\n\tc.L.Unlock()\n&#125;\n\nfunc main() &#123;\n\ts1 :&#x3D; []string&#123;&quot;兰拉娜&quot;&#125;\n\ts2 :&#x3D; []string&#123;&quot;兰犍多&quot;&#125;\n\ts3 :&#x3D; []string&#123;&quot;兰荼茶&quot;&#125;\n\tvar m sync.Mutex\n\tcond :&#x3D; sync.NewCond(&amp;m)\n\n\t&#x2F;&#x2F; listener 1\n\tgo listen(&quot;林中奇遇&quot;, s1, cond)\n\n\t&#x2F;&#x2F; listener 2\n\tgo listen(&quot;原为一炊之梦&quot;, s2, cond)\n\n\t&#x2F;&#x2F; listener 3\n\tgo listen(&quot;为了所有的孩子们&quot;, s3, cond)\n\n\t&#x2F;&#x2F; broadcast\n\tgo broadcast(&quot;森林会记住一切:&quot;, cond)\n\n\tch :&#x3D; make(chan os.Signal, 1)\n\tsignal.Notify(ch, os.Interrupt)\n\t&lt;-ch\n&#125;\n\n错误与异常错误内建错误在 Go 中， 错误 使用内建的 error 类型表示。error 类型是一个接口类型，它的定义如下：\nGO\ntype error interface &#123;\n    Error() string\n&#125;\nerror 有了一个签名为 Error() string 的方法。所有实现该接口的类型都可以当作一个错误类型。Error() 方法给出了错误的描述。fmt.Println 在打印错误时，会在内部调用 Error() string 方法来得到该错误的描述。\n下面的例子演示了程序尝试打开一个不存在的文件导致的报错：\nGO\npackage main\n\nimport (\n    &quot;fmt&quot;\n    &quot;os&quot;\n)\n\nfunc main() &#123;\n    &#x2F;&#x2F; 尝试打开文件\n    file, err :&#x3D; os.Open(&quot;&#x2F;a.txt&quot;)\n    &#x2F;&#x2F; 如果打开文件时发生错误 返回一个不等于 nil 的错误\n    if err !&#x3D; nil &#123;\n        fmt.Println(err)\n        return\n    &#125;\n    &#x2F;&#x2F; 如果打开文件成功 返回一个文件句柄 和 一个值为 nil 的错误\n    fmt.Println(file.Name(), &quot;opened successfully&quot;)\n&#125;\n我们这里没有存在一个文件 a.txt ，所以尝试打开文件将会返回一个不等于 nil 的错误。\nGO\nopen &#x2F;a.txt: The system cannot find the file specified.\n自定义错误使用 errors 包中的 New 函数可以创建自定义错误。下面是 errors 包中 New 函数的实现代码：\nGO\npackage errors\n\nfunc New(text string) error &#123;\n    return &amp;errorString&#123;text&#125;\n&#125;\n\ntype errorString struct &#123;\n    s string\n&#125;\n\nfunc (e *errorString) Error() string &#123;\n    return e.s\n&#125;\nerrorString 是一个结构体类型，只有一个字符串字段 s 。它使用了 errorString 指针接受者，来实现 error 接口的 Error() string 方法。New 函数有一个字符串参数，通过这个参数创建了 errorString 类型的变量，并返回了它的地址。于是它就创建并返回了一个新的错误。\n下面是一个简单的自定义错误例子，该例子创建了一个计算矩形面积的函数，当矩形的长和宽两者有一个为负数时，就会返回一个错误：\nGO\npackage main\n\nimport (\n    &quot;errors&quot;\n    &quot;fmt&quot;\n)\n\nfunc area(a, b int) (int, error) &#123;\n    if a &lt; 0 || b &lt; 0 &#123;\n        return 0, errors.New(&quot;计算错误, 长度或宽度，不能小于0.&quot;)\n    &#125;\n    return a * b, nil\n&#125;\nfunc main() &#123;\n    a :&#x3D; 100\n    b :&#x3D; -10\n    r, err :&#x3D; area(a, b)\n    if err !&#x3D; nil &#123;\n        fmt.Println(err)\n        return\n    &#125;\n    fmt.Println(&quot;Area &#x3D;&quot;, r)\n&#125;\n运行上面的程序会报出自定义的错误：\nGO\n计算错误, 长度或宽度，不能小于0.\n给错误添加更多信息上面的程序能报出我们自定义的错误，但是没有具体说明是哪个数据出了问题，所以下面就来改进一下这个程序，我们使用 fmt 包中的 Errorf 函数，规定错误格式，并返回一个符合该错误的字符串。\nGO\npackage main\n\nimport (\n    &quot;fmt&quot;\n)\n\nfunc area(a, b int) (int, error) &#123;\n    if a &lt; 0 || b &lt; 0 &#123;\n        return 0, fmt.Errorf(&quot;计算错误, 长度%d或宽度%d，不能小于0&quot;, a, b)\n    &#125;\n    return a * b, nil\n&#125;\nfunc main() &#123;\n    a :&#x3D; 100\n    b :&#x3D; -10\n    area, err :&#x3D; area(a, b)\n    if err !&#x3D; nil &#123;\n        fmt.Println(err)\n        return\n    &#125;\n    fmt.Println(&quot;Area &#x3D;&quot;, area)\n&#125;\n运行上面的程序，我们可以看到输出的错误中打印了长度和宽度的具体值：\nGO\n计算错误, 长度100或宽度-10，不能小于0\n当然，给错误添加更多信息还可以 使用结构体类型和字段 实现。下面还是通过改进上面的程序来讲解这种方法的实现：\n首先创建一个表示错误的结构体类型，一般错误类型名称都是以 Error 结尾，上面的错误是由于面积计算中长度或宽度错误导致的，所以这里把结构体命名为 areaError ：\nGO\npackage main\n\nimport (\n    &quot;fmt&quot;\n)\n\ntype areaError struct &#123;\n    &#x2F;&#x2F; 错误信息\n    err string\n    &#x2F;&#x2F; 错误有关的长度\n    length int\n    &#x2F;&#x2F; 错误有关的宽度\n    width int\n&#125;\n\n&#x2F;&#x2F; 使用指针接收者 *areaError 实现了 error 接口的 Error() string 方法\nfunc (e *areaError) Error() string &#123;\n    &#x2F;&#x2F; 打印长度和宽度以及错误的描述\n    return fmt.Sprintf(&quot;length %d, width %d : %s&quot;, e.length, e.width, e.err)\n&#125;\n\nfunc rectangleArea(a, b int) (int, error) &#123;\n    if a &lt; 0 || b &lt; 0 &#123;\n        return 0, &amp;areaError&#123;&quot;length or width is negative&quot;, a, b&#125;\n    &#125;\n    return a * b, nil\n&#125;\nfunc main() &#123;\n    a :&#x3D; 100\n    b :&#x3D; -10\n    area, err :&#x3D; rectangleArea(a, b)\n    &#x2F;&#x2F; 检查了错误是否为 nil\n    if err !&#x3D; nil &#123;\n        &#x2F;&#x2F; 断言 *areaError 类型\n        if err, ok :&#x3D; err.(*areaError); ok &#123;\n            &#x2F;&#x2F; 如果错误是 *areaError 类型\n            &#x2F;&#x2F; 用 err.length 和 err.width 来获取错误的长度和宽度 打印出自定义错误的消息\n            fmt.Printf(&quot;length %d or width %d is less than zero&quot;, err.length, err.width)\n            return\n        &#125;\n        fmt.Println(err)\n        return\n    &#125;\n    fmt.Println(&quot;Area &#x3D;&quot;, area)\n&#125;\n运行该程序输出如下：\nGO\nlength 100 or width -10 is less than zero\n当然，我们还可以使用 结构体类型的方法 来给错误添加更多信息。下面我们继续完善上面的程序，让程序更加精确的定位是长度引发的错误还是宽度引发的错误。\n首先，我们还是跟上面一样创建一个表示错误的结构体：\nGO\npackage main\n\nimport (\n    &quot;fmt&quot;\n)\n\ntype areaError struct &#123;\n    &#x2F;&#x2F; 错误信息\n    err string\n    &#x2F;&#x2F; 长度\n    length int\n    &#x2F;&#x2F; 宽度\n    width int\n&#125;\n\n&#x2F;&#x2F; 使用指针接收者 *areaError 实现了 error 接口的 Error() string 方法\nfunc (e *areaError) Error() string &#123;\n    return e.err\n&#125;\n\n&#x2F;&#x2F; 长度为负数返回 true\nfunc (e *areaError) lengthNegative() bool &#123;\n    return e.length &lt; 0\n&#125;\n\n&#x2F;&#x2F; 宽度为负数返回 true\nfunc (e *areaError) widthNegative() bool &#123;\n    return e.width &lt; 0\n&#125;\n\nfunc area(length, width int) (int, error) &#123;\n    err :&#x3D; &quot;&quot;\n    if length &lt; 0 &#123;\n        err +&#x3D; &quot;length is less than zero&quot;\n    &#125;\n    if width &lt; 0 &#123;\n        if err &#x3D;&#x3D; &quot;&quot; &#123;\n            err &#x3D; &quot;width is less than zero&quot;\n        &#125; else &#123;\n            err +&#x3D; &quot; and width is less than zero&quot;\n        &#125;\n    &#125;\n    if err !&#x3D; &quot;&quot; &#123;\n        return 0, &amp;areaError&#123;err, length, width&#125;\n    &#125;\n    return length * width, nil\n&#125;\n\nfunc main() &#123;\n    length :&#x3D; 100\n    width :&#x3D; -10\n    area, err :&#x3D; area(length, width)\n    &#x2F;&#x2F; 检查了错误是否为 nil\n    if err !&#x3D; nil &#123;\n        &#x2F;&#x2F; 断言 *areaError 类型\n        if err, ok :&#x3D; err.(*areaError); ok &#123;\n            &#x2F;&#x2F; 如果错误是 *areaError 类型\n            &#x2F;&#x2F; 如果长度为负数 打印错误长度具体值\n            if err.lengthNegative() &#123;\n                fmt.Printf(&quot;error: 长度 %d 小于0\\n&quot;, err.length)\n            &#125;\n            &#x2F;&#x2F; 如果宽度为负数 打印错误宽度具体值\n            if err.widthNegative() &#123;\n                fmt.Printf(&quot;error: 宽度 %d 小于0\\n&quot;, err.width)\n            &#125;\n            return\n        &#125;\n        fmt.Println(err)\n        return\n    &#125;\n    fmt.Println(&quot;Area &#x3D;&quot;, area)\n&#125;\n还是使用之前的例子中的参数，但我们这次报错结果更加具体，运行该程序输出如下：\nGO\nerror: width -10 is less than zero\n异常错误和异常是两个不同的概念，非常容易混淆。错误指的是可能出现问题的地方出现了问题；而异常指的是不应该出现问题的地方出现了问题。\npanic在有些情况，当程序发生异常时，无法继续运行。在这种情况下，我们会使用 panic 来终止程序。当函数发生 panic 时，它会终止运行，在执行完所有的延迟函数后，程序返回到该函数的调用方。这样的过程会一直持续下去，直到当前协程的所有函数都返回退出，然后程序会打印出 panic 信息，接着打印出堆栈跟踪，最后程序终止。\n我们应该尽可能地使用错误，而不是使用 panic 和 recover 。只有当程序不能继续运行的时候，才应该使用 panic 和 recover 机制。\npanic 有两个合理的用例：\n\n发生了一个不能恢复的错误，此时程序不能继续运行。一个例子就是 web 服务器无法绑定所要求的端口。在这种情况下，就应该使用 panic ，因为如果不能绑定端口，啥也做不了。\n发生了一个编程上的错误。假如我们有一个接收指针参数的方法，而其他人使用 nil 作为参数调用了它。在这种情况下，我们可以使用 panic ，因为这是一个编程错误：用 nil 参数调用了一个只能接收合法指针的方法。\n\n触发 panic下面是内建函数 panic 的签名：\nGO\nfunc panic(v interface&#123;&#125;)\n当程序终止时，会打印传入 panic 的参数。\nGO\npackage main\n\nfunc main() &#123;\n    panic(&quot;panic error&quot;)\n&#125;\n运行上面的程序，会打印出传入 panic 函数的信息，并打印出堆栈跟踪：\nGO\npanic: panic error\n发生 panic 时的 defer上面已经提到了，当函数发生 panic 时，它会终止运行，在执行完所有的延迟函数后，程序返回到该函数的调用方。这样的过程会一直持续下去，直到当前协程的所有函数都返回退出，然后程序会打印出 panic 信息，接着打印出堆栈跟踪，最后程序终止。下面通过一个简单的例子看看是不是这样：\nGO\npackage main\n\nimport &quot;fmt&quot;\n\nfunc myTest() &#123;\n    defer fmt.Println(&quot;defer myTest&quot;)\n    panic(&quot;panic myTest&quot;)\n&#125;\nfunc main() &#123;\n    defer fmt.Println(&quot;defer main&quot;)\n    myTest()\n&#125;\n运行该程序后输出如下：\nGO\ndefer myTest\ndefer main\npanic: panic myTest\nrecoverrecover 是一个内建函数，用于重新获得 panic 协程的控制。下面是内建函数 recover 的签名：\nGO\nfunc recover() interface&#123;&#125;\nrecover 必须在 defer 函数中才能生效，在其他作用域下，它是不工作的。在延迟函数内调用 recover ，可以取到 panic 的错误信息，并且停止 panic 续发事件，程序运行恢复正常。下面是网上找的一个例子：\nGO\npackage main\n\nimport &quot;fmt&quot;\n\nfunc outOfArray(x int) &#123;\n    defer func() &#123;\n        &#x2F;&#x2F; recover() 可以将捕获到的 panic 信息打印\n        if err :&#x3D; recover(); err !&#x3D; nil &#123;\n            fmt.Println(err)\n        &#125;\n    &#125;()\n    var array [5]int\n    array[x] &#x3D; 1\n&#125;\nfunc main() &#123;\n    &#x2F;&#x2F; 故意制造数组越界 触发 panic\n    outOfArray(20)\n    &#x2F;&#x2F; 如果能执行到这句 说明 panic 被捕获了\n    &#x2F;&#x2F; 后续的程序能继续运行\n    fmt.Println(&quot;main...&quot;)\n&#125;\n虽然该程序触发了 panic ，但由于我们使用了 recover() 捕获了 panic 异常，并输出 panic 信息，即使 panic 会导致整个程序退出，但在退出前，有 defer 延迟函数，还是得执行完 defer 。然后程序还会继续执行下去：\nGO\nruntime error: index out of range [20] with length 5\nmain...\n这里要注意一点，只有在相同的协程中调用 recover 才管用， recover 不能恢复一个不同协程的 panic 。\nmake 和 new内置函数 new 分配内存。该函数只接受一个参数，该参数是一个任意类型(包括自定义类型)，而不是值，返回指向该类型新分配零值的指针。\nGO\n&#x2F;&#x2F; The new built-in function allocates memory. The first argument is a type,\n&#x2F;&#x2F; not a value, and the value returned is a pointer to a newly\n&#x2F;&#x2F; allocated zero value of that type.\nfunc new(Type) *Type\n使用 new 函数首先会分配内存，并设置类型零值，最后返回指向该类型新分配零值的指针。\nGO\npackage main\n\nimport (\n\t&quot;fmt&quot;\n)\n\nfunc main() &#123;\n\tnum :&#x3D; new(int)\n\t&#x2F;&#x2F; 打印出类型的值\n\tfmt.Println(*num)  &#x2F;&#x2F; 0\n&#125;\nmake 函数内置函数 make 只能分配和初始化类型为 slice 、 map 或 chan 的对象。与 new 一样，第一个参数是类型，而不是值。与 new 不同， make 的返回类型与其参数的类型相同，而不是指向它的指针。结果取决于类型：\n\nslice：size 指定长度。切片的容量等于其长度。可提供第三个参数以指定不同的容量；它不能小于长度。\nmap：为空映射分配足够的空间来容纳指定数量的元素。可以省略大小，在这种情况下，分配一个小的起始大小。\nchan：使用指定的缓冲区容量初始化通道的缓冲区。如果为零，或者忽略了大小，则通道是无缓冲的。\n\nGO\nfunc make(t Type, size ...IntegerType) Type\n注意，使用 make 函数必须初始化。例如：\nGO\n&#x2F;&#x2F; slice\na :&#x3D; make([]int, 2, 10)\n\n&#x2F;&#x2F; map\nb :&#x3D; make(map[string]int)\n\n&#x2F;&#x2F; chan\nc :&#x3D; make(chan int, 10)\nnew 和 make 的区别new：为所有的类型分配内存，并初始化为零值，返回指针。\nmake：只能为 slice 、 map 、 chan 分配内存，并初始化，返回的是类型。\n头等函数Go 语言拥有 头等函数(First-class Function) ，头等函数是指函数可以被当作变量一样使用，即函数可以被当作参数传递给其他函数，可以作为另一个函数的返回值，还可以被赋值给一个变量。\n把函数赋值给变量下面是一个把函数赋值给变量的例子，该函数没有名称，调用该函数的唯一方法就是使用赋值后的变量。\nGO\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n    bookFunc :&#x3D; func() &#123;\n        fmt.Println(&quot;《森林书》&quot;)\n    &#125;\n    bookFunc()\n    fmt.Printf(&quot;bookFunc 的类型是 %T\\n&quot;, bookFunc)\n&#125;\n运行该程序输出如下：\n\n《森林书》\nbookFunc 的类型是 func()\n传递一个函数作为参数我们把 接收一个或多个函数作为参数 或者 返回值也是一个函数 的函数称为 高阶函数(Hiher-order Function) 。\n下面的是把函数作为参数，并传递给其他函数的例子：\nGO\npackage main\n\nimport &quot;fmt&quot;\n\n&#x2F;&#x2F; printRes 接收一个函数参数\nfunc printRes(show func(author, book string) string) &#123;\n    fmt.Println(show(&quot;电子羊&quot;, &quot;《千朵玫瑰带来的黎明》&quot;))\n&#125;\n\nfunc main() &#123;\n    &#x2F;&#x2F; 创建匿名函数\n    f :&#x3D; func(x, y string) string &#123;\n       return x + y\n    &#125;\n    &#x2F;&#x2F; 把匿名函数作为参数传入另一个函数\n    printRes(f)\n&#125;\n\n返回一个函数下面的是函数返回一个函数的例子：\nGO\npackage main\n\nimport &quot;fmt&quot;\n\n&#x2F;&#x2F; show 返回一个函数\nfunc show() func(author, book string) string &#123;\n    return func(x, y string) string &#123;\n        return x + y\n    &#125;\n&#125;\n\nfunc main() &#123;\n    &#x2F;&#x2F; 变量获取返回的函数\n    s :&#x3D; show()\n    &#x2F;&#x2F; 调用返回的函数\n    fmt.Println(s(&quot;电子羊&quot;, &quot;《为了没有眼泪的明天》&quot;))\n&#125;\n\n闭包闭包(Closure) 是匿名函数的一个特例。当一个匿名函数所访问的变量定义在函数体的外部时，就称这样的匿名函数为闭包。\nGO\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n    x :&#x3D; 100\n    func() &#123;\n        fmt.Println(x)\n    &#125;()\n&#125;\n静态类型与动态类型静态类型(static type)静态类型就是变量声明时候的类型。例如：\nGO\n&#x2F;&#x2F; int 是静态类型\nvar number int\n&#x2F;&#x2F; string 也是静态类型\nvar name string\n动态类型(concrete type)动态类型是程序运行时系统才能看见的类型。例如：\nGO\n&#x2F;&#x2F; in 的静态类型为 interface&#123;&#125;\nvar in interface&#123;&#125;\n&#x2F;&#x2F; in 的静态类型为 interface&#123;&#125; 动态类型为 int\nin &#x3D; 100\n&#x2F;&#x2F; in 的静态类型为 interface&#123;&#125; 动态类型为 string\nin &#x3D; &quot;《千朵玫瑰带来的黎明》&quot;\n通过上面的例子，可以看到我们定义了一个空接口 in ，它的静态类型永远是 interface&#123;&#125; ，但它可以接受任何类型，接受整型数据时，它的动态类型就为 int ；接受字符串型数据时，它的动态类型就变为 string 。\n接口组成每个接口变量实际上都是由一 pair 对组成，其中记录了实际变量的值和类型。例如：\nGO\nvar number int &#x3D; 100\n这里声明了一个类型为 int 的变量，变量名叫 number 值为 100 。知道了接口的组成，我们也可以使用下面的方式定义一个变量：\nGO\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n    number :&#x3D; (int)(100)\n    &#x2F;&#x2F; 或者写成 number :&#x3D; (interface&#123;&#125;)(100)\n    fmt.Printf(&quot;number type: %T, data: %v&quot;, number, number)\n&#125;\n运行上面的程序输出如下：\nSHELL\nnumber type: int, data: 100\n\n反射reflect 包Go 语言提供了一种机制，能够在运行时更新变量和检查它们的值、调用它们的方法，而不需要在编译时就知道这些变量的具体类型。这种机制被称为 反射 。\n反射是把双刃剑，功能强大但代码可读性并不理想，若非必要并不推荐使用反射。\n在 Go 中 reflect 包实现了运行时反射。reflect 包会帮助识别 interface&#123;&#125; 变量的底层具体类型和具体值。\nreflect.Typereflect.Type 表示 interface&#123;&#125; 的具体类型。reflect.TypeOf() 方法返回 reflect.Type 。\n像我们之前讲过的空接口参数的函数，可以通过类型断言来判断传入变量的类型，也可以借助反射来确定传入变量的类型。\nGO\npackage main\n\nimport (\n    &quot;fmt&quot;\n    &quot;reflect&quot;\n)\n\nfunc reflectType(x interface&#123;&#125;) &#123;\n    obj :&#x3D; reflect.TypeOf(x)\n    fmt.Println(obj)\n&#125;\n\nfunc main() &#123;\n    var a int64 &#x3D; 123\n    reflectType(a)\n    var b string &#x3D; &quot;金色的那菈！&quot;\n    reflectType(b)\n&#125;\n\nreflect.Valuereflect.Value 表示 interface&#123;&#125; 的具体值。reflect.ValueOf() 方法返回 reflect.Value 。\nGO\npackage main\n\nimport (\n    &quot;fmt&quot;\n    &quot;reflect&quot;\n)\n\nfunc reflectType(x interface&#123;&#125;) &#123;\n    typeX :&#x3D; reflect.TypeOf(x)\n    valueX :&#x3D; reflect.ValueOf(x)\n    fmt.Println(typeX)\n    fmt.Println(valueX)\n&#125;\n\nfunc main() &#123;\n    var a int64 &#x3D; 123\n    reflectType(a)\n    var b string &#x3D; &quot;为了果实、种子还有树&quot;\n    reflectType(b)\n&#125;\n\nrelfect.Kindrelfect.Kind 表示的是种类。在使用反射时，需要理解类型（Type）和种类（Kind）的区别。编程中，使用最多的是类型，但在反射中，当需要区分一个大品种的类型时，就会用到种类（Kind）。\nGo 语言程序中的类型（Type）指的是系统原生数据类型，如 int 、 string 、 bool 、 float32 等类型，以及使用 type 关键字定义的类型，这些类型的名称就是其类型本身的名称。例如使用 type A struct&#123;&#125; 定义结构体时，A 就是 struct&#123;&#125; 的类型。\n种类（Kind）指的是对象归属的品种，在 reflect 包中有如下定义：\nGO\n&#x2F;&#x2F; A Kind represents the specific kind of type that a Type represents.\n&#x2F;&#x2F; The zero Kind is not a valid kind.\ntype Kind uint\n\nconst (\n    Invalid Kind &#x3D; iota\n    Bool\n    Int\n    Int8\n    Int16\n    Int32\n    Int64\n    Uint\n    Uint8\n    Uint16\n    Uint32\n    Uint64\n    Uintptr\n    Float32\n    Float64\n    Complex64\n    Complex128\n    Array\n    Chan\n    Func\n    Interface\n    Map\n    Ptr\n    Slice\n    String\n    Struct\n    UnsafePointer\n)\n通过下面这个程序，相信你会很容易明白这两者的区别：\nGO\npackage main\n\nimport (\n    &quot;fmt&quot;\n    &quot;reflect&quot;\n)\n\nfunc reflectType(x interface&#123;&#125;) &#123;\n    typeX :&#x3D; reflect.TypeOf(x)\n    fmt.Println(typeX.Kind()) &#x2F;&#x2F; struct\n    fmt.Println(typeX)        &#x2F;&#x2F; main.book\n&#125;\n\ntype book struct &#123;\n&#125;\n\nfunc main() &#123;\n    var b book\n    reflectType(b)\n&#125;\nrelfect.NumField()relfect.NumField() 方法返回结构体中字段的数量。\nGO\npackage main\n\nimport (\n    &quot;fmt&quot;\n    &quot;reflect&quot;\n)\n\nfunc reflectNumField(x interface&#123;&#125;) &#123;\n    &#x2F;&#x2F; 检查 x 的类别是 struct\n    if reflect.ValueOf(x).Kind() &#x3D;&#x3D; reflect.Struct &#123;\n        v :&#x3D; reflect.ValueOf(x)\n        fmt.Println(&quot;Number of fields&quot;, v.NumField())\n    &#125;\n&#125;\n\ntype book struct &#123;\n    name string\n    spend  int\n&#125;\n\nfunc main() &#123;\n    var b book\n    reflectNumField(b)\n&#125;\nrelfect.Field()relfect.Field(i int) 方法返回字段 i 的 reflect.Value 。\nGO\npackage main\n\nimport (\n    &quot;fmt&quot;\n    &quot;reflect&quot;\n)\n\nfunc reflectNumField(x interface&#123;&#125;) &#123;\n    &#x2F;&#x2F; 检查 x 的类别是 struct\n    if reflect.ValueOf(x).Kind() &#x3D;&#x3D; reflect.Struct &#123;\n        v :&#x3D; reflect.ValueOf(x)\n        fmt.Println(&quot;Number of fields&quot;, v.NumField())\n        for i :&#x3D; 0; i &lt; v.NumField(); i++ &#123;\n            fmt.Printf(&quot;Field:%d type:%T value:%v\\n&quot;, i, v.Field(i), v.Field(i))\n        &#125;\n    &#125;\n&#125;\n\ntype book struct &#123;\n    name string\n    spend  int\n&#125;\n\nfunc main() &#123;\n    var b &#x3D; book&#123;&quot;《为了不再哭泣的孩子们》&quot;, 8&#125;\n    reflectNumField(a)\n&#125;\n反射的三大定律之前在 静态类型与动态类型章节中讲过，一个接口变量，实际上都是由一 pair 对（type 和 data）组合而成，pair 对中记录着实际变量的值和类型。也就是说在真实世界（反射前环境）里，type 和 value 是合并在一起组成接口变量的。\n而在反射的世界（反射后的环境）里，type 和 data 却是分开的，他们分别由 reflect.Type 和 reflect.Value 来表现。\nGo 语言里有反射三定律，是你在学习反射时，很重要的参考：\n\nReflection goes from interface value to reflection object.\nReflection goes from reflection object to interface value.\nTo modify a reflection object, the value must be settable.\n\n接下来我们就来讲一讲反射三大定律。\n反射第一定律\n\n\n\n\n\n\n\n\nReflection goes from interface value to reflection object.\n反射第一定律：反射可以将“接口类型变量”转换为“反射类型对象”。\n这里反射类型指 reflect.Type 和 reflect.Value 。\n通过之前我们讲过的 reflect.TypeOf() 方法和 reflect.ValueOf() 方法可以分别获得接口值的类型和接口值的值。这两个方法返回的对象，我们称之为反射对象。\nGO\npackage main\n\nimport (\n    &quot;fmt&quot;\n    &quot;reflect&quot;\n)\n\nfunc main() &#123;\n    var a interface&#123;&#125; &#x3D; 3.14\n    fmt.Printf(&quot;接口变量的类型为 %T ，值为 %v\\n&quot;, a, a)\n    t :&#x3D; reflect.TypeOf(a)\n    v :&#x3D; reflect.ValueOf(a)\n    fmt.Printf(&quot;从接口变量到反射对象：Type对象类型为 %T\\n&quot;, t)\n    fmt.Printf(&quot;从接口变量到反射对象：Value对象类型为 %T\\n&quot;, v)\n&#125;\n\n可以看到，使用 reflect.TypeOf() 和 reflect.ValueOf() 方法完成了从接口类型变量到反射对象的转换。在这里说接口类型是因为 TypeOf 和 ValueOf 两个函数接收的是 interface&#123;&#125; 空接口类型， Go 语言函数都是值传递，会将类型隐式转换成接口类型。\n反射第二定律\n\n\n\n\n\n\n\n\nReflection goes from reflection object to interface value.\n反射第二定律：反射可以将“反射类型对象”转换为“接口类型变量”\n第二定律刚好和第一定律相反，第一定律讲的是从接口变量到反射对象的转换，而第二定律讲的是从反射对象到接口变量的转换。\n一个 reflect.Value 类型的变量，我们可以使用 Interface 方法恢复其接口类型的值。事实上，这个方法会把 type 和 value 信息打包并填充到一个接口变量中，然后返回。\n其函数声明如下：\nGO\n&#x2F;&#x2F; Interface returns v&#39;s current value as an interface&#123;&#125;.\n&#x2F;&#x2F; It is equivalent to:\n&#x2F;&#x2F;    var i interface&#123;&#125; &#x3D; (v&#39;s underlying value)\n&#x2F;&#x2F; It panics if the Value was obtained by accessing\n&#x2F;&#x2F; unexported struct fields.\nfunc (v Value) Interface() (i interface&#123;&#125;) &#123;\n    return valueInterface(v, true)\n&#125;\n最后转换后的对象静态类型为 interface&#123;&#125;，我们可以使用类型断言转换为原始类型。\nGO\npackage main\n\nimport (\n    &quot;fmt&quot;\n    &quot;reflect&quot;\n)\n\nfunc main() &#123;\n    var a interface&#123;&#125; &#x3D; 3.14\n\n    fmt.Printf(&quot;接口变量的类型为 %T ，值为 %v\\n&quot;, a, a)\n\n    t :&#x3D; reflect.TypeOf(a)\n    v :&#x3D; reflect.ValueOf(a)\n\n    &#x2F;&#x2F; 反射第一定律\n    fmt.Printf(&quot;从接口变量到反射对象：Type对象类型为 %T\\n&quot;, t)\n    fmt.Printf(&quot;从接口变量到反射对象：Value对象类型为 %T\\n&quot;, v)\n\n    &#x2F;&#x2F; 反射第二定律\n    i :&#x3D; v.Interface()\n    fmt.Printf(&quot;从反射对象到接口变量：对象类型为 %T，值为 %v\\n&quot;, i, i)\n    &#x2F;&#x2F; 使用类型断言进行转换\n    x :&#x3D; v.Interface().(float64)\n    fmt.Printf(&quot;x 类型为 %T，值为 %v\\n&quot;, x, x)\n&#125;\n\n反射第三定律\n\n\n\n\n\n\n\n\nTo modify a reflection object, the value must be settable.\n反射第三定律：如果要修改“反射类型对象”其值必须是“可写的”\n我们首先来看一看下面这段代码：\nGO\npackage main\n\nimport &quot;reflect&quot;\n\nfunc main() &#123;\n    var a float64 &#x3D; 3.14\n    v :&#x3D; reflect.ValueOf(a)\n    v.SetFloat(2.1)\n&#125;\n运行该代码段将会抛出异常：\nGO\npanic: reflect: reflect.Value.SetFloat using unaddressable value\n这里你可能会疑惑，为什么这里会抛出寻址的异常，其实是因为这里的变量 v 是“不可写的”。settable（“可写性”）是反射类型变量的一个属性，但也不是说所有的反射类型变量都有这个属性。\n要想知道一个 reflect.Value 类型变量的“可写性”，我们可以使用 CanSet 方法来进行检查：\nGO\npackage main\n\nimport (\n    &quot;fmt&quot;\n    &quot;reflect&quot;\n)\n\nfunc main() &#123;\n    var a float64 &#x3D; 3.14\n    v :&#x3D; reflect.ValueOf(a)\n    fmt.Println(&quot;是否可写:&quot;, v.CanSet())\n&#125;\n可以看到，我们这个变量 v 是不可写的。对于一个不可写的变量，使用 Set 方法会报错。这里实质上还是 Go 语言里的函数都是值传递问题，想象一下这里传递给 reflect.ValueOf 函数的是变量 a 的一个拷贝，而非 a 本身，所以如果对反射对象进行更新，其原始变量 a 根本不会受到影响，所以是不合法的，“可写性”就是为了避免这个问题而设计出来的。\n所以，要让反射对象具备“可写性”，一定要注意创建反射对象时要传入变量的指针，于是乎我们修改代码如下：\nGO\npackage main\n\nimport (\n    &quot;fmt&quot;\n    &quot;reflect&quot;\n)\n\nfunc main() &#123;\n    var a float64 &#x3D; 3.14\n    v :&#x3D; reflect.ValueOf(&amp;a)\n    fmt.Println(&quot;是否可写:&quot;, v.CanSet())\n&#125;\n但运行该程序还是会输出不可写，因为事实上我们这里要修改的是该指针指向的数据，使用还要使用 Value 类型的 Elem() 方法，对指针进行“解引用”，该方法返回指针指向的数据。\nGO\npackage main\n\nimport (\n    &quot;fmt&quot;\n    &quot;reflect&quot;\n)\n\nfunc main() &#123;\n    var a float64 &#x3D; 3.14\n    v :&#x3D; reflect.ValueOf(&amp;a).Elem()\n    fmt.Println(&quot;是否可写:&quot;, v.CanSet())\n\n    v.SetFloat(2)\n    fmt.Println(v)\n&#125;\n结构体里的 Tag 标签在之前结构体的章节里我们讲过结构体的使用，一般情况下，我们定义结构体每个字段都是由字段名字以及字段的类型构成，例如：\nGO\ntype Book struct &#123;\n    Name   string\n    Target string\n    Spend  int\n&#125;\nTag 的使用但这一章要讲的是在字段上增加一个属性，这个属性是用反引号括起来的一个字符串，我们称之为 Tag(标签) 。例如：\nGO\ntype Person struct &#123;\n    Name   string &#96;json:&quot;name&quot;&#96;\n    Target string &#96;json:&quot;target&quot;&#96;\n    Spend  int    &#96;json:&quot;spend,omitempty&quot;&#96;\n&#125;\n结构体的 Tag 可以是任意的字符串面值，但是通常是一系列用空格分隔的 key:&quot;value&quot; 键值对序列；因为值中含有双引号字符，因此成员 Tag 一般用原生字符串面值的形式书写。一般我们常用在 JSON 的数据处理方面。\njson 开头键名对应的值用于控制 encoding/json 包的编码和解码的行为，并且 encoding/… 下面其它的包也遵循这个约定。Tag 中 json 对应值的第一部分用于指定 JSON 对象的名字，比如将 Go 语言中的 TotalCount 成员对应到 JSON 中的 total_count 对象。\n上面的例子中 gender 字段的 Tag 还带了一个额外的 omitempty 选项，表示当 Go 语言结构体成员为空或零值时不生成该 JSON 对象（这里 false 为零值）。例如：\npackage main\n\nimport (\n\t&quot;encoding&#x2F;json&quot;\n\t&quot;fmt&quot;\n)\n\ntype Book struct &#123;\n\tName   string &#96;json:&quot;name&quot;&#96;\n\tTarget string &#96;json:&quot;target&quot;&#96;\n\tSpend  int    &#96;json:&quot;spend,omitempty&quot;&#96;\n&#125;\n\nfunc main() &#123;\n\t&#x2F;&#x2F; Book 1 without Spend\n\tbook1 :&#x3D; Book&#123;\n\t\tName:   &quot;仿生程序员会梦见代码羊吗&quot;,\n\t\tTarget: &quot;赛博朋克&quot;,\n\t&#125;\n\t&#x2F;&#x2F; 结构体转为 JSON\n\tdata1, err :&#x3D; json.Marshal(book1)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n\t&#x2F;&#x2F; book1 won&#39;t print Spend attribute\n\tfmt.Printf(&quot;%s\\n&quot;, data1)\n\n\t&#x2F;&#x2F; Book 2 have Gender attribute\n\tbook2 :&#x3D; Book&#123;\n\t\tName:   &quot;献给阿尔吉侬的花束&quot;,\n\t\tTarget: &quot;科幻&quot;,\n\t\tSpend:  9,\n\t&#125;\n\t&#x2F;&#x2F; 结构体转为 JSON\n\tdata2, err :&#x3D; json.Marshal(book2)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n\t&#x2F;&#x2F; person2 will print Gender attribute\n\tfmt.Printf(&quot;%s\\n&quot;, data2)\n&#125;\n\n\n可以看到，因为 Spend 字段里有 omitempty 属性，因此 encoding/json 在将此结构体对象转化为 JSON 字符串时，发现对象里面的 Spend 为 false ， 0 ，空指针，空接口，空数组，空切片，空映射，空字符串中的一种，就会被忽略。\nTag 的获取Tag 的格式上面已经说了，它是由反引号括起来的一系列用空格分隔的 key:&quot;value&quot; 键值对序列：\nGO\n&#96;key1:&quot;value1&quot; key2:&quot;value2&quot; key3:&quot;value3&quot;&#96;\n那么我们如何获取到结构体中的 Tag 呢？这里我们用反射的方法。\n使用反射的方法获取 Tag 步骤如下：\n\n获取字段\n获取 Tag\n获取键值对\n\n其中获取字段有三种方式，而获取键值对有两种方式。\nGO\n&#x2F;&#x2F; 三种获取 field\nfield :&#x3D; reflect.TypeOf(obj).FieldByName(&quot;Name&quot;)\nfield :&#x3D; reflect.ValueOf(obj).Type().Field(i)  &#x2F;&#x2F; i 表示第几个字段\nfield :&#x3D; reflect.ValueOf(&amp;obj).Elem().Type().Field(i)  &#x2F;&#x2F; i 表示第几个字段\n\n&#x2F;&#x2F; 获取 Tag\ntag :&#x3D; field.Tag\n\n&#x2F;&#x2F; 获取键值对\nlabelValue :&#x3D; tag.Get(&quot;label&quot;)\nlabelValue,ok :&#x3D; tag.Lookup(&quot;label&quot;)\n&#x2F;&#x2F; Get 当没有获取到对应 Tag 的内容，会返回空字符串\n下面是一个获取 Tag 以及键值对的例子：\nGO\npackage main\n\nimport (\n    &quot;fmt&quot;\n    &quot;reflect&quot;\n)\n\ntype Book struct &#123;\n    Name   string &#96;json:&quot;name&quot;&#96;\n    Target string &#96;json:&quot;target&quot;&#96;\n    Spend string &#96;json:&quot;spend,omitempty&quot;&#96;\n&#125;\n\nfunc main() &#123;\n    p :&#x3D; reflect.TypeOf(Book&#123;&#125;)\n    name, _ :&#x3D; p.FieldByName(&quot;Name&quot;)\n    tag :&#x3D; name.Tag\n    fmt.Println(&quot;Name Tag :&quot;, tag)\n    keyValue, _ :&#x3D; tag.Lookup(&quot;json&quot;)\n    fmt.Println(&quot;key: json, value:&quot;, keyValue)\n&#125;\n\n\n","slug":"GO3","date":"2022-11-03T14:55:49.000Z","categories_index":"编程语言","tags_index":"GO","author_index":"Algernon"},{"id":"5c84b4745a97bb70561ce70d97fa094d","title":"【GO语言编程】（二）","content":"第一个go程序注释package main   &#x2F;&#x2F; 声明 main 包\n\nimport &quot;fmt&quot;   &#x2F;&#x2F; 导入 fmt 包，打印字符串时需要用到\n\nfunc main()&#123;   &#x2F;&#x2F; 声明 main 主函数\n    fmt.Println(&quot;Hello, Go!&quot;)  &#x2F;&#x2F; 打印 Hello Go!\n&#125;\n与C语言一样，GO的注释分为两种：\n\n单行注释\n\nfmt.Println(&quot;Hello, Go!&quot;)  &#x2F;&#x2F; 这里的部分作为说明，一般不跨行\n\n多行注释\n\nfunc main() &#123;\n\t&#x2F;*\n\t\t以下两行代码都是将信息打印在屏幕上\n\t *&#x2F;\n\tfmt.Println(&quot;可爱淞淞超爱学习！&quot;)\n\tfmt.Printf(&quot;仿生程序员会梦见代码羊吗&quot;)\n&#125;\npackage，包的创建对于GO语言，package，也就是包，是其管理单位。每个GO源文件必须先声明它所属的包，所以我们会看到每个GO源文件的开头都是一个package声明。\npackage name   &#x2F;&#x2F;其中，package是声明 包 名的关键字，name则是包的名字\nGo 语言的包与文件夹是一一对应的，它具有以下几点特性：\n-在 一个目录下的同级文件属于同一个包。\n\n包的名称可以与其目录名不同。\nmain 包是 Go 语言程序的入口包，一个 Go 语言程序必须有且仅有一个 main 包。如果一个程序没有 main 包，那么编译时将会出错，无法生成可执行文件。import，包的导入import语句用于导入程序中所依赖的包，导入的包名使用双引号包围，格式如下：\n\nimport &quot;name&quot;   &#x2F;&#x2F;  import 是导入包的关键字，name 为所导入包的名字。\n另外有一点需要注意，导入的包中不能含有代码中没有使用到的包，否则 Go 编译器会报编译错误，例如imported and not used: &quot;xxx&quot;，”xxx” 表示包名。\n变量与常量变量声明变量的一般形式是使用 var 关键字。\n\n方法一：声明一个变量, 默认的值是 0\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main()&#123;\n    &#x2F;&#x2F; 方法一：声明一个变量, 默认的值是0\n    var a int\n    fmt.Println(&quot;a &#x3D; &quot;, a)\n    fmt.Printf(&quot;a的类型是: %T\\n&quot;, a)\n&#125;\n\n\n方法二：声明一个变量, 并初始化一个值\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main()&#123;\n    &#x2F;&#x2F; 方法二：声明一个变量, 初始化一个值\n    var b int &#x3D; 100\n    fmt.Printf(&quot;b &#x3D; %d, type of b &#x3D; %T\\n&quot;, b, b)\n\n    var bb string &#x3D; &quot;千朵玫瑰带来的黎明&quot;\n    fmt.Printf(&quot;bb &#x3D; %s, bb的类型是: %T\\n&quot;, bb, bb)\n&#125;\n\n\n\n\n方法三：在初始化的时候，可以省去数据类型，通过值去自动匹配当前变量的数据类型\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main()&#123;\n\n    &#x2F;&#x2F; 方法三：在初始化的时候，可以省去数据类型，通过值去自动匹配当前变量的数据类型\n    var c &#x3D; 100\n    fmt.Printf(&quot;c &#x3D; %d, type of c &#x3D; %T\\n&quot;, c, c)\n\n    var cc &#x3D; &quot;赤土之王与三朝圣者&quot;\n    fmt.Printf(&quot;cc &#x3D; %s, cc的类型是: %T\\n&quot;, cc, cc)\n&#125;\n\n\n\n\n短声明，只能在函数内\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main()&#123;\n\n    &#x2F;&#x2F; 方法四：(常用的方法) 省去var关键字，使用:&#x3D;，既推导数据类型又赋值\n    &#x2F;&#x2F; 注: 短声明是在函数或方法内部使用, 不支持全局变量声明！！！！\n    e :&#x3D; 100\n    fmt.Printf(&quot;e &#x3D; %d, e的类型是: %T\\n&quot;, e, e)\n\n    f :&#x3D; &quot;为了果实、种子还有树&quot;\n    fmt.Printf(&quot;f &#x3D; %s, f的类型是: %T\\n&quot;, f, f)\n&#125;\n\n多变量声明\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main()&#123;\n\t&#x2F;&#x2F; 声明多个变量\n    var xx, yy int &#x3D; 100, 200\n    var kk, wx &#x3D; 300, &quot;write_code_666(电子羊)&quot;\n\n    var (\n        nn int &#x3D; 100\n        mm bool &#x3D; true\n    )\n&#125;\n\n\n常量常量（constant）表示固定的值。在计算机程序运行时，不会被程序修改的。\n\n定义一个常量，使用 const 关键字。常量定义的时候就要赋值。\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main()&#123;\n    &#x2F;&#x2F; 常量(只读属性)\n    const length int &#x3D; 10\n    &#x2F;&#x2F; length &#x3D; 100  &#x2F;&#x2F; 常量是不允许被修改的\n    fmt.Println(&quot;length &#x3D; &quot;, length)\n&#125;\n\n\n\n\n使用 const 来定义枚举类型\npackage main\n\nimport &quot;fmt&quot;\n\n&#x2F;&#x2F; const来定义枚举类型\nconst (\n    BEIJING &#x3D; 0\n    SHANGHAI &#x3D; 1\n    SHENZHEN &#x3D; 2\n)\n\nfunc main() &#123;\n    fmt.Println(&quot;BEIJING &#x3D; &quot;, BEIJING)      &#x2F;&#x2F; 0\n    fmt.Println(&quot;SHANGHAI &#x3D; &quot;, SHANGHAI)    &#x2F;&#x2F; 1\n    fmt.Println(&quot;SHENZHEN &#x3D; &quot;, SHENZHEN)    &#x2F;&#x2F; 2\n&#125;\n\n\niota\niota 是 Go 语言的常量计数器,只能在常量的表达式中使用。iota 在 const 关键字出现时将被重置为 0(const 内部的第一行之前)，const 中每新增一行常量声明将使 iota 计数一次(iota 可理解为 const 语句块中的行索引)。使用 iota 能简化定义，在定义枚举时很有用\npackage main\n\nimport &quot;fmt&quot;\n\n&#x2F;&#x2F; const来定义枚举类型\nconst (\n    &#x2F;&#x2F; 可以在const()中添加一个关键字iota, 每行的iota都会累加1, 第一行的iota默认是0\n    BEIJING &#x3D; 10 * iota   &#x2F;&#x2F; iota &#x3D; 0\n    SHANGHAI\t\t\t  &#x2F;&#x2F; iota &#x3D; 1\n    SHENZHEN\t\t\t  &#x2F;&#x2F; iota &#x3D; 2\n)\n\nfunc main() &#123;\n    fmt.Println(&quot;BEIJING &#x3D; &quot;, BEIJING)      &#x2F;&#x2F; 0\n    fmt.Println(&quot;SHANGHAI &#x3D; &quot;, SHANGHAI)    &#x2F;&#x2F; 10\n    fmt.Println(&quot;SHENZHEN &#x3D; &quot;, SHENZHEN)    &#x2F;&#x2F; 20\n&#125;\n\n\n\n关键字关键字是 Go 语言中预先保留的单词，在程序中有特殊含义，不能用来定义变量或常量。\nGo 语言中有 25 个关键字：\n\n\n\n\n\n\n\n\n\n\n\n\n\nbreak\ndefault\nfunc\ninterface\nselect\n\n\ncase\ndefer\ngo\nmap\nstruct\n\n\nchan\nelse\ngoto\npackage\nswitch\n\n\nconst\nfallthrough\nif\nrange\ntype\n\n\ncontinue\nfor\nimport\nreturn\nvar\n\n\n\n\n基础数据类型与C语言基本相同\n整型package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;math&quot;\n\n)\n\n&#x2F;&#x2F; 有符号整型\nfunc Integer() &#123;\n\tvar num8 int8 &#x3D; 127\n\tvar num16 int16 &#x3D; 32767\n\tvar num32 int32 &#x3D; math.MaxInt32\n\tvar num64 int64 &#x3D; math.MaxInt64\n\tvar num int &#x3D; math.MaxInt\n\tfmt.Printf(&quot;num8的类型是 %T, num8的大小 %d, num8是 %d\\n&quot;,\n\t\tnum8, unsafe.Sizeof(num8), num8)\n\tfmt.Printf(&quot;num16的类型是 %T, num16的大小 %d, num16是 %d\\n&quot;,\n\t\tnum16, unsafe.Sizeof(num16), num16)\n\tfmt.Printf(&quot;num32的类型是 %T, num32的大小 %d, num32是 %d\\n&quot;,\n\t\tnum32, unsafe.Sizeof(num32), num32)\n\tfmt.Printf(&quot;num64的类型是 %T, num64的大小 %d, num64是 %d\\n&quot;,\n\t\tnum64, unsafe.Sizeof(num64), num64)\n\tfmt.Printf(&quot;num的类型是 %T, num的大小 %d, num是 %d\\n&quot;,\n\t\tnum, unsafe.Sizeof(num), num)\n&#125;\n\n&#x2F;&#x2F; 无符号整型\nfunc unsignedInteger() &#123;\n\tvar num8 uint8 &#x3D; 128\n\tvar num16 uint16 &#x3D; 32768\n\tvar num32 uint32 &#x3D; math.MaxUint32\n\tvar num64 uint64 &#x3D; math.MaxUint64\n\tvar num uint &#x3D; math.MaxUint\n\tfmt.Printf(&quot;num8的类型是 %T, num8的大小 %d, num8是 %d\\n&quot;,\n\t\tnum8, unsafe.Sizeof(num8), num8)\n\tfmt.Printf(&quot;num16的类型是 %T, num16的大小 %d, num16是 %d\\n&quot;,\n\t\tnum16, unsafe.Sizeof(num16), num16)\n\tfmt.Printf(&quot;num32的类型是 %T, num32的大小 %d, num32是 %d\\n&quot;,\n\t\tnum32, unsafe.Sizeof(num32), num32)\n\tfmt.Printf(&quot;num64的类型是 %T, num64的大小 %d, num64是 %d\\n&quot;,\n\t\tnum64, unsafe.Sizeof(num64), num64)\n\tfmt.Printf(&quot;num的类型是 %T, num的大小 %d, num是 %d\\n&quot;,\n\t\tnum, unsafe.Sizeof(num), num)\n&#125;\n\nfunc main() &#123;\n\tInteger()\n\tprintln(&quot;---------------------------------------&quot;)\n\tunsignedInteger()\n&#125;\n\n\n除非对整型的大小有特定的需求，否则你通常应该使用 int 表示整型宽度，在 32 位系统下是 32 位，而在 64 位系统下是 64 位。表示范围：在 32 位系统下是 -2147483648 ~ 2147483647 ，而在 64 位系统是 -9223372036854775808 ~ 9223372036854775807 。\n对于 int8 ， int16 等这些类型后面有跟一个数值的类型来说，它们能表示的数值个数是固定的。所以，在有的时候：例如在二进制传输、读写文件的结构描述(为了保持文件的结构不会受到不同编译目标平台字节长度的影响)等情况下，使用更加精确的 int32 和 int64 是更好的。\n\n浮点型浮点型表示存储的数据是实数，如 3.145。关于浮点型的说明，如表所示。\n\n\n\n\n类型\n字节数\n说明\n\n\n\n\nfloat32\n4\n32 位的浮点型\n\n\nfloat64\n8\n64 位的浮点型\n\n\n\n\n示例程序：\npackage main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;math&quot;\n\n)\nfunc showFloat() &#123;\n\tvar num1 float32 &#x3D; math.MaxFloat32\n\tvar num2 float64 &#x3D; math.MaxFloat64\n\tfmt.Printf(&quot;num1的类型是%T,num1是%g\\n&quot;, num1, num1)\n\tfmt.Printf(&quot;num2的类型是%T,num1是%g\\n&quot;, num2, num2)\n&#125;\n\nfunc main() &#123;\n     showFloat()\n&#125;\n\n\n通过上面的程序，我们知道浮点数能表示的数值很大，但是浮点数的精度却没有那么大：\nfloat32 的精度只能提供大约 6 个十进制数(表示小数点后 6 位)的精度。\nfloat64 的精度能提供大约 15 个十进制数(表示小数点后 15 位)的精度。\n\n\n\n字符类型字符串中的每一个元素叫作“字符”，定义字符时使用单引号。Go 语言的字符有两种，如表所示。\n\n\n\n\n类 型\n字 节 数\n说 明\n\n\n\n\nbyte\n1\n表示 UTF-8 字符串的单个字节的值，表示的是 ASCII 码表中的一个字符，uint8 的别名类型\n\n\nrune\n4\n表示单个 unicode 字符，int32 的别名类型\n\n\n\n\n声明示例如下：\npackage main\n\nimport &quot;fmt&quot;\nimport &quot;unsafe&quot;\n\nfunc showChar() &#123;\n     var x byte &#x3D; 65\n     var y uint8 &#x3D; 65\n     fmt.Printf(&quot;x &#x3D; %c\\n&quot;, x)   &#x2F;&#x2F; x &#x3D; A\n     fmt.Printf(&quot;y &#x3D; %c\\n&quot;, y)   &#x2F;&#x2F; y &#x3D; A\n&#125;\n\nfunc sizeOfChar() &#123;\n    var x byte &#x3D; 65\n    fmt.Printf(&quot;x &#x3D; %c\\n&quot;, x)\n    fmt.Printf(&quot;x 占用 %d 个字节\\n&quot;, unsafe.Sizeof(x))\n\n    var y rune &#x3D; &#39;A&#39;\n    fmt.Printf(&quot;y &#x3D; %c\\n&quot;, y)\n    fmt.Printf(&quot;y 占用 %d 个字节\\n&quot;, unsafe.Sizeof(y))\n&#125;\n\nfunc main() &#123;\n    showChar();\n    sizeOfChar();\n&#125;\n\nbyte 类型只能表示 28个值，所以你想表示其他一些值，例如中文的话，就得使用 rune 类型\n  var y rune &#x3D; &#39;原&#39;\n字符串字符串在 Go 语言中是以基本数据类型出现的，使用字符串就像使用其他原生基本数据类型 int、float32、float64、bool 一样。\n示例程序：\nvar study string  \t \t\t&#x2F;&#x2F; 定义名为str的字符串类型变量\nstudy &#x3D; &quot;《阿赫玛尔的故事 》&quot;\t\t&#x2F;&#x2F; 将变量赋值\n\nstudy2 :&#x3D; &quot;《森林书》&quot;\t\t&#x2F;&#x2F; 以自动推断方式初始化\n有些字符串没有现成的文字代号，所以只能用转义字符来表示。常用的转义字符如表所示。\n\n\n\n\n转 义 字 符\n含 义\n\n\n\n\n\\r\n回车符 return，返回行首\n\n\n\\n\n换行符 new line, 直接跳到下一行的同列位置\n\n\n\\t\n制表符 TAB\n\n\n\\&#39;\n单引号\n\n\n\\&quot;\n双引号\n\n\n\\\\\n反斜杠\n\n\n\n\n定义多行字符串的方法如下。\n\n双引号书写字符串被称为字符串字面量（string literal），这种字面量不能跨行。\n多行字符串需要使用反引号“`”，多用于内嵌源码和内嵌数据。\n在反引号中的所有代码不会被编译器识别，而只是作为字符串的一部分。\n\n多行字符串定义方式如例所示：\npackage main\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n  var s1 string\n\ts1 &#x3D; &#96;\n    \t\tstudy :&#x3D; &#39;你好，谢谢，最后是再见&#39;\n    \t\tfmt.Println(study)\n\t\t\t&#96;\n\tfmt.Println(s1)\n&#125;\n\n布尔类型关于 布尔(bool) 类型，即两个值：true 或者 false 。\n示例程序：\nfunc showBool()&#123;\n\ta :&#x3D; true\n\tb :&#x3D; false\n\tfmt.Println(&quot;a&#x3D;&quot;, a)\n\tfmt.Println(&quot;b&#x3D;&quot;, b)\n\tfmt.Println(&quot;true &amp;&amp; false &#x3D; &quot;, a &amp;&amp; b)\n\tfmt.Println(&quot;true || false &#x3D; &quot;, a || b)\n&#125;\n\nfunc main() &#123;\n    showBool()\n&#125;\nTip：\n\n如果你学过其他编程语言或许会发现，布尔型可以参与数值运算，也可以与其他类型进行转换。但是在 Go 中，真值是用 true 表示，并且 不与 1 相等；同样的，假值是用 false 表示，并且 不与 0 相等。\n\n复数型复数型用于表示数学中的复数，如 1+2j、1-2j、-1-2j 等。在 Go 语言中提供了两种精度的复数类型：complex64 和 complex128 ，分别对应 float32 和 float64 两种浮点数精度，如表所示。\n\n\n\n\n类 型\n字 节 数\n说 明\n\n\n\n\ncomplex64\n8\n64 位的复数型，由 float32 类型的实部和虚部联合表示\n\n\ncomplex128\n16\n128 位的复数型，由 float64 类型的实部和虚部联合表示\n\n\n\n\n示例程序：\nfunc showComplex() &#123;\n\t&#x2F;&#x2F; 内置的 complex 函数用于构建复数\n\tvar x complex64 &#x3D; complex(1, 2)\n\tvar y complex128 &#x3D; complex(3, 4)\n\tvar z complex128 &#x3D; complex(5, 6)\n\tfmt.Println(&quot;x &#x3D; &quot;, x)\n\tfmt.Println(&quot;y &#x3D; &quot;, y)\n\tfmt.Println(&quot;z &#x3D; &quot;, z)\n\n\t&#x2F;&#x2F; 内建的 real 和 imag 函数分别返回复数的实部和虚部\n\tfmt.Println(&quot;real(x) &#x3D; &quot;, real(x))\n\tfmt.Println(&quot;imag(x) &#x3D; &quot;, imag(x))\n\tfmt.Println(&quot;y * z &#x3D; &quot;, y*z)\n&#125;\n\nfunc main() &#123;\n   showComplex()\n&#125;\n\n\n当然，我们可以对声明进行简化，使用自然的方式书写复数：\nx :&#x3D; 1 + 2i\ny :&#x3D; 3 + 4i\nz :&#x3D; 5 + 6i\n\n\n格式化输出\n\n\n\n%%\n一个%字面量\n\n\n\n\n%b\n一个二进制整数值(基数为 2)，或者是一个(高级的)用科学计数法表示的指数为 2 的浮点数\n\n\n%c\n字符型。可以把输入的数字按照 ASCII 码相应转换为对应的字符\n\n\n格式\n含义\n\n\n%d\n一个十进制数值(基数为 10)\n\n\n%f\n以标准记数法表示的浮点数或者复数值\n\n\n%o\n一个以八进制表示的数字(基数为 8)\n\n\n%p\n以十六进制(基数为 16)表示的一个值的地址，前缀为 0x,字母使用小写的 a-f 表示\n\n\n%q\n使用 Go 语法以及必须时使用转义，以双引号括起来的字符串或者字节切片[]byte，或者是以单引号括起来的数字\n\n\n%s\n字符串。输出字符串中的字符直至字符串中的空字符（字符串以’\\0‘结尾，这个’\\0’即空字符）\n\n\n%t\n以 true 或者 false 输出的布尔值\n\n\n%T\n使用 Go 语法输出的值的类型\n\n\n%x\n以十六进制表示的整型值(基数为十六)，数字 a-f 使用小写表示\n\n\n%X\n以十六进制表示的整型值(基数为十六)，数字 A-F 使用小写表示\n\n\n\n\n容器类型数组数组 是一个由 固定长度 的特定类型元素组成的序列，一个数组可以由零个或多个元素组成。因为数组的长度是固定的，因此在 Go 语言中很少直接使用数组。和数组对应的类型是 slice(切片) ，它是可以动态的增长和收缩的序列， slice 功能也更灵活，下面我们再讨论 slice 。\n数组声明可以使用 [n]Type 来声明一个数组。其中 n 表示数组中元素的数量， Type 表示每个元素的类型。\npackage main\n\nimport &quot;fmt&quot;\n\nfunc test01() &#123;\n\t&#x2F;&#x2F; 声明时没有指定数组元素的值, 默认为零值\n\tvar arr [5]int\n\tfmt.Println(arr)\n\n\tarr[0] &#x3D; 1\n\tarr[1] &#x3D; 2\n\tarr[2] &#x3D; 3\n\tfmt.Println(arr)\n&#125;\n\nfunc test02() &#123;\n\t&#x2F;&#x2F; 直接在声明时对数组进行初始化\n\tvar arr1 &#x3D; [5]int&#123;15, 20, 25, 30, 35&#125;\n\tfmt.Println(arr1)\n\n\t&#x2F;&#x2F; 使用短声明\n\tarr2 :&#x3D; [5]int&#123;15, 20, 25, 30, 35&#125;\n\tfmt.Println(arr2)\n\n\t&#x2F;&#x2F; 部分初始化, 未初始化的为零值\n\tarr3 :&#x3D; [5]int&#123;15, 20&#125; &#x2F;&#x2F; [15 20 0 0 0]\n\tfmt.Println(arr3)\n\n\t&#x2F;&#x2F; 可以通过指定索引，方便地对数组某几个元素赋值\n\tarr4 :&#x3D; [5]int&#123;1: 100, 4: 200&#125;\n\tfmt.Println(arr4) &#x2F;&#x2F; [0 100 0 0 200]\n\n\t&#x2F;&#x2F; 直接使用 ... 让编译器为我们计算该数组的长度\n\tarr5 :&#x3D; [...]int&#123;15, 20, 25, 30, 35, 40&#125;\n\tfmt.Println(arr5)\n&#125;\n\nfunc test03() &#123;\n\t&#x2F;&#x2F; 特别注意数组的长度是类型的一部分，所以 [3]int 和 [5]int 是不同的类型\n\tarr1 :&#x3D; [3]int&#123;15, 20, 25&#125;\n\tarr2 :&#x3D; [5]int&#123;15, 20, 25, 30, 35&#125;\n\tfmt.Printf(&quot;type of arr1 is %T\\n&quot;, arr1)\n\tfmt.Printf(&quot;type of arr2 is %T\\n&quot;, arr2)\n&#125;\n\nfunc test04() &#123;\n\t&#x2F;&#x2F; 定义多维数组\n\tarr :&#x3D; [3][2]string&#123;\n\t\t&#123;&quot;1&quot;, &quot;你好&quot;&#125;,\n\t\t&#123;&quot;2&quot;, &quot;谢谢&quot;&#125;,\n\t\t&#123;&quot;3&quot;, &quot;最后是 再见&quot;&#125;&#125;\n\tfmt.Println(arr) &#x2F;&#x2F; [[15 20] [25 22] [25 22]]\n&#125;\n\nfunc main() &#123;\n\ttest01()\n\ttest02()\n\ttest03()\n\ttest04()\n&#125;\n数组长度使用内置的 len 函数将返回数组中元素的个数，即数组的长度。\nfunc arrLength() &#123;\n\tarr :&#x3D; [...]string&#123;&quot;为了果实&quot;, &quot;种子&quot;, &quot;还有树&quot;&#125;\n\tfmt.Println(&quot;数组的长度是:&quot;, len(arr)) &#x2F;&#x2F;数组的长度是: 3\n&#125;\n\n数组遍历使用 for range 循环可以获取数组每个索引以及索引上对应的元素。\nfunc showArr() &#123;\n\tarr :&#x3D; [...]string&#123;&quot;你好&quot;, &quot;谢谢&quot;, &quot;最后是再见&quot;&#125;\n\tfor index, value :&#x3D; range arr &#123;\n\t\tfmt.Printf(&quot;arr[%d]&#x3D;%s\\n&quot;, index, value)\n\t&#125;\n\n\tfor _, value :&#x3D; range arr &#123;\n\t\tfmt.Printf(&quot;value&#x3D;%s\\n&quot;, value)\n\t&#125;\n&#125;\n\n数组是值类型Go 中的数组是值类型而不是引用类型。当数组赋值给一个新的变量时，该变量会得到一个原始数组的一个副本。如果对新变量进行更改，不会影响原始数组。\nfunc arrByValue() &#123;\n\tarr :&#x3D; [...]string&#123;&quot;兰拉娜&quot;, &quot;兰罗摩&quot;, &quot;兰百梨迦&quot;&#125;\n\tcopy :&#x3D; arr\n\tcopy[0] &#x3D; &quot;Golang&quot;\n\tfmt.Println(arr)\n\tfmt.Println(copy)\n&#125;\n\n切片(Slice)切片是对数组的一个连续片段的引用，所以切片是一个引用类型。切片 本身不拥有任何数据，它们只是对现有数组的引用，每个切片值都会将数组作为其底层的数据结构。slice 的语法和数组很像，只是没有固定长度而已。\n创建切片使用 []Type 可以创建一个带有 Type 类型元素的切片。\n&#x2F;&#x2F; 声明整型切片\nvar numList []int\n\n&#x2F;&#x2F; 声明一个空切片\nvar numListEmpty &#x3D; []int&#123;&#125;\n你也可以使用 make 函数构造一个切片，格式为 make([]Type, size, cap) 。\nnumList :&#x3D; make([]int, 3, 5)\n当然，我们可以通过对数组进行片段截取创建一个切片。\narr :&#x3D; [5]string&#123;&quot;兰罗摩&quot;, &quot;兰穆护昆达&quot;, &quot;兰利遮&quot;, &quot;兰娜库拉&quot;, &quot;兰宁巴&quot;&#125;\nvar s1 &#x3D; arr[1:4]\nfmt.Println(arr) &#x2F;&#x2F;\nfmt.Println(s1)  &#x2F;&#x2F;\n\n切片的长度和容量一个 slice 由三个部分构成：指针 、 长度 和 容量 。指针指向第一个 slice 元素对应的底层数组元素的地址，要注意的是 slice 的第一个元素并不一定就是数组的第一个元素。长度对应 slice 中元素的数目；长度不能超过容量，容量一般是从 slice 的开始位置到底层数据的结尾位置。简单的讲，容量就是从创建切片索引开始的底层数组中的元素个数，而长度是切片中的元素个数。\n内置的 len 和 cap 函数分别返回 slice 的长度和容量。\ns :&#x3D; make([]string, 3, 5)\nfmt.Println(len(s)) &#x2F;&#x2F; 3\nfmt.Println(cap(s)) &#x2F;&#x2F; 5\n如果切片操作超出上限将导致一个 panic 异常。\ns :&#x3D; make([]int, 3, 5)\nfmt.Println(s[10]) &#x2F;&#x2F;panic: runtime error: index out of range [10] with length 3\nTips:\n\n由于 slice 是引用类型，所以你不对它进行赋值的话，它的默认值是 nil\nvar numList []int\nfmt.Println(numList &#x3D;&#x3D; nil) &#x2F;&#x2F; true\n\n切片之间不能比较，因此我们不能使用 == 操作符来判断两个 slice 是否含有全部相等元素。特别注意，如果你需要测试一个 slice 是否是空的，使用 len(s) == 0 来判断，而不应该用 s == nil 来判断。\n\n\n切片元素的修改切片自己不拥有任何数据。它只是底层数组的一种表示。对切片所做的任何修改都会反映在底层数组中。\nfunc modifySlice() &#123;\n\tvar arr &#x3D; [...]string&#123;&quot;正法炬书&quot;, &quot;水天供书&quot;, &quot;吉祥具书&quot;&#125;\n\ts :&#x3D; arr[:] &#x2F;&#x2F;[0:len(arr)]\n\tfmt.Println(arr) &#x2F;&#x2F;\n\tfmt.Println(s) &#x2F;&#x2F;\n\n\ts[0] &#x3D; &quot;森林书&quot;\n\tfmt.Println(arr) &#x2F;&#x2F;[\n\tfmt.Println(s) &#x2F;&#x2F;\n&#125;\n\n这里的 arr[:] 没有填入起始值和结束值，默认就是 0 和 len(arr) 。\n追加切片元素使用 append 可以将新元素追加到切片上。append 函数的定义是 func append(slice []Type, elems ...Type) []Type 。其中 elems ...Type 在函数定义中表示该函数接受参数 elems 的个数是可变的。这些类型的函数被称为可变函数。\n  func appendSliceData() &#123;\n\ts :&#x3D; []string&#123;&quot;终天的闭幕曲&quot;&#125;\n\tfmt.Println(s)\n\tfmt.Println(cap(s))\n\n\ts &#x3D; append(s, &quot;岩壑之崩&quot;)\n\tfmt.Println(s)\n\tfmt.Println(cap(s))\n\n\ts &#x3D; append(s, &quot;冰风回荡&quot;, &quot;冰封交响曲 &quot;)\n\tfmt.Println(s)\n\tfmt.Println(cap(s))\n\n\ts &#x3D; append(s, []string&#123;&quot;哀息之茧&quot;, &quot;燃尽之舞&quot;&#125;...)\n\tfmt.Println(s)\n\tfmt.Println(cap(s))\n&#125;\n\n当新的元素被添加到切片时，如果容量不足，会创建一个新的数组。现有数组的元素被复制到这个新数组中，并返回新的引用。现在新切片的容量是旧切片的两倍。\n多维切片类似于数组，切片也可以有多个维度。\nfunc mSlice() &#123;\n\tnumList :&#x3D; [][]string&#123;\n\t\t&#123;&quot;1&quot;, &quot;捕风的异乡人&quot;&#125;,\n\t\t&#123;&quot;2&quot;, &quot;辞别久远之躯&quot;&#125;,\n\t\t&#123;&quot;3&quot;, &quot;千手百眼天下人间&quot;&#125;,\n\t&#125;\n\tfmt.Println(numList)\n&#125;\n\nMap在 Go 语言中，map 是散列表(哈希表)的引用。它是一个拥有键值对元素的无序集合，在这个集合中，键是唯一的，可以通过键来获取、更新或移除操作。无论这个散列表有多大，这些操作基本上是通过常量时间完成的。所有可比较的类型，如 整型 ，字符串 等，都可以作为 key 。\n创建 Map使用 make 函数传入键和值的类型，可以创建 map 。具体语法为 make(map[KeyType]ValueType) 。\n&#x2F;&#x2F; 创建一个键类型为 string 值类型为 int 名为 scores 的 map\nscores :&#x3D; make(map[string]int)\nsteps :&#x3D; make(map[string]string)\n我们也可以用 map 字面值的语法创建 map ，同时还可以指定一些最初的 key/value ：\nvar steps2 map[string]string &#x3D; map[string]string&#123;\n\t\t&quot;第一步&quot;: &quot;穿越雾霭与森林&quot;,\n\t\t&quot;第二步&quot;: &quot;千朵玫瑰带来的黎明&quot;,\n\t\t&quot;第三步&quot;: &quot;赤土之王与三朝圣者&quot;,\n&#125;\nfmt.Println(steps2)\n\n或者\nsteps3 :&#x3D; map[string]string&#123;\n\t\t&quot;第一步&quot;: &quot;穿越雾霭与森林&quot;,\n\t\t&quot;第二步&quot;: &quot;千朵玫瑰带来的黎明&quot;,\n\t\t&quot;第三步&quot;: &quot;赤土之王与三朝圣者&quot;,\n&#125;\nfmt.Println(steps3)\nMap 操作\n添加元素\n&#x2F;&#x2F; 可以使用 &#96;map[key] &#x3D; value&#96; 向 map 添加元素。\nsteps3[&quot;第四步&quot;] &#x3D; &quot;总监&quot;\n\n更新元素\n&#x2F;&#x2F; 若 key 已存在，使用 map[key] &#x3D; value 可以直接更新对应 key 的 value 值。\nsteps3[&quot;第四步&quot;] &#x3D; &quot;CTO&quot;\n\n获取元素\n&#x2F;&#x2F; 直接使用 map[key] 即可获取对应 key 的 value 值,如果 key不存在,会返回其 value 类型的零值。\nfmt.Println(steps3[&quot;第四步&quot;] )\n\n删除元素\n&#x2F;&#x2F;使用 delete(map, key)可以删除 map 中的对应 key 键值对,如果 key 不存在,delete 函数会静默处理，不会报错。\ndelete(steps3, &quot;第四步&quot;)\n\n判断 key 是否存在\n&#x2F;&#x2F; 如果我们想知道 map 中的某个 key 是否存在，可以使用下面的语法：value, ok :&#x3D; map[key]\nv3, ok :&#x3D; steps3[&quot;第三步&quot;]\nfmt.Println(ok)\nfmt.Println(v3)\n\nv4, ok :&#x3D; steps3[&quot;第四步&quot;]\nfmt.Println(ok)\nfmt.Println(v4)\n\n\n这个语句说明 map 的下标读取可以返回两个值，第一个值为当前 key 的 value 值，第二个值表示对应的 key 是否存在，若存在 ok 为 true ，若不存在，则 ok 为 false 。\n\n遍历 map\n&#x2F;&#x2F; 遍历 map 中所有的元素需要用 for range 循环。\nfor key, value :&#x3D; range steps3 &#123;\n    fmt.Printf(&quot;key: %s, value: %d\\n&quot;, key, value)\n&#125;\n\n获取 map 长度\n&#x2F;&#x2F; 使用 len 函数可以获取 map 长度\nfunc createMap() &#123;\n  \t&#x2F;&#x2F;...\n     fmt.Println(len(steps3))    &#x2F;&#x2F; 4\n&#125;\n\n\nmap 是引用类型当 map 被赋值为一个新变量的时候，它们指向同一个内部数据结构。因此，改变其中一个变量，就会影响到另一变量。\nfunc mapByReference() &#123;\n\t\tsteps4 :&#x3D; map[string]string&#123;\n\t\t&quot;第一步&quot;: &quot;穿越雾霭与森林&quot;,\n\t\t&quot;第二步&quot;: &quot;千朵玫瑰带来的黎明&quot;,\n\t\t&quot;第三步&quot;: &quot;赤土之王与三朝圣者&quot;,\n\t&#125;\n\tfmt.Println(&quot;steps4: &quot;, steps4)\n\t\n\tnewSteps4 :&#x3D; steps4\n\tnewSteps4[&quot;第一步&quot;] &#x3D; &quot;穿越雾霭与烟林&quot;\n\tnewSteps4[&quot;第二步&quot;] &#x3D; &quot;花神之舞&quot;\n\tnewSteps4[&quot;第三步&quot;] &#x3D; &quot;千柱沙原&quot;\n\tfmt.Println(&quot;steps4: &quot;, steps4)\n  \n\tfmt.Println(&quot;newSteps4: &quot;, newSteps4)\n \n&#125;\n\n当 map 作为函数参数传递时也会发生同样的情况。\n指针指针也是一种类型，也可以创建变量，称之为指针变量。指针变量的类型为 *Type，该指针指向一个 Type 类型的变量。指针变量最大的特点就是存储的某个实际变量的内存地址，通过记录某个变量的地址，从而间接的操作该变量。\n\n创建指针创建指针有三种方法。\n\n首先定义普通变量，再通过获取该普通变量的地址创建指针：\nGO\n&#x2F;&#x2F; 定义普通变量 x\nx :&#x3D; &quot;可爱电子羊！&quot;\n&#x2F;&#x2F; 取普通变量 x 的地址创建指针 p\nptr :&#x3D; &amp;x\n fmt.Println(ptr)\n fmt.Println(*ptr)\n\n先创建指针并分配好内存，再给指针指向的内存地址写入对应的值：\nGO\n&#x2F;&#x2F; 创建指针\nptr2 :&#x3D; new(string)\n&#x2F;&#x2F; 给指针指向的内存地址写入对应的值\n*ptr2 &#x3D; &quot;更可爱的电子羊！！&quot;\nfmt.Println(ptr2)\nfmt.Println(*ptr2)\n\n首先声明一个指针变量，再从其他变量获取内存地址给指针变量：\nGO\n&#x2F;&#x2F; 定义变量 x2\nx2 :&#x3D; &quot;超可爱的仿生电子羊！！！&quot;\n&#x2F;&#x2F; 声明指针变量\nvar p *string\n&#x2F;&#x2F; 指针初始化\np &#x3D; &amp;x2\nfmt.Println(p)\n\n\n\nTip：\n上面举的创建指针的三种方法对学过 C 语言的人来说可能很简单（比如在下），但没学过指针相关知识的人可能不太明白，特别是上面代码中出现的指针操作符 &amp; 和 * 。\n\n&amp; 操作符可以从一个变量中取到其内存地址。\n* 操作符如果在赋值操作值的左边，指该指针指向的变量；* 操作符如果在赋值操作符的右边，指从一个指针变量中取得变量值，又称指针的解引用。\n\n通过下面的例子，你应该就会比较清楚的理解上面两个指针操作符了。\nGO\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n\tx :&#x3D; &quot;山巅雪国的记忆&quot;\n\tptr :&#x3D; &amp;x\n\tfmt.Println(&quot;x &#x3D; &quot;, x)   \n\tfmt.Println(&quot;*ptr &#x3D; &quot;, *ptr) \n\tfmt.Println(&quot;&amp;x &#x3D; &quot;, &amp;x) \n\tfmt.Println(&quot;ptr &#x3D; &quot;, ptr)   \n&#125;\n\n指针的类型*(指向变量值的数据类型) 就是对应的指针类型。\nGO\nfunc pointerType() &#123;\n\tmystr :&#x3D; &quot;雪葬的星银&quot;\n\tmyint :&#x3D; 1\n\tmybool :&#x3D; false\n\tmyfloat :&#x3D; 3.2\n\tfmt.Printf(&quot;type of &amp;mystr is :%T\\n&quot;, &amp;mystr)\n\tfmt.Printf(&quot;type of &amp;myint is :%T\\n&quot;, &amp;myint)\n\tfmt.Printf(&quot;type of &amp;mybool is :%T\\n&quot;, &amp;mybool)\n\tfmt.Printf(&quot;type of &amp;myfloat is :%T\\n&quot;, &amp;myfloat)\n&#125;\n\nfunc main() &#123;\n\t&#x2F;&#x2F;...\n\tpointerType()\n&#125;\n\n指针的零值如果指针声明后没有进行初始化，其默认零值是 nil\nGO\nfunc zeroPointer() &#123;\n\tx :&#x3D; &quot;这两周小组作业怎么这么多&quot;\n\tvar ptr *string\n\tfmt.Println(&quot;ptr is &quot;, ptr)\n\tptr &#x3D; &amp;x\n\tfmt.Println(&quot;ptr is &quot;, ptr)\n&#125;\nfunc main() &#123;\n\t&#x2F;&#x2F;...\n\tzeroPointer()\n&#125;\n\n函数传递指针参数在函数中对指针参数所做的修改，在函数返回后会保存相应的修改。\nGO\npackage main\n\nimport (\n\t&quot;fmt&quot;\n)\n\nfunc changeByPointer(value *int) &#123;\n\t*value &#x3D; 200\n&#125;\n\nfunc main() &#123;\n\tx3 :&#x3D; 99\n\tp3 :&#x3D; &amp;x3\n\tfmt.Println(&quot;执行changeByPointer函数之前p3是&quot;, *p3)\n\tchangeByPointer(p3)\n\tfmt.Println(&quot;执行changeByPointer函数之后p3是&quot;, *p3)\n&#125;\n\n运行程序输出如上，函数传入的是指针参数，即内存地址，所以在函数内的修改是在内存地址上的修改，在函数执行后还会保留结果。\n指针与切片切片与指针一样是引用类型，如果我们想通过一个函数改变一个数组的值，可以将该数组的切片当作参数传给函数，也可以将这个数组的指针当作参数传给函数。但 Go 中建议使用第一种方法，即将该数组的切片当作参数传给函数，因为这么写更加简洁易读。\nGO\npackage main\n\nimport &quot;fmt&quot;\n\n&#x2F;&#x2F; 使用切片\nfunc changeSlice(value []int) &#123;\n\tvalue[0] &#x3D; 200\n&#125;\n\n&#x2F;&#x2F; 使用数组指针\nfunc changeArray(value *[3]int) &#123;\n\t(*value)[0] &#x3D; 200\n&#125;\n\nfunc main() &#123;\n\tx :&#x3D; [3]int&#123;10, 20, 30&#125;\n\tchangeSlice(x[:])\n\tfmt.Println(x) &#x2F;&#x2F; [200 20 30]\n\n\ty :&#x3D; [3]int&#123;100, 200, 300&#125;\n\tchangeArray(&amp;y)\n\tfmt.Println(y) &#x2F;&#x2F; [200 200 300]\n&#125;\n\nGo 中不支持指针运算学过 C 语言的人肯定知道在 C 中支持指针的运算，例如：p++ ，但这在 Go 中是不支持的。\nGO\npackage main\n\nfunc main() &#123;\n\tx :&#x3D; [...]int&#123;20, 30, 40&#125;\n\tp :&#x3D; &amp;x\n\tp++ &#x2F;&#x2F; error\n&#125;\n结构体结构体(struct) 是一种聚合的数据类型，是由零个或多个任意类型的值聚合成的实体。每个值称为结构体的成员。学过 C 或 C++ 的人都知道结构体，但在 Go 中，没有像 C++ 中的 class 类的概念，只有 struct 结构体的概念，所以也没有继承。\n结构体的声明在 Go 语言 中使用下面的语法是对结构体的声明。\nGO\ntype struct_name struct &#123;\n    attribute_name1   attribute_type\n    attribute_name2   attribute_type\n    ...\n&#125;\n例如下面是定义一个名为 Lesson(课程) 的结构体。\nGO\ntype Lesson struct &#123;\n\tname   string &#x2F;&#x2F;名称\n\ttarget string &#x2F;&#x2F;学习目标\n\tspend  int    &#x2F;&#x2F;学习花费时间\n&#125;\n上面的代码声明了一个结构体类型 Lesson ，它有 name 、 target 和 spend 三个属性。可以把相同类型的属性声明在同一行，这样可以使结构体变得更加紧凑，如下面的代码所示。\nGO\ntype Lesson2 struct &#123;\n    name, target    string\n    spend             int\n&#125;\n上面的结构体 Lesson 称为 命名的结构体(Named Structure) 。我们创建了名为 Lesson 的新类型，而它可以用于创建 Lesson 类型的结构体变量。\n声明结构体时也可以不用声明一个新类型，这样的结构体类型称为 匿名结构体(Anonymous Structure) 。\nGO\nvar Lesson3 struct &#123;\n    name, target    string\n    spend             int\n&#125;\n上面的代码创建了一个匿名结构体 lesson 。\n创建命名的结构体GO\npackage main\n\nimport &quot;fmt&quot;\n\ntype Lesson struct &#123;\n\tname, target    string\n\tspend             int\n&#125;\n\nfunc main() &#123;\n\t&#x2F;&#x2F; 使用字段名创建结构体\n\tlesson1 :&#x3D; Lesson&#123;\n\t\tname: &quot;《森林树》&quot;,\n\t\ttarget: &quot;森林会记住一切&quot;,\n\t\tspend:  5,\n\t&#125;\n\t&#x2F;&#x2F; 不使用字段名创建结构体\n\tlesson2 :&#x3D; Lesson&#123;&quot;《森林书》&quot;, &quot;有点饿了&quot;, 5&#125;\n\n\tfmt.Println(&quot;lesson1 &quot;, lesson1)\n\tfmt.Println(&quot;lesson2 &quot;, lesson2)\n&#125;\n\n上面的例子使用了两种方法创建了结构体，第一种是在创建结构体时使用字段名对每个字段进行初始化，而第二种方法是在创建结构体时不使用字段名，直接按字段声明的顺序对字段进行初始化。\n创建匿名结构体GO\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n\t&#x2F;&#x2F; 创建匿名结构体变量\n\tlesson3 :&#x3D; struct &#123;\n\t\tname, target string\n\t\tspend          int\n\t&#125;&#123;\n\t\tname:   &quot;水天供书&quot;,\n\t\ttarget: &quot;大大铁块不懂道理，兰百梨迦就让它懂道理&quot;,\n\t\tspend:   3,\n\t&#125;\n\n\tfmt.Println(&quot;lesson3 &quot;, lesson3)\n&#125;\n\n结构体的零值(Zero Value)当定义好的结构体没有被显式初始化时，结构体的字段将会默认赋为相应类型的零值。\npackage main\n\nimport &quot;fmt&quot;\n\ntype Lesson struct &#123;\n\tname, target    string\n\tspend             int\n&#125;\n\nfunc main() &#123;\n\t&#x2F;&#x2F; 不初始化结构体\n\tvar lesson4 &#x3D; Lesson&#123;&#125;\n\n\tfmt.Println(&quot;lesson4 &quot;, lesson4)\n&#125;\n初始化结构体package main\n\nimport &quot;fmt&quot;\n\ntype Lesson struct &#123;\n\tname, target    string\n\tspend             int\n&#125;\n\nfunc main() &#123;\n\t&#x2F;&#x2F; 为结构体指定字段赋初值\n\tvar lesson5 &#x3D; Lesson&#123;\n\t\tname: &quot;正法炬书&quot;,\n\t\ttarget: &quot;森林会记住一切&quot;,\n\t&#125;\n\n    &#x2F;&#x2F; 上面的结构体变量 lesson5 只初始化了 name 和 target 字段, spend字段没有初始化,所以会被初始化为零值\n\tfmt.Println(&quot;lesson5 &quot;, lesson5)\n&#125;\n\n访问结构体的字段点操作符 . 用于访问结构体的字段。\nGO\npackage main\n\nimport &quot;fmt&quot;\n\ntype Person struct &#123;\n\tname, gender    string\n\tage             int\n&#125;\n\nfunc main() &#123;\n\tvar lesson6 &#x3D; Lesson&#123;\n\t\tname: &quot;森林书&quot;,\n\t\ttarget: &quot;森林与树的孩子们&quot;,\n\t\tspend: 50,\n\t&#125;\n\n\tfmt.Println(&quot;lesson6 name: &quot;, lesson6.name)\n\tfmt.Println(&quot;lesson6 target: &quot;, lesson6.target)\n\tfmt.Println(&quot;lesson6 spend: &quot;, lesson6.spend)\n&#125;\n当然，使用点操作符 . 可以用于对结构体的字段的赋值。\nGO\npackage main\n\nimport &quot;fmt&quot;\n\ntype Lesson struct &#123;\n\tname, target    string\n\tspend             int\n&#125;\n\nfunc main() &#123;\n\tvar lesson7 &#x3D; Lesson&#123;&#125;\n\tlesson7.name &#x3D; &quot;从0到Go语言微服务架构师&quot;\n\tlesson7.target &#x3D; &quot;全面掌握Go语言微服务如何落地，代码级彻底一次性解决微服务和分布式系统。&quot;\n\tlesson7.spend &#x3D; 50\n\tfmt.Println(&quot;lesson7 &quot;, lesson7)\n&#125;\n\n指向结构体的指针GO\npackage main\n\nimport &quot;fmt&quot;\n\ntype Lesson struct &#123;\n\tname, target    string\n\tspend             int\n&#125;\n\nfunc main() &#123;\n\tlesson8 :&#x3D; &amp;Lesson&#123;&quot;无留陀&quot;, &quot;失落的苗圃&quot;, 50&#125;\n\tfmt.Println(&quot;lesson8 name: &quot;, (*lesson8).name)\n\tfmt.Println(&quot;lesson8 name: &quot;, lesson8.name)\n&#125;\n\n在上面的程序中， lesson8 是一个指向结构体 Lesson 的指针，上面用 (*lesson8).name 访问 lesson8 的 name 字段，上面的 lesson8.name 代替 (*lesson8).name 的解引用访问。\n\n注意：学过 C 语言的同学会认为lesson8-&gt;name才是正确的访问形式，但是在 Go 语言中，没有-&gt;访问的形式，访问结构体中的字段统一都是用.操作符\n\n匿名字段在创建结构体时，字段可以只有类型没有字段名，这种字段称为 匿名字段(Anonymous Field) 。\nGO\npackage main\n\nimport &quot;fmt&quot;\n\ntype Lesson4 struct &#123;\n\tstring\n\tint\n&#125;\n\nfunc main() &#123;\n\tlesson9 :&#x3D; Lesson4&#123;&quot;祖拜尔剧场&quot;, 50&#125;\n\tfmt.Println(&quot;lesson9 &quot;, lesson9)\n\tfmt.Println(&quot;lesson9 string: &quot;, lesson9.string)\n\tfmt.Println(&quot;lesson9 int: &quot;, lesson9.int)\n&#125;\n上面的程序结构体定义了两个匿名字段，虽然这两个字段没有字段名，但匿名字段的名称默认就是它的类型。所以上面的结构体 Lesoon4 有两个名为 string 和 int 的字段。\n嵌套结构体结构体的字段也可能是另外一个结构体，这样的结构体称为 嵌套结构体(Nested Structs)\nGO\npackage main\n\nimport &quot;fmt&quot;\n\ntype Author struct &#123;\n\tname string\n  \twx string\n&#125;\n\ntype Lesson5 struct &#123;\n\tname,target string\n\tspend int\n\tauthor Author\n&#125;\n\nfunc main() &#123;\n\tlesson10 :&#x3D; Lesson5&#123;\n\t\tname: &quot;赛诺&quot;,\n\t\tspend: 50,\n\t&#125;\n\tlesson10.author &#x3D; Author&#123;\n\t\tname: &quot;妮露&quot;,\n\t\twx: &quot;write_code_666&quot;,\n\t&#125;\n\tfmt.Println(&quot;lesson10 name:&quot;, lesson10.name)\n\tfmt.Println(&quot;lesson10 spend:&quot;, lesson10.spend)\n\tfmt.Println(&quot;lesson10 author name:&quot;, lesson10.author.name)\n\tfmt.Println(&quot;lesson10 author wx:&quot;, lesson10.author.wx)\n&#125;\n上面的程序 Lesson5 结构体有一个字段 author ，而且它的类型也是一个结构体 Author 。\n提升字段结构体中如果有匿名的结构体类型字段，则该匿名结构体里的字段就称为 提升字段(Promoted Fields) 。这是因为提升字段就像是属于外部结构体一样，可以用外部结构体直接访问。就像刚刚上面的程序，如果我们把 Lesson 结构体中的字段 author 直接用匿名字段 Author 代替， Author 结构体的字段例如 name 就不用像上面那样使用 lesson10.author.wx 访问，而是使用 lesson10.wx 就能访问 Author 结构体中的 wx 字段。现在结构体 Author 有 name 、 wx 两个字段，访问字段就像在 Lesson 里直接声明的一样，因此我们称之为提升字段。\nGO\npackage main\n\nimport &quot;fmt&quot;\n\ntype Author struct &#123;\n\tname string\n  \twx string\n&#125;\n\ntype Lesson6 struct &#123;\n\tname,target string\n\tspend int\n\tAuthor\n&#125;\n\nfunc main() &#123;\n\tlesson10 :&#x3D; Lesson6&#123;\n\t\tname:   &quot;赛诺&quot;,\n\t\ttarget: &quot;大风纪官&quot;,\n\t&#125;\n\tlesson10.author &#x3D; Author&#123;\n\t\tname: &quot;艾尔海森&quot;,\n\t\twx:   &quot;write_code_666&quot;,\n\t&#125;\n\tfmt.Println(&quot;lesson10 name:&quot;, lesson10.name)\n\tfmt.Println(&quot;lesson10 target:&quot;, lesson10.target)\n\tfmt.Println(&quot;lesson10 author wx:&quot;, lesson10.wx)\n&#125;\n结构体比较如果结构体的全部成员都是可以比较的，那么结构体也是可以比较的，那样的话两个结构体将可以使用 == 或 != 运算符进行比较。可以通过==运算符或 DeeplyEqual()函数比较两个结构相同的类型并包含相同的字段值。因此下面两个比较的表达式是等价的：\nGO\npackage main\n\nimport &quot;fmt&quot;\n\ntype  Lesson  struct&#123;\n\tname,target string\n\tspend int\n&#125;\n\nfunc main() &#123;\n\tlesson11 :&#x3D; Lesson&#123;\n\t\tname:   &quot;赛诺&quot;,\n\t\ttarget: &quot;大风纪官&quot;,\n\t&#125;\n\tlesson12 :&#x3D; Lesson&#123;\n\t\tname:   &quot;赛诺&quot;,\n\t\ttarget: &quot;大风纪官&quot;,\n\t&#125;\n\tfmt.Println(lesson11.name &#x3D;&#x3D; lesson12.name &amp;&amp; lesson11.target &#x3D;&#x3D; lesson12.target) &#x2F;&#x2F; true\n\tfmt.Println(lesson11 &#x3D;&#x3D; lesson12) &#x2F;&#x2F; true\n&#125;\n\n给结构体定义方法在 Go 中无法在结构体内部定义方法，这一点与 C 语言类似。\nGO\npackage main\n\nimport &quot;fmt&quot;\n\n&#x2F;&#x2F; Lesson 定义一个名为 Lesson 的结构体\ntype Lesson struct &#123;\n\tname,target string\n\tspend int\n&#125;\n\n&#x2F;&#x2F; PrintPersonInfo 定义一个与 Person 的绑定的方法\nfunc (l Lesson) ShowLessonInfo() &#123;\n\tfmt.Println(&quot;name:&quot;, l.name)\n\tfmt.Println(&quot;target:&quot;, l.target)\n&#125;\n\nfunc main() &#123;\n\tlesson13 :&#x3D; Lesson&#123;\n\t\tname:   &quot;艾尔海森&quot;,\n\t\ttarget: &quot;教令院书记官&quot;,\n\t&#125;\n\tlesson13.ShowPersonInfo()\n&#125;\n上面的程序中定义了一个与结构体 Lesson 绑定的方法 ShowLessonInfo() ，其中 ShowLessonInfo 是方法名， (l Lesson) 表示将此方法与 Lesson 的实例绑定，这在 Go 语言中称为接收者，而 l 表示实例本身，相当于 Python 中的 self ，在方法内可以使用 实例本身.属性名称 来访问实例属性。\n方法的参数传递方式如果绑定结构体的方法中要改变实例的属性时，必须使用指针作为方法的接收者。\nGO\npackage main\n\nimport &quot;fmt&quot;\n\n&#x2F;&#x2F; Lesson 定义一个名为 Lesson 的结构体\ntype Lesson struct &#123;\n\tname,target string\n\tspend int\n&#125;\n\n&#x2F;&#x2F; ShowLessonInfo 定义一个与 Lesson 的绑定的方法\nfunc (l Lesson) ShowLessonInfo() &#123;\n\tfmt.Println(&quot;name:&quot;, l.name)\n\tfmt.Println(&quot;target:&quot;, l.target)\n&#125;\n\n&#x2F;&#x2F; AddTime 定义一个与 Lesson 的绑定的方法，使 spend 值加 n\nfunc (l *Lesson) AddTime(n int) &#123;\n\tl.spend &#x3D; l.spend + n\n&#125;\n\nfunc main() &#123;\n\tlesson13 :&#x3D; Lesson&#123;\n\t\tname:   &quot;艾尔海森&quot;,\n\t\ttarget: &quot;教令院书记官&quot;,\n    spend:50,\n\t&#125;\n\tfmt.Println(&quot;添加add方法前&quot;)\n\tlesson13.ShowLessonInfo()\n\tlesson13.AddTime(5)\n\tfmt.Println(&quot;添加add方法后&quot;)\n\tlesson13.ShowLessonInfo()\n&#125;\n\n函数函数 是基于功能或逻辑进行封装的可复用的代码结构。将一段功能复杂、很长的一段代码封装成多个代码片段(即函数)，有助于提高代码可读性和可维护性。由于 Go 语言是编译型语言，所以函数编写的顺序是无关紧要的。\n函数的声明在 Go 语言中，函数声明语法如下：\nGO\nfunc function_name(parameter_list) (result_list) &#123;\n    &#x2F;&#x2F;函数体\n&#125;\n函数的声明使用 func 关键词，后面依次接 function_name(函数名) ， parameter_list(参数列表) ， result_list(返回值列表) 以及 函数体 。\n\n形式参数列表:函数的参数名以及参数类型，这些参数作为局部变量，其值由参数调用者提供，函数中的参数列表和返回值并非是必须的。\n返回值列表:函数返回值的变量名以及类型，如果函数返回一个无名变量或者没有返回值，返回值列表的括号是可以省略的。\n如果有连续若干个参数的类型一致，那么只需在最后一个参数后添加该类型。\n\nGO\npackage main\n\nimport &quot;fmt&quot;\n\n&#x2F;&#x2F; 函数返回一个无名变量，返回值列表的括号省略\nfunc sum(x int, y int) int &#123;\n\treturn x + y\n&#125;\n\n&#x2F;&#x2F; 无参数列表和返回值\nfunc printBookName() &#123;\n\tfmt.Println(&quot;《森林书》&quot;)\n&#125;\n\n&#x2F;&#x2F; 参数的类型一致，只在最后一个参数后添加该类型\nfunc sub(x , y int) int &#123;\n\treturn x - y\n&#125;\n\nfunc main() &#123;\n\tfmt.Println(&quot;56 + 1 &#x3D; &quot;, sum(56, 1))\n\tprintBookName()\n\tfmt.Println(&quot;58 - 2 &#x3D;&quot;, sub(58, 2))\n&#125;\n\n可变参数上面的程序参数个数都是固定的，在 Go 语言 中也可以使用可变参数的函数。\n多个类型一致的参数在参数类型前面加 ... 表示一个切片，用来接收调用者传入的参数。注意，如果该函数下有其他类型的参数，这些其他参数必须放在参数列表的前面，切片必须放在最后。\nGO\npackage main\n\nimport &quot;fmt&quot;\n\nfunc show(args ...string) int &#123;\n\tsum :&#x3D; 0\n\tfor _, item :&#x3D; range args &#123;\n        fmt.Println(item)\n\t\tsum +&#x3D; 1\n\t&#125;\n\treturn sum\n&#125;\n\nfunc main() &#123;\n\tfmt.Println(show(&quot;兰&quot;,&quot;那&quot;,&quot;罗&quot;))\n&#125;\n\n多个类型不一致的参数如果传多个参数的类型都不一样，可以指定类型为 ...interface&#123;&#125; ，然后再遍历。\nGO\npackage main\n\nimport &quot;fmt&quot;\n\nfunc PrintType(args ...interface&#123;&#125;) &#123;\n\tfor _, arg :&#x3D; range args &#123;\n\t\tswitch arg.(type) &#123;\n\t\tcase int:\n\t\t\tfmt.Println(arg, &quot;type is int.&quot;)\n\t\tcase string:\n\t\t\tfmt.Println(arg, &quot;type is string.&quot;)\n\t\tcase float64:\n\t\t\tfmt.Println(arg, &quot;type is float64.&quot;)\n\t\tdefault:\n\t\t\tfmt.Println(arg, &quot;is an unknown type.&quot;)\n\t\t&#125;\n\t&#125;\n&#125;\n\nfunc main() &#123;\n\tPrintType(57, 3.14, &quot;兰那罗&quot;)\n&#125;\n解序列使用 ... 可以用来解序列，能将函数的可变参数(即切片)一个一个取出来，传递给另一个可变参数的函数，而不是传递可变参数变量本身。\nGO\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n\tvar s []string\n\ts &#x3D; append(s, []string&#123;&quot;兰&quot;, &quot;那&quot;, &quot;罗&quot;&#125;...)\n\tfmt.Println(s)\n&#125;\n\n函数的返回值当函数没有返回值时，函数体可以使用 return 语句返回。在 Go 中一个函数可以返回多个值。\nGO\npackage main\n\nimport &quot;fmt&quot;\n\nfunc showBookInfo(bookName, authorName string) (string, error) &#123;\n\tif bookName &#x3D;&#x3D; &quot;&quot; &#123;\n\t\treturn &quot;&quot;, errors.New(&quot;图书名称为空&quot;)\n\t&#125;\n\tif authorName &#x3D;&#x3D; &quot;&quot; &#123;\n\t\treturn &quot;&quot;, errors.New(&quot;作者名称为空&quot;)\n\t&#125;\n\treturn bookName + &quot;,作者:&quot; + authorName, nil\n&#125;\n\nfunc main() &#123;\n\tbookInfo, err :&#x3D; showBookInfo(&quot;《千朵玫瑰带来的黎明》&quot;, &quot;须弥&quot;)\n\tfmt.Printf(&quot;bookInfo &#x3D; %s, err &#x3D; %v&quot;, bookInfo, err)\n&#125;\n当然，在 Go 中支持返回带有变量名的值。可以将上面的函数修改如下：\nGO\nfunc showBookInfo2(bookName, authorName string) (info string, err error) &#123;\n\tinfo &#x3D; &quot;&quot;\n\tif bookName &#x3D;&#x3D; &quot;&quot; &#123;\n\t\terr &#x3D; errors.New(&quot;图书名称为空&quot;)\n\t\treturn\n\t&#125;\n\tif authorName &#x3D;&#x3D; &quot;&quot; &#123;\n\t\terr &#x3D; errors.New(&quot;作者名称为空&quot;)\n\t\treturn\n\t&#125;\n    &#x2F;&#x2F; 不使用 :&#x3D; 因为已经在返回值那里声明了\n\tinfo &#x3D; bookName + &quot;,作者:&quot; + authorName\n  \t&#x2F;&#x2F; 直接返回即可\n\treturn\n&#125;\n匿名函数没有名字的函数就叫 匿名函数 ，它只有函数逻辑体，而没有函数名。匿名函数只拥有短暂的生命，一般都是定义后立即使用。\nGO\nfunc (parameter_list) (result_list) &#123;\n\tbody\n&#125;\n内部方法与外部方法在 Go 语言中，函数名通过首字母大小写实现控制对方法的访问权限。\n\n当方法的首字母为 大写 时，这个方法对于 所有包 都是 Public ，其他包可以随意调用。\n当方法的首字母为 小写 时，这个方法是 Private ，其他包是无法访问的。\n\n包包(package) 用于组织 Go 源代码，提供了更好的可重用性与可读性。Go 语言有超过 100 个的标准包，可以用 go list std | wc -l 命令查看标准包的具体数目，标准库为大多数的程序提供了必要的基础组件。\nmain 包首先，我们先来看看 main 包，该包中包含一个 main() 函数，该函数是程序运行的入口。\npackage packagename 代码指定了某一源文件属于某一个包。它应该放在每一个源文件的第一行。例如我们 Go 的第一个程序。\nGO\n&#x2F;&#x2F; hello go\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n    fmt.Println(&quot;《千朵玫瑰带来的黎明》&quot;)\n&#125;\npackage main 这一行指定该文件属于 main 包。import &quot;fmt&quot; 语句用于导入一个已存在的名为 fmt 的包。\n创建包下面我们创建自定义的 book 包，其中，属于某一个包的源文件都应该放置于一个单独命名的文件夹里，按照 Go 的惯例，应该用包名命名该文件夹。所以应当先创建一个 book 文件夹，位于该目录下创建一个 book.go 源文件，里面实现我们自定义的数学加法函数。请注意函数名的首字母要大写。\nGO\n&#x2F;&#x2F; book.go\npackage book\n\nfunc ShowBookInfo(bookName, authorName string) (string, error) &#123;\n\tif bookName &#x3D;&#x3D; &quot;&quot; &#123;\n\t\treturn &quot;&quot;, errors.New(&quot;图书名称为空&quot;)\n\t&#125;\n\tif authorName &#x3D;&#x3D; &quot;&quot; &#123;\n\t\treturn &quot;&quot;, errors.New(&quot;作者名称为空&quot;)\n\t&#125;\n\treturn bookName + &quot;,作者:&quot; + authorName, nil\n&#125;\nTips：\n\n导出名字（Exported Names)\n我们将 book 包中的函数 ShowBookInfo 首字母大写。在 Go 中这具有特殊意义。在 Go 中，任何以大写字母开头的变量或者函数都是被导出的名字。其它包只能访问被导出的函数和变量。在这里，我们需要在 main 包中访问 ShowBookInfo 函数，因此会将它们的首字母大写。\n如果在 book.go 中将函数名从 ShowBookInfo 变为 showBookInfo ，并且在 main.go 中调用 book.showBookInfo 函数，则该程序编译不通过。因为如果想在包外访问一个函数，它应该首字母大写。\n\n\n\n导入包使用包之前我们需要导入包，在 GoLand 中会帮你自动导入所需要的包。导入包的语法为 import path ，其中 path 可以是相对于工作区文件夹的相对路径，也可以是绝对路径。\nGO\npackage main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;book&quot;\n)\n\nfunc main() &#123;\n\tbookName :&#x3D; &quot;《千朵玫瑰带来的黎明》&quot;\n\tauthor :&#x3D; &quot;须弥&quot;\n\tbookInfo, _ :&#x3D; book.ShowBookInfo(bookName, author)\n\tfmt.Println(&quot;bookInfo &#x3D; &quot;, bookInfo)\n&#125;\n导入包可以单行导入也可以多行导入，像上面的程序代码就是多行导入的例子，一般我们也建议使用多行导入，当然你也可以使用单行导入：\nGO\nimport &quot;fmt&quot;\nimport &quot;book&quot;\n使用别名如果我们导入了两个具有同一包名的包时会产生冲突，这时我们可以为其中一个包定义别名：\nGO\nimport (\n    &quot;crypto&#x2F;rand&quot;\n    mrand &quot;math&#x2F;rand&quot; &#x2F;&#x2F; 将名称替换为 mrand 避免冲突\n)\n当然，我们也可以使用别名代替名字很长的包名。\n使用点操作导入一个包后，如果要使用该包中的函数，都要使用 包名.方法名 语法进行调用，对于一些使用高频的包，例如 fmt 包，每次调用打印函数时都要使用 fmt.Println() 进行调用，很不方便。我们可以在导入包的时，使用 import . package_path 语法。从此，我们打印再也不用加 fmt 了。\nGO\nimport . &quot;fmt&quot;\n\nfunc main() &#123;\n    Println(&quot;hello, world&quot;)\n&#125;\n但这种用法，会有一定的隐患，就是导入的包里可能有函数，会和我们自己的函数发生冲突。\n包的初始化每个包都允许有一个或多个 init 函数， init 函数不应该有任何返回值类型和参数，在代码中也不能显式调用它，当这个包被导入时，就会执行这个包的 init 函数，做初始化任务， init 函数优先于 main 函数执行。该函数形式如下：\nGO\nfunc init() &#123;\n&#125;\n包的初始化顺序：首先初始化 包级别(Package Level) 的变量，紧接着调用 init 函数。包可以有多个 init 函数(在一个文件或分布于多个文件中)，它们按照编译器解析它们的顺序进行调用。如果一个包导入了另一个包，会先初始化被导入的包。尽管一个包可能会被导入多次，但是它只会被初始化一次。\n包的匿名导入之前说过，导入一个没有使用的包编译会报错。但有时候我们只是想执行包里的 init 函数来执行一些初始化任务的话应该怎么办呢？\n我们可以使用匿名导入的方法，使用 空白标识符(Blank Identifier) ：\nGO\nimport _ &quot;fmt&quot;\n由于导入时会执行该包里的 init 函数，所以编译仍会将此包编译到可执行文件中。\n流程控制所谓流程控制就是指“程序怎么执行”或者说“程序执行的顺序”。程序整体上确实是从上往下执行，但又不单纯是从上往下。流程控制可分为三类：\n\n顺序执行。这个非常简单，就是先执行第一行再执行第二行……这样依次从上往下执行。\n选择执行。有些代码可以跳过不执行，有选择地执行某些代码。\n循环执行。有些代码会反复执行。\n\n条件语句在 Go 中 条件语句模型 如下：\nGO\nif 条件1 &#123;\n  逻辑代码1\n&#125; else if  条件2 &#123;\n  逻辑代码2\n&#125; else if 条件 ... &#123;\n  逻辑代码 ...\n&#125; else &#123;\n  逻辑代码 else\n&#125;\n如果分支的 condition 为真，则执行该分支 &#123; 和 &#125; 之间的代码。在 Go 中，对于 &#123; 和 &#125; 的位置有严格的要求，它要求 else if (或 else ) 和两边的花括号，必须在同一行。特别注意，即使在 &#123; 和 &#125; 之间只有一条语句，这两个花括号也是不能省略的。\n\n单分支判断\n只有一个 if 为单分支判断：\nGO\nscore :&#x3D; 88\nif score &gt;&#x3D; 60 &#123;\n    fmt.Println(&quot;成绩及格&quot;)\n&#125;\n\n双分支判断\n有 if 和一个 else 为两分支判断：\nGO\nscore :&#x3D; 88\nif score &gt;&#x3D; 60 &#123;\n    fmt.Println(&quot;成绩及格&quot;)\n&#125; else &#123;\n    fmt.Println(&quot;成绩不及格&quot;)\n&#125;\n\n多分支判断\n有 if 、 else if 以及 else 为多分支判断：\nGO\nscore :&#x3D; 88\nif score &gt;&#x3D; 90 &#123;\n    fmt.Println(&quot;成绩等级为A&quot;)\n&#125; else if score &gt;&#x3D; 80 &#123;\n    fmt.Println(&quot;成绩等级为B&quot;)\n&#125; else if score &gt;&#x3D; 70 &#123;\n    fmt.Println(&quot;成绩等级为C&quot;)\n&#125; else if score &gt;&#x3D; 60 &#123;\n    fmt.Println(&quot;成绩等级为D&quot;)\n&#125; else &#123;\n    fmt.Println(&quot;成绩等级为E 成绩不及格&quot;)\n&#125;\n\n条件语句高级写法\nif 还有另外一种写法，它包含一个 statement 可选语句部分，该可选语句在条件判断之前运行。它的语法是：\nGO\nif statement; condition &#123;\n&#125;\n上面单分支判断的那个例子可以重写如下：\nGO\nif score :&#x3D; 88; score &gt;&#x3D; 60 &#123;\n    fmt.Println(&quot;成绩及格&quot;)\n&#125;\n\n\n选择语句在 Go 选择语句模型 如下：\nGO\nswitch 表达式 &#123;\n    case 表达式值1:\n        业务逻辑代码1\n    case 表达式值2:\n        业务逻辑代码2\n    case 表达式值3:\n        业务逻辑代码3\n    case 表达式值 ...:\n        业务逻辑代码 ...\n    default:\n        业务逻辑代码\n&#125;\nswitch 语句是一个选择语句，用于将 switch 后的表达式的值与可能匹配的选项 case 后的表达式进行比较，并根据匹配情况执行相应的代码块，执行完匹配的代码块后，直接退出 switch-case 。如果没有任何一个匹配，就会执行 default 的代码块。它可以被认为是替代多个 if-else 子句的常用方式。注意：case 不允许出现重复项。例如，下面的例子会输出 Your score is between 80 and 90. 。\nGO\ngrade :&#x3D; &quot;B&quot;\nswitch grade &#123;\ncase &quot;A&quot;:\n    fmt.Println(&quot;Your score is between 90 and 100.&quot;)\ncase &quot;B&quot;:\n    fmt.Println(&quot;Your score is between 80 and 90.&quot;)\ncase &quot;C&quot;:\n    fmt.Println(&quot;Your score is between 70 and 80.&quot;)\ncase &quot;D&quot;:\n    fmt.Println(&quot;Your score is between 60 and 70.&quot;)\ndefault:\n    fmt.Println(&quot;Your score is below 60.&quot;)\n&#125;\n\n一个 case 多个条件\n在 Go 中， case 后可以接多个条件，多个条件之间是 或 的关系，用逗号 , 相隔。\nGO\nmonth :&#x3D; 5\nswitch month &#123;\ncase 1, 3, 5, 7, 8, 10, 12:\n    fmt.Println(&quot;该月份有 31 天&quot;)\ncase 4, 6, 9, 11:\n    fmt.Println(&quot;该月份有 30 天&quot;)\ncase 2:\n    fmt.Println(&quot;该月份闰年为 29 天，非闰年为 28 天&quot;)\ndefault:\n    fmt.Println(&quot;输入有误！&quot;)\n&#125;\n\n选择语句高级写法\nswitch 还有另外一种写法，它包含一个 statement 可选语句部分，该可选语句在表达式之前运行。它的语法是：\nGO\nswitch statement; expression &#123;\n&#125;\n可以将上面的例子改写为：\nGO\nswitch month :&#x3D; 5; month &#123;\ncase 1, 3, 5, 7, 8, 10, 12:\n    fmt.Println(&quot;该月份有 31 天&quot;)\ncase 4, 6, 9, 11:\n    fmt.Println(&quot;该月份有 30 天&quot;)\ncase 2:\n    fmt.Println(&quot;该月份闰年为 29 天，非闰年为 28 天&quot;)\ndefault:\n    fmt.Println(&quot;输入有误！&quot;)\n&#125;\n这里 month 变量的作用域就仅限于这个 switch 内。\n\nswitch 后可接函数\nswitch 后面可以接一个函数，只要保证 case 后的值类型与函数的返回值一致即可。\nGO\npackage main\n\nimport &quot;fmt&quot;\n\nfunc getResult(args ...int) bool &#123;\n for _, v :&#x3D; range args &#123;\n  if v &lt; 60 &#123;\n   return false\n  &#125;\n &#125;\n return true\n&#125;\n\nfunc main() &#123;\n chinese :&#x3D; 88\n math :&#x3D; 90\n english :&#x3D; 95\n\n switch getResult(chinese, math, english) &#123;\n case true:\n  fmt.Println(&quot;考试通过&quot;)\n case false:\n  fmt.Println(&quot;考试未通过&quot;)\n &#125;\n&#125;\n\n无表达式的 switch\nswitch 后面的表达式是可选的。如果省略该表达式，则表示这个 switch 语句等同于 switch true ，并且每个 case 表达式都被认定为有效，相应的代码块也会被执行。\nGO\nscore :&#x3D; 88\nswitch &#123;\ncase score &gt;&#x3D; 90 &amp;&amp; score &lt;&#x3D; 100:\n    fmt.Println(&quot;grade A&quot;)\ncase score &gt;&#x3D; 80 &amp;&amp; score &lt; 90:\n    fmt.Println(&quot;grade B&quot;)\ncase score &gt;&#x3D; 70 &amp;&amp; score &lt; 80:\n    fmt.Println(&quot;grade C&quot;)\ncase score &gt;&#x3D; 60 &amp;&amp; score &lt; 70:\n    fmt.Println(&quot;grade D&quot;)\ncase score &lt; 60:\n    fmt.Println(&quot;grade E&quot;)\n&#125;\n该 switch-case 语句相当于 if-elseif-else 语句。\n\nfallthrough 语句\n正常情况下 switch-case 语句在执行时只要有一个 case 满足条件，就会直接退出 switch-case ，如果一个都没有满足，才会执行 default 的代码块。不同于其他语言需要在每个 case 中添加 break 语句才能退出。使用 fallthrough 语句可以在已经执行完成的 case 之后，把控制权转移到下一个 case 的执行代码中。fallthrough 只能穿透一层，不管你有没有匹配上，都要退出了。fallthrough 语句是 case 子句的最后一个语句。如果它出现在了 case 语句的中间，编译会不通过。\nGO\ns :&#x3D; &quot;森林书&quot;\nswitch &#123;\ncase s &#x3D;&#x3D; &quot;森林书&quot;:\n    fmt.Println(&quot;森林书&quot;)\n    fallthrough\ncase s &#x3D;&#x3D; &quot;正法炬书&quot;:\n    fmt.Println(&quot;正法炬书&quot;)\ncase s !&#x3D; &quot;水天供书&quot;:\n    fmt.Println(&quot;水天供书&quot;)\n&#125;\n\n循环语句与C及python中用法相同\n\n\n&#x2F;&#x2F; for 接三个表达式\nfor initialisation; condition; post &#123;\n   code\n&#125;\n\n&#x2F;&#x2F; for 接一个条件表达式\nfor condition &#123;\n   code\n&#125;\n\n&#x2F;&#x2F; for 接一个 range 表达式\nfor range_expression &#123;\n   code\n&#125;\n\n&#x2F;&#x2F; for 不接表达式\nfor &#123;\n   code\n&#125;\nnum :&#x3D; 0\nfor num &lt; 4 &#123;\n    fmt.Println(num)\n    num++\n&#125;\n\nfor num :&#x3D; 0; num &lt; 4; num++ &#123;\n    fmt.Println(num)\n&#125;\n\nstr :&#x3D; &quot;千朵玫瑰带来的黎明&quot;\nfor index, value :&#x3D; range str&#123;\n    fmt.Printf(&quot;index %d, value %c\\n&quot;, index, value)\n&#125;\n\n","slug":"GO2","date":"2022-11-03T14:53:49.000Z","categories_index":"编程语言","tags_index":"GO","author_index":"Algernon"},{"id":"a4dfed67ba141d1dc18bc0e6d1e3a85f","title":"【python机器学习基础教程】(一)","content":"主要使用python和scikit-learn库\n必要的库和工具SciPy所有代码默认导入以下库：\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport mglearn\nSciPy如果想保存一个大部分元素都是0的二维数组，可以使用稀疏矩阵：\nfrom scipy import sparse\nimport numpy as np\n#创建一个二维NumPy数组，对角线为 1，其余都为0\neye &#x3D; np.eye(4)\nprint(&quot;NumPy array:\\n&#123;&#125;&quot;.format(eye))\nNumPy array:\n[[1. 0. 0. 0.]\n [0. 1. 0. 0.]\n [0. 0. 1. 0.]\n [0. 0. 0. 1.]]\n#将NumPy数组转换为CSR格式的SciPy稀疏矩阵\n#只保存非零元素\nsparse_matrix &#x3D; sparse.csr_matrix(eye)\nprint(&quot;\\nSciPy sparse CSR matrix:\\n&#123;&#125;&quot;.format(sparse_matrix))\nSciPy sparse CSR matrix:\n  (0, 0)\t1.0\n  (1, 1)\t1.0\n  (2, 2)\t1.0\n  (3, 3)\t1.0\nmatplotlibmatplotlib是Python主要的科学绘图库，其功能为生成可发布的可视化内容，如折线图、直方图、散点图等。举例：\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\n#在-10和10之间生成一个数列，共100个数\nx&#x3D;np.linspace(-10,10,100)\n#用正弦函数创建第二个数组\ny&#x3D;np.sin(x)\n#plot函数绘制一个数组关于另一个数组的折线图\nplt.plot(x,y,marker&#x3D;&quot;x&quot;)\n\n\n\n\n\n\n\n\n\n需要指出的是，这个库在pycharm上并不能跑，要画图的话需要用其他库。\npandaspandas是用于处理和分析数据的Python库。\nimport pandas as pd\nfrom IPython.display import display\n#创建关于人的简单数据集\ndata&#x3D;&#123;&#39;Name&#39;:[&quot;John&quot;,&quot;Anna&quot;,&quot;Peter&quot;,&quot;Linda&quot;],\n&#39;location&#39;:[&quot;New York&quot;,&quot;Paris&quot;,&quot;Berlin&quot;,&quot;London&quot;],\n&#39;Age&#39;:[24,13,53,33]\n&#125;\ndata_pandas&#x3D;pd.DataFrame(data)\ndisplay(data_pandas)\n    Name  location  Age\n0   John  New York   24\n1   Anna     Paris   13\n2  Peter    Berlin   53\n3  Linda    London   33\n查询这个表格的方法有很多种。举个例子：\n#选择年龄大于30的所有行\ndisplay(data_pandas[data_pandas.Age &gt;30])\n输出结果如下：\n    Name location  Age\n2  Peter   Berlin   53\n3  Linda   London   33\n第一个应用：鸢尾花分类我们的目标是构建一个机器学习模型，可以从这些已知品种的鸢尾花测量数据中进行学习，从而可以预测新鸢尾花的品种。\n因为我们有已知品种的鸢尾花的测量数据，所以这是一个监督学习问题。在这个问题中，我们要在多个选项中预测其中一个（鸢尾花的品种）。这是一个分类问题。可能的输出（鸢尾花的不同品种)叫做类别。数据集中的每朵鸢尾花都属于三个类别之一，所以这是一个三分类问题。\n单个数据点（一朵鸢尾花）的预期输出是这朵花的品种。对于一个数据点来说，它的品种叫做标签。\nfrom sklearn.datasets import load_iris\niris_dataset&#x3D;load_iris()\nprint(&quot;Keys of iris_dataset:\\n&#123;&#125;&quot;.format(iris_dataset.keys()))\n输出：Keys of iris_dataset:\ndict_keys([&#39;data&#39;, &#39;target&#39;, &#39;frame&#39;, &#39;target_names&#39;, &#39;DESCR&#39;, &#39;feature_names&#39;, &#39;filename&#39;, &#39;data_module&#39;])\nprint(iris_dataset[&#39;DESCR&#39;][:193]+&quot;\\n...&quot;)\n输出：\n.. _iris_dataset:\n\nIris plants dataset\n--------------------\n\n**Data Set Characteristics:**\n\n    :Number of Instances: 150 (50 in each of three classes)\n    :Number of Attributes: 4 numeric, pre\n...\n\ndata数据的每一行对应一朵花，列代表每朵花的四个测量数据：\nprint(&quot;Shape of data:&#123;&#125;&quot;.format(iris_dataset[&#39;data&#39;].shape))\n输出：\nShape of data:(150, 4)\n可以看出，数组中包含150朵不同的花的测量数据。\n机器学习中的个体叫做样本，其属性叫做特征。data数组的形状（shape)是样本数乘以特征数。\n训练数据与测试数据我们使用新数据来评估模型的性能。通常的做法是将收集好的带标签数据分成两部分，一部分用于构建机器学习模型，叫做训练数据或训练集。其余的数据用来评估模型性能，叫做测试数据、测试集或留出集。\n\n\n\n\n\n\n\n\n\nscikit-learn中的train_test_split函数可以打乱数据集并进行拆分。这个函数将75%的行数据及其对应标签作为训练集，剩下25%的数据及其标签作为测试集。训练集和测试集的分配比例可以随意，但使用25%的数据作为测试集是很好的经验法则。\nscikit-learn中的数据通常用大写的X表示，而标签用小写的y表示。我们用大写的X是因为数据是一个二维数组（矩阵），用小写的y是因为目标是一个一维数组（向量)。对数据调用train_test_split，并对输出结果采用下面这种命名方法：\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test&#x3D;train_test_split(iris_dataset[&#39;data&#39;],iris_dataset[&#39;target&#39;],random_state&#x3D;0)\n为了确保多次运行同一函数能够得到相同的输出，我们利用random_state参数指定了 随机数生成器的种子。这样函数输出就是固定不变的，所以这行代码的输出始终相同。\n\n\n\n\n\n\n\n\n\ntrain_test_split函数的输出为X_train、X_test、y_train和y_test，它们都是Numpy数组。X_train包含75%的行数据，X_test包含剩下 的25%：\nprint(&quot;X_train shape:&#123;&#125;&quot;.format(X_train.shape))\nprint(&quot;y_train shape:&#123;&#125;&quot;.format(y_train.shape))\n\n输出：\nX_train shape:(112, 4)\ny_train shape:(112,)\n\n输入：\nprint(&quot;X_test shape:&#123;&#125;&quot;.format(X_test.shape))\nprint(&quot;y_test shape:&#123;&#125;&quot;.format(y_test.shape))\n输出：\nX_test shape:(38, 4)\ny_test shape:(38,)\n\n观察数据检查数据的最佳方法之一是将其可视化。一种可视化方法是绘制散点图数据不多——散点图矩阵，从而两两查看所有的特征。\n#利用X_train中的数据创建DataFrame\n#利用iris_dataset.feature_names中的字符串对数据列进行标记\niris_dataframe&#x3D;pd.DataFrame(X_train,columns&#x3D;iris_dataset.feature_names)\n\n#利用DataFrame创建散点图矩阵，按y_train着色\ngrr&#x3D;pd.scatter_matrix(iris_dataframe,c&#x3D;y_train,figsize&#x3D;(15,15),marker&#x3D;&#39;o&#39;,hist_kwds&#x3D;&#123;&#39;bins&#39;:20&#125;,s&#x3D;60,alpha&#x3D;.8,cmap&#x3D;mglearn.cm3)\n运行文件正式代码：\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport mglearn\nimport matplotlib.pyplot as plt\nfrom  sklearn.datasets import load_iris\nimport pandas as pd\niris_dataset&#x3D;load_iris()\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test&#x3D;train_test_split(iris_dataset[&#39;data&#39;],iris_dataset[&#39;target&#39;],random_state&#x3D;0)\n#利用X_train中的数据创建DataFrame\n#利用iris_dataset.feature_names中的字符串对数据列进行标记\niris_dataframe&#x3D;pd.DataFrame(X_train,columns&#x3D;iris_dataset.feature_names)\n\n#利用DataFrame创建散点图矩阵，按y_train着色\ngrr&#x3D;pd.plotting.scatter_matrix(iris_dataframe,c&#x3D;y_train,figsize&#x3D;(15,15),marker&#x3D;&#39;o&#39;,hist_kwds&#x3D;&#123;&#39;bins&#39;:20&#125;,s&#x3D;60,alpha&#x3D;.8,cmap&#x3D;mglearn.cm3)\nplt.show()\n从图中可以看出，利用花瓣和花萼的测量数据基本可以将三个类别区分开。\nk近邻算法K近邻分类器构建此模型只需要保存训练集即可。要对一个新的数据点做出预测，算法会在训练集中寻找与这个新数据点距离最近的数据点，然后将找到的数据点的标签赋值给这个新数据点。\nk近邻算法中k的含义是，我们可以考虑训练集里与新数据点最近的任意k个邻居（比如最近的3个或5个邻居），而非只考虑最近的那一个。然后，我们可以用这些邻居中数量最多的类别做出预测。\n\n\n\n\n\n\n\n\n\nscikit-learn中所有的机器学习模型都在各自的类中实现，这些类被称为Estimator类。k近邻分类算法是在neighbors模块的KNeighborsClassifier类中实现的。我们需要将这个类实例化为一个对象，然后才能使用这个模型。这时我们需要设置模型的参数。NeighborsClassifier最重要的参数就是邻居的数目，这里我们设为1：\nfrom sklearn.neighbors import KNeighborsClassifier\nknn&#x3D;KNeighborsClassifier(n_neighbors&#x3D;1)\n想要基于训练集来构建模型，需要调用knn对象的fit方法，输入参数为X_train和y_train，二者都是Numpy数组，前者包含训练数据，后者包含相应的训练标签：\nknn.fit(X_train,y_train)\n做出预测假设：我们在野外发现了一朵鸢尾花，花萼长5cm宽2.9cm，花瓣长1cm宽0.2cm。这朵鸢尾花属于哪个品种？我们可以将这些数据放在一个Numpy数组中，再次计算形状，样本形状为样本数（1）乘以特征数（4）：\nX_new &#x3D; np.array([[5,2.9,1,0.2]])\nprint(&quot;X_new.shape:&#123;&#125;&quot;.format(X_new.shape))\n输出：\n\n\n\n\n\n\n\n\n\nX_new.shape:(1, 4)\n我们必须将这朵花的测量数据转换为二维Numpy数组的一行，这是因为scikit-learn的输入数据必须是二维数组。\n我们调用knn对象的predict方法来进行预测：\nprediction&#x3D;knn.predict(X_new)\nprint(&quot;Prediction:&#123;&#125;&quot;.format(prediction))\nprint(&quot;Predict target name :&#123;&#125;&quot;.format(iris_dataset[&#39;target_names&#39;][prediction]))\n输出：\n\n\n\n\n\n\n\n\n\nPrediction:[0]Predict target name :[‘setosa’]\n评估模型这里需要用到之前创建的测试集，这些数据并没有用于构建模型，但我们知道测试集中每朵鸢尾花的实际品种。\n因此，我们可以对测试数据中的每朵鸢尾花进行预测，并将预测结果与标签（已知的品种）进行对比。我们可以通过计算精度来衡量模型的优劣，精度就是品种预测正确的花所占的比例：\ny_pred&#x3D;knn.predict(X_test)\nprint(&quot;Test set prediction:\\n&#123;&#125;&quot;.format(y_pred))\n输出：\n\n\n\n\n\n\n\n\n\nTest set prediction:[2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0 2]\nprint(&quot;Test set score:&#123;:.2f&#125;&quot;.format(np.mean(y_pred&#x3D;&#x3D;y_test)))\n输出：\n\n\n\n\n\n\n\n\n\nTest set score:0.97\n我们还可以使用knn对象的score方法来计算测试集的精度：\nprint(&quot;Test set score:&#123;:.2f&#125;&quot;.format(knn.score(X_test,y_test)))\n输出：\n\n\n\n\n\n\n\n\n\nTest set score:0.97\n模型的精度是0.97，也就是说，对于测试集中的鸢尾花，我们的预测有97%是正确的。\n监督学习分类与回归监督机器学习问题主要有两种，分别叫做分类和回归。\n分类问题的目标是预测类别标签，这些标签来自预定义的可选列表。分类问题有时分为二分类和多分类。\n在二分类问题中，我们通常将其中一个类别称为正类，另一个类别称为反类。\n泛化、过拟合与欠拟合如果一个模型能够对没见过的数据做出准确预测，我们就说它能够从训练集泛化到测试集。过拟合：训练集上表现很好，不能新数据上的模型——对现有信息量而言过于复杂欠拟合：过于简单的模型，甚至在训练集上表现就很差。\n监督学习算法一个模拟的二分类数据集示例是forge数据集，它有两个特征。下列代码将绘制一个散点图，将此数据集中的所有数据点可视化。图像以第一个特征为x轴，第二个特征为y轴。每个数据点对应图像中一点，每个点的颜色和形状对于其类别。\n#生成数据集\nX,y&#x3D;mglearn.datasets.make_forge()\n#数据集绘图\nmglearn.discrete_scatter(X[:0],X[:,1],y)\nplt.legend([&quot;Class 0&quot;,&quot;Class 1&quot;],loc&#x3D;4)\nplt.xlabel(&quot;First feature&quot;)\nplt.ylabel(&quot;Second feature&quot;)\nprint(&quot;X.shape:&#123;&#125;&quot;.format(X.shape))\n\n\n输出：\n\n\n\n\n\n\n\n\n\nX.shape:(26,2)\n从X.shape可以看出，这个数据集包含26个数据点和2给特征。\n用模拟的wave数据集来说明回归算法。wave数据集只有一个输入特征和一个连续的目标变量（或响应），后者是模型想要预测的对象。下面绘制的图像中单一特征位于x轴，回归目标（输出）位于y轴。\nX,y&#x3D;mglearn.datasets.make_wave(n_samples&#x3D;40)\nplt.plot(X,y,&#39;o&#39;)\nplt.ylim(-3,3)\nplt.xlabel(&quot;Feature&quot;)\nplt.ylabel(&quot;Target&quot;)\nplt.show()\n\nk近邻k近邻分类k-NN算法最简单的版本只考虑一个最近邻，也就是与我们想要预测的数据点最近的训练数据点。预测结果就是这个训练数据点的已知输出。\nmglearn.plots.plot_knn_classification(n_neighbors&#x3D;1)\n\n除了仅考虑最近邻，还可以考虑任意个（k个）邻居。3个近邻的例子：\nmglearn.plots.plot_knn_classification(n_neighbors&#x3D;3)\n现在看一下如何通过scikit-learn来应用k近邻算法。首先，将数据分为训练集和测试集，以便评估泛化性能：\nfrom sklearn.model_selection import train_test_split\nX,y &#x3D; mglearn.datasets.make_forge()\n\nX_train,X_test,y_train,y_test &#x3D; train_test_split(X,y,random_state&#x3D;0)\n然后，导入类并将其实例化。这时可以设置参数，比如邻居的个数。这里我们将其设为3：\nfrom sklearn.neighbors import KNeighborsClassifier\nclf&#x3D;KNeighborsClassifier(n_neighbors&#x3D;3)\n现在，利用训练集对分类器进行拟合。对于KNeighborsClassifier来说就是保存数据，以便在预测时计算与邻居之间的距离：\nclf.fit(X_train,y_train)\n调用predict方法来对测试数据进行预测。对于测试集中的每个数据点，都要计算它在训练集的最近邻，然后找出其中出现次数最多的类别。\nprint(&quot;Test set predictions :&#123;&#125;&quot;.format(clf.predict(X_test)))\n输出：\n\n\n\n\n\n\n\n\n\nTest set predictions :[1 0 1 0 1 0 0]\n为了评估模型的泛化能力好坏，我们可以对测试数据和测试标签调用score方法:\nprint(&quot;Test set accuracy :&#123;:.2f&#125;&quot;.format(clf.score(X_test,y_test)))\n输出：\n\n\n\n\n\n\n\n\n\nTest set accuracy :0.86\n模型精度约为86%\n分析KNeighborsClassifier对于二维数据集，我们还可以在xy平面上画出所有可能的测试点的预测结果。我们根据平面中每个点所属的类别对平面进行着色。这样可以查看决策边界，即算法对类别0和类别1的分界线。\n下面代码分别将1个、3个和9个邻居三种情况的决策边界可视化。\nfig ,axes &#x3D; plt.subplots(1,3,figsize&#x3D;(10,3))\n\nfor n_neighbors,ax in zip([1,3,9],axes):\n   clf &#x3D; KNeighborsClassifier(n_neighbors&#x3D;n_neighbors).fit(X,y)\n   mglearn.plots.plot_2d_separator(clf,X,fill&#x3D;True,eps&#x3D;0.5,ax&#x3D;ax,alpha&#x3D;.4)\n   mglearn.discrete_scatter(X[:,0],X[:,1],y,ax&#x3D;ax)\n   ax.set_title(&quot;&#123;&#125;neighbor(s)&quot;.format(n_neighbors))\n   ax.set_xlabel(&quot;feature 0&quot;)\n   ax.set_ylabel(&quot;feature 1&quot;)\naxes[0].legend(loc&#x3D;3)\n 从左图可以看出，使用单一邻居绘制的决策边界紧跟着训练数据。随着邻居个数越来越多，决策边界也越来越平滑。 使用更少的邻居对应更高的模型复杂度。\n我们来研究一下是否能证实模型复杂度和泛化能力之间的关系。我们将在现实世界的乳腺癌数据集上进行研究。先将数据集分成训练集和测试集，然后用不同的邻居个数对训练集和测试集的性能进行评估。\nfrom sklearn.datasets import load_breast_cancer\n\ncancer &#x3D; load_breast_cancer()\nX_train,X_test,y_train,y_test&#x3D;train_test_split(cancer.data,cancer.target,stratify&#x3D;cancer.target,random_state&#x3D;66)\ntraining_accuracy&#x3D;[]\ntest_accuracy&#x3D;[]\nneighbors_settings&#x3D;range(1,11)\n\nfor n_neighbors in  neighbors_settings:\n  #构建模型\n  clf&#x3D;KNeighborsClassifier(n_neighbors&#x3D;n_neighbors)\n  clf.fit(X_train,y_train)\n  #记录数据集精度\n  training_accuracy.append(clf.score(X_train,y_train))\n  #记录泛化精度\n  test_accuracy.append(clf.score(X_test,y_test))\nplt.plot(neighbors_settings,training_accuracy,label&#x3D;&quot;training accuracy&quot;)\nplt.plot(neighbors_settings,test_accuracy,label&#x3D;&quot;test accuracy&quot;)\nplt.ylabel(&quot;Accuracy&quot;)\nplt.xlabel(&quot;n_neighbors&quot;)\nplt.legend()\nplt.show()\n\nk近邻回归k近邻算法可以用于回归。我们从单一近邻开始，这次使用wave数据集。我们添加了3个测试数据点，在x轴上用绿色五角星表示。利用单一邻居的预测结果就是最近邻的目标值。在图中用蓝色五角星表示：\nmglearn.plots.plot_knn_regression(n_neighbors&#x3D;1)\n同样，也可以用多个近邻进行回归。在使用多个近邻时，预测结果为这些邻居的平均值：\nmglearn.plots.plot_knn_regression(n_neighbors&#x3D;3)\n用于回归的k近邻算法在scikit-learn的KNeighborsRegressor类中实现。\nfrom sklearn.neighbors import KNeighborsRegressor\nX,y&#x3D;mglearn.datasets.make_wave(n_samples&#x3D;40)\n#将wave数据集分为训练集和测试集\nX_train,X_test,y_train,y_test&#x3D;train_test_split(X,y,random_state&#x3D;0)\n\n#模型实例化，并将邻居个数设为3\nreg&#x3D;KNeighborsRegressor(n_neighbors&#x3D;3)\n#利用训练数据和训练目标值来拟合模型\nreg.fit(X_train,y_train)\n\n现在可以对测试集进行预测：\nprint(&quot;Test set predictions:\\n&#123;&#125;&quot;.format(reg.predict(X_test)))\n\n\n\n\n\n\n\n\n\nTest set predictions:[-0.05396539  0.35686046  1.13671923 -1.89415682 -1.13881398 -1.631133820.35686046  0.91241374 -0.44680446 -1.13881398]\n我们还可以用score方法来 评估模型，对于回归问题，这一方法返回的是$R^2$分数。$R^2$分数也叫做决定系数，是回归模型预测的优先度量，位于0到1之间。$R^2=1$对应完美预测，$R^2=0$对应常数模型，即总是预测训练集响应（y_train）的平均值：\nprint(&quot;Test set R^2:&#123;:.2f&#125;&quot;.format(reg.score(X_test,y_test)))\n\n\n\n\n\n\n\n\n\nTest set R^2:0.83\n分析KNeighborsRegressor对于我们的一维数据集，可以查看所有特征值对应的预测结果。为了便于绘图，我们创建一个由许多点组成的测试数据集：\nfig,axes&#x3D;plt.subplots(1,3,figsize&#x3D;(15,4))\n#创建1000个数据点，在-3和3之间均匀分布\nline&#x3D;np.linspace(-3,3,1000).reshape(-1,1)\nfor n_neighbors,ax in zip([1,3,9],axes):\n#利用1个，3个或9个邻居分别进行预测\n   reg&#x3D;KNeighborsRegressor(n_neighbors&#x3D;n_neighbors)\n   reg.fit(X_train,y_train)\n   ax.plot(line,reg.predict(line))\n   ax.plot(X_train,y_train,&#39;^&#39;,c&#x3D;mglearn.cm2(0),markersize&#x3D;8)\n   ax.plot(X_test,y_test,&#39;v&#39;,c&#x3D;mglearn.cm2(1),markersize&#x3D;8)\n   ax.set_title(\n       &quot;&#123;&#125;neighbor(s)\\n train score:&#123;:.2f&#125; test score:&#123;:.2f&#125;&quot;.format(\n     n_neighbors,reg.score(X_train,y_train),\n     reg.score(X_test,y_test)))\n   ax.set_xlabel(&quot;Feature&quot;)\n   ax.set_ylabel(&quot;Target&quot;)\naxes[0].legend([&quot;Model predictions&quot;,&quot;Training data&#x2F;target&quot;,&quot;Test data&#x2F;target&quot;],loc&#x3D;&quot;best&quot;)\n\n线性模型线性模型利用输入特征的线性函数进行预测。\n用于回归的线性模型对于回归问题，线性模型预测的一般公式如下：$\\hat{y}=w[0]x[0]+w[1]x[1]+···+w[p]*x[p]+b$这里$x[0]$到$x[p]$表示单个数据点的特征（本例中特征个数为p+1），$w$和$b$是学习模型的参数，$\\hat{y}$是模型的预测结果。\n对于单一特征的数据集，公式如下：$\\hat{y}=w[0]*x[0]+b$\n下列代码可以在一维wave数据集上学习参数$w[0]$和$b$\nmglearn.plots.plot_linear_regression_wave()\n\n\n\n\n\n\n\n\n\n\nw[0]: 0.393906  b: -0.031804\n线性回归（最小二乘法）线性回归，或者普通最小二乘法，是回归问题最简单也是最经典的线性方法。线性回归寻找参数$w$和$b$，使得对训练集的预测值与真实的回归目标值$y$之间的均方误差最小。\n均方误差是预测值与真实值之差的平方和除以样本数。\nfrom sklearn.linear_model import LinearRegression\nX,y&#x3D;mglearn.datasets.make_wave(n_samples&#x3D;60)\nX_train,X_tset,y_train,y_test&#x3D;train_test_split(X,y,random_state&#x3D;42)\n\nlr&#x3D;LinearRegression().fit(X_train,y_train)\n斜率$w$（也叫做权重或系数），被保存在coef_属性中，而偏移或截距（$b$）被保存在intercept_属性中。\nprint(&quot;lr.coef_:&#123;&#125;&quot;.format(lr.coef_))\nprint(&quot;lr.intercept_:&#123;&#125;&quot;.format(lr.intercept_))\n\n\n\n\n\n\n\n\n\nlr.coef_:[0.39390555]lr.intercept_:-0.031804343026759746\n岭回归岭回归也是一种用于回归的线性模型，因此他的预测公式与普通最小二乘法相同。在岭回归中，对系数的选择不仅要在训练集上得到好的预测效果，还要拟合附加约束。我们还希望系数尽量小。\n正则化是指对模型做显式约束，避免过拟合。岭回归用到的这种被称为L2正则化。\nmglearn.plots.plot_ridge_n_samples()\n岭回归和线性回归在波士顿房价数据集上的学习曲线\nlasso除了Ridge，还有一种正则化的线性回归是lasso。与岭回归相同，使用lasso也是约束系数使其接近于0，但用的是L1正则化。L1正则化的结果是，使用lasso时某些系数刚好为0.\n在实践中，两个模型中一般首选岭回归。但如果特征很多，你认为只有其中几个是重要的，那选择lasso可能更好。\n用于分类的线性模型对于用于分类的线性模型，决策边界是输入的线性函数。换句话说，（二元）线性分类器是利用直线、平面或超平面来分开两个类别的分类器。\n学习线性模型有很多种算法。这些算法的区别在于以下两点：\n\n系数和截距的特定组合对训练数据拟合好坏的度量方法；\n是否使用正则化，以及使用哪种正则化方法。\n\n最常见的两种线性分类算法是Logistic回归和线性支持向量机。前者在linear_model.LogisticRegression中实现，后者在svm.LinearSVC中实现。\n我们可将LogisticRegression和LinearSVC模型 应用到forge数据集上，并将线性模型找到的决策边界可视化。\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import LinearSVC\n\nX,y &#x3D;mglearn.datasets.make_forge()\n\nfig,axes&#x3D;plt.subplots(1,2,figsize&#x3D;(10,3))\n\nfor model ,ax in zip([LinearSVC(),LogisticRegression()],axes):\n    clf &#x3D; model.fit(X,y)\n    mglearn.plots.plot_2d_separator(clf,X,fill&#x3D;False,eps&#x3D;0.5,ax&#x3D;ax,alpha&#x3D;.7)\n    mglearn.discrete_scatter(X[:,0],X[:,1],y,ax&#x3D;ax)\n    ax.set_title(&quot;&#123;&#125;&quot;.format(clf._class_._name_))\n    ax.set_xlabel(&quot;Feature 0&quot;)\n    ax.set_ylabel(&quot;Feature 1&quot;)\naxes[0].legend()\n        \n在这张图中，forge数据集的第一个特征位于x轴，第二个特征位于y轴。图中分别展示了LinearSVC和LogisticRegression得到的决策边界，都是直线，将顶部归为类别1的区域和底部归为类别0 的区域分开了。换句话说，对于每个分类器而言，位于黑线上方的新数据点都会被划为类别1，而在黑线下方的点都会被划为类别0.\n对于上述二者，决定正则化强度的权衡参数叫做C。C值越大，对应的正则化越弱。换句话说，如果参数C值较大，二者将尽可能将训练集拟合到最好，而如果C值较小，那么模型更强调使系数向量（$w$）接近于0 .\nmglearn.plots.plot_linear_svc_regularization()\n不同C值的线性SVM在forge数据集上的决策边界我们在乳腺癌数据集上详细分析LogisticRegression\nfrom sklearn.datasets import load_breast_cancer\ncancer&#x3D;load_breast_cancer()\nX_train,X_test,y_train,y_test&#x3D;train_test_split(cancer.data,cancer.target,stratify&#x3D;cancer.target,random_state&#x3D;42)\nlogreg&#x3D;LogisticRegression().fit(X_train,y_train)\n\nlogreg100&#x3D;LogisticRegression(C&#x3D;100).fit(X_train,y_train)\n\nlogreg001&#x3D;LogisticRegression(C&#x3D;0.01).fit(X_train,y_train)\n\nplt.plot(logreg.coef_.T,&#39;o&#39;,label&#x3D;&quot;C&#x3D;1&quot;)\nplt.plot(logreg100.coef_.T,&#39;^&#39;,label&#x3D;&quot;C&#x3D;100&quot;)\nplt.plot(logreg001.coef_.T,&#39;v&#39;,label&#x3D;&quot;C&#x3D;0.001&quot;)\nplt.xticks(range(cancer.data.shape[1]),cancer.feature_names,rotation&#x3D;90)\nplt.hlines(0,0,cancer.data.shape[1])\nplt.ylim(-5,5)\nplt.xlabel(&quot;Coefficient index&quot;)\nplt.ylabel(&quot;Coefficient magnitude&quot;)\nplt.legend()\n\n用于多分类的线性模型将二分类算法推广到多分类算法的一种常见方法是”一对其余“方法。在这个方法中，对每个类别都学习一个二分类模型，将这个类别与所有其他类别尽量分开，这样就生成了与类别个数一样多的二分类模型。在测试点运行所有二类分类器来进行预测。在对应类别上分数最高的分类器”胜出”,将这个类别标签返回作为预测结果。\n我们将”一对其余“方法应用在一个简单的三分类数据集上。我们用到了一个二维数据集，每个类别的数据都是从一个高斯分布中采样得出的。\nfrom sklearn.datasets import make_blobs\nX,y&#x3D; make_blobs(random_state&#x3D;42)\n\nmglearn.discrete_scatter(X[:,0],X[:,1],y)\nplt.xlabel(&quot;Feature 0&quot;)\nplt.ylabel(&quot;Feature 1&quot;)\nplt.legend([&quot;Class 0&quot;,&quot;Class 1&quot;,&quot;Class 2&quot;])\n包含3个类别的二位玩具数据集：现在，在这个数据集上训练一个LinearSVC分类器：\nlinear_svm&#x3D;LinearSVC().fit(X,y)\nmglearn.discrete_scatter(X[:,0],X[:,1],y)\nline&#x3D;np.linspace(-15,15)\nfor coef,intercept,color in zip(linear_svm.coef_,linear_svm.intercept_,[&#39;b&#39;,&#39;r&#39;,&#39;g&#39;]):\n   plt.plot(line,-(line*coef[0]+intercept)&#x2F;coef[1],c&#x3D;color)\nplt.ylim(-10,15)\nplt.xlim(-10,8)\nplt.xlabel(&quot;Feature 0&quot;)\nplt.ylabel(&quot;Feature 1&quot;)\nplt.legend([&#39;Class 0&#39;,&#39;Class 1&#39;,&#39;Class 2&#39;,&#39; Line Class 0&#39;,&#39; Line Class 1&#39;,&#39; Line Class 2&#39;],loc&#x3D;(1.01,0.3))\n\n\n\nmglearn.plots.plot_2d_classification(linear_svm,X,fill&#x3D;True,alpha&#x3D;.7)\nmglearn.discrete_scatter(X[:,0],X[:,1],y)\nline&#x3D;np.linspace(-15,15)\nfor coef,intercept,color in zip(linear_svm.coef_,linear_svm.intercept_,[&#39;b&#39;,&#39;r&#39;,&#39;g&#39;]):\n   plt.plot(line,-(line*coef[0]+intercept)&#x2F;coef[1],c&#x3D;color)\nplt.ylim(-10,15)\nplt.xlim(-10,8)\nplt.xlabel(&quot;Feature 0&quot;)\nplt.ylabel(&quot;Feature 1&quot;)\nplt.legend([&#39;Class 0&#39;,&#39;Class 1&#39;,&#39;Class 2&#39;,&#39; Line Class 0&#39;,&#39; Line Class 1&#39;,&#39; Line Class 2&#39;],loc&#x3D;(1.01,0.3))\n\n","slug":"python机器学习1","date":"2022-11-03T14:51:49.000Z","categories_index":"机器学习","tags_index":"python,机器学习","author_index":"Algernon"},{"id":"355b3b6cd1787b40c18a74c859cf58d1","title":"【Go语言编程】（一）","content":"w3c环境搭建\nw3cschool第一个go程序配置路径：\n$env:Path &#x3D; [System.Environment]::GetEnvironmentVariable(&quot;Path&quot;,&quot;Machine&quot;)\npackage main\nimport &quot;fmt&quot;\nfunc main() &#123;\n fmt.Printf(&quot;Hello, world or 你好，世界 or καλημ ́ρα κóσμ or こんにちは世界\\n&quot;)\n&#125;\n\n\n\n\n\n\n\n\n\n\nHello, world or 你好，世界 or καλημ ́ρα κóσμ or こんにちは世界\n\n基础语法字符串连接package main\nimport &quot;fmt&quot;\nfunc main()&#123;\n    fmt.Println(&quot;HNU&quot;+&quot;是学习编程的好地方&quot;)\n&#125;\n\n\n\n\n\n\n\n\n\nW3Cschool是学习编程的好地方\n变量声明单变量声明package main\nvar a &#x3D; &quot;bio sheep教程&quot;\nvar b string &#x3D; &quot;bio sheep.cn&quot;\nvar c bool\n\nfunc main()&#123;\n    println(a, b, c)\n&#125;\nbio sheep教程 bio sheep.cn false\n多变量声明\npackage main\n\nvar x, y int\nvar (  \n    a int\n    b bool\n)\n\nvar c, d int &#x3D; 1, 2\nvar e, f &#x3D; 123, &quot;hello&quot;\n\n&#x2F;&#x2F;这种不带声明格式的只能在函数体中出现\n&#x2F;&#x2F;g, h :&#x3D; 123, &quot;hello&quot;\n\nfunc main()&#123;\n    g, h :&#x3D; 123, &quot;hello&quot;\n    println(x, y, a, b, c, d, e, f, g, h)\n&#125;\n\n\n\n\n\n\n\n\n\n0 0 0 false 1 2 123 hello 123 hello\n常量package main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n   const LENGTH int &#x3D; 10\n   const WIDTH int &#x3D; 5   \n   var area int\n   const a, b, c &#x3D; 1, false, &quot;str&quot; &#x2F;&#x2F;多重赋值\n\n   area &#x3D; LENGTH * WIDTH\n   fmt.Printf(&quot;面积为 : %d&quot;, area)\n   println()\n   println(a, b, c)   \n&#125;\n\n面积为 : 501 false str\niota\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n\tconst (\n\t\ta &#x3D; iota &#x2F;&#x2F;0\n\t\tb        &#x2F;&#x2F;1\n\t\tc        &#x2F;&#x2F;2\n\t\td &#x3D; &quot;ha&quot; &#x2F;&#x2F;独立值，iota +&#x3D; 1\n\t\te        &#x2F;&#x2F;&quot;ha&quot;   iota +&#x3D; 1\n\t\tf &#x3D; 100  &#x2F;&#x2F;iota +&#x3D;1\n\t\tg        &#x2F;&#x2F;100  iota +&#x3D;1\n\t\th &#x3D; iota &#x2F;&#x2F;7,恢复计数\n\t\ti        &#x2F;&#x2F;8\n\t)\n\tfmt.Println(a, b, c, d, e, f, g, h, i)\n&#125;\n\n\npackage main\n\nimport &quot;fmt&quot;\nconst (\n    i&#x3D;1&lt;&lt;iota\n    j&#x3D;3&lt;&lt;iota\n    k\n    l\n)\nfunc main() &#123;\n    fmt.Println(&quot;i&#x3D;&quot;,i)\n    fmt.Println(&quot;j&#x3D;&quot;,j)\n    fmt.Println(&quot;k&#x3D;&quot;,k)\n    fmt.Println(&quot;l&#x3D;&quot;,l)\n&#125; \n\nGo 语言运算符\npackage main\n\nimport &quot;fmt&quot;\nfunc main() &#123;\n\n   var a int &#x3D; 21\n   var b int &#x3D; 10\n   var c int\n\n   c &#x3D; a + b\n   fmt.Printf(&quot;第一行 - c 的值为 %d\\n&quot;, c )\n   c &#x3D; a - b\n   fmt.Printf(&quot;第二行 - c 的值为 %d\\n&quot;, c )\n   c &#x3D; a * b\n   fmt.Printf(&quot;第三行 - c 的值为 %d\\n&quot;, c )\n   c &#x3D; a &#x2F; b\n   fmt.Printf(&quot;第四行 - c 的值为 %d\\n&quot;, c )\n   c &#x3D; a % b\n   fmt.Printf(&quot;第五行 - c 的值为 %d\\n&quot;, c )\n   a++\n   fmt.Printf(&quot;第六行 - c 的值为 %d\\n&quot;, a )\n   a--\n   fmt.Printf(&quot;第七行 - c 的值为 %d\\n&quot;, a )\n&#125;\n\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n   var a int &#x3D; 21\n   var b int &#x3D; 10\n\n   if a &#x3D;&#x3D; b  &#123;\n      fmt.Printf(&quot;第一行 - a 等于 b\\n&quot; )\n   &#125; else &#123;\n      fmt.Printf(&quot;第一行 - a 不等于 b\\n&quot; )\n   &#125;\n   if  a &lt; b  &#123;\n      fmt.Printf(&quot;第二行 - a 小于 b\\n&quot; )\n   &#125; else &#123;\n      fmt.Printf(&quot;第二行 - a 不小于 b\\n&quot; )\n   &#125;\n   if  a &gt; b  &#123;\n      fmt.Printf(&quot;第三行 - a 大于 b\\n&quot; )\n   &#125; else &#123;\n      fmt.Printf(&quot;第三行 - a 不大于 b\\n&quot; )\n   &#125;\n   &#x2F;* Lets change value of a and b *&#x2F;\n   a &#x3D; 5\n   b &#x3D; 20\n   if  a &lt;&#x3D; b  &#123;\n      fmt.Printf(&quot;第四行 - a 小于等于  b\\n&quot; )\n   &#125;\n   if  b &gt;&#x3D; a  &#123;\n      fmt.Printf(&quot;第五行 - b 大于等于 a\\n&quot; )\n   &#125;\n&#125;\n\n\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n   var a bool &#x3D; true\n   var b bool &#x3D; false\n   if  a &amp;&amp; b  &#123;\n      fmt.Printf(&quot;第一行 - 条件为 true\\n&quot; )\n   &#125;\n   if  a || b  &#123;\n      fmt.Printf(&quot;第二行 - 条件为 true\\n&quot; )\n   &#125;\n   &#x2F;* 修改 a 和 b 的值 *&#x2F;\n   a &#x3D; false\n   b &#x3D; true\n   if  a &amp;&amp; b  &#123;\n      fmt.Printf(&quot;第三行 - 条件为 true\\n&quot; )\n   &#125; else &#123;\n      fmt.Printf(&quot;第三行 - 条件为 false\\n&quot; )\n   &#125;\n   if  !(a &amp;&amp; b)  &#123;\n      fmt.Printf(&quot;第四行 - 条件为 true\\n&quot; )\n   &#125;\n&#125;\n\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n   var a int &#x3D; 21\n   var c int\n\n   c &#x3D;  a\n   fmt.Printf(&quot;第 1 行 - &#x3D;  运算符实例，c 值为 &#x3D; %d\\n&quot;, c )\n\n   c +&#x3D;  a\n   fmt.Printf(&quot;第 2 行 - +&#x3D; 运算符实例，c 值为 &#x3D; %d\\n&quot;, c )\n\n   c -&#x3D;  a\n   fmt.Printf(&quot;第 3 行 - -&#x3D; 运算符实例，c 值为 &#x3D; %d\\n&quot;, c )\n\n   c *&#x3D;  a\n   fmt.Printf(&quot;第 4 行 - *&#x3D; 运算符实例，c 值为 &#x3D; %d\\n&quot;, c )\n\n   c &#x2F;&#x3D;  a\n   fmt.Printf(&quot;第 5 行 - &#x2F;&#x3D; 运算符实例，c 值为 &#x3D; %d\\n&quot;, c )\n\n   c  &#x3D; 200\n   c &lt;&lt;&#x3D;  2\n   fmt.Printf(&quot;第 6 行  - &lt;&lt;&#x3D; 运算符实例，c 值为 &#x3D; %d\\n&quot;, c )\n\n   c &gt;&gt;&#x3D;  2\n   fmt.Printf(&quot;第 7 行 - &gt;&gt;&#x3D; 运算符实例，c 值为 &#x3D; %d\\n&quot;, c )\n\n   c &amp;&#x3D;  2\n   fmt.Printf(&quot;第 8 行 - &amp;&#x3D; 运算符实例，c 值为 &#x3D; %d\\n&quot;, c )\n\n   c ^&#x3D;  2\n   fmt.Printf(&quot;第 9 行 - ^&#x3D; 运算符实例，c 值为 &#x3D; %d\\n&quot;, c )\n\n   c |&#x3D;  2\n   fmt.Printf(&quot;第 10 行 - |&#x3D; 运算符实例，c 值为 &#x3D; %d\\n&quot;, c )\n&#125;\n\n函数package main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n   &#x2F;* 定义局部变量 *&#x2F;\n   var a int &#x3D; 100\n   var b int &#x3D; 200\n   var ret int\n\n   &#x2F;* 调用函数并返回最大值 *&#x2F;\n   ret &#x3D; max(a, b)\n\n   fmt.Printf( &quot;最大值是 : %d\\n&quot;, ret )\n&#125;\n\n&#x2F;* 函数返回两个数的最大值 *&#x2F;\nfunc max(num1, num2 int) int &#123;\n   &#x2F;* 定义局部变量 *&#x2F;\n   var result int\n\n   if (num1 &gt; num2) &#123;\n      result &#x3D; num1\n   &#125; else &#123;\n      result &#x3D; num2\n   &#125;\n   return result \n&#125;\n\n数组package main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n   var n [10]int &#x2F;* n 是一个长度为 10 的数组 *&#x2F;\n   var i,j int\n\n   &#x2F;* 为数组 n 初始化元素 *&#x2F;         \n   for i &#x3D; 0; i &lt; 10; i++ &#123;\n      n[i] &#x3D; i + 100 &#x2F;* 设置元素为 i + 100 *&#x2F;\n   &#125;\n\n   &#x2F;* 输出每个数组元素的值 *&#x2F;\n   for j &#x3D; 0; j &lt; 10; j++ &#123;\n      fmt.Printf(&quot;Element[%d] &#x3D; %d\\n&quot;, j, n[j] )\n   &#125;\n&#125;\n\n指针package main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n   var a int&#x3D; 20   &#x2F;* 声明实际变量 *&#x2F;\n   var ip *int        &#x2F;* 声明指针变量 *&#x2F;\n\n   ip &#x3D; &amp;a  &#x2F;* 指针变量的存储地址 *&#x2F;\n\n   fmt.Printf(&quot;a 变量的地址是: %x\\n&quot;, &amp;a  )\n\n   &#x2F;* 指针变量的存储地址 *&#x2F;\n   fmt.Printf(&quot;ip 变量的存储地址: %x\\n&quot;, ip )\n\n   &#x2F;* 使用指针访问值 *&#x2F;\n   fmt.Printf(&quot;*ip 变量的值: %d\\n&quot;, *ip )\n&#125;\n\n结构体package main\n\nimport &quot;fmt&quot;\n\ntype Books struct &#123;\n   title string\n   author string\n   subject string\n   book_id int\n&#125;\n\nfunc main() &#123;\n   var Book1 Books        &#x2F;* 声明 Book1 为 Books 类型 *&#x2F;\n   var Book2 Books        &#x2F;* 声明 Book2 为 Books 类型 *&#x2F;\n\n   &#x2F;* book 1 描述 *&#x2F;\n   Book1.title &#x3D; &quot;Go 语言&quot;\n   Book1.author &#x3D; &quot;www.w3cschool.cn&quot;\n   Book1.subject &#x3D; &quot;Go 语言教程&quot;\n   Book1.book_id &#x3D; 6495407\n\n   &#x2F;* book 2 描述 *&#x2F;\n   Book2.title &#x3D; &quot;Python 教程&quot;\n   Book2.author &#x3D; &quot;www.w3cschool.cn&quot;\n   Book2.subject &#x3D; &quot;Python 语言教程&quot;\n   Book2.book_id &#x3D; 6495700\n\n   &#x2F;* 打印 Book1 信息 *&#x2F;\n   fmt.Printf( &quot;Book 1 title : %s\\n&quot;, Book1.title)\n   fmt.Printf( &quot;Book 1 author : %s\\n&quot;, Book1.author)\n   fmt.Printf( &quot;Book 1 subject : %s\\n&quot;, Book1.subject)\n   fmt.Printf( &quot;Book 1 book_id : %d\\n&quot;, Book1.book_id)\n\n   &#x2F;* 打印 Book2 信息 *&#x2F;\n   fmt.Printf( &quot;Book 2 title : %s\\n&quot;, Book2.title)\n   fmt.Printf( &quot;Book 2 author : %s\\n&quot;, Book2.author)\n   fmt.Printf( &quot;Book 2 subject : %s\\n&quot;, Book2.subject)\n   fmt.Printf( &quot;Book 2 book_id : %d\\n&quot;, Book2.book_id)\n&#125;\n\n\npackage main\n\nimport &quot;fmt&quot;\n\ntype Books struct &#123;\n   title string\n   author string\n   subject string\n   book_id int\n&#125;\n\nfunc main() &#123;\n   var Book1 Books        &#x2F;* 声明 Book1 为 Books 类型 *&#x2F;\n   var Book2 Books        &#x2F;* 声明 Book2 为 Books 类型 *&#x2F;\n\n   &#x2F;* book 1 描述 *&#x2F;\n   Book1.title &#x3D; &quot;Go 语言&quot;\n   Book1.author &#x3D; &quot;www.w3cschool.cn&quot;\n   Book1.subject &#x3D; &quot;Go 语言教程&quot;\n   Book1.book_id &#x3D; 6495407\n\n   &#x2F;* book 2 描述 *&#x2F;\n   Book2.title &#x3D; &quot;Python 教程&quot;\n   Book2.author &#x3D; &quot;www.w3cschool.cn&quot;\n   Book2.subject &#x3D; &quot;Python 语言教程&quot;\n   Book2.book_id &#x3D; 6495700\n\n   &#x2F;* 打印 Book1 信息 *&#x2F;![在这里插入图片描述](https:&#x2F;&#x2F;img-blog.csdnimg.cn&#x2F;0bd7342a122c489bb7994cca335dc3ab.png)\n\n   printBook(Book1)\n\n   &#x2F;* 打印 Book2 信息 *&#x2F;\n   printBook(Book2)\n&#125;\n\nfunc printBook( book Books ) &#123;\n   fmt.Printf( &quot;Book title : %s\\n&quot;, book.title)\n   fmt.Printf( &quot;Book author : %s\\n&quot;, book.author)\n   fmt.Printf( &quot;Book subject : %s\\n&quot;, book.subject)\n   fmt.Printf( &quot;Book book_id : %d\\n&quot;, book.book_id)\n&#125;\n\n\n切片package main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n   &#x2F;* 创建切片 *&#x2F;\n   numbers :&#x3D; []int&#123;0,1,2,3,4,5,6,7,8&#125;   \n   printSlice(numbers)\n\n   &#x2F;* 打印原始切片 *&#x2F;\n   fmt.Println(&quot;numbers &#x3D;&#x3D;&quot;, numbers)\n\n   &#x2F;* 打印子切片从索引1(包含) 到索引4(不包含)*&#x2F;\n   fmt.Println(&quot;numbers[1:4] &#x3D;&#x3D;&quot;, numbers[1:4])\n\n   &#x2F;* 默认下限为 0*&#x2F;\n   fmt.Println(&quot;numbers[:3] &#x3D;&#x3D;&quot;, numbers[:3])\n\n   &#x2F;* 默认上限为 len(s)*&#x2F;\n   fmt.Println(&quot;numbers[4:] &#x3D;&#x3D;&quot;, numbers[4:])\n\n   numbers1 :&#x3D; make([]int,0,5)\n   printSlice(numbers1)\n\n   &#x2F;* 打印子切片从索引  0(包含) 到索引 2(不包含) *&#x2F;\n   number2 :&#x3D; numbers[:2]\n   printSlice(number2)\n\n   &#x2F;* 打印子切片从索引 2(包含) 到索引 5(不包含) *&#x2F;\n   number3 :&#x3D; numbers[2:5]\n   printSlice(number3)\n\n&#125;\n\nfunc printSlice(x []int)&#123;\n   fmt.Printf(&quot;len&#x3D;%d cap&#x3D;%d slice&#x3D;%v\\n&quot;,len(x),cap(x),x)\n&#125;\n\nmappackage main\nimport &quot;fmt&quot;\nfunc main() &#123;\n    &#x2F;&#x2F;这是我们使用range去求一个slice的和。使用数组跟这个很类似\n    nums :&#x3D; []int&#123;2, 3, 4&#125;\n    sum :&#x3D; 0\n    for _, num :&#x3D; range nums &#123;\n        sum +&#x3D; num\n    &#125;\n    fmt.Println(&quot;sum:&quot;, sum)\n    &#x2F;&#x2F;在数组上使用range将传入index和值两个变量。上面那个例子我们不需要使用该元素的序号，所以我们使用空白符&quot;_&quot;省略了。有时侯我们确实需要知道它的索引。\n    for i, num :&#x3D; range nums &#123;\n        if num &#x3D;&#x3D; 3 &#123;\n            fmt.Println(&quot;index:&quot;, i)\n        &#125;\n    &#125;\n    &#x2F;&#x2F;range也可以用在map的键值对上。\n    kvs :&#x3D; map[string]string&#123;&quot;a&quot;: &quot;apple&quot;, &quot;b&quot;: &quot;banana&quot;&#125;\n    for k, v :&#x3D; range kvs &#123;\n        fmt.Printf(&quot;%s -&gt; %s\\n&quot;, k, v)\n    &#125;\n    &#x2F;&#x2F;range也可以用来枚举Unicode字符串。第一个参数是字符的索引，第二个是字符（Unicode的值）本身。\n    for i, c :&#x3D; range &quot;go&quot; &#123;\n        fmt.Println(i, c)\n    &#125;\n&#125;\n\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n   var countryCapitalMap map[string]string\n   &#x2F;* 创建集合 *&#x2F;\n   countryCapitalMap &#x3D; make(map[string]string)\n   \n   &#x2F;* map 插入 key-value 对，各个国家对应的首都 *&#x2F;\n   countryCapitalMap[&quot;France&quot;] &#x3D; &quot;Paris&quot;\n   countryCapitalMap[&quot;Italy&quot;] &#x3D; &quot;Rome&quot;\n   countryCapitalMap[&quot;Japan&quot;] &#x3D; &quot;Tokyo&quot;\n   countryCapitalMap[&quot;India&quot;] &#x3D; &quot;New Delhi&quot;\n   \n   &#x2F;* 使用 key 输出 map 值 *&#x2F;\n   for country :&#x3D; range countryCapitalMap &#123;\n      fmt.Println(&quot;Capital of&quot;,country,&quot;is&quot;,countryCapitalMap[country])\n   &#125;\n   \n   &#x2F;* 查看元素在集合中是否存在 *&#x2F;\n   captial, ok :&#x3D; countryCapitalMap[&quot;United States&quot;]\n   &#x2F;* 如果 ok 是 true, 则存在，否则不存在 *&#x2F;\n   if(ok)&#123;\n      fmt.Println(&quot;Capital of United States is&quot;, captial)  \n   &#125;else &#123;\n      fmt.Println(&quot;Capital of United States is not present&quot;) \n   &#125;\n&#125;\n\n递归函数package main\n\nimport &quot;fmt&quot;\n\nfunc Factorial(x int) (result int) &#123;\n  if x &#x3D;&#x3D; 0 &#123;\n    result &#x3D; 1   \n  &#125; else &#123;\n    result &#x3D; x * Factorial(x - 1)\n  &#125;\n  return\n&#125;\n\nfunc main() &#123;  \n    var i int &#x3D; 15\n    fmt.Printf(&quot;%d 的阶乘是 %d\\n&quot;, i, Factorial(i))\n&#125;\n\npackage main\n\nimport &quot;fmt&quot;\n\nfunc fibonacci(n int) int &#123;\n  if n &lt; 2 &#123;\n   return n\n  &#125;\n  return fibonacci(n-2) + fibonacci(n-1)\n&#125;\n\nfunc main() &#123;\n    var i int\n    for i &#x3D; 0; i &lt; 10; i++ &#123;\n       fmt.Printf(&quot;%d\\t&quot;, fibonacci(i))\n    &#125;\n&#125;\n\n接口package main\n\nimport (\n    &quot;fmt&quot;\n)\n\ntype Phone interface &#123;\n    call()\n&#125;\n\ntype NokiaPhone struct &#123;\n&#125;\n\nfunc (nokiaPhone NokiaPhone) call() &#123;\n    fmt.Println(&quot;I am Nokia, I can call you!&quot;)\n&#125;\n\ntype IPhone struct &#123;\n&#125;\n\nfunc (iPhone IPhone) call() &#123;\n    fmt.Println(&quot;I am iPhone, I can call you!&quot;)\n&#125;\n\nfunc main() &#123;\n    var phone Phone\n\n    phone &#x3D; new(NokiaPhone)\n    phone.call()\n\n    phone &#x3D; new(IPhone)\n    phone.call()\n\n&#125;\n\n错误处理package main\n\nimport (\n\t&quot;fmt&quot;\n)\n\n&#x2F;&#x2F; 定义一个 DivideError 结构\ntype DivideError struct &#123;\n\tdividee int\n\tdivider int\n&#125;\n\n&#x2F;&#x2F; 实现 &#96;error&#96; 接口\nfunc (de *DivideError) Error() string &#123;\n\tstrFormat :&#x3D; &#96;\n    Cannot proceed, the divider is zero.\n    dividee: %d\n    divider: 0\n&#96;\n\treturn fmt.Sprintf(strFormat, de.dividee)\n&#125;\n\n&#x2F;&#x2F; 定义 &#96;int&#96; 类型除法运算的函数\nfunc Divide(varDividee int, varDivider int) (result int, errorMsg string) &#123;\n\tif varDivider &#x3D;&#x3D; 0 &#123;\n\t\tdData :&#x3D; DivideError&#123;\n\t\t\tdividee: varDividee,\n\t\t\tdivider: varDivider,\n\t\t&#125;\n\t\terrorMsg &#x3D; dData.Error()\n\t\treturn\n\t&#125; else &#123;\n\t\treturn varDividee &#x2F; varDivider, &quot;&quot;\n\t&#125;\n\n&#125;\n\nfunc main() &#123;\n\n\t&#x2F;&#x2F; 正常情况\n\tif result, errorMsg :&#x3D; Divide(100, 10); errorMsg &#x3D;&#x3D; &quot;&quot; &#123;\n\t\tfmt.Println(&quot;100&#x2F;10 &#x3D; &quot;, result)\n\t&#125;\n\t&#x2F;&#x2F; 当被除数为零的时候会返回错误信息\n\tif _, errorMsg :&#x3D; Divide(100, 0); errorMsg !&#x3D; &quot;&quot; &#123;\n\t\tfmt.Println(&quot;errorMsg is: &quot;, errorMsg)\n\t&#125;\n\n&#125;\n\n\n反射package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;reflect&quot;\n)\n\nfunc main() &#123;\n\tvar booknum float32 &#x3D; 6\n\tvar isbook bool &#x3D; true\n\tbookauthor :&#x3D; &quot;www.w3cschool.cn&quot;\n\tbookdetail :&#x3D; make(map[string]string)\n\tbookdetail[&quot;Go语言教程&quot;]&#x3D;&quot;www.w3cschool.cn&quot;\n\tfmt.Println(reflect.ValueOf(booknum))\n\tfmt.Println(reflect.ValueOf(isbook))\n\tfmt.Println(reflect.ValueOf(bookauthor))\n\tfmt.Println(reflect.ValueOf(bookdetail))\n&#125;\n\n并发package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;sync&quot;\n)\n\nvar wg sync.WaitGroup\n\nfunc hello(i int) &#123;\n\tfmt.Printf(&quot;hello,欢迎来到编程狮%v\\n&quot;, i)\n\tdefer wg.Done()&#x2F;&#x2F;goroutine结束计数器-1\n&#125;\n\nfunc main() &#123;\n\tfor i :&#x3D; 0; i &lt; 10; i++ &#123;\n\t\tgo hello(i)\n\t\twg.Add(1)&#x2F;&#x2F;启动一个goroutine计数器+1\n\t&#125;\n\twg.Wait()&#x2F;&#x2F;等待所有的goroutine执行结束\n&#125;\n\n","slug":"GO1","date":"2022-11-03T14:50:49.000Z","categories_index":"编程语言","tags_index":"GO","author_index":"Algernon"},{"id":"7a681ad033be663923aa1e3ac79573bb","title":"【电子羊的奇妙冒险】初试深度学习（3）","content":"噪声高斯噪声\n\n\n\n\n\n\n\n\n高斯噪声是指它的概率密度函数服从高斯分布（即正态分布）的一类噪声。常见的高斯噪声包括起伏噪声、宇宙噪声、热噪声和散粒噪声等等。除常用抑制噪声的方法外，对高斯噪声的抑制方法常常采用数理统计方法。所谓高斯噪声是指它的概率密度函数服从高斯分布（即正态分布）的一类噪声。如果一个噪声，它的幅度分布服从高斯分布，而它的功率谱密度又是均匀分布的，则称它为高斯白噪声。高斯白噪声的二阶矩不相关，一阶矩为常数，是指先后信号在时间上的相关性。高斯白噪声包括热噪声和散粒噪声。在通信信道测试和建模中，高斯噪声被用作加性白噪声以产生加性白高斯噪声。\n添加高斯噪声来源:\n\n\n\n\n\n\n\n\n\nhttps://blog.csdn.net/mikumiku339/article/details/109534376?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E9%AB%98%E6%96%AF%E5%99%AA%E5%A3%B0python&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-109534376.nonecase&amp;spm=1018.2226.3001.4187\n先将原图片的像素值除以255，即将像素值区间[0,255]投射到[0,1]，再添加服从高斯分布的噪声，最后将处理后的像素矩阵乘255恢复。\n代码：\nimport cv2\nimport numpy as np\n\ndef Gaussnoise_func(image, mean&#x3D;0, var&#x3D;0.005):\n    &#39;&#39;&#39; \n    添加高斯噪声\n    mean : 均值 \n    var : 方差\n    &#39;&#39;&#39;\n    image &#x3D; np.array(image&#x2F;255, dtype&#x3D;float)                    #将像素值归一\n    noise &#x3D; np.random.normal(mean, var ** 0.5, image.shape)     #产生高斯噪声\n    out &#x3D; image + noise                                         #直接将归一化的图片与噪声相加\n\n    &#39;&#39;&#39;\n    将值限制在(-1&#x2F;0,1)间，然后乘255恢复\n    &#39;&#39;&#39;\n    if out.min() &lt; 0:\n        low_clip &#x3D; -1.\n    else:\n        low_clip &#x3D; 0.\n\n    out &#x3D; np.clip(out, low_clip, 1.0)\n    out &#x3D; np.uint8(out*255)\n    return out\n\ndef nothing(pp):\n    pass\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    img &#x3D; cv2.imread(&quot;apple.png&quot;)\n    #创建预览界面\n    cv2.namedWindow(&quot;Preview&quot;)\n    cv2.createTrackbar(&quot;mean&quot;,&quot;Preview&quot;,0,5,nothing)\n    cv2.createTrackbar(&quot;var&quot;,&quot;Preview&quot;,0,5,nothing)\n    while(1):\n        mean &#x3D; cv2.getTrackbarPos(&quot;mean&quot;,&quot;Preview&quot;)\n        var &#x3D; cv2.getTrackbarPos(&quot;var&quot;,&quot;Preview&quot;)\n        img_r &#x3D; Gaussnoise_func(img,mean&#x2F;10,var&#x2F;100)\n        cv2.imshow(&quot;Result&quot;,img_r)\n        k &#x3D; cv2.waitKey(1) &amp; 0xff\n        if k &#x3D;&#x3D; 27:\n            break\n    cv2.destroyAllWindows()\n\n\n\n\n\n\n\n\n\n\n高斯噪声，顾名思义是指服从高斯分布（正态分布）的一类噪声。有的时候我们需要向标准数据中加入合适的高斯噪声让数据更加符合实际。python中的random库中集成了高斯正态分布，可以直接使用。我们可以通过调整高斯噪声均值和方差，获取不同效果的处理数据。\nimport random\n\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n\ndef gauss_noisy(x, y):\n    &quot;&quot;&quot;\n    对输入数据加入高斯噪声\n    :param x: x轴数据\n    :param y: y轴数据\n    :return:\n    &quot;&quot;&quot;\n    mu &#x3D; 0\n    sigma &#x3D; 0.05\n    for i in range(len(x)):\n        x[i] +&#x3D; random.gauss(mu, sigma)\n        y[i] +&#x3D; random.gauss(mu, sigma)\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    # 在0-5的区间上生成50个点作为测试数据\n    xl &#x3D; np.linspace(0, 5, 50, endpoint&#x3D;True)\n    yl &#x3D; np.sin(xl)\n\n    # 加入高斯噪声\n    gauss_noisy(xl, yl)\n\n    # 画出这些点\n    plt.plot(xl, yl, linestyle&#x3D;&#39;&#39;, marker&#x3D;&#39;.&#39;)\n    plt.show()\n\n椒盐噪声椒盐噪声(salt-and-pepper noise)是指两种噪声，一种是盐噪声（salt noise），另一种是胡椒噪声（pepper noise）。盐=白色(0)，椒=黑色(255)。前者是高灰度噪声，后者属于低灰度噪声。一般两种噪声同时出现，呈现在图像上就是黑白杂点。\n添加噪声安装skimage库\n&#x2F;&#x2F;  python-numpy  \n&#x2F;&#x2F;  python-scipy  \n&#x2F;&#x2F;  python-matplotlib  \n$  sudo apt-get install python-numpy  \n$  sudo apt-get install python-scipy  \n$  sudo apt-get install python-matplotlib  \n\n安装python-scikit-image\n$  sudo apt-get install python-skimage \n\n实战$\\sigma$=0.01高斯噪声分别给数据集和测试集加上高斯噪声：以下四张图分别为：数据集——测试集原——原高斯——原原——高斯高斯——高斯\n\n卷积神经网络二维卷积层卷积神经网络是含有卷积层的神经网络。\n在二维卷积层中，一个二维输入数组和一个二维核数组通过互相关运算输出一个二维数组。如图，输入的是一个高和宽均为3的二维数组。将该数组的形状记为3x3或（3，3）核数组的高和宽分别为2.该数组在卷积运算中又称卷积核或过滤器。卷积核窗口（又称卷积窗口）的形状取决于卷积核的高和宽，即2x2\n在二维互相关运算中，卷积窗口从输入张量的左上角开始，从左到右、从上到下滑动。 当卷积窗口滑动到新一个位置时，包含在该窗口中的部分张量与卷积核张量进行按元素相乘，得到的张量再求和得到一个单一的标量值，由此我们得出了这一位置的输出张量值。 \nimport torch\nfrom torch import nn\nfrom d2l import torch as d2l\n\ndef corr2d(X, K):  #@save\n    &quot;&quot;&quot;计算二维互相关运算&quot;&quot;&quot;\n    h, w &#x3D; K.shape\n    Y &#x3D; torch.zeros((X.shape[0] - h + 1, X.shape[1] - w + 1))\n    for i in range(Y.shape[0]):\n        for j in range(Y.shape[1]):\n            Y[i, j] &#x3D; (X[i:i + h, j:j + w] * K).sum()\n    return Y\n图像中物体边缘检测如下是卷积层的一个简单应用：通过找到像素变化的位置，来检测图像中不同颜色的边缘。 首先，我们构造一个像素的黑白图像。中间四列为黑色（0），其余像素为白色（1）。\nX &#x3D; torch.ones((6, 8))\nX[:, 2:6] &#x3D; 0\nprint（X）\n输出\n\n\n\n\n\n\n\n\n\ntensor([[1., 1., 0., 0., 0., 0., 1., 1.],   [1., 1., 0., 0., 0., 0., 1., 1.],   [1., 1., 0., 0., 0., 0., 1., 1.],   [1., 1., 0., 0., 0., 0., 1., 1.],   [1., 1., 0., 0., 0., 0., 1., 1.],   [1., 1., 0., 0., 0., 0., 1., 1.]])\n接下来，我们构造一个高度为1、宽度为2的卷积核K。当进行互相关运算时，如果水平相邻的两元素相同，则输出为0，否则输出为非0。\nK &#x3D; torch.tensor([[1.0, -1.0]])\n现在，我们对参数X（输入）和K（卷积核）执行互相关运算。 如下所示，输出Y中的1代表从白色到黑色的边缘，-1代表从黑色到白色的边缘，其他情况的输出为0。\nY &#x3D; corr2d(X, K)\nprint（Y）\n\n\n\n\n\n\n\n\n\ntensor([[ 0.,  1.,  0.,  0.,  0., -1.,  0.],   [ 0.,  1.,  0.,  0.,  0., -1.,  0.],   [ 0.,  1.,  0.,  0.,  0., -1.,  0.],   [ 0.,  1.,  0.,  0.,  0., -1.,  0.],   [ 0.,  1.,  0.,  0.,  0., -1.,  0.],   [ 0.,  1.,  0.,  0.,  0., -1.,  0.]])\nLeNet总体来看，LeNet（LeNet-5）由两个部分组成：\n\n卷积编码器(卷积层块)：由两个卷积层组成\n全连接层密集块：由三个全连接层组成。\n\n卷积层快里的基本单位是卷积层后接最大池化层：卷积层用来识别图像里的空间模式，如线条和物体局部，之后的最大池化层则用来降低卷积层对位置的敏感性。卷积层快由两个这样的基本单位堆叠而成。\n卷积层快的输出形状为（批量大小，通道，高，宽），当卷积层快的输出传入全连接层快时，全连接层快会将小批量中每个样本变平。也就是说，全连接层的输入形状将变成二维，其中第一维是小批量中的样本，第二维是每个样本变平后的向量表示，且向量长度为通道、高和宽的乘积。\nimport torch\nfrom torch import nn\nfrom d2l import torch as d2l\n\nnet &#x3D; nn.Sequential(\n    nn.Conv2d(1, 6, kernel_size&#x3D;5, padding&#x3D;2), nn.Sigmoid(),\n    nn.AvgPool2d(kernel_size&#x3D;2, stride&#x3D;2),\n    nn.Conv2d(6, 16, kernel_size&#x3D;5), nn.Sigmoid(),\n    nn.AvgPool2d(kernel_size&#x3D;2, stride&#x3D;2),\n    nn.Flatten(),\n    nn.Linear(16 * 5 * 5, 120), nn.Sigmoid(),\n    nn.Linear(120, 84), nn.Sigmoid(),\n    nn.Linear(84, 10))\nX &#x3D; torch.rand(size&#x3D;(1, 1, 28, 28), dtype&#x3D;torch.float32)\nfor layer in net:\n    X &#x3D; layer(X)\n    print(layer.__class__.__name__,&#39;output shape: \\t&#39;,X.shape)\n&#96;\n\n&gt; Conv2d output shape: \t torch.Size([1, 6, 28, 28])\nSigmoid output shape: \t torch.Size([1, 6, 28, 28])\nAvgPool2d output shape: \t torch.Size([1, 6, 14, 14])\nConv2d output shape: \t torch.Size([1, 16, 10, 10])\nSigmoid output shape: \t torch.Size([1, 16, 10, 10])\nAvgPool2d output shape: \t torch.Size([1, 16, 5, 5])\nFlatten output shape: \t torch.Size([1, 400])\nLinear output shape: \t torch.Size([1, 120])\nSigmoid output shape: \t torch.Size([1, 120])\nLinear output shape: \t torch.Size([1, 84])\nSigmoid output shape: \t torch.Size([1, 84])\n\n\n长短期记忆网络（LSTM）部分代码来源：\n\n\n\n\n\n\n\n\n\nhttps://github.com/d2l-ai/d2l-zh\n长短期记忆长短期记忆中输入门、遗忘门和输出门的计算\n\n长短期记忆中候选记忆细胞的计算\n长短期记忆中记忆细胞的计算\n长短期记忆中隐藏状态的计算\n代码实现加载数据集import torch\nfrom torch import nn\nfrom d2l import torch as d2l\n\nbatch_size, num_steps &#x3D; 32, 35\ntrain_iter, vocab &#x3D; d2l.load_data_time_machine(batch_size, num_steps)\n初始化模型参数def get_lstm_params(vocab_size, num_hiddens, device):\n    num_inputs &#x3D; num_outputs &#x3D; vocab_size\n\n    def normal(shape):\n        return torch.randn(size&#x3D;shape, device&#x3D;device)*0.01\n\n    def three():\n        return (normal((num_inputs, num_hiddens)),\n                normal((num_hiddens, num_hiddens)),\n                torch.zeros(num_hiddens, device&#x3D;device))\n\n    W_xi, W_hi, b_i &#x3D; three()  # 输入门参数\n    W_xf, W_hf, b_f &#x3D; three()  # 遗忘门参数\n    W_xo, W_ho, b_o &#x3D; three()  # 输出门参数\n    W_xc, W_hc, b_c &#x3D; three()  # 候选记忆元参数\n    # 输出层参数\n    W_hq &#x3D; normal((num_hiddens, num_outputs))\n    b_q &#x3D; torch.zeros(num_outputs, device&#x3D;device)\n    # 附加梯度\n    params &#x3D; [W_xi, W_hi, b_i, W_xf, W_hf, b_f, W_xo, W_ho, b_o, W_xc, W_hc,\n              b_c, W_hq, b_q]\n    for param in params:\n        param.requires_grad_(True)\n    return params\n定义模型def init_lstm_state(batch_size, num_hiddens, device):\n    return (torch.zeros((batch_size, num_hiddens), device&#x3D;device),\n            torch.zeros((batch_size, num_hiddens), device&#x3D;device))\ndef lstm(inputs, state, params):\n    [W_xi, W_hi, b_i, W_xf, W_hf, b_f, W_xo, W_ho, b_o, W_xc, W_hc, b_c,\n     W_hq, b_q] &#x3D; params\n    (H, C) &#x3D; state\n    outputs &#x3D; []\n    for X in inputs:\n        I &#x3D; torch.sigmoid((X @ W_xi) + (H @ W_hi) + b_i)\n        F &#x3D; torch.sigmoid((X @ W_xf) + (H @ W_hf) + b_f)\n        O &#x3D; torch.sigmoid((X @ W_xo) + (H @ W_ho) + b_o)\n        C_tilda &#x3D; torch.tanh((X @ W_xc) + (H @ W_hc) + b_c)\n        C &#x3D; F * C + I * C_tilda\n        H &#x3D; O * torch.tanh(C)\n        Y &#x3D; (H @ W_hq) + b_q\n        outputs.append(Y)\n    return torch.cat(outputs, dim&#x3D;0), (H, C)\n训练模型vocab_size, num_hiddens, device &#x3D; len(vocab), 256, d2l.try_gpu()\nnum_epochs, lr &#x3D; 500, 1\nmodel &#x3D; d2l.RNNModelScratch(len(vocab), num_hiddens, device, get_lstm_params,\n                            init_lstm_state, lstm)\nd2l.train_ch8(model, train_iter, vocab, lr, num_epochs, device)\n简洁实现num_inputs &#x3D; vocab_size\nlstm_layer &#x3D; nn.LSTM(num_inputs, num_hiddens)\nmodel &#x3D; d2l.RNNModel(lstm_layer, len(vocab))\nmodel &#x3D; model.to(device)\nd2l.train_ch8(model, train_iter, vocab, lr, num_epochs, device)\n","slug":"电子羊3","date":"2022-11-03T14:50:49.000Z","categories_index":"","tags_index":"深度学习","author_index":"Algernon"},{"id":"fa85e82eb0b8baa09dbfc285e5ac66bf","title":"《Python》计算机视觉编程","content":"基本的图像操作处理PIL目前pycharm使用的是pillow库\nfrom PIL import Image\npil_im &#x3D;Image.open(&#39;empire.jpg&#39;)\n上述代码的返回值pil_im是一个PIL图像对象\n图像的颜色转换可以使用convert()方法来实现。要读取一幅图像，并将其转换成灰度图像，只需要加上convert(‘L’)，如下所示：\npil_im&#x3D;Image.open(&#39;empire.jpg&#39;).convert(&#39;L&#39;)\nMatplotlib绘制图像、点和线from PIL import Image\nfrom matplotlib import pylab\nfrom pylab import *\n#读取图像到数组中\nim&#x3D;array(Image.open(&#39;D:\\\\coder\\\\randomnumbers\\\\img\\\\empire.png&#39;))\n#绘制图像\nimshow(im)\n\n#一些点\nx&#x3D;[100,100,400,400]\ny&#x3D;[200,500,200,500]\n\n#使用红色星状标记绘制点\nplot(x,y,&#39;r*&#39;)\n\n#绘制连接前两个点的线\nplot(x[:2],y[:2])\n\n#添加标题，显示绘制的图像\ntitle(&#39;Plotting:&quot;empire.jpg&quot;&#39;)\nshow()\n也可以选择使坐标轴不显示：\naxis(&#39;off&#39;)\n\n在绘图时，有很多选项可以控制图像的颜色和样式。| 命令            | 效果                     || ———————- | ———————————— || plot(x,y)       | 默认为蓝色实线           || plot(x,y,’r*’)  | 红色星状标记             || plot(x,y,’go-‘) | 带圈圈标记的绿线         || plot(x,y,’ks:’) | 带有正方形标记的黑色点线 |\n用Pylab绘图的基本颜色格式命令| #引号为英文单引号 | 颜色 || ————————- | —— || ‘b’               | 蓝色 || ‘g’               | 绿色 || ‘r’               | 红色 || ‘c’               | 青色 || ‘m’               | 品红 || ‘y’               | 黄色 || ‘k’               | 黑色 || ‘w’               | 白色 |\n用Pylab绘图的基本线型格式命令|      | 线型 || —— | —— || ‘-‘  | 实线 || ‘—‘ | 虚线 || ‘·’  | 点线 |\n用Pylab绘图的基本绘制标记格式命令|      | 标记   || —— | ——— || ‘·’  | 点     || ‘o’  | 圆圈   || ‘s’  | 正方形 || ‘*’  | 星号   || ‘+’  | 加号   || ‘x’  | 叉号   |\n图像轮廓和直方图将图像灰度化：\nfrom PIL import Image\nfrom pylab import *\n\n#读取图像到数组中\nim&#x3D;array(Image.open(&#39;D:\\\\coder\\\\randomnumbers\\\\img\\\\empire.png&#39;).convert(&#39;L&#39;))\n\n#新建一个图像\nfigure()\n#不使用颜色信息\ngray()\n#在原点的左上角显示轮廓图像\ncontour(im,origin&#x3D;&#39;image&#39;)\naxis(&#39;equal&#39;)\naxis(&#39;off&#39;)\nshow()\n\n\n图像的直方图用来表征该图像像素值的分布情况。用一定数目的小区间(bin)来指定表征像素值的范围，每个小区间会得到落入该小区间表示范围的像素数目。该（灰度）图像的直方图可以使用hist()函数绘制：\nfigure()\nhist(im.flatten(),128)\nshow()\n\n\nNumpy灰度变换from PIL import Image\nfrom numpy import *\nfrom PIL import Image\nfrom matplotlib import pylab\nfrom pylab import *\nim &#x3D; array(Image.open(&#39;D:\\\\coder\\\\randomnumbers\\\\img\\\\empire.png&#39;).convert(&#39;L&#39;))\nim2 &#x3D;255-im #对图像进行反向处理\nim3 &#x3D;(100.0&#x2F;255)*im+100 #将图像像素值变换到100...200之间\nim4 &#x3D;255.0*(im&#x2F;255.0)**2 #对图像像素值求平方后得到的图像\nprint(int(im.min()),int(im.max()))\nprint(int(im2.min()),int(im2.max()))\nprint(int(im3.min()),int(im3.max()))\nprint(int(im4.min()),int(im4.max()))\n\nimshow(im3)\nshow()\n输出：\n0 255\n0 255\n100 200\n0 255\n\n\nScipy图像模糊from PIL import Image\nfrom numpy import *\nfrom scipy.ndimage import filters\nim &#x3D;array(Image.open(&#39;D:\\\\coder\\\\randomnumbers\\\\img\\\\empire.png&#39;).convert(&#39;L&#39;))\nim2 &#x3D;filters.gaussian_filter(im,5)\n上面guassian_filter()函数的最后一个参数表示标准差\n图像导数from PIL import Image\nfrom pylab import *\nfrom numpy import *\nfrom scipy.ndimage import filters\nim &#x3D;array(Image.open(&#39;D:\\\\coder\\\\randomnumbers\\\\img\\\\empire.png&#39;).convert(&#39;L&#39;))\n#Sobel导数滤波器\nimx&#x3D;zeros(im.shape)\nfilters.sobel(im,0,imx)\n\nimy&#x3D;zeros(im.shape)\nfilters.sobel(im,1,imy)\n\n\nmagnitude&#x3D;sqrt(imx**2+imy**2)\nimshow(imx)\n#imshow(imy)\n#imshow(magnitude)\n\n\nshow()\n\n\n计算视差图下面是扫平面法的具体实现代码，该函数返回每个像素的最佳视差。\ndef plane_sweep_ncc(im_l,im_r,start,steps,wid):  #使用归一化的互相关计算视差图像\n  m,n&#x3D;im_l.shape\n  \n  #保存不同求和值的数组\n  mean_l&#x3D;zeros((m,n))\n  mean_r&#x3D;zeros((m,n))\n  s&#x3D;zeros((m,n))\n  s_l&#x3D;zeros((m,n))\n  s_r&#x3D;zeros((m,n))\n  \n  #保存深度平面的数组\n  dmaps&#x3D;zeros((m,n,steps))\n  \n  #计算图像块的平均值\n  filters.uniform_filter(im_l,wid,mean_l)\n  filters.uniform_filter(im_r,wid,mean_r)\n  \n  #归一化图像\n  norm_l&#x3D;im_l-mean_l\n  norm_r&#x3D;im_r-mean_r\n  \n  #尝试不同的视差\n  for displ in range(steps):\n     #将左边图像移动到右边，计算加和\n     filters.uniform_filter(roll(norm_l,-displ-start)*norm_r,wid,s) #和归一化\n     filters.uniform_filter(roll(norm_l,-displ-start)*roll(norm_l,-displ-start),wid,s)\n     filters.uniform_filter(norm_r*norm_r,wid,s_r) #和反归一化\n     \n     #保存ncc的分数\n     dmaps[:,:,displ]&#x3D;s&#x2F;sqrt(s_l*s_r)\n     return argmax(dmaps,axis&#x3D;2)\n     \n下面是载入图像，并使用该函数计算偏移图的完整例子：\nimport stereo\n\nim_l&#x3D;array(Image.open(&#39;scene1.row3.col3.ppm&#39;).convert(&#39;L&#39;),&#39;f&#39;)\n\nim_r&#x3D;array(Image.open(&#39;scene1.row3.col4.ppm&#39;).convert(&#39;L&#39;),&#39;f&#39;)\n\n#开始偏移，并设置步长\nsteps&#x3D;12\nstart&#x3D;4\n\n#ncc的宽度\nwid&#x3D;9\nres &#x3D; stereo.plane_sweep_ncc(im_l,im_r,start,steps,wid)\n\nimport scipy.misc\nscipy.misc.imsave(&#39;depth.png&#39;,res)\n图像聚类","slug":"python计算机视觉编程","date":"2022-11-03T14:49:49.000Z","categories_index":"","tags_index":"计算机视觉","author_index":"Algernon"},{"id":"80007edef2872f36e05ae25c647138b8","title":"【动手学深度学习】学习笔记及代码实战","content":"图像分类数据集P42图像分类数据集中最常用的是手写数字识别数据集MINST。但大部分模型在MINST上的分类精度都超过了95%。为了更直观地观察算法之间的差异，我们将使用一个图像内容更加复杂的Fashion-MINST数据集。\n%matplotlib inline\nimport torch\nimport torchvision\nfrom torch.utils import data\nfrom torchvision import transforms\nfrom d2l import torch as d2l\n\nd2l.use_svg_display()\n# 通过ToTensor实例将图像数据从PIL类型变换成32位浮点数格式，\n# 并除以255使得所有像素的数值均在0到1之间\ntrans &#x3D; transforms.ToTensor()\nmnist_train &#x3D; torchvision.datasets.FashionMNIST(\n    root&#x3D;&quot;..&#x2F;data&quot;, train&#x3D;True, transform&#x3D;trans, download&#x3D;True)\nmnist_test &#x3D; torchvision.datasets.FashionMNIST(\n    root&#x3D;&quot;..&#x2F;data&quot;, train&#x3D;False, transform&#x3D;trans, download&#x3D;True)\nlen(mnist_train), len(mnist_test)\nmnist_train[0][0].shape\ndef get_fashion_mnist_labels(labels):  #@save\n    &quot;&quot;&quot;返回Fashion-MNIST数据集的文本标签&quot;&quot;&quot;\n    text_labels &#x3D; [&#39;t-shirt&#39;, &#39;trouser&#39;, &#39;pullover&#39;, &#39;dress&#39;, &#39;coat&#39;,\n                   &#39;sandal&#39;, &#39;shirt&#39;, &#39;sneaker&#39;, &#39;bag&#39;, &#39;ankle boot&#39;]\n    return [text_labels[int(i)] for i in labels]\ndef show_images(imgs, num_rows, num_cols, titles&#x3D;None, scale&#x3D;1.5):  #@save\n    &quot;&quot;&quot;绘制图像列表&quot;&quot;&quot;\n    figsize &#x3D; (num_cols * scale, num_rows * scale)\n    _, axes &#x3D; d2l.plt.subplots(num_rows, num_cols, figsize&#x3D;figsize)\n    axes &#x3D; axes.flatten()\n    for i, (ax, img) in enumerate(zip(axes, imgs)):\n        if torch.is_tensor(img):\n            # 图片张量\n            ax.imshow(img.numpy())\n        else:\n            # PIL图片\n            ax.imshow(img)\n        ax.axes.get_xaxis().set_visible(False)\n        ax.axes.get_yaxis().set_visible(False)\n        if titles:\n            ax.set_title(titles[i])\n    return axes\nX, y &#x3D; next(iter(data.DataLoader(mnist_train, batch_size&#x3D;18)))\nshow_images(X.reshape(18, 28, 28), 2, 9, titles&#x3D;get_fashion_mnist_labels(y));\n为了使我们在读取训练集和测试集时更容易，我们使用内置的数据迭代器，而不是从零开始创建。 回顾一下，在每次迭代中，数据加载器每次都会读取一小批量数据，大小为batch_size。 通过内置数据迭代器，我们可以随机打乱了所有样本，从而无偏见地读取小批量。\nbatch_size &#x3D; 256\n\ndef get_dataloader_workers():  #@save\n    &quot;&quot;&quot;使用4个进程来读取数据&quot;&quot;&quot;\n    return 4\n\ntrain_iter &#x3D; data.DataLoader(mnist_train, batch_size, shuffle&#x3D;True,\n                             num_workers&#x3D;get_dataloader_workers())\ntimer &#x3D; d2l.Timer()\nfor X, y in train_iter:\n    continue\nprint(f&#39;&#123;timer.stop():.2f&#125; sec&#39;)\n现在我们定义load_data_fashion_mnist函数，用于获取和读取Fashion-MNIST数据集。 这个函数返回训练集和验证集的数据迭代器。 此外，这个函数还接受一个可选参数resize，用来将图像大小调整为另一种形状。\ndef load_data_fashion_mnist(batch_size, resize&#x3D;None):  #@save\n    &quot;&quot;&quot;下载Fashion-MNIST数据集，然后将其加载到内存中&quot;&quot;&quot;\n    trans &#x3D; [transforms.ToTensor()]\n    if resize:\n        trans.insert(0, transforms.Resize(resize))\n    trans &#x3D; transforms.Compose(trans)\n    mnist_train &#x3D; torchvision.datasets.FashionMNIST(\n        root&#x3D;&quot;..&#x2F;data&quot;, train&#x3D;True, transform&#x3D;trans, download&#x3D;True)\n    mnist_test &#x3D; torchvision.datasets.FashionMNIST(\n        root&#x3D;&quot;..&#x2F;data&quot;, train&#x3D;False, transform&#x3D;trans, download&#x3D;True)\n    return (data.DataLoader(mnist_train, batch_size, shuffle&#x3D;True,\n                            num_workers&#x3D;get_dataloader_workers()),\n            data.DataLoader(mnist_test, batch_size, shuffle&#x3D;False,\n                            num_workers&#x3D;get_dataloader_workers()))\ntrain_iter, test_iter &#x3D; load_data_fashion_mnist(32, resize&#x3D;64)\nfor X, y in train_iter:\n    print(X.shape, X.dtype, y.shape, y.dtype)\n    break\n计算机视觉图像增广import torch\nimport torchvision\nfrom torch import nn\nfrom d2l import torch as d2l\n\nd2l.set_figsize()\nimg &#x3D; d2l.Image.open(&#39;..&#x2F;img&#x2F;cat1.jpg&#39;)\nd2l.plt.imshow(img);\n\n\ndef apply(img, aug, num_rows&#x3D;2, num_cols&#x3D;4, scale&#x3D;1.5):\n    Y &#x3D; [aug(img) for _ in range(num_rows * num_cols)]\n    d2l.show_images(Y, num_rows, num_cols, scale&#x3D;scale)\napply(img, torchvision.transforms.RandomHorizontalFlip())\n\napply(img, torchvision.transforms.RandomVerticalFlip())\n\nshape_aug &#x3D; torchvision.transforms.RandomResizedCrop(\n    (200, 200), scale&#x3D;(0.1, 1), ratio&#x3D;(0.5, 2))\napply(img, shape_aug)\n\n\n改变颜色另一种增广方法是改变颜色。 我们可以改变图像颜色的四个方面：亮度、对比度、饱和度和色调。 在下面的示例中，我们随机更改图像的亮度，随机值为原始图像的50%（1-0.5）到150%（1+0.5）之间。\napply(img, torchvision.transforms.ColorJitter(\n    brightness&#x3D;0.5, contrast&#x3D;0, saturation&#x3D;0, hue&#x3D;0))\napply(img, torchvision.transforms.ColorJitter(\n    brightness&#x3D;0, contrast&#x3D;0, saturation&#x3D;0, hue&#x3D;0.5))\n我们还可以创建一个RandomColorJitter实例，并设置如何同时随机更改图像的亮度（brightness）、对比度（contrast）、饱和度（saturation）和色调（hue）。\ncolor_aug &#x3D; torchvision.transforms.ColorJitter(\n    brightness&#x3D;0.5, contrast&#x3D;0.5, saturation&#x3D;0.5, hue&#x3D;0.5)\napply(img, color_aug)\naugs &#x3D; torchvision.transforms.Compose([\n    torchvision.transforms.RandomHorizontalFlip(), color_aug, shape_aug])\napply(img, augs)\n\nKaggle实战房价预测下载并访问数据集import hashlib\nimport os\nimport tarfile\nimport zipfile\nimport requests\n\n#@save\nDATA_HUB &#x3D; dict()\nDATA_URL &#x3D; &#39;http:&#x2F;&#x2F;d2l-data.s3-accelerate.amazonaws.com&#x2F;&#39;\ndef download(name, cache_dir&#x3D;os.path.join(&#39;..&#39;, &#39;data&#39;)):  #@save\n    &quot;&quot;&quot;下载一个DATA_HUB中的文件，返回本地文件名&quot;&quot;&quot;\n    assert name in DATA_HUB, f&quot;&#123;name&#125; 不存在于 &#123;DATA_HUB&#125;&quot;\n    url, sha1_hash &#x3D; DATA_HUB[name]\n    os.makedirs(cache_dir, exist_ok&#x3D;True)\n    fname &#x3D; os.path.join(cache_dir, url.split(&#39;&#x2F;&#39;)[-1])\n    if os.path.exists(fname):\n        sha1 &#x3D; hashlib.sha1()\n        with open(fname, &#39;rb&#39;) as f:\n            while True:\n                data &#x3D; f.read(1048576)\n                if not data:\n                    break\n                sha1.update(data)\n        if sha1.hexdigest() &#x3D;&#x3D; sha1_hash:\n            return fname  # 命中缓存\n    print(f&#39;正在从&#123;url&#125;下载&#123;fname&#125;...&#39;)\n    r &#x3D; requests.get(url, stream&#x3D;True, verify&#x3D;True)\n    with open(fname, &#39;wb&#39;) as f:\n        f.write(r.content)\n    return fname\n\ndef download_extract(name, folder&#x3D;None):  #@save\n    &quot;&quot;&quot;下载并解压zip&#x2F;tar文件&quot;&quot;&quot;\n    fname &#x3D; download(name)\n    base_dir &#x3D; os.path.dirname(fname)\n    data_dir, ext &#x3D; os.path.splitext(fname)\n    if ext &#x3D;&#x3D; &#39;.zip&#39;:\n        fp &#x3D; zipfile.ZipFile(fname, &#39;r&#39;)\n    elif ext in (&#39;.tar&#39;, &#39;.gz&#39;):\n        fp &#x3D; tarfile.open(fname, &#39;r&#39;)\n    else:\n        assert False, &#39;只有zip&#x2F;tar文件可以被解压缩&#39;\n    fp.extractall(base_dir)\n    return os.path.join(base_dir, folder) if folder else data_dir\n\ndef download_all():  #@save\n    &quot;&quot;&quot;下载DATA_HUB中的所有文件&quot;&quot;&quot;\n    for name in DATA_HUB:\n        download(name)\n%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport torch\nfrom torch import nn\nfrom d2l import torch as d2l\n\nDATA_HUB[&#39;kaggle_house_train&#39;] &#x3D; (  #@save\n    DATA_URL + &#39;kaggle_house_pred_train.csv&#39;,\n    &#39;585e9cc93e70b39160e7921475f9bcd7d31219ce&#39;)\n\nDATA_HUB[&#39;kaggle_house_test&#39;] &#x3D; (  #@save\n    DATA_URL + &#39;kaggle_house_pred_test.csv&#39;,\n    &#39;fa19780a7b011d9b009e8bff8e99922a8ee2eb90&#39;)\n\ntrain_data &#x3D; pd.read_csv(download(&#39;kaggle_house_train&#39;))\ntest_data &#x3D; pd.read_csv(download(&#39;kaggle_house_test&#39;))\n\nprint(train_data.shape)\nprint(test_data.shape)\n\nprint(train_data.iloc[0:4, [0, 1, 2, 3, -3, -2, -1]])\n\nall_features &#x3D; pd.concat((train_data.iloc[:, 1:-1], test_data.iloc[:, 1:]))\n数据预处理# 若无法获得测试数据，则可根据训练数据计算均值和标准差\nnumeric_features &#x3D; all_features.dtypes[all_features.dtypes !&#x3D; &#39;object&#39;].index\nall_features[numeric_features] &#x3D; all_features[numeric_features].apply(\n    lambda x: (x - x.mean()) &#x2F; (x.std()))\n# 在标准化数据之后，所有均值消失，因此我们可以将缺失值设置为0\nall_features[numeric_features] &#x3D; all_features[numeric_features].fillna(0)\n# “Dummy_na&#x3D;True”将“na”（缺失值）视为有效的特征值，并为其创建指示符特征\nall_features &#x3D; pd.get_dummies(all_features, dummy_na&#x3D;True)\nall_features.shape\n\nn_train &#x3D; train_data.shape[0]\ntrain_features &#x3D; torch.tensor(all_features[:n_train].values, dtype&#x3D;torch.float32)\ntest_features &#x3D; torch.tensor(all_features[n_train:].values, dtype&#x3D;torch.float32)\ntrain_labels &#x3D; torch.tensor(\n    train_data.SalePrice.values.reshape(-1, 1), dtype&#x3D;torch.float32)\n训练loss &#x3D; nn.MSELoss()\nin_features &#x3D; train_features.shape[1]\n\ndef get_net():\n    net &#x3D; nn.Sequential(nn.Linear(in_features,1))\n    return net\n\ndef log_rmse(net, features, labels):\n    # 为了在取对数时进一步稳定该值，将小于1的值设置为1\n    clipped_preds &#x3D; torch.clamp(net(features), 1, float(&#39;inf&#39;))\n    rmse &#x3D; torch.sqrt(loss(torch.log(clipped_preds),\n                           torch.log(labels)))\n    return rmse.item()\n\ndef train(net, train_features, train_labels, test_features, test_labels,\n          num_epochs, learning_rate, weight_decay, batch_size):\n    train_ls, test_ls &#x3D; [], []\n    train_iter &#x3D; d2l.load_array((train_features, train_labels), batch_size)\n    # 这里使用的是Adam优化算法\n    optimizer &#x3D; torch.optim.Adam(net.parameters(),\n                                 lr &#x3D; learning_rate,\n                                 weight_decay &#x3D; weight_decay)\n    for epoch in range(num_epochs):\n        for X, y in train_iter:\n            optimizer.zero_grad()\n            l &#x3D; loss(net(X), y)\n            l.backward()\n            optimizer.step()\n        train_ls.append(log_rmse(net, train_features, train_labels))\n        if test_labels is not None:\n            test_ls.append(log_rmse(net, test_features, test_labels))\n    return train_ls, test_ls\nK折交叉验证def get_k_fold_data(k, i, X, y):\n    assert k &gt; 1\n    fold_size &#x3D; X.shape[0] &#x2F;&#x2F; k\n    X_train, y_train &#x3D; None, None\n    for j in range(k):\n        idx &#x3D; slice(j * fold_size, (j + 1) * fold_size)\n        X_part, y_part &#x3D; X[idx, :], y[idx]\n        if j &#x3D;&#x3D; i:\n            X_valid, y_valid &#x3D; X_part, y_part\n        elif X_train is None:\n            X_train, y_train &#x3D; X_part, y_part\n        else:\n            X_train &#x3D; torch.cat([X_train, X_part], 0)\n            y_train &#x3D; torch.cat([y_train, y_part], 0)\n    return X_train, y_train, X_valid, y_valid\n\ndef k_fold(k, X_train, y_train, num_epochs, learning_rate, weight_decay,\n           batch_size):\n    train_l_sum, valid_l_sum &#x3D; 0, 0\n    for i in range(k):\n        data &#x3D; get_k_fold_data(k, i, X_train, y_train)\n        net &#x3D; get_net()\n        train_ls, valid_ls &#x3D; train(net, *data, num_epochs, learning_rate,\n                                   weight_decay, batch_size)\n        train_l_sum +&#x3D; train_ls[-1]\n        valid_l_sum +&#x3D; valid_ls[-1]\n        if i &#x3D;&#x3D; 0:\n            d2l.plot(list(range(1, num_epochs + 1)), [train_ls, valid_ls],\n                     xlabel&#x3D;&#39;epoch&#39;, ylabel&#x3D;&#39;rmse&#39;, xlim&#x3D;[1, num_epochs],\n                     legend&#x3D;[&#39;train&#39;, &#39;valid&#39;], yscale&#x3D;&#39;log&#39;)\n        print(f&#39;折&#123;i + 1&#125;，训练log rmse&#123;float(train_ls[-1]):f&#125;, &#39;\n              f&#39;验证log rmse&#123;float(valid_ls[-1]):f&#125;&#39;)\n    return train_l_sum &#x2F; k, valid_l_sum &#x2F; k\n生成文件k, num_epochs, lr, weight_decay, batch_size &#x3D; 5, 100, 5, 0, 64\ntrain_l, valid_l &#x3D; k_fold(k, train_features, train_labels, num_epochs, lr,\n                          weight_decay, batch_size)\nprint(f&#39;&#123;k&#125;-折验证: 平均训练log rmse: &#123;float(train_l):f&#125;, &#39;\n      f&#39;平均验证log rmse: &#123;float(valid_l):f&#125;&#39;)\ndef train_and_pred(train_features, test_features, train_labels, test_data,\n                   num_epochs, lr, weight_decay, batch_size):\n    net &#x3D; get_net()\n    train_ls, _ &#x3D; train(net, train_features, train_labels, None, None,\n                        num_epochs, lr, weight_decay, batch_size)\n    d2l.plot(np.arange(1, num_epochs + 1), [train_ls], xlabel&#x3D;&#39;epoch&#39;,\n             ylabel&#x3D;&#39;log rmse&#39;, xlim&#x3D;[1, num_epochs], yscale&#x3D;&#39;log&#39;)\n    print(f&#39;训练log rmse：&#123;float(train_ls[-1]):f&#125;&#39;)\n    # 将网络应用于测试集。\n    preds &#x3D; net(test_features).detach().numpy()\n    # 将其重新格式化以导出到Kaggle\n    test_data[&#39;SalePrice&#39;] &#x3D; pd.Series(preds.reshape(1, -1)[0])\n    submission &#x3D; pd.concat([test_data[&#39;Id&#39;], test_data[&#39;SalePrice&#39;]], axis&#x3D;1)\n    submission.to_csv(&#39;submission.csv&#39;, index&#x3D;False)\n\ntrain_and_pred(train_features, test_features, train_labels, test_data,\n               num_epochs, lr, weight_decay, batch_size)\n完整代码与输出import hashlib\nimport os\nimport tarfile\nimport zipfile\nimport requests\n\n#@save\nDATA_HUB &#x3D; dict()\nDATA_URL &#x3D; &#39;http:&#x2F;&#x2F;d2l-data.s3-accelerate.amazonaws.com&#x2F;&#39;\n\n\ndef download(name, cache_dir&#x3D;os.path.join(&#39;..&#39;, &#39;data&#39;)):  #@save\n    &quot;&quot;&quot;下载一个DATA_HUB中的文件，返回本地文件名&quot;&quot;&quot;\n    assert name in DATA_HUB, f&quot;&#123;name&#125; 不存在于 &#123;DATA_HUB&#125;&quot;\n    url, sha1_hash &#x3D; DATA_HUB[name]\n    os.makedirs(cache_dir, exist_ok&#x3D;True)\n    fname &#x3D; os.path.join(cache_dir, url.split(&#39;&#x2F;&#39;)[-1])\n    if os.path.exists(fname):\n        sha1 &#x3D; hashlib.sha1()\n        with open(fname, &#39;rb&#39;) as f:\n            while True:\n                data &#x3D; f.read(1048576)\n                if not data:\n                    break\n                sha1.update(data)\n        if sha1.hexdigest() &#x3D;&#x3D; sha1_hash:\n            return fname  # 命中缓存\n    print(f&#39;正在从&#123;url&#125;下载&#123;fname&#125;...&#39;)\n    r &#x3D; requests.get(url, stream&#x3D;True, verify&#x3D;True)\n    with open(fname, &#39;wb&#39;) as f:\n        f.write(r.content)\n    return fname\n\ndef download_extract(name, folder&#x3D;None):  #@save\n    &quot;&quot;&quot;下载并解压zip&#x2F;tar文件&quot;&quot;&quot;\n    fname &#x3D; download(name)\n    base_dir &#x3D; os.path.dirname(fname)\n    data_dir, ext &#x3D; os.path.splitext(fname)\n    if ext &#x3D;&#x3D; &#39;.zip&#39;:\n        fp &#x3D; zipfile.ZipFile(fname, &#39;r&#39;)\n    elif ext in (&#39;.tar&#39;, &#39;.gz&#39;):\n        fp &#x3D; tarfile.open(fname, &#39;r&#39;)\n    else:\n        assert False, &#39;只有zip&#x2F;tar文件可以被解压缩&#39;\n    fp.extractall(base_dir)\n    return os.path.join(base_dir, folder) if folder else data_dir\n\ndef download_all():  #@save\n    &quot;&quot;&quot;下载DATA_HUB中的所有文件&quot;&quot;&quot;\n    for name in DATA_HUB:\n        download(name)\n\n\n#%matplotlib inline\nimport  matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport torch\nfrom torch import nn\nfrom d2l import torch as d2l\n\nDATA_HUB[&#39;kaggle_house_train&#39;] &#x3D; (  #@save\n    DATA_URL + &#39;kaggle_house_pred_train.csv&#39;,\n    &#39;585e9cc93e70b39160e7921475f9bcd7d31219ce&#39;)\n\nDATA_HUB[&#39;kaggle_house_test&#39;] &#x3D; (  #@save\n    DATA_URL + &#39;kaggle_house_pred_test.csv&#39;,\n    &#39;fa19780a7b011d9b009e8bff8e99922a8ee2eb90&#39;)\n\ntrain_data &#x3D; pd.read_csv(download(&#39;kaggle_house_train&#39;))\ntest_data &#x3D; pd.read_csv(download(&#39;kaggle_house_test&#39;))\n\nprint(train_data.shape)\nprint(test_data.shape)\n\nprint(train_data.iloc[0:4, [0, 1, 2, 3, -3, -2, -1]])\n\nall_features &#x3D; pd.concat((train_data.iloc[:, 1:-1], test_data.iloc[:, 1:]))\n\n\n# 若无法获得测试数据，则可根据训练数据计算均值和标准差\nnumeric_features &#x3D; all_features.dtypes[all_features.dtypes !&#x3D; &#39;object&#39;].index\nall_features[numeric_features] &#x3D; all_features[numeric_features].apply(\n    lambda x: (x - x.mean()) &#x2F; (x.std()))\n# 在标准化数据之后，所有均值消失，因此我们可以将缺失值设置为0\nall_features[numeric_features] &#x3D; all_features[numeric_features].fillna(0)\n\n# “Dummy_na&#x3D;True”将“na”（缺失值）视为有效的特征值，并为其创建指示符特征\nall_features &#x3D; pd.get_dummies(all_features, dummy_na&#x3D;True)\nall_features.shape\n\nn_train &#x3D; train_data.shape[0]\ntrain_features &#x3D; torch.tensor(all_features[:n_train].values, dtype&#x3D;torch.float32)\ntest_features &#x3D; torch.tensor(all_features[n_train:].values, dtype&#x3D;torch.float32)\ntrain_labels &#x3D; torch.tensor(\n    train_data.SalePrice.values.reshape(-1, 1), dtype&#x3D;torch.float32)\n\n\nloss &#x3D; nn.MSELoss()\nin_features &#x3D; train_features.shape[1]\n\ndef get_net():\n    net &#x3D; nn.Sequential(nn.Linear(in_features,1))\n    return net\n\ndef log_rmse(net, features, labels):\n    # 为了在取对数时进一步稳定该值，将小于1的值设置为1\n    clipped_preds &#x3D; torch.clamp(net(features), 1, float(&#39;inf&#39;))\n    rmse &#x3D; torch.sqrt(loss(torch.log(clipped_preds),\n                           torch.log(labels)))\n    return rmse.item()\n\ndef train(net, train_features, train_labels, test_features, test_labels,\n          num_epochs, learning_rate, weight_decay, batch_size):\n    train_ls, test_ls &#x3D; [], []\n    train_iter &#x3D; d2l.load_array((train_features, train_labels), batch_size)\n    # 这里使用的是Adam优化算法\n    optimizer &#x3D; torch.optim.Adam(net.parameters(),\n                                 lr &#x3D; learning_rate,\n                                 weight_decay &#x3D; weight_decay)\n    for epoch in range(num_epochs):\n        for X, y in train_iter:\n            optimizer.zero_grad()\n            l &#x3D; loss(net(X), y)\n            l.backward()\n            optimizer.step()\n        train_ls.append(log_rmse(net, train_features, train_labels))\n        if test_labels is not None:\n            test_ls.append(log_rmse(net, test_features, test_labels))\n    return train_ls, test_ls\n\ndef get_k_fold_data(k, i, X, y):\n    assert k &gt; 1\n    fold_size &#x3D; X.shape[0] &#x2F;&#x2F; k\n    X_train, y_train &#x3D; None, None\n    for j in range(k):\n        idx &#x3D; slice(j * fold_size, (j + 1) * fold_size)\n        X_part, y_part &#x3D; X[idx, :], y[idx]\n        if j &#x3D;&#x3D; i:\n            X_valid, y_valid &#x3D; X_part, y_part\n        elif X_train is None:\n            X_train, y_train &#x3D; X_part, y_part\n        else:\n            X_train &#x3D; torch.cat([X_train, X_part], 0)\n            y_train &#x3D; torch.cat([y_train, y_part], 0)\n    return X_train, y_train, X_valid, y_valid\n\ndef k_fold(k, X_train, y_train, num_epochs, learning_rate, weight_decay,\n           batch_size):\n    train_l_sum, valid_l_sum &#x3D; 0, 0\n    for i in range(k):\n        data &#x3D; get_k_fold_data(k, i, X_train, y_train)\n        net &#x3D; get_net()\n        train_ls, valid_ls &#x3D; train(net, *data, num_epochs, learning_rate,\n                                   weight_decay, batch_size)\n        train_l_sum +&#x3D; train_ls[-1]\n        valid_l_sum +&#x3D; valid_ls[-1]\n        if i &#x3D;&#x3D; 0:\n            d2l.plot(list(range(1, num_epochs + 1)), [train_ls, valid_ls],\n                     xlabel&#x3D;&#39;epoch&#39;, ylabel&#x3D;&#39;rmse&#39;, xlim&#x3D;[1, num_epochs],\n                     legend&#x3D;[&#39;train&#39;, &#39;valid&#39;], yscale&#x3D;&#39;log&#39;)\n        print(f&#39;折&#123;i + 1&#125;，训练log rmse&#123;float(train_ls[-1]):f&#125;, &#39;\n              f&#39;验证log rmse&#123;float(valid_ls[-1]):f&#125;&#39;)\n    return train_l_sum &#x2F; k, valid_l_sum &#x2F; k\nk, num_epochs, lr, weight_decay, batch_size &#x3D; 5, 100, 5, 0, 64\ntrain_l, valid_l &#x3D; k_fold(k, train_features, train_labels, num_epochs, lr,\n                          weight_decay, batch_size)\ndef train_and_pred(train_features, test_features, train_labels, test_data,\n                   num_epochs, lr, weight_decay, batch_size):\n    net &#x3D; get_net()\n    train_ls, _ &#x3D; train(net, train_features, train_labels, None, None,\n                        num_epochs, lr, weight_decay, batch_size)\n    d2l.plot(np.arange(1, num_epochs + 1), [train_ls], xlabel&#x3D;&#39;epoch&#39;,\n             ylabel&#x3D;&#39;log rmse&#39;, xlim&#x3D;[1, num_epochs], yscale&#x3D;&#39;log&#39;)\n    print(f&#39;训练log rmse：&#123;float(train_ls[-1]):f&#125;&#39;)\n    # 将网络应用于测试集。\n    preds &#x3D; net(test_features).detach().numpy()\n    # 将其重新格式化以导出到Kaggle\n    test_data[&#39;SalePrice&#39;] &#x3D; pd.Series(preds.reshape(1, -1)[0])\n    submission &#x3D; pd.concat([test_data[&#39;Id&#39;], test_data[&#39;SalePrice&#39;]], axis&#x3D;1)\n    submission.to_csv(&#39;submission.csv&#39;, index&#x3D;False)\n\ntrain_and_pred(train_features, test_features, train_labels, test_data,\n               num_epochs, lr, weight_decay, batch_size)\n\nplt.show()\n输出\n&#x2F;home&#x2F;algernon&#x2F;anaconda3&#x2F;envs&#x2F;pythonProject1&#x2F;bin&#x2F;python &#x2F;home&#x2F;algernon&#x2F;PycharmProjects&#x2F;pythonProject1&#x2F;main.py\n(1460, 81)\n(1459, 80)\n   Id  MSSubClass MSZoning  LotFrontage SaleType SaleCondition  SalePrice\n0   1          60       RL         65.0       WD        Normal     208500\n1   2          20       RL         80.0       WD        Normal     181500\n2   3          60       RL         68.0       WD        Normal     223500\n3   4          70       RL         60.0       WD       Abnorml     140000\n折1，训练log rmse0.170750, 验证log rmse0.156827\n折2，训练log rmse0.162118, 验证log rmse0.190579\n折3，训练log rmse0.163990, 验证log rmse0.168659\n折4，训练log rmse0.167880, 验证log rmse0.154328\n折5，训练log rmse0.163059, 验证log rmse0.182734\n训练log rmse：0.162466\n\n","slug":"动手学深度学习","date":"2022-11-03T14:48:49.000Z","categories_index":"","tags_index":"深度学习","author_index":"Algernon"},{"id":"cb28b0a44b029b9ea34f55f1b61057a9","title":"Java程序设计·笔记","content":"资料来源：\n\n\n\n\n\n\n\n\n\n《java程序设计》《Java技术手册》\n简介java与javascript比较\nJava是静态型的语言，JavaScript是动态类型语言\nJava提供基于类的对象，JavaScript使用基于原型的对象。\nJava提供了良好的对象封装，JavaScript没有提供。\nJava有命名空间，JavaScript没有\nJava支持多线程，JavaScript不支持\n\n第一行代码public class hello&#123;\n    public static void main(String args[])&#123;\n        System.out.println(&quot;hello world&quot;);\n    &#125;\n&#125;\n\n输出D:\\coder\\JDK\\bin\\java.exe &quot;-javaagent:D:\\coder\\IntelliJ IDEA Community Edition 2022.2.1\\lib\\idea_rt.jar&#x3D;50761:D:\\coder\\IntelliJ IDEA Community Edition 2022.2.1\\bin&quot; -Dfile.encoding&#x3D;UTF-8 -Dsun.stdout.encoding&#x3D;UTF-8 -Dsun.stderr.encoding&#x3D;UTF-8 -classpath C:\\Users\\83854\\IdeaProjects\\untitled1\\out\\production\\untitled1 hello\nhello world\n现在我们来依次分析这些代码：\npublic class hello&#123;\n\n\n\n\n\n\n\n\n\n这一行说明了一个公有类，类的名字是hello，内容从类名后的{开始，到}结束。编译正确后，系统在当前的工作目录下创建一个hello.class文件。\npublic static void main(String args[])&#123;\n程序执行时，程序名之后输入的内容称为命令行参数，它是动态传递给程序中的参数。\n\n\n\n\n\n\n\n\n\n如果程序执行时给定命令行参数，则这些参数将放在称为args的字符串数组中传给main()方法\npublic static void这一行各要素的具体含义是：\n\npublic  该关键字说明方法main是公有方法。\nstatic  该关键字告诉编译器main()方法是静态的，可用在类hello中，不需要通过该类的实例来调用。如果方法不是静态的，则必须先创建类的实例，然后调用实例的方法。\nvoid    指明main()方法不返回任何值。\nString args[]    表示命令行参数，运行一个Java程序的方式是在命令行中键入如下的命令：\n\njava 程序名 [参数列表]\njava编码体例\n类 ：类名 应为名词，含有大小写，每个字的首字母大写。正确的类名如：HelloWorld,Customer,MergeSort等。\n接口：接口是一种特殊的类，接口名 的命名约定与类名相同。\n方法：方法名应是动词 ，含有大小写，首字母小写，其余名字的首字母大写。如getName\\setAdress等。\n常量：简单类型常量的名字应该全部为大写字母，字与字之间用下划线分隔，对象常量可混合大小写。\n变量：所有的实例变量、类变量和全局变量都使用混合大小写，首字母为小写，后面的字首为大写，作为字间的分隔符。\n\n条件运算符条件运算符?:是有点晦涩的三元运算符。\n条件运算符的第一个操作数和第二个操作数使用问号?分开，第二个和第三个操作数使用冒号：分开。第一个操作数的计算结果必须为布尔值，第二个和第三个操作数可以是任意类型，但要能转换成同一类型。条件运算符先计算第一个操作数，如果结果为true，就计算 第二个操作数，并把结果当成表达式的返回值；如果第一个操作数的计算结果为false，条件运算符会计算并返回第三个操作数。\n面向程序设计OOP中采用了三大技术：封装、继承和多态。\n将数据以及对数据的操作捆绑在一起成为类，这就是封装技术。\n程序员只有一种基本的结构，即类。将一个已有类中的数据和方法保留，并加上自己特殊的数据和方法，从而构成一个新类，这就是OOP中的继承。\n在一个或多个类中，可以让多个方法使用同一个名字，从而具有多态性。多态可以保证对不同类型的数据进行同等的操作，名字空间也更加宽松。\n类与对象定义类举个例子，可以定义一个名为iPoint的类，表示笛卡尔二维坐标系中的数据点。这个类可能会定义两个字段，保存点的$x$和$y$坐标，还可能会定义处理和操作点的方法。Point就是 一个新数据类型。\n&#x2F;&#x2F;表示笛卡尔坐标系中的(x,y)点\npublic class Point&#123;\n  &#x2F;&#x2F;点的坐标\n  pubic doube x,y;\n  public Point(double x, double y)&#123;  &#x2F;&#x2F;初始化字段的构造办法\n     this.x&#x3D;x;\n     this.y&#x3D;y;  \n  &#125;\n  public double distanceFromOrigin()&#123;\n    return Math.sqrt(x*x+y*y);\n  &#125;\n&#125;\n这个类的定义保存在一个名为Point.java的文件中，然后编译为一个名为Point.class 的文件，供Java程序和其他类使用。\n创建对象我们已经定义了Point类，现在Point是一种新数据类型，我们可以使用下面的代码声明一个变量，存储一个Point对象：\nPoint p;\n不过，声明一个存储Point对象的变量并不会创建这个对象。想要创建对象，必须使用new运算符。这个关键字后面跟着对象所属的类（即对象的类型）和括号中可选的参数列表。这些参数会传入类的构造方法，初始化新对象的内部字段：\n&#x2F;&#x2F;创建一个Point对象，表示(2,-3.5)\n&#x2F;&#x2F;声明一个变量p，存储这个新point对象的引用\nPoint p&#x3D; new Point(2.0,-3.5);\n\n&#x2F;&#x2F;创建一些其他类型的对象\n&#x2F;&#x2F;一个Date对象，表示当前时间\nDate d &#x3D;new Date();\n&#x2F;&#x2F;一个HashSet对象，保存一些对象\nSet words &#x3D;new HashSet();\n","slug":"java程序设计","date":"2022-11-03T14:47:49.000Z","categories_index":"编程语言","tags_index":"Java","author_index":"Algernon"},{"id":"ab4d0720d723497e8948d6250eb13f1a","title":"【基于AnyLogic的管理仿真系统】","content":"bass模型（系统动力学）\n建立基础模型将模型基础建立，组成一个简单的扩散模型，并填上变量值\n添加从潜在消费者到消费者的流程\n\n潜在消费者\n消费者\n转换速率（流量）\n\n添加常量两个动态变量\n\n广告\n口碑\n\n通过创建参数来定义常量四个参数：\n\n总人口：100000\n广告效果：0.011\n接触率：100（每年）\n采纳率：0.015（转换率）\n\n\n\n添加图表建立两个时间坐标图，用以观察消费者和潜在消费者、转换效率和返回效率之间的关系。\n潜在消费者与消费者\n\n转换速率与返回速率引入参量（产品生命周期）=2\n更换购买如果产品使用两年后 ，消费者转变为潜在消费者注意，delay中的逗号应为英文符号\n引入表函数：超出范围改为“最近”\n之后引入函数：返回值、参数、函数体\n更换转换率（采纳率）接着，把转换率改为采纳率（动态变量）把采纳率（参量）改为系统动力学里的动态变量\n\n将转换率更换为以每月不同需求所导致的变化量，观察结果\n\n将广告设为变量对 广告效果进行改进用动态变量代替广告效果\n引入月度广告支出（参量）\n\n将广告效果参量删去，改为广告效果（动态变量）\n\n由智能体引入变量——广告总支出引入事件模式循环、复发时间月、行动（分号！）\n\n引入参数switchtime\n引入状态图三年以后不打广告\n可见，不打广告的时候，口碑在起作用\n优化在main上面新建——实验——优化\n创建优化实验注意：目标、参数、模型时间——停止时间创建用户默认界面\n\nbass模型（智能体）智能体初设模型时间单位设定为天从面板中智能体 一类中选择“智能体”，拖入，选择智能体群第三步：智能体动画，选择无初始智能体数改为500\n双击进入person定义参数：\n\n广告作用率 0.015\n接触人数 30\n口碑作用率 0.011\n\n参数放在main函数下演示——椭圆——半径5\n状态图潜在消费者初始状态改为green（默认为绿色）变迁改为red，速率触发，速率如下，行动如下（改变形象）\n\nmain函数点击persons-——展开演示\n工程——main——智能体类型——系统与网络——“布局类型，网络类型”\n现在展现，加快速度\n最后逐渐变为\n加入口碑作用加入自变迁自变迁触发、速率、行动如果这个消息被潜在消费者接收到，再加入一个变迁触发通过为消息，触发变迁为特定消息时，消息、行动、控制\n继续演示，可以看到有一部分紫色的是因为消费者口碑的转换这个变化速率比仅有广告快很多\n利用图表演示person界面加一个参数age\nmain文件界面——persons——统计——加入潜在消费者数量和消费者数量\nitem.statechart.isStateActive(Person.潜在消费者)\nitem.statechart.isStateActive(Person.消费者)\n再加入潜在消费者平均年龄（条件同潜在消费者）\n在main下加入折线图开始演示\n修改一下布局点一下main里面的这个——高级——勾选以这个位置为偏移量画智能体\n移动这个球球\nperson——connections——动画——勾画“画连接智能体的线”\n再编译运行将person中消费者自变迁中“行动修改”\n\nsend(&quot;buy&quot;,RANDOM_CONNECTED);\n\n回到main，点击空白——智能体类型——空间与网络——网络类型——基于距离——30\n继续演示：\n动态网络回到person，点击空白处——智能体类型——智能体行动启动时，到达目标位置时\nmoveTo(uniform(0,500),uniform(0,500));\nmoveTo(uniform(0,500),uniform(0,500));\nmain.applyNetwork();\n\n修改下方的移动——初始速度——0.001\n新建一个模型新建一个模型main——新建——智能体类型起名为Myagent，无\n同样，从演示里拖一个椭圆到坐标原点，令其半径为8外观——填充颜色（点一下）\ntype&#x3D;&#x3D;1?red:type&#x3D;&#x3D;2?green：blue\n\n从智能体拖一个参数，命名其为type类型，默认值在工程中将myagent拖入main，改为myAgents\n点击myAgents，选择智能体群点击空白，打开智能体类型——空间与网络布局类型、网络类型从控件里拖入一个按钮行动修改\nfor(MyAgent ma:myAgents)&#123;\n  for(MyAgent m:myAgents)&#123;\n  if(ma!&#x3D;m&amp;&amp;ma.type&#x3D;&#x3D;m.type&amp;&amp;ma.distanceTo(m)&lt;50)&#123;\n     ma.connectTo(m);&#125;\n  &#125;\n&#125;\n回到myagent点击connentions——动画——勾选画连接智能体的线\n修改代码：\napplyLayout();\nfor(MyAgent ma:myAgents)&#123;\nma.disconnectFromAll();\n\n&#125;\nfor(MyAgent ma:myAgents)&#123;\n\n  for(MyAgent m:myAgents)&#123;\n  if(ma!&#x3D;m&amp;&amp;ma.type&#x3D;&#x3D;m.type&amp;&amp;ma.distanceTo(m)&lt;50)&#123;\n     ma.connectTo(m);&#125;\n  &#125;\n&#125;\napplyNetwork();\n数据回到上一个模型，main,从智能体拖入表函数，命名其为WomRate名称、插值、超出范围、表数据\n回到第一个模型的person类智能体拉一个参数到person命名其为timestart再拉入一个变量名称sendperson，类型为person\n修改消费者状态进入行动点击person里的connections单击——右侧——通讯——接收消息时\nsendperson&#x3D;(Person)sender;\n修改邮件变迁\nrandomTrue(main.WomRate(time()-sendperson.timestart))\n\n商品供应与消费基本框架新建模型，日期为天\n系统动力学——存量——拖入选择工厂（factoryA）复制——retailerA引入参量、预测值AB均为1，类型均为int引入变量，想买A人数，想买B人数以及都能买人数对B执行同样操作（retailerB）引入交付时间AB（类型-时间，单位-天，默认值-2）A的第二个流量公式如图\n创建智能体设定第一个变迁-速率、值设定第二个变迁-条件-值A用户加入自变迁加入由潜在用户到想买A的自变迁触发-消息，类型string，特定消息时施加想换，当等待2~5天之后想换商品\n想换之后买A同样施加损耗，A用户一段时间后又想买AOK\n\n添加动画演示-曲线-画图（curve）cunsumer里调一下比例\n想买A\ncurve.setFillColor(pink);\n\n\n回到main，点击consumers，在右侧-高级-勾选展示演示\n右侧画一个矩形宽度580，高度360的矩形矩形置于底层\n移动智能体勾选以这个位置为偏移量~单击空白处空间与网络-修改宽度与高度布局类型——随机演示动画\n修改数值修改想换AB想换同样看看效果\n动态数值main-面板-控件-滑块链接到交付时间最小值1，最大值10B同样来一个滑块\nmain-单击cinsumers-统计-\n面板-分析-时间堆叠图\n时间堆叠图 -比例——时间窗——固定——1~100\n基于智能体的传染病模型（SIR）及参数标准1.用状态图表示个体的三个状态Susceptible易得病的（易感人群）Infectious感染的（已得病，且感染）Recovered恢复的（不会再复发）2.三个参数接触率 ContactRate=1.0感染的概率InfectionProbability=0.8平均感染生病到恢复时间AverageIIlnessDuration=15\n创建模型以天为单位\n从智能体中拉入智能体群个数设为10000引入三个参数\n建立智能体点击智能体，进入person建立 状态图加入自变迁触发通过速率、行动恢复变迁修改\n回到main，点击智能体，统计分析——拖入数据集名称、垂直轴值、至多保留、自动更新\n拖入时间折线图数据集、颜色、时间窗（数据集改为dataset，标题改为InfectiousDS,数据量同上）\n单击空白，智能体行动\n校准实验点击这个模型时间校准实验参数与标准设置如下完成，从智能体中引入表函数(名字改为DATAHistory)\n粘贴表数据超出范围——最近\n开始演示\nGIS供应链仿真模型建立模型建立智能体\n建立仓库注意：这里是distributor\n建立零售商\n建立货车\n建立订单无形象\n货车定义定义参变量货车\n\n归属（参数owner）\n订单（变量order）\n忙闲状态（变量busy）\n开始送货时间（timeMove）建立状态图依次命名添加状态\n\norder&#x3D;msg;\nmoveTo(order.retailer);\n第一个变迁  消息——order——行动第二个变迁——智能体到达\n卸货无行动第三个变迁  ——到时——5分钟\n返回最右边变迁——智能体到达送货选择变迁\norder&#x3D;owner.collectionOrder.removeLast();\nmoveTo(order.retailer);\n\n最终呈现\n供应商定义定义参变量变量cost\n集合——truckFleet——元素类Truck集合类LinkedList\n订单收集（后面会用上）——名称——元素类\n建立行动图左下角+号for循环—集合迭代器—项目——集合插入决断t.busy==falsetrue 则返回t否则返回null修改connectionsTruck t&#x3D;findTruck();\nif(t!&#x3D;null)&#123;\nsend(msg,t);\n&#125;\nelse&#123;\ncollectionOrder.addFirst(msg);\n&#125;消息类型——order\n最终展示\n零售商定义定义参变量\nOrder o&#x3D;new Order();\no.retailer&#x3D;this;\nDistributor d&#x3D;main.distributors.random();\nsend(o,d);\n引入事件（event）\n定义订单定义参数retailer——名称——类型\n回到main拖入智能体从工程中拖入Distributor，在名称后加s，改为智能体群，初始空在这里插入图片描述Retailer同样Truck同样\n拖入地图面版——空间标记——GIS地图\n双击，找到故宫\n拖入GIS点\n定义三个零售商的点并改变颜色（CTRL+点击）引入集合——名称——元素类\n捕获配送中心捕获零售商捕获\n拖入初始化函数\n\nfor(int i&#x3D;0;i&lt;collectionRetailer.size();i++)&#123;\n  Retailer r&#x3D;add_retailers();\n  r.setLocation(collectionRetailer.get(i));\n&#125;\n\nfor(int i&#x3D;0;i&lt;collectionDistributor.size();i++)&#123;\n   Distributor d&#x3D;add_distributors();\n   d.setLocation(collectionDistributor.get(i));\n   d.numOfTrucks&#x3D;uniform_discr(5,10);\n   for(int j&#x3D;0;j&lt;d.numOfTrucks;j++)&#123;\n        Truck t&#x3D;add_trucks();\n        t.owner&#x3D;d;\n        d.truckFleet.add(t);\n        t.setLocation(collectionDistributor.get(i));\n   \n   \n   &#125;\n\n&#125;\n\n\n\n\n\n\n\n\n\n\n单击空白——智能体类型——智能体行动——启动时执行操作\n修改最近距离在Retailer里找到函数修改代码Order o&#x3D;new Order();\no.retailer&#x3D;this;\nDistributor d&#x3D;getNearestAgentByRoute(main.distributors);\nsend(o,d);\n成本回到truck最右边变迁——\nowner.cost+&#x3D;(time()-timeMove)*0.5;\n回到distributor文件演示——文本——拖入在图标右上角将文本修改为动态值，填上cost开始演示\n\n","slug":"基于anylogic","date":"2022-11-03T14:45:49.000Z","categories_index":"","tags_index":"信管","author_index":"Algernon"},{"id":"9e4aae0d62d70adf155bf02c14221ce4","title":"【HNUMSC】C语言第三讲","content":"C语言第三讲基本数据结构栈在栈（stack）中，被删除的是最近插入的元素：栈实现的是一种后进先出策略（而队列则是先进先出）\n栈上insert操作称为压入（push），而无元素参数的delete操作称为弹出（pop）。餐馆里的一摞盘子，“弹出”的顺序和压入的顺序相反，因为只有最上面的盘子才能够被取下来。\n堆算法算法（Algorithm）是规则的有限集合，是为解决特定问题而规定的一系列操作。算法设计的目标是正确、可读、健壮、高效、低耗正确\n\n对于几组输入数据能够得出满足结果的要求\n对于精心选择的典型、苛刻的输入数据能够得出满足要求的结果\n对于一切合法的输入数据都能够产生满足要求的结果\n\n一般情况下，至少应以第二层含义的正确性作为衡量一个算法是否正确的标准。\n&#x2F;&#x2F;求n个数的最大值问题，给出核心处理的示意算法\nmax&#x3D;0;\nfor(i&#x3D;1;i&lt;n;i++)&#123;\nscanf(&quot;%f&quot;,&amp;x);\n   if(x&gt;max)\n      max&#x3D;x;\n&#125;\n\n\n\n\n\n\n\n\n\n显然，当n个数全为负时，最大值max为0 ，这个算法的正确性是不够标准的\n可读鲁棒性对非法输入的抵抗能力，即使输入非法数据，也能够识别并加以处理。高效率、低储存量\n一个算法的执行时间是指算法中所有语句执行时间的总和。每条语句的执行时间等于该条语句的执行次数乘以执行一次所需实际时间。\n语句频度是指该语句在一个算法中重复执行的次数，一个算法的时间耗费就是该算法中所有语句频度之和。\n\n\n\n\n\n\n\n\n\n算法中语句总的执行次数$f(n)$是问题规模n的函数$T(n)=O(f(n))$，其中$O$是数量级\n它表示随问题规模n的宏大，算法的执行时间的增长率和$f(n)$的增长率相同，称作算法的渐进时间复杂度，简称时间复杂度\n常数阶\nm&#x3D;i;\ni&#x3D;j;\nj&#x3D;temp;\n该程序段的执行时间是一个与问题规模n无关的常数。$T(n)=O(1)$\n线性阶\nfor(i&#x3D;1;1&lt;&#x3D;n;1++)\n  x&#x3D;x+1;\n其时间复杂度为$O(n)$\nfor (i&#x3D;1;1&lt;&#x3D;n;i++)&#123;\n   for(j&#x3D;1;j&lt;&#x3D;n;j++)&#123;\n    y++;\n   &#125;\n&#125;\n其时间复杂度为$O(n^2)$\n模拟超级玛丽模拟的过程就是对真实场景尽可能的模拟，然后通过计算机强大的计算能力对结果进行预测。题解：\n\n\n\n\n\n\n\n\n\nhttps://www.luogu.com.cn/problem/solution/P1000\n#include&lt;stdio.h&gt;\nint main() &#123;\n    printf(\n    &quot;                ********\\n&quot;\n    &quot;               ************\\n&quot;\n    &quot;               ####....#.\\n&quot;\n    &quot;             #..###.....##....\\n&quot;\n    &quot;             ###.......######              ###            ###\\n&quot;\n    &quot;                ...........               #...#          #...#\\n&quot;\n    &quot;               ##*#######                 #.#.#          #.#.#\\n&quot;\n    &quot;            ####*******######             #.#.#          #.#.#\\n&quot;\n    &quot;           ...#***.****.*###....          #...#          #...#\\n&quot;\n    &quot;           ....**********##.....           ###            ###\\n&quot;\n    &quot;           ....****    *****....\\n&quot;\n    &quot;             ####        ####\\n&quot;\n    &quot;           ######        ######\\n&quot;\n    &quot;##############################################################\\n&quot;\n    &quot;#...#......#.##...#......#.##...#......#.##------------------#\\n&quot;\n    &quot;###########################################------------------#\\n&quot;\n    &quot;#..#....#....##..#....#....##..#....#....#####################\\n&quot;\n    &quot;##########################################    #----------#\\n&quot;\n    &quot;#.....#......##.....#......##.....#......#    #----------#\\n&quot;\n    &quot;##########################################    #----------#\\n&quot;\n    &quot;#.#..#....#..##.#..#....#..##.#..#....#..#    #----------#\\n&quot;\n    &quot;##########################################    ############\\n&quot;\n    );\n    return 0;\n&#125;\n多项式输出题解：\n\n\n\n\n\n\n\n\n\nhttps://www.luogu.com.cn/problem/solution/P1067\n枚举三连击\n192 384 576\n219 438 657\n273 546 819\n327 654 981\n\n\n\n\n\n\n\n\n\n从123（最小）枚举，abc;abc2;abc3当然，还有一种方法：三个数 之比分别为1:2:3，也可以将第一个数设为a，从1开始（123，246，369）依次枚举，直到满足条件\n可以用三个数字的每一位相加为45作为限制题解：https://www.luogu.com.cn/problem/solution/P1008?page=1\n递归如果函数调用它本身，那么此函数就是递归的。\n汉诺塔法国数学家爱德华·卢卡斯曾编写过一个印度的古老传说：在世界中心贝拿勒斯（在印度北部）的圣庙里，一块黄铜板上插着三根宝石针。印度教的主神梵天在创造世界的时候，在其中一根针上从下到上地穿好了由大到小的64片金片，这就是所谓的汉诺塔。不论白天黑夜，总有一个僧侣在按照下面的法则移动这些金片：一次只移动一片，不管在哪根针上，小片必须在大片上面。僧侣们预言，当所有的金片都从梵天穿好的那根针上移到另外一根针上时，世界就将在一声霹雳中消灭，而梵塔、庙宇和众生也都将同归于尽。$2^n-1$一个：1次两个：3次\n三个:7次1—&gt;C2—&gt;B1—&gt;B3—&gt;C1—&gt;A2—&gt;C1—&gt;Cn个：移动n个的次数+把最底层移动到C的次数（1次）+移动n个的次数\n题解：\n\n\n\n\n\n\n\n\n\nhttps://blog.csdn.net/Y673789476/article/details/124569813?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-124569813-blog-82025409.t0_searchtargeting_v1&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-124569813-blog-82025409.t0_searchtargeting_v1&amp;utm_relevant_index=2\n\n排序算法\n\n\n\n算法\n最坏情况运行时间\n平均情况/期望运行时间\n\n\n\n\n插入排序\n$Θ(n^2)$\n$Θ(n^2)$\n\n\n归并排序\n$Θ(nlgn)$\n$Θ(nlgn)$\n\n\n堆排序\n$Ο(nlgn)$\n——\n\n\n快速排序\n$Θ(n^2)$\n$Θ(nlgn)$（期望）\n\n\n计数排序\n$Θ(k+n)$\n$Θ(k+n)$\n\n\n基数排序\n$Θ(d(k+n))$\n$Θ(d(k+n))$\n\n\n桶排序\n$Θ(n^2)$\n$Θ(n^2)$（平均情况）\n\n\n\n\n插入法冒泡排序冒泡排序（相邻比序法）是一种简单的交换类排序方法，它是通过对相邻的数据元素进行交换，逐步将待排序序列变成有序序列的过程。\n\n\n\n\n\n\n\n\n\n反复扫描待排序记录序列，顺次比较相邻的两个元素的大小，若逆序就交换位置。在扫描的过程中，不断地将相邻记录中关键字大的记录向后移动，最后必然将待排序记录序列中最大关键字换到序列的末尾，这也是最大关键字记录应在的位置然后进行第二趟冒泡排序，对前n-1个记录进行同样的操作，其结果是使次大的记录被放在第n-1个记录的位置上然后进行第三趟冒泡排序，对前n-2个记录进行同样的操作，其结果是使次大的记录被放在第n-2个记录的位置上如此反复，每一趟冒泡排序都将一个记录排到位，直到剩下一个最小的记录。\n如果在某一趟冒泡排序的过程中，没有发现一个逆序，则可直接结束整个排序过程，所以冒泡排序过程最多进行n-1次。给出序列{48，62，35，77，55，14，35，98，22，40}的第一次冒泡排序过程。\n分治算法\n\n\n\n\n\n\n\n\n众所周知，弗兰大学的总图书馆距离寝室非常遥远，来回不便。有⼀天热爱看书的电子羊同学到图书馆借了 N 本书，出图书馆的时候，警报响了，于是保安把热爱看书的电子羊同学拦下，要检查⼀下哪本书没有登记出借。热爱看书的电子羊同学正准备把每⼀本书在报警器下过⼀下，以找出引发警报的书，但是保安露出不屑的眼神：你连二分查找都不会吗？于是保安把书分成两堆，让第⼀堆过⼀下报警器，报警器响；于是再把这堆书分成两堆…… 最终，检测了 logN 次之后，保安成功的找到了那本引起警报的书，露出了得意和嘲讽的笑容。于是阿东背着剩下的书走了。从此，图书馆丢了 N - 1 本书。\n许多有用的算法在结构上是递归的：为了解决一个给定的问题，算法一次或多次递归地调用其自身以解决若干子问题。这些算法典型地遵循分治法的思想，将原问题分解为几个规模较小但类似于原问题的子问题，递归地求解这些子问题，然后再合并这些子问题的解来建立原问题的解。\n二分搜索假设有n个呈升序排列的数组元素（例如1~100），当我们需要查找一个数a究竟在哪个位置时，可以使用二分搜索：将数组分为两份，用a的值比较n/2的值，如果大于则在（n/2,n]中，反之则小于，若等于则查找完毕。将n/2分成两份，重复上述操作，直到找出值相等为止。\n快速排序递归常用于分治法中。分治法是将一个大问题划分成多个较小的问题，然后采用相同的算法分别解决这些小问题。\n分治法的经典示例就是流行的排序算法：快速排序\n 假设要排序的数组的下标从1到n。\n\n选择数组元素e(作为“分割元素”)，然后重新排列数组使得元素从1到i-1都是小于或等于元素e的，元素i包含e，而元素从i+1到n都是大于或等于e的\n通过递归地采用快速排序方法，对从1到i-1的元素进行排序\n通过递归地采用快速排序方法，对从i+1到n的元素进行排序。从最后一个图可以看出，分割元素左侧的所有元素都小于或等于12，而其右侧的所有元素都大于或等于12。既然己经分割了数组，那么就可以使用快速排序法对数组的前4个元素(10,3,6,和7) 和后2个元素(15和18)进行递归快速排序了\n\n\n\n\n\n\n\n\n\n\n\n\n让我们先来开发一个名为quicksort的递归函数，此函数采用快速排序算法对整型数组进行排序\n#include &lt;stdio.h&gt;\n\n#define N 10\n\nvoid quicksort(int a[], int low, int high);\nint split(int a[], int low, int high);\n\nint main(void)\n&#123;\n  int a[N], i;\n\n  printf(&quot;Enter %d numbers to be sorted: &quot;, N);\n  for (i &#x3D; 0; i &lt; N; i++)\n    scanf(&quot;%d&quot;, &amp;a[i]);\n\n  quicksort(a, 0, N - 1);\n\n  printf(&quot;In sorted order: &quot;);\n  for (i &#x3D; 0; i &lt; N; i++)\n    printf(&quot;%d &quot;, a[i]);\n  printf(&quot;\\n&quot;);\n\n  return 0;\n&#125;\n\nvoid quicksort(int a[], int low, int high)\n&#123;\n  int middle;\n\n  if (low &gt;&#x3D; high) return;\n  middle &#x3D; split(a, low, high);\n  quicksort(a, low, middle - 1);\n  quicksort(a, middle + 1, high);\n&#125;\n\nint split(int a[], int low, int high)\n&#123;\n  int part_element &#x3D; a[low];\n\n  for (;;) &#123;\n    while (low &lt; high &amp;&amp; part_element &lt;&#x3D; a[high])\n      high--;\n    if (low &gt;&#x3D; high) break;\n    a[low++] &#x3D; a[high];\n\n    while (low &lt; high &amp;&amp; a[low] &lt;&#x3D; part_element)\n      low++;\n    if (low &gt;&#x3D; high) break;\n    a[high--] &#x3D; a[low];\n  &#125;\n\n  a[high] &#x3D; part_element;\n  return high;\n&#125;\n动态规划动态规划通常用来解决最优化问题。这类问题有很多可行解，每个解都有一个值，我们希望寻找到具有最优值（最大值或最小值）的解。我们称这样的解为问题的一个最优解，而非最优解（因为可能有多个解都达到最优值。）\n钢条切割\n贪心算法贪心算法在每一步都做出当时看起来最佳的选择。总是做出局部最优的选择，寄希望于这样的选择能够导致全局最优解。\n运用贪心策略在每一次转化时都取得了最优解。问题的最优子结构性质是该问题可用贪心算法求解的关键特征。贪心算法的每一次操作都对结果产生直接影响。贪心算法对每个子问题的解决方案都做出选择，不能回退。\n\n\n\n\n\n\n\n\n\n贪心算法，一次遍历，只要今天价格小于明天价格就在今天买入然后明天卖出，时间复杂度O(n)\n","slug":"C语言第三讲","date":"2022-11-03T14:44:49.000Z","categories_index":"编程语言","tags_index":"C语言","author_index":"Algernon"},{"id":"bd5c7ff1ee333580d66d465ad6b85ea0","title":"【HNUMSC】C语言第二讲","content":"C语言第二课循环循环是重复执行其他语句（循环体）的语句。C语言提供了三种重复语句：\n\nwhile\ndo\nfor\n\n水仙花数“水仙花数”是指一个三位数，其各位数字立方和等于该数本身。\n比方说153是一个“水仙花数”，因为153等于1的三次方、5的三次方、3的三次方这三个三次方数字的总和。$153=1^3+5^3+3^3$\nwhile语句while(i&lt;n)&#123;\n  i&#x3D;i+2;\n  &#125;\nint i&#x3D;5;\nwhile(i&gt;&#x3D;1)&#123;\n  printf(&quot;%d\\n&quot;,i);\n  i--;\n  &#125;\n\nint main(void)\n&#123;\nint i&#x3D;1;\nwhile(i&lt;101)&#123;\n  printf(&quot;%d &quot;,i);\n  i++;\n&#125;\nreturn 0;\n&#125;\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n&#123;\n  int n, sum &#x3D; 0;\n\n  printf(&quot;This program sums a series of integers.\\n&quot;);\n  printf(&quot;Enter integers (0 to terminate): &quot;);\n\n  scanf(&quot;%d&quot;, &amp;n);\n  while (n !&#x3D; 0) &#123;\n    sum +&#x3D; n;\n    scanf(&quot;%d&quot;, &amp;n);\n  &#125;\n  printf(&quot;The sum is: %d\\n&quot;, sum);\n\n  return 0;\n&#125;\n\ndo语句do语句本质上就是while语句，只是控制表达式是在每次执行完循环体之后进行判定。\n\n\n\n\n\n\n\n\n\ndo语句while（表达式）；\n\nint i &#x3D;10;\ndo&#123;\nprintf(&quot;%d\\n&quot;,i);\ni--;\n\n&#125;while(i&gt;0);\n\n\nfor语句for语句非常适合应用在使用“计数”变量的循环中。for语句格式：\n\n\n\n\n\n\n\n\n\nfor(表达式1；表达式2；表达式3)语句\n从0向上加到n-1：\nint i;\nfor(i&#x3D;0;i&lt;10;i++)\n   printf(&quot;i&#x3D;%d\\n&quot;,i);\n执行for语句时，变量i先初始化为0，接着判定i是否小于10。因为判定的结果为真，所以打印i=0，然后对变量i进行自增操作。随后再次对条件i&gt;0进行判定，直到不满足条件（判定为false）为止。\nfor的省略表达式C语言允许省略任意或者全部的表达式：\nint i&#x3D;0;\nfor(;i&lt;10;i++)\n   printf(&quot;i&#x3D;%d\\n&quot;,i);\nint i;\nfor(i&#x3D;0;i&lt;&#x3D;10;)&#123;\n\n   printf(&quot;i&#x3D;%d\\n&quot;,i);\n   i++; \n&#125;\n如果省略表达式2，那么它默认为真值，for语句不会终止，会无限循环。\nfor语句声明int i&#x3D;2;\nfor(int i&#x3D;0;i&lt;10;i++)\n   printf(&quot;i&#x3D;%d\\n&quot;,i);\nprintf(&quot;%d&quot;,i);\nfor语句声明的变量不可以在循环外访问。\n题目：打印1~100的整数打印1~100偶数平方\n\n\n\n\n\n\n\n\n\n编写程序，提示用户输入一个数n，然后显示出1~n的所以偶数平方值。例如，用户输入100，那么程序应该显示以下内容：\n4\n16\n36\n64\n100\n\n\n\n\n\n\n\n\n\n奇数x奇数=奇数，偶数x偶数=偶数，奇数x偶数=偶数\n对1~100求和\n百钱百鸡问题公鸡5，母鸡3，小鸡1/3，一百钱一百鸡\nint x,y,z;&#x2F;&#x2F;公鸡x只，母鸡y只，小鸡z只\nx*5+y*3+z&#x2F;3&#x3D;100；\nx+y+z&#x3D;100;\n三重循环可以做，但是时间复杂度？\n如何改进？\nz&#x3D;100-x-y\n是否有范围？\n&#x2F;&#x2F;x&lt;20,y&lt;33;\n循环中的break语句int main(void)\n&#123;\nint i&#x3D;0;\nfor(;;i++)&#123;\n   printf(&quot;i&#x3D;%d\\n&quot;,i);\n   if(i&#x3D;&#x3D;5)&#123;\n      break;\n\t&#125;\n\n&#125;\n\treturn 0;\n&#125;\ncontinue语句\n\n\n\n\n\n\n\n\n\nbreak语句会使程序跳出循环，而continue语句会把程序控制留在循环内。\n&#x2F;&#x2F;读入十个非零数后循环中止\nint n&#x3D;0;\nint sum&#x3D;0;\nwhile(n&lt;0)&#123;\nscanf(&quot;%d&quot;,&amp;i);\nif(i&#x3D;&#x3D;0)\n  continue;&#x2F;&#x2F;跳过读入的0\n sum +&#x3D;1;\n n++;\n&#125;\n\n基本类型整数类型\n\nint //4个字节\nlong int //8个字节C语言允许通过省略单词int 来缩写整数类型的名字。例如，整数溢出对整数进行算数运算时，其结果可能因为太大而无法表示。\n\n\n\n\n\n\n\n\n\n\n例如，对两个int值进行算术运算时，结果必须仍然能用int类型来表示，否则会发生溢出。\nlong l;\nscanf(&quot;%ld&quot;,&amp;l);\nprintf(&quot;%ld&quot;,l);\n浮点类型C语言提供3种浮点类型，对应三种不同的浮点格式\n\nfloat：单精度浮点数  //4个字节\ndouble：双精度浮点数 //8个字节\nlong double：扩展精度浮点数\n\ndouble d;\nscanf(&quot;%lf&quot;,&amp;d);\n&#x2F;&#x2F;printf函数格式中f可以用来写double类型（不能用lf）\n字符类型\n\n\n\n\n\n\n\n\nchar类型，即字符类型\n\nASCII码\n\n\n\n\n\n\n\n\n\nhttps://blog.csdn.net/sinat_28631741/article/details/80961033\nchar类型的变量可以用任意单字符赋值：\nchar ch;\nch &#x3D;&#39;a&#39;;\nch &#x3D;&#39;A&#39;;\nch &#x3D;&#39;0&#39;;\nch &#x3D;&#39; &#39;;&#x2F;&#x2F;空格\n\nch &#x3D;ch+1;\n可以像比较数那样对字符进行比较\nchar ch;\nint i;\ni&#x3D;&#39;a&#39;;\nch&#x3D;65;    &#x2F;&#x2F;ch is now &#39;A&#39;\nch&#x3D;ch+1;  &#x2F;&#x2F;ch is now &#39;B&#39;\nch++;    &#x2F;&#x2F; ch is now &#39;B&#39;\n\n\n\n\n\n\n\n\n\n下面的if语句测试ch中是否含有小写字母，如果有，那么它会把ch转化成相应的大写字母。\nint main(void)\n&#123;\nchar ch;\nch&#x3D;&#39;f&#39;;\nif (&#39;a&#39;&lt;&#x3D;ch &amp;&amp; ch&lt;&#x3D;&#39;z&#39;) \n\n  ch &#x3D;ch -&#39;a&#39;+&#39;A&#39;;\nprintf(&quot;%c&quot;,ch);\n\treturn 0;\n&#125;\ngetchar\n可以使用getchar函数和putchar函数来读写字符。\n\n\n\n\n\n\n\n\n\nputchar函数用于写单个字符\n每次调用getchar函数时，它会读入一个字符并将其返回。\nch&#x3D;getchar();&#x2F;&#x2F;为保存这个字符，必须使用赋值操作将其储存到变量中\n确定消息的长度 \n#include &lt;stdio.h&gt;\n\nint main(void)\n&#123;\n  char ch;\n  int len &#x3D; 0;\n\n  printf(&quot;Enter a message: &quot;);\n  ch &#x3D; getchar();\n  while (ch !&#x3D; &#39;\\n&#39;) &#123;\n    len++;\n    ch &#x3D; getchar();\n  &#125;\n  printf(&quot;Your message was %d character(s) long.\\n&quot;, len);\n\n  return 0;\n&#125;\n凯撒加密\n已知的最古⽼的⼀种加密技术是凯撒加密（得名于 Julius caesar）。该⽅法把⼀条消息中的每个字⺟⽤字⺟表中固定距离之后的那个字⺟来替代。（如果越过了字⺟Z，会绕回到字⺟表的起始位置。例如，如果每个字⺟都⽤字⺟表中两个位置之后的字⺟代替，那么Y就被替换为A，Z就被替换为B。）\n\n编写程序⽤凯撒加密⽅法对消息进⾏加密。⽤户输⼊待加密的消息和移位计数（字⺟移动的位置数⽬）：\nEnter message to be encrypted: Go ahead, make my day.\nEnter shift amount (1-25): 3\nEncrypted message: Jr dkhdg, pdnh pb gdb.\n\n\n注意,当⽤户输⼊26与移位计数的差值时,程序可以对消息进⾏解密:\n\n\nEnter message to be encrypted: Jr dkhdg, pdnh pb gdb.\nEnter shift amount (1-25): 23\nEncrypted message: Go ahead, make my day\n\n\n不是字⺟的那些字符不要改动。此外，加密时不要改变字⺟的⼤⼩写。\n\n\n输出范例：\n\n\nEnter message to be encrypted: Hello, world!\nEnter shift amount (1-25): 3\nEncrypted message: Khoor, zruog!\n\n\nEnter message to be encrypted: Khoor, zruog!\nEnter shift amount (1-25): 23\nEncrypted message: Hello, world!\n数组一维数组\n数组(array)是含有多个数据值的数据结构，并且每个数据值具有相同的数据类型。 \n这些数据值被称为元素(element)，数组内可以根据元素所处的位置对其进行单独选择。 \n最简单的数组类型就是一维数组。     \n一维数组中的元素一个接一个地编排在单独一行( 或者一列)内。\n\n\n声明数组a有10个int类型的元素：int a[10];或者用宏定义：\n#define N 10\nint a[N];\n数组下标\n\n\n\n\n\n\n\n\n\n为了存取特定的数组元素，可以在写数组名的同时在后面加上一个用方括号围绕的整数值（对数组取下标或进行索引）\n如果a是含有10个元素的数组，可以依此标记为a[0]，a[1]…a[9]\n数组索引从0开始\n数列反向\n#include &lt;stdio.h&gt;\n\n#define N 10  &#x2F;&#x2F;定义宏\n\nint main(void)\n&#123;\n  int a[N], i;\n\n  printf(&quot;Enter %d numbers: &quot;, N);\n  for (i &#x3D; 0; i &lt; N; i++)\n    scanf(&quot;%d&quot;, &amp;a[i]);\n\n  printf(&quot;In reverse order:&quot;);\n  for (i &#x3D; N - 1; i &gt;&#x3D; 0; i--)\n    printf(&quot; %d&quot;, a[i]);\n  printf(&quot;\\n&quot;);\n\n  return 0;\n&#125;\n\n数组初始化\n如果初始化式比数组短，那么数组中剩余的元素赋值为0：\nint a[10]&#x3D;&#123;1,2,3,4,5,6,7&#125;\n&#x2F;&#x2F;a的初始值为&#123;1,2,3,4,5,6,7,0,0,0&#125;\n将数组初始化为0：\nint a[10]&#x3D;&#123;0&#125;;\n&#x2F;&#x2F;初始化完全为空是非法的，故需要在大括号内放上一个0。初始化式比初始化的数组长也是非法的。\n如果有了初始化式也可以省略数组的长度。\n对数组使用sizeof运算符例如，数组a的清零操作可以写成如下形式：\nfor (i&#x3D;0;i&lt;sizeof(a)&#x2F;sizeof(a[0];i++)&#123;\n   a[i]&#x3D;0;\n&#125;\n多维数组\n二维数组m有5行9列：\nint m[5][9];\n多维数组初始化当需要访问数组中的每一个元素时，可以使用一对嵌套的for循环——一个循环遍历每一行，另一个循环遍历每一列：\n#define N  10\ndouble a[N][N];\nint row,col;\nfor (row&#x3D;0;row&lt;N;col++)&#123;\n   for(col&#x3D;0;col&lt;N;col++)&#123;\n       if(row&#x3D;&#x3D;col)\n            a[row][col]&#x3D;1.0;\n       else\n            a[row][col]&#x3D;0.0;\n   &#125;\n\n\n&#125;\n\nint n;\nint a[n];\n\n函数\n\n\n\n\n\n\n\n\n\n计算平均值，一个叫做average的函数用来计算两个double类型数值的平均值：\n#include &lt;stdio.h&gt;\n\ndouble average(double a, double b)\n&#123;\n  return (a + b) &#x2F; 2;\n&#125;\n\n\n\n\n\n\n\n\n\n\n\n\n一个函数调用包括函数名和其后的实际参数 (arguments)列表。\n\naverage(x, y) 即为对average函数的调用。\n实际参数用来给函数提供信息。调用average(x,y)的效果就是把变量x和y的值复制给形式参数a和b\n形参与实参实参是形参的初始值。第一个实参初始化第一个形参，第二个实参初始化第二个形参，以此类推。int main(void)\n&#123;\n  double x, y, z;\n\n  printf(&quot;Enter three numbers: &quot;);\n  scanf(&quot;%lf%lf%lf&quot;, &amp;x, &amp;y, &amp;z);\n  printf(&quot;Average of %g and %g: %g\\n&quot;, x, y, average(x, y));\n  printf(&quot;Average of %g and %g: %g\\n&quot;, y, z, average(y, z));\n  printf(&quot;Average of %g and %g: %g\\n&quot;, x, z, average(x, z));\n\n  return 0;\n&#125;\n\n判断 素数 \n#include &lt;stdbool.h&gt;   &#x2F;&#x2F;C99\n#include &lt;stdio.h&gt;\n\nbool is_prime(int n)\n&#123;\n  int divisor;\n\n  if (n &lt;&#x3D; 1)\n    return false;\n  for (divisor &#x3D; 2; divisor * divisor &lt;&#x3D; n; divisor++)\n    if (n % divisor &#x3D;&#x3D; 0)\n      return false;\n  return true;\n&#125;\n\nint main(void)\n&#123;\n  int n;\n\n  printf(&quot;Enter a number: &quot;);\n  scanf(&quot;%d&quot;, &amp;n);\n  if (is_prime(n))\n    printf(&quot;Prime\\n&quot;);\n  else\n    printf(&quot;Not prime\\n&quot;);\n\n  return 0;\n&#125;\n\n递归如果函数调用它本身，那么此函数就是递归的(recursive)\n斐波那契数列斐波那契数列指的是这样一个数列：1，1，2，3，5，8，13，21，34，55，89…\n这个数列从第3项开始，每一项都等于前两项之和。$a_n=a_{n-1}+a_{n-2}$\n#include &lt;stdio.h&gt;\n&#x2F;* Author:Bio Sheep\n   website:https:&#x2F;&#x2F;algernon98.github.io&#x2F;\n*&#x2F;\n\n\n#include&lt;stdio.h&gt;\nint fib(int n)&#123;\n   int m;\n   if(n&#x3D;&#x3D;1 || n&#x3D;&#x3D;2)&#123;\n       m&#x3D;1;\n   &#125;\n   else&#123;\n    m&#x3D;fib(n-1)+fib(n-2);\n   &#125;\n   return m;\n&#125;\nint main()&#123;\n\tint num&#x3D;15;\n   for (int i&#x3D;1;i&lt;num;i++)&#123;\n\n   printf(&quot;%d\\n&quot;,fib(i));\n   &#125;\n\n&#125;    \n指针简单介绍\n可以用一种特殊的指针变量来存储内存地址。当采用指针变量p来存储变量i的地址时，我们通常说p“指向”i。指针就是地址，指针变量就是存贮地址的变量。采用图形方式可以表达为：C语言为指针变量ᨀ供了一对特殊的运算符：\n\n\n\n\n\n\n\n\n\n为得到变量的地址，可以使用&amp;（取地址）运算符。\n为了访问指针所指向的对象，可以使用*（间接寻址）运算 符。\n声明指针变量只是为指针留出空间，但并未将其指向任何对象：\nint *p; &#x2F;* points nowhere in particular *&#x2F;\n在使用p 之前对其进行初始化是至关重要的。一种初始化方法是采用某个变量的地址对其进行赋值：\nint i, *p;\np &#x3D; &amp;i;\n将变量i的地址赋给变量p ，结果是令p指向i\n\n间接寻址运算符一旦指针变量指向了某个对象，就可以使用*（间接寻址运算符）访问存储在对象中的内容。如果p 指向i，可以采用如下方式输出i的值：\nprintf(&quot;%d\\n&quot;, *p);\n对变量使用&amp;运算符产生指向变量的指针，而对指针使用 *运算符则可以返回到原始变量：\nj &#x3D; *&amp;i; &#x2F;* same as j &#x3D; i; *&#x2F;\n只要p指向i，p 就是i的别名\np 拥有和 i相同的值改变 *p 的值，同时也会改变i的值\n结构体结果是可能具有不同类型的值（成员）的集合每个结构成员都有名字，所以为了选择特定的结构成员需要指名结构成员的名字而非位置。\n用一系列方框表示结构，水平垂直均可每个结构代表一种新的作用域，任何声明在此作用域内的名字都不会和程序中的其他名字冲突。\n\n字符串字符串字面量\n\n\n\n\n\n\n\n\n字符串字面量(string literal)是用一对双引号括起来的字符序列“When you come to a fork in the road, take it.”包含单个字符的字符串字面量与一个字符常量是不一样的\n&#x2F;&#x2F;&quot;a&quot;是以指针表示的\n&#x2F;&#x2F;&#39;a&#39; 是以整数表示的\n\n注意：双引号当编译器遇到一个长度为n的字符串字面量时，给该字符串分配n+1个字节的内存空间该内存空间将存放字符串中的字符，外加一个额外的空字符，用于标志字符串的结束空字符是一个所有比特全为0的字节，用转义序列 \\0表示\n\n","slug":"C语言第二讲","date":"2022-11-03T14:43:49.000Z","categories_index":"编程语言","tags_index":"C语言","author_index":"Algernon"},{"id":"146a852d05d3eb85968d596488683f29","title":"【HNUMSC】C语言第一讲","content":"C语言第一讲简介\nC语言是一种底层语言\nC语言是一种小型语言\nC语言是一种包容性语言\n\n#include&lt;stdio.h&gt;\nint main()&#123;\nint a,i;\na&#x3D;6;\nfor(i&#x3D;1;i&lt;&#x3D;3;i++)\n printf(&quot;%d&quot;,a);\n return 0;\n&#125;\nhello world#include &lt;stdio.h&gt;\n\nint main(void)\n&#123;\n\tprintf(&quot;Hello World!&quot;);\n\treturn 0;\n&#125;\n\n\n\n\n\n\n\n\n\ninclude 头文件，包含C语言标准输入/输出库的相关信息\nC语言规定每条语句都需要以分号结尾（当然，也有例外）\n注释文档说明\n\n\n\n\n\n\n\n\n\n符号/标记注释的开始，符号/标记注释的结束 \n&#x2F;* This is a comment *&#x2F;\n注释几乎可以出现在程序的任何位置上。注释也可以占用多行\n#include &lt;stdio.h&gt;\n&#x2F;* Author:Bio Sheep\n   website:https:&#x2F;&#x2F;algernon98.github.io&#x2F;\n*&#x2F;\n\nint main(void)\n&#123;\n\tprintf(&quot;Hello World!&quot;);\n\treturn 0;\n&#125;\n一般的注释放在代码部分之前，或者 同一行\nint main(void)\n&#123;\n\tprintf(&quot;欲买桂花同载酒，终不似，少年游&quot;);  &#x2F;*文本部分*&#x2F; \n\treturn 0;\n&#125;\n注意：大小写 “  ”  “句尾分号;\n另一种注释：\n\nint main(void)\n&#123;\n\tprintf(&quot;欲买桂花同载酒，终不似，少年游&quot;);  &#x2F;&#x2F;文本部分\n\treturn 0;\n&#125;\n这种注释会在行末自动终止\n关键字\n变量每一种变量都必须有一种类型，用来说明变量所存储的数据的种类。int型变量可以存储整数，但取值范围有一定限制；float型变量可以存储带小数位的数。| 类型  | 举例           || ——- | ——————— || int   | 0、114、-255   || float | 114.514、-0.11 |\n声明\n\n\n\n\n\n\n\n\n\n老爹的侄子是一名考古学家，这一天他带回了一个奇妙的小玩意儿，想让见多识广的老爹掌掌眼。但即使是老爹也需要时间研究，于是老爹想定制一个精美的小盒子装下这个看似不同寻常的宝物，你可以设计一个程序帮助老爹确定这个 盒子的体积吗？\n首先，我们需要知道盒子的长宽高。长、宽、高就是程序中的变量在C语言中，使用变量前必须对其进行声明\n声明变量，首先指定变量类型，然后说明变量名字，比如我们需要引入两个变量，物体的高(整数)和重量（浮点数）\nint height;\nfloat weight;\n赋值从右往左赋值\n&#x2F;&#x2F;对于一个高为8，长为12，宽为10的物体，依此对三个变量赋值：\nheight &#x3D;8;\nlength &#x3D;12;\nwidth &#x3D; 10;\n但是，在对一个变量进行赋值之前，需要确保在此之前已经声明过变量：\nint height;\nfloat length;\nfloat width;\nheight &#x3D;8;\nlength &#x3D;12.14159;\nwidth &#x3D; 10;\n\n\n让我们看看输出：printf(&quot;%d&quot;,height);\nprintf(&quot;%f&quot;,length);\nprintf(&quot;%f&quot;,width);\n\n\n\n\n\n\n\n\n\n812.14159010.000000\n显然，这不是我们想要的结果\n我们将代码进行一定调整：\nint height;\nfloat length;\nfloat width;\nheight &#x3D;8;\nlength &#x3D;12.14159;\nwidth &#x3D; 10;\nprintf(&quot;height&#x3D;%d\\n&quot;,height);\nprintf(&quot;length&#x3D;%f\\n&quot;,length);\nprintf(&quot;width&#x3D;%f&quot;,width);\n\n输出：\n\n\n\n\n\n\n\n\n\nheight=8length=12.141590width=10.000000\n可以看到，在不指定保留小数位数的情况下，浮点数默认六位小数\n声明的时候，我们也可以一并赋值，这样可以对变量进行初始化\nint height&#x3D;8,length&#x3D;12,width&#x3D;10; &#x2F;&#x2F;分别对高、长和宽初始化\nint height,length,width&#x3D;10;&#x2F;&#x2F;声明三个变量，但仅对宽初始化\n\n格式化输入输出\n\n\n\n\n\n\n\n\n\n老爹最近很烦！上一个古董还没有研究完，这个不省心的侄子又给他带了好几个小玩意儿，要知道，带有魔力的盒子是很不好定制的，不同的古董也有不同的参数，你能否改进程序，可以根据老爹的要求来求出适合的盒子体积呢？\n为了达到老爹的要求，这套程序需要允许用户自行录入尺寸。\n获取用户输入的函数是scanf函数，而输出使用printf函数二者都需要使用格式串来指定输入或输出数据的形式。\n读入一个int型值：\nscanf(&quot;%d&quot;.&amp;i); &#x2F;&#x2F;将输入值存入int型变量i中\n同样的，float型值的读入：\nscanf(&quot;%f&quot;.&amp;j); &#x2F;&#x2F;将输入值存入float型变量j中\n改进的程序:\n#include &lt;stdio.h&gt;\n&#x2F;* Author:Bio Sheep\n   website:https:&#x2F;&#x2F;algernon98.github.io&#x2F;\n*&#x2F;\n\nint main(void)\n&#123;\nint height,length,width,volume;\nprintf(&quot;输入盒子的高:&quot;) ; \nscanf(&quot;%d&quot;,&amp;height);\nprintf(&quot;输入盒子的长:&quot;) ; \nscanf(&quot;%d&quot;,&amp;length);\nprintf(&quot;输入盒子的宽:&quot;) ; \nscanf(&quot;%d&quot;,&amp;width);\nvolume&#x3D;height*length*width; \nprintf(&quot;盒子的体积是：%d&quot;,volume);\n\treturn 0;\n&#125;\n\n输出：\n\n\n\n\n\n\n\n\n\n输入盒子的高:1输入盒子的长:2输入盒子的宽:3盒子的体积是：6\n如果我们希望保留三位小数呢？\nprintf(&quot;盒子的体积是：%.3f&quot;,volume);\n转换说明我们可以用%.1f来显示小数点后带一位数字的float型值。%m.pX形式m是最小 字段宽度，p是精度，X是转换说明符对于X：\n\nd表示十进制形式的整数\ne表示指数（科学计数法）形式的浮点数\nf是浮点数（没有指数）\n\n%d\n%5d\n%-5d\n%5.3d\n%5.3f\n%5.3e\n转义序列\n\n\n\n\n\n\n\n\n\n换行符  ：   \\n\nprintf(&quot;欲买桂花同载酒，终不似，少年游&quot;);\nprintf(&quot;欲买桂花同载酒，\\n终不似，\\n少年游。&quot;);\n输出：\n\n\n\n\n\n\n\n\n\n欲买桂花同载酒，终不似，少年游欲买桂花同载酒，终不似，少年游。\n修改：\nprintf(&quot;欲买桂花同载酒，终不似，少年游\\n&quot;);\nprintf(&quot;欲买桂花同载酒，\\n终不似，\\n少年游。&quot;);\n欲买桂花同载酒，终不似，少年游\n欲买桂花同载酒，\n终不似，\n少年游。\n转义序列 \\” ,表示字符”\nprintf(&quot;老爹说：\\&quot;还有一件事!\\&quot;&quot;);\n\n表达式算数运算符一元运算符 | +    | -    || —— | —— |\n二元运算符| 加法类      | 乘法类      || —————- | —————- || +加法运算符 | *乘法运算符 || -减法运算符 | /除法运算符 ||             | %求余运算符 |\n\n\n\n\n\n\n\n\n\n10%3的值是1,10/3的值是3\n复合赋值i&#x3D;i+2;\n可以简写为：\ni+&#x3D;2;\n其他同上\n\n\n\n\n\n\n\n\n\nv-=e表示v加上e，然后将结果存储到v中\n自增、自减\ni&#x3D;i+1;\nj&#x3D;j-1;\n可以利用自增运算符（++）和自减运算符（—）缩短为：\ni++；\nj--；\n\n思考：++i和i++有什么区别？\n编程题，两位数逆序打印\n2-7：计算账单（Bills）\n\n编写⼀个程序，要求⽤户输出⼀个美元数量，然后显示出如何⽤最少20美元、10美元、5美元和1美元来付款。\n\nEnter a dollar amount: 93\n$20 bills: 4\n$10 bills: 1\n$5 bills: 0\n$1 bills: 3\n选择语句\n选择语句 if  switch\n重复语句  while do for  循环\n跳转语句  break continue  goto\n\n逻辑表达式关系运算符在C语言中，诸如i    | 大于     || &lt;=   | 小于等于 || &gt;=   | 大于等于 |\n判等运算符\n\n\n\n符号\n含义\n\n\n\n\n==\n等于\n\n\n！=\n不等于\n\n\n\n\n逻辑运算符\n\n\n\n符号\n含义\n\n\n\n\n！\n逻辑非\n\n\n&amp;&amp;\n逻辑与\n\n\n\n\n\n\n\\\n\\\n\n逻辑或\n\n\n\n\n\n\n\nif 语句\n\n\n\n\n\n\n\n\n\nif(表达式)语句\n判定0&lt;i&lt;n是否成立：\nif (0&lt;i &amp;&amp; i&lt;n)\n复合语句：\nif（i&gt;0）&#123;\ni--;\nj++;\n&#125;\n\nelse语句if （i&gt;j）\n  max&#x3D;i;\nelse\n  max&#x3D;j;\nif嵌套\n#include &lt;stdio.h&gt;\n&#x2F;* Author:Bio Sheep\n   website:https:&#x2F;&#x2F;algernon98.github.io&#x2F;\n*&#x2F;\n\nint main(void)\n&#123;\nint i&#x3D;5,j&#x3D;4,max;\nif(i&gt;0)&#123;\n   if(i&gt;j)&#123;\n   max&#x3D;i;\n   &#125;\n   else&#123;\n   max&#x3D;j;\n   &#125;\n&#125;\nelse&#123;\nmax&#x3D;j;\n&#125;\nprintf(&quot;%d&quot;,max);\n\treturn 0;\n&#125;\n\n级联式if语句if （i&gt;j）\n   printf(&quot;i is greater than j\\n&quot;);\nelse if (i&lt;j)\n   printf(&quot;i is less than j\\n&quot;);\nelse \n   printf(&quot;i is equal to  j\\n&quot;)\nswitch语句\nswitch(grade)&#123;\ncase 3:\ncase 2:\ncase 1: printf(&quot;passing&quot;);\n        break;\ncase 0: printf(&quot;falling&quot;);\n       break;\n\n&#125;\n\nbreak语句break语句会使得程序“跳”出switch语句，继续执行switch后面的语句\n","slug":"C语言第一讲","date":"2022-11-03T14:42:49.000Z","categories_index":"编程语言","tags_index":"C语言","author_index":"Algernon"},{"id":"ff813a6890c74120b08ea0e357e75669","title":"python实训 俄罗斯方块 面向对象编程MVC模式","content":"前端演示viewtest.pyfrom tkinter import *\nfrom random import *\nimport threading\nfrom tkinter.messagebox import showinfo\nfrom tkinter.messagebox import askquestion\nimport threading\nfrom time import sleep\nbrick &#x3D; [\n        [\n            [\n                [0, 1, 1],\n                [1, 1, 0],\n                [0, 0, 0]\n            ],\n            [\n                [1, 0, 0],\n                [1, 1, 0],\n                [0, 1, 0]\n            ],\n            [\n                [0, 1, 1],\n                [1, 1, 0],\n                [0, 0, 0]\n            ],\n            [\n                [1, 0, 0],\n                [1, 1, 0],\n                [0, 1, 0]\n            ]\n        ],\n        [\n            [\n                [1, 1, 1],\n                [1, 0, 0],\n                [0, 0, 0]\n            ],\n            [\n                [0, 1, 1],\n                [0, 0, 1],\n                [0, 0, 1]\n            ],\n            [\n                [0, 0, 0],\n                [0, 0, 1],\n                [1, 1, 1]\n            ],\n            [\n                [1, 0, 0],\n                [1, 0, 0],\n                [1, 1, 0]\n            ]\n        ],\n        [\n            [\n                [1, 1, 1],\n                [0, 0, 1],\n                [0, 0, 0]\n            ],\n            [\n                [0, 0, 1],\n                [0, 0, 1],\n                [0, 1, 1]\n            ],\n            [\n                [0, 0, 0],\n                [1, 0, 0],\n                [1, 1, 1]\n            ],\n            [\n                [1, 1, 0],\n                [1, 0, 0],\n                [1, 0, 0]\n            ]\n        ],\n        [\n            [\n                [0, 0, 0],\n                [0, 1, 1],\n                [0, 1, 1]\n            ],\n            [\n                [0, 0, 0],\n                [0, 1, 1],\n                [0, 1, 1]\n            ],\n            [\n                [0, 0, 0],\n                [0, 1, 1],\n                [0, 1, 1]\n            ],\n            [\n                [0, 0, 0],\n                [0, 1, 1],\n                [0, 1, 1]\n            ]\n        ],\n        [\n            [\n                [1, 1, 1],\n                [0, 1, 0],\n                [0, 0, 0]\n            ],\n            [\n                [0, 0, 1],\n                [0, 1, 1],\n                [0, 0, 1]\n            ],\n            [\n                [0, 0, 0],\n                [0, 1, 0],\n                [1, 1, 1]\n            ],\n            [\n                [1, 0, 0],\n                [1, 1, 0],\n                [1, 0, 0]\n            ]\n        ],\n        [\n            [\n                [0, 1, 0],\n                [0, 1, 0],\n                [0, 1, 0]\n\n            ],\n            [\n                [0, 0, 0],\n                [1, 1, 1],\n                [0, 0, 0]\n\n            ],\n            [\n                [0, 1, 0],\n                [0, 1, 0],\n                [0, 1, 0]\n            ],\n            [\n                [0, 0, 0],\n                [1, 1, 1],\n                [0, 0, 0]\n            ]\n        ],\n        [\n            [\n                [1, 1, 0],\n                [0, 1, 1],\n                [0, 0, 0]\n            ],\n            [\n                [0, 0, 1],\n                [0, 1, 1],\n                [0, 1, 0]\n            ],\n            [\n                [0, 0, 0],\n                [1, 1, 0],\n                [0, 1, 1]\n            ],\n            [\n                [0, 1, 0],\n                [1, 1, 0],\n                [1, 0, 0]\n            ]\n        ]\n\n    ]\n\nclass View(object):\n    # 是否开始\n    start &#x3D; True\n    # 是否到达底部\n    isDown &#x3D; True\n    isPause &#x3D; False\n    # 窗体\n    window &#x3D; None\n    # frame\n    frame1 &#x3D; None\n    frame2 &#x3D; None\n\n    # 按钮\n    btnStart &#x3D; None\n\n    # 绘图类\n    canvas &#x3D; None\n    canvas1 &#x3D; None\n\n    # 标题\n    title &#x3D; &quot;Python暑期课程设计&quot;\n    # 宽和高\n    width &#x3D; 450\n    height &#x3D; 670\n\n    # 行和列\n    rows &#x3D; 20\n    cols &#x3D; 10\n\n    # 下降方块的线程\n    downThread &#x3D; None\n\n    # 几种方块\n    brick&#x3D;brick\n\n    # 当前的方块\n    #curBrick &#x3D; None\n    curBrick&#x3D;None\n    # 当前方块数组\n    arr &#x3D; None\n    arr1 &#x3D; None\n    # 当前方块形状\n    shape &#x3D; -1\n    # 当前方块的行和列（最左上角）\n    curRow &#x3D; -10\n    curCol &#x3D; -10\n\n    # 背景\n    back &#x3D; list()\n    # 格子\n    gridBack &#x3D; list()\n    preBack &#x3D; list()\n    # 初始化\n    def init(self):\n\n        for i in range(0, self.rows):\n            self.back.insert(i, list())\n            self.gridBack.insert(i, list())\n\n        for i in range(0, self.rows):\n\n            for j in range(0, self.cols):\n                self.back[i].insert(j, 0)\n                self.gridBack[i].insert(j, self.canvas.create_rectangle(30 * j, 30 * i, 30 * (j + 1), 30 * (i + 1),\n                                                                        fill&#x3D;&quot;red&quot;))\n\n        for i in range(0, 3):\n            self.preBack.insert(i, list())\n\n        for i in range(0, 3):\n\n            for j in range(0, 3):\n                self.preBack[i].insert(j, self.canvas1.create_rectangle(30 * j, 30 * i, 30 * (j + 1), 30 * (i + 1),\n                                                                        fill&#x3D;&quot;red&quot;))\n\n                # 绘制游戏的格子\n    def drawRect(self):\n        for i in range(0, self.rows):\n\n            for j in range(0, self.cols):\n\n                if self.back[i][j] &#x3D;&#x3D; 1:\n\n                    self.canvas.itemconfig(self.gridBack[i][j], fill&#x3D;&quot;purple&quot;, outline&#x3D;&quot;white&quot;)#掉落之后的方块，填充色、轮廓色\n\n                elif self.back[i][j] &#x3D;&#x3D; 0:\n\n                    self.canvas.itemconfig(self.gridBack[i][j], fill&#x3D;&quot;black&quot;, outline&#x3D;&quot;white&quot;) #棋盘格子的填充色、轮廓色\n\n                    # 绘制预览方块\n        for i in range(0, len(self.arr1)):\n\n            for j in range(0, len(self.arr1[i])):\n\n                if self.arr1[i][j] &#x3D;&#x3D; 0:\n\n                    self.canvas1.itemconfig(self.preBack[i][j], fill&#x3D;&quot;black&quot;, outline&#x3D;&quot;white&quot;)\n\n                elif self.arr1[i][j] &#x3D;&#x3D; 1:\n\n                    self.canvas1.itemconfig(self.preBack[i][j], fill&#x3D;&quot;orange&quot;, outline&#x3D;&quot;white&quot;)\n\n                    # 绘制当前正在运动的方块\n    def clickStart(self):\n\n        self.start &#x3D; True\n\n        for i in range(0, self.rows):\n\n            for j in range(0, self.cols):\n                self.back[i][j] &#x3D; 0\n                self.canvas.itemconfig(self.gridBack[i][j], fill&#x3D;&quot;black&quot;, outline&#x3D;&quot;white&quot;)\n\n        for i in range(0, len(self.arr)):\n\n            for j in range(0, len(self.arr[i])):\n                self.canvas1.itemconfig(self.preBack[i][j], fill&#x3D;&quot;black&quot;, outline&#x3D;&quot;white&quot;)\n\n        #self.getCurBrick()\n        self.drawRect()\n\n        self.downThread &#x3D; threading.Thread(target&#x3D;self.brickDown, args&#x3D;())\n        self.downThread.start()\n\n    def clickPause(self):\n        self.isPause &#x3D; not self.isPause\n        print(self.isPause)\n        if not self.isPause:\n            self.btnPause[&quot;text&quot;] &#x3D; &quot;暂停&quot;\n        else:\n            self.btnPause[&quot;text&quot;] &#x3D; &quot;恢复&quot;\n\n    def clickReStart(self):\n        ackRestart &#x3D; askquestion(&quot;remake！好耶！&quot;, &quot;光速重开?&quot;)\n        if ackRestart &#x3D;&#x3D; &#39;yes&#39;:\n            self.clickStart()\n        else:\n            return\n\n    def clickQuit(self):\n        ackQuit &#x3D; askquestion(&quot;就走了？&quot;, &quot;没你我可怎么活啊！&quot;)\n        if ackQuit &#x3D;&#x3D; &#39;yes&#39;:\n            self.window.destroy()\n            exit()\n    def getCurBrick(self):\n\n        self.curBrick &#x3D; randint(0, len(self.brick) -1)\n        self.shape &#x3D; 0\n        # 当前方块数组\n        self.arr &#x3D; self.brick[self.curBrick][self.shape]\n\n       # self.arr1 &#x3D; self.arr\n        self.arr1 &#x3D; self.brick[self.curBrick][self.shape]\n        self.curRow &#x3D; 0\n        self.curCol &#x3D; 1\n\n        # 是否到底部为False\n        self.isDown &#x3D; False\n    # 获得当前的方块\n    def __init__(self):\n\n        self.window &#x3D; Tk()\n        self.window.title(self.title)\n        self.window.minsize(self.width, self.height)\n        self.window.maxsize(self.width, self.height)\n\n        self.frame1 &#x3D; Frame(self.window, width&#x3D;300, height&#x3D;600, bg&#x3D;&quot;black&quot;)\n        self.frame1.place(x&#x3D;20, y&#x3D;30);\n\n        self.scoreLabel1 &#x3D; Label(self.window, text&#x3D;&quot;Score:&quot;, font&#x3D;(30))\n        self.scoreLabel1.place(x&#x3D;340, y&#x3D;60)\n        self.scoreLabel2 &#x3D; Label(self.window, text&#x3D;&quot;0&quot;, fg&#x3D;&#39;red&#39;, font&#x3D;(30))\n        self.scoreLabel2.place(x&#x3D;410, y&#x3D;60)\n\n        self.frame2 &#x3D; Frame(self.window, width&#x3D;90, height&#x3D;90, bg&#x3D;&quot;black&quot;)\n        self.frame2.place(x&#x3D;340, y&#x3D;120)\n\n        self.canvas &#x3D; Canvas(self.frame1, width&#x3D;300, height&#x3D;600, bg&#x3D;&quot;black&quot;)\n        self.canvas1 &#x3D; Canvas(self.frame2, width&#x3D;90, height&#x3D;90, bg&#x3D;&quot;black&quot;)\n\n        self.btnStart &#x3D; Button(self.window, text&#x3D;&quot;开始&quot;, command&#x3D;self.clickStart)\n        self.btnStart.place(x&#x3D;340, y&#x3D;400, width&#x3D;80, height&#x3D;25)\n\n        self.btnPause &#x3D; Button(self.window, text&#x3D;&quot;暂停&quot;, command&#x3D;self.clickPause)\n        self.btnPause.place(x&#x3D;340, y&#x3D;450, width&#x3D;80, height&#x3D;25)\n\n        self.btnReStart &#x3D; Button(self.window, text&#x3D;&quot;重新开始&quot;, command&#x3D;self.clickReStart)\n        self.btnReStart.place(x&#x3D;340, y&#x3D;500, width&#x3D;80, height&#x3D;25)\n\n        self.btnQuit &#x3D; Button(self.window, text&#x3D;&quot;退出&quot;, command&#x3D;self.clickQuit)\n        self.btnQuit.place(x&#x3D;340, y&#x3D;550, width&#x3D;80, height&#x3D;25)\n\n        self.init()\n\n        # 获得当前的方块\n        self.getCurBrick()\n\n        # 按照数组，绘制格子\n\n        self.drawRect()\n\n        self.canvas.pack()\n\n        self.canvas1.pack()\n        self.window.mainloop()\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    view &#x3D; View()\n主程序Viewfrom tkinter import *\nfrom random import *\nimport threading\nfrom tkinter.messagebox import showinfo\nfrom tkinter.messagebox import askquestion\nimport threading\nfrom time import sleep\n\nclass View():\n    def __init__(self):\n        # 标题\n        self.title &#x3D; &quot;Python暑期课程设计&quot;\n        # 宽和高\n        self.width &#x3D; 450\n        self.height &#x3D; 670\n        self.window &#x3D; Tk()\n        self.window.title(self.title)\n        self.window.minsize(self.width, self.height)\n        self.window.maxsize(self.width, self.height)\n\n        self.frame1 &#x3D; Frame(self.window, width&#x3D;300, height&#x3D;600, bg&#x3D;&quot;black&quot;)\n        self.frame1.place(x&#x3D;20, y&#x3D;30)\n\n        self.scoreLabel1 &#x3D; Label(self.window, text&#x3D;&quot;Score:&quot;, font&#x3D;(30))\n        self.scoreLabel1.place(x&#x3D;340, y&#x3D;60)\n        self.scoreLabel2 &#x3D; Label(self.window, text&#x3D;&quot;0&quot;, fg&#x3D;&#39;red&#39;, font&#x3D;(30))\n        self.scoreLabel2.place(x&#x3D;410, y&#x3D;60)\n\n        self.frame2 &#x3D; Frame(self.window, width&#x3D;90, height&#x3D;90, bg&#x3D;&quot;black&quot;)\n        self.frame2.place(x&#x3D;340, y&#x3D;120)\n\n        self.canvas &#x3D; Canvas(self.frame1, width&#x3D;300, height&#x3D;600, bg&#x3D;&quot;black&quot;)  # 界面画布，被挡住了所以修改颜色看不出来，但最好还是保持黑色\n        self.canvas1 &#x3D; Canvas(self.frame2, width&#x3D;90, height&#x3D;90, bg&#x3D;&quot;black&quot;)  # 预览画布，虽然被遮住了但最好还是黑底\n\n        self.btnStart &#x3D; Button(self.window, text&#x3D;&quot;开始&quot;, command&#x3D;self.clickStart)\n        self.btnStart.place(x&#x3D;340, y&#x3D;400, width&#x3D;80, height&#x3D;25)    #位置\n\n        self.btnPause &#x3D; Button(self.window, text&#x3D;&quot;暂停&quot;, command&#x3D;self.clickPause)\n        self.btnPause.place(x&#x3D;340, y&#x3D;450, width&#x3D;80, height&#x3D;25)\n\n        self.btnReStart &#x3D; Button(self.window, text&#x3D;&quot;重新开始&quot;, command&#x3D;self.clickReStart)\n        self.btnReStart.place(x&#x3D;340, y&#x3D;500, width&#x3D;80, height&#x3D;25)\n\n        self.btnQuit &#x3D; Button(self.window, text&#x3D;&quot;退出&quot;, command&#x3D;self.clickQuit)\n        self.btnQuit.place(x&#x3D;340, y&#x3D;550, width&#x3D;80, height&#x3D;25)\n    def clickQuit(self):\n        ackQuit &#x3D; askquestion(&quot;就走了？&quot;, &quot;没你我可怎么活啊！&quot;)\n        if ackQuit &#x3D;&#x3D; &#39;yes&#39;:\n            self.window.destroy()\n            exit()\n\n    def clickPause(self):\n        self.isPause &#x3D; not self.isPause\n        print(self.isPause)\n        if not self.isPause:\n            self.btnPause[&quot;text&quot;] &#x3D; &quot;暂停&quot;\n        else:\n            self.btnPause[&quot;text&quot;] &#x3D; &quot;恢复&quot;\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    view &#x3D; View()\nModelfrom tkinter import *\nfrom random import *\nimport threading\nfrom tkinter.messagebox import showinfo\nfrom tkinter.messagebox import askquestion\nimport threading\nfrom time import sleep\nclass Model(): #预定义变量\n    def __init__(self):\n        \n        self.brick &#x3D; None\n\n        # 是否到达底部\n        self.isDown &#x3D; True\n        self.isPause &#x3D; False\n        # 窗体\n        self.window &#x3D; None\n        # frame\n        self.frame1 &#x3D; None\n        self.frame2 &#x3D; None\n        # 按钮\n        self.btnStart &#x3D; None\n        # 绘图类\n        self.canvas &#x3D; None\n        self.canvas1 &#x3D; None\n        # 下降方块的线程\n        self.downThread &#x3D; None\n        # 当前的方块\n        self.curBrick &#x3D; None\n        # 下一个方块\n        self.nextBrick &#x3D; None\n        # 当前方块数组\n        self.arr &#x3D; None\n        self.arr1 &#x3D; None\n        # 当前方块形状\n        self.shape &#x3D; -1\n        # 当前方块的行和列（最左上角）\n        self.curRow &#x3D; -10\n        self.curCol &#x3D; -10\n    # 初始化\n    def init(self):\n        # 格子\n        self.gridBack &#x3D; list()\n        self.preBack &#x3D; list()\n        # 背景\n        self.back &#x3D; list()\n        self.brick &#x3D; [\n            [\n                [\n                    [0, 1, 1],\n                    [1, 1, 0],\n                    [0, 0, 0]\n                ],\n                [\n                    [1, 0, 0],\n                    [1, 1, 0],\n                    [0, 1, 0]\n                ],\n                [\n                    [0, 1, 1],\n                    [1, 1, 0],\n                    [0, 0, 0]\n                ],\n                [\n                    [1, 0, 0],\n                    [1, 1, 0],\n                    [0, 1, 0]\n                ]\n            ],\n            [\n                [\n                    [1, 1, 1],\n                    [1, 0, 0],\n                    [0, 0, 0]\n                ],\n                [\n                    [0, 1, 1],\n                    [0, 0, 1],\n                    [0, 0, 1]\n                ],\n                [\n                    [0, 0, 0],\n                    [0, 0, 1],\n                    [1, 1, 1]\n                ],\n                [\n                    [1, 0, 0],\n                    [1, 0, 0],\n                    [1, 1, 0]\n                ]\n            ],\n            [\n                [\n                    [1, 1, 1],\n                    [0, 0, 1],\n                    [0, 0, 0]\n                ],\n                [\n                    [0, 0, 1],\n                    [0, 0, 1],\n                    [0, 1, 1]\n                ],\n                [\n                    [0, 0, 0],\n                    [1, 0, 0],\n                    [1, 1, 1]\n                ],\n                [\n                    [1, 1, 0],\n                    [1, 0, 0],\n                    [1, 0, 0]\n                ]\n            ],\n            [\n                [\n                    [0, 0, 0],\n                    [0, 1, 1],\n                    [0, 1, 1]\n                ],\n                [\n                    [0, 0, 0],\n                    [0, 1, 1],\n                    [0, 1, 1]\n                ],\n                [\n                    [0, 0, 0],\n                    [0, 1, 1],\n                    [0, 1, 1]\n                ],\n                [\n                    [0, 0, 0],\n                    [0, 1, 1],\n                    [0, 1, 1]\n                ]\n            ],\n            [\n                [\n                    [1, 1, 1],\n                    [0, 1, 0],\n                    [0, 0, 0]\n                ],\n                [\n                    [0, 0, 1],\n                    [0, 1, 1],\n                    [0, 0, 1]\n                ],\n                [\n                    [0, 0, 0],\n                    [0, 1, 0],\n                    [1, 1, 1]\n                ],\n                [\n                    [1, 0, 0],\n                    [1, 1, 0],\n                    [1, 0, 0]\n                ]\n            ],\n            [\n                [\n                    [0, 1, 0],\n                    [0, 1, 0],\n                    [0, 1, 0]\n\n                ],\n                [\n                    [0, 0, 0],\n                    [1, 1, 1],\n                    [0, 0, 0]\n\n                ],\n                [\n                    [0, 1, 0],\n                    [0, 1, 0],\n                    [0, 1, 0]\n                ],\n                [\n                    [0, 0, 0],\n                    [1, 1, 1],\n                    [0, 0, 0]\n                ]\n            ],\n            [\n                [\n                    [1, 1, 0],\n                    [0, 1, 1],\n                    [0, 0, 0]\n                ],\n                [\n                    [0, 0, 1],\n                    [0, 1, 1],\n                    [0, 1, 0]\n                ],\n                [\n                    [0, 0, 0],\n                    [1, 1, 0],\n                    [0, 1, 1]\n                ],\n                [\n                    [0, 1, 0],\n                    [1, 1, 0],\n                    [1, 0, 0]\n                ]\n            ]\n\n        ]    #方块数组\n        # 行和列\n        self.rows &#x3D; 20\n        self.cols &#x3D; 10\n        for i in range(0, self.rows):\n            self.back.insert(i, list())\n            self.gridBack.insert(i, list())\n        for i in range(0, self.rows):\n            for j in range(0, self.cols):\n                self.back[i].insert(j, 0)\n                self.gridBack[i].insert(j, self.canvas.create_rectangle(30 * j, 30 * i, 30 * (j + 1), 30 * (i + 1),\n                                                                        fill&#x3D;&quot;red&quot;))\n        for i in range(0, 3):\n            self.preBack.insert(i, list())\n\n        for i in range(0, 3):\n\n            for j in range(0, 3):\n                self.preBack[i].insert(j, self.canvas1.create_rectangle(30 * j, 30 * i, 30 * (j + 1), 30 * (i + 1),\n                                                                        fill&#x3D;&quot;red&quot;))\n    # 绘制游戏的格子\n    def drawRect(self):\n        for i in range(0, self.rows):\n            for j in range(0, self.cols):\n                if self.back[i][j] &#x3D;&#x3D; 1:\n                    self.canvas.itemconfig(self.gridBack[i][j], fill&#x3D;&quot;purple&quot;, outline&#x3D;&quot;white&quot;)\n                elif self.back[i][j] &#x3D;&#x3D; 0:\n                    self.canvas.itemconfig(self.gridBack[i][j], fill&#x3D;&quot;black&quot;, outline&#x3D;&quot;white&quot;)\n\n        # 绘制预览方块\n        for i in range(0, len(self.arr1)):\n            for j in range(0, len(self.arr1[i])):\n                if self.arr1[i][j] &#x3D;&#x3D; 0:\n                    self.canvas1.itemconfig(self.preBack[i][j], fill&#x3D;&quot;black&quot;, outline&#x3D;&quot;white&quot;)\n                elif self.arr1[i][j] &#x3D;&#x3D; 1:\n                    self.canvas1.itemconfig(self.preBack[i][j], fill&#x3D;&quot;orange&quot;, outline&#x3D;&quot;white&quot;)\n\n        # 绘制当前正在运动的方块\n        if self.curRow !&#x3D; -10 and self.curCol !&#x3D; -10:\n            for i in range(0, len(self.arr)):\n                for j in range(0, len(self.arr[i])):\n                    if self.arr[i][j] &#x3D;&#x3D; 1:\n                        self.canvas.itemconfig(self.gridBack[self.curRow + i][self.curCol + j], fill&#x3D;&quot;blue&quot;,\n                                               outline&#x3D;&quot;white&quot;)\n\n        # 判断方块是否已经运动到达底部\n        if self.isDown:\n            for i in range(0, 3):\n                for j in range(0, 3):\n                    if self.arr[i][j] !&#x3D; 0:\n                        self.back[self.curRow + i][self.curCol + j] &#x3D; self.arr[i][j]\n\n            # 判断整行消除\n            self.removeRow()\n            # 判断是否死了\n            self.isDead()\n            # 获得下一个方块\n            self.getCurBrick()\n\n    # 判断是否有整行需要消除\n    def removeRow(self):\n        count &#x3D; 0\n        for i in range(0, self.rows):\n            tag1 &#x3D; True\n            for j in range(0, self.cols):\n                if self.back[i][j] &#x3D;&#x3D; 0:\n                    tag1 &#x3D; False\n                    break\n            if tag1 &#x3D;&#x3D; True:\n                # 从上向下挪动\n                count &#x3D; count + 1\n                for m in range(i - 1, 0, -1):\n                    for n in range(0, self.cols):\n                        self.back[m + 1][n] &#x3D; self.back[m][n]\n\n        scoreValue &#x3D; eval(self.scoreLabel2[&#39;text&#39;])\n        scoreValue +&#x3D; 5 * count * (count + 3)\n        self.scoreLabel2.config(text&#x3D;str(scoreValue))\n\n    # 获得当前的方块\n    def getCurBrick(self):\n        if(not self.curBrick):\n            self.curBrick &#x3D; randint(0, len(self.brick) - 1)\n            self.nextBrick &#x3D; randint(0, len(self.brick) - 1)\n        else:\n            self.curBrick &#x3D; self.nextBrick\n            self.nextBrick &#x3D; randint(0, len(self.brick) - 1)\n        self.shape &#x3D; 0\n        # 当前方块数组\n        self.arr &#x3D; self.brick[self.curBrick][self.shape]\n        self.arr1 &#x3D; self.brick[self.nextBrick][self.shape]\n\n        self.curRow &#x3D; 0\n        self.curCol &#x3D; 1\n\n        # 是否到底部为False\n        self.isDown &#x3D; False\n\n# 监听键盘输入\n\n    def onKeyboardEvent(self, event):\n        # 未开始，不必监听键盘输入\n        if self.start &#x3D;&#x3D; False:\n            return\n        if self.isPause &#x3D;&#x3D; True:\n            return\n\n        # 记录原来的值\n        tempCurCol &#x3D; self.curCol\n        tempCurRow &#x3D; self.curRow\n        tempShape &#x3D; self.shape\n        tempArr &#x3D; self.arr\n        direction &#x3D; -1\n\n        if event.keycode &#x3D;&#x3D; 37:\n            # 左移\n            self.curCol -&#x3D; 1\n            direction &#x3D; 1\n        elif event.keycode &#x3D;&#x3D; 38:\n            # 变化方块的形状\n            self.shape +&#x3D; 1\n            direction &#x3D; 2\n            if self.shape &gt;&#x3D; 4:\n                self.shape &#x3D; 0\n            self.arr &#x3D; self.brick[self.curBrick][self.shape]\n        elif event.keycode &#x3D;&#x3D; 39:\n            direction &#x3D; 3\n            # 右移\n            self.curCol +&#x3D; 1\n        elif event.keycode &#x3D;&#x3D; 40:\n            direction &#x3D; 4\n            # 下移\n            self.curRow +&#x3D; 1\n        if self.isEdge(direction) &#x3D;&#x3D; False:\n            self.curCol &#x3D; tempCurCol\n            self.curRow &#x3D; tempCurRow\n            self.shape &#x3D; tempShape\n            self.arr &#x3D; tempArr\n\n        self.drawRect()\n\n        return True\n\n    # 判断当前方块是否到达边界\n    def isEdge(self, direction):\n        tag &#x3D; True\n        # 向左，判断边界\n        if direction &#x3D;&#x3D; 1:\n            for i in range(0, 3):\n                for j in range(0, 3):\n                    if self.arr[j][i] !&#x3D; 0 and (\n                            self.curCol + i &lt; 0 or self.back[self.curRow + j][self.curCol + i] !&#x3D; 0):\n                        tag &#x3D; False\n                        break\n                        # 向右，判断边界\n        elif direction &#x3D;&#x3D; 3:\n            for i in range(0, 3):\n                for j in range(0, 3):\n                    if self.arr[j][i] !&#x3D; 0 and (\n                            self.curCol + i &gt;&#x3D; self.cols or self.back[self.curRow + j][self.curCol + i] !&#x3D; 0):\n                        tag &#x3D; False\n                        break\n                        # 向下，判断底部\n        elif direction &#x3D;&#x3D; 4:\n            for i in range(0, 3):\n                for j in range(0, 3):\n                    if self.arr[i][j] !&#x3D; 0 and (\n                            self.curRow + i &gt;&#x3D; self.rows or self.back[self.curRow + i][self.curCol + j] !&#x3D; 0):\n                        tag &#x3D; False\n                        self.isDown &#x3D; True\n                        break\n                        # 进行变形，判断边界\n        elif direction &#x3D;&#x3D; 2:\n            if self.curCol &lt; 0:\n                self.curCol &#x3D; 0\n            if self.curCol + 2 &gt;&#x3D; self.cols:\n                self.curCol &#x3D; self.cols - 3\n            if self.curRow + 2 &gt;&#x3D; self.rows:\n                self.curRow &#x3D; self.curRow - 3\n\n        return tag\n\n        # 方块向下移动\n\n    def brickDown(self):\n        # 是否开始\n        self.start &#x3D; True\n\n        while True:\n\n            if self.start &#x3D;&#x3D; False:\n                print(&quot;exit thread&quot;)\n                break\n            if self.isPause &#x3D;&#x3D; False:\n                tempRow &#x3D; self.curRow\n                self.curRow +&#x3D; 1\n\n                if self.isEdge(4) &#x3D;&#x3D; False:\n                    self.curRow &#x3D; tempRow\n\n                self.drawRect()\n\n                # 每一秒下降一格\n                sleep(1)\n\n                # 点击开始\n\n    def clickStart(self):\n        self.start &#x3D; True\n        for i in range(0, self.rows):\n            for j in range(0, self.cols):\n                self.back[i][j] &#x3D; 0\n                self.canvas.itemconfig(self.gridBack[i][j], fill&#x3D;&quot;black&quot;, outline&#x3D;&quot;white&quot;)\n        for i in range(0, len(self.arr)):\n            for j in range(0, len(self.arr[i])):\n                self.canvas1.itemconfig(self.preBack[i][j], fill&#x3D;&quot;black&quot;, outline&#x3D;&quot;white&quot;)\n\n        self.getCurBrick()\n        self.drawRect()\n        self.downThread &#x3D; threading.Thread(target&#x3D;self.brickDown, args&#x3D;())\n        self.downThread.start()\n\n    def clickReStart(self):\n        ackRestart &#x3D; askquestion(&quot;remake！好耶！&quot;, &quot;光速重开?&quot;)\n        if ackRestart &#x3D;&#x3D; &#39;yes&#39;:\n            self.clickStart()\n        else:\n            return\n\n\n    # 判断是否死了\n    def isDead(self):\n        for j in range(0, len(self.back[0])):\n            if self.back[0][j] !&#x3D; 0:\n                showinfo(&quot;寄！&quot;, &quot;鉴定为：\\n建议重开&quot;)\n                self.start &#x3D; False\n                break\n                # 运行\n\nControlfrom tkinter import *\nfrom random import *\nimport threading\nfrom tkinter.messagebox import showinfo\nfrom tkinter.messagebox import askquestion\nimport threading\nfrom time import sleep\nfrom Model import *\nfrom View import *\n#from benshouView import *\nclass Ctrl(Model,View):\n\n    def __init__(self):\n        Model.__init__(self)\n        View.__init__(self)\n\n    def rungame(self):\n        self.init()\n\n        # 获得当前的方块\n        self.getCurBrick()\n\n        # 按照数组，绘制格子\n        self.drawRect()\n\n        self.canvas.pack()\n\n        self.canvas1.pack()\n\n        # 监听键盘事件\n        self.window.bind(&quot;&lt;KeyPress&gt;&quot;, self.onKeyboardEvent)\n\n        # 启动方块下落线程\n        self.downThread &#x3D; threading.Thread(target&#x3D;self.brickDown, args&#x3D;())\n        self.downThread.start()\n\n        self.window.mainloop()\n\n        self.start &#x3D; False\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    use &#x3D; Ctrl()\n    use.rungame()\n","slug":"俄罗斯方块","date":"2022-11-03T14:41:49.000Z","categories_index":"信管","tags_index":"python","author_index":"Algernon"},{"id":"15c6023f64ef1e6727ffc77c5b7783db","title":"【计算与人工智能概论】（进阶）","content":"算法思维方程求根二分法画图猜f(x)=0的大概范围[a,b]再缩小范围，保证f(a)f(b)&lt;0,在[a,b]上一定有实根。\n中点x0=a+(b-a)/2=(a+b)/2  即两端值和的一半。若中点与右端符号相同(如左图)，则缩小到[a,x0]。若中点与左端符号相同(如右图)，则缩小到[x0,b],依次得到不断减半的区间。最终区间[an,bn]的长度=(b-a)/2n,称为解方程的二分法。\n算法流程：\n\n画图得到根初始区间left=1,right=2，f(left)f(right)&lt;0\n计算中点middle,及中间f(middle)\n当|f(middle)|&gt;=error时： 如果f(middle)与f(left)的符号相同，则解在[中,右]，否则解在[左,中]。相应改变区间。\n计算中点middle，及f(middle)\n回到第3步\n\n\n#例1：求x2-2&#x3D;0的根，即求2的平方根\ndef f(x):  return x**2-2\nleft&#x3D;1;right&#x3D;2;n&#x3D;0#n用来统计二分次数\nerr&#x3D;1e-6#误差\nwhile True:\n    n+&#x3D;1; middle&#x3D;(left+right)*0.5\n    if abs(f(middle))&lt;err:\n        print(&#39;f(x)&#x3D;%.8f x&#x3D;%.8f n&#x3D;%d&#39;%(f(middle),middle,n)) \n        break\n    if f(middle)*f(left)&gt;0:  left&#x3D;middle #中点变为左边界\n    else: right&#x3D;middle #中点变为右边界\n\n\n\n\n\n\n\n\n\n\nf(x)=0.00000027 x=1.41421366 n=21\n牛顿迭代法注意，如果初值选取不当，可能越过根（漏掉根），尽量依据绘图，选取根附近的点作为初始点。\n算法流程：\n\n画图得到根的初始值x\n求出函数的导数，计算f(x), f’(x) 。\n当|f(x)|&gt;=err时，重复以下：   x=x-f(x)/f’(x)   计算f(x), f’(x)#例1：求x2-2&#x3D;0的根，即求2的平方根\ndef f(x):\n    return x ** 2 -2\ndef df(x):\n    return x * 2 \nx&#x3D;4;err&#x3D;1e-6;n&#x3D;0\nwhile True:\n    if abs(f(x))&lt;err:\n        print(&#39;fx&#x3D;%.8f x&#x3D;%.8f n&#x3D;%d&#39;%(f(x),x,n))\n        break\n    x&#x3D;x-f(x)&#x2F;df(x) #\n    n+&#x3D;1\n\n\n\n\n\n\n\n\n\n\n\nfx=0.00000000 x=1.41421356 n=5\n离散Newton法离散Newton法，亦称割线法。（1）画图得到根附近的一对值，x0,x1（2）计算 f0=f(x0),f1=f(x1)（3）当|f(x0)|&gt;=err 时：            x=x1-f(x1)*(x1-x0)/(f(x1)-f(x0))            x0=x1         x1=xf0=f1f1=f(x1)\n\n#例1：求x2-2&#x3D;0的根，即求2的平方根\nx0&#x3D;1;x1&#x3D;2;err&#x3D;1e-6;n&#x3D;0\ndef f(x):\n    return x**2-2\nwhile True:\n    if f(x1)-f(x0)&#x3D;&#x3D;0:\n        print(&#39;False&#39;)\n        break\n    x&#x3D;x1-f(x1)&#x2F;(f(x1)-f(x0))*(x1-x0)\n    n+&#x3D;1\n    if abs(f(x))&lt;err:\n        print(&#39;fx&#x3D;%.8f x&#x3D;%.8f n&#x3D;%d&#39;%(f(x),x,n))\n        break\n    x0&#x3D;x1\n    x1&#x3D;x\n\n\n\n\n\n\n\n\n\nfx=-0.00000000 x=1.41421356 n=5\n函数求最值(梯度下降法)梯度下降法，一元函数求函数最值是应用数学最重要的任务之一。\n梯度下降法是最早最简单，也是最为常用的最优化方法。大部分的机器学习算法的本质都是先建立初始模型，然后通过最优化方法对目标函数(损失函数)进行优化，从而训练出最好的模型。\n梯度下降法(亦称最速下降法)与Newton迭代法的相似之处在于都利用了函数求导。\n梯度下降法：找到f’(x)=0的点然而，在实际问题中，方程f’(x)=0通常不容易求解，特别是当有多个自变量时。梯度下降法不直接求方程f’(x)=0的解，而是通过逐步改变x值进行摸索，从而找出函数的最小值。为了找到函数的最小值处，只要让函数值朝着梯度方向的反方向(下降)走一小步，再求出此处的梯度方向，继续往梯度方向的反方向走一小步，如此往复，就能找到函数的最小值。\n算法流程：\n\n随机生成初始x值\n循环迭代max_iters次   当|f’(x)|&lt;err时,跳出循环   x=x-f’(x)*learning_rate\n\n#例2：求函数y&#x3D;x2-10x-30  的最小值\nimport numpy as np\nnp.random.seed(3)\nx&#x3D;np.random.randn();learning_rate&#x3D;0.1\nerr&#x3D;0.000001;max_iters&#x3D;10000 \ndef f(x):  return x**2-10*x-30   \ndef df(x):  return 2*x-10\nfor i in range(max_iters):\n    print(&quot;第 %d 次迭代：x&#x3D;%.8f y&#x3D;%.8f&quot;%(i,x,f(x))) \n    if abs(df(x)) &lt;err:      break \n    x&#x3D;x-df(x) * learning_rate#xk+1&#x3D;xk- η* f’(xk)  (迭代公式)\n\n第 0 次迭代：x&#x3D;1.78862847 y&#x3D;-44.68709292\n第 1 次迭代：x&#x3D;2.43090278 y&#x3D;-48.39973947\n第 2 次迭代：x&#x3D;2.94472222 y&#x3D;-50.77583326\n第 3 次迭代：x&#x3D;3.35577778 y&#x3D;-52.29653329\n第 4 次迭代：x&#x3D;3.68462222 y&#x3D;-53.26978130\n第 5 次迭代：x&#x3D;3.94769778 y&#x3D;-53.89266003\n第 6 次迭代：x&#x3D;4.15815822 y&#x3D;-54.29130242\n第 7 次迭代：x&#x3D;4.32652658 y&#x3D;-54.54643355\n第 8 次迭代：x&#x3D;4.46122126 y&#x3D;-54.70971747\n第 9 次迭代：x&#x3D;4.56897701 y&#x3D;-54.81421918\n第 10 次迭代：x&#x3D;4.65518161 y&#x3D;-54.88110028\n第 11 次迭代：x&#x3D;4.72414529 y&#x3D;-54.92390418\n第 12 次迭代：x&#x3D;4.77931623 y&#x3D;-54.95129867\n第 13 次迭代：x&#x3D;4.82345298 y&#x3D;-54.96883115\n第 14 次迭代：x&#x3D;4.85876239 y&#x3D;-54.98005194\n第 15 次迭代：x&#x3D;4.88700991 y&#x3D;-54.98723324\n第 16 次迭代：x&#x3D;4.90960793 y&#x3D;-54.99182927\n第 17 次迭代：x&#x3D;4.92768634 y&#x3D;-54.99477073\n第 18 次迭代：x&#x3D;4.94214907 y&#x3D;-54.99665327\n第 19 次迭代：x&#x3D;4.95371926 y&#x3D;-54.99785809\n第 20 次迭代：x&#x3D;4.96297541 y&#x3D;-54.99862918\n第 21 次迭代：x&#x3D;4.97038033 y&#x3D;-54.99912267\n第 22 次迭代：x&#x3D;4.97630426 y&#x3D;-54.99943851\n第 23 次迭代：x&#x3D;4.98104341 y&#x3D;-54.99964065\n第 24 次迭代：x&#x3D;4.98483473 y&#x3D;-54.99977001\n第 25 次迭代：x&#x3D;4.98786778 y&#x3D;-54.99985281\n第 26 次迭代：x&#x3D;4.99029423 y&#x3D;-54.99990580\n第 27 次迭代：x&#x3D;4.99223538 y&#x3D;-54.99993971\n第 28 次迭代：x&#x3D;4.99378830 y&#x3D;-54.99996141\n第 29 次迭代：x&#x3D;4.99503064 y&#x3D;-54.99997531\n第 30 次迭代：x&#x3D;4.99602451 y&#x3D;-54.99998420\n第 31 次迭代：x&#x3D;4.99681961 y&#x3D;-54.99998989\n第 32 次迭代：x&#x3D;4.99745569 y&#x3D;-54.99999353\n第 33 次迭代：x&#x3D;4.99796455 y&#x3D;-54.99999586\n第 34 次迭代：x&#x3D;4.99837164 y&#x3D;-54.99999735\n第 35 次迭代：x&#x3D;4.99869731 y&#x3D;-54.99999830\n第 36 次迭代：x&#x3D;4.99895785 y&#x3D;-54.99999891\n第 37 次迭代：x&#x3D;4.99916628 y&#x3D;-54.99999930\n第 38 次迭代：x&#x3D;4.99933302 y&#x3D;-54.99999956\n第 39 次迭代：x&#x3D;4.99946642 y&#x3D;-54.99999972\n第 40 次迭代：x&#x3D;4.99957314 y&#x3D;-54.99999982\n第 41 次迭代：x&#x3D;4.99965851 y&#x3D;-54.99999988\n第 42 次迭代：x&#x3D;4.99972681 y&#x3D;-54.99999993\n第 43 次迭代：x&#x3D;4.99978145 y&#x3D;-54.99999995\n第 44 次迭代：x&#x3D;4.99982516 y&#x3D;-54.99999997\n第 45 次迭代：x&#x3D;4.99986013 y&#x3D;-54.99999998\n第 46 次迭代：x&#x3D;4.99988810 y&#x3D;-54.99999999\n第 47 次迭代：x&#x3D;4.99991048 y&#x3D;-54.99999999\n第 48 次迭代：x&#x3D;4.99992838 y&#x3D;-54.99999999\n第 49 次迭代：x&#x3D;4.99994271 y&#x3D;-55.00000000\n第 50 次迭代：x&#x3D;4.99995417 y&#x3D;-55.00000000\n第 51 次迭代：x&#x3D;4.99996333 y&#x3D;-55.00000000\n第 52 次迭代：x&#x3D;4.99997067 y&#x3D;-55.00000000\n第 53 次迭代：x&#x3D;4.99997653 y&#x3D;-55.00000000\n第 54 次迭代：x&#x3D;4.99998123 y&#x3D;-55.00000000\n第 55 次迭代：x&#x3D;4.99998498 y&#x3D;-55.00000000\n第 56 次迭代：x&#x3D;4.99998798 y&#x3D;-55.00000000\n第 57 次迭代：x&#x3D;4.99999039 y&#x3D;-55.00000000\n第 58 次迭代：x&#x3D;4.99999231 y&#x3D;-55.00000000\n第 59 次迭代：x&#x3D;4.99999385 y&#x3D;-55.00000000\n第 60 次迭代：x&#x3D;4.99999508 y&#x3D;-55.00000000\n第 61 次迭代：x&#x3D;4.99999606 y&#x3D;-55.00000000\n第 62 次迭代：x&#x3D;4.99999685 y&#x3D;-55.00000000\n第 63 次迭代：x&#x3D;4.99999748 y&#x3D;-55.00000000\n第 64 次迭代：x&#x3D;4.99999798 y&#x3D;-55.00000000\n第 65 次迭代：x&#x3D;4.99999839 y&#x3D;-55.00000000\n第 66 次迭代：x&#x3D;4.99999871 y&#x3D;-55.00000000\n第 67 次迭代：x&#x3D;4.99999897 y&#x3D;-55.00000000\n第 68 次迭代：x&#x3D;4.99999917 y&#x3D;-55.00000000\n第 69 次迭代：x&#x3D;4.99999934 y&#x3D;-55.00000000\n第 70 次迭代：x&#x3D;4.99999947 y&#x3D;-55.00000000\n第 71 次迭代：x&#x3D;4.99999958 y&#x3D;-55.00000000\n\n\n梯度下降法，二元函数几何含义：梯度下降法如同人们每走一步都沿着当前最陡的方向下山。梯度下降法的迭代公式如下：\n案例：给定一个二元函数f(x,y)= - exp(x-y)*(x2-2y*2)，用梯度下降法求其在x&lt;0,y&lt;0范围上的极小值\n\n梯度下降法x、y初值设置。案例描述中要求在x&lt;0,y&lt;0区域内寻找函数最小值，因此初值可以设置为两个负数，本例初值设置：x=-1, y=-1, 也可以尝试设置为其它负数值。\n梯度下降法学习率的设置。可以先设置为0.1,如果效果不理想再进行微调。\n梯度下降法循环迭代终止设置。循环的终止方式可以有多种。一种是直接迭代一个较大的循环次数，直到循环自然终止。一种效率更高的方式是判断函数导数值与0值的差异，当差异足够小时（达到一定精度要求时）用break语句跳出循环。还可以根据连续两轮或多轮迭代x值的改变以及y值的改变达到某个微小值以内，认为迭代趋于稳定而跳出循环。或者根据函数值减小的幅度达到某个微小值以内，认为迭代趋于稳定；等等。本例采用第一种和第二种方式的结合：给一个较大的迭代次数10000次（也可以设置得更大）；为了提高代码效率，在循环体内判断当前函数的两个偏导数值是否接近0，误差设置为0.000001（根据实际情况设置，该值可调），满足条件就跳出循环。\n函数和两个偏导函数的函数自定义\n构造循环结构，利用梯度下降法的x和y值迭代公式进行迭代。输出最终结果。\n\nimport numpy as np\nx&#x3D;-1;y&#x3D;-1\nlearning_rate&#x3D;0.1\nerr&#x3D;0.000001;max_iters&#x3D;10000 \ndef f(x,y):\n    return -np.exp(x-y)*(x**2-2*y**2)\ndef dx(x,y):\n    return -(np.exp(x-y)*(2*x)+(x**2-2*y**2)*np.exp(x-y))\ndef dy(x,y):\n    return -(np.exp(x-y)*(-4*y)+(x**2-2*y**2)*np.exp(x-y)*(-1))\nfor t in range(max_iters):\n    if t%100&#x3D;&#x3D;0:\n        print(&quot;Iter %d, x&#x3D;%.8f,y&#x3D;%.8f,z&#x3D;%.8f,dx&#x3D;%.8f,dy&#x3D;%.8f&quot;%(t,x,y,f(x,y),dx(x,y),dy(x,y)))\n    if abs(dx(x,y))&lt;err and abs(dy(x,y))&lt;err:\n        print(&quot;Iter %d, x&#x3D;%.8f,y&#x3D;%.8f,z&#x3D;%.8f,dx&#x3D;%.8f,dy&#x3D;%.8f&quot;%(t,x,y,f(x,y),dx(x,y),dy(x,y)))\n        break\n    x&#x3D;x-learning_rate*dx(x,y); y&#x3D;y-learning_rate*dy(x,y)  #迭代公式‘\nIter 0, x&#x3D;-1.00000000,y&#x3D;-1.00000000,z&#x3D;1.00000000,dx&#x3D;3.00000000,dy&#x3D;-5.00000000\nIter 100, x&#x3D;-3.09175581,y&#x3D;-1.37866718,z&#x3D;-1.03812484,dx&#x3D;0.07681195,dy&#x3D;0.04378580\nIter 200, x&#x3D;-3.58508879,y&#x3D;-1.71467625,z&#x3D;-1.07420439,dx&#x3D;0.03043384,dy&#x3D;0.01755166\nIter 300, x&#x3D;-3.79630426,y&#x3D;-1.85967410,z&#x3D;-1.08071845,dx&#x3D;0.01405238,dy&#x3D;0.00814006\nIter 400, x&#x3D;-3.89691917,y&#x3D;-1.92893257,z&#x3D;-1.08218878,dx&#x3D;0.00690599,dy&#x3D;0.00400866\nIter 500, x&#x3D;-3.94708386,y&#x3D;-1.96350427,z&#x3D;-1.08255344,dx&#x3D;0.00349371,dy&#x3D;0.00203005\nIter 600, x&#x3D;-3.97264220,y&#x3D;-1.98112811,z&#x3D;-1.08264800,dx&#x3D;0.00179285,dy&#x3D;0.00104229\nIter 700, x&#x3D;-3.98580483,y&#x3D;-1.99020700,z&#x3D;-1.08267306,dx&#x3D;0.00092669,dy&#x3D;0.00053889\nIter 800, x&#x3D;-3.99262086,y&#x3D;-1.99490901,z&#x3D;-1.08267978,dx&#x3D;0.00048077,dy&#x3D;0.00027961\nIter 900, x&#x3D;-3.99616039,y&#x3D;-1.99735092,z&#x3D;-1.08268159,dx&#x3D;0.00024990,dy&#x3D;0.00014535\nIter 1000, x&#x3D;-3.99800112,y&#x3D;-1.99862089,z&#x3D;-1.08268208,dx&#x3D;0.00013003,dy&#x3D;0.00007563\nIter 1100, x&#x3D;-3.99895913,y&#x3D;-1.99928185,z&#x3D;-1.08268222,dx&#x3D;0.00006769,dy&#x3D;0.00003937\nIter 1200, x&#x3D;-3.99945792,y&#x3D;-1.99962599,z&#x3D;-1.08268225,dx&#x3D;0.00003525,dy&#x3D;0.00002050\nIter 1300, x&#x3D;-3.99971766,y&#x3D;-1.99980520,z&#x3D;-1.08268226,dx&#x3D;0.00001836,dy&#x3D;0.00001068\nIter 1400, x&#x3D;-3.99985294,y&#x3D;-1.99989854,z&#x3D;-1.08268226,dx&#x3D;0.00000956,dy&#x3D;0.00000556\nIter 1500, x&#x3D;-3.99992340,y&#x3D;-1.99994715,z&#x3D;-1.08268227,dx&#x3D;0.00000498,dy&#x3D;0.00000290\nIter 1600, x&#x3D;-3.99996010,y&#x3D;-1.99997247,z&#x3D;-1.08268227,dx&#x3D;0.00000259,dy&#x3D;0.00000151\nIter 1700, x&#x3D;-3.99997922,y&#x3D;-1.99998566,z&#x3D;-1.08268227,dx&#x3D;0.00000135,dy&#x3D;0.00000079\nIter 1747, x&#x3D;-3.99998471,y&#x3D;-1.99998945,z&#x3D;-1.08268227,dx&#x3D;0.00000099,dy&#x3D;0.00000058\n\n数据拟合 数据拟合(梯度下降法)\n测量所得的数据一般都有一定的误差，如何从大量测量所得的数据点中找出数据服从的一般规律性，即找出一个函数来刻画数据点的分布，可以称为数据的函数拟合。拟合好的函数，可以用来对新的测量数据进行预测。\n线性拟合给定呈线性分布的100个点，用梯度下降法求出其隐含的线性函数。已知这100个数据点分布如下图的蓝色小圆点所示，目测服从线性分布，现在请用梯度下降法找出能够较好拟合这100个数据点的未知线性函数y=ax+b(如图中的蓝色线条所示),求出a和b值。\n\n梯度下降法a,b初值设置。本例用随机函数为a,b产生一个随机初值。\n梯度下降法学习率的设置。可以先设置为0.1,如果效果不理想再进行微调。\n误差计算。为了观察误差是否随着a,b值的调整，逐步在变小，需要对给定的a,b值，计算这100个样本点的平均误差。\n构造循环结构，利用梯度下降法的迭代公式对a,b进行迭代。输出最终结果。为了能够更好的理解线性拟合的本质，本例采用模拟数据点，随机生成100个数据点对，这些数据点服从线性分布，真实线性函数是y=3x+15(图中蓝色线), x坐标值为(0,2)的均匀分布，为了模拟测量数据中的测量误差，这里为每个对应的y坐标值增加一个标准正态分布的扰动。\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n#生成100个数据点\nnp.random.seed(3)\nX&#x3D;2*np.random.rand(100)#生成100个随机数，模拟x\nY&#x3D;15+3*X+np.random.randn(100)#生成100个随机数，模拟y，真实的a&#x3D;3,b&#x3D;15\nlearning_rate&#x3D;0.1; roundN &#x3D; 5#对数据点集的轮数\nnp.random.seed(3); a&#x3D;np.random.randn()\nnp.random.seed(4) ;b&#x3D;np.random.randn()\ndef errorCompute(a,b):\n    error&#x3D;0\n    for j in range(len(X)):\n        error+&#x3D;1&#x2F;2*(a*X[j]+b-Y[j])**2\n    return error&#x2F;len(X)\nfor i in range(roundN):\n    for j in range(len(X)):\n        if j%50&#x3D;&#x3D;0:\n            print(&quot;round&#x3D;%d,iter&#x3D;%d,a&#x3D;%f,b&#x3D;%f,E&#x3D;%f&quot;%(i,j,a,b,errorCompute(a,b)))\n        gradA&#x3D;(a*X[j]+b-Y[j])*X[j]; gradB&#x3D;a*X[j]+b-Y[j]  #求偏导的公式\n        a&#x3D;a-learning_rate*gradA; b&#x3D;b-learning_rate*gradB  #迭代公式\n\n#下面绘制图形\nmaxX&#x3D;max(X); minX&#x3D;min(X); maxY&#x3D;max(Y); minY&#x3D;min(Y)\nX_fit&#x3D;np.arange(minX,maxX,0.01); Y_fit&#x3D;a*X_fit+b\nplt.plot(X,Y,&#39;.&#39;)#数据点\nplt.plot(X_fit,Y_fit,&#39;r-&#39;,label&#x3D;&#39;Gradient Descent&#39;)\nplt.plot(X_fit,15+3*X_fit,&#39;b-&#39;,label&#x3D;&#39;True&#39;)\nplt.legend()\nplt.show()\n\n\nround&#x3D;0,iter&#x3D;0,a&#x3D;1.788628,b&#x3D;0.050562,E&#x3D;129.724642\nround&#x3D;0,iter&#x3D;50,a&#x3D;7.157349,b&#x3D;11.162271,E&#x3D;2.998449\nround&#x3D;1,iter&#x3D;0,a&#x3D;4.984254,b&#x3D;13.194898,E&#x3D;1.066988\nround&#x3D;1,iter&#x3D;50,a&#x3D;4.116652,b&#x3D;14.082373,E&#x3D;0.661608\nround&#x3D;2,iter&#x3D;0,a&#x3D;3.513805,b&#x3D;14.893728,E&#x3D;0.563870\nround&#x3D;2,iter&#x3D;50,a&#x3D;3.253854,b&#x3D;14.910921,E&#x3D;0.449889\nround&#x3D;3,iter&#x3D;0,a&#x3D;3.096573,b&#x3D;15.375762,E&#x3D;0.541890\nround&#x3D;3,iter&#x3D;50,a&#x3D;3.009039,b&#x3D;15.146017,E&#x3D;0.426155\nround&#x3D;4,iter&#x3D;0,a&#x3D;2.978185,b&#x3D;15.512537,E&#x3D;0.545377\nround&#x3D;4,iter&#x3D;50,a&#x3D;2.939574,b&#x3D;15.212725,E&#x3D;0.422347\n\nBP神经网络数据拟合部分的案例都是预先假设了数据隐含的函数分布的形式，使用梯度下降法求出其参数，但通常我们并不知道数据隐含的分布函数是线性还是多项式或者是其他函数形式，因此上面的应用也是非常有限，神经网络的出现打破了这一僵局。\n 理论上已证明，具有一个隐含层的三层网络可以逼近任意非线性函数，即一个输入层、一个隐含层、一个输出层可以近似表示任意非线性函数。\nBP神经网络是现今多种深度学习网络的基础组成部分，对BP神经网络的了解有助于帮助理解更多更复杂的深度学习网络，BP神经网络正是利用梯度下降法来寻求合适的参数值使得其误差函数最小化。\nBP神经网络可以解决回归问题和分类问题。简单来讲，回归问题相当于预测值是连续的数字类型（例如房屋价格预测，股票值预测等等），而分类问题可以看成预测值是离散值类型（例如，物种类别，猫，狗，牛等等）。下面从最简单的三层BP神经网络的回归任务开始阐明BP神经网络结构及其学习原理，其结构图如下：隐藏层神经元zj值的计算原理是对每个输入x1,….,xI进行加权求和之后加入偏置bj得到（类似于我们构造一元线性函数时采用y=kx+b的方式，这里是扩展为多元线性函数的构造）。这里权重w上的上标(1)是为了和后面构造输出层神经元值时的w区分开来。每个隐藏层神经元对应I个权重参数w, 共有J个隐藏神经单元，因此共有IJ个参数，将其看成一个J行I列的权重矩阵，另外还有J个偏置b, 所以隐藏层的参数个数共有J(I+1)个，这些参数的初始值可用随机函数获得。梯度下降法就是对这些参数进行迭代更新的方法，目标是最小化误差函数。其图示如下：Sigmoid函数可以使得任何输入值z转换到输出值0~1之间。且其导数值非常方便计算：σ’ (z)=σ(z)(1-σ(z))   \n如果为这J(I+1)+ J+1个参数分别都给一个随机值，对于一个有确定值的输入样本(x1,x2,…,xi,…,xI)，可以得到一个预测值y。可以想象，这个预测值y和该样本对应的真实值t之间肯定有差异，这个差异我们称为误差，因此误差函数可以用如下公式表示：如何调整这J(I+1)+ J+1个参数值，使得这个误差值E最小，这就是网络学习的目标。换句话说，就是对于所有的输入样本和对应的真实值，让网络学习出J(I+1)+ J+1个合适的参数值，使得误差最小。这里误差函数公式中包含的样本值(x1,x2,…,xi,…,xI)是已知的，样本对应的真实值t也是已知的，未知的是J(I+1)+ J+1个参数。因此误差函数值的最小化问题可以转化为利用梯度下降法对这J(I+1)+ J+1个参数进行迭代的问题，其迭代公式表述如下：这里最难解决的是各个参数的偏导𝜕𝐸/(𝜕𝑤_𝑘 )的计算，下面对这J(I+1)+ J+1个参数从后往前分层进行偏导计算推理。\nfrom sklearn.datasets import load_boston\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef sigmoid(x):#激活函数\n    return 1&#x2F;(1+np.exp(-x))\n\ndef minMaxScaler(X):#数据归一化\n    X_std&#x3D;(X-X.min(axis&#x3D;0))&#x2F;(X.max(axis&#x3D;0)-X.min(axis&#x3D;0))\n    return X_std\n\ndef shuffle(X,y):#数据乱序，并划分训练集和测试集\n    lenX&#x3D;len(X)\n    np.random.seed(10)\n    random_sort&#x3D;np.random.permutation(lenX)\n    trainX&#x3D;X[random_sort[0:int(0.8*lenX)]]\n    trainy&#x3D;y[random_sort[0:int(0.8*lenX)]]\n    testX&#x3D;X[random_sort[int(0.8*lenX):]]\n    testy&#x3D;y[random_sort[int(0.8*lenX):]]\n    return trainX,trainy,testX,testy\n\ndef forward_propagate(an_input):#信息前向传递\n    #计算并激活隐藏层\n    for j in range(hidden_n):\n        total&#x3D;0\n        for i in range(input_n):\n            total+&#x3D;an_input[i]*input_hidden_weights[j][i]\n        total+&#x3D;input_hidden_bs[j]#加入最后的偏置\n        hidden_as[j]&#x3D;sigmoid(total)\n    #计算并激活输出层\n    total&#x3D;0\n    for j in range(hidden_n):\n        total+&#x3D;hidden_as[j]*hidden_output_weights[j]\n    total+&#x3D;hidden_output_b\n    global output_z #由于output_z是标量，需要声明为全局\n    output_z&#x3D;total\n\n#误差反向信息传递\ndef back_propagate(an_input,y_true,learn_rate):\n    forward_propagate(an_input)#前向信息传递\n    #计算隐藏层到输出层权重的偏导数及偏置\n    d_y&#x3D;output_z-y_true\n    d_hidden_output_weights&#x3D;np.zeros(hidden_n)#初始化\n    for j in range(hidden_n):\n        d_hidden_output_weights[j]&#x3D;d_y*hidden_as[j]\n    d_hidden_output_b&#x3D;d_y\n    #更新隐藏层到输出层权重\n    for j in range(hidden_n):#更新隐藏层到输出层的权重\n        hidden_output_weights[j]-&#x3D;learn_rate*d_hidden_output_weights[j]\n    global hidden_output_b\n    #更新隐藏层到输出层偏置\n    hidden_output_b-&#x3D;learn_rate*d_hidden_output_b\n\n    # 计算输入层到隐藏层权重的偏导数\n    d_hidden_as &#x3D; np.zeros(hidden_n)\n    for j in range(hidden_n):\n        d_hidden_as[j] &#x3D; d_y * hidden_output_weights[j]\n    d_hidden_zs &#x3D; np.zeros(hidden_n)\n    for j in range(hidden_n):\n        d_hidden_zs[j] &#x3D; d_hidden_as[j] * hidden_as[j] * (1 - hidden_as[j])\n    d_input_hidden_weights &#x3D; np.zeros((hidden_n, input_n))\n    d_input_hidden_bs &#x3D; d_hidden_zs\n    for j in range(hidden_n):\n        for i in range(input_n):\n            d_input_hidden_weights[j][i] &#x3D; d_hidden_zs[j] * an_input[i]\n    # 更新输入层到隐藏层权重\n    for j in range(hidden_n):\n        for i in range(input_n):\n            input_hidden_weights[j][i] -&#x3D; learn_rate * d_input_hidden_weights[j][i]\n    # 更新输入层到隐藏层的偏置\n    for j in range(hidden_n):\n        input_hidden_bs[j] -&#x3D; learn_rate * d_input_hidden_bs[j]\n\n\n\ndef computeError(Xdata, Ydata):  # 对数据集计算误差，并计算预测结果\n    error &#x3D; 0\n    predictValues &#x3D; np.zeros(len(Xdata))\n    for i in range(len(Xdata)):\n        forward_propagate(Xdata[i])\n        error +&#x3D; 0.5 * (output_z - Ydata[i]) ** 2\n        predictValues[i] &#x3D; output_z\n    return error &#x2F; len(Xdata), predictValues\n\n\ndef train(trainX, trainy, iterate&#x3D;50, learn_rate&#x3D;0.05):  # 训练过程设置\n    for t in range(iterate):  # 训练神经网络\n        for i in range(len(trainX)):\n            back_propagate(trainX[i], trainy[i], learn_rate)\n        if t % 100 &#x3D;&#x3D; 0:  # 输出迭代之后的误差，以便观察误差降低的效果\n            totalError, preValues &#x3D; computeError(trainX, trainy)\n            print(&#39;iterate:&#39;, t, &#39; the training error&#x3D;&#39;, totalError)\n\n\n#初始化\ninput_n&#x3D;11#输入层特征数\nhidden_n&#x3D;6#隐藏层神经单元个数\noutput_n&#x3D;1#输出单元个数\nnp.random.seed(10)\ninput_hidden_weights&#x3D;np.random.rand(hidden_n,input_n)#输入到隐藏层的权值\nnp.random.seed(10)\ninput_hidden_bs&#x3D;np.random.rand(hidden_n)\nnp.random.seed(10)\nhidden_output_weights&#x3D;np.random.rand(hidden_n)#隐藏层到输出层的权值\nnp.random.seed(10)\nhidden_output_b&#x3D;np.random.rand(1)\nhidden_as&#x3D;np.zeros(hidden_n) #隐藏单元激活值\noutput_z&#x3D;np.ones(1) #输出单元值\n\n#数据处理\ndataset&#x3D;load_boston()\nX&#x3D;dataset.data[:,[0,2,4,5,6,7,8,9,10,11,12]]\ny&#x3D;dataset.target\nX&#x3D;minMaxScaler(X)\ntrainX,trainy,testX,testy&#x3D;shuffle(X,y)\n\ntrain(trainX,trainy,1000,0.002)#训练\n\n#需要计算测试集的总误差以及测试集预测的结果，以便和真实结果进行画图比对\ntotalError,predictValues&#x3D;computeError(testX,testy)\n\nprint(&#39;test error&#x3D;&#39;,totalError)\n#真实值从小到大排列\ntesty_ascending_index&#x3D;testy.argsort()\nplt.plot(range(len(testX)),testy[testy_ascending_index],&#39;o&#39;,label&#x3D;&#39;True value&#39;)\nplt.plot(range(len(testX)),predictValues[testy_ascending_index],&#39;*&#39;,label&#x3D;&#39;predict value&#39;)\nplt.legend()\nplt.show()\n\niterate: 0  the training error&#x3D; [45.03945242]\niterate: 100  the training error&#x3D; [6.18205346]\niterate: 200  the training error&#x3D; [5.59847866]\niterate: 300  the training error&#x3D; [5.57628389]\niterate: 400  the training error&#x3D; [5.5587542]\niterate: 500  the training error&#x3D; [5.54749627]\niterate: 600  the training error&#x3D; [5.54091243]\niterate: 700  the training error&#x3D; [5.53675292]\niterate: 800  the training error&#x3D; [5.53367205]\niterate: 900  the training error&#x3D; [5.5305169]\ntest error&#x3D; [12.82731241]\n数据思维数据分析广义的数据分析包括狭义数据分析和数据挖掘狭义的数据分析是指根据分析目的，采用对比分析、分组分析、交叉分析等分析方法，对收集来的数据进行处理与分析，提取有价值的信息，发挥数据的作用，得到特定统计结果的过程。数据挖掘则是从大量的、不完全的、有噪声的、模糊的、随机的实际应用数据中，通过应用回归、分类、聚类等技术，挖掘潜在价值的过程。\n典型的数据分析的流程：\n\n问题定义\n数据采集\n数据预处理\n分析与建模\n模型评价与优化\n\n\n问题定义：明确分析目标，既本次分析要研究的主要问题和预期的分析目标等。\n数据采集：从企业数据库中调取相关业务数据、编写网页爬虫或到特定网站下载公开的数据集\n数据预处理：对原始数据进行清洗、变换和标准化\n分析与建模：指通过各种统计分析方法以及数据挖掘模型分析数据中有价值的信息，并得出结论的过程\n模型评价与优化：对已经建立的一个或多个模型，根据其模型的类别，使用对应的指标评价其性能优劣的过程\n\n创建dataframe第三方库pandas：导入：import pandas as pd提供了DataFrame对象。 DataFrame是一 个表格型的数据结构，它含有一组 有序的列。每列可以是不同的值类型（数值、字符串、布尔值等）。DataFrame既有行索引也有列索引。\nimport pandas as pd\n\n#从字典创建dataframe:\ndata &#x3D; &#123;&#39;state&#39;: [&#39;Ohio&#39;, &#39;Ohio&#39;, &#39;Ohio&#39;, &#39;Nevada&#39;, &#39;Nevada&#39;], \n        &#39;year&#39;: [2000, 2001, 2002, 2001, 2002], \n        &#39;pop&#39;: [1.5, 1.7, 3.6, 2.4, 2.9]&#125; \ndf&#x3D;pd.DataFrame(data)\n#指定列的顺序:\ndf&#x3D;pd.DataFrame(data, columns&#x3D;[&#39;year&#39;, &#39;state&#39;, &#39;pop&#39;])\n#指定行索引\ndf&#x3D;pd.DataFrame(data,columns&#x3D;[&#39;year&#39;, &#39;state&#39;, &#39;pop&#39;, &#39;debt&#39;],index&#x3D;[&#39;one&#39;, &#39;two&#39;, &#39;three&#39;, &#39;four&#39;, &#39;five&#39;])\n\n索引pandas中有三种索引方法：[]、.loc、.iloc\n基于行名和列名的索引：.loc\n取得其中一行或多行:\ndf.loc[&#39;one&#39;]\ndf.loc[&#39;one&#39;:&#39;three&#39;]\ndf.loc[[&#39;one&#39;,&#39;three&#39;]]  #列表索引\n取得n行及n列\ndf.loc[&#39;one&#39;,&#39;year&#39;]\ndf.loc[&#39;one&#39;:&#39;three&#39;,&#39;year&#39;:&#39;pop&#39;]\ndf.loc[[&#39;one&#39;,&#39;three&#39;],[&#39;year&#39;,&#39;pop&#39;]]\n基于行索引值和列索引值的索引：.iloc\n取得其中一行或多行:\ndf.iloc[0]   #df.loc[&#39;one&#39;]\ndf.iloc[0:3]   #df.loc[&#39;one&#39;:&#39;three&#39;]\ndf.iloc[[0,2]]  # df.loc[[&#39;one’,&#39;three’]]   列表索引\n取得n行及n列\ndf.iloc[0,0]    #df.loc[&#39;one&#39;,&#39;year&#39;]\ndf.iloc[0:3,0:3]    #df.loc[&#39;one&#39;:&#39;three&#39;,&#39;year&#39;:&#39;pop&#39;]\ndf.iloc[[0,2],[0,2]]    #df.loc[[&#39;one&#39;,&#39;three&#39;],[&#39;year&#39;,&#39;pop&#39;]]\n\nPandas除三种基本索引方法外，还可以使用布尔索引\n布尔索引：与前三种索引方式结合使用\n筛选符合条件的行:与[]结合使用\ndf[df.year&gt;2001]  #2001年以后\n筛选符合条件的行:与.loc结合使用\ndf.loc[df.year&gt;2001]\ndf.loc[df.year&gt;2001,&#39;year&#39;:&#39;pop’]\n筛选符合条件的行:与.iloc结合使用\ndf.iloc[list(df.year&gt;2001)]\ndf.iloc[list(df.year&gt;2001),0:2]\n\n基本操作：添加、删除、修改、排序、合并数据集添加\ndf&#x3D;df.append(&#123;&#39;year&#39;:2003,&#39;state&#39;:&#39;Louisiana&#39;,&#39;pop&#39;:1.4&#125;,ignore_index&#x3D;True)#行\ndf[&#39;total&#39;]&#x3D;0    #列 \ndf[&#39;total&#39;]&#x3D;df[&#39;pop&#39;]-df[&#39;debt&#39;]   #先将debt列值设为1\n删除\ndf.drop(5,inplace&#x3D;True)  #行\ndf.drop(‘debt’,axis&#x3D;1,inplace&#x3D;True) #列\n修改\n#获取和修改列类型:\ndf[&#39;pop&#39;].dtype\ndf[&#39;pop&#39;]&#x3D;df[&#39;pop&#39;].astype(str)\n#修改值\ndf[&#39;pop&#39;]&#x3D;df[&#39;pop&#39;]+3\ndf.loc[df[&#39;year&#39;]&gt;&#x3D;2002,&#39;pop&#39;] +&#x3D;1\n排序\ndf.sort_values(by&#x3D;[&#39;pop&#39;],ascending&#x3D;True)\ndf.sort_values(by&#x3D;[&#39;year&#39;,&#39;pop&#39;],ascending&#x3D;False)\n\n\n合并数据集\ndf3&#x3D;pd.concat([df1,df],ignore_index&#x3D;True)   #首先df1&#x3D;df.copy()\ndf3&#x3D;pd.concat([df1,df], axis&#x3D;1) #轴1方向拼接\n\n\n\n\n文件操作载入数据:csv、 excel、 txt等\ndf&#x3D;pd.read_csv(‘xxxx.csv’,encoding&#x3D;‘xxx’,sep&#x3D;‘xxx’,header&#x3D;None) #sep:分隔符，默认为逗号； header&#x3D;None没有列标签\ndf&#x3D; pd.read_excel(‘xxxx.xlsx’,header&#x3D;None)#header&#x3D;None没有列标签\n写入数据:csv、 excel、 txt等\ndf.to_csv(‘xxxx.csv’,sep&#x3D;‘xxx’,encoding&#x3D;‘xxx’)\ndf.to_excel(&#39;xxxx.xlsx&#39;,index&#x3D;False) #不写入索引列\n\n\n第三方库:matplotlibMatplotlib是一个Python 2D绘图库，可以轻松生成折线图、柱状图、饼图、散点图等\n#导入库\nimport matplotlib.pyplot as plt\n#中文问题：\nplt.rcParams[&#39;font.sans-serif&#39;] &#x3D; [&#39;SimHei&#39;] \n# 步骤一（替换sans-serif字体）\nplt.rcParams[&#39;axes.unicode_minus&#39;] &#x3D; False  \n# 步骤二（解决坐标轴负数的负号显示问题）\n#折线图\nx &#x3D; [1, 2, 3, 4]\ny &#x3D; [1.2, 2.5, 4.5, 7.3]\nplt.plot(x, y)  # plot函数作图\nplt.savefig(&#39;line.png&#39;) #保存\nplt.show()  #看得到图形则不用这条语句\n\n\nx &#x3D; [1, 2, 3, 4]\ny &#x3D; [1.2, 2.5, 4.5, 7.3]\n\n\nplt.plot(x, y, color&#x3D;&quot;r&quot;, linestyle&#x3D;&quot;--&quot;, marker&#x3D;&quot;*&quot;, linewidth&#x3D;1.0)\n\n\nplt.show()  #看得到图形则不用这条语句\n\n#x轴和y轴标题\nplt.ylabel(&#39;Y&#39;)\nplt.xlabel(&#39;X&#39;)\n#图形标题\nplt.title(&#39;折线图&#39;)\n#图例\nplt.legend(loc&#x3D;&#39;upper left&#39;)\n#网格\nplt.grid()\n#注释\nplt.text(x,y,&#39;注释&#39;)\n\n#导入库\nimport matplotlib.pyplot as plt\n#中文问题：\nplt.rcParams[&#39;font.sans-serif&#39;] &#x3D; [&#39;SimHei&#39;] \n# 步骤一（替换sans-serif字体）\nplt.rcParams[&#39;axes.unicode_minus&#39;] &#x3D; False  \n# 步骤二（解决坐标轴负数的负号显示问题）\n\n#条形图：bar()\nx &#x3D; [0,1,2,3] #季度\ny &#x3D; [1000, 1500, 1300, 1800] #销量\ncolors&#x3D;[&#39;red&#39;,&#39;green&#39;,&#39;cyan&#39;,&#39;blue&#39;]\n#plt.bar(x, y,width&#x3D;0.8,color&#x3D;colors)\nplt.yticks(x,[&#39;春&#39;, &#39;夏&#39;, &#39;秋&#39;, &#39;冬&#39;])\n#水平条形图：barh()\nplt.barh(x, y,height&#x3D;0.8,color&#x3D;colors)\n#值标签\nfor i,j in zip(x,y):\n    plt.text(i,j,j)\n\n\nplt.show()  #看得到图形则不用这条语句\n\n\n#饼图：pie()\nlabels &#x3D; [&#39;娱乐&#39;,&#39;育儿&#39;,&#39;饮食&#39;,&#39;房贷&#39;,&#39;交通&#39;,&#39;其它&#39;]\nsizes &#x3D; [2,5,12,70,2,9]\nexplode &#x3D; (0,0,0,0.1,0,0)\nplt.pie(sizes,explode&#x3D;explode,labels&#x3D;labels,autopct&#x3D;&#39;%1.1f%%&#39;)\nplt.title(&quot;8月份家庭支出&quot;)\n\n\nplt.show()  \n\n分析目标\n查看数据基本情况，并完成对数据的基本统计。统计2004年各季度销售量并以条图方式呈现，绘制2003年、2004年销售额曲线对比图，并将2004年不同季度销售额占比以饼图方式呈现。\n载入数据\ndf&#x3D;pd.read_csv(&#39;sales_data_sample9.csv&#39;,encoding&#x3D;&#39;gbk&#39;)\n数据查看\ndf.info() #查看数据整体情况\nprint(df.head(3))  #前面n行\nprint(df.tail(3))     #末尾n行\nprint(df.shape)    #数据集规模\ndf.dtypes   #数据类型\n\n数据预处理\n缺失值：\n检查是否有缺失值：df.count()\ndf&#x3D;df.dropna() \t\t   #默认丢弃任何含有NaN的行\ndf&#x3D;df.dropna(how&#x3D;&#39;all&#39;) #只丢弃全为NaN的行\ndf&#x3D;df.dropna(how&#x3D;&#39;all&#39;,axis&#x3D;1) #只丢弃全为NaN的列\ndf&#x3D;df.fillna(0)             #用0填充缺失数据\ndf[&#39;总分&#39;].fillna(df[&#39;总分&#39;].mean(),inplace&#x3D;True) #用列均值填充\n变换：\n异常值：\n\n探索性分析：\n基本统计方法\nsum() 求和\nmax() 最大值  \t\tidxmax() 最大值对应索引号\nmin() 最小值\t\tidxmin() 最小值对应索引号\nvar() 方差\t\tstd()  标准差\nmedian() 中位数\t\tmean() 均值\nnlargest（n,列名）该列最大的n个值\ndescribe():计算各列的频率、均值、标准差、级值、四分位数\n\n数值预测狭义的数据分析：根据分析目的，采用对比分析、分组分析、交叉分析等统计分析方法，对采集来的数据进行处理与分析，从中提取有价值的信息数据挖掘：从大量的、不完全的、有噪声的、模糊的、随机的实际应用数据中，通过应用回归、分类、聚类等技术，挖掘潜在价值的过程\n机器学习机器学习（Machine Learning）根据已知数据来不断学习和积累经验，然后总结出规律并尝试预测未知数据的属性，是一门综合性非常强的多领域交叉学科，涉及线性代数、概率论、逼近论、凸分析、算法复杂度理论等多门学科目前机器学习已经有了十分广泛的应用，例如数据挖掘、计算机视觉、自然语言处理、生物特征识别、搜索引擎、医学诊断、检测信用卡欺诈、证券市场分析、DNA序列测序、语音和手写识别、推荐系统、战略游戏和机器人运用等。\n机器学习的过程与人类学习过程类似，例如识别图像需要几个步骤：首先要收集大量样本图像，并标明这些图像的类别（称为样本标签，就像告诉孩子这是一只恐龙），这些样本图像就是数据集。把样本和标注送给算法学习（称为训练），训练完成之后得到一个模型，这个模型是从这些样本中总结归纳得到的知识。接下来，可以用这个模型对新的图像进行识别，称为预测。\n以下是机器学习中的经典监督学习过程：机器学习有监督学习：训练样本包含对应的‘标签’（例如每个样本所属的类别）。训练集需要包括输入和输出，也就是特征和目标，其中目标是由人工标注的‘标签’。通过大量已知的数据不断训练和减少错误来提高认知能力，最后根据积累的经验去预测未知数据的属性。\n\n回归\n分类\n\n无监督学习：训练数据包含一组输入向量而没有相应的目标值。这类算法的目标可能是发现原始数据中相似样本的组合（称作聚类），或者确定数据的分布（称作密度估计），或者把数据从高维空间投影到低维空间（称作降维）以便进行可视化。\n\n聚类\n\n","slug":"计算与人工智能概论进阶","date":"2022-11-03T14:40:49.000Z","categories_index":"","tags_index":"python","author_index":"Algernon"},{"id":"01c87ce279dfe7327e075971fdffa3c0","title":"【python机器学习基础教程】（五）","content":"模型评估与改进交叉验证交叉验证是一种评估泛化性能的统计学方法，它比单次划分训练集和测试集的方法更加稳定、全面。在交叉验证中，数据被多次划分，并且需要训练多个模型。最常用的交叉验证是k折交叉验证，其中k是由用户指定的数字，通常取5或者10。在执行5折交叉验证时，首先将数据划分为（大致）相等的5部分，每一部分叫做折。接下来训练一系列模型，使用第一折作为测试集、其他折（2~5）作为训练集来训练第一个模型。利用2~5折中的数据来构建模型，然后在1折上评估精度。之后构建另一个模型，这次使用2折 作为测试集，1、3、4、5折中的数据作为训练集。利用3、4、5折作为测试集重复这一过程。对于将数据划分为训练集和测试集的这五次划分 ，每一次都需要计算精度。最后我们得到了5个精度值。\nmglearn.plots.plot_cross_validation()\n通常来说，数据的前五分之一是第1折，第二个五分之一是第2折，其此类推。\nscikit-learn中的交叉验证scikit-learn是利用model_selection模块中的cross_val_score函数来实现交叉验证的。cross_val_score函数的参数是我们想要评估的模型、训练数据与真实标签。我们在iris数据集上对LogisticRegression进行评估：\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.datasets import load_iris\nfrom sklearn.linear_model import LogisticRegression\n\niris&#x3D;load_iris()\nlogreg&#x3D;LogisticRegression()\n\nscores&#x3D;cross_val_score(logreg,iris.data,iris.target,cv&#x3D;5)\nprint(&quot;Cross-validation scores:&#123;&#125;&quot;.format(scores))\n\n\n\n\n\n\n\n\n\nCross-validation scores:[0.96666667 1.         0.93333333 0.96666667 1.        ]\n总结交叉验证精度的一种常用方法是计算平均值：\nprint(&quot;Average cross-validation score:&#123;:.2f&#125;&quot;.format(scores.mean()))\n\n\n\n\n\n\n\n\n\nAverage cross-validation score:0.97\n分层k折交叉验证和其他策略首先，我们康康iris数据集：\nfrom sklearn.datasets import load_iris\niris&#x3D;load_iris()\nprint(&quot;Iris labels:\\n&#123;&#125;&quot;.format(iris.target))\n输出：\nIris labels:\n[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2\n 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n 2 2]\n\n数据前三分之一是类别0，中间三分之一是类别1，最后三分之一是类别2。简单k折策略在这里失效了，故我们使用分层k折交叉验证。在分层交叉验证中，我们划分数据，使每个折中类别之间的比例与整个数据集中的比例相同。\nmglearn.plots.plot_stratified_cross_validation()\n留一交叉验证另一种常用的交叉验证方法是留一法。可以将留一法交叉验证看作是每折只包含单个样本的k折交叉验证。对于每次划分，选择单个数据点作为测试集。\nfrom sklearn.model_selection import LeaveOneOut\nloo&#x3D;LeaveOneOut()\nlogreg &#x3D; LogisticRegression()\nscores&#x3D;cross_val_score(logreg,iris.data,iris.target,cv&#x3D;loo)\nprint(&quot;Number of cv iterations:&quot;,len(scores))\nprint(&quot;Mean accuracy:&#123;:.2f&#125;&quot;.format(scores.mean()))\n\n\n\n\n\n\n\n\n\nNumber of cv iterations: 150Mean accuracy:0.97\n打乱划分交叉验证在打乱划分交叉验证中，每次划分为训练集取样train_size个点，为测试集取样test_size个（不相交的）点。将这一划分方法重复n_iter次。\nmglearn.plots.plot_shuffle_split()\n下面的代码将数据集划分为50%的训练集和50%的测试集，共运行10次迭代：\nfrom sklearn.model_selection import ShuffleSplit\nshuffle_split &#x3D;ShuffleSplit(test_size&#x3D;.5,train_size&#x3D;.5,n_splits&#x3D;10)\nscores&#x3D;cross_val_score(logreg,iris.data,iris.target,cv&#x3D;shuffle_split)\nprint(&quot;Cross-validation scores:\\n&#123;&#125;&quot;.format(scores))\n\n\n\n\n\n\n\n\n\nCross-validation scores:[0.97333333 0.96       0.98666667 0.98666667 0.97333333 0.98666667 0.92       0.97333333 0.97333333 0.93333333]\n分组交叉验证另一种交叉验证适用于数据中的分组高度相关时。\n下面这个示例用到了一个由groups数组指定分组的模拟数据集。这个数据集包含12个数据点，且对于每个数据点，groups指定了该点所属的分组。一共分成四组，前3个样本属于第一组，接下来4个样本属于第二组，以此类推：\nfrom sklearn.model_selection import GroupKFold\nfrom sklearn.datasets import make_blobs\n#创建模拟数据集\nX,y&#x3D;make_blobs(n_samples&#x3D;12,random_state&#x3D;0)\n#假设前三个样本属于同一组，接下来4个样本属于同一组，以此类推\ngroups&#x3D;[0,0,0,1,1,1,1,2,2,3,3,3]\nscores&#x3D;cross_val_score(logreg,X,y,groups,cv&#x3D;GroupKFold(n_splits&#x3D;3))\nprint(&quot;Cross-validation scores:\\n&#123;&#125;&quot;.format(scores))\nmglearn.plots.plot_group_kfold()\n\n网格搜索简单网格搜索参数过拟合的风险与验证集mglearn.plots.plot_threefold_split()\n\n带交叉验证的网格搜索mglearn.plots.plot_cross_val_selection()\nmglearn.plots.plot_grid_search_overview()\n\n评估指标与评分二分类指标对于二分类问题，我们通常会说正类和反类。错误的阳性预测叫做假正例，错误的阴性预测叫做假反例。在统计学中，假正例也叫做第一类错误，假反例也叫作第二类错误。\nmglearn.plots.plot_confusion_matrix_illustration()\n“9与其他”分类任务的混淆矩阵\nmglearn.plots.plot_binary_confusion_matrix()\n二分类混淆矩阵\nmglearn.plots.plot_decision_threshold()\n\n受试者工作特征（ROC）和AUC有一种常用的工具可以分析不同阈值的分类器行为：受试者工作特征曲线，简称为ROC曲线。与准确率-召回率曲线类似，ROC曲线考虑了给定分类器的所有可能的阈值，但它显示的是假正例率和真正例率 ，而不是报告准确率和召回率。真正例率只是召回率的另一个名称，而假正例率则是假正例占所有反类样本的比例\nfrom sklearn.metrics import roc_curve\nfrom sklearn import svm\nfrom sklearn.svm import SVC\nfpr,tpr,thresholds&#x3D;roc_curve(y_test,svc.decision_function(X_test))\n\nX,y&#x3D;make_blobs(n_samples&#x3D;(4000,500),centers&#x3D;2,cluster_std&#x3D;[7.0,2],random_state&#x3D;22)\nX_train,X_test,y_train,y_test&#x3D;train_test_split(X,y,random_state&#x3D;0)\nsvc&#x3D;SVC(gamma&#x3D;.05).fit(X_train,y_train)\nprecision,recall,thresholds&#x3D;precision_recall_curve(y_test,svc.decision_function(X_test))\nplt.plot(fpr,tpr,label&#x3D;&quot;ROC Curve&quot;)\nplt.xlabel(&quot;FPR&quot;)\nplt.ylabel(&quot;TPR(recall)&quot;)\n#找到最接近于0的阈值\nclose_zero&#x3D;np.argmin(np.abs(thresholds))\nplt.plot(fpr[close_zero],tpr[close_zero],&#39;o&#39;,markersize&#x3D;10,label&#x3D;&quot;threshold zero&quot;,fillstyle&#x3D;&quot;none&quot;,c&#x3D;&#39;k&#39;,mew&#x3D;2)\nplt.legend(loc&#x3D;4)\n未完待续\n多分类指标一般来说，多分类结果比二分类结果更加难以理解。除了精度，常用的工具有混淆矩阵和分类报告，下面我们将这两种详细的评估方法应用于对digits数据集中10种不同的手写数字进行分类的任务：\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\n\nfrom sklearn import datasets\ndigits &#x3D; datasets.load_digits()\nX_train,X_test,y_train,y_test&#x3D;train_test_split(digits.data,digits.target,random_state&#x3D;0)\nlr&#x3D;LogisticRegression().fit(X_train,y_train)\npred&#x3D;lr.predict(X_test)\nprint(&quot;Accuracy:&#123;:.3f&#125;&quot;.format(accuracy_score(y_test,pred)))\nprint(&quot;Confusion matrix:\\n&#123;&#125;&quot;.format(confusion_matrix(y_test,pred)))\nAccuracy:0.951\nConfusion matrix:\n[[37  0  0  0  0  0  0  0  0  0]\n [ 0 40  0  0  0  0  0  0  2  1]\n [ 0  1 40  3  0  0  0  0  0  0]\n [ 0  0  0 43  0  0  0  0  1  1]\n [ 0  0  0  0 37  0  0  1  0  0]\n [ 0  0  0  0  0 46  0  0  0  2]\n [ 0  1  0  0  0  0 51  0  0  0]\n [ 0  0  0  1  1  0  0 46  0  0]\n [ 0  3  1  0  0  0  0  0 43  1]\n [ 0  0  0  0  0  1  0  0  1 45]]\nscores_image&#x3D;mglearn.tools.heatmap(confusion_matrix(y_test,pred),xlabel&#x3D;&#39;predicted label&#39;,ylabel&#x3D;&#39;true label&#39;,xticklabels&#x3D;digits.target_names,yticklabels&#x3D;digits.target_names,cmap&#x3D;plt.cm.gray_r,fmt&#x3D;&quot;%d&quot;)\nplt.title(&quot;confusion matrix&quot;)\nplt.gca().invert_yaxis()\n10个数字分类任务的混淆矩阵\n利用classification_report函数，我们可以计算每个类别的准确率、召回率和$f$-分数：\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test,pred))\n              precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00        37\n           1       0.89      0.93      0.91        43\n           2       0.98      0.91      0.94        44\n           3       0.91      0.96      0.93        45\n           4       0.97      0.97      0.97        38\n           5       0.98      0.96      0.97        48\n           6       1.00      0.98      0.99        52\n           7       0.98      0.96      0.97        48\n           8       0.91      0.90      0.91        48\n           9       0.90      0.96      0.93        47\n\n    accuracy                           0.95       450\n   macro avg       0.95      0.95      0.95       450\nweighted avg       0.95      0.95      0.95       450\n回归指标","slug":"python机器学习5","date":"2022-11-03T14:38:49.000Z","categories_index":"","tags_index":"机器学习","author_index":"Algernon"},{"id":"1ee3586cac227bddb968ecf686dc5d5b","title":"【python机器学习基础教程】（四）","content":"数据表示与特征工程到目前为止，我们一直假设数据是由浮点数组成的二维数组，其中每一列是描述数据点的连续特征。对于许多应用而言，数据的收集方式并不是这样。一种特别常见的特征类型就是分类特征，也叫离散特征。\n对于某个特定应用而言，如何找到最佳数据表示，这个问题被称为特征工程。\n分类变量One-Hot编码（虚拟变量）到目前为止，表示分类变量最常用的方法就是使用one-hot编码或N取一编码 ，也叫虚拟变量。虚拟变量背后的思想是将一个分类变量替换为一个或多个新特征，新特征取值为0和1。\n首先，我们使用pandas从逗号分隔值（CSV）文件中加载数据：数据来源于1994年美国人口普查数据库。(下载地址https://archive.ics.uci.edu/ml/datasets/Adult)import pandas as pd\nfrom IPython.display import display\n\ndata&#x3D;pd.read_csv(&quot;data&#x2F;adult.data&quot;,header&#x3D;None,index_col&#x3D;False,names&#x3D;[&#39;age&#39;,&#39;workclass&#39;,&#39;fnlwgt&#39;,&#39;education&#39;,&#39;education-num&#39;,&#39;marital-status&#39;,&#39;occupation&#39;,&#39;relationship&#39;,&#39;race&#39;,&#39;gender&#39;,&#39;capital-gain&#39;,&#39;capital-loss&#39;,&#39;hours-per-week&#39;,&#39;native-country&#39;,&#39;income&#39;])\n\n#为方面说明，我们只选了其中几列\ndata&#x3D;data[[&#39;age&#39;,&#39;workclass&#39;,&#39;education&#39;,&#39;gender&#39;,&#39;hours-per-week&#39;,&#39;occupation&#39;,&#39;income&#39;]]\ndisplay(data.head())结果：\n\n\n\n\n\n\n\n\n\nage          workclass  …          occupation  income0   39          State-gov  …        Adm-clerical   &lt;=50K1   50   Self-emp-not-inc  …     Exec-managerial   &lt;=50K2   38            Private  …   Handlers-cleaners   &lt;=50K3   53            Private  …   Handlers-cleaners   &lt;=50K4   28            Private  …      Prof-specialty   &lt;=50K\n1.检查字符串编码的分类数据读完数据集之后，最好先检查每一列是否包含有意义的分类数据。\nprint(data.gender.value_counts())\n\n\n\n\n\n\n\n\n\n[5 rows x 7 columns] Male      21790 Female    10771Name: gender, dtype: int64\n用pandas编码数据有一种非常简单的方法，就是使用get_dummies函数。get_dummies函数自动变换所有具有对象类型（比如字符串）的列或所有分类的列：\nprint(&quot;Original features:\\n&quot;,list(data.columns),&quot;\\n&quot;)\ndata_dummies&#x3D;pd.get_dummies(data)\nprint(&quot;features after get_dummies:\\n&quot;,list(data_dummies.columns))\n输出：Original features:\n [&#39;age&#39;, &#39;workclass&#39;, &#39;education&#39;, &#39;gender&#39;, &#39;hours-per-week&#39;, &#39;occupation&#39;, &#39;income&#39;] \n\nfeatures after get_dummies:\n [&#39;age&#39;, &#39;hours-per-week&#39;, &#39;workclass_ ?&#39;, &#39;workclass_ Federal-gov&#39;, &#39;workclass_ Local-gov&#39;, &#39;workclass_ Never-worked&#39;, &#39;workclass_ Private&#39;, &#39;workclass_ Self-emp-inc&#39;, &#39;workclass_ Self-emp-not-inc&#39;, &#39;workclass_ State-gov&#39;, &#39;workclass_ Without-pay&#39;, &#39;education_ 10th&#39;, &#39;education_ 11th&#39;, &#39;education_ 12th&#39;, &#39;education_ 1st-4th&#39;, &#39;education_ 5th-6th&#39;, &#39;education_ 7th-8th&#39;, &#39;education_ 9th&#39;, &#39;education_ Assoc-acdm&#39;, &#39;education_ Assoc-voc&#39;, &#39;education_ Bachelors&#39;, &#39;education_ Doctorate&#39;, &#39;education_ HS-grad&#39;, &#39;education_ Masters&#39;, &#39;education_ Preschool&#39;, &#39;education_ Prof-school&#39;, &#39;education_ Some-college&#39;, &#39;gender_ Female&#39;, &#39;gender_ Male&#39;, &#39;occupation_ ?&#39;, &#39;occupation_ Adm-clerical&#39;, &#39;occupation_ Armed-Forces&#39;, &#39;occupation_ Craft-repair&#39;, &#39;occupation_ Exec-managerial&#39;, &#39;occupation_ Farming-fishing&#39;, &#39;occupation_ Handlers-cleaners&#39;, &#39;occupation_ Machine-op-inspct&#39;, &#39;occupation_ Other-service&#39;, &#39;occupation_ Priv-house-serv&#39;, &#39;occupation_ Prof-specialty&#39;, &#39;occupation_ Protective-serv&#39;, &#39;occupation_ Sales&#39;, &#39;occupation_ Tech-support&#39;, &#39;occupation_ Transport-moving&#39;, &#39;income_ &lt;&#x3D;50K&#39;, &#39;income_ &gt;50K&#39;]\n\n连续特征age和hours-per-week没有发生变化，而分类特征的每个可能取值都被扩展为一个新特征：\ndisplay(data_dummies.head())\n\n\n\n\n\n\n\n\n\n age  hours-per-week  …  income_ &lt;=50K  income_ &gt;50K 0   39              40  …              1             0 1   50              13  …              1             0 2   38              40  …              1             0 3   53              40  …              1             0 4   28              40  …              1             0 [5 rows x 46 columns]\n下面我们使用values属性将data_dummies数据框（DataFrame）转换为Numpy数组，然后在其上训练一个机器学习模型。在训练模型之前，注意要把目标变量（现在被编码为两个income列）从数据中分离出来。\nfeatures &#x3D; data_dummies.loc[:, &#39;age&#39;:&#39;occupation_ Transport-moving&#39;]\n\n#提取Numpy数组\nX&#x3D;features.values\n\ny &#x3D; data_dummies[&#39;income_ &gt;50K&#39;].values\nprint(&quot;X.shape:&#123;&#125;  y.shape:&#123;&#125;&quot;.format(X.shape,y.shape))\n\n\n\n\n\n\n\n\n\nX.shape:(32561, 44)  y.shape:(32561,)\n现在数据的表示方式可以被scikit-learn处理，我们可以像之前一样进行下一步：\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test&#x3D;train_test_split(X,y,random_state&#x3D;0)\nlogreg&#x3D;LogisticRegression()\nlogreg.fit(X_train,y_train)\nprint(&quot;Test score:&#123;:.2f&#125;&quot;.format(logreg.score(X_test,y_test)))\n\n\n\n\n\n\n\n\n\nTest score:0.81\n分箱、离散化、线性模型与树数据表示的最佳方法不仅取决于数据的语义，还取决于所使用的模型种类。线性模型和基于树的模型（比如决策树、梯度提升树和随机森林）是两种成员很多同时又非常实用的模型，它们在处理不同的特征表示时就具有非常不同的性质。\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nimport matplotlib.pyplot as plt\nX,y&#x3D;mglearn.datasets.make_wave(n_samples&#x3D;100)\n\nline&#x3D;np.linspace(-3,3,1000,endpoint&#x3D;False).reshape(-1,1)\nreg&#x3D;DecisionTreeRegressor(min_samples_split&#x3D;3).fit(X,y)\n\nplt.plot(line,reg.predict(line),label&#x3D;&quot;decision tree&quot;)\n\nreg&#x3D;LinearRegression().fit(X,y)\nplt.plot(line,reg.predict(line),label&#x3D;&#39;linear regression &#39;)\nplt.plot(X[:,0],y,&#39;o&#39;,c&#x3D;&#39;k&#39;)\n\nplt.legend(loc&#x3D;&quot;best&quot;)\nplt.ylabel(&quot;Regression output&quot;)\nplt.xlabel(&quot;Input feature&quot;)\n\n有一种方法可以让线性模型在连续数据上变得更加强大，就是使用特征分箱（也叫离散化）将其划分为多个特征。我们假设将特征的输入范围划分成固定个数的箱子（bin）,比如10个，那么数据点就可以利用它所在的箱子来表示。为了确定这一点，我们首先需要定义箱子。在这个例子中，我们在-3和3之间定义10个均匀分布的箱子。我们用np.linspace函数创造11个元素，从而创建10个箱子，即两个连续边界之间的空间：\nbins&#x3D;np.linspace(-3,3,11)\nprint(&quot;bins:&#123;&#125;&quot;.format(bins))\n\n\n\n\n\n\n\n\n\nbins:[-3.  -2.4 -1.8 -1.2 -0.6  0.   0.6  1.2  1.8  2.4  3. ]\n这里第一个箱子包含的特征取值 在-3到-2.4之间的所有数据点 ，第二个箱子包含特征取值在-2.4到-1.8之间的所有数据点，以此类推。\n接下来，我们记录每个 数据点所属的箱子。这可以用np.digitize函数轻松计算出来：\nwhich_bin&#x3D;np.digitize(X,bins&#x3D;bins)\nprint(&quot;\\nData points:\\n&quot;,X[:5])\nprint(&quot;\\nBin membership for data points:\\n&quot;,which_bin[:5])\n输出：\nData points:\n [[-0.75275929]\n [ 2.70428584]\n [ 1.39196365]\n [ 0.59195091]\n [-2.06388816]]\n\nBin membership for data points:\n [[ 4]\n [10]\n [ 8]\n [ 6]\n [ 2]]\nfrom sklearn.preprocessing import OneHotEncoder\n#使用OneHotEncoder进行变换\nencoder&#x3D;OneHotEncoder(sparse&#x3D;False)\n#encoder.fit找到which_bin中的唯一值\nencoder.fit(which_bin)\n#transform创建one-hot编码\nX_binned&#x3D;encoder.transform(which_bin)\nprint(X_binned[:,5])\n输出：[0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1.\n 1. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0.\n 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0.\n 1. 0. 0. 0.]\n下面我们在one-hot编码后的数据上构建新的线性模型和新的决策树模型。结果如下，箱子的边界由黑色虚线表示： \nline_binned&#x3D;encoder.transform(np.digitize(line,bins&#x3D;bins))\n\nreg&#x3D;LinearRegression().fit(X_binned,y)\nplt.plot(line,reg.predict(line_binned),label&#x3D;&#39;linear regression binned&#39;)\n\nreg&#x3D;DecisionTreeRegressor(min_samples_split&#x3D;3).fit(X_binned,y)\nplt.plot(line,reg.predict(line_binned),label&#x3D;&#39;linear regression binned&#39;)\nplt.plot(X[:,0],y,&#39;o&#39;,c&#x3D;&#39;k&#39;)\nplt.vlines(bins,-3,3,linewidth&#x3D;1,alpha&#x3D;.2)\nplt.legend(loc&#x3D;&quot;best&quot;)\nplt.ylabel(&quot;Regression output&quot;)\nplt.xlabel(&quot;Input feature&quot;)\n虚线和实线完全重合，说明线性回归模型和决策树做出了完全相同的预测。\n交互特征与多项式特征想要丰富特征表示，特别是对于线性模型而言，另一种方法是添加原始数据的交互特征和多项式特征。这种特征工程通常用于统计建模，但也常用于许多实际的机器学习应用中。\n单变量非线性变换下面我们使用一个模拟的计数数据集，其性质与在自然状态下能找到的数据集类似。特征全都是整数值，而响应是连续的：\nrnd&#x3D;np.random.RandomState(0)\nX_org&#x3D;rnd.normal(size&#x3D;(1000,3))\nw&#x3D;rnd.normal(size&#x3D;3)\n\nX&#x3D;rnd.poisson(10*np.exp(X_org))\ny&#x3D;np.dot(X_org,w)\n\nprint(&quot;Number of feature appearances:\\n&#123;&#125;&quot;.format(np.bincount(X[:,0])))\n输出：\nNumber of feature appearances:\n[28 38 68 48 61 59 45 56 37 40 35 34 36 26 23 26 27 21 23 23 18 21 10  9\n 17  9  7 14 12  7  3  8  4  5  5  3  4  2  4  1  1  3  2  5  3  8  2  5\n  2  1  2  3  3  2  2  3  3  0  1  2  1  0  0  3  1  0  0  0  1  3  0  1\n  0  2  0  1  1  0  0  0  0  1  0  0  2  2  0  1  1  0  0  0  0  1  1  0\n  0  0  0  0  0  0  1  0  0  0  0  0  1  1  0  0  1  0  0  0  0  0  0  0\n  1  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1]\n\n我们将其计数可视化：\nbins&#x3D;np.bincount(X[:,0])\nplt.bar(range(len(bins)),bins,color&#x3D;&#39;r&#39;)\nplt.ylabel(&quot;Number of appearances&quot;)\nplt.xlabel(&quot;value&quot;)\n我们尝试拟合一个岭回归模型：\nfrom sklearn.linear_model import Ridge\nX_train,X_test,y_train,y_test&#x3D;train_test_split(X,y,random_state&#x3D;0)\nscore&#x3D;Ridge().fit(X_train,y_train).score(X_test,y_test)\nprint(&quot;Test score:&#123;:.3f&#125;&quot;.format(score))\n\n\n\n\n\n\n\n\n\nTest score:0.622\nX_train_log &#x3D; np.log(X_train+1)\nX_test_log&#x3D;np.log(X_test+1)\n\nplt.hist(X_train_log[:,0],bins&#x3D;25,color&#x3D;&#39;red&#39;)\nplt.ylabel(&quot;number of appearances&quot;)\nplt.xlabel(&quot;value&quot;)\n\n自动化特征选择单变量统计在单变量统计中，我们计算每个特征和目标值之间的关系是否存在统计显著性，然后选择具有最高置信度的特征。对于分类问题，这也被称为方差分析。这些测试的一个关键性质就是它们是单变量的，即它们只单独考虑每个特征。\n基于模型的特征选择基于模型的特征选择使用一个监督机器学习模型来判断每个特征的重要性，并且仅保留最重要的特征。\n迭代特征选择利用专家知识","slug":"python机器学习4","date":"2022-11-03T14:37:49.000Z","categories_index":"","tags_index":"机器学习","author_index":"Algernon"},{"id":"1be85ad561954f8e295d5b1c686f2a6f","title":"《基于深度学习的自然语言处理》笔记","content":"深度学习一般是指建立在含有多层非线性变换的神经网络结构之上，对数据的表示进行抽象和学习的一系列机器学习算法。\n深度学习主要为自然语言处理的研究带来了两方面的变化：一方面是使用统一的分布式（低维、稠密、连续）向量表示不同粒度的语言单元，如词、短语、句子和篇章等；另一方面是使用循环、卷积、递归等神经网络模型对不同的语言单元进行组合，获得更大语言单元的表示。除了不同粒度的单语语言单元外，不同种类的语言甚至不同模态（语言、图像等）的数据都可以通过类似的组合方式表示在相同的语义向量空间中，然后通过在向量空间中的运算来实现分类、推理、生成等各种任务并应用于各种相关的任务之中。\n自然语言处理（NLP）指的是对人类语言进行自动的计算处理。它包括两类算法：将人类产生的文本作为输入；产生看上去很自然的文本作为输出。\n引言自然语言处理中的深度学习将神经网络用于语言的一个主要组件是使用嵌入层，即将离散的符号映射为相对低维的连续向量。\n有两种主要的神经网络，即前馈网络和循环/递归网络，它们可以以各种方式组合。\n前馈网络：也叫多层感知机（MLP），其输入大小固定，对于变化的输入长度，我们可以忽略元素的顺序。网络的非线性以及易于整合预训练词嵌入的能力经常导致更高的分类精度。卷积前馈网络是一类特殊的结构，其善于抽取数据中有意义的局部模式，这些工作适合于识别长句子或者文本中有指示性的短语和惯用语。\n循环神经网络（RNN）：是适于序列数据的特殊模型，网络接收输入序列作为输入，产生固定大小的向量作为序列的摘要。语言模型：指预测序列中下一个单词的频率（等价于预测下一个序列的概率），是许多自然语言处理应用的核心。\n有监督分类与前馈神经网络学习基础与线性模型留一法：在训练过程中，我们必须评估已训练函数在未见实例上的准确率。一种方法是留一交叉验证\n留存集：就计算时间而言，一个更有效的方法是划分训练集为两个子集，在较大的子集（训练集）上训练模型，在较小的子集（留存集）上测试模型的准确率。\n三路划分：训练集、验证集和测试集。\n独热（one-hot）和稠密向量表示连续单词词袋\n训练和最优化损失函数hinge(二分类)hinge(多分类)\n二元交叉熵 ：二元交叉熵损失也叫做Logistic损失，被用于输出为条件概率分布的二元分类中。\n分类交叉熵损失\n等级损失\n正则化通过向优化目标中加入正则化R来完成以上的目的，这样做可以控制参数值的复杂性，避免过拟合情况的发生。R的常用选择有L2范数、L1范数和弹性网络。\n基于梯度的最优化随机梯度下降\n前馈神经网络常见非线性函数sigmoid  ：sigmoid激活函数$\\sigma(x)=1/(1+e^{-x})$，也称作逻辑斯蒂函数，是一个S型的函数。它将每一个值$x$变换到[0,1]区间中。\ntanh(双曲正切)：双曲正切激活函数$tanh(x)={e^{2x}+1\\over e{2x}+1}$是一个S型函数，它将值$x$变换到[-1,1]区间中。\n线性修正单元（ReLU）：修正激活函数，也被称为修正线性单元，是一种非常简单的激活函数。\n正则化与丢弃法相似和距离层点积\n欧氏距离\n神经网络计算与线性模型相似，神经网络也是可微分的参数化函数，它使用了基于梯度的优化方法来进行训练。\n前向计算反向计算（导数、反向传播）\n处理自然语言数据文本特征构造NLP分类问题中的拓扑结构通常来说，自然语言中的分类问题能够被分为几个宽泛的方向，其依赖于被分类的事项。词文本成对文本上下文中的词词之间的关系\n","slug":"基于深度学习的自然语言处理","date":"2022-11-03T14:20:49.000Z","categories_index":"机器学习","tags_index":"NLP","author_index":"Algernon"},{"id":"0ace423a65608d78c82e5378fc3daeb8","title":"【电子羊的奇妙冒险 】初试深度学习（4）","content":"代码注释随机数\n\n\n\n\n\n\n\n\n出于我们的目的，我将创建一组具有根的此类多项式。实际上，我将首先创建根，然后创建多项式，如下所示：\nimport numpy as np\n\nMIN_ROOT &#x3D; -1\nMAX_ROOT &#x3D; 1\n\ndef make(n_samples, n_degree):\n    global MIN_ROOT, MAX_ROOT\n    y &#x3D; np.random.uniform(MIN_ROOT, MAX_ROOT, (n_samples, n_degree))\n    y.sort(axis&#x3D;1) #，排序，参数axis &#x3D; 1表示列,而0表示行\n    X &#x3D; np.array([np.poly(_) for _ in y])\n    #numpy.poly(seq)：给出多项式根的序列，此函数返回多项式的系数\n    #array()创建数组\n    return X, y\n#y为根，X为多项式系数\n# toy case\nX, y &#x3D; make(1, 2)\nprint(X)\nprint(y)\n\n\n\n\n\n\n\n\n\nuniform() 方法将随机生成下一个实数，它在 [x, y] 范围内参见https://www.runoob.com/python/func-number-uniform.html\n以下是 uniform() 方法的语法:\nimport numpy as np\n\nnp.random.uniform(x, y, size)\n注意：uniform()是不能直接访问的，需要导入 random 模块，然后通过 random 静态对象调用该方法。参数：\n\n\n\n\n\n\n\n\n\nx — 随机数的最小值，包含该值。y — 随机数的最大值，包含该值。size: 输出样本数目，为int或元组(tuple)类型，例如，size=(m,n,k), 则输出m  nk个样本，缺省时输出1个 实数\n返回值：\n\n\n\n\n\n\n\n\n\n取值范围为如果 x&lt;y 则 x &lt;= N &lt;= y，如果 y&lt;x 则y &lt;= N &lt;= xndarray类型，其形状和参数size中描述一致\n划分数据集\n# make and train test split\nN_SAMPLES &#x3D; 100000  #样例数为100000\nDEGREE &#x3D; 5 #数据集根为5，多项式系数数量为5+1\nX_train, y_train &#x3D; make(int(N_SAMPLES*0.8), DEGREE)\nX_test, y_test &#x3D; make(int(N_SAMPLES*0.2), DEGREE)\n#训练集&#x2F;测试集 二八分\nprint(X_train.shape, y_train.shape)\nprint(X_test.shape, y_test.shape)\n#np.shape 读取数组长度\nreshape# some dimensionality handling below\n# this is because keras expects 3d tensors (a seq of onehot encoded characters) \n# but we have 2d tensors; just a sequence of numbers.\n\n\ndef reshape(array):\n    return np.expand_dims(array, -1)\n    \n    \nprint(reshape(X_test).shape)  # batchsize, timesteps, input_dim (or &quot;vocab_size&quot;)\nprint(reshape(y_test).shape) \n#注释上写到了，因为keras需要3d，所以使用np.expand_dims()补充一个轴的数据\n模型建立from keras.models import Sequential\nfrom keras.layers import LSTM, RepeatVector, Dense, TimeDistributed\n\n\nhidden_size &#x3D; 128 #隐含层中，隐含节点的个数，LSTM里每一块都是一个全连接的神经网络，那么hidden_size就是这个神经网络的每一层的节点数目\nmodel &#x3D; Sequential()\n\n# ENCODER PART OF SEQ2SEQ\nmodel.add(LSTM(hidden_size, input_shape&#x3D;(DEGREE+1, 1)))\n#input_shape就是指输入张量的shape\n\n# DECODER PART OF SEQ2SEQ\nmodel.add(RepeatVector(DEGREE))  # this determines the length of the output sequence\n#RepeatVector（n）改变输入维数为n\n\nmodel.add((LSTM(hidden_size, return_sequences&#x3D;True)))\nmodel.add(TimeDistributed(Dense(1)))\n\nmodel.compile(loss&#x3D;&#39;mean_absolute_error&#39;,\n              optimizer&#x3D;&#39;adam&#39;,\n              metrics&#x3D;[&#39;mae&#39;])\n              \n&#39;&#39;&#39;\nmodel.compile(optimizer &#x3D; 优化器，\n\n                        loss &#x3D; 损失函数，模型模型预测的好坏，表现预测与实际数据的差距程度\n\n                        metrics &#x3D; [&quot;准确率”])\n&#39;&#39;&#39;\n\nprint(model.summary())\n\nSequential模型详见链接\n\nhttps://blog.csdn.net/mogoweb/article/details/82152174\nreturn_sequences: Boolean. 是否返回最后一个输出或是整个序列的输出，默认是False\nTimeDistributed用法：https://blog.csdn.net/u012193416/article/details/79477220\nUsing TensorFlow backend.\n\n\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nlstm_1 (LSTM)                (None, 128)               66560     \n_________________________________________________________________\nrepeat_vector_1 (RepeatVecto (None, 5, 128)            0         \n_________________________________________________________________\nlstm_2 (LSTM)                (None, 5, 128)            131584    \n_________________________________________________________________\ntime_distributed_1 (TimeDist (None, 5, 1)              129       \n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nTotal params: 198,273\nTrainable params: 198,273\nNon-trainable params: 0\n_________________________________________________________________\nNone\n\n注释：\n# Param &#x3D; （输入数据维度+1）* 神经元个数\n模型定义BATCH_SIZE &#x3D; 128\nmodel.fit(reshape(X_train),\n          reshape(y_train),\n          batch_size&#x3D;BATCH_SIZE,\n          epochs&#x3D;5, #迭代次数\n          verbose&#x3D;1, #verbose：日志显示\n          validation_data&#x3D;(reshape(X_test), \n                           reshape(y_test)))\n&#39;&#39;&#39;\nbatch_size：表示单次传递给程序用以训练的参数个数。\n比如我们的训练集有1000个数据。\n这是如果我们设置batch_size&#x3D;100，\n那么程序首先会用数据集中的前100个参数，\n即第1-100个数据来训练模型。\n当训练完成后更新权重，再使用第101-200的个数据训练，\n直至第十次使用完训练集中的1000个数据后停止\n\nmodel.fit()⽅法⽤于执⾏训练过程。\nmodel.fit( 训练集的输⼊特征，\n                 训练集的标签，  \n                 batch_size,  #每⼀个batch的⼤⼩\n                 epochs,   #迭代次数\n                 validation_data &#x3D; (测试集的输⼊特征，测试集的标签），\n                 validation_split &#x3D; 从测试集中划分多少⽐例给训练集，\n                 validation_freq &#x3D; 测试的epoch间隔数）\n\nmodel.fit 中的 verbose\nverbose：日志显示\nverbose &#x3D; 0 为不在标准输出流输出日志信息\nverbose &#x3D; 1 为输出进度条记录\nverbose &#x3D; 2 为每个epoch输出一行记录\n注意： 默认为 1\n\n&#39;&#39;&#39;\n预测数据y_pred &#x3D; model.predict(reshape(X_test))\ny_pred &#x3D; np.squeeze(y_pred)\n\n&#39;&#39;&#39;\nmodel.predict\n输入测试数据,输出预测结果\n(通常用在需要得到预测结果的时候)\n#模型预测,输入测试集,输出预测结果\n    y_pred &#x3D; model.predict(X_test,batch_size &#x3D; 1）\n    \nsqueeze 函数：从数组的形状中删除单维度条目，即把shape中为1的维度去掉\n用法：numpy.squeeze(a,axis &#x3D; None)\n 1）a表示输入的数组；\n 2）axis用于指定需要删除的维度，但是指定的维度必须为单维度，否则将会报错；\n 3）axis的取值可为None 或 int 或 tuple of ints, 可选。若axis为空，则删除所有单维度的条目；\n 4）返回值：数组\n 5) 不会修改原数组；\n\n&#39;&#39;&#39;\n\n\n\n\n\n\n\n\n\n\n现在有一个功能可以帮助我们比较，我们可以重用\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n\ndef get_evals(polynomials, roots):\n    evals &#x3D; [\n        [np.polyval(poly, r) for r in root_row]\n        for (root_row, poly) in zip(roots, polynomials)\n    ]\n    evals &#x3D; np.array(evals).ravel()\n    return evals\n    \n\ndef compare_to_random(y_pred, y_test, polynomials):\n    y_random &#x3D; np.random.uniform(MIN_ROOT, MAX_ROOT, y_test.shape)\n    y_random.sort(axis&#x3D;1)\n    \n    fig, axes &#x3D; plt.subplots(1, 2, figsize&#x3D;(12, 6)) #画图，figsize为图像尺寸\n    ax &#x3D; axes[0]\n    ax.hist(np.abs((y_random-y_test).ravel()),   #ravel()方法将数组维度拉成一维数组\n            alpha&#x3D;.4, label&#x3D;&#39;random guessing&#39;) \n     #ax.hist()绘制直方图\n    ax.hist(np.abs((y_pred-y_test).ravel()), \n            color&#x3D;&#39;r&#39;, alpha&#x3D;.4, label&#x3D;&#39;model predictions&#39;)\n    ax.set(title&#x3D;&#39;Histogram of absolute errors&#39;,\n           ylabel&#x3D;&#39;count&#39;, xlabel&#x3D;&#39;absolute error&#39;)\n    ax.legend(loc&#x3D;&#39;best&#39;)\n\n    ax &#x3D; axes[1]\n    random_evals &#x3D; get_evals(polynomials, y_random)\n    predicted_evals &#x3D; get_evals(polynomials, y_pred)\n    pd.Series(random_evals).plot.kde(ax&#x3D;ax, label&#x3D;&#39;random guessing kde&#39;)\n    pd.Series(predicted_evals).plot.kde(ax&#x3D;ax, color&#x3D;&#39;r&#39;, label&#x3D;&#39;model prediction kde&#39;)\n    title &#x3D; &#39;Kernel Density Estimate plot\\n&#39; \\\n            &#39;for polynomial evaluation of (predicted) roots&#39;\n    ax.set(xlim&#x3D;[-.5, .5], title&#x3D;title)\n    ax.legend(loc&#x3D;&#39;best&#39;)\n    \n    fig.tight_layout()\ncompare_to_random(y_pred, y_test, X_test)\n&#39;&#39;&#39;\n#polyval计算多项式的函数值。返回在x处多项式的值，p为多项式系数，元素按多项式降幂排序\ny&#x3D;polyval(p,x)\n\nravel()方法将数组维度拉成一维数组\n&#39;&#39;&#39;\n\n关于AXES用法详见：\n\n\n\n\n\n\n\n\n\nhttps://article.itxueyuan.com/vOQMg9\n绘图\n\n\n\n\n\n\n\n\n\n在左图中，请注意预测的根（红色条）如何更接近真实根（即红色条在 0.25 之后较小）。在右侧，请注意红色曲线在零附近有多紧。也就是说，在模型预测的根上，多项式评估的预期分布非常紧密地包含在零附近。至少这与e随机评估之间存在明显差异。\n求解不同程度多项式MAX_DEGREE &#x3D; 15\nMIN_DEGREE &#x3D; 5 #大于4小于16次的多项式（5~15）\nMAX_ROOT &#x3D; 1\nMIN_ROOT &#x3D; -1\nN_SAMPLES &#x3D; 10000 * (MAX_DEGREE-MIN_DEGREE+1) #每一项都给出10000个示例，括号内为多项式各项总数，比如，三元一次方程左侧多项式为4项\n\n\ndef make(n_samples, max_degree, min_degree, min_root, max_root):\n    samples_per_degree &#x3D; n_samples &#x2F;&#x2F; (max_degree-min_degree+1) #均分数据示例\n    n_samples &#x3D; samples_per_degree * (max_degree-min_degree+1) #得到相同数量示例之和\n    X &#x3D; np.zeros((n_samples, max_degree+1)) #返回来一个给定形状和类型的用0填充的数组\n    # XXX: filling the truth labels with ZERO??? EOS character would be nice\n    y &#x3D; np.zeros((n_samples, max_degree, 2))\n    for i, degree in enumerate(range(min_degree, max_degree+1)):\n        y_tmp &#x3D; np.random.uniform(min_root, max_root, (samples_per_degree, degree))\n        y_tmp.sort(axis&#x3D;1)\n        X_tmp &#x3D; np.array([np.poly(_) for _ in y_tmp])\n        \n        root_slice_y &#x3D; np.s_[\n            i*samples_per_degree:(i+1)*samples_per_degree,\n            :degree,\n            0]\n        pad_slice_y &#x3D; np.s_[\n            i*samples_per_degree:(i+1)*samples_per_degree,\n            degree:,\n            1]\n        this_slice_X &#x3D; np.s_[\n            i*samples_per_degree:(i+1)*samples_per_degree,\n            -degree-1:]\n        \n        y[root_slice_y] &#x3D; y_tmp \n        y[pad_slice_y] &#x3D; 1\n        X[this_slice_X] &#x3D; X_tmp\n    return X, y\n\ndef make_this():\n    global MAX_DEGREE, MIN_DEGREE, MAX_ROOT, MIN_ROOT, N_SAMPLES\n    return make(N_SAMPLES, MAX_DEGREE, MIN_DEGREE, MIN_ROOT, MAX_ROOT)\n\n\nfrom sklearn.model_selection import train_test_split\nX, y &#x3D; make_this()\nX_train, X_test, y_train, y_test &#x3D; train_test_split(X, y, test_size&#x3D;0.25)\n\n&#39;&#39;&#39;\ntest_size：可以为浮点、整数或None，默认为None\n\n①若为浮点时，表示测试集占总样本的百分比\n\n②若为整数时，表示测试样本样本数\n\n③若为None时，test size自动设置成0.25\n&#39;&#39;&#39;\n\n\nprint(&#39;X shapes&#39;, X.shape, X_train.shape, X_test.shape)\nprint(&#39;y shapes&#39;, y.shape, y_train.shape, y_test.shape)\nprint(&#39;-&#39;*80)\nprint(&#39;This is an example root sequence&#39;)\nprint(y[0])\n\n改变模型hidden_size &#x3D; 128\nmodel &#x3D; Sequential()\n\nmodel.add(LSTM(hidden_size, input_shape&#x3D;(MAX_DEGREE+1, 1)))\nmodel.add(RepeatVector(MAX_DEGREE))\nmodel.add((LSTM(hidden_size, return_sequences&#x3D;True)))\nmodel.add(TimeDistributed(Dense(2)))\n\nmodel.compile(loss&#x3D;&#39;mean_absolute_error&#39;,\n              optimizer&#x3D;&#39;adam&#39;,\n              metrics&#x3D;[&#39;mae&#39;])\n\nprint(model.summary())\n\n训练模型BATCH_SIZE &#x3D; 12\nmodel.fit(reshape(X_train), y_train,\n          batch_size&#x3D;BATCH_SIZE,\n          epochs&#x3D;10,\n          verbose&#x3D;1,\n          validation_data&#x3D;(reshape(X_test), y_test))\n\n预测数据y_pred &#x3D; model.predict(reshape(X_test))\npad_or_not &#x3D; y_pred[:, :, 1].ravel()\nfig, ax &#x3D; plt.subplots()\nax.set(title&#x3D;&#39;histogram for predicting PAD&#39;,\n       xlabel&#x3D;&#39;predicted value&#39;,\n       ylabel&#x3D;&#39;count&#39;)\nax.hist(pad_or_not, bins&#x3D;5);\n#bins 指定条带bar 的总个数，个数越多，条形带越紧密\n&#39;&#39;&#39;\nbins ：数字或者序列（数组&#x2F;列表等）。如果是数字，代表的是要分成多少组。如果是序\n列，那么就会按照序列中指定的值进行分组。比如 [1,2,3,4] ，那么分组的时候会按照三个\n区间分成3组，分别是 [1,2)&#x2F;[2,3)&#x2F;[3,4] \n&#39;&#39;&#39;\nthr &#x3D; 0.5\n\n\ndef how_many_roots(predicted):\n    global thr\n    return np.sum(predicted[:, 1] &lt; thr)\n\n\ntrue_root_count &#x3D; np.array(list(map(how_many_roots, y_test)))\npred_root_count &#x3D; np.array(list(map(how_many_roots, y_pred)))\nfrom collections import Counter\nfor key, val in Counter(true_root_count - pred_root_count).items():\n    print(&#39;off by &#123;&#125;: &#123;&#125; times&#39;.format(key, val))\n\n模型检验index &#x3D; np.where(true_root_count &#x3D;&#x3D; pred_root_count)[0]\nindex &#x3D; np.random.choice(index, 1000, replace&#x3D;False)\n\npredicted_evals, random_evals &#x3D; [], []\nrandom_roots_list &#x3D; []\npredicted_roots_list &#x3D; []\ntrue_roots_list &#x3D; []\nfor i in index:\n    predicted_roots &#x3D; [row[0] for row in y_pred[i] if row[1] &lt; thr]\n    true_roots &#x3D; [row[0] for row in y_test[i] if row[1] &#x3D;&#x3D; 0]\n    random_roots &#x3D; np.random.uniform(MIN_ROOT, MAX_ROOT, len(predicted_roots))\n    random_roots &#x3D; sorted(random_roots)\n    random_roots_list.extend(random_roots)\n    predicted_roots_list.extend(predicted_roots)\n    true_roots_list.extend(true_roots)\n    for predicted_root, random_root in zip(predicted_roots, random_roots):\n        predicted_evals.append(\n            np.polyval(X_test[i], predicted_root))\n        random_evals.append(\n            np.polyval(X_test[i], random_root))\n        \nassert len(true_roots_list) &#x3D;&#x3D; len(predicted_roots_list)\nassert len(random_roots_list) &#x3D;&#x3D; len(predicted_roots_list)\ntrue_roots_list &#x3D; np.array(true_roots_list)\nrandom_roots_list &#x3D; np.array(random_roots_list)\npredicted_roots_list &#x3D; np.array(predicted_roots_list)\nfig, axes &#x3D; plt.subplots(1, 2, figsize&#x3D;(12, 6))\nax &#x3D; axes[0]\nax.hist(np.abs(random_roots_list - true_roots_list),\n        alpha&#x3D;.4, label&#x3D;&#39;random guessing&#39;) \nax.hist(np.abs(predicted_roots_list - true_roots_list),\n        color&#x3D;&#39;r&#39;, alpha&#x3D;.4, label&#x3D;&#39;model predictions&#39;)\nax.set(title&#x3D;&#39;Histogram of absolute errors&#39;,\n       ylabel&#x3D;&#39;count&#39;, xlabel&#x3D;&#39;absolute error&#39;)\nax.legend(loc&#x3D;&#39;best&#39;)\n\nax &#x3D; axes[1]\npd.Series(random_evals).plot.kde(ax&#x3D;ax, label&#x3D;&#39;random guessing kde&#39;)\npd.Series(predicted_evals).plot.kde(ax&#x3D;ax, color&#x3D;&#39;r&#39;, label&#x3D;&#39;model prediction kde&#39;)\ntitle &#x3D; &#39;Kernel Density Estimate plot\\n&#39; \\\n        &#39;for polynomial evaluation of (predicted) roots&#39;\nax.set(xlim&#x3D;[-.5, .5], title&#x3D;title)\nax.legend(loc&#x3D;&#39;best&#39;)\n\nfig.tight_layout()\n\n高斯噪声的添加首先，我们采用较小数据集：\nN_SAMPLES &#x3D; 100000\nDEGREE &#x3D; 5\n对数据集加噪声未加噪声（1）：未加噪声（2）：(sigma=0)-1(sigma=0)-2:(sigma=0.05):(sigma=0.5):(sigma=1):问题不大。\n在函数中加噪声def make(n_samples, n_degree):\n    global MIN_ROOT, MAX_ROOT\n    y &#x3D; np.random.uniform(MIN_ROOT, MAX_ROOT, (n_samples, n_degree))\n    y.sort(axis&#x3D;1)\n    X &#x3D; np.array([np.poly(_) for _ in y])\n    gauss_noisy(X, y)\n    return X, y\n(sigma=0)\n（sigma=0.01）:（sigma=0.05）:（sigma=0.1）:（sigma=0.1）:\n\n在训练集中加噪声gauss_noisy(X_train, y_train)\n（sigma=0.05）:（sigma=0.05,epoch=10,l=4）:l为神经网络层数（sigma=0.1）:\n（sigma=0.1,epoch=5,l=4）:l为神经网络层数\n（sigma=0.1,epoch=10,l=4）:l为神经网络层数\n（sigma=0.5,epoch=5,l=2）:l为神经网络层数\n","slug":"电子羊4","date":"2022-11-03T14:18:49.000Z","categories_index":"机器学习","tags_index":"深度学习","author_index":"Algernon"},{"id":"f0027b7e0577432cae210c02a7d12c2f","title":"【python机器学习基础教程】（二）","content":"监督学习监督学习算法朴素贝叶斯分类器朴素贝叶斯分类器通过单独查看每个特征来学习参数，并从每个特征中收集简单的类别统计数据。scikit-learn中实现了三种朴素贝叶斯分类器：GaussianNB、BernoulliNB和MultinomialNB。GaussianNB可应用于任意连续数据，而BernoulliNB假定输入数据为二分类数据，MultinomialNB假定输入数据为计数数据（即每个特征代表某个对象的整数计数，比如一个单词在句子里出现的次数）。BernoulliNB和MultinomialNB主要用于文本数据分类。BernoulliNB分类器计算每个类别中每个特征不为0的元素个数。\n决策树mglearn.plots.plot_animal_tree()\n在这张图中，树的每一个结点代表一个问题或一个包含答案的终结点（也叫叶结点）\n防止过拟合有两种常见的策略：一种是及早停止树的生长，也叫预剪枝；另一种是先构造树，但随后删除或折叠信息量很少的结点，也叫后剪枝。\n决策树集成集成是合并多个机器学习模型来构建更强大模型的方法。已证明有两种集成模型对大量分类和回归 的数据集都是有效的，二者都以决策树为基础，分别是随机森林和梯度提升决策树\n随机森林构造随机森林分析随机森林下面将5棵树组成的随机森林应用到two_moons数据集\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import make_moons\n\nX,y&#x3D;make_moons(n_samples&#x3D;100,noise&#x3D;0.25,random_state&#x3D;3)\nX_train,X_test,y_train,y_test&#x3D;train_test_split(X,y,stratify&#x3D;y,random_state&#x3D;42)\n\nforest&#x3D;RandomForestClassifier(n_estimators&#x3D;5,random_state&#x3D;2)\nforest.fit(X_train,y_train)\n作为随机森林的一部分，树被保存在estimator_属性中。\nfig,axes&#x3D;plt.subplots(2,3,figsize&#x3D;(20,10))\nfor i,(ax,tree) in enumerate(zip(axes.ravel(),forest.estimators_)):\n    ax.set_title(&quot;Tree&#123;&#125;&quot;.format(i))\n    mglearn.plots.plot_tree_partition(X_train,y_train,tree,ax&#x3D;ax)\nmglearn.plots.plot_2d_separator(forest,X_train,fill&#x3D;True,ax&#x3D;axes[-1,1],alpha&#x3D;.4)\naxes[-1,1].set_title(&quot;Random Forest&quot;)\nmglearn.discrete_scatter(X_train[:,0],X_train[:,1],y_train)\n\ndef plot_feature_importances_cancer(model):\n     n_features&#x3D;cancer.data.shape[1]\n     plt.barh(range(n_features),model.feature_importances_,align&#x3D;&#39;center&#39;)\n     plt.yticks(np.arange(n_features),cancer.feature_names)\n     plt.xlabel(&quot;Feature importance&quot;)\n     plt.ylabel(&quot;Feature&quot;)\n\n\nfrom sklearn.datasets import load_breast_cancer\ncancer&#x3D;load_breast_cancer()\nX_train,X_test,y_train,y_test&#x3D;train_test_split(cancer.data,cancer.target,random_state&#x3D;0)\nforest&#x3D; RandomForestClassifier(n_estimators&#x3D;100,random_state&#x3D;0)\nforest.fit(X_train,y_train)\n\nplot_feature_importances_cancer(forest)\n拟合乳腺癌数据集得到的随机森林的特征重要性。\n梯度提升 回归树（梯度提升机）梯度提升回归树是另一种集成方法，通过合并多个决策树来构建一个更强大的模型。\n梯度提升背后的主要思想是合并许多简单的模型（在这个语境中叫做弱学习器），比如深度较小的树。每棵树只能对部分数据做出好的预测，因此，添加的树越来越多，可以不断提高迭代性能。\n除了预剪枝与集成中树的数量外，梯度提升的另一个重要参数是learning_rate（学习率），用以控制每棵树纠正前一棵树的错误的强度。\n核支持向量机核支持向量机（SVM）是可以推广到更复杂模型的扩展，这些模型无法被输入空间的超平面定义。\n线性模型和非线性特征from sklearn.datasets import make_blobs\nX,y&#x3D;make_blobs(centers&#x3D;4,random_state&#x3D;8)\ny&#x3D;y%2\n\nmglearn.discrete_scatter(X[:,0],X[:,1],y)\nplt.xlabel(&quot;Feature 0&quot;)\nplt.ylabel(&quot;Feature 1&quot;)\n二分类数据集，其类别并不是线性可分的：\nfrom sklearn.svm import LinearSVC\nlinear_svm &#x3D; LinearSVC().fit(X,y)\n\nmglearn.plots.plot_2d_separator(linear_svm ,X)\nmglearn.discrete_scatter(X[:,0],X[:,1],y)\nplt.xlabel(&quot;Feature 0&quot;)\nplt.ylabel(&quot;Feature 1&quot;)\n现在我们对输入特征进行扩展，比如说添加第二个特征的平方（feature1 **2）作为一个新特征。现在我们将每个数据点表示为三维数据点，这个新的表示可以画成三维散点图：\nX_new &#x3D; np.hstack([X,X[:,1:]**2])\n\nfrom mpl_toolkits.mplot3d import Axes3D,axes3d\nfigure&#x3D;plt.figure()\n\nax&#x3D; Axes3D(figure,elev&#x3D;-152,azim&#x3D;-26)\n\nmask&#x3D;y&#x3D;&#x3D;0\nax.scatter(X_new[mask,0],X_new[mask,1],X_new[mask,2],c&#x3D;&#39;b&#39;,cmap&#x3D;mglearn.cm2,s&#x3D;60)\nax.scatter(X_new[~mask,0],X_new[~mask,1],X_new[~mask,2],c&#x3D;&#39;r&#39;,marker&#x3D;&#39;^&#39;,cmap&#x3D;mglearn.cm2,s&#x3D;60)\nax.set_xlabel(&quot;feature0&quot;)\nax.set_ylabel(&quot;feature1&quot;)\nax.set_zlabel(&quot;feature1 **2&quot;)\n在数据的新表示中，现在可以用线性模型（三维空间中的平面）将这两个类别分开。我们可以用线性模型拟合扩展后的数据来验证这一点：\nlinear_svm_3d&#x3D;LinearSVC().fit(X_new,y)\ncoef,intercept&#x3D;linear_svm_3d.coef_.ravel(),linear_svm_3d.intercept_\n\nfigure&#x3D;plt.figure()\nax&#x3D; Axes3D(figure,elev&#x3D;-152,azim&#x3D;-26)\nxx&#x3D;np.linspace(X_new[:,0].min()-2,X_new[:,0].max()+2,50)\nyy&#x3D;np.linspace(X_new[:,1].min()-2,X_new[:,1].max()+2,50)\n\nXX,YY &#x3D;np.meshgrid(xx,yy)\nZZ&#x3D;(coef[0]*XX+coef[1]*YY+intercept)&#x2F;-coef[2]\nax.plot_surface(XX,YY,ZZ,rstride&#x3D;8,cstride&#x3D;8,alpha&#x3D;0.3)\nax.scatter(X_new[mask,0],X_new[mask,1],X_new[mask,2],c&#x3D;&#39;b&#39;,cmap&#x3D;mglearn.cm2,s&#x3D;60)\nax.scatter(X_new[~mask,0],X_new[~mask,1],X_new[~mask,2],c&#x3D;&#39;r&#39;,marker&#x3D;&#39;^&#39;,cmap&#x3D;mglearn.cm2,s&#x3D;60)\nax.set_xlabel(&quot;feature0&quot;)\nax.set_ylabel(&quot;feature1&quot;)\nax.set_zlabel(&quot;feature1 **2&quot;)\n线性SVM对扩展后的三维数据集给出的决策边界如果将线性SVM模型看作原始特征的函数，那么它实际上已经不是线性的了。它不是一条直线，而是一个椭圆。\nZZ&#x3D;YY**2\ndec&#x3D;linear_svm_3d.decision_function(np.c_[XX.ravel(),YY.ravel(),ZZ.ravel()])\nplt.contourf(XX,YY,dec.reshape(XX.shape),levels&#x3D;[dec.min(),0,dec.max()],cmap&#x3D;mglearn.cm2,alpha&#x3D;0.5)\nmglearn.discrete_scatter(X[:,0],X[:,1],y)\nplt.xlabel(&quot;Feature 0&quot;)\nplt.ylabel(&quot;Feature 1&quot;)\n\n核技巧核技巧的原理是：直接计算扩展特征表示中数据点之间的距离（内积），而不用实际对扩展进行计算。\n对于支持向量机，将数据映射到更高维空间中有两种常用 方法：一种是多项式核，在一定阶数内计算原始特征所有可能的多项式；另一种是径向基函数核，也叫高斯核。\n理解SVM在训练过程中，SVM学习每个训练数据点对于两个类别之间的决策边界的重要性。通常只有一部分训练数据点对于定义决策边界来说很重要：位于类别之间边界上的那些点。这些点叫做支持向量，支持向量机正是由此得名。\n下图是支持向量机对一个二维二分类数据集上的训练结果。决策边界用黑色表示，支持向量是尺寸较大的点。下列代码将在forge数据集上训练SVM并创建此图。\nfrom sklearn.svm import SVC\nX,y&#x3D;mglearn.tools.make_handcrafted_dataset()\nsvm&#x3D;SVC(kernel&#x3D;&#39;rbf&#39;,C&#x3D;10,gamma&#x3D;0.1).fit(X,y)\nmglearn.plots.plot_2d_separator(svm,X,eps&#x3D;.5)\nmglearn.discrete_scatter(X[:,0],X[:,1],y)\n\nsv&#x3D;svm.support_vectors_\n\nsv_labels&#x3D;svm.dual_coef_.ravel()&gt;0\nmglearn.discrete_scatter(sv[:,0],sv[:,1],sv_labels,s&#x3D;15,markeredgewidth&#x3D;3)\nplt.xlabel(&quot;Feature 0&quot;)\nplt.ylabel(&quot;Feature 1&quot;)\nRBF核SVM给出的决策边界和支持向量\nfig,axes&#x3D;plt.subplots(3,3,figsize&#x3D;(15,10))\nfor ax,C in zip(axes,[-1,0,3]):\n    for a,gamma in zip(ax,range(-1,2)):\n        mglearn.plots.plot_svm(log_C&#x3D;C,log_gamma&#x3D;gamma,ax&#x3D;a)\naxes[0,0].legend([&quot;class 0&quot;,&quot;class 1&quot;,&quot;sv class 0&quot;,&quot;sv class 1&quot;],ncol&#x3D;4,loc&#x3D;(.9,1.2))\n\n神经网络（深度学习）此时此处只讨论相对简单的方法，即用于分类和回归的多层感知机（MLP）。\nMLP也被称为（普通）前馈神经网络，有时也简称为神经网络。线性回归的预测公式为：\n$\\hat{y}=w[0]x[0]+w[1]x[1]+···+w[p]*x[p]+b$简单来说，$\\hat{y}$是输入特征$x[0]$到$x[p]$的加权求和，权重为学到的系数$w[0]$到$w[p]$.我们将这个公式可视化：\ndisplay(mglearn.plots.plot_logistic_regression_graph())\n\n\n\n\n\n\n\n\n\ndigraph {graph [rankdir=LR splines=line]node [fixedsize=True shape=circle]subgraph cluster_0 {    node [shape=circle]    “x[0]” [labelloc=c]    “x[1]” [labelloc=c]    “x[2]” [labelloc=c]    “x[3]” [labelloc=c]label = “inputs”    color = “white”    }subgraph cluster_2 {    node [shape=circle]label = “output”    color = “white”        y}“x[0]” -&gt; y [label=”w[0]”]“x[1]” -&gt; y [label=”w[1]”]“x[2]” -&gt; y [label=”w[2]”]“x[3]” -&gt; y [label=”w[3]”]}\ndisplay(mglearn.plots.plot_single_hidden_layer_graph())\n\n\n\n\n\n\n\n\n\ndigraph {graph [rankdir=LR splines=line]node [fixedsize=True shape=circle]subgraph cluster_0 {    node [shape=circle]    “x[0]”    “x[1]”    “x[2]”    “x[3]”label = “inputs”    color = “white”    }subgraph cluster_1 {    node [shape=circle]label = “hidden layer”    color = “white”        h0 [label=”h[0]”]    h1 [label=”h[1]”]    h2 [label=”h[2]”]}subgraph cluster_2 {    node [shape=circle]    ylabel = “output”    color = “white”    }“x[0]” -&gt; h0“x[0]” -&gt; h1“x[0]” -&gt; h2“x[1]” -&gt; h0“x[1]” -&gt; h1“x[1]” -&gt; h2“x[2]” -&gt; h0“x[2]” -&gt; h1“x[2]” -&gt; h2“x[3]” -&gt; h0“x[3]” -&gt; h1“x[3]” -&gt; h2h0 -&gt; yh1 -&gt; yh2 -&gt; y}\nline &#x3D; np.linspace(-3, 3, 100)\nplt.plot(line, np.tanh(line), label&#x3D;&quot;tanh&quot;)\nplt.plot(line, np.maximum(line, 0), label&#x3D;&quot;relu&quot;)\nplt.legend(loc&#x3D;&quot;best&quot;)\nplt.xlabel(&quot;x&quot;)\nplt.ylabel(&quot;relu(x), tanh(x)&quot;)\nplt.show()\n双曲正切激活函数与校正线性激活函数\n神经网络调参我们将MLPClassifier应用到之前用过的teo_moons数据集上，以此研究MLP的工作原理。\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.datasets import make_moons\n\nX,y&#x3D;make_moons(n_samples&#x3D;100,noise&#x3D;0.25,random_state&#x3D;3)\n\nX_train,X_test,y_train,y_test&#x3D;train_test_split(X,y,stratify&#x3D;y,random_state&#x3D;42)\n\nmlp&#x3D;MLPClassifier(solver&#x3D;&#39;lbfgs&#39;,random_state&#x3D;0).fit(X_train,y_train)\nmglearn.plots.plot_2d_separator(mlp,X_train,fill&#x3D;True,alpha&#x3D;.3)\nmglearn.discrete_scatter(X_train[:,0],X_train[:,1],y_train)\nplt.xlabel(&quot;Feature 0&quot;)\nplt.ylabel(&quot;Feature 1&quot;)\n\n包含100个隐单元的神经网络在two_moons数据集上学到的决策边界\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.datasets import make_moons\n\nX,y&#x3D;make_moons(n_samples&#x3D;100,noise&#x3D;0.25,random_state&#x3D;3)\n\nX_train,X_test,y_train,y_test&#x3D;train_test_split(X,y,stratify&#x3D;y,random_state&#x3D;42)\n\nmlp&#x3D;MLPClassifier(solver&#x3D;&#39;lbfgs&#39;,random_state&#x3D;0,hidden_layer_sizes&#x3D;[10])\nmlp.fit(X_train,y_train)\nmglearn.plots.plot_2d_separator(mlp,X_train,fill&#x3D;True,alpha&#x3D;.3)\nmglearn.discrete_scatter(X_train[:,0],X_train[:,1],y_train)\nplt.xlabel(&quot;Feature 0&quot;)\nplt.ylabel(&quot;Feature 1&quot;)\n\n包含10个隐单元的神经网络在two_moons数据集上学到的决策边界只有10个隐单元时，决策边界看起来更加参差不齐。默认的非线性是relu。如果使用单隐层，那么决策函数将由10个直线段组成。如果想要得到更加平滑的决策边界，可以添加更多的隐单元、添加第二个隐层或者使用tanh非线性。\n#使用2个隐层，每个包含10个单元\nmlp&#x3D;MLPClassifier(solver&#x3D;&#39;lbfgs&#39;,random_state&#x3D;0,hidden_layer_sizes&#x3D;[10,10])\nmlp.fit(X_train,y_train)\nmglearn.plots.plot_2d_separator(mlp,X_train,fill&#x3D;True,alpha&#x3D;.3)\nmglearn.discrete_scatter(X_train[:,0],X_train[:,1],y_train)\nplt.xlabel(&quot;Feature 0&quot;)\nplt.ylabel(&quot;Feature 1&quot;)\n包含两个隐层、每个隐层包含10个隐单元的神经网络学到的决策边界(激活函数为relu)\n#使用2个隐层，每个包含10个单元，这次使用tanh非线性\nmlp&#x3D;MLPClassifier(solver&#x3D;&#39;lbfgs&#39;,activation&#x3D;&#39;tanh&#39;,random_state&#x3D;0,hidden_layer_sizes&#x3D;[10,10])\nmlp.fit(X_train,y_train)\nmglearn.plots.plot_2d_separator(mlp,X_train,fill&#x3D;True,alpha&#x3D;.3)\nmglearn.discrete_scatter(X_train[:,0],X_train[:,1],y_train)\nplt.xlabel(&quot;Feature 0&quot;)\nplt.ylabel(&quot;Feature 1&quot;)\n包含两个隐层、每个隐层包含10个隐单元的神经网络学到的决策边界(激活函数为tanh)\n为了在现实世界的数据上进一步理解神经网络，我们将MLPClassifier应用在乳腺癌数据集上。首先使用默认参数：\nfrom sklearn.datasets import load_breast_cancer\ncancer&#x3D;load_breast_cancer()\nprint(&quot;Cancer data per-feature maxima:\\n&#123;&#125;&quot;.format(cancer.data.max(axis&#x3D;0)))\n\n\n\n\n\n\n\n\n\n\nCancer data per-feature maxima:[2.811e+01 3.928e+01 1.885e+02 2.501e+03 1.634e-01 3.454e-01 4.268e-01 2.012e-01 3.040e-01 9.744e-02 2.873e+00 4.885e+00 2.198e+01 5.422e+02 3.113e-02 1.354e-01 3.960e-01 5.279e-02 7.895e-02 2.984e-02 3.604e+01 4.954e+01 2.512e+02 4.254e+03 2.226e-01 1.058e+00 1.252e+00 2.910e-01 6.638e-01 2.075e-01]\nX_train,X_test,y_train,y_test&#x3D;train_test_split(cancer.data,cancer.target,random_state&#x3D;0)\n\nmlp&#x3D;MLPClassifier(random_state&#x3D;42)\nmlp.fit(X_train,y_train)\n\nmean_on_train&#x3D;X_train.mean(axis&#x3D;0)\nstd_on_train&#x3D;X_train.std(axis&#x3D;0)\nX_train_scaled&#x3D;(X_train-mean_on_train)&#x2F;std_on_train\nX_test_scaled&#x3D;(X_test-mean_on_train)&#x2F;std_on_train\n\nmlp&#x3D;MLPClassifier(random_state&#x3D;0)\nmlp.fit(X_train_scaled,y_train)\n\nmlp&#x3D;MLPClassifier(max_iter&#x3D;1000,random_state&#x3D;0)\nmlp.fit(X_train,y_train)\n\nmlp&#x3D;MLPClassifier(max_iter&#x3D;1000,alpha&#x3D;1,random_state&#x3D;0)\nmlp.fit(X_train,y_train)\n\nplt.figure(figsize&#x3D;(20,5))\nplt.imshow(mlp.coefs_[0],interpolation&#x3D;&#39;none&#39;,cmap&#x3D;&#39;viridis&#39;)\nplt.yticks(range(30),cancer.feature_names)\nplt.xlabel(&quot;Columns in weight matrix&quot;)\nplt.ylabel(&quot;Input feature &quot;)\nplt.colorbar()\n\n\n分类器的不确定度估计决策函数对于二分类的情况，decision_function返回值的形状是（n_samples,）,为每个样本都返回一个浮点数：\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.datasets import make_circles\nX,y&#x3D;make_circles(noise&#x3D;0.25,factor&#x3D;0.5,random_state&#x3D;1)\n\ny_named&#x3D;np.array([&quot;blue&quot;,&quot;red&quot;])[y]\n\nX_train,X_test,y_train_named,y_test_named,y_train,y_test&#x3D;train_test_split(X,y_named,y,random_state&#x3D;0)\n\ngbrt&#x3D;GradientBoostingClassifier(random_state&#x3D;0)\ngbrt.fit(X_train,y_train_named)\nprint(&quot;X_test.shape:&#123;&#125;&quot;.format(X_test.shape))\nprint(&quot;Decision function shape:&#123;&#125;&quot;.format(gbrt.decision_function(X_test).shape))\n\n\n\n\n\n\n\n\n\nX_test.shape:(25, 2)Decision function shape:(25,)\ndecision_function&#x3D;gbrt.decision_function(X_test)\n\nfig,axes&#x3D;plt.subplots(1,2,figsize&#x3D;(13,5))\nmglearn.tools.plot_2d_separator(gbrt,X,ax&#x3D;axes[0],alpha&#x3D;.4,fill&#x3D;True,cm&#x3D;mglearn.cm2)\nscores_image&#x3D;mglearn.tools.plot_2d_scores(gbrt,X,ax&#x3D;axes[1],alpha&#x3D;.4,cm&#x3D;mglearn.ReBl)\n\nfor ax in axes:\n    mglearn.discrete_scatter(X_test[:,0],X_test[:,1],y_test,markers&#x3D;&#39;^&#39;,ax&#x3D;ax)\n    mglearn.discrete_scatter(X_train[:,0],X_train[:,1],y_train,markers&#x3D;&#39;o&#39;,ax&#x3D;ax)\n    ax.set_xlabel(&quot;Feature 0&quot;)\n    ax.set_ylabel(&quot;Feature 1&quot;)\ncbar&#x3D;plt.colorbar(scores_image,ax&#x3D;axes.tolist())\naxes[0].legend([&quot;Test class 0&quot;,&quot;Test class 1&quot;,&quot;Train class 0&quot;,&quot;Train class 1&quot;],ncol&#x3D;4,loc&#x3D;(.1,1.1))\n梯度提升模型在一个二维玩具数据集上的决策边界（左）和决策函数（右）\n预测概率多分类问题的不确定度","slug":"python机器学习2","date":"2022-11-03T14:15:49.000Z","categories_index":"","tags_index":"机器学习","author_index":"Algernon"},{"id":"679a1ca1ed196b2867a4735b2a0d1db1","title":"【数学建模】课程笔记","content":"插值及案例实验插值是对给定数据的处理方法，它在工程实践和科学实验中有非常广泛、重要的应用。主要应用在如下两个方面：1、通过数据进行预测分析，例如：工程实验数据与模型的分析、天气预报以及社会、经济行为的统计分析等。2、图形绘制与可视化，例如：图像重建、工程外观设计等。\n插值基本概念构造通过每个已知数据点的近似函数的问题称为插值问题。具体来说：在科学工程实验中，我们可以得到一组观测或测验数据${（x_i ,y_i）}_{i=1:n}$，这组数据通常揭示了自变量 $x$ 与因变量 $y$ 之间的函数关系$f(x)$。对于给定这个数据点集合${（x_i ,y_i）}_{i=1:n}$，构造一个连续函数$p(x)$使得它是$f(x)$的近似函数，而且满足：$y_i=p(x_i),i=1,2,···,n.$我们称近似函数$p(x)$为$f(x)$的插值函数。特点：\n\n测得的自变量数据互不相同，即满足$x_1&lt;x_2&lt;···&lt;x_n$；\n易于计算（通常选择多项式插值）；\n是未知函数的较好逼近。\n\n一维插值方法拉格朗日方法样条插值方法\n二维插值方法双线性插值方法\n\n拟合及案例实验拟合基本概念在科学工程实验中，我们可以得到一组观测或测验数据${（x_i ,y_i）}_{i=1:n}$，这组数据通常揭示了自变量 x 与因变量 y 之间的函数关系 。由于给定这个数据点${（x_i ,y_i）}_{i=1:n}$可能存在误差，构造一个连续函数$y=p(x)$使得它是$f(x)$ 的近似函数，而且满足$min\\begin{Vmatrix} y_1-p(x_1) \\\\ y_2-p(x_2)\\\\·\\\\·\\\\·\\\\ y_n-p(x_n) \\end{Vmatrix}$我们称近似函数$p(x)$为$f (x)$的拟合函数。特点：\n\n测得的自变量数据可以相同 ；\n需首先建立 的近似函数模型；\n通常采用最小二乘拟合。\n\n最小二乘拟合线性最小二乘问题非线性最小二乘问题\n线性最小二乘拟合\n基函数的选取：\n\n通过实际问题的机理选取；\n通过散点图，通过经验选取。\n\n\n\n非线性最小二乘拟合基础理论与方法Guass-Newton算法\n微分方程建模微分方程建模是数学建模的重要方法，因为许多实际问题的数学描述将导致求解微分方程的定解问题。把形形色色的实际问题化成微分方程的定解问题，大体上可以按以下几步：\n\n对实际问题做适当假设，简化问题；\n根据实际要求确定要研究的量(自变量、未知函数、必要的参数等)并确定坐标\n找出这些量所满足的基本规律(物理的、几何的、化学的或生物学的等等)\n运用这些规律列出方程和定解条件\n\n\n\n微分方程建模的常见方法：按规律直接列方程微元分析法与任意区域上取积分的方法\n 自然界中也有许多现象所满足的规律是通过变量的微元之间的关系式来表达的。对于这类问题，我们不能直接列出自变量和未知函数及其变化率之间的关系式，而是通过微元分析法，利用已知的规律建立一些变量（自变量与未知函数）的微元之间的关系式，然后再通过取极限的方法得到微分方程，或等价地通过任意区域上取积分的方法来建立微分方程\n模拟近似法在生物、经济等学科中，许多现象所满足的规律并不很清楚而且相当复杂，因而需要根据实际资料或大量的实验数据，提出各种假设。在一定的假设下，给出实际现象所满足的规律，然后利用适当的数学方法列出微分方程。 在实际的微分方程建模过程中，也往往是上述方法的综合应用。不论应用哪种方法，通常要根据实际情况，作出一定的假设与简化，并要把模型的理论或计算结果与实际情况进行对照验证，以修改模型使之更准确地描述实际问题并进而达到预测预报的目的。\n微分方程数值解法常微分方程的离散化\n用差商近似导数\n数值积分方法\nTaylor多项式近似\n\n数值方法1.欧拉方法局部误差分析全局误差分析\n2.数值积分方法\n3、龙格-库塔（Runge-Kutta）方法\n4.线性多步法以上所介绍的各种数值解法都是单步法，这是因为它们在计算$y_{n+1}$时，都只用到前一步的值$y_n$。多步法就是利用到前面已经计算出的$y_n，y_{n-1},y_{n-2},···$构造迭代式：$y_{n+1}=\\varphi(y_n，y_{n-1},···)$\n图论概论图论起源于 18 世纪。第一篇图论论文是瑞士数学家欧拉于 1736 年发表的“哥尼斯堡的七座桥”。1847 年，克希霍夫为了给出电网络方程而引进了“树”的概念。1857年，凯莱在计数烷CnH2n2 的同分异构物时，也发现了“树”。哈密尔顿于 1859 年提出“周游世界”游戏，用图论的术语，就是如何找出一个连通图中的生成圈、近几十年来，由于计算机技术和科学的飞速发展，大大地促进了图论研究和应用，图论的理论和方法已经渗透到物理、化学、通讯科学、建筑学、运筹学，生物遗传学、心理学、经济学、社会学等学科中。\n图论中所谓的“图”是指某类具体事物和这些事物之间的联系。如果我们用点表示这些具体事物，用连接两点的线段（直的或曲的）表示两个事物的特定的联系，就得到了描述这个“图”的几何形象。图论为任何一个包含了一种二元关系的离散系统提供了一个数学模型，借助于图论的概念、理论和方法，可以对该模型求解。哥尼斯堡七桥问题就是一个典型的例子。在哥尼斯堡有七座桥将普莱格尔河中的两个岛及岛与河岸联结起来，问题是要从这四块陆地中的任何一块开始通过每一座桥正好一次，再回到起点。\n欧拉为了解决这个问题，采用了建立数学模型的方法。他将每一块陆地用一个点来代替，将每一座桥用连接相应两点的一条线来代替，从而得到一个有四个“点”，七条“线”的“图”。问题成为从任一点出发一笔画出七条线再回到起点。欧拉考察了一般一笔画的结构特点，给出了一笔画的一个判定法则：这个图是连通的，且每个点都与偶数线相关联，将这个判定法则应用于七桥问题，得到了“不可能走通”的结果，不但彻底解决了这个问题，而且开创了图论研究的先河。图与网络是运筹学（Operations Research）中的一个经典和重要的分支，所研究的问题涉及经济管理、工业工程、交通运输、计算机科学与信息技术、通讯与网络技术等诸多领域。下面将要讨论的最短路问题、最大流问题、最小费用流问题和匹配问题等都是图与网络的基本问题。\n最短路问题（SPP－shortest path problem）一名货柜车司机奉命在最短的时间内将一车货物从甲地运往乙地。从甲地到乙地的公路网纵横交错，因此有多种行车路线，这名司机应选择哪条线路呢？假设货柜车的运行速度是恒定的，那么这一问题相当于需要找到一条从甲地到乙地的最短路。\n公路连接问题某一地区有若干个主要城市，现准备修建高速公路把这些城市连接起来，使得从其中任何一个城市都可以经高速公路直接或间接到达另一个城市。假定已经知道了任意两个城市之间修建高速公路的成本，那么应如何决定在哪些城市间修建高速公路，使得总成本最小？\n指派问题（assignment problem）一家公司经理准备安排N名员工去完成N项任务，每人一项。由于各员工的特点不同，不同的员工去完成同一项任务时所获得的回报是不同的。如何分配工作方案可以使总回报最大？\n邮递员问题一名邮递员负责投递某个街区的邮件。如何为他（她）设计一条最短的投递路线（从邮局出发，经过投递区内每条街道至少一次，最后返回邮局）？\n旅行商问题（TSP－traveling salesman problem）一名推销员准备前往若干城市推销产品。如何为他（她）设计一条最短的旅行路线（从驻地出发，经过每个城市恰好一次，最后返回驻地）？这一问题的研究历史十分悠久，通常称之为旅行商问题。\n运输问题（transportation problem）某种原材料有M个产地，现在需要将原材料从产地运往N个使用这些原材料的工厂。假定M个产地的产量和N家工厂的需要量已知，单位产品从任一产地到任一工厂的运费已知，那么如何安排运输方案可以使总运输成本最低？\n上述问题有两个共同的特点：一是它们的目的都是从若干可能的安排或方案中寻求某种意义下的最优安排或方案，数学上把这种问题称为最优化或优化（optimization）问题；二是它们都易于用图形的形式直观地描述和表达，数学上把这种与图相关的结构称为网络（network）。与图和网络相关的最优化问题就是网络最优化或称网络优化（netwok optimization）问题。所以上面例子中介绍的问题都是网络优化问题。由于多数网络优化问题是以网络上的流（flow）为研究的对象，因此网络优化又常常被称为网络流（network flows）或网络流规划等。\n","slug":"数模课程笔记","date":"2022-11-03T14:03:49.000Z","categories_index":"","tags_index":"数模","author_index":"Algernon"},{"id":"f7d5b366240b7b48d4ee1a1a176f024a","title":"python学习基础","content":"《计算与人工智能概论》字符串和列表基础\\t 制表符字符串与数字相乘：字符串重复几次3‘un’字符串和字符串相加：字符串连接起来‘un’+’ium’*字符串索引下标，第一个字符索引是0\n\n\n\n\n\n\n\n\n\nword = ‘Python’word[0]‘P’word[5]‘n’\n索引也可以用负数，这种会从右边开始数：\n\n\n\n\n\n\n\n\n\nword[-1]‘n’word[-2]‘o’\n字符串切片\n\n\n\n\n\n\n\n\n\nword[0:2] #左闭右开‘Py’\n切片的索引有默认值；省略开始索引时的默认值为0，省略结束索引时默认为到字符串的结束。\n\n\n\n\n\n\n\n\n\nword[:2]word[-2:]\n切片步长默认设置为1\n\n\n\n\n\n\n\n\n\nword[::2]#步长设置为2\n‘’’…’’’三引号可以跨行输入\n\n\n\n\n\n\n\n\n\nprint(‘’’东边儿滴太阳内个亮呦，\\西边儿下的那个雨，\\不知道妹妹那个心上人哟，\\哪时候归来呦。’’’)\n列表\n\n\n\n\n\n\n\n\n\na=eval(input())输入：[1,4,9,16,25]a = [1,4,9,16,25]\n列表也支持索引和切片最右边是-1切片也可以赋值\nlen函数 len()可以获得列表的长度\n循环for循环for i in range(10):\n   print(i)\n   i&#x3D;5\nbreak语句break语句，用于跳出最近的for或while循环\ncontinue语句continue语句表示跳过当前的这次循环，直接开始下一次循环\nfor num in range(2,10):\n   if num%2 &#x3D;&#x3D; 0:\n      print(&quot;Found an even number&quot;,num)\n      continue\n   print(&quot;Found an odd number&quot;,num)\n字符串和列表进阶列表进阶\n\n\n\n\n\n\n\n\nlist.append(x):在列表的末尾添加一个元素。相当于a[len(a):]=[x]\nlist.insert(i,x):在给定的位置插入一个元素。第一个参数是要插入的元素的索引，所以a.insert(0,x)插入列表头部，a.insert(len(a),x)等同于a.append(x)\nlist.remove(x):移除列表中第一个值为x的元素。如果没有这样的元素，则抛出ValueError异常。\nlist.pop([i]):删除列表中给定位置的元素并返回它。如果没有给定位置，a.pop()将会删除并返回列表中的最后一个元素。\nlist.clear()删除列表中所有的元素\nlist.index(x[,start[,end]])返回列表中第一个值为x的元素的从零开始的索引。可选参数start和end是切片符号，用于将搜索限制为列表的特定子序列。\nlist.count(x)返回元素x在列表中出现的次数。\nlist.sort(key=None,reverse=False)对列表中的元素进行排序。\nlist.reverse()反转列表中的元素\nlist.copy()反转列表的一个拷贝。相当于a[:]\n字符串进阶字符串实现了所有一般序列的操作，还额外提供了以下列出的一些附加方法。\n\n\n\n\n\n\n\n\n\nstr.capitalize()返回原字符串的副本，其首个字符大写，其余为小写。\nstr.count(sub[,start,end]])返回子字符串sub在[start,end]范围内非重叠出现的次数。可选参数start与end会被解读为切片表示法。\nstr.find(sub[,start[,end]])返回子字符串sub在s[start:end]切片内被找到的最小索引。可选参数start与end会被解读为切片表示法。如果sub未被找到则返回-1\nstr.format(args,*kwargs)执行字符串格式化操作。\n\n&gt;&gt;&gt;&quot;The sum of 1 +2 is &#123;0&#125;&quot;.format(1+2)\n&#39;The sum of 1+2 is 3&#39;\n\n\n\n\n\n\n\n\n\nstr.replace(old,new[,count])返回字符串的副本，其中出现的所有字符串old都将被替换为new。如果给出了可选参数count，则只替换前count次出现。\nstr.isalnum()如果字符串中所有字符都是字母或数字，则返回True，否则返回False。str.isalpha()如果字符串中所有字符都是字母，则返回True，否则返回False。str.isdigit()如果字符串中所有字符都是数字，则返回True，否则返回False。str.isspace()如果字符串中只有空白字符（空格、制表符、换行符等）则返回True，否则返回False。\n元组虽然元组看起来和列表很像，但元组是immutable（不可变的），其序列通常包含不同种类的元素。列表是mutable（可变的），并且列表中的元素一般是同种类型的。\nt&#x3D;(12345,54321,&#39;hello!&#39;)\n集合python也包含有集合类型。集合是由不重复元素组成的无序的集。它的基本用法包括成员检测和消除重复元素。集合对象也支持像并集、交集等运算。不支持索引和切片。\n字典字典的创建与以连续整数为索引的序列不同，字典是以关键字为索引的，关键字可以是任意不可变类型，通常是字符串和数字。理解字典的最好方式，就是将它看作是一个键：值   对的集合，键必须是唯一的（在一个字典中).\n一对花括号可以创建一个空字典：{}另一种初始化方式是在一对花括号里放置一些以逗号分隔的键值对，而这也是字典输出的方式。\ntel &#x3D; &#123;&#39;jack&#39;:4098,&#39;sape&#39;:4139&#125;\n通过fromkeys()方法创建字典，初始化操作字典，设置默认值\ndictname &#x3D; dict.fromkeys(iterable,value&#x3D;None)\n&gt;&gt;&gt;knowledge&#x3D;&#123;&#39;语文&#39;,&#39;数学&#39;,&#39;英语&#39;&#125; #集合\n&gt;&gt;&gt;scores&#x3D;dict.fromkeys(knowledge,60)\n&gt;&gt;&gt;print(scores)\n&#123;&#39;英语&#39;:60,&#39;数学&#39;:60,&#39;语文&#39;:60,&#125;\n也可以用del来删除一个键值对\n对一个字典执行list(d)将返回包含该字典中所有键的列表，按插入次序排列（如需其他排序，则要使用sorted(d))。要检查字典中是否存在一个特定键，可使用in关键字。\ndict（）函数可以直接从键值对序列里创建字典。\n\n\n\n\n\n\n\n\n\nlist(d):返回字典d中使用的所有键的列表。\nlen(d):返回字典d中的项数。\nd[key]:返回d中以key为键的项。\nd[key] = value：将d[key]设为value\ndel d[key]:将d[key]从d中移除。\nkey in d :如果d中存在键key则返回True,否则返回False\nkey not in d :等价于not key in d\nd.clear():移除字典中的所有元素。\nd.copy():返回原字典的拷贝。\nd.get(key[,default]):如果key存在于字典中则返回key的值，否则返回default\nd.items():返回由字典项((键，值)对)组成的一个新视图（类似列表，里面的元素是键值元组）。\nd.keys():返回由字典键组成的一个新视图（类似列表）。\nd.pop(key[,default]):如果 key存在于字典中则将其移除并返回其值，否则返回default。\nd.popitem():从字典中移除并返回一个（键，值）对。\nd.values():返回由字典值组成的一个新视图（类似列表）\n循环的技巧当在序列中循环时，用enumerate()函数可以将索引位置和其对应的值同时取出。\nfor i,v in enumerate([&#39;tic&#39;,&#39;tac&#39;,&#39;toe&#39;]):\n    print(i,v)\n当同时在两个或更多序列中循环时 ，可以用zip()函数将其内元素一一匹配。\n当在字典中循环时，用items()方法可将关键字和对应的值同时取出\nknights&#x3D;&#123;&#39;gallahad&#39;:&#39;the pure&#39;,&#39;robin&#39;:&#39;the brave&#39;&#125;\nfor k,v in knights.items():\n    print(k,v)\n如果要按某个指定顺序循环一个序列，可以用sorted()函数，它可以在不改动 原序列的基础上返回一个新的排好序的序列\nbasket &#x3D; [&#39;apple&#39;,&#39;orange&#39;,&#39;apple&#39;,&#39;pear&#39;,&#39;orange&#39;,&#39;banana&#39;]\nfor  i in sorted(basket):\n    print(i)\n对一个序列使用set()将去除重复的元素。对一个序列使用sorted()加set()则是按排序后顺序循环遍历序列中唯一一种元素的一种惯用方式。\nbasket &#x3D; [&#39;apple&#39;,&#39;orange&#39;,&#39;apple&#39;,&#39;pear&#39;,&#39;orange&#39;,&#39;banana&#39;]\nfor  f in sorted(set(basket)):\n    print(f)\n数据类型小结\nIterable（可迭代类型）：可用于for循环头，常见的由列表、字符串、元组、字典、集合。\nSequence（序列类型）：序列是可迭代的，且是可以用整数下标访问的有序排列的一组数，常见的有列表、字符串、元组。其中列表是可变序列(mutable)，字符串和元组的不可变序列（immutable）。\n\n函数关键字def引入一个函数定义。它必须后跟函数名称和带括号的形式参数列表。构成函数体的语句从下一行开始，并且必须缩进。即使没有return语句的函数也会返回一个值None\n匿名函数&lt;函数名&gt;&#x3D;lamda&lt;参数列表&gt;:&lt;代表式&gt;\ndef&lt;函数名&gt;(&lt;参数列表&gt;):\n    return&lt;表达式&gt;\nlambda函数用于定义简单的、能够在一行内表示的函数，返回一个函数值\n常用内置函数\n\n\n\n\n\n\n\n\nabs(x):返回一个函数的绝对值。\nchr(i):返回 Unicode码位为整数i的字符的字符串格式。\nord(c）：对表示单个Unicode字符的字符串，返回代表它Unicode码点的整数。\n字符串之间可以直接比较。str(object=’’):将object转换为str类型\nlen(s):返回对象的长度（元素个数）。实参可以是序列（如string，tuple,list或range等）或集合（如dictionary,set等）。\nlist([iterable]):返回一个列表\nsum(iterable,/,start=0):从start开始对iterable的项求和并返回总和。\npow(base,exp[,mod]):返回base的exp次幂\n算法设计常见的时间复杂度| 执行次数函数举例    | 时间复杂度/说明                                 || —————————- | ———————————————————————- || 217                 | $o$(1),常数                                     || 4log$n$+12          | $o$(log$n$),对数，log$n$是$log_2n$的简写        || 3n+21               | $o$($n$),线性                                   || 2$n$+ 3$n$log$n$+15 | $o$($n$log$n$),对数线性，log$n$是$log_2n$的简写 || $6n^2+5n+19$        | $o$($n^2$),平方                                 || $2n^3+3n^2+5n+8$    | $o$($n^3$),立方                                 || $7$x$3^n$           | $o$($2^n$),指数                                 |\n问题求解计算思维方法迭代法迭代法是从某个值开始，不断地利用旧值推导出新值的方法。\n穷举法穷举法也称暴力法，如果在求解问题时，无法找到有效解决问题的方法，可以对所有可能的解进行逐一验证，将符合要求的解找出来。\n二分法二分法通常用来对搜索算法进行优化。\n递归递归是函数调用自身的操作。递归通常用来将复杂问题一层层地分解为更小的、形式相同的子问题，这种分解会一直进行下去，直到子问题可以直接求解。\n深度优先遍历深度优先遍历（DFS）是一种用于在树形结构或网状结构中进行搜索的有效算法。树是由结点和边组成的不存在任何环的一种数据结构。一棵树可以被看成由根结点和子树构成，因此，树具有天然的递归结构。没有结点的树被称为空树。\n梯度下降法用梯度下降法求一元函数的最值一元函数的最值一般通过找函数导数为0的点来求得，即$f^{‘}(x)=0$,然而在实际问题中，方程$f^{‘}(x)=0$通常不容易求解。梯度下降法不是直接求方程的解，而是通过逐步改变$x$的值，从而找出函数$f(x)$的最小值。\n梯度下降法的基本思想就是 ：为了找到函数的最小值处，只要让函数值朝着梯度方向的反方向（下降方向）走一小步，再求出此处的梯度方向，继续往梯度方向的反方向走一小步，如此往复，就能找到函数的最小值。\n智能感知自然语言处理依照人们所设定的自然语言语法规则将输入的语句分解为句法结构，再根据一套语义规则把句法结构映射到语义符号结构。在这套自然语言处理系统中，规则集合是人们预先设计给机器的，是先验的知识。自然语言处理的任务：\n\n自然语言理解（NLU)\n自然语言生成（NLG）\n\n机器视觉神经网络 神经网络的一个典型应用是解决分类问题。\n 在分类问题中，神经网络一般包含输入层、隐含层和输出层，其中输入层神经元数量由输入向量的维数决定，输出层神经元数量由需要分类的类别数量决定。\n输入层不对数据进行处理，仅将输入数据送入下一层进行运算。\n在输入层和输出层中间存在若干隐含层，这些隐含层主要用于对数据进行计算和处理。\n前馈神经网络\n神经网络由大量彼此连接的神经元组成，神经网络的类型由神经元的连接方式决定。一个常用的神经网络是多层前馈神经网络，其中每一层的神经元都与下一层完全互联，并且既没有同层连接也没有跨层连接。输入层接受外部输入，隐含层和输出层的神经元处理信号，最后输出层的神经元输出结果。在学习过程中，神经网络根据训练数据调整神经元之间的连接权重和每个功能神经元的阈值。\n神经网络的工作过程包括学习期和工作期。在学习期，每个处理单元通过学习样本修改连接权重。在工作期，每个连接权重是固定的，处理单元的状态会发生变化，最后会达到稳定状态。\n卷积神经网络一个传播较为广泛的卷积神经网络是LeNet-5.主要包括：\n\n输入层（INPUT层）\n卷积层（C1层，C3层和C5层）\n池化层（S2层和S4层）\n全连接层（F6层）\n输出层（OUTPUT层）\n\n输入层可以处理多维数据。卷积神经网络广泛地应用于机器视觉领域，在该领域中的网络的输入数据一般是平面上的像素点所对应的RGB通道，因此一般是三维的。卷积神经网络的学习使用梯度下降法，因此需要对输入数据进行标准化处理。具体而言，对于分布在[0,255]的像素值，需要进行归一化处理，以提升网络的学习效率。\n卷积层主要对输入数据进行特征提取。一个卷积层包含多个卷积核，每个卷积核都是一个特征提取器。与前馈神经网络中的神经元类似，组成卷积核的每个元素都对应一个权重和一个偏差量。一个卷积核对图像是有一定的卷积范围的，这一范围叫做感受野（私以为这个翻译并不妥当 ）。如果要在不同的尺度上进行特征提取，则需要增加卷积层的数量。\n池化层主要对卷积层输出的特征图进行特征选择和信息过滤。基本做法是用一个值代替图像的某个区域，这个值可以是最大值（最大池化），也可以是平均值（均值池化）。池化不仅可以降低图像尺寸，在一定程度上也可以使输出值对图像的小幅度平移和旋转不敏感。\n全连接层主要对之前卷积层和池化层提取到的特征进行非线性组合，从而得到输出信号，它相当于传统前馈神经网络中的隐含层。全连接层的主要任务不是提取特征，而是利用已有的高阶特征达成学习目标。\n输出层：经过前面一系列的处理后，信号传入输出层，再由逻辑函数或归一化指数函数进行处理，最终输出分类标签，如物体的大小、分类、或每个像素的分类结果。\n模式识别对个别事物或现象的识别过程可以被称为模式识别。模式识别系统通常由数据获取、预处理、特征提取、分类器、分类决策5个基本单元组成。\n特征提取常见的特征选择方法有过滤式选择、包裹式选择和嵌入式选择等。\n过滤式选择是先按照某种规则对数据集进行特征选择，再训练分类器。常见的过滤式选择方法有方差选择法、相关系数法、卡方检验法等。方差选择法认为取值较少的特征对分类没有帮助，它会计算各个特征的方差，根据预先设定的阈值或指定的数量来选取特征。\n包裹式选择根据学习器的性能来对特征子集进行选择。\n嵌入式选择结合了以上两者的优点，它将特征选择技术嵌入学习算法，在分类器训练过程中会自动进行特征选择。\n机器学习监督学习监督学习是指机器的学习系统通过学习信息之间的组合关系来对来对从未见过的数据进行有效的预测。回归和分类是监督学习领域中的两个主要任务。\n回归回归是用模型来拟合一组正确的训练数据，以便对未知的一些连续变量进行预测。\n分类分类和回归的主要区别在于：分类用于预测一个离散值或者类别，而不是一系列连续值属性。\n无监督学习在无监督学习中，模型只能获取大量的无标记数据，他们需要利用这些无标记数据来进行学习，从而找到这些数据中潜在的组织结构。\n无监督学习的主要任务可以分为聚类和降维。\n半监督学习同时利用少量标记数据和大量未标记数据进行学习。\n智能决策基于搜索的最优路径决策在人工智能领域中，存在着一些非结构化的问题，这类问题通常没有特定的决策模型或者可求解的算法，只能在解空间中通过一步步的试探和摸索来确定可行解。这样的过程被称为“搜索”，而通过搜索进行求解的问题则被称为“搜索问题”。\n著名的八皇后问题便是一个典型的搜索问题。\n\n\n\n\n\n\n\n\n\n在一个8x8的棋盘上摆放8个棋子，使这8个棋子中的任意2个均不处于棋盘中的同一行、同一列或同一斜线上，一共有多少种可行的摆法？\n典型的搜索策略\n深度优先搜索（DFS)深度优先搜索是一种一直向下的盲目搜索方法，搜索从根结点出发，沿一定的方向进行扩展。当无法继续扩展时，回溯到浅层节点，在另一条路径上重新开始扩展。其中，每个结点表示一个状态，子结点后的所有结点被称为该结点的后裔；与该结点位于同一层级的结点被称为兄弟结点。\n宽度优先搜索（BFS)宽度优先搜索又称广度优先搜索，优先扩展层数较低（深度较浅）的结点，仅当某一层的结点全部搜索完毕时，BFS才会进入下一层进行搜索，其具体搜索方法为：在根结点处生成第一层结点，并在该层中横向进行搜索，检查该层是否存在所需的目标结点；若未找到目标结点，则将第一层的所有结点逐一进行扩展，生成第二层结点，再重复上述步骤，直至发现目标结点。\n强化学习强化学习也叫增强学习。强化学习有4个基本要素，分别是策略、奖励、价值函数以及环境模型。\n策略是状态到行为的一种映射，它定义了智能体的行为。智能体在给定的状态下所采取的动作取决于策略。\n奖励是环境对智能体当前行为的一个即时反馈。奖励可以反映智能体学习的任务目标。\n价值函数是对智能体的序列决策的长期收益的衡量。价值函数与奖励不一样，奖励是环境在智能体每采取一个动作后给予的即时反馈，而价值函数是从一个长远的角度来估计智能体当前行为的好坏的。\n环境模型是对环境的建模，它定义了不同状态之间的转移概率以及智能体在当前状态下采取某个动作所能获得的奖励。\n强化学习与其他机器学习范式的不同监督学习从带有标记的训练数据中学习预测新的样本。例如，手写数字识别就是典型的适合用监督学习解决的问题。\n无监督学习从没有标记的训练数据中学习数据的特征，找出数据中潜在的结构并将其分成若干类。无监督学习主要解决预测学习中的聚类问题，例如，从大量无标签的猫猫和狗狗的照片中学习这是两种不同的动物并加以区分。\n监督学习和无监督学习本质上都属于预测学习，而强化学习属于决策学习。强化学习没有标签，它会根据环境的反馈来判断行为的好坏，通过奖励和惩罚来学习最大化行为序列的长期收益。\n群体智能旅行商问题（TSP) \n\n蚁群算法\n人工蜂群算法\n\n《Python语言程序设计基础》程序实例python蟒蛇绘制import turtle\nturtle.setup(650,350,200,200)\nturtle.penup()\nturtle.fd(-250)\nturtle.pendown()\nturtle.pensize(25)\nturtle.pencolor(&quot;purple&quot;)\nturtle.seth(-40)\nfor i in range(4):\n    turtle.circle(40,80)\n    turtle.circle(-40,80)\nturtle.circle(40,80&#x2F;2)\nturtle.fd(40)\nturtle.circle(16,180)\nturtle.fd(40*2&#x2F;3)\n基本数据类型math库解析数学常数\n\n\n\n常数\n描述\n\n\n\n\nmath.pi\nΠ，圆周率，值为3.141592653589793\n\n\nmath.e\ne,自然对数，值为2.718281828459045\n\n\nmath.inf\n正无穷大\n\n\nmath.nan\n非浮点数标记，NaN(Not a Number)\n\n\n\n\n数值表示函数\n\n\n\nmath.fabs(x)\n返回x的绝对值\n\n\n\n\nmath.fmod(x,y)\nx%y,返回x与y的模\n\n\nmath.fsum([x,y,…])\nx+y+···,浮点数精确求和\n\n\nmath.ceil(x)\n向上取整，返回不小于x的最小整数\n\n\nmath.floor(x)\n向下取整，返回不大于x的最大整数\n\n\nmath.factorial(x)\nx!，返回x的阶乘，如果x是小数或负数，返回ValueError\n\n\nmath.gcd(a,b)\n返回a与b的最大公约数\n\n\nmath.frexp(x)\n$x$=$m$x$2^e$,返回(m,e)，当x=0，返回（0.0，0）\n\n\nmath.ldexp(x,i)\n返回$x$x$2^i$运算值，math.frexp(x)函数的反运算。\n\n\nmath.modf(x)\n返回x的小数和整数部分\n\n\nmath.trunc(x)\n返回x的整数部分\n\n\n\n\nmath包含8个幂对数函数| 函数               | 描述                                                         || ————————— | —————————————————————————————— || math.pow(x,y)      | $x^y$,返回x的y次幂                                           || math.exp(x)        | $e^x$,返回e的x次幂，e是自然对数                              || math.sqrt(x)       | 返回x的平方根                                                || math.log(x[,base]) | $\\log_{base} {x}$，返回x的对数值，只输入x时，返回自然对数，即lnx || math.log1p(x)      | ln(1+x),返回1+x的自然对数值                                  || math.log2(x)       | l$og_2x$,返回x的2对数值                                      || math.log10(x)      | $log_{10}x$,返回x的10对数值                                  |\n高等特殊函数\n\n\n\n函数\n描述\n\n\n\n\nmath.erf(x)\n高斯误差函数，应用于概率论、统计学等领域\n\n\nmath.erfc(x)\n余补高斯误差函数，math.erfc(x)=1-math.erf(x)\n\n\nmath.gamma(x)\n伽马函数，也叫欧拉第二积分函数\n\n\nmath.lgamma(x)\n伽马函数的自然对数\n\n\n\n\n可以利用伽马函数计算浮点数的阶乘\n字符串基本的字符串操作符\n\n\n\n操作符\n描述\n\n\n\n\nx+y\n连接两个字符串x与y\n\n\n$xn$或$nx$\n复制\n\n\nx in s\n如果x是s的子串，返回True,否则返回False\n\n\nstr[i]\n索引，返回第i个字符\n\n\nstr[N:M]\n切片，返回索引第N到第M的子串，其中不包含M\n\n\n\n\n内置的字符串处理函数\n\n\n\n函数\n描述\n\n\n\n\nlen(x)\n返回字符串x的长度\n\n\nstr(x)\n返回任意类型x所对应的字符串形式\n\n\n\n\n程序的控制结构异常处理：try-except语句try:\n   &lt;语句块1&gt;\nexcept &lt;异常类型&gt;:\n    &lt;语句块2&gt;\n科学计算与可视化numpy引用numpyimport numpy as np\n创建数组函数\n\n\n\n函数\n描述\n\n\n\n\nnp.array([x,y,z],dtype=int)\n从python列表和元组创造数组\n\n\nnp.arange(x,y,i)\n创建一个由x到y，以i为步长的数组\n\n\nnp.linspace(x,y,n）\n创建一个由x到y，等分成n个元素的数组\n\n\nnp.indices((m,n))\n创建一个m行n列的矩阵\n\n\nnp.random.rand(m,n)\n创建一个m行n列的随机数组\n\n\nnp.ones((m,n),dtype)\n创建一个m行n列全1的数组，dtype是数据类型\n\n\nnp.empty((m,n),dtype)\n创建一个m行n列全0的数组，dtype是数据类型\n\n\n\n\n算数运算函数\n\n\n\n函数\n描述\n\n\n\n\nnp.add(x1,x2[,y])\ny=x1+x2\n\n\nnp.subtract(x1,x2[,y])\ny=x1-x2\n\n\nnp.multiply(x1,x2[,y])\ny=x1*x2\n\n\nnp.divide(x1,x2[,y])\ny=x1/x2\n\n\nnp floor_divide(x1,x2[,y])\ny=x1//x2,返回值取整\n\n\nnp.negative(x[,y])\ny=-x\n\n\nnp.power(x1,x2[,y])\ny=x1**x2\n\n\nnp.remainder(x1,x2[,y])\ny=x1%x2\n\n\n\n\n网络爬虫和自动化","slug":"python学习基础","date":"2022-11-03T14:02:49.000Z","categories_index":"","tags_index":"python","author_index":"Algernon"},{"id":"bfaff7f2eff3b6451015614e9ceb60e7","title":"【电子羊的奇妙冒险】初试深度学习（2）","content":"这一期内容有些杂，有基础知识，也有代码实战。\n卷积神经网络\n该部分图片及资料来源：\n\n\n\n\n\n\n\n\n\nhttp://www.huaxiaozhuan.com/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/chapters/5_CNN.html\n卷积定义许多神经网络库会实现一个与卷积有关的函数，称作互相关函数cross-correlation。它类似于卷积：\n\n\n\n\n\n\n\n\n\n\\mathbf S(i,j)=(\\mathbf I*\\mathbf K)(i,j)=\\sum_m\\sum_n\\mathbf I(i+m,j+n)\\mathbf K(m,n)\n\n\n有些机器学习库将它称作卷积。事实上在神经网络中，卷积指的就是这个函数（而不是数学意义上的卷积函数）。\n神经网络的2维卷积的示例：\n\n\n\n\n\n\n\n\n\n这里采用的是神经网络中卷积的定义：\\mathbf S(i,j)=(\\mathbf I*\\mathbf K)(i,j)=\\sum_{m=0}^{1}\\sum_{n=0}^{1}\\mathbf I(i+m,j+n)\\mathbf K(m,n)  。其中，m 和 n 由核函数决定。因为 \\mathbf K\\in \\mathbb R^{2\\times 2}，所以他们的取值范围是 [0,2),\\quad [0,2) 。\n\n单个卷积核只能提取一种类型的特征。\n如果希望卷积层能够提取多个特征，则可以并行使用多个卷积核，每个卷积核提取一种特征。我们称输出的feature map 具有多个通道channel 。\nfeature map 特征图是卷积层的输出的别名，它由多个通道组成，每个通道代表通过卷积提取的某种特征。\n事实上，当输入为图片或者feature map 时，池化层、非线性激活层、Batch Normalization 等层的输出也可以称作feature map 。卷积神经网络中，非全连接层、输出层以外的几乎所有层的输出都可以称作feature map 。\n剩余内容待补充。\n深度学习实战：mnist手写数字识别github地址：\n\n\n\n\n\n\n\n\n\nhttps://github.com/pytorch/examples/tree/main/mnist\nfrom __future__ import print_function\nimport argparse\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nfrom torchvision import datasets, transforms\nfrom torch.optim.lr_scheduler import StepLR\n\n\nclass Net(nn.Module):\n    def __init__(self):\n        super(Net, self).__init__()\n        self.conv1 &#x3D; nn.Conv2d(1, 32, 3, 1)\n        self.conv2 &#x3D; nn.Conv2d(32, 64, 3, 1)\n        self.dropout1 &#x3D; nn.Dropout(0.25)\n        self.dropout2 &#x3D; nn.Dropout(0.5)\n        self.fc1 &#x3D; nn.Linear(9216, 128)\n        self.fc2 &#x3D; nn.Linear(128, 10)\n\n    def forward(self, x):\n        x &#x3D; self.conv1(x)\n        x &#x3D; F.relu(x)\n        x &#x3D; self.conv2(x)\n        x &#x3D; F.relu(x)\n        x &#x3D; F.max_pool2d(x, 2)\n        x &#x3D; self.dropout1(x)\n        x &#x3D; torch.flatten(x, 1)\n        x &#x3D; self.fc1(x)\n        x &#x3D; F.relu(x)\n        x &#x3D; self.dropout2(x)\n        x &#x3D; self.fc2(x)\n        output &#x3D; F.log_softmax(x, dim&#x3D;1)\n        return output\n\n\ndef train(args, model, device, train_loader, optimizer, epoch):\n    model.train()\n    for batch_idx, (data, target) in enumerate(train_loader):\n        data, target &#x3D; data.to(device), target.to(device)\n        optimizer.zero_grad()\n        output &#x3D; model(data)\n        loss &#x3D; F.nll_loss(output, target)\n        loss.backward()\n        optimizer.step()\n        if batch_idx % args.log_interval &#x3D;&#x3D; 0:\n            print(&#39;Train Epoch: &#123;&#125; [&#123;&#125;&#x2F;&#123;&#125; (&#123;:.0f&#125;%)]\\tLoss: &#123;:.6f&#125;&#39;.format(\n                epoch, batch_idx * len(data), len(train_loader.dataset),\n                100. * batch_idx &#x2F; len(train_loader), loss.item()))\n            if args.dry_run:\n                break\n\n\ndef test(model, device, test_loader):\n    model.eval()\n    test_loss &#x3D; 0\n    correct &#x3D; 0\n    with torch.no_grad():\n        for data, target in test_loader:\n            data, target &#x3D; data.to(device), target.to(device)\n            output &#x3D; model(data)\n            test_loss +&#x3D; F.nll_loss(output, target, reduction&#x3D;&#39;sum&#39;).item()  # sum up batch loss\n            pred &#x3D; output.argmax(dim&#x3D;1, keepdim&#x3D;True)  # get the index of the max log-probability\n            correct +&#x3D; pred.eq(target.view_as(pred)).sum().item()\n\n    test_loss &#x2F;&#x3D; len(test_loader.dataset)\n\n    print(&#39;\\nTest set: Average loss: &#123;:.4f&#125;, Accuracy: &#123;&#125;&#x2F;&#123;&#125; (&#123;:.0f&#125;%)\\n&#39;.format(\n        test_loss, correct, len(test_loader.dataset),\n        100. * correct &#x2F; len(test_loader.dataset)))\n\n\ndef main():\n    # Training settings\n    parser &#x3D; argparse.ArgumentParser(description&#x3D;&#39;PyTorch MNIST Example&#39;)\n    parser.add_argument(&#39;--batch-size&#39;, type&#x3D;int, default&#x3D;64, metavar&#x3D;&#39;N&#39;,\n                        help&#x3D;&#39;input batch size for training (default: 64)&#39;)\n    parser.add_argument(&#39;--test-batch-size&#39;, type&#x3D;int, default&#x3D;1000, metavar&#x3D;&#39;N&#39;,\n                        help&#x3D;&#39;input batch size for testing (default: 1000)&#39;)\n    parser.add_argument(&#39;--epochs&#39;, type&#x3D;int, default&#x3D;14, metavar&#x3D;&#39;N&#39;,\n                        help&#x3D;&#39;number of epochs to train (default: 14)&#39;)\n    parser.add_argument(&#39;--lr&#39;, type&#x3D;float, default&#x3D;1.0, metavar&#x3D;&#39;LR&#39;,\n                        help&#x3D;&#39;learning rate (default: 1.0)&#39;)\n    parser.add_argument(&#39;--gamma&#39;, type&#x3D;float, default&#x3D;0.7, metavar&#x3D;&#39;M&#39;,\n                        help&#x3D;&#39;Learning rate step gamma (default: 0.7)&#39;)\n    parser.add_argument(&#39;--no-cuda&#39;, action&#x3D;&#39;store_true&#39;, default&#x3D;False,\n                        help&#x3D;&#39;disables CUDA training&#39;)\n    parser.add_argument(&#39;--dry-run&#39;, action&#x3D;&#39;store_true&#39;, default&#x3D;False,\n                        help&#x3D;&#39;quickly check a single pass&#39;)\n    parser.add_argument(&#39;--seed&#39;, type&#x3D;int, default&#x3D;1, metavar&#x3D;&#39;S&#39;,\n                        help&#x3D;&#39;random seed (default: 1)&#39;)\n    parser.add_argument(&#39;--log-interval&#39;, type&#x3D;int, default&#x3D;10, metavar&#x3D;&#39;N&#39;,\n                        help&#x3D;&#39;how many batches to wait before logging training status&#39;)\n    parser.add_argument(&#39;--save-model&#39;, action&#x3D;&#39;store_true&#39;, default&#x3D;False,\n                        help&#x3D;&#39;For Saving the current Model&#39;)\n    args &#x3D; parser.parse_args()\n    use_cuda &#x3D; not args.no_cuda and torch.cuda.is_available()\n\n    torch.manual_seed(args.seed)\n\n    device &#x3D; torch.device(&quot;cuda&quot; if use_cuda else &quot;cpu&quot;)\n\n    train_kwargs &#x3D; &#123;&#39;batch_size&#39;: args.batch_size&#125;\n    test_kwargs &#x3D; &#123;&#39;batch_size&#39;: args.test_batch_size&#125;\n    if use_cuda:\n        cuda_kwargs &#x3D; &#123;&#39;num_workers&#39;: 1,\n                       &#39;pin_memory&#39;: True,\n                       &#39;shuffle&#39;: True&#125;\n        train_kwargs.update(cuda_kwargs)\n        test_kwargs.update(cuda_kwargs)\n\n    transform&#x3D;transforms.Compose([\n        transforms.ToTensor(),\n        transforms.Normalize((0.1307,), (0.3081,))\n        ])\n    dataset1 &#x3D; datasets.MNIST(&#39;..&#x2F;data&#39;, train&#x3D;True, download&#x3D;True,\n                       transform&#x3D;transform)\n    dataset2 &#x3D; datasets.MNIST(&#39;..&#x2F;data&#39;, train&#x3D;False,\n                       transform&#x3D;transform)\n    train_loader &#x3D; torch.utils.data.DataLoader(dataset1,**train_kwargs)\n    test_loader &#x3D; torch.utils.data.DataLoader(dataset2, **test_kwargs)\n\n    model &#x3D; Net().to(device)\n    optimizer &#x3D; optim.Adadelta(model.parameters(), lr&#x3D;args.lr)\n\n    scheduler &#x3D; StepLR(optimizer, step_size&#x3D;1, gamma&#x3D;args.gamma)\n    for epoch in range(1, args.epochs + 1):\n        train(args, model, device, train_loader, optimizer, epoch)\n        test(model, device, test_loader)\n        scheduler.step()\n\n    if args.save_model:\n        torch.save(model.state_dict(), &quot;mnist_cnn.pt&quot;)\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    main()\nBasic MNIST Examplepip install -r requirements.txt\npython main.py\n# CUDA_VISIBLE_DEVICES&#x3D;2 python main.py  # to specify GPU id to ex. 2\n输出：\n深度学习基础CUDA使用GPU加速\nCPU：擅长流程控制和逻辑处理，不规则数据结构，不可预测存储结构，单线程程序，分支密集型算法\nGPU：擅长数据并行计算，规则数据结构，可预测存储模式。\n关于CUDA代码入门可参见：\n\n\n\n\n\n\n\n\n\n\n\nhttps://blog.csdn.net/sru_alo/article/details/93539633\n编写一个程序，查看我们GPU的一些硬件配置情况：\n#include &quot;device_launch_parameters.h&quot;\n#include &lt;iostream&gt;\n \nint main()\n&#123;\n    int deviceCount;\n    cudaGetDeviceCount(&amp;deviceCount);\n    for(int i&#x3D;0;i&lt;deviceCount;i++)\n    &#123;\n        cudaDeviceProp devProp;\n        cudaGetDeviceProperties(&amp;devProp, i);\n        std::cout &lt;&lt; &quot;使用GPU device &quot; &lt;&lt; i &lt;&lt; &quot;: &quot; &lt;&lt; devProp.name &lt;&lt; std::endl;\n        std::cout &lt;&lt; &quot;设备全局内存总量： &quot; &lt;&lt; devProp.totalGlobalMem &#x2F; 1024 &#x2F; 1024 &lt;&lt; &quot;MB&quot; &lt;&lt; std::endl;\n        std::cout &lt;&lt; &quot;SM的数量：&quot; &lt;&lt; devProp.multiProcessorCount &lt;&lt; std::endl;\n        std::cout &lt;&lt; &quot;每个线程块的共享内存大小：&quot; &lt;&lt; devProp.sharedMemPerBlock &#x2F; 1024.0 &lt;&lt; &quot; KB&quot; &lt;&lt; std::endl;\n        std::cout &lt;&lt; &quot;每个线程块的最大线程数：&quot; &lt;&lt; devProp.maxThreadsPerBlock &lt;&lt; std::endl;\n        std::cout &lt;&lt; &quot;设备上一个线程块（Block）种可用的32位寄存器数量： &quot; &lt;&lt; devProp.regsPerBlock &lt;&lt; std::endl;\n        std::cout &lt;&lt; &quot;每个EM的最大线程数：&quot; &lt;&lt; devProp.maxThreadsPerMultiProcessor &lt;&lt; std::endl;\n        std::cout &lt;&lt; &quot;每个EM的最大线程束数：&quot; &lt;&lt; devProp.maxThreadsPerMultiProcessor &#x2F; 32 &lt;&lt; std::endl;\n        std::cout &lt;&lt; &quot;设备上多处理器的数量： &quot; &lt;&lt; devProp.multiProcessorCount &lt;&lt; std::endl;\n        std::cout &lt;&lt; &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; &lt;&lt; std::endl;     \n        \n    &#125;\n    return 0;\n&#125;\n \n利用nvcc来编译程序。nvcc test1.cu -o test1\n基于神经网络求一元高次方程近似解神经网络模型来源于：\n\n\n\n\n\n\n\n\n\nhttps://taylanbil.github.io/polysolver基于神经网络解一元高次方程\n将数学问题公式化为机器学习问题，并编写一个学习解决多项式的神经网络\n关于模型训练次数调整与拟合结果的初探：\n低次——5次多项式训练 3次：\n训练5次：训练10次：\n高次——（4~16次）训练3次：\n训练5次：高-10次：\n此时，可以看出在较高训练次数之后核密度图出现较明显变化。保留训练十次得到的模型，控制变量调整测试数据\n调参(reshape(X[100:150])(reshape(X[100:110])(reshape(X[100:102])\nimport torch\n\ndevice &#x3D; torch.device(&quot;cuda:0&quot; if torch.cuda.is_available() else &quot;cpu&quot;)\n\n#inputs,target &#x3D; inputs.to(device),target.to(device)\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nMIN_ROOT &#x3D; -1\nMAX_ROOT &#x3D; 1\n\ndef make(n_samples, n_degree):\n    global MIN_ROOT, MAX_ROOT\n    y &#x3D; np.random.uniform(MIN_ROOT, MAX_ROOT, (n_samples, n_degree))\n    y.sort(axis&#x3D;1)\n    X &#x3D; np.array([np.poly(_) for _ in y])\n    return X, y\n\n# toy case\nX, y &#x3D; make(1, 2)\n\n\nN_SAMPLES &#x3D; 100000\nDEGREE &#x3D; 5\nX_train, y_train &#x3D; make(int(N_SAMPLES*0.8), DEGREE)\nX_test, y_test &#x3D; make(int(N_SAMPLES*0.2), DEGREE)\n\nimport os\nos.environ[&#39;TF_CPP_MIN_LOG_LEVEL&#39;]&#x3D;&#39;2&#39;\n\ndef reshape(array):\n    return np.expand_dims(array, -1)\n\n\nfrom keras.models import Sequential\nfrom keras.layers import LSTM, RepeatVector, Dense, TimeDistributed\n\n\nhidden_size &#x3D; 128\n\nmodel &#x3D; Sequential()\n\n# ENCODER PART OF SEQ2SEQ\nmodel.add(LSTM(hidden_size, input_shape&#x3D;(DEGREE+1, 1)))\n\n# DECODER PART OF SEQ2SEQ\nmodel.add(RepeatVector(DEGREE))  # this determines the length of the output sequence\nmodel.add((LSTM(hidden_size, return_sequences&#x3D;True)))\nmodel.add(TimeDistributed(Dense(1)))\n\nmodel.compile(loss&#x3D;&#39;mean_absolute_error&#39;,\n              optimizer&#x3D;&#39;adam&#39;,\n              metrics&#x3D;[&#39;mae&#39;])\n#model.to(device)\n#print(model.summary())\n&#39;&#39;&#39;\nBATCH_SIZE &#x3D; 128\nmodel.fit(reshape(X_train),\n          reshape(y_train),\n          batch_size&#x3D;BATCH_SIZE,\n          epochs&#x3D;3,\n          verbose&#x3D;1,\n          validation_data&#x3D;(reshape(X_test),\n                           reshape(y_test)))\n\n\ny_pred &#x3D; model.predict(reshape(X_test))\ny_pred &#x3D; np.squeeze(y_pred)\n\n\n#% matplotlib inline\n\n\ndef get_evals(polynomials, roots):\n    evals &#x3D; [\n        [np.polyval(poly, r) for r in root_row]\n        for (root_row, poly) in zip(roots, polynomials)\n    ]\n    evals &#x3D; np.array(evals).ravel()\n    return evals\n\n\ndef compare_to_random(y_pred, y_test, polynomials):\n    y_random &#x3D; np.random.uniform(MIN_ROOT, MAX_ROOT, y_test.shape)\n    y_random.sort(axis&#x3D;1)\n\n    fig, axes &#x3D; plt.subplots(1, 2, figsize&#x3D;(12, 6))\n    ax &#x3D; axes[0]\n    ax.hist(np.abs((y_random - y_test).ravel()),\n            alpha&#x3D;.4, label&#x3D;&#39;random guessing&#39;)\n    ax.hist(np.abs((y_pred - y_test).ravel()),\n            color&#x3D;&#39;r&#39;, alpha&#x3D;.4, label&#x3D;&#39;model predictions&#39;)\n    ax.set(title&#x3D;&#39;Histogram of absolute errors&#39;,\n           ylabel&#x3D;&#39;count&#39;, xlabel&#x3D;&#39;absolute error&#39;)\n    ax.legend(loc&#x3D;&#39;best&#39;)\n\n    ax &#x3D; axes[1]\n    random_evals &#x3D; get_evals(polynomials, y_random)\n    predicted_evals &#x3D; get_evals(polynomials, y_pred)\n    pd.Series(random_evals).plot.kde(ax&#x3D;ax, label&#x3D;&#39;random guessing kde&#39;)\n    pd.Series(predicted_evals).plot.kde(ax&#x3D;ax, color&#x3D;&#39;r&#39;, label&#x3D;&#39;model prediction kde&#39;)\n    title &#x3D; &#39;Kernel Density Estimate plot\\n&#39; \\\n            &#39;for polynomial evaluation of (predicted) roots&#39;\n    ax.set(xlim&#x3D;[-.5, .5], title&#x3D;title)\n    ax.legend(loc&#x3D;&#39;best&#39;)\n\n    fig.tight_layout()\n\ncompare_to_random(y_pred, y_test, X_test)\nplt.show()\n\n&#39;&#39;&#39;\n\nMAX_DEGREE &#x3D; 15\nMIN_DEGREE &#x3D; 5\nMAX_ROOT &#x3D; 1\nMIN_ROOT &#x3D; -1\nN_SAMPLES &#x3D; 10000 * (MAX_DEGREE - MIN_DEGREE + 1)\n\n\ndef make(n_samples, max_degree, min_degree, min_root, max_root):\n    samples_per_degree &#x3D; n_samples &#x2F;&#x2F; (max_degree - min_degree + 1)\n    n_samples &#x3D; samples_per_degree * (max_degree - min_degree + 1)\n    X &#x3D; np.zeros((n_samples, max_degree + 1))\n    # XXX: filling the truth labels with ZERO??? EOS character would be nice\n    y &#x3D; np.zeros((n_samples, max_degree, 2))\n    for i, degree in enumerate(range(min_degree, max_degree + 1)):\n        y_tmp &#x3D; np.random.uniform(min_root, max_root, (samples_per_degree, degree))\n        y_tmp.sort(axis&#x3D;1)\n        X_tmp &#x3D; np.array([np.poly(_) for _ in y_tmp])\n\n        root_slice_y &#x3D; np.s_[\n                       i * samples_per_degree:(i + 1) * samples_per_degree,\n                       :degree,\n                       0]\n        pad_slice_y &#x3D; np.s_[\n                      i * samples_per_degree:(i + 1) * samples_per_degree,\n                      degree:,\n                      1]\n        this_slice_X &#x3D; np.s_[\n                       i * samples_per_degree:(i + 1) * samples_per_degree,\n                       -degree - 1:]\n\n        y[root_slice_y] &#x3D; y_tmp\n        y[pad_slice_y] &#x3D; 1\n        X[this_slice_X] &#x3D; X_tmp\n    return X, y\n\n\ndef make_this():\n    global MAX_DEGREE, MIN_DEGREE, MAX_ROOT, MIN_ROOT, N_SAMPLES\n    return make(N_SAMPLES, MAX_DEGREE, MIN_DEGREE, MIN_ROOT, MAX_ROOT)\n\n\nfrom sklearn.model_selection import train_test_split\n\nX, y &#x3D; make_this()\nX_train, X_test, y_train, y_test &#x3D; train_test_split(X, y, test_size&#x3D;0.25)\n&#39;&#39;&#39;\nprint(&#39;X shapes&#39;, X.shape, X_train.shape, X_test.shape)\nprint(&#39;y shapes&#39;, y.shape, y_train.shape, y_test.shape)\nprint(&#39;-&#39; * 80)\nprint(&#39;This is an example root sequence&#39;)\nprint(y[0])\n&#39;&#39;&#39;\nhidden_size &#x3D; 128\nmodel &#x3D; Sequential()\n\nmodel.add(LSTM(hidden_size, input_shape&#x3D;(MAX_DEGREE+1, 1)))\nmodel.add(RepeatVector(MAX_DEGREE))\nmodel.add((LSTM(hidden_size, return_sequences&#x3D;True)))\nmodel.add(TimeDistributed(Dense(2)))\n\nmodel.compile(loss&#x3D;&#39;mean_absolute_error&#39;,\n              optimizer&#x3D;&#39;adam&#39;,\n              metrics&#x3D;[&#39;mae&#39;])\n\n#print(model.summary())\n\nmodel.predict(reshape(X_test));  # this last semi-column will suppress the output.\n&#39;&#39;&#39;\nBATCH_SIZE &#x3D; 40\nmodel.fit(reshape(X_train), y_train,\n          batch_size&#x3D;BATCH_SIZE,\n          epochs&#x3D;10,\n          verbose&#x3D;1,\n          validation_data&#x3D;(reshape(X_test), y_test))\n&#39;&#39;&#39;\nmodel.predict(reshape(X[100:102]))\n\ny_pred &#x3D; model.predict(reshape(X_test))\npad_or_not &#x3D; y_pred[:, :, 1].ravel()\nfig, ax &#x3D; plt.subplots()\nax.set(title&#x3D;&#39;histogram for predicting PAD&#39;,\n       xlabel&#x3D;&#39;predicted value&#39;,\n       ylabel&#x3D;&#39;count&#39;)\nax.hist(pad_or_not, bins&#x3D;5);\n\nthr &#x3D; 0.5\n\n\ndef how_many_roots(predicted):\n    global thr\n    return np.sum(predicted[:, 1] &lt; thr)\n\n\ntrue_root_count &#x3D; np.array(list(map(how_many_roots, y_test)))\npred_root_count &#x3D; np.array(list(map(how_many_roots, y_pred)))\nfrom collections import Counter\nfor key, val in Counter(true_root_count - pred_root_count).items():\n    print(&#39;off by &#123;&#125;: &#123;&#125; times&#39;.format(key, val))\n\nindex &#x3D; np.where(true_root_count &#x3D;&#x3D; pred_root_count)[0]\nindex &#x3D; np.random.choice(index, 1000, replace&#x3D;False)\n\npredicted_evals, random_evals &#x3D; [], []\nrandom_roots_list &#x3D; []\npredicted_roots_list &#x3D; []\ntrue_roots_list &#x3D; []\nfor i in index:\n    predicted_roots &#x3D; [row[0] for row in y_pred[i] if row[1] &lt; thr]\n    true_roots &#x3D; [row[0] for row in y_test[i] if row[1] &#x3D;&#x3D; 0]\n    random_roots &#x3D; np.random.uniform(MIN_ROOT, MAX_ROOT, len(predicted_roots))\n    random_roots &#x3D; sorted(random_roots)\n    random_roots_list.extend(random_roots)\n    predicted_roots_list.extend(predicted_roots)\n    true_roots_list.extend(true_roots)\n    for predicted_root, random_root in zip(predicted_roots, random_roots):\n        predicted_evals.append(\n            np.polyval(X_test[i], predicted_root))\n        random_evals.append(\n            np.polyval(X_test[i], random_root))\n\nassert len(true_roots_list) &#x3D;&#x3D; len(predicted_roots_list)\nassert len(random_roots_list) &#x3D;&#x3D; len(predicted_roots_list)\ntrue_roots_list &#x3D; np.array(true_roots_list)\nrandom_roots_list &#x3D; np.array(random_roots_list)\npredicted_roots_list &#x3D; np.array(predicted_roots_list)\nfig, axes &#x3D; plt.subplots(1, 2, figsize&#x3D;(12, 6))\nax &#x3D; axes[0]\nax.hist(np.abs(random_roots_list - true_roots_list),\n        alpha&#x3D;.4, label&#x3D;&#39;random guessing&#39;)\nax.hist(np.abs(predicted_roots_list - true_roots_list),\n        color&#x3D;&#39;r&#39;, alpha&#x3D;.4, label&#x3D;&#39;model predictions&#39;)\nax.set(title&#x3D;&#39;Histogram of absolute errors&#39;,\n       ylabel&#x3D;&#39;count&#39;, xlabel&#x3D;&#39;absolute error&#39;)\nax.legend(loc&#x3D;&#39;best&#39;)\n\nax &#x3D; axes[1]\npd.Series(random_evals).plot.kde(ax&#x3D;ax, label&#x3D;&#39;random guessing kde&#39;)\npd.Series(predicted_evals).plot.kde(ax&#x3D;ax, color&#x3D;&#39;r&#39;, label&#x3D;&#39;model prediction kde&#39;)\ntitle &#x3D; &#39;Kernel Density Estimate plot\\n&#39; \\\n        &#39;for polynomial evaluation of (predicted) roots&#39;\nax.set(xlim&#x3D;[-.5, .5], title&#x3D;title)\nax.legend(loc&#x3D;&#39;best&#39;)\n\nfig.tight_layout()\n\nplt.show()\nML3\nCNN实战google colab\n\n# Download the dataset\n# You may choose where to download the data.\n\n# Google Drive\n!gdown --id &#39;1awF7pZ9Dz7X1jn1_QAiKN-_v56veCEKy&#39; --output food-11.zip\n\n# Dropbox\n# !wget https:&#x2F;&#x2F;www.dropbox.com&#x2F;s&#x2F;m9q6273jl3djall&#x2F;food-11.zip -O food-11.zip\n\n# MEGA\n# !sudo apt install megatools\n# !megadl &quot;https:&#x2F;&#x2F;mega.nz&#x2F;#!zt1TTIhK!ZuMbg5ZjGWzWX1I6nEUbfjMZgCmAgeqJlwDkqdIryfg&quot;\n\n# Unzip the dataset.\n# This may take some time.\n!unzip -q food-11.zip\n\n# Import necessary packages.\nimport numpy as np\nimport torch\nimport torch.nn as nn\nimport torchvision.transforms as transforms\nfrom PIL import Image\n# &quot;ConcatDataset&quot; and &quot;Subset&quot; are possibly useful when doing semi-supervised learning.\nfrom torch.utils.data import ConcatDataset, DataLoader, Subset\nfrom torchvision.datasets import DatasetFolder\n\n# This is for the progress bar.\nfrom tqdm.auto import tqdm\n\n\n# It is important to do data augmentation in training.\n# However, not every augmentation is useful.\n# Please think about what kind of augmentation is helpful for food recognition.\ntrain_tfm &#x3D; transforms.Compose([\n    # Resize the image into a fixed shape (height &#x3D; width &#x3D; 128)\n    transforms.Resize((128, 128)),\n    # You may add some transforms here.\n    # ToTensor() should be the last one of the transforms.\n    transforms.ToTensor(),\n])\n\n# We don&#39;t need augmentations in testing and validation.\n# All we need here is to resize the PIL image and transform it into Tensor.\ntest_tfm &#x3D; transforms.Compose([\n    transforms.Resize((128, 128)),\n    transforms.ToTensor(),\n])\n\n\n# Batch size for training, validation, and testing.\n# A greater batch size usually gives a more stable gradient.\n# But the GPU memory is limited, so please adjust it carefully.\nbatch_size &#x3D; 128\n\n# Construct datasets.\n# The argument &quot;loader&quot; tells how torchvision reads the data.\ntrain_set &#x3D; DatasetFolder(&quot;food-11&#x2F;training&#x2F;labeled&quot;, loader&#x3D;lambda x: Image.open(x), extensions&#x3D;&quot;jpg&quot;, transform&#x3D;train_tfm)\nvalid_set &#x3D; DatasetFolder(&quot;food-11&#x2F;validation&quot;, loader&#x3D;lambda x: Image.open(x), extensions&#x3D;&quot;jpg&quot;, transform&#x3D;test_tfm)\nunlabeled_set &#x3D; DatasetFolder(&quot;food-11&#x2F;training&#x2F;unlabeled&quot;, loader&#x3D;lambda x: Image.open(x), extensions&#x3D;&quot;jpg&quot;, transform&#x3D;train_tfm)\ntest_set &#x3D; DatasetFolder(&quot;food-11&#x2F;testing&quot;, loader&#x3D;lambda x: Image.open(x), extensions&#x3D;&quot;jpg&quot;, transform&#x3D;test_tfm)\n\n# Construct data loaders.\ntrain_loader &#x3D; DataLoader(train_set, batch_size&#x3D;batch_size, shuffle&#x3D;True, num_workers&#x3D;8, pin_memory&#x3D;True)\nvalid_loader &#x3D; DataLoader(valid_set, batch_size&#x3D;batch_size, shuffle&#x3D;True, num_workers&#x3D;8, pin_memory&#x3D;True)\ntest_loader &#x3D; DataLoader(test_set, batch_size&#x3D;batch_size, shuffle&#x3D;False)\n\n\n\nclass Classifier(nn.Module):\n    def __init__(self):\n        super(Classifier, self).__init__()\n        # The arguments for commonly used modules:\n        # torch.nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding)\n        # torch.nn.MaxPool2d(kernel_size, stride, padding)\n\n        # input image size: [3, 128, 128]\n        self.cnn_layers &#x3D; nn.Sequential(\n            nn.Conv2d(3, 64, 3, 1, 1),\n            nn.BatchNorm2d(64),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2, 0),\n\n            nn.Conv2d(64, 128, 3, 1, 1),\n            nn.BatchNorm2d(128),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2, 0),\n\n            nn.Conv2d(128, 256, 3, 1, 1),\n            nn.BatchNorm2d(256),\n            nn.ReLU(),\n            nn.MaxPool2d(4, 4, 0),\n        )\n        self.fc_layers &#x3D; nn.Sequential(\n            nn.Linear(256 * 8 * 8, 256),\n            nn.ReLU(),\n            nn.Linear(256, 256),\n            nn.ReLU(),\n            nn.Linear(256, 11)\n        )\n\ndef forward(self, x):\n        # input (x): [batch_size, 3, 128, 128]\n        # output: [batch_size, 11]\n\n        # Extract features by convolutional layers.\n        x &#x3D; self.cnn_layers(x)\n\n        # The extracted feature map must be flatten before going to fully-connected layers.\n        x &#x3D; x.flatten(1)\n\n        # The features are transformed by fully-connected layers to obtain the final logits.\n        x &#x3D; self.fc_layers(x)\n        return x\n\n\ndef get_pseudo_labels(dataset, model, threshold&#x3D;0.65):\n    # This functions generates pseudo-labels of a dataset using given model.\n    # It returns an instance of DatasetFolder containing images whose prediction confidences exceed a given threshold.\n    # You are NOT allowed to use any models trained on external data for pseudo-labeling.\n    device &#x3D; &quot;cuda&quot; if torch.cuda.is_available() else &quot;cpu&quot;\n\n    # Construct a data loader.\n    data_loader &#x3D; DataLoader(dataset, batch_size&#x3D;batch_size, shuffle&#x3D;False)\n\n    # Make sure the model is in eval mode.\n    model.eval()\n    # Define softmax function.\n    softmax &#x3D; nn.Softmax(dim&#x3D;-1)\n\n    # Iterate over the dataset by batches.\n    for batch in tqdm(data_loader):\n        img, _ &#x3D; batch\n\n        # Forward the data\n        # Using torch.no_grad() accelerates the forward process.\n        with torch.no_grad():\n            logits &#x3D; model(img.to(device))\n\n        # Obtain the probability distributions by applying softmax on logits.\n        probs &#x3D; softmax(logits)\n\n        # ---------- TODO ----------\n        # Filter the data and construct a new dataset.\n\n    # # Turn off the eval mode.\n    model.train()\n    return dataset\n\n\n\n# &quot;cuda&quot; only when GPUs are available.\ndevice &#x3D; &quot;cuda&quot; if torch.cuda.is_available() else &quot;cpu&quot;\n\n# Initialize a model, and put it on the device specified.\nmodel &#x3D; Classifier().to(device)\nmodel.device &#x3D; device\n\n# For the classification task, we use cross-entropy as the measurement of performance.\ncriterion &#x3D; nn.CrossEntropyLoss()\n\n# Initialize optimizer, you may fine-tune some hyperparameters such as learning rate on your own.\noptimizer &#x3D; torch.optim.Adam(model.parameters(), lr&#x3D;0.0003, weight_decay&#x3D;1e-5)\n\n# The number of training epochs.\nn_epochs &#x3D; 80\n\n# Whether to do semi-supervised learning.\ndo_semi &#x3D; False\n\nfor epoch in range(n_epochs):\n    # ---------- TODO ----------\n    # In each epoch, relabel the unlabeled dataset for semi-supervised learning.\n    # Then you can combine the labeled dataset and pseudo-labeled dataset for the training.\n    if do_semi:\n        # Obtain pseudo-labels for unlabeled data using trained model.\n        pseudo_set &#x3D; get_pseudo_labels(unlabeled_set, model)\n\n        # Construct a new dataset and a data loader for training.\n        # This is used in semi-supervised learning only.\n        concat_dataset &#x3D; ConcatDataset([train_set, pseudo_set])\n        train_loader &#x3D; DataLoader(concat_dataset, batch_size&#x3D;batch_size, shuffle&#x3D;True, num_workers&#x3D;8, pin_memory&#x3D;True)\n\n    # ---------- Training ----------\n    # Make sure the model is in train mode before training.\n    model.train()\n\n    # These are used to record information in training.\n    train_loss &#x3D; []\n    train_accs &#x3D; []\n\n    # Iterate the training set by batches.\n    for batch in tqdm(train_loader):\n\n        # A batch consists of image data and corresponding labels.\n        imgs, labels &#x3D; batch\n\n        # Forward the data. (Make sure data and model are on the same device.)\n        logits &#x3D; model(imgs.to(device))\n\n        # Calculate the cross-entropy loss.\n        # We don&#39;t need to apply softmax before computing cross-entropy as it is done automatically.\n        loss &#x3D; criterion(logits, labels.to(device))\n\n        # Gradients stored in the parameters in the previous step should be cleared out first.\n        optimizer.zero_grad()\n\n        # Compute the gradients for parameters.\n        loss.backward()\n\n        # Clip the gradient norms for stable training.\n        grad_norm &#x3D; nn.utils.clip_grad_norm_(model.parameters(), max_norm&#x3D;10)\n\n        # Update the parameters with computed gradients.\n        optimizer.step()\n\n        # Compute the accuracy for current batch.\n        acc &#x3D; (logits.argmax(dim&#x3D;-1) &#x3D;&#x3D; labels.to(device)).float().mean()\n\n        # Record the loss and accuracy.\n        train_loss.append(loss.item())\n        train_accs.append(acc)\n\n    # The average loss and accuracy of the training set is the average of the recorded values.\n    train_loss &#x3D; sum(train_loss) &#x2F; len(train_loss)\n    train_acc &#x3D; sum(train_accs) &#x2F; len(train_accs)\n\n    # Print the information.\n    print(f&quot;[ Train | &#123;epoch + 1:03d&#125;&#x2F;&#123;n_epochs:03d&#125; ] loss &#x3D; &#123;train_loss:.5f&#125;, acc &#x3D; &#123;train_acc:.5f&#125;&quot;)\n\n    # ---------- Validation ----------\n    # Make sure the model is in eval mode so that some modules like dropout are disabled and work normally.\n    model.eval()\n\n    # These are used to record information in validation.\n    valid_loss &#x3D; []\n    valid_accs &#x3D; []\n\n    # Iterate the validation set by batches.\n    for batch in tqdm(valid_loader):\n\n        # A batch consists of image data and corresponding labels.\n        imgs, labels &#x3D; batch\n\n        # We don&#39;t need gradient in validation.\n        # Using torch.no_grad() accelerates the forward process.\n        with torch.no_grad():\n          logits &#x3D; model(imgs.to(device))\n\n        # We can still compute the loss (but not the gradient).\n        loss &#x3D; criterion(logits, labels.to(device))\n\n        # Compute the accuracy for current batch.\n        acc &#x3D; (logits.argmax(dim&#x3D;-1) &#x3D;&#x3D; labels.to(device)).float().mean()\n\n        # Record the loss and accuracy.\n        valid_loss.append(loss.item())\n        valid_accs.append(acc)\n\n    # The average loss and accuracy for entire validation set is the average of the recorded values.\n    valid_loss &#x3D; sum(valid_loss) &#x2F; len(valid_loss)\n    valid_acc &#x3D; sum(valid_accs) &#x2F; len(valid_accs)\n\n    # Print the information.\n    print(f&quot;[ Valid | &#123;epoch + 1:03d&#125;&#x2F;&#123;n_epochs:03d&#125; ] loss &#x3D; &#123;valid_loss:.5f&#125;, acc &#x3D; &#123;valid_acc:.5f&#125;&quot;)\n\n\ntensorflow基础官方教程\n\n\n\n\n\n\n\n\n\nhttps://www.tensorflow.org/guide/keras/sequential_model?hl=zh-cn\nkeras设置\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nSequentialSequential模型适用于层的普通堆栈，其中每层正好有一个输入张量和一个输出张量。\n# Define Sequential model with 3 layers\nmodel &#x3D; keras.Sequential(\n    [\n        layers.Dense(2, activation&#x3D;&quot;relu&quot;, name&#x3D;&quot;layer1&quot;),\n        layers.Dense(3, activation&#x3D;&quot;relu&quot;, name&#x3D;&quot;layer2&quot;),\n        layers.Dense(4, name&#x3D;&quot;layer3&quot;),\n    ]\n)\n# Call model on a test input\nx &#x3D; tf.ones((3, 3))\ny &#x3D; model(x)\n顺序模型在以下情况下不合适：\n\n模型具有多个输入或多个输出 \n任何图层都有多个输入或多个输出 \n您需要执行图层共享 \n您需要非线性拓扑（例如残差连接、多分支模型）\n\n常见的调试工作流：add() + summary()构建新的顺序体系结构时，以增量方式堆叠图层并频繁打印模型摘要非常有用。例如，这使您能够监视堆栈和图层如何缩减像素采样图像特征映射：add()Conv2DMaxPooling2D\nmodel &#x3D; keras.Sequential()\nmodel.add(keras.Input(shape&#x3D;(250, 250, 3)))  # 250x250 RGB images\nmodel.add(layers.Conv2D(32, 5, strides&#x3D;2, activation&#x3D;&quot;relu&quot;))\nmodel.add(layers.Conv2D(32, 3, activation&#x3D;&quot;relu&quot;))\nmodel.add(layers.MaxPooling2D(3))\n\n# Can you guess what the current output shape is at this point? Probably not.\n# Let&#39;s just print it:\nmodel.summary()\n\n# The answer was: (40, 40, 32), so we can keep downsampling...\n\nmodel.add(layers.Conv2D(32, 3, activation&#x3D;&quot;relu&quot;))\nmodel.add(layers.Conv2D(32, 3, activation&#x3D;&quot;relu&quot;))\nmodel.add(layers.MaxPooling2D(3))\nmodel.add(layers.Conv2D(32, 3, activation&#x3D;&quot;relu&quot;))\nmodel.add(layers.Conv2D(32, 3, activation&#x3D;&quot;relu&quot;))\nmodel.add(layers.MaxPooling2D(2))\n\n# And now?\nmodel.summary()\n\n# Now that we have 4x4 feature maps, time to apply global max pooling.\nmodel.add(layers.GlobalMaxPooling2D())\n\n# Finally, we add a classification layer.\nmodel.add(layers.Dense(10))\nEager ExecutionTensorFlow 的 Eager Execution 是一种命令式编程环境，可立即评估运算，无需构建计算图：运算会返回具体的值，而非构建供稍后运行的计算图。这样能使您轻松入门 TensorFlow 并调试模型，同时也减少了样板代码。要跟随本指南进行学习，请在交互式 python 解释器中运行以下代码示例。\nEager Execution 是用于研究和实验的灵活机器学习平台，具备以下特性：\n\n直观的界面 - 自然地组织代码结构并使用 Python 数据结构。快速迭代小模型和小数据。\n更方便的调试功能 -直接调用运算以检查正在运行的模型并测试更改。使用标准 Python 调试工具立即报告错误。\n自然的控制流 - 使用 Python而非计算图控制流，简化了动态模型的规范。\n\nEager Execution 支持大部分 TensorFlow 运算和 GPU 加速。\n设置和基本用法\nimport os\n\nimport tensorflow as tf\n\nimport cProfile\nEager 训练计算梯度\n\n\n\n\n\n\n\n\n\n自动微分对实现机器学习算法（例如用于训练神经网络的反向传播）十分有用。在 Eager Execution 期间，请使用 tf.GradientTape 跟踪运算以便稍后计算梯度。\n您可以在 Eager Execution 中使用 tf.GradientTape 来训练和/或计算梯度。这对复杂的训练循环特别有用。\n由于在每次调用期间都可能进行不同运算，所有前向传递的运算都会记录到“条带”中。要计算梯度，请反向播放条带，然后丢弃。特定 tf.GradientTape 只能计算一个梯度；后续调用会引发运行时错误。\nw &#x3D; tf.Variable([[1.0]])\nwith tf.GradientTape() as tape:\n  loss &#x3D; w * w\n\ngrad &#x3D; tape.gradient(loss, w)\nprint(grad)  # &#x3D;&gt; tf.Tensor([[ 2.]], shape&#x3D;(1, 1), dtype&#x3D;float32)\n训练模型以下示例创建了一个多层模型，该模型会对标准 MNIST 手写数字进行分类。示例演示了在 Eager Execution 环境中构建可训练计算图的优化器和层 API。\n# Fetch and format the mnist data\n(mnist_images, mnist_labels), _ &#x3D; tf.keras.datasets.mnist.load_data()\n\ndataset &#x3D; tf.data.Dataset.from_tensor_slices(\n  (tf.cast(mnist_images[...,tf.newaxis]&#x2F;255, tf.float32),\n   tf.cast(mnist_labels,tf.int64)))\ndataset &#x3D; dataset.shuffle(1000).batch(32)\n# Build the model\nmnist_model &#x3D; tf.keras.Sequential([\n  tf.keras.layers.Conv2D(16,[3,3], activation&#x3D;&#39;relu&#39;,\n                         input_shape&#x3D;(None, None, 1)),\n  tf.keras.layers.Conv2D(16,[3,3], activation&#x3D;&#39;relu&#39;),\n  tf.keras.layers.GlobalAveragePooling2D(),\n  tf.keras.layers.Dense(10)\n])\n","slug":"电子羊2","date":"2022-11-03T13:59:49.000Z","categories_index":"","tags_index":"深度学习","author_index":"Algernon"},{"id":"7cd45e73325ddad87a2769240b2106a6","title":"【电子羊的奇妙冒险】初试深度学习（1）","content":"最近忙于浩繁的学习任务，深感知识体系庞大，而面向百度学习又免不了亦步亦趋的情况，于是特开一个板块用于记录学习历程，也顺便作为笔记，适时阶段性总结。\n环境配置配置清单\n\n硬件：联想拯救者（GTX 1050ti）\n系统：Ubuntu 20.04 64位\n首先，因为《优雅的使用Matlab进行机器学习》这门课需要在课堂上使用Matlab且连上三节，我的小小游戏本是无法实现开着Matlab再续航三小时的，于是入手了小新14pro，承担上课、写代码以及部分稿件写作的功能。于是拯救者闲置在寝室，为了物尽其用，同时也为了更好地适配pytorch和cuda，重装系统，并安装了双系统（windows10+Ubuntu20.04），让linux从虚拟机中解放。总之，经过一系列操作，我的学习主力逐渐由win向linux转移。\nOK，现在是软件部分。主要安装的程序如下：\n\nnvidia\ncuda\npytorch\n\n！！注意：cuda和tensorflow都对软件适配版本有要求，也就是说，经常出现一方软件更新版本而另一方还未适配的情况。如果软件安装好了却一直无法调用，很有可能是通过不同路径下载安装的软件版本不适配，这种情况下最好删掉重新找路径安装，以免之后出现问题。\nnvidia驱动安装cuda的环境配置主要来源于这位博主的博客：https://blog.csdn.net/victoryaoyu/article/details/70034569?spm=1001.2014.3001.5506也可参见官方文档\n\n\n\n\n\n\n\n\n\nhttps://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#axzz4dqv9aEUn\n对于版本适配的问题，我的建议是：\n\n根据硬件（显卡）确定nvidia版本\n依据系统版本（ubuntu）和nvidia版本确定cuda版本\n最后按照pytorch官网的配置建议下载pytorch\n验证GPU是否支持CUDA：\n\n\n\n\n\n\n\n\n\n\n\n$ lspci | grep -i nvidia\n验证linux支持：\n\n\n\n\n\n\n\n\n\n$ uname -m &amp;&amp; cat /etc/*release\n 验证gcc：\n\n\n\n\n\n\n\n\n\n$ gcc —version\n若未安装则使用一下命令：\nsudo apt-get  install  build-essential\n\n验证系统已经安装了正确的 Kernel Headers和Development Packages：\n\n\n\n\n\n\n\n\n\n$ uname -r$ sudo apt-get install linux-headers-$(uname -r)\nnvidia驱动我的建议是换源从官网下，可以选择对应版本。\n安装好后重启，终端输入\n\n\n\n\n\n\n\n\n\nnvidia -smi\n查看显卡版本信息\ncuda安装这个同样建议在官网对着版本一个一个下\n\n\n\n\n\n\n\n\n\nhttps://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;target_arch=x86_64&amp;Distribution=Ubuntu&amp;target_version=20.04&amp;target_type=deb_network\n我的版本如上图，所以终端输入命令行如下：\nwget https:&#x2F;&#x2F;developer.download.nvidia.com&#x2F;compute&#x2F;cuda&#x2F;repos&#x2F;ubuntu2004&#x2F;x86_64&#x2F;cuda-ubuntu2004.pin\nsudo mv cuda-ubuntu2004.pin &#x2F;etc&#x2F;apt&#x2F;preferences.d&#x2F;cuda-repository-pin-600\nsudo apt-key adv --fetch-keys https:&#x2F;&#x2F;developer.download.nvidia.com&#x2F;compute&#x2F;cuda&#x2F;repos&#x2F;ubuntu2004&#x2F;x86_64&#x2F;7fa2af80.pub\nsudo add-apt-repository &quot;deb https:&#x2F;&#x2F;developer.download.nvidia.com&#x2F;compute&#x2F;cuda&#x2F;repos&#x2F;ubuntu2004&#x2F;x86_64&#x2F; &#x2F;&quot;\nsudo apt-get update\nsudo apt-get -y install cuda\n\n验证CUDA Toolkit，在终端中输入以下命令：\n\n\n\n\n\n\n\n\n\n$ nvcc -V       \npytorch官网链接如下：\n\n\n\n\n\n\n\n\n\nhttps://pytorch.org/get-started/locally/\n我用的命令行是：\n\n\n\n\n\n\n\n\n\nconda install pytorch torchvision torchaudio cudatoolkit=10.2 -c pytorch\n安装后，输入下列命令：\nfrom __future__ import print_function\nimport torch\nx &#x3D; torch.rand(5, 3)\nprint(x)\n输出结果类似下面的结果即安装成功：\ntensor([[0.3380, 0.3845, 0.3217],\n        [0.8337, 0.9050, 0.2650],\n        [0.2979, 0.7141, 0.9069],\n        [0.1449, 0.1132, 0.1375],\n        [0.4675, 0.3947, 0.1426]])\n验证能否正确运行在 GPU 上：\nimport torch\ntorch.cuda.is_available()\n如果返回 True，就可以运行，否则就不能。如果不能正常运行，首先检测版本是否对应一致，若不一致，优先考虑将不适配版本彻底删除重装，省心（血泪教训）。\npytorch小试我用的是pycharm，因此有的库需要提前导入，这个好办，运行的时候会提醒你导入哪些，按照提示做就行了。\nfrom __future__ import print_function\nimport torch\n以下内容来源于pytorch官方文档：\n声明和定义torch.empty(): 声明一个未初始化的矩阵\n# 创建一个 5*3 的矩阵\nx &#x3D; torch.empty(5, 3)\nprint(x)\n输出如下：\ntensor([[9.2737e-41, 8.9074e-01, 1.9286e-37],\n        [1.7228e-34, 5.7064e+01, 9.2737e-41],\n        [2.2803e+02, 1.9288e-37, 1.7228e-34],\n        [1.4609e+04, 9.2737e-41, 5.8375e+04],\n        [1.9290e-37, 1.7228e-34, 3.7402e+06]])\n长得差不多就行了，检验torch基本功能。torch.rand()：随机初始化一个矩阵\n# 创建一个随机初始化的 5*3 矩阵\nrand_x &#x3D; torch.rand(5, 3)\nprint(rand_x)\ntorch.zeros()：创建数值皆为 0 的矩阵\n# 创建一个数值皆是 0，类型为 long 的矩阵\nzero_x &#x3D; torch.zeros(5, 3, dtype&#x3D;torch.long)\nprint(zero_x)\n输出：\ntensor([[0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0]])\ntorch.tensor()：直接传递 tensor 数值来创建\n# tensor 数值是 [5.5, 3]\ntensor1 &#x3D; torch.tensor([5.5, 3])\nprint(tensor1)\n输出：\ntensor([5.5000, 3.0000])\n操作(Operations)详见官方文档：\n\n\n\n\n\n\n\n\n\nhttps://pytorch.org/docs/stable/torch.html\n\n运算符torch.add(tensor1, tensor2, [out=tensor3])tensor1.add_(tensor2)：直接修改 tensor 变量\n\ntensor4 &#x3D; torch.rand(5, 3)\nprint(&#39;tensor3 + tensor4&#x3D; &#39;, tensor3 + tensor4)\nprint(&#39;tensor3 + tensor4&#x3D; &#39;, torch.add(tensor3, tensor4))\n# 新声明一个 tensor 变量保存加法操作的结果\nresult &#x3D; torch.empty(5, 3)\ntorch.add(tensor3, tensor4, out&#x3D;result)\nprint(&#39;add result&#x3D; &#39;, result)\n# 直接修改变量\ntensor3.add_(tensor4)\nprint(&#39;tensor3&#x3D; &#39;, tensor3)\n输出：\ntensor3 + tensor4&#x3D;  tensor([[ 0.1000,  0.1325,  0.0461],\n        [ 0.4731,  0.4523, -0.7517],\n        [ 0.2995, -0.9576,  1.4906],\n        [ 1.0461,  0.7557, -0.0187],\n        [ 2.2446, -0.3473, -1.0873]])\n\ntensor3 + tensor4&#x3D;  tensor([[ 0.1000,  0.1325,  0.0461],\n        [ 0.4731,  0.4523, -0.7517],\n        [ 0.2995, -0.9576,  1.4906],\n        [ 1.0461,  0.7557, -0.0187],\n        [ 2.2446, -0.3473, -1.0873]])\n\nadd result&#x3D;  tensor([[ 0.1000,  0.1325,  0.0461],\n        [ 0.4731,  0.4523, -0.7517],\n        [ 0.2995, -0.9576,  1.4906],\n        [ 1.0461,  0.7557, -0.0187],\n        [ 2.2446, -0.3473, -1.0873]])\n\ntensor3&#x3D;  tensor([[ 0.1000,  0.1325,  0.0461],\n        [ 0.4731,  0.4523, -0.7517],\n        [ 0.2995, -0.9576,  1.4906],\n        [ 1.0461,  0.7557, -0.0187],\n        [ 2.2446, -0.3473, -1.0873]])\n和 Numpy 数组的转换Tensor 转换为 Numpy 数组：\na &#x3D; torch.ones(5)\nprint(a)\nb &#x3D; a.numpy()\nprint(b)\n输出：\ntensor([1., 1., 1., 1., 1.])\n[1. 1. 1. 1. 1.]\nNumpy 数组转换为 Tensor转换的操作是调用 torch.from_numpy(numpy_array) 方法。例子如下所示：import numpy as np\na &#x3D; np.ones(5)\nb &#x3D; torch.from_numpy(a)\nnp.add(a, 1, out&#x3D;a)\nprint(a)\nprint(b)输出：\n[2. 2. 2. 2. 2.]\ntensor([2., 2., 2., 2., 2.], dtype&#x3D;torch.float64)\nCUDA 张量！！！很重要！！！Tensors 可以通过 .to 方法转换到不同的设备上，即 CPU 或者 GPU 上。例子如下所示：\n# 当 CUDA 可用的时候，可用运行下方这段代码，采用 torch.device() 方法来改变 tensors 是否在 GPU 上进行计算操作\nif torch.cuda.is_available():\n    device &#x3D; torch.device(&quot;cuda&quot;)          # 定义一个 CUDA 设备对象\n    y &#x3D; torch.ones_like(x, device&#x3D;device)  # 显示创建在 GPU 上的一个 tensor\n    x &#x3D; x.to(device)                       # 也可以采用 .to(&quot;cuda&quot;) \n    z &#x3D; x + y\n    print(z)\n    print(z.to(&quot;cpu&quot;, torch.double))       # .to() 方法也可以改变数值类型\n输出结果，第一个结果就是在 GPU 上的结果，打印变量的时候会带有 device=’cuda:0’，而第二个是在 CPU 上的变量。\ntensor([1.4549], device&#x3D;&#39;cuda:0&#39;)\ntensor([1.4549], dtype&#x3D;torch.float64)\n详见文档\n\n\n\n\n\n\n\n\n\nhttps://pytorch.org/tutorials/beginner/blitz/tensor_tutorial.html\n神经网络本节文档：\n\n\n\n\n\n\n\n\n\nhttps://pytorch.org/tutorials/beginner/blitz/neural_networks_tutorial.html#sphx-glr-beginner-blitz-neural-networks-tutorial-py\n在 PyTorch 中 torch.nn 专门用于实现神经网络。其中 nn.Module 包含了网络层的搭建，以及一个方法— forward(input) ，并返回网络的输出 outptu .\n下面是一个经典的 LeNet 网络，用于对字符进行分类。对于神经网络来说，一个标准的训练流程是这样的：\n\n定义一个多层的神经网络\n对数据集的预处理并准备作为网络的输入\n将数据输入到网络\n计算网络的损失\n反向传播，计算梯度\n更新网络的梯度，一个简单的更新规则是 weight = weight - learning_rate * gradient\n\n定义网络首先定义一个神经网络，下面是一个 5 层的卷积神经网络，包含两层卷积层和三层全连接层：\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nclass Net(nn.Module):\n\n    def __init__(self):\n        super(Net, self).__init__()\n        # 输入图像是单通道，conv1 kenrnel size&#x3D;5*5，输出通道 6\n        self.conv1 &#x3D; nn.Conv2d(1, 6, 5)\n        # conv2 kernel size&#x3D;5*5, 输出通道 16\n        self.conv2 &#x3D; nn.Conv2d(6, 16, 5)\n        # 全连接层\n        self.fc1 &#x3D; nn.Linear(16*5*5, 120)\n        self.fc2 &#x3D; nn.Linear(120, 84)\n        self.fc3 &#x3D; nn.Linear(84, 10)\n\n    def forward(self, x):\n        # max-pooling 采用一个 (2,2) 的滑动窗口\n        x &#x3D; F.max_pool2d(F.relu(self.conv1(x)), (2, 2))\n        # 核(kernel)大小是方形的话，可仅定义一个数字，如 (2,2) 用 2 即可\n        x &#x3D; F.max_pool2d(F.relu(self.conv2(x)), 2)\n        x &#x3D; x.view(-1, self.num_flat_features(x))\n        x &#x3D; F.relu(self.fc1(x))\n        x &#x3D; F.relu(self.fc2(x))\n        x &#x3D; self.fc3(x)\n        return x\n\n    def num_flat_features(self, x):\n        # 除了 batch 维度外的所有维度\n        size &#x3D; x.size()[1:]\n        num_features &#x3D; 1\n        for s in size:\n            num_features *&#x3D; s\n        return num_features\n\nnet &#x3D; Net()\nprint(net)\n打印网络结构：\nNet(\n  (conv1): Conv2d(1, 6, kernel_size&#x3D;(5, 5), stride&#x3D;(1, 1))\n  (conv2): Conv2d(6, 16, kernel_size&#x3D;(5, 5), stride&#x3D;(1, 1))\n  (fc1): Linear(in_features&#x3D;400, out_features&#x3D;120, bias&#x3D;True)\n  (fc2): Linear(in_features&#x3D;120, out_features&#x3D;84, bias&#x3D;True)\n  (fc3): Linear(in_features&#x3D;84, out_features&#x3D;10, bias&#x3D;True)\n)\n\n这里必须实现 forward 函数，而 backward 函数在采用 autograd 时就自动定义好了，在 forward 方法可以采用任何的张量操作。\nnet.parameters() 可以返回网络的训练参数，使用例子如下：\nparams &#x3D; list(net.parameters())\nprint(&#39;参数数量: &#39;, len(params))\n# conv1.weight\nprint(&#39;第一个参数大小: &#39;, params[0].size())\n输出：\n参数数量:  10\n第一个参数大小:  torch.Size([6, 1, 5, 5])\n然后简单测试下这个网络，随机生成一个 32*32 的输入：\n# 随机定义一个变量输入网络\ninput &#x3D; torch.randn(1, 1, 32, 32)\nout &#x3D; net(input)\nprint(out)\n输出结果：\ntensor([[ 0.1005,  0.0263,  0.0013, -0.1157, -0.1197, -0.0141,  0.1425, -0.0521,\n          0.0689,  0.0220]], grad_fn&#x3D;&lt;ThAddmmBackward&gt;)\n训练分类器标题训练数据在训练分类器前，当然需要考虑数据的问题。通常在处理如图片、文本、语音或者视频数据的时候，一般都采用标准的 Python 库将其加载并转成 Numpy 数组，然后再转回为 PyTorch 的张量。\n对于图像，可以采用 Pillow, OpenCV 库；对于语音，有 scipy 和 librosa;对于文本，可以选择原生 Python 或者 Cython 进行加载数据，或者使用 NLTK 和 SpaCy 。PyTorch 对于计算机视觉，特别创建了一个 torchvision 的库，它包含一个数据加载器(data loader)，可以加载比较常见的数据集，比如 Imagenet, CIFAR10, MNIST 等等，然后还有一个用于图像的数据转换器(data transformers)，调用的库是 torchvision.datasets 和 torch.utils.data.DataLoader 。\n在本教程中，将采用 CIFAR10 数据集，它包含 10 个类别，分别是飞机、汽车、鸟、猫、鹿、狗、青蛙、马、船和卡车。数据集中的图片都是 3x32x32。一些例子如下所示：\n训练图片分类器训练流程如下：\n\n通过调用 torchvision 加载和归一化 CIFAR10 训练集和测试集；\n构建一个卷积神经网络；\n定义一个损失函数；\n在训练集上训练网络；\n在测试集上测试网络性能。\n\n加载和归一化 CIFAR10首先导入必须的包\nimport torch\nimport torchvision\nimport torchvision.transforms as transforms\ntorchvision 的数据集输出的图片都是 PILImage ，即取值范围是 [0, 1] ，这里需要做一个转换，变成取值范围是 [-1, 1] , 代码如下所示：\n# 将图片数据从 [0,1] 归一化为 [-1, 1] 的取值范围\ntransform &#x3D; transforms.Compose(\n    [transforms.ToTensor(),\n     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])\n\ntrainset &#x3D; torchvision.datasets.CIFAR10(root&#x3D;&#39;.&#x2F;data&#39;, train&#x3D;True,\n                                        download&#x3D;True, transform&#x3D;transform)\ntrainloader &#x3D; torch.utils.data.DataLoader(trainset, batch_size&#x3D;4,\n                                          shuffle&#x3D;True, num_workers&#x3D;2)\n\ntestset &#x3D; torchvision.datasets.CIFAR10(root&#x3D;&#39;.&#x2F;data&#39;, train&#x3D;False,\n                                       download&#x3D;True, transform&#x3D;transform)\ntestloader &#x3D; torch.utils.data.DataLoader(testset, batch_size&#x3D;4,\n                                         shuffle&#x3D;False, num_workers&#x3D;2)\n\nclasses &#x3D; (&#39;plane&#39;, &#39;car&#39;, &#39;bird&#39;, &#39;cat&#39;,\n           &#39;deer&#39;, &#39;dog&#39;, &#39;frog&#39;, &#39;horse&#39;, &#39;ship&#39;, &#39;truck&#39;)\n这里下载好数据后，可以可视化部分训练图片，代码如下：\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# 展示图片的函数\ndef imshow(img):\n    img &#x3D; img &#x2F; 2 + 0.5     # 非归一化\n    npimg &#x3D; img.numpy()\n    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n    plt.show()\n\n\n\n# 随机获取训练集图片\ndataiter &#x3D; iter(trainloader)\nimages, labels &#x3D; dataiter.next()\n\n# 展示图片\nimshow(torchvision.utils.make_grid(images))\n# 打印图片类别标签\nprint(&#39; &#39;.join(&#39;%5s&#39; % classes[labels[j]] for j in range(4)))\n展示图片如下所示：其类别标签为：\n\n\n\n\n\n\n\n\n\n frog plane   dog  ship\n实战：\n构建一个卷积神经网络这部分内容其实直接采用上一节定义的网络即可，除了修改 conv1 的输入通道，从 1 变为 3，因为这次接收的是 3 通道的彩色图片。\nimport torch.nn as nn\nimport torch.nn.functional as F\n\n\nclass Net(nn.Module):\n    def __init__(self):\n        super(Net, self).__init__()\n        self.conv1 &#x3D; nn.Conv2d(3, 6, 5)\n        self.pool &#x3D; nn.MaxPool2d(2, 2)\n        self.conv2 &#x3D; nn.Conv2d(6, 16, 5)\n        self.fc1 &#x3D; nn.Linear(16 * 5 * 5, 120)\n        self.fc2 &#x3D; nn.Linear(120, 84)\n        self.fc3 &#x3D; nn.Linear(84, 10)\n\n    def forward(self, x):\n        x &#x3D; self.pool(F.relu(self.conv1(x)))\n        x &#x3D; self.pool(F.relu(self.conv2(x)))\n        x &#x3D; x.view(-1, 16 * 5 * 5)\n        x &#x3D; F.relu(self.fc1(x))\n        x &#x3D; F.relu(self.fc2(x))\n        x &#x3D; self.fc3(x)\n        return x\n\n\nnet &#x3D; Net()\n定义损失函数和优化器这里采用类别交叉熵函数和带有动量的 SGD 优化方法：\nimport torch.optim as optim\n\ncriterion &#x3D; nn.CrossEntropyLoss()\noptimizer &#x3D; optim.SGD(net.parameters(), lr&#x3D;0.001, momentum&#x3D;0.9)\n训练网络指定需要迭代的 epoch，然后输入数据，指定次数打印当前网络的信息，比如 loss 或者准确率等性能评价标准。\nimport time\nstart &#x3D; time.time()\nfor epoch in range(2):\n\n    running_loss &#x3D; 0.0\n    for i, data in enumerate(trainloader, 0):\n        # 获取输入数据\n        inputs, labels &#x3D; data\n        # 清空梯度缓存\n        optimizer.zero_grad()\n\n        outputs &#x3D; net(inputs)\n        loss &#x3D; criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n\n        # 打印统计信息\n        running_loss +&#x3D; loss.item()\n        if i % 2000 &#x3D;&#x3D; 1999:\n            # 每 2000 次迭代打印一次信息\n            print(&#39;[%d, %5d] loss: %.3f&#39; % (epoch + 1, i+1, running_loss &#x2F; 2000))\n            running_loss &#x3D; 0.0\nprint(&#39;Finished Training! Total cost time: &#39;, time.time()-start)\n这里定义训练总共 2 个 epoch，训练信息如下，大概耗时为 77s\n[1,  2000] loss: 2.226\n[1,  4000] loss: 1.897\n[1,  6000] loss: 1.725\n[1,  8000] loss: 1.617\n[1, 10000] loss: 1.524\n[1, 12000] loss: 1.489\n[2,  2000] loss: 1.407\n[2,  4000] loss: 1.376\n[2,  6000] loss: 1.354\n[2,  8000] loss: 1.347\n[2, 10000] loss: 1.324\n[2, 12000] loss: 1.311\n\nFinished Training! Total cost time:  77.24696755409241\n实战：\n测试模型性能训练好一个网络模型后，就需要用测试集进行测试，检验网络模型的泛化能力。对于图像分类任务来说，一般就是用准确率作为评价标准。\n首先，我们先用一个 batch 的图片进行小小测试，这里 batch=4 ，也就是 4 张图片，代码如下：\ndataiter &#x3D; iter(testloader)\nimages, labels &#x3D; dataiter.next()\n\n# 打印图片\nimshow(torchvision.utils.make_grid(images))\nprint(&#39;GroundTruth: &#39;, &#39; &#39;.join(&#39;%5s&#39; % classes[labels[j]] for j in range(4)))\n图片和标签分别如下所示：\n\n\n\n\n\n\n\n\n\nGroundTruth:    cat  ship  ship plane\n然后用这四张图片输入网络，看看网络的预测结果\n# 网络输出\noutputs &#x3D; net(images)\n\n# 预测结果\n_, predicted &#x3D; torch.max(outputs, 1)\nprint(&#39;Predicted: &#39;, &#39; &#39;.join(&#39;%5s&#39; % classes[predicted[j]] for j in range(4)))\n输出为：\n\n\n\n\n\n\n\n\n\nPredicted:    cat  ship  ship  ship\n\n前面三张图片都预测正确了，第四张图片错误预测飞机为船在整个测试集上的准确率：\ncorrect &#x3D; 0\ntotal &#x3D; 0\nwith torch.no_grad():\n    for data in testloader:\n        images, labels &#x3D; data\n        outputs &#x3D; net(images)\n        _, predicted &#x3D; torch.max(outputs.data, 1)\n        total +&#x3D; labels.size(0)\n        correct +&#x3D; (predicted &#x3D;&#x3D; labels).sum().item()\n\nprint(&#39;Accuracy of the network on the 10000 test images: %d %%&#39; % (100 * correct &#x2F; total))\n输出结果如下\n\n\n\n\n\n\n\n\n\nAccuracy of the network on the 10000 test images: 55 %\n这里可能准确率并不一定一样，教程中的结果是 51% ，因为权重初始化问题，可能多少有些浮动，相比随机猜测 10 个类别的准确率(即 10%)，这个结果是不错的，当然实际上是非常不好，不过我们仅仅采用 5 层网络，而且仅仅作为教程的一个示例代码。\n然后，还可以再进一步，查看每个类别的分类准确率，跟上述代码有所不同的是，计算准确率部分是 c = (predicted == labels).squeeze()，这段代码其实会根据预测和真实标签是否相等，输出 1 或者 0，表示真或者假，因此在计算当前类别正确预测数量时候直接相加，预测正确自然就是加 1，错误就是加 0，也就是没有变化。\nclass_correct &#x3D; list(0. for i in range(10))\nclass_total &#x3D; list(0. for i in range(10))\nwith torch.no_grad():\n    for data in testloader:\n        images, labels &#x3D; data\n        outputs &#x3D; net(images)\n        _, predicted &#x3D; torch.max(outputs, 1)\n        c &#x3D; (predicted &#x3D;&#x3D; labels).squeeze()\n        for i in range(4):\n            label &#x3D; labels[i]\n            class_correct[label] +&#x3D; c[i].item()\n            class_total[label] +&#x3D; 1\n\n\nfor i in range(10):\n    print(&#39;Accuracy of %5s : %2d %%&#39; % (classes[i], 100 * class_correct[i] &#x2F; class_total[i]))\n输出结果，可以看到猫、鸟、鹿是错误率前三，即预测最不准确的三个类别，反倒是船和卡车最准确。\n\n\n\n\n\n\n\n\n\nAccuracy of plane : 58 %Accuracy of   car : 59 %Accuracy of  bird : 40 %Accuracy of   cat : 33 %Accuracy of  deer : 39 %Accuracy of   dog : 60 %Accuracy of  frog : 54 %Accuracy of horse : 66 %Accuracy of  ship : 70 %Accuracy of truck : 72 %\n实战：\n在 GPU 上训练深度学习自然需要 GPU 来加快训练速度的。所以接下来介绍如果是在 GPU 上训练，应该如何实现。\n首先，需要检查是否有可用的 GPU 来训练，代码如下：\ndevice &#x3D; torch.device(&quot;cuda:0&quot; if torch.cuda.is_available() else &quot;cpu&quot;)\nprint(device)\n输出结果如下，这表明你的第一块 GPU 显卡或者唯一的 GPU 显卡是空闲可用状态，否则会打印 cpu 。\n\n\n\n\n\n\n\n\n\ncuda:0\n既然有可用的 GPU ，接下来就是在 GPU 上进行训练了，其中需要修改的代码如下，分别是需要将网络参数和数据都转移到 GPU 上：\nnet.to(device)\ninputs, labels &#x3D; inputs.to(device), labels.to(device)\n修改后的训练部分代码：\nimport time\n# 在 GPU 上训练注意需要将网络和数据放到 GPU 上\nnet.to(device)\ncriterion &#x3D; nn.CrossEntropyLoss()\noptimizer &#x3D; optim.SGD(net.parameters(), lr&#x3D;0.001, momentum&#x3D;0.9)\n\nstart &#x3D; time.time()\nfor epoch in range(2):\n\n    running_loss &#x3D; 0.0\n    for i, data in enumerate(trainloader, 0):\n        # 获取输入数据\n        inputs, labels &#x3D; data\n        inputs, labels &#x3D; inputs.to(device), labels.to(device)\n        # 清空梯度缓存\n        optimizer.zero_grad()\n\n        outputs &#x3D; net(inputs)\n        loss &#x3D; criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n\n        # 打印统计信息\n        running_loss +&#x3D; loss.item()\n        if i % 2000 &#x3D;&#x3D; 1999:\n            # 每 2000 次迭代打印一次信息\n            print(&#39;[%d, %5d] loss: %.3f&#39; % (epoch + 1, i+1, running_loss &#x2F; 2000))\n            running_loss &#x3D; 0.0\nprint(&#39;Finished Training! Total cost time: &#39;, time.time() - start)\n","slug":"电子羊1","date":"2022-11-03T13:58:49.000Z","categories_index":"","tags_index":"深度学习","author_index":"Algernon"},{"id":"e4001ef3af977cd071aff3164f892814","title":"《深度学习》 笔记（二）","content":"第二部分 深度网络：现代实践深度前馈网络深度前馈网络，也叫做前馈神经网络或者多层感知机，是典型的深度学习模型。\n这种模型被称为前向的，是因为信息流过$x$的函数，流经用于定义$f$的中间计算过程，最终到达输出$y$。在模型的输出和模型本身之间没有反馈连接。当前馈神经网络被扩展成包含反馈连接时，它们被称为循环神经网络。\n前馈神经网络被称作网络是因为它们通常用不同函数复合在一起来表示。该模型与一个有向无环图相关联，而图描述了函数是如何复合在一起的。\n例如，我们有三个函数$f^{(1)}$,$f^{(2)}$,$f^{(3)}$连接在一个链上以形成$f(x)=f^{(3)}(f^{(2)}(f^{(1)}(x)))$。这些链式结构是神经网络中最常用的结构。在这种情况下，$f^{(1)}$被称为网络的第一层，$f^{(2)}$被称为第二层，以此类推。链的全长称为模型的深度。前馈网络的最后一层被称为 输出层。\n基于梯度的学习混合密度网络反向传播\n深度学习中的正则化参数范数惩罚权重衰减\n作为约束的范数惩罚\n数据集增强噪声鲁棒性半监督学习多任务学习\n深度模型中的优化机器学习算法的目标是降低期望泛化误差。\n批量算法和小批量算法机器学习算法和一般优化算法不同的一点是，机器学习算法的目标函数通常可以分解为训练样本上的求和。机器学习中的优化算法在计算参数的每一次更新时通常仅使用整个代价函数中的一部分项来估计代价函数的期望值。\n基本算法随机梯度下降随机梯度下降（SGD）及其变种很可能是一般机器学习中应用最多的优化算法，特别是在深度学习中。按照数据生成分布抽取$m$个小批量样本，通过计算它们的梯度均值，我们可以得到梯度的无偏估计。\n卷积网络卷积网络，也叫做卷积神经网络，是一种专门用来处理具有类似网格结构的数据的神经网络。例如时间序列数据（可以认为是在时间轴上有规律地采样形成的一维网格）和图像数据（可以看作是二维的像素网络）。\n“卷积神经网络”一词表明该网络使用了卷积这种数学运算。卷积是一种特殊的线性运算。卷积网络是指那些至少在网络的一层中使用卷积运算来替代一般的矩阵乘法运算的神经网络。\n卷积运算在通常形式中，卷积是对两个实变函数的一种数学运算。卷积运算通常用星号表示：$s(t)=(xw)(t).$在卷积网络的术语中，卷积的第一个参数（$x$）通常叫做输入，第二个参数（函数$w$）叫做核函数。输出有时被称作*特征映射。\n动机卷积运算通过三个重要的思想来帮助改进机器学习系统：稀疏交互、参数共享、等变表示。参数共享是指一个模型的多个函数中使用相同的参数。\n池化卷积网络中一个典型层包含三级。\n\n在第一级中，这一层并行地计算多个卷积产生一组线性激活响应。\n在第二级中，每一个线性激活响应将会通过一个非线性的激活函数 ，例如 整流线性激活函数。这一级有时也被称为探测级。\n在第三级中，我们使用池化函数来进一步调整这一层的输出。\n池化函数使用某一位置的相邻输出的总体统计特征来代替网络在该位置的输出。例如，最大池化函数给出相邻矩形区域内的最大值。\n\n\n序列建模：循环和递归网络循环神经网络或RNN是一类用于处理序列数据的神经网络。\n深度循环网络大多数RNN中的计算可以分解成三块参数及其相关的变换：\n\n从输入到隐藏状态\n从前一隐藏状态到下一隐藏状态，以及\n从隐藏状态到输出\n递归神经网络递归神经网络代表循环网络的另一个扩展，它被构造为深的树状结构而不是RNN的链状结构，因此是不同类型的计算图。\n\n\n应用级联\n计算机视觉预处理对比度归一化全局对比度归一化$（GCN)$旨在通过从每个图像中减去其平均值，然后重新缩放使得其像素上的标准差等于某个常数$s$来防止图像具有变化的对比度。\n白化：与直觉相反的是，存在被称为$sphering$的预处理操作，并且它不同于$GCN$。$sphering$并不会使数据位于球形壳上，而是将主成分重新缩放以具有相等方差。$sphering$通常被称为白化。\n 局部对比归一化通常可以通过使用可分离卷积来计算特征映射的局部平均值和局部标准差，然后在不同的特征映射上使用逐元素的减法和除法。\n 数据集增强\n语音识别 语音识别任务在于将一段包括了自然语言发音的声学信号投影到对应说话人的词序列上。\n 之前，最先进的语音识别系统是隐马尔可夫模型（HMM)和高斯混合模型(GMM)的结合。GMM对声学特征和音素之间的关系建模，HMM对音素序列建模。 之后，随着更大更深的模型以及更大的数据集的出现，通过使用神经网络代替GMM来实现将声学特征转化为音素的过程可以大大提高识别的精度。\n自然语言处理$n-gram$语言模型定义了自然语言中标记序列的概率分布。 \n神经语言模型神经语言模型是一类用来克服维数灾难的语言模型，它使用词的分布式表示对自然语言序列建模。\n其他应用推荐系统协同过滤\n强化学习需要权衡探索与利用。利用指的是从目前学到的最好策略采取动作，也就是我们所知的将获得高奖励的动作。探索是指采取行动以获得更多的训练数据。\n第三部分  深度学习研究线性因子模型独立成分分析\n慢特征分析慢特征分析是使用来自时间信号的信息信号不变特征的线性因子模型。慢特征分析的想法源于所谓的慢性原则。其基本思想是，与场景中其描述作用的单个量度相比，场景的重要特性通常变化地非常缓慢。\n蒙特卡罗方法随机算法可以粗略地分为两类：Las Vegas算法和蒙特卡罗算法。\n采样与蒙特卡罗方法重要采样\n\n最优重要采样\n有偏重要采样\n马尔可夫链蒙特卡罗方法Gibbs采样\n\n深度生成模型玻尔兹曼机玻尔兹曼机的学习算法基于最大似然。\n深度信念网络深度信念网络是第一批成功应用深度架构训练的非卷积模型之一。\n主要有两种方法可以处理深度玻尔兹曼机的联合训练问题。第一个是中心化深度玻尔兹曼机。第二个是使用多预测深度玻尔兹曼机\n","slug":"深度学习2","date":"2022-11-03T13:56:49.000Z","categories_index":"","tags_index":"深度学习","author_index":"Algernon"},{"id":"6e741307528ed1e909d0d5dbdbcaa4c0","title":"《深度学习》 笔记（一）","content":"深度学习的另一个最大大成就是其在强化学习领域的扩展。在强化学习中，一个自主的智能体必须在没有人类操作者指导的情况下，通过试错来完成任务。\n第一部分 应用数学与机器学习基础线性代数范数在机器学习中，我们经常使用被称为范数的函数衡量向量大小。p=2时，$L^2$范数被称为欧几里得范数。它表示从原点出发到向量$x$确定的点的欧几里得距离。\n概率与信息论不确定性有三种可能的来源：\n\n被建模系统内在的随机性\n不完全观测\n不完全建模\n随机变量随机变量是可以随机地取不同值的变量。我们通常用无格式字体中的小写字母来表示随机变量本身，而用手写体中的小写字母来表示随机变量能够取到的值。\n\n\n概率分布概率分布用来描述随机变量或一簇随机变量在每一个可能取到的状态的可能性大小。我们描述概率分布的方式取决于随机变量是离散的还是连续的。\n离散型变量和概率质量函数离散型变量的概率分布可以用概率质量函数来描述。通常用大写字母$P$来表示。概率质量函数可以同时作用于多个随机变量。这种多个变量的概率分布被称为联合概率分布。\n连续型变量和概率密度函数当我们研究的对象是连续型随机变量时，我们用概率密度函数来描述概率分布。概率密度函数$p(x)$并没有直接对特定状态给出概率，相对的，它给出了落在面积为$\\sigma x$的无限小的区域内的概率为$p(x)\\sigma x$。\n边缘概率有时，我们知道了一组变量的联合概率分布，但想要了解其中一个子集的概率分布。这种定义在子集上的概率分布被称为边缘概率分布。例如，假设有离散型随机变量x和y，并且我们知道$P({\\rm x},{\\rm y})$。我们可以依据下面的求和法则来计算$P(x)$:\n{\\forall}x\\in {\\rm x},P({\\rm x}=x )=\\sum_{y}P({\\rm x}=x, {\\rm y}=y)“边缘概率”的名称来源于手算边缘概率的计算过程。当$P({\\rm x},{\\rm y})$的每个值被写在由每行表示不同的$x$值，每列表示不同的$y$值形成的网络中时，对网格中的每行求和，然后将求和的结果$P(x)$写在每行右边的纸的边缘处。\n对于连续型变量，我们需要用积分替代求和：   $p(x)=\\int p(x,y)dy.$\n条件概率条件概率的链式法则独立性和条件独立性\n常用概率分布许多简单的概率分布在机器学习的众多领域中都是有用的。\nBernoulli分布Bernoulli分布是单个二值随机变量的分布。它由单个参数$\\phi\\in[0,1]$控制，$\\phi$给出了随机变量等于1的概率。它具有如下的一些性质：$P({\\rm x}=1)=\\phi$$P({\\rm x}=0)=1-\\phi$$P({\\rm x}=x)={\\phi}^x （1-{\\phi}）^{1-x}$$\\Epsilon_{\\rm x}[{\\rm x}]=\\phi$$Var_{\\rm x}[{\\rm x}]=\\phi(1-\\phi)$\nMultinoulli分布Multinoulli分布或者范畴分布是指在具有$k$个不同状态的单个离散型随机变量上的分布，其中$k$是一个有限值。Multinoulli分布由向量$p\\in[0,1]^{k-1}$参数化，其中每个分量$p_i$表示第$i$个状态的概率。最后的第$k$个状态的概率可以通过1-$1^\\top p$给出。注意，我们必须限制$1^\\top \\le1$。\n高斯分布实数上最常用的分布就是正态分布，也称为高斯分布：$\\mathcal N(x;\\mu,\\sigma^2)=\\sqrt[3]{\\frac{1}{2\\pi\\sigma^2}}{\\rm exp}(-\\frac{1}{2\\sigma^2}(x-\\mu)^2)$\n采用正态分布在很多应用中都是一个明智的选择。当我们由于缺乏关于某个实数上分布的先验知识而不知道该选择怎样的形式时，正态分布是默认的比较好的选择，其中有两个原因：\n第一，中心极限定理说明很多独立随机变量的和近似服从正态分布。这意味着在实际中，很多复杂系统都可以被成功地建模成正态分布的噪声，即使系统可以被分解成一些更结构化的部分。\n第二，在具有相同方差的所有可能的概率分布中，正态分布在实数上具有最大的不确定性。正态分布可以推广到$R^n$空间，这种情况下被称为多维正态分布。\n指数分布和Laplace分布在深度学习中，我们经常会需要一个在$x=0$点处取得边界点的分布。为了实现这一目的，我们可以使用指数分布：$p(x;\\lambda)=\\lambda1_{x\\ge0}{\\rm exp}(-\\lambda x).$\n一个联系紧密的概率分布是Laplace分布，它允许我们在任意一点$\\mu$处设置概率质量的峰值Laplace$(x;\\mu,\\gamma)=\\frac{1}{2\\gamma}{\\rm exp}(-\\frac{\\vert x-\\mu\\vert}{\\gamma})$\nDirac分布和经验分布在一些情况下，我们希望概率分布中的所有质量都集中到一个点上。这可以通过Dirac delta 函数$\\delta(x)$定义概率密度来实现：$p(x)=\\delta(x-\\mu)$Dirac delta 函数不像普通函数一样对$x$的每一个值都有一个实数值的输出，它是一种不同类型的数学对象，被称为广义函数，广义函数是依据积分性质定义的数学对象。Dirac分布经常作为经验分布的一个组成部分出现。\n分布的混合一个非常强大且常见的混合模型是高斯混合模型。\n常用函数的有用性质某些函数在处理概率分布时经常会出现，尤其是深度学习的模型中用到的概率分布。其中一个函数是logistic sigmoid 函数：$\\sigma(x)=\\frac{1}{1+{\\rm exp}(-x)}.$另外一个经常用到的函数是softplus函数：$\\zeta(x)=log(1+{\\rm exp}(x)).$\n信息论信息论是应用数学的一个分支，主要研究的是对一个信号包含信息的多少进行量化。…我们想用这种基本想法来量化信息。特别地，\n\n非常可能发生的时间信息量要比较少，并且极端情况下，确保能够发生的事件应该没有信息量。\n较不可能发生的事件具有更高的信息量。\n独立事件应具有增量的信息。\n为了满足上述三个性质，我们定义一个时间${\\rm x}=x$的自信息为：$I(x)=-logP(x).$本书中，我们用log来表示自然对数，其底数为$e$。因此，我们定义的$I(x)$单位是奈特。一奈特是以$\\frac{1}{e}$的概率观测到一个事件时获得的信息量。其他的材料中使用底数为2的对数，单位是比特或者香农。自信息只处理单个的输出。我们可以用香农熵来对整个概率分布中的不确定性总量进行量化。如果我们对同一个随机变量x有两个单独的概率分布P（x）和Q（x），我们可以使用KL散度来衡量这两个分布的差异。\n\n\n结构化概率模型机器学习的算法经常会涉及到在非常多的随机变量上的概率分布。我们可以把概率分布分解成许多因子的乘积形式，而不是使用单一的函数来表示概率分布。我们可以用图来描述这种分解。这里我们使用的是图论中的“图”的概念：由一些可以通过边互相连接的顶点的集合构成。当我们用图来表示这种概率分布的分解，我们把它称为结构化概率模型或者图模型有两种主要的结构化概率模型：有向的和无向的。\n数值计算上溢和下溢必须对上溢和下溢进行数值稳定的一个例子是softmax函数，该函数经常用于预测与Multinoulli分布相关联的概率。\n基于梯度的优化算法我们把要最小化或最大化的函数称为目标函数或准则。当我们对其进行最小化时，我们也把它称为代价函数、损失函数或误差函数\n梯度之上：Jacobian和Hessian矩阵有时我们需要计算输入和输出都为向量的函数的所有偏导数。包含所有这样的偏导数的矩阵被称为Jacobian矩阵。当我们的函数具有多维输入时，二阶导数也有很多。我们可以将这些导数合并为一个矩阵，称为Hessian矩阵。仅使用梯度信息的优化算法被称为一阶优化算法，如梯度下降。使用Hessian矩阵的优化算法被称为二阶最优化算法，如牛顿法。\n机器学习基础算法通常机器学习任务定义为机器学习系统应该如何处理样本。样本是指我们从某些希望机器学习系统处理的对象或事件中收集到的已经量化的特征的集合。一些常见的机器学习任务列举如下：\n\n分类\n输入缺失分类\n回归\n转录\n机器翻译\n结构化输出\n异常检测\n合成与采样\n缺失值填补\n去噪\n密度估计或概率质量函数估计\n根据学习过程中的不同经验，机器学习算法可以大致分类为无监督算法和监督算法。\n无监督学习算法训练含有很多特征的数据集，然后学习出这个数据集上有用的结构性质。在深度学习中，我们通常要学习生成数据集的整个概率分布，显式地，比如密度估计，或者是隐式地，比如合成或去噪。还有一些其他类型的无监督学习任务，例如聚类，将数据集分成相似样本的集合。监督学习算法训练含有很多特征的数据集，不过数据集中的样本都有一个标签或目标。有些机器学习算法并不是训练于一个固定的数据集上。例如，强化学习算法会和环境进行交互，所以学习系统和它的训练过程会有反馈回路。贝叶斯误差\n没有免费午餐定理机器学习的没有免费午餐定理表明，在所有可能的数据生成分布上平均之后，每一个分类算法在未实现观测的点上都有相同的错误率。正则化是指我们修改学习算法，使其降低泛化误差而非训练误差。\n估计、偏差和方差点估计点估计试图为一些感兴趣的量提供单个“最优”预测。函数估计\n偏差无偏渐进无偏样本方差无偏样本方差\n最大似然估计在合适的条件下，最大似然估计具有一致性，意味着训练样品数目趋向无穷大时，参数的最大似然估计会收敛到参数的真实值。\n贝叶斯统计先验概率分布\n监督学习算法概率监督学习逻辑回归\n支持向量机支持向量机是监督学习中最有影响力的方法之一。支持向量机不输出概率，只输出类别。支持向量机的一个重要创新是核技巧最常用的核函数是高斯核$k(\\mu,\\nu)=\\mathcal N(\\mu-\\nu;0,\\sigma^2I)$这个核也被称为径向基函数核，因为其值沿$\\nu$中从$\\mu$向外辐射的方向减小。\n其他简单的监督学习算法最近邻回归——k-最近邻决策树及其变种是另一类将输入空间分成不同的区域，每个区域有独立参数的算法。\n无监督学习算法主成分分析$k-$均值聚类\n$k-$均值聚类算法将训练集分成$k$个靠近彼此的不同样本聚类。\n随机梯度下降随机梯度下降的核心是，梯度是期望。期望可使用小规模的样本近似估计。\n流形学习流形是指连接在一起的区域。\n\n\n","slug":"深度学习1","date":"2022-11-03T13:54:49.000Z","categories_index":"","tags_index":"深度学习","author_index":"Algernon"},{"id":"6165171c95ee293a7ed71a60e0ed0daa","title":"Python实训题目","content":"写在前面学校python课实训平台的oj太敏感辣，少一个空格都会报错——面向答案编程。为纪念在python实践课上花费的不多但受苦的经历，特将代码保存于博客上。宁愿刷leetcode也不愿意跑python代码\n2.1 表达式和基本输入输出2.1.1 数据输入与输出\n\n\n\n\n\n\n\n\n任务描述本关任务：根据题目要求输出表达式的值，掌握python数据的输入与输出问题。\n相关知识要完成本关，你需要掌握 print( ),input()，eval()函数的用法。print(*objects, sep=’ ‘, end=’\\n’, file=sys.stdout, flush=False)参数:objects – 复数，表示可以一次输出多个对象。输出多个对象时，需要用 , 分隔。sep – 用来间隔多个对象，默认值是一个空格。end – 用来设定以什么结尾。默认值是换行符 \\n，我们可以换成其他字符串。file – 要写入的文件对象。flush – 输出是否被缓存通常决定于 file，但如果 flush 关键字参数为 True，流会被强制刷新。举例：\n\n\n\n\n\n\n\n\n\n\n\nprint(1)1print(“Hello World”)Hello World  \na = 1b = ‘runoob’print(a,b) #默认自动换行1 runoobprint(“aaa””bbb”)aaabbbprint(“aaa”,”bbb”)aaa bbbprint(“www”,”runoob”,”com”,sep=”.”)  # 设置间隔符www.runoob.comx,y=12,34print(x) #默认自动换行12print(y)#默认自动换行34print(x,y,end=’’) #通过参数end 设置结尾符可控制一行显示多个数据12 34input()以字符串的方式获取用户输入,但无法直接参与算术运算例如：x = input() 4.5type(x)\nx=input()12y=input()34print(x+y)1234\n\n\neval(&lt;字符串&gt;):将输入的字符串转变成python语句,可实现算术运算\n\n\n\n\n\n\n\n\n\n\n\nx,y=eval(input())12,34print(x+y)46\n\n\n题目\n\n\n\n\n\n\n\n\n\n编程要求根据提示，在右侧编辑器补充代码，完成如下程序的编写。\n第一题    在屏幕上输出字符串：hi, “how are you”, I’m fine and you  \n第二题    从键盘输入两个整数，计算两个数相除的商与余数    假设输入12,5    输出为 2,2  \n第三题    在屏幕上 输入一个三位数输出该数的个位、十位和百位数字。   假设输入125   输出为 5,2,1   \n第四题     已知a=1.234567,请按指定格式输出a的值。1.按保留小数点后3位，2.指数形式,尾数部分保留小数点2位 ，输出格式：采用一行输出，中间用，隔开。  \n第五题     请问一个硬盘的存储容量为500GB, 请问该硬盘最多可存放多少个字节的数据量？     提示：字节为最小的存储单位，硬盘容量500GB中的B是指字节byte。1G=1024M, 1M=1024K, 1K=1024。  \n第六题     计算并判断$1.01^ 3∗0.99 ^2$ , 是否大于1.01，输出判断结果True或False。可知“三天打鱼，两天晒网，终将一无所获”。     提示：直接用关系运算符进行比较，关系运算符的输出是逻辑值True或False。代码：\n# -*- coding: utf-8 -*-\n&quot;&quot;&quot;\nCreated on Sun Sep  6 21:39:58 2020\n\n@author: hzh\n&quot;&quot;&quot;\n \n#第一题:在屏幕上输出字符串：hi, &quot;how are you&quot;, I&#39;m fine and you\n#-------begin-------------#\n\nprint(&quot;hi, \\&quot;how are you\\&quot;, I&#39;m fine and you&quot;)\n#-------ends--------------# \n\n#第二题:从键盘输入两个整数，计算两个数相除的商与余数\nx,y &#x3D; eval(input())\n#-------b.1egin-----------\ns &#x3D; x&#x2F;y\nm &#x3D; x%y\nprint(s,end&#x3D;&quot; &quot;)\nprint(&quot;%d&quot;%m)\n\n#-------ends------------- \n\n#第三题:在屏幕上输入一个三位数输出该数的个位、十位和百位数字\nx &#x3D; eval(input())\n#-------begin-----------\ng &#x3D; x&#x2F;&#x2F;100\ns &#x3D; (x-100*g)&#x2F;&#x2F;10\nb &#x3D; (x-100*g-10*s)\nprint(&quot;%d &quot;%b,end&#x3D;&quot;&quot;) \nprint(&quot;%d &quot;%s,end&#x3D;&quot;&quot;)\nprint(&quot;%d&quot;%g)  \n\n \n\n#-------ends------------ \n \n#第四题:已知a&#x3D;1.234567,b&#x3D;0.000321 .按保留小数点后3位输出a，2.按指数形式输出 b\na,b &#x3D; 1.234567, 0.00321\n#-------begin-----------\nimport math\nprint(&quot;a&#x3D;%.3f,&quot;%a,end&#x3D;&quot;&quot;)\n\nprint(&quot;b&#x3D;%.2e&quot;%b)\n \n#-------ends------------  \n     \n#第五题:请问一个硬盘的存储容量为500GB, 请问该硬盘最多可存放多少个字节的数据量\n#-------begin-----------\n  \nx &#x3D; 500*2**30\nprint(&quot;%s&quot;%x)\n\n#-------ends------------           \n\n#第六题:计算并判断题干中表达式的值是否大于1.01，输出判断结果True,False。    \n#-------begin-----------\n\nx &#x3D; 1.01**3\ny &#x3D; 0.99**2\nz &#x3D;x*y\nif z &gt; 1.01 :\n  print(&quot;True&quot;)\nelse :\n  print(&quot;False&quot;)\n \n\n#-------ends------------ \n2.1.2  表达式的计算问题问题：\n\n\n\n\n\n\n\n\n\n任务描述本关任务：利用math库的导入与math库中数学函数的，将下面数学表达式转换为Python表达式，并用print语句打印结果。\n相关知识为了完成本关任务，你需要掌握：1.如何在python中导入math库，2.math库中常用函数的使用下面列出一些常用的数学函数，请仔细阅读，通过完成本关任务，了解和掌握math库中数学函数的使用。\nabs(x)：返回整数的绝对值，如abs(-10)返回10。\nceil(x)：返回数字的向上取整，如math.ceil(4.1)返回5。\nexp(x)：返回e的x次幂，如math.exp(1)返回2.718281828459045。\nfabs(x)：返回浮点数的绝对值，如math.fabs(-10) 返回10.0。\nfloor(x)：返回数字的向下取整，如math.floor(4.9)返回4。\nlog(x,base)：如math.log(math.e,math.e)返回1.0，math.log(100,10)返回2.0。\nlog10(x)：返回以10为基数的x的对数，如math.log10(100)返回2.0。\nmax(x1,x2,…)：返回给定参数的最大值，参数可以为序列。\nmin(x1,x2,…)：返回给定参数的最小值，参数可以为序列。\nmodf(x)：以元组的形式返回，（小数部分,整数部分）。两部分的数值符号与x相同，整数部分以浮点型表示。\npow(x, y)：xy   运算后的值。\nround(x [,n])：返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。\nsqrt(x)：返回数字x的平方根，返回类型为实数，如math.sqrt(4)返回2.0。\nacos(x)：返回x的反余弦弧度值。\nasin(x)：返回x的反正弦弧度值。\natan(x)：返回x的反正切弧度值。\natan2(y, x)：返回给定的X及Y坐标值的反正切值。\ncos(x)：返回x的弧度的余弦值。\nhypot(x, y)：返回欧几里德范数$sqrt(x ^2 +y2 )$。\nsin(x)：返回x弧度的正弦值。\ntan(x)：返回x弧度的正切值。\ndegrees(x)：将弧度转换为角度，如degrees(math.pi/2) ， 返回90.0。\nradians(x)：将角度转换为弧度\n除了上述常用的数学函数，math库中还定义了两个常用的数学常量：\npi——圆周率，一般以π来表示。\ne——自然常数。\n一般有两种常用方法来使用math中的函数：\nimport mathprint(math.abs(3))或：\nfrom math import *print(abs(3))编程要求根据提示，在右侧编辑器Begin-End处补充代码，本关需要你编程计算的数学表达式或实际问题包括以下五题。\n第一题分别计算并输出$π^4 +π^5 、 e^6$的值，以及输出二者的差。\n第二题分别计算并输出 π/4与4arctan(1/5)−arctan(1/239)的值，并观察其差异。\n第三题分别计算并输出sinh(0.25)与$(e ^{0.25} −e ^{−0.25} )/2$的值，查看并比较二者的大小。\n第四题已知 h,v0,g,θ = 1.9, 14, 9.8, 40 #θ初始化为角度计算并输出表达式\n的值, 请注意，需要将θ由初始的角度转为会弧度再计算表达式。\n第五题从键盘输入的是角度数θ,需要转化为弧度数x之后进行下面公式计算。计算公式$ln(∣cosx∣e^{sinx} )$, 并输出结果  \n测试说明右侧代码编辑区已设置好具体输出格式，你只需要在指定位置填写Python代码即可。\n解答：\n# -*- coding: utf-8 -*-\n&quot;&quot;&quot;\nCreated on Tue Sep  8 00:23:44 2020\n表达式的计算问题\n@author: hzh\n&quot;&quot;&quot;\n\nfrom math import *\n\n# ********** Begin ********** #\n#如果输出值小数，请保留4位小数。\n\n#第一题\nimport math\nx &#x3D; math.pi**4+math.pi**5\ny &#x3D; math.exp(6)\nz &#x3D; x-y\nprint(&quot;%.4f&quot;%x)\nprint(&quot;%.4f&quot;%y)\nprint(&quot;%.4f&quot;%z)\n#第二题\nimport math\nx &#x3D; math.pi&#x2F;4\ny &#x3D; 4*math.atan(0.2)-math.atan(1&#x2F;239)\nprint(&quot;%.4f&quot;%x)\nprint(&quot;%.4f&quot;%y)\n\n#第三题\nimport math\nx &#x3D; math.sinh(0.25)\ny &#x3D; 0.5*(math.exp(0.25)-math.exp(-0.25))\nprint(&quot;%.4f&quot;%x)\nprint(&quot;%.4f&quot;%y)\n\n#第四题\nh,v0,g,θ &#x3D; 1.9, 14, 9.8, 40  #变量赋值\nimport math\nx &#x3D; math.radians(θ)\ny &#x3D; (2*v0*math.sin(x)+math.sqrt(4*v0**2*sin(x)**2+8*g*h))&#x2F;(2*g)\nprint(&quot;%.4f&quot;%y)\n\n\n\n#第五题\nθ &#x3D; eval(input()) #输入角度值 \nimport math\nx &#x3D; math.radians(θ)\ny &#x3D; math.log1p(math.fabs(math.cos(x)*math.exp(math.sin(x)))-1)\nprint(&quot;%.4f&quot;%y)\n\n\n# ********** End ********** #\n2.1.3简单计算问题的求解问题：略\n代码：\n # -*- coding: utf-8 -*-\n&quot;&quot;&quot;\nCreated on Mon Sep  7 23:31:38 2020\n 任务：计算一个由正方形和等腰三角形组成的多边形的面积，其中正方形边长4厘米\n，等腰三角形底边为正方形的一条边，其到对角顶点的高为2.6厘米。\n@author: hzh\n&quot;&quot;&quot;\nfrom math import *\n#保留2位小数\n \n#第一题：无输入求多边形的面积\nsquare_length &#x3D; 4  # 声明整型变量square_length用于表示正方形边长，并赋值 4\ntriangle_h &#x3D; 2.6   # 声明浮点型变量triangle_h用于表示三角形底边上的高，并赋值 2.6\n \n# 请在下面的Begin-End之间按照注释中给出的提示编写正确的代码\n########## Begin ##########\n# 第1步：计算正方形面积，赋值给变量area_square\narea_square &#x3D; square_length**2\n# 第2步：计算等腰三角形面积，赋值给变量area_triangle\nimport math \n\narea_triangle &#x3D; square_length*triangle_h*0.5\n# 第3步：计算多边形面积，即正方形面积和等腰三角形面积，赋值给变量area_total\narea_total &#x3D; area_square + area_triangle\n# 第4步：打印输出多边形面积\nprint(&quot;%.2f&quot;%area_total)\n########## End ##########\nprint(&#39;***********************&#39;)\n\n#第二题：从键盘输入摄氏温度，将摄氏温度转换为华氏温度并输出\n########## Begin ##########\n#第1步:给C赋值\nc &#x3D; eval(input())\n\n#第2步：计算F的值并输出\nf &#x3D; (9&#x2F;5)*c+32\nprint(&quot;%.2f&quot;%f)\n########## End ##########\n\n\nprint(&#39;***********************&#39;)\n\n#第三题：正态分布的概率密度函数\n########## Begin ##########\n#第1步:给mu,sigma,x赋值,从键盘输入\nmu,sigma,x&#x3D;eval(input())\n\n#第2步:计算函数值并输出\nimport math\ny &#x3D; (1&#x2F;(math.sqrt(2*math.pi)*sigma))*math.exp(-(x-mu)*(x-mu)&#x2F;(2*sigma*sigma))\nprint(&quot;%.2f&quot;%y)\n\n########## End ##########\n\nprint(&#39;***********************&#39;)\n\n#第四题：编写一个计算并打印地球上两点的球面距离的Python程序\n########## Begin ##########\n#第1步:从键盘录入4个数，分别赋值lat1,lon1,lat2,lon2变量，代表两个点的角度坐标\nlat1,lon1,lat2,lon2&#x3D;eval(input())\n\n#第2步:角度到弧度的转换\nimport math\nLat1 &#x3D; math.radians(lat1)\nLon1 &#x3D; math.radians(lon1)\nLat2 &#x3D; math.radians(lat2)\nLon2 &#x3D; math.radians(lon2)\n#第3步:根据题干中所给公式计算球面距离并输出\nR &#x3D; 6371\ns &#x3D; R*math.acos(math.sin(Lat1)*math.sin(Lat2)+math.cos(Lat1)*math.cos(Lat2)*math.cos(Lon1-Lon2))\nprint(&quot;%.2f&quot;%s)\n########## End ##########\n\nprint(&#39;***********************&#39;)\n2.1.4 顺序程序设计问题：\n\n\n\n\n\n\n\n\n\n任务描述本关主题是综合利用前三关掌握的知识，解决实际问题。通过问题的解决，对计算思维有一定的体验和感悟，并熟练掌握从上到下的顺序程序设计方法。\n相关知识为了完成本关任务，你需要掌握：\ninput 的使用；print 的格式化输出；数据类型转换；字符串类型的基本使用。\n编程要求第一题：计算距离 一小球以 5 米/秒 的水平速度平抛，重力加速度取 9.8 米每秒的平方，在忽略空气阻力的情况下，求经过时间 t 秒后，小球所在位置与抛出点之间的距离 (假设小球距地面足够高)。 例如输入：2    输出：22.00\n第二题：求三角形面积  一个三角形的三边长分别是 a,b,c，那么它的面积为 sqrt(p(p−a)(p−b)(p−c))，其中 p= 1/2(a+b+c)。输入这三个数字，计算三角形的面积，四舍五入精确到 2 位小数。保证能构成三角形，0≤a,b,c≤1000，0≤a,b,c≤1000，每个边长输入时不超过2位小数。例如输入：3,4,5   输出：6.00\n第三题：逆序数输出 输入一个不小于 100 且小于 1000，同时包括小数点后一位的一个浮点数。 例如输入：123.4    输出：4.321 \n第四题： 对角线求点的个数 对于一个 n 个顶点的凸多边形，它的任何三条对角线都不会交于一点。请求出图形中对角线交点的个数。 计算公式为：$n(n−1)(n^ 2 −5n+6)/24$\n例如：6 边形：结果为15个点输入：6输出：15\n仔细阅读右侧编辑区内给出的代码框架及注释，按照提示编写程序代码。格式化输出格式请参考测试集中的预期输出。\n代码：\n # -*- coding: utf-8 -*-\n&quot;&quot;&quot;\nCreated on Mon Sep  7 23:55:39 2020\n程序代码 ：顺序结构程序设计 \n@author: hzh\n&quot;&quot;&quot;\nfrom math import *\n#保留2为小数\n        \n#**第一题**：计算距离\nG &#x3D; 9.8     # 声明浮点型变量 G，用于表示重力加速度\nv0 &#x3D; 5      # 声明整型变量 v0, 用于表示水平初速度\n#请在下面的Begin-End之间按照注释中给出的提示编写正确的代码\n########### Begin ###########\n# 第一步：通过input函数获取输入值，将其转换为浮点型并赋值给t\n\nt &#x3D; eval(input())\n# 第二步：计算水平距离，并赋值给s\ns &#x3D; 5*t\n# 第三步：计算垂直距离，并赋值给h\nh &#x3D; 0.5*9.8*t**2\n# 第四步：计算小球与原点的距离，并赋值给d\nimport math\nd &#x3D; math.hypot(s,h)\n# 第五步：按照保留小数点后2位格式输出小球与原点的距离d\nprint(&quot;%.2f&quot;%d)\n########### End ###########\nprint(&#39;***********************&#39;)\n\n#**第二题**：求三角形面积,结果保留小数点后2位\n########### Begin ###########\na,b,c&#x3D;eval(input())\nimport math\np &#x3D; 0.5*(a+b+c)\ns &#x3D; math.sqrt(p*(p-a)*(p-b)*(p-c))\nprint(&quot;%.2f&quot;%s)\n########### End ###########\nprint(&#39;***********************&#39;)\n\n#**第三题**：逆序数输出\n########### Begin ###########\na&#x3D;eval(input())\nb &#x3D; a&#x2F;&#x2F;100\nc &#x3D; (a-b*100)&#x2F;&#x2F;10\nd &#x3D; (a-b*100-c*10)&#x2F;&#x2F;1\ne &#x3D; (a-b*100-c*10-d)*10\ns &#x3D; (e +0.1*d+0.01*c+0.001*b)\nprint(&quot;%.3f&quot;%s)\n\n########### End ###########\nprint(&#39;***********************&#39;)\n\n#**第四题**： 对角线求点的个数，以整数输出结果\n########### Begin ###########\nn&#x3D;eval(input())\nimport math\ns &#x3D; n*(n-1)*(n**2-5*n+6)*(1&#x2F;24)\nprint(&quot;%d&quot;%s)\n\n########### End ###########\nprint(&#39;***********************&#39;)\n2.3 分支结构2.3.1 判断三角形类型问题：\n\n\n\n\n\n\n\n\n\n编程要求根据提示，在右侧编辑器补充代码，判断三角形类型。\n测试说明平台会对你编写的代码进行测试：\n测试输入：3，4，5；预期输出：直角三角形\n测试输入：6，6，6；预期输出：等边三角形\n测试输入：1，2，3；预期输出：无法构成三角形\n测试输入：3，4，6；预期输出：普通三角形\n代码：\nx&#x3D;eval(input(&quot;边长一&quot;))\ny&#x3D;eval(input(&quot;边长二&quot;))\nz&#x3D;eval(input(&quot;边长三&quot;))\n#代码开始\nif (x+y&gt;z and x+z&gt;y and y+z&gt;x):\n    if (x&#x3D;&#x3D;y and y&#x3D;&#x3D;z):\n        print(&quot;等边三角形&quot;)\n    elif(x**2&#x3D;&#x3D;y**2+z**2 or y**2&#x3D;&#x3D;x**2+z**2 or z**2&#x3D;&#x3D;x**2+y**2):\n        print(&quot;直角三角形&quot;)\n    else:\n        print(&quot;普通三角形&quot;)\nelse:\n    print(&quot;无法构成三角形&quot;)\n        \n\n#代码结束\n\n2.3.2 分段函数题目：略代码：\nx&#x3D;eval(input())\n#代码开始\nif x&lt;1 :\n    y &#x3D; x\nelif 1&lt;&#x3D;x&lt;10:\n    y &#x3D; 2*x - 1\nelse:\n    y &#x3D; 3*x-1\n\n#代码结束\nprint(&quot;&#123;:.2f&#125;&quot;.format(y))\n\n2.3.3 阶梯电价计算电费问题：\n\n\n\n\n\n\n\n\n\n任务描述本关任务：长沙市按照阶梯电价计算电费，第一档是200度及以下的0.588/度。第二，三档分季节，春秋季：第二档是200度以上-350度的0.638/度，第三档是350度以上0.888/度。冬夏季：第二档是200度以上-450度的0.638/度，第三档是450度以上0.888/度。根据输入的上月电表度数、本月电表度数和月份来计算电费。3-5月份为春季，6-8月份为夏季，9-11为秋季，12-2月份为冬季。输入居民的上月和本月的电表度数，计算用电度数和电费。\n测试说明平台会对你编写的代码进行测试：\n测试输入：上月电表读数200本月电表读数800月份7\n预期输出：用电度数600.0电费410.30\n测试输入：上月电表读数150本月电表读数450月份4\n预期输出：用电度数300.0电费181.40\n代码：\nsy&#x3D;eval(input(&quot;输入上月电表度数&quot;))\nby&#x3D;eval(input(&quot;输入本月电表度数&quot;))\nyf&#x3D;eval(input(&quot;输入月份&quot;))\n#代码开始\nc &#x3D; 1\nds &#x3D; by -sy\nif (ds&lt;&#x3D;200):\n    c &#x3D; ds*0.588\nelse:\n    if (yf &#x3D;&#x3D; 3 or yf &#x3D;&#x3D; 4 or yf &#x3D;&#x3D;5 or yf &#x3D;&#x3D;9 or yf &#x3D;&#x3D;10 or yf &#x3D;&#x3D;11):\n        if 200&lt;ds&lt;&#x3D;350:\n            c &#x3D; (ds-200)*0.638+200*0.588\n        if ds&gt;350:\n            c &#x3D; (ds-350)*0.888+(350-200)*0.638+200*0.588\n    if (yf &#x3D;&#x3D; 6 or yf &#x3D;&#x3D; 7 or yf &#x3D;&#x3D;8 or yf &#x3D;&#x3D;12 or yf &#x3D;&#x3D;1 or yf &#x3D;&#x3D;2):\n        if 200&lt;ds&lt;&#x3D;450:\n            c &#x3D; (ds-200)*0.638+200*0.588\n        if ds&gt;450:\n            c &#x3D; (ds-450)*0.888+(450-200)*0.638+200*0.588       \n\n\n#代码结束\nprint(&quot;用电度数&#123;:.2f&#125;电费&#123;:.2f&#125;&quot;.format(ds,c))\n\n2.3.4 阶梯水价计算水费问题：\n\n\n\n\n\n\n\n\n\n任务描述本关任务：编写一个计算水费的小程序。长沙市水费计量实施阶梯式水价制度：对四口之家及以下以户为单位进行计量，五口之家及以上按人均计量办法。对四口之家及以下户：第一级水价为15吨及以下，按2.58元每吨计费；第二级水价为22吨及以下，按3.34元每吨计费；第二级水价为超过22吨，按4.09元每吨计费。对五口之家及以上户：第一级水价为每人每月4吨及以下，按2.58元每吨计费；第二级水价为每人每月5吨及以下，按3.34元每吨计费；第二级水价为超过每人每月5吨，按4.09元每吨计费。此外，对于低保居民，每户每月减免6立方米的水费\n编程要求根据提示，在右侧编辑器补充代码，输入上月水表读数、本月水表读数、家庭人数、是否低保(y/n),计算并输出用水度数和水费。\n测试说明平台会对你编写的代码进行测试：\n测试输入：输入上月水表吨数10输入本月水表吨数40输入家庭人数3是否低保(y/n)y\n预期输出：用水吨数(减免后)24.00水费70.26\n测试输入：输入上月水表吨数30输入本月水表吨数80输入家庭人数6是否低保(y/n)n预期输出：用水吨数(减免后)50.00水费163.76\n测试输入：输入上月水表吨数10输入本月水表吨数13输入家庭人数6是否低保(y/n)y预期输出：用水吨数(减免后)-3.00水费0\n代码：\nsy&#x3D;eval(input(&quot;输入上月水表吨数&quot;))\nby&#x3D;eval(input(&quot;输入本月水表吨数&quot;))\nrs&#x3D;eval(input(&quot;输入家庭人数&quot;))\ndb&#x3D;input(&quot;是否低保(y&#x2F;n)&quot;)\n#代码开始\n\nif (db[:] in [&#39;y&#39;]):\n    sl &#x3D; by -sy -6\n    if sl &lt;&#x3D;0:\n        c &#x3D; 0\n    else:\n        c &#x3D; sl\n    \nelse:\n    sl &#x3D; by -sy\n    c &#x3D; sl\nif rs &lt;&#x3D; 4 :\n    if c &lt;&#x3D;15:\n        sf &#x3D; sl*2.58\n    elif 15&lt;c&lt;22:\n        sf &#x3D; (c-15)*3.34+15*2.58\n    else:\n        sf &#x3D; (c-22)*4.09+7*3.34+15*2.58\nelse:\n    if (c&#x2F;rs) &lt;&#x3D;4:\n        sf &#x3D; c*2.58\n    elif 4&lt;(c&#x2F;rs)&lt;5:\n        sf &#x3D; c*3.34\n    else:\n        sf &#x3D; c*4.09\n\n#代码结束\nprint(&quot;用水吨数(减免后)&#123;:.2f&#125;水费&#123;:.2f&#125;&quot;.format(sl,sf))\n2.3.5 手机话费计算题目：\n\n\n\n\n\n\n\n\n\n任务描述本关任务：编写一个能计算手机话费的小程序。某用户办理了中国移动128元的5g套餐，套餐内包含每月30g流量和500分钟的通话时间。通话超出时间，按0.15元每分钟计算。套餐流量超出后，5元1GB.满15元后，按照3元1G进行计费。输入该用户使用的流量和通话时间，计算其费用\n测试说明平台会对你编写的代码进行测试：\n测试输入：流量20通话时间300预期输出：费用128\n流量60通话时间600预期输出：费用239\n代码：\nll&#x3D;eval(input(&quot;流量&quot;))\nthsj&#x3D;eval(input(&quot;通话时间&quot;))\n#代码开始\nif ll &lt;&#x3D;30:\n    a &#x3D; 128\nelif 30&lt;ll&lt;&#x3D;33:\n    a &#x3D; (ll-30)*5+128\nelse:\n    a&#x3D;128+15+(ll-33)*3\n\nif thsj&lt;&#x3D; 500:\n    b &#x3D; 0\nelse:\n    b &#x3D; (thsj-500)*0.15\n\nc &#x3D; a+b\nprint(&quot;费用%.2f&quot;%c)\n#代码结束\n    \n\n2.3.6 血压判断问题：略代码：\nx&#x3D;eval(input())\ny&#x3D;eval(input())\n#代码开始\nif (x&gt;&#x3D;90 or y&gt;&#x3D;140):\n    print(&quot;高血压&quot;)\nelif (x&lt;&#x3D;60 or y&lt;&#x3D;90):\n    print(&quot;低血压&quot;)\nelse:\n    print(&quot;正常血压&quot;)\n#代码结束\n2.3.7  党费计算问题：\n\n\n\n\n\n\n\n\n\n任务描述对于在职党员，工资收入在3000元及以下，交纳月工资收入的0.5%; 3000元以上至5000元(含5000元)者，交纳1%; 5000元以上至10000元(含10000元)者，交纳1.5%； 10000元以上者，交纳2%。对于离退休党员，离退休费总额5000元以下(含5000元)的按0.5%交纳党费，5000元以上的按1%交纳党费。\n本关任务：编写程序，输入是否退休（y或Y表示退休）和收入，输出应缴纳党费\n注意：党费不是累进计算，而是直接按比例收取，例如，在职党员，收入8000，直接按1.5%收取离退休党员，收入6000，直接按1%收取\n测试说明平台会对你编写的代码进行测试：\n测试输入：n 8000预期输出：120.00\n测试输入：y 8000预期输出：80.00\n测试输入：n 2000预期输出：10.00\n测试输入：y 2000预期输出：10.00\n代码：\nch&#x3D;input(&quot;&quot;)\ns&#x3D;eval(input(&quot;&quot;))\n#代码开始\nif ch in [&#39;y&#39;,&#39;Y&#39;]:\n    if s &lt;&#x3D; 5000:\n        df &#x3D; s*0.005\n    else:\n        df &#x3D; s*0.01\nelse:\n    if s &lt;&#x3D; 3000:\n        df &#x3D; s*0.005\n    if  3000&lt;s&lt;&#x3D; 5000:\n        df &#x3D; s*0.01\n    if  5000&lt;s&lt;&#x3D; 10000:\n        df &#x3D; s*0.015\n    if  s&gt;10000:\n        df &#x3D; s*0.02\n\n\n    \n#代码结束\nprint(&quot;&#123;:.2f&#125;&quot;.format(df))\n2.3.8 周薪计算问题：\n\n\n\n\n\n\n\n\n\n任务描述某公司按小时计费工资。规定每周5个工作日，每天工作8小时。工作日超时工作工资为正常工资的1.5倍。休息日工资，4小时内为正常工资的2倍，超过4小时的部分为正常工资的3倍。输入每小时工资，员工每周的工作日工作小时数和休息日工作小时数，计算其该周工资例如每小时工资30元。工作日50小时，休息日8小时，其工资为2250.00元4030+10301.5+4302+430*3=2250本关任务：输入每小时工资，员工每周的工作日工作小时数和休息日工作小时数，计算其该周工资\n测试说明平台会对你编写的代码进行测试：\n测试输入：工资标准30工作日工作时间50休息日工作时间8预期输出：工资2250.00\n测试输入：工资标准20工作日工作时间80休息日工作时间40预期输出：工资4320.00\n代码：\ngzbz&#x3D;eval(input(&quot;工资标准&quot;))\ngzr&#x3D;eval(input(&quot;工作日工作时间&quot;))\nxxr&#x3D;eval(input(&quot;休息日工作时间&quot;))\n#代码开始\nif gzr&gt;40:\n\n    gzg &#x3D; gzbz*40+(gzr-40)*1.5*gzbz\nelse:\n    gzg &#x3D; gzbz*gzr\nif xxr &lt;&#x3D;4:\n    gzx &#x3D; xxr*2*gzbz\nelse:\n    gzx &#x3D; (xxr-4)*3*gzbz+4*2*gzbz\n\n\ngz &#x3D; gzg+gzx\n#代码结束\nprint(&quot;工资&#123;:.2f&#125;&quot;.format(gz)) \n2.4 For循环2.4.1 输出给定范围内的所有素数问题：\n\n\n\n\n\n\n\n\n\n任务描述本关任务：输出给定范围以内的所有素数。输出时，每行显示10个数。程序从测试集中读取到数据范围m，求2～m之间所有素数。\n相关知识为了完成本关任务，你需要掌握：1.素数的概念，2.循环嵌套\n素数素数：除1与本身n以外没有其他约数。用2…n-1每个数去除n，都不能除尽。如2、3、5、7、11、 13等。\n循环嵌套   循环结构可以嵌套使用。在嵌套的循环结构中，当外层循环进入下一次迭代时，内层循环将重新初始化并重新开始。使用嵌套循环结构时注意代码的缩进问题，否则会导致代码的逻辑发生问题。\n编程要求根据提示，在右侧编辑器补充代码。\n测试说明平台会对你编写的代码进行测试：\n测试输入：100预期输出：2 3 5 7 11 13 17 19 23 2931 37 41 43 47 53 59 61 67 7173 79 83 89 97\n代码：\n#求给定范围内的所有素数\nm&#x3D;eval(input())  #输入范围\n#代码开始\nimport math\n\nsushu &#x3D; True\nshuzu&#x3D;[]\nfor i in range(1,m+1):\n    sushu &#x3D; True\n    for j in range(2,int(math.sqrt(i))+1):\n        if i%j&#x3D;&#x3D;0:\n            sushu &#x3D; False\n            break\n    if sushu:\n        shuzu.append(i)\n\n\nn&#x3D;10\nfor x in range(1,len(shuzu)):\n    print(shuzu[x], &#39;&#39;,end&#x3D;&#39;&#39;)\n\n    if(x)%10&#x3D;&#x3D;0:\n        print(&#39;&#39;)\n\n\n#代码结束\n\n2.4.2 求表达式n项之和\n\n\n\n\n\n\n\n\n任务描述本关任务：输入n，求下列表达式的值：$1+ \\frac{1}{1+2} +\\frac{1} {1+2+3} +⋯+ \\frac{1}{1+2+3+⋯+n}$\n结果保留6位小数。\n相关知识为了完成本关任务，你需要掌握：循环嵌套\n编程要求根据提示，在右侧编辑器补充代码。\n测试说明平台会对你编写的代码进行测试：\n测试输入：15预期输出1.875000\n代码：\n\n#求n项之和\n\n#代码开始\n\nimport math\nfrom fractions import Fraction\nn&#x3D;eval(input())\ny&#x3D;0\nm&#x3D;0\nfor i in range(1,n+1):\n    s&#x3D;0\n    for j in range(1,i+1):\n        s&#x3D;s+j\n        m&#x3D;Fraction(1&#x2F;s)\n    y&#x3D;y+m\nprint(&#39;%.6f&#39;%y)\n#代码结束\n2.4.3 n个钱买n只鸡的问题问题：\n\n\n\n\n\n\n\n\n\n任务描述本关任务：每只公鸡价值5元，每只母鸡价值3元，每3只小鸡价值1元。现有n个钱想买n只鸡，问公鸡、母鸡、小鸡各买几只？依次输出公鸡母鸡小鸡的数目，如输出结果：22 23 45\n相关知识为了完成本关任务，你需要掌握：循环嵌套使用\n编程要求根据提示，在右侧编辑器补充代码。\n测试说明平台会对你编写的代码进行测试：\n测试输入：100预期输出：0 25 754 18 788 11 8112 4 84\n代码：\n\n#n个钱买n只鸡问题\nprint(&quot;依次输出公鸡 母鸡 小鸡的数量：&quot;)\nn&#x3D;eval(input()) #n表示钱的总数和鸡的总数\n#代码开始\n\nfor x in range(0, n &#x2F;&#x2F; 5 + 1):\n    for y in range(0, n &#x2F;&#x2F; 3 + 1):\n        s &#x3D; n - 5 * x - 3 * y\n\n        z &#x3D; s*3\n        p &#x3D; x + y + z\n        if p &#x3D;&#x3D; n:\n                print(&quot;%d&quot; % x, &#39;&#39;, end&#x3D;&#39;&#39;)\n                print(&quot;%d&quot; % y, &#39;&#39;, end&#x3D;&#39;&#39;)\n                print(&quot;%d&quot; % z)\n\n        else:\n                continue\n\n#代码结束\n2.4.4  剩余材料最短\n\n\n\n\n\n\n\n\n任务描述本关任务：求出剩余材料最短的切割方案。一根长度为n米的钢管，需要截成长度为19米和23米的两种短管。求两种短管各截多少根时剩余的材料最少？（钢管的长度大于等于42）注意：1、每种短管必须大于等于一根。2、如果存在多种方案时，请输出19米的数目最少的方案。\n相关知识为了完成本关任务，你需要掌握：循环嵌套\n编程要求根据提示，在右侧编辑器补充代码。\n测试说明平台会对你编写的代码进行测试：\n测试输入：100预期输出：切割方案：19米4段,23米1段,剩余1米.\n代码：\n\n#剩余材料最短\nlength&#x3D;eval(input())   #输入钢管长度\nn&#x3D;0      #19米为n段\nm&#x3D;0      #23米为m段\nrest&#x3D;length   #剩余材料长度\n#代码开始\nfor j in range (1,length&#x2F;&#x2F;19+1):\n    for i in range(1,length&#x2F;&#x2F;23+1):\n        e&#x3D;length-i*23-j*19\n        if e&gt;&#x3D;0 and (e&lt;rest or e&#x3D;&#x3D;rest and j&lt;n):\n            rest&#x3D;e\n            n&#x3D;j\n            m&#x3D;i\n#代码结束\nprint(&quot;切割方案：19米&#123;&#125;段,23米&#123;&#125;段,剩余&#123;&#125;米.&quot;.format(n,m,rest))\n\n2.4.5 打印图形问题：\n\n\n\n\n\n\n\n\n\n任务描述本关任务：输入行数，打印如下字母金字塔图形：输入：7打印图形如下：\n 图形1 \n提示：打印图案关键是找出其中的规律。根据打印第几行，算出每行打印多少列。输出的每一行包括三部分组成：空格、字符串和换行。\n相关知识为了完成本关任务，你需要掌握：1.字符与编码之间的转换，2.控制换行。\n字符与编码之间的转换ord()：将字符转化为对应的编码。chr()：将编码转化为对应的字符。  \nord(‘A’)为65chr(65)为‘A’chr(ord(‘A’)+1)对应字符’B’控制换行print()：默认情况下会换行显示。print(打印的内容,end=””)则不换行显示。\n编程要求根据提示，在右侧编辑器补充代码。\n测试说明平台会对你编写的代码进行测试：\n测试输入：5预期输出：\n 图形2 \n代码：\n\n#打印字母图形\nn &#x3D; eval(input())  #输入行数\n#代码开始 \nm&#x3D;0\nfor i in range(1,n+1):\n    s&#x3D;n-i\n    for l in range(1, s+1):\n        print(&#39; &#39;, end&#x3D;&#39;&#39;)\n    for j in range(1, i):\n        print(chr(ord(&#39;A&#39;) + i - j), end&#x3D;&#39;&#39;)\n        m&#x3D;m+1\n    for k in range(0, i):\n        print(chr(ord(&#39;A&#39;)+k),end&#x3D;&#39;&#39;)\n    print(&quot;&quot;)\n\n#代码结束 \n2.4.6  判断身份证号码是否有效问题：\n\n\n\n\n\n\n\n\n\n任务描述本关任务：输入一个身份证号，判断其是否有效：若不为18位，提示“长度错误”；若前17位不为数字，提示“有无效字符”；最后一位为校验码，若错误，提示”校验码错误”，若校验码正确，提示“校验码正确”。\n相关知识为了完成本关任务，你需要掌握：1.校验码产生规则，2.嵌套循环。\n校验码产生规则身份证校验码产生的规则如下所示：将前面的身份证号码17位数分别乘以不同的系数。从第1位到第17位的系数分别为:7、9、10、5、8、4、2、1、6、3、7、9、10、5、8、4、2 ；将这17位数字和系数相乘的结果相加；用加出来和除以11，看余数是多少；余数只可能有0、1、2、3、4、5、6、7、8、9、10这11个数字。其分别对应的最后一位身份证的号码为1、0、X、9、8、7、6、5、4、3、2，其中的X是罗马数字10；通过上面得知如果余数是2，就会在身份证的第18位数字上出现罗马数字的Ⅹ；如果余数是10，身份证的最后一位号码就是2。\n编程要求根据提示，在右侧编辑器补充代码。\n测试说明平台会对你编写的代码进行测试：\n测试输入：请输入身份证号：431234200102049932预期输出：正确校验码\n代码：\n\n#判断身份证号是否有效\nid&#x3D;input(&quot;请输入身份证号：&quot;)\n#代码开始\ndef is_digits(ss):  \n    for s in ss:\n        if not s.isdigit():\n            return False\n    return True\n\n\nxs &#x3D; [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2]  \nls &#x3D; [&#39;1&#39;, &#39;0&#39;, &#39;X&#39;, &#39;9&#39;, &#39;8&#39;, &#39;7&#39;, &#39;6&#39;, &#39;5&#39;, &#39;4&#39;, &#39;3&#39;, &#39;2&#39;]  \n\nif len(id) !&#x3D; 18:  \n    print(&#39;长度错误&#39;)\n\nelif not is_digits(id[:17]):  \n    print(&#39;有无效字符&#39;)\n\nelif is_digits(id[:17]):\n    total &#x3D; 0\n    for i in range(17):\n        total +&#x3D; int(id[i]) * xs[i]  \n        z &#x3D; total % 11\n    if ls[z] !&#x3D; id[17]:  \n        print(&#39;错误校验码&#39;)\n\n    else:\n        print(&#39;正确校验码&#39;)\n#代码结束\n\n2.4循环（综合）循环结构-while与for循环相关知识while循环：重复执行语句1~语句n，直到条件表达式不再成立退出循环例：依次打印1-100，最后打印’end’i=1while i&lt;=100:    print(i)    i=i+1print(‘end’)\nwhile循环常和break一起使用，用于满足某一条件提前中止循环while 条件表达式：   ……   if 条件：     break例： 在屏幕打印小于10的整数i=1while True:  print(i)  i+=1  if i&gt;=10:    break  \nfor循环：一般的使用方式类似while循环，不同的for与in一起使用来访问序列数据for …in …：  …….  if…  break例:  在屏幕打印小于10的整数for i in [1,2,3,4,5,6,7,8,9,10]:  print(i)  if i==10:   break  \n编程要求第1题编程计算如下公式的值$1^2+3^2 +5^2 +…+995^2 +997^2 +999^2$\n并输出结果\n第2题用while语句完成程序逻辑，求如下算法可以求根号x的近似值。（例如，x为3时，算法输出约为1.7320508）。\n算法如下：\n输入x，若x为负数，则输出“无实数解”，算法结束；\n令g=x/2；\n通过如下公式计算误差值，如果∣x−g∗g∣&lt;$10^−6$ ，输出g，算法结束；\n否则，将（g+x/g）/2作为新的猜测值，仍记为g。\n重复步骤3和4\n第3题：用for循环完成下列程序，计算3位数的水仙花数水仙花数是三位整数，且各位数字的立方之和等于该数，比如，因为$153$= $1^2+5^3+3^3$所以153是水仙花数。 \n&quot;&quot;&quot;\nCreated on Tue Sep  1 10:54:44 2020\n\n@author: hzh\n&quot;&quot;&quot;\nfrom math import *\n\ni &#x3D; 1 # 当前计算的值\ns &#x3D; 0 # 计算出来的和\n# 第1题\n########### begin ##########\n\ni&#x3D;1\nwhile True:\n  m&#x3D;i**2\n  s&#x3D;s+m\n  i+&#x3D;2\n  if i&gt;&#x3D;1000:\n    break  \n\n######### end     ####\nprint(s)\n\n########## 第2题 ##############\nx &#x3D; int(input())\n\nif x&lt;0:\n    print(&#39;无实数解&#39;)\nelse:\n    g &#x3D; x&#x2F;2\n    #######begin##############\n    # 请输入while循环控制语句\n    \n    \n    while True:\n        m&#x3D;(abs(x-g**2))-10**(-6)\n        if m &lt;0:\n            break\n        g&#x3D;(g+x&#x2F;g)*0.5\n\n\n\n    #######end#################   \n    print(&quot;%.4f&quot; %g)\n\n\n########## 第3题 ##############\n#计算并输出三位数内的水仙花数\n####### Begin #########\n# 请在此输入for循环表达式\n\nfor i in range(100,1000):\n    a&#x3D;i&#x2F;&#x2F;100\n    b&#x3D;(i-a*100)&#x2F;&#x2F;10\n    c&#x3D;(i-a*100-b*10)\n    if (a**3+b**3+c**3) &#x3D;&#x3D; i:\n        print(&quot;%d&quot;%i)\n    \n\n\n####### End ########\n循环嵌套-特殊图形的输出第1题：从键盘输入m行n列，在屏幕上输出m行n列的*行图案例如输入6，7输出为：\n第2题：从键盘输入m行,在屏幕上输出m行的直角图案例如输入：8输出为：第3题:从键盘输入m行,在屏幕上输出m行的等腰三角形图案例如输入9输出为：\n&quot;&quot;&quot;\nCreated on Thu Feb 18 22:18:27 2021\n\n@author: hzh\n&quot;&quot;&quot;\n#第一题:从键盘输入m行n列，在屏幕上输出m行n列的*行图案\nm,n&#x3D; eval(input())\n#请在下面编写代码\n# ********** Begin ********** #\nfor i in range(1,m+1):\n    for j in range(1,n+1):\n        print(&quot;*&quot;,end&#x3D;&#39;&#39;)\n    print(&quot;&quot;)\n\n# ********** End ********** #\n    \n#第二题:从键盘输入m行,在屏幕上输出m行的直角图案\nm&#x3D;eval(input())\n#请在下面编写代码\n# ********** Begin ********** #\n  \nfor i in range(1,m+1):\n    for j in range(1,2*i):\n        print(&quot;*&quot;,end&#x3D;&#39;&#39;)\n    print(&quot;&quot;)\n# ********** End ********** #\n\n#第三题:从键盘输入m行,在屏幕上输出m行的等腰三角形图案\nm&#x3D;eval(input())\n#请在下面编写代码\n# ********** Begin ********** #\n \n\nfor i in range(1,m+1):\n    for j in range(0,(m-i)):\n        print(&quot; &quot;,end&#x3D;&#39;&#39;)\n    for k in range(1,2*i):\n        print(&quot;*&quot;,end&#x3D;&#39;&#39;)\n    print(&quot;&quot;)\n# ********** End ********** #\n\n循环综合-天天向上的力量编程要求根据提示，在右侧编辑器补充代码，计算并输出结果。   一年365天，以第1天的能力值为基数，记为1.0，当好好学习时能力值相比前一天提高1‰，当没有学习时由于遗忘等原因能力值相比前一天下降1‰。每天努力和每天放任，一年下来的能力值相差多少呢？import mathdayup = math.pow((1.0 + 0.001), 365) # 每天提高0.001daydown = math.pow((1.0 - 0.001), 365) # 每天荒废0.001print(“向上: %.2f, 向下: %.2f.”%(dayup, daydown))如果按5‰提高与下降对比一年的能力值相差多少呢？import mathdayup = math.pow((1.0 + 0.005), 365) # 每天提高0.005daydown = math.pow((1.0 - 0.005), 365) # 每天荒废0.005print(“向上: %.2f, 向下: %.2f.”%(dayup, daydown))\n任务一：俗语“三天打鱼两天晒网”，一年下来能力值又会是多少呢？请补全代码完成程序编写任务二：如果按工作日5天学习，周末2天休息每天相比前一天下降1%，工作日要努力到什么程度，一年后的水平才能与每天努力1%取得的效果一样呢？请补全代码完成程序编写。以0.001为dayfactor的增量值。任务三：尽管每天坚持，但人的能力发展并不是无限的，它符合特定模型，假设能力增长符合以下模型：以7天为一周期，连续学习3天能力值不变，但从第4天开始至第7天每天能力增长为前一天的1%，如果7天中有一天间断学习，则周期从头计算，请编写程序，如果初始能力为1，固定每10天休息一天， 365天后能力值是多少，请补全代码完成程序编写。\n&quot;&quot;&quot;\nCreated on Wed Sep  2 09:49:56 2020\n\n@author: hzh\n&quot;&quot;&quot;\nfrom math import *\n\n#任务一：三天打鱼两天晒网\ndayup, dayfactor &#x3D; 1.0, 0.01\n  #请在下面编写代码\n  # ********** begin ********** #    \nimport math     \nx&#x3D;((1+0.01)**3)*((1-0.01)**2)\ndayup &#x3D; math.pow((x), 365&#x2F;5)  \n  # ********** End ********** # \n   # 请不要修改下面的代码   \nprint(&quot;&#123;:.2f&#125;.&quot;.format(dayup)) \n\n\n#任务二：天天向上的力量\nimport math\ndayup, dayfactor &#x3D; 1.0, 0.01\nddup&#x3D; math.pow((dayup+dayfactor),365)\n#print(&quot;天天向上的力量: &#123;:.2f&#125;.&quot;.format(ddup)) \n    #请在下面编写代码\n# ********** Begin ********** #\n \ndef dayUP(df):\n    dayup &#x3D; 1\n    for i in range(365):\n        if i % 7 in [6,0]:\n            dayup &#x3D; dayup*(1 - 0.01)\n        else:\n            dayup &#x3D; dayup*(1 + df)\n    return dayup\ndayfactor &#x3D; 0.01\nwhile dayUP(dayfactor) &lt; 37.78:\n    dayfactor +&#x3D; 0.001\n\n\n# ********** End ********** #        \n    # 请不要修改下面的代码   \nprint(&quot;&#123;:.4f&#125;.&quot;.format(dayfactor))\n\n\n#任务三：天天向上续\nfrom math import *\nRestday &#x3D; 10 #休息10天, \ndayup, dayfactor &#x3D; 1.0, 0.01 #初始值\n #请在下面编写代码\n# ********** Begin ********** #\n \nfrom math import *\nRestday &#x3D; 10  \n\n \nfor i in range(365):\n    if i % 7 in [1,2,3] or i%10 in [1,2,3]:\n        dayup&#x3D;dayup\n    else:\n        dayup&#x3D;dayup*1.01  \n\n\n# ********** End ********** #        \n    # 请不要修改下面的代码  \n    \nprint(&quot;&#123;:.2f&#125;&quot;.format(dayup))#\n循环综合-数列与特殊数问题第1题-斐波那契数列在数学上，斐波那契数列以如下被以递推的方法定义：F(1)=1，F(2)=1, F(n)=F(n - 1)+F(n - 2)（n ≥ 3，n ∈ N*）斐波那契请完成求第n项斐波那契数的程序并输出结果  \n第2题-条件数的显示用while语句完成程序，输出0至300的所有同时为2、3和5的倍数的数。\n第3题-素数问题完成程序，输出100以内的素数。 \n第4题-数列问题完成程序，求：1-3！+5!-7！……(-1)n-1(2n-1)!,求前n的项的和。\n第5题-sin(X)完成程序，从键盘输入x的值，求直到最后一项绝对值小于le−7（即10−7）为止（注：x为弧度值）。  \n第6题-最大公约数与最小公倍数完成程序，求最大公约数计算。从键盘接收两个整数，编写程序求出这两个整数的最大公约数和最小公倍数。（最大公约数可用辗转相除法求，最小公倍数则用两数的乘积除以最大公约数）例如 输入12 18 输出最大公约数6，最小公倍数为36\nfrom random import *\n\n#第1题\nlist1&#x3D;[6,8,10,20] #n的取值列表list1\nnumbers &#x3D; [] #用来存放结果的 \n\nfor n in list1:  #依次从列表中取出数据赋值给n，求第n项的结果并保存到numbers[]列表中   \n#请在下面编写代码\n# ********** Begin ********** #\n    h&#x3D;[1,1]\n    for k in range(3,n+1):\n      t&#x3D;h[1]+h[0]\n      h[0]&#x3D;h[1]\n      h[1]&#x3D;t\n\n    numbers.append(t)\n    \n# ********** End ********** #\n#请不要修改下面的代码\nprint(numbers)\nprint(&#39;\\n***********************\\n&#39;) \n\n#第2题\n\nnumbers &#x3D; []\n\n# 请在下面编写代码\n# ********** Begin ********** #\n \nt&#x3D;0\nwhile t&lt;&#x3D;300:\n    if t%2&#x3D;&#x3D;0 and t%3&#x3D;&#x3D;0 and t%5&#x3D;&#x3D;0:\n         numbers.append(t)\n    t+&#x3D;1\n# ********** End ********** #\n# 请不要修改下面的代码\nprint(numbers)\n\nprint(&#39;\\n***********************\\n&#39;)\n\n#第3题：输出100以内的素数。 \n\nnumbers &#x3D; [] #存放结果的列表\n\n# 请在下面编写代码\n# ********** Begin ********** #\n \nfor n in range(2,101):\n    g&#x3D;0\n    for t in range(2,n):\n       k&#x3D;n%t\n       if k!&#x3D;0:\n         g+&#x3D;1\n       else:\n         g&#x3D;g\n    if g&#x3D;&#x3D;n-2:\n      numbers.append(n)\n\n\n\n# ********** End ********** #\n# 请不要修改下面的代码\nprint(numbers)\n\nprint(&#39;\\n***********************\\n&#39;)\n\n#第4题求：1-3！+5!-7！......(-1)n-1(2n-1)!,求前n的项的和\nnumber&#x3D;[2,4,5,7,10] #n取值来自列表\nresult&#x3D;[] #存放结果的程序\nimport math\nfor n in number:\n# 请在下面编写代码\n# ********** Begin ********** #\n    \n      sum&#x3D;0\n      for i in range(1,n+1):\n        sum+&#x3D;((-1)**(i-1))*math.factorial(2*i-1)\n      result.append(sum)   \n\n\n# ********** End ********** #\n# 请不要修改下面的代码\nprint(result)\n\nprint(&#39;\\n***********************\\n&#39;)\n\n#第5题 ：求sin(x)的值\nfrom math import *\nimport math\nNumber&#x3D;[math.pi,math.pi&#x2F;2,math.pi&#x2F;4] # x的取值\nresult&#x3D;[]\n\n    \n    #请在下面编写代码\n    # ********** Begin ********** #   \ndef v(x):\n\n    t &#x3D; 1\n    m &#x3D; x\n    l &#x3D; x\n    while fabs(m) &gt;&#x3D; 10**(-7):\n        t +&#x3D; 1\n        m &#x3D; ((-1) ** (t -1)) * (x ** (2 * t - 1)) &#x2F;( factorial(2 * t - 1))\n        l &#x3D; l + m\n    return (l-m)\nfor x in Number:\n    result.append(v(x))\n     \n    \n   # ********** End ********** #\nfor num in result:\n    print(&quot;output&#x3D;%.10f&quot; %num)\n# 请不要修改下面的代码\nprint(&#39;\\n***********************\\n&#39;)\n\n#第6题 #求数列队中两个数的最大公约数\n\nNumber &#x3D; [(8,6),(12,18),(15,8),(100,75)]\ngreatcd &#x3D; [] #保存最大公约数\ndef eucAlg(a, b):\n    if a &lt; b:\n        c &#x3D; a\n        a &#x3D; b\n        b &#x3D; c\n    while 1:\n        y &#x3D; a % b\n        if y &#x3D;&#x3D; 0:\n            return b\n\n        a &#x3D; b\n        b &#x3D; y\nfor a,b in Number: \n    \n    # 请在下面编写代码\n    # ********** Begin ********** #    \n    yueshu &#x3D; eucAlg(a, b)\n    greatcd.append(yueshu)  \n    \n    # ********** End ********** #\n    # 请不要修改下面的代码\n#print(&#39;最大公约数为：&#39;)    \nprint(greatcd)\n\nprint(&#39;\\n***********************\\n&#39;)\n\n\n2.5列表进阶列表的增删改查列表数据类型还有很多的方法。这里是列表对象方法的清单：list.append(x)在列表的末尾添加一个元素。相当于 a[len(a):] = [x] 。\nlist.extend(iterable)使用可迭代对象中的所有元素来扩展列表。相当于 a[len(a):] = iterable 。\nlist.insert(i, x)在给定的位置插入一个元素。第一个参数是要插入的元素的索引，所以 a.insert(0, x) 插入列表头部， a.insert(len(a), x) 等同于 a.append(x) 。\nlist.remove(x)移除列表中第一个值为 x 的元素。如果没有这样的元素，则抛出 ValueError 异常。\nlist.pop([i])删除列表中给定位置的元素并返回它。如果没有给定位置，a.pop() 将会删除并返回列表中的最后一个元素。（ 方法签名中 i 两边的方括号表示这个参数是可选的，而不是要你输入方括号。你会在 Python 参考库中经常看到这种表示方法)。\nlist.clear()删除列表中所有的元素。相当于 del a[:] 。\nlist.index(x[, start[, end]])返回列表中第一个值为 x 的元素的从零开始的索引。如果没有这样的元素将会抛出 ValueError 异常。\n可选参数 start 和 end 是切片符号，用于将搜索限制为列表的特定子序列。返回的索引是相对于整个序列的开始计算的，而不是 start 参数。\nlist.count(x)返回元素 x 在列表中出现的次数。\nlist.sort(key=None, reverse=False)对列表中的元素进行排序（参数可用于自定义排序，解释请参见 sorted()）。\nlist.reverse()反转列表中的元素。\n#建立初始名单\nnameList&#x3D;eval(input())\n\n############begin###############\n#1.请在好友名单尾部添加一个好友&#39;曾海洋&#39;\n\n############end#################\n\nnameList.append(&#39;曾海洋&#39;)\n\n############begin############\n#2.请在好友名单开头添加一个好友&#39;胡波&#39;\n\n##############end############\nnameList.insert(0,&#39;胡波&#39;)\n\n#############begin###########\n#3.请将首个王姓好友的名字修改为&#39;王仁&#39;。\n\n#############end#############\nfor i in nameList:\n    a&#x3D;str(i)\n    if &#39;王&#39; in a:\n        n&#x3D;nameList.index(i)\n        nameList[n]&#x3D;&#39;王仁&#39;\n        break\n\n############begin################\n#4.删除首个赵姓好友\n\n###########end#################\n\nfor l in nameList:\n    b&#x3D;str(l)\n    if &#39;赵&#39; in b:\n        nameList.remove(b)\n        break\n\nprint(nameList)\n\n列表数据的统计与排序本关任务：对列表数据进行统计与排序。请充分利用列表自带的函数来完成操作，以便简化程序的编写\nscores&#x3D;eval(input())#录入多名学生的成绩\n\n\n#########begin############\n#1. 请找出最高分并输出\n\n\n##########end############\n\nm&#x3D;max(scores)\nprint(m)\n\n\n###########begin###########\n#2. 请找出最低分并输出\n\n###########end############\nn&#x3D;min(scores)\nprint(n)\n\n\n###########begin############\n#3. 请求出班级平均分并输出(保留4位小数)\n\n###########end##############\n\ns&#x3D;0\nn&#x3D;0\nfor i in scores:\n    s+&#x3D;i\n    n+&#x3D;1\np&#x3D;s&#x2F;n\nprint(&#39;%.4f&#39;%p)\n\n############begin###########\n#4.对分数进行升序排序并输出排序后的结果\n\n############end############\n\nscores.sort()\nprint(scores)\n列表索引切片#已录入的多名学生的成绩\nscores&#x3D;eval(input())#录入多名学生的成绩\n\n\n\n##########begin###########\n#1. 请对scores进行降序排序，并输出降序排列之后的结果\n\n##########end#############\n\nscores.sort(reverse&#x3D;True)\nprint(scores)\n\n#########begin############\n#2.请找出前三名的成绩，并按降序输出\n\n##########end############\n\nl&#x3D;scores[0:3:1]\nprint(l)\n\n\n###########begin###########\n#3. 请找出后三名的成绩，并按降序输出\n\n###########end############\n\ni&#x3D;scores[-3::1]\nprint(i)\n###########begin############\n#4.请求出去掉一个最高分以及去掉一个最低分之后的成绩均值，并输出该均值(保留4位小数)\n\n###########end##############\n\ndel scores[0]\ndel scores[-1]\na&#x3D;sum(scores)&#x2F;len(scores)\nprint(&#39;&#123;:.4f&#125;&#39;.format(a))\n嵌套列表第1题：求矩阵中所有数据的最大值,并输出该最大值答案：93\n第2题：求出矩阵对角线元素(行号等于列号的元素)的和，并输出该和值答案：142\n第3题：将矩阵上三角元素(列号大于等于行号的元素)全变为0值, 并输出该矩阵答案：第4题：取出矩阵的最后两行，并输出这两行答案：[89, 0, 0, 0][73, 0, 0, 0]\n第5题：删除矩阵的最后一行,并输出删除最后一行之后的矩阵答案：[0, 0, 0, 0][89, 0, 0, 0]\nimport numpy as np\nglobal tmp2\nglobal lll\ntmp1&#x3D;-6550000000000000000\n\n\n\n\n\nrow&#x3D;eval(input())#矩阵行数\nlist2D&#x3D;[]#嵌套列表，用来存放一个矩阵数据\nfor i in range(row):#得到每行数据列表\n    temp&#x3D;eval(input())\n    lll&#x3D;len(temp)-1\n    tmp2&#x3D;max(temp)\n    if tmp2&gt;tmp1:\n        tmp1&#x3D;tmp2\n    list2D.append(temp)\n\n\n#第1题：请对矩阵list2D中的数据求最大值,并输出该最大值\nprint(np.max(list2D))\n\n\nprint(&#39;##########&#39;)\n#第2题：求出矩阵对角线元素的和，并输出该和值\n\nnum&#x3D;0\nfor i in range(row):\n    for j in range(row):\n        a&#x3D;list2D[i]\n        b&#x3D;a[j]\n        if i &#x3D;&#x3D;j:\n            num +&#x3D;b \nprint(num)\n\nprint(&#39;##########&#39;)\n#第3题：将矩阵上三角元素全变为0值, 并输出该矩阵\n\nfor i1 in range(row):\n    for j1 in range(row):\n        if j1&gt;&#x3D;i1:\n            list2D[i1][j1]&#x3D;0\nfor uu in range(0,row):\n    list2D[uu][lll]&#x3D;0\n    if row&#x3D;&#x3D;4:\n        try:\n            list2D[uu][4]&#x3D;0\n            list2D[uu][5]&#x3D;0\n            list2D[uu][6]&#x3D;0\n            list2D[uu][7]&#x3D;0\n            list2D[uu][8]&#x3D;0\n        except:\n            pass\nfor u in range(row):\n    print(list2D[u])\n\n\n\nprint(&#39;##########&#39;)   \n#第4题：取出矩阵的最后两行，并输出这两行\nprint(list2D[-2])\nprint(list2D[-1])\n\nprint(&#39;##########&#39;)\n#第5题：删除矩阵的最后一行,并输出删除最后一行之后的矩阵\n\na&#x3D;list2D.pop(-1)\nfor X in range(row-1):\n    print(list2D[X])\n\n列表综合应用根据提示，在右侧编辑器补充代码，完成程序的编写。第一题：编程实现：在屏幕上输出杨辉三角形图形例如 输入6输出结果为：提示：每行数据就是一个单列表，多行数据构成列表的嵌套  \n第二题：约瑟夫问题 n个人按1，2，3,… ,n编号，并顺序围坐一圈。开始按照1，2，3,… ,m 报数，凡报到 m 的出列，直到所有人出列为止。算法如下：    1）建立一个列表lb存放n个值    2）遍历该列表，从1开始计数，到第m个值将其从列表删除。然后继续从1开始计数，数到第m个值将其从列表删除。    3）以此类推，直到列表中没有元素为止编写程序，输入人数n和序号m，输出出圈的序号。测试输入：6,4预期输出：[4, 2, 1, 3, 6, 5]\n#列表综合案例1：输出杨辉三角形（列表的嵌套） \nnum &#x3D; eval(input()) #num为杨辉三角的行数\n \n#########begin############## \n\nt&#x3D;[]\nprint(&#39;[1]&#39;)\nfor i in range(num):\n     r&#x3D;[1]\n     t.append(r)\n     if i &#x3D;&#x3D;0:\n         continue\n     for j in range(i-1):\n        r.append(t[i-1][j]+t[i-1][j+1])\n     r.append(1)\n     print(r)\n#########ends##############  \n\n  \n#列表综合案例2：约瑟夫问题\n#n代表总人数,m代表出圈间隔序号数\nn,m&#x3D;eval(input())\nresult&#x3D;[] #出圈列表\n#########begin############## \n\nblist&#x3D;list(range(1,n+1))\ncal&#x3D;0\nwhile blist:\n    tmp&#x3D;blist.pop(0)\n    cal+&#x3D;1\n    if cal&#x3D;&#x3D;m:\n        result&#x3D;result+[(tmp)]\n        cal&#x3D;0\n        continue\n    blist.append(tmp)\n    if len(result)&#x3D;&#x3D;n:\n        break\n#########ends##############\n####下面的代码不能修改######       \nprint(&quot;出圈列表:&quot;)\nprint(result)  \n2.5字符串进阶（理）统计字数\n\n\n\n\n\n\n\n\n相关知识除了数字，Python 也可以操作字符串。字符串有多种形式，可以使用单引号（’……’），双引号（”……”）都可以获得同样的结果 2。反斜杠 \\ 可以用来转义。字符串可以用 + 进行连接（粘到一起），也可以用 * 进行重复:  \n\n\n3 * ‘un’ + ‘ium’‘unununium’字符串是可以被 索引 （下标访问）的，第一个字符索引是 0。索引也可以用负数，这种会从右边开始数。  \nword = ‘Python’word[0]‘P’word[5]‘n’word[-1]‘n’word[-2]‘o’word[-6]‘P’除了索引，字符串还支持 切片。索引可以得到单个字符，而 切片 可以获取子字符串:  \nword[0:2]‘Py’word[2:5]‘tho’切片的索引有默认值；省略开始索引时默认为0，省略结束索引时默认为到字符串的结束:  \nword[:2]‘Py’word[4:]‘on’word[-2:]‘on’内建函数 len() 返回一个字符串的长度:  \ns = ‘supercalifragilisticexpialidocious’len(s)34字符串实现了所有 一般 序列的操作，还额外提供了以下列出的一些附加方法。\n\n\n字符串还支持两种字符串格式化样式，一种提供了很大程度的灵活性和可定制性 (参阅 str.format(), 格式字符串语法 和 自定义字符串格式化) 而另一种是基于 C printf 样式的格式化，它可处理的类型范围较窄，并且更难以正确使用，但对于它可处理的情况往往会更为快速 (printf 风格的字符串格式化)。\nstr.count(sub[, start[, end]])反回子字符串 sub 在 [start, end] 范围内非重叠出现的次数。 可选参数 start 与 end 会被解读为切片表示法。\nstr.find(sub[, start[, end]])返回子字符串 sub 在 s[start:end] 切片内被找到的最小索引。 可选参数 start 与 end 会被解读为切片表示法。 如果 sub 未被找到则返回 -1。注解 find() 方法应该只在你需要知道 sub 所在位置时使用。 要检查 sub 是否为子字符串，请使用 in 操作符:  \n\n\n\n\n\n\n\n\n\n\n\n‘Py’ in ‘Python’Truestr.index(sub[, start[, end]])类似于 find()，但在找不到子类时会引发 ValueError。\n\n\nstr.format(args, *kwargs)执行字符串格式化操作。 调用此方法的字符串可以包含字符串字面值或者以花括号 {} 括起来的替换域。 每个替换域可以包含一个位置参数的数字索引，或者一个关键字参数的名称。 返回的字符串副本中每个替换域都会被替换为对应参数的字符串值。  \n\n\n\n\n\n\n\n\n\n\n\n“The sum of 1 + 2 is {0}”.format(1+2)‘The sum of 1 + 2 is 3’str.lower()返回原字符串的副本，其所有区分大小写的字符均转换为小写。\n\n\nstr.replace(old, new[, count])返回字符串的副本，其中出现的所有子字符串 old 都将被替换为 new。 如果给出了可选参数 count，则只替换前 count 次出现。\nstr.split(sep=None, maxsplit=-1)返回一个由字符串内单词组成的列表，使用 sep 作为分隔字符串。 如果给出了 maxsplit，则最多进行 maxsplit 次拆分（因此，列表最多会有 maxsplit+1 个元素）。 如果 maxsplit 未指定或为 -1，则不限制拆分次数（进行所有可能的拆分）。\n如果给出了 sep，则连续的分隔符不会被组合在一起而是被视为分隔空字符串 (例如 ‘1,,2’.split(‘,’) 将返回 [‘1’, ‘’, ‘2’])。 sep 参数可能由多个字符组成 (例如 ‘1&lt;&gt;2&lt;&gt;3’.split(‘&lt;&gt;’) 将返回 [‘1’, ‘2’, ‘3’])。 使用指定的分隔符拆分空字符串将返回 [‘’]。\n例如:  \n\n\n\n\n\n\n\n\n\n\n\n‘1,2,3’.split(‘,’)[‘1’, ‘2’, ‘3’]‘1,2,3’.split(‘,’, maxsplit=1)[‘1’, ‘2,3’]‘1,2,,3,’.split(‘,’)[‘1’, ‘2’, ‘’, ‘3’, ‘’]如果 sep 未指定或为 None，则会应用另一种拆分算法：连续的空格会被视为单个分隔符，其结果将不包含开头或末尾的空字符串，如果字符串包含前缀或后缀空格的话。 因此，使用 None 拆分空字符串或仅包含空格的字符串将返回 []。\n\n\n例如:  \n\n\n\n\n\n\n\n\n\n\n\n‘1 2 3’.split()[‘1’, ‘2’, ‘3’]‘1 2 3’.split(maxsplit=1)[‘1’, ‘2 3’]‘   1   2   3   ‘.split()[‘1’, ‘2’, ‘3’]str.strip()返回原字符串的副本，移除其中的前导和末尾空格字符。 \n‘   spacious   ‘.strip()‘spacious’str.upper()返回原字符串的副本，其中所有区分大小写的字符均转换为大写。\n\n\ntr.title()返回原字符串的标题版本，其中每个单词第一个字母为大写，其余字母为小写。\n例如:  \n\n\n\n\n\n\n\n\n\n\n\n‘Hello world’.title()‘Hello World’str.isnumeric()如果字符串中至少有一个字符且所有字符均为数值字符则返回 True ，否则返回 False 。\n\n\nstr.islower()如果字符串中至少有一个区分大小写的字符 4 且此类字符均为小写则返回 True ，否则返回 False 。\nstr.isalpha()如果字符串中的所有字符都是字母，并且至少有一个字符，返回 True ，否则返回 False 。\nsongs&#x3D;input()#仅包含空格和中文\n\n\n##############begin###########\n#1. songs中存放的字符串仅包含空格和中文，请统计字符串变量songs中中文字的数量，直接将统计结果输出\n\nsum&#x3D;0\nfor i in range(len(songs)):\n    if(songs[i]!&#x3D;&quot; &quot;):\n        sum &#x3D;sum + 1\n    else:\n        pass\nprint(sum)\n\n\n\n#############end##############\n\n字符串的查找替换songs&#x3D;input()#歌曲歌词，仅包含空格和中文\ntitle&#x3D;input()#歌曲标题\n\n\n\n##############begin###########\n#1. 将songs中的空格改为换行。注意：首尾空格应去掉不用替换成换行符，连续的空格仅替换为一个换行符\n\ntry:\n    #删去首尾空格\n    songs&#x3D;songs.strip()\nexcept:\n    pass\n \ntmpstr&#x3D;&#39;&#39;\n#遍历字符串,将(可能连续的)空格替换成单个换行符\nfor i in songs:\n    if tmpstr&#x3D;&#x3D; &#39;&#39; or i !&#x3D; tmpstr[len(tmpstr)-1] or i!&#x3D;&#39; &#39;:\n        \n        tmpstr+&#x3D;i\n \npyout_songs&#x3D;tmpstr.replace(&#39; &#39;,&#39;\\n&#39;)\n\n\n\n\n#2. 将title作为歌曲的首行显示，输出整首歌曲\n\n\nx&#x3D;title+&#39;\\n&#39;+pyout_songs\nprint(x)\n\n\n\n##############end##########\n统计字频songs&#x3D;input()#仅包含空格和中文字\n\n\n\n################begin#############\n#1. 输出songs中出现最多的一个中文字，并输出该字出现次数。\n#注意：如果有多个字出现次数相同，请以原文本中最先出现的那个为准。\n\n\ndic&#x3D;&#123;&#125;\n\nm&#x3D;songs.replace(&#39; &#39;,&#39;&#39;)\nfor word in m:\n    if word in dic.keys():\n        dic[word]+&#x3D;1\n    else:\n        dic[word]&#x3D;1\n \npyout&#x3D;max(dic,key&#x3D;dic.get)\npot&#x3D;dic[pyout]\n \nprint(pyout,pot)\n\n\n\n\n################end#############\n文字对齐\n\n\n\n\n\n\n\n\n本关任务：将歌曲以最长的那一行为标准，其它行居中对齐左补句号输出。例如：。。。等风雨经过。。。等我们相见。。你微笑仰望着天。。我们一起种下心愿。。等花开等它实现该流的泪还是滑过你的脸。。我始终在你身边。。说好要一起走很远。。努力让未来鲜艳。在爱面前需要什么字眼。对你的承诺我一定实现真正的爱不需要有太多语言。有些感动就放在心里面。在爱面前需要什么字眼。付出的瞬间也就是永远每天离希望又再靠近了一点。守护家园是最美画面。。。我们为爱奉献。。。。为梦改变\nsongs&#x3D;input()#仅含空格和中文的歌词字符串\n\n\n######begin################## \n#1. 将songs按空格分割成一个字符串列表\n#提示，可用字符串的split函数\n\n\n\nsp&#x3D;songs.split()\n\n\n#######end##################\n\n\n#############begin####################\n#2. 以上面的字符串列表为基础，找出最长的那一个字符串，以它为长度基准，其它字符串居中对齐左补中文句号。按行输出整首歌曲。\n#对齐公式：(最长行的长度-当前行的长度)&#x2F;&#x2F;2为左补句号数\n#同学们可以自行发挥，完成本任务\n\n\nlongest&#x3D;0                    \nfor l in sp:\n    if len(l)&gt;longest:\n        longest&#x3D;len(l)\n    else:\n        pass\n \npyout&#x3D;&#39;&#39;\nfor li in sp:\n    l&#x3D;len(li)\n    addnum&#x3D;(longest-l)&#x2F;&#x2F;2\n    py&#x3D;&#39;。&#39;*addnum+str(li)\n    if pyout&#x3D;&#x3D;&#39;&#39;:\n        pyout&#x3D;pyout+py\n    else:\n        pyout&#x3D;pyout+&#39;\\n&#39;+py\n \nprint(pyout)\n\n####################end#################\n2.6字典字典的创建和基本操作\n\n\n\n\n\n\n\n\n本关任务：有一位同学张三的考试成绩如下：语文：90，英语：80，数学：85，信息：70要求根据这位同学的成绩创建如下的字典，数据从键盘输入（使用input函数）：  \n{‘姓名’: ‘张三’, ‘语文’: 90, ‘英语’: 80, ‘数学’: 85, ‘信息’: 70}然后对该字典进行后续各项操作。\n\n\n\n\n\n\n\n\n\n访问字典中的值cars = {‘BMW’: 8.5, ‘BENS’: 8.3, ‘AUDI’: 7.9}print(cars[‘AUDI’])添加键值对cars = {‘BMW’: 8.5, ‘BENS’: 8.3, ‘AUDI’: 7.9}cars[‘JLR’]=8.0print(cars)修改字典中的值cars = {‘BMW’: 8.5, ‘BENS’: 8.3, ‘AUDI’: 7.9,’JLR’:8.0}cars[‘JLR’]=7.0print(cars)删除键值对cars = {‘BMW’: 8.5, ‘BENS’: 8.3, ‘AUDI’: 7.9,’JLR’:8.0}del cars[‘JLR’]print(cars)判断字符串是否由数字组成str=input()if str.isdigit():str=eval(str)这样可以确保输入的成绩会以数值形式保存。\n编程要求根据提示，在右侧编辑器补充代码，创建字典并对该字典进行如下操作：1.添加一门成绩：体育：902.打印化学成绩，如果找不到，则输出‘不存在’3.修改语文成绩为1004.删除信息成绩5.输出字典\n\n\n\n\n\n\n\n\n\n平台会对你编写的代码进行测试：\n测试输入：  \n姓名张三语文90英语80数学85信息70预期输出：  \n不存在{‘姓名’: ‘张三’, ‘语文’: 100, ‘英语’: 80, ‘数学’: 85, ‘体育’: 90}  \n# 创建并初始化score_dict字典\nscore_dict &#x3D; &#123;&#125;\n\nfor i in range(5):\n    # 请按下面的注释提示添加代码，完成相应功能\n    #1.对score_dict字典进行初始化，数据从键盘输入，得到如任务描述中的字典\n    ###### Begin ######\n    m&#x3D;input()\n    n&#x3D;input()\n    if n.isdigit():\n        n&#x3D;eval(n)\n    score_dict[m] &#x3D; n \n    #######  End #######\n\n\n# 请按下面的注释提示添加代码，完成相应功能\n#2.请在此添加代码，实现对score_dict的添加、删除、查找、修改等操作，并打印输出相应的值\n###### Begin ######\nscore_dict[&#39;体育&#39;]&#x3D;90\ndel score_dict[&#39;信息&#39;]\nscore_dict[&#39;语文&#39;]&#x3D;100\nprint(&#39;不存在&#39;)\nprint(score_dict)\n#######  End #######\n字典的遍历\n\n\n\n\n\n\n\n\npython 字典 fromkeys() 函数用于创建一个新字典，以序列 seq 中元素做字典的键，value 为字典所有键对应的初始值：dict.fromkeys(seq[, value])参数seq — 字典键值列表。value — 可选参数, 设置键序列（seq）的值\n 遍历数组\n遍历字典中的键:  \ncars = {‘BMW’: 8.5, ‘BENS’: 8.3, ‘AUDI’: 7.9}for key in cars.keys():    print(key)遍历字典中的值:  \ncars = {‘BMW’: 8.5, ‘BENS’: 8.3, ‘AUDI’: 7.9}for value in cars.values():    print(value)遍历字典中的键值对:  \ncars = {‘BMW’: 8.5, ‘BENS’: 8.3, ‘AUDI’: 7.9}for key,value in cars.items():    print(key,value)  \n\n\n\n\n\n\n\n\n\n测试输入：  \n张三90808590预测输出：  \n姓名 张三语文 90英语 80数学 85体育 90总分 345  \n# 创建并初始化score_dict字典\nscore_list&#x3D;[&#39;姓名&#39;,&#39;语文&#39;,&#39;英语&#39;,&#39;数学&#39;,&#39;体育&#39;]\n# 请按下面的注释提示添加代码，完成相应功能\n#1.根据上面的列表创建score_dict字典并初始化，得到如任务描述中的字典，字典中的值从键盘输入\n###### Begin ######\ndict&#x3D;&#123;&#125;\nfor i in score_list:\n    m&#x3D;input()\n    dict[i]&#x3D;m\n#######  End #######\n\n\n# 请按下面的注释提示添加代码，完成相应功能\n#2.请在此添加代码，计算张三同学的总分，并将总分作为新的键值对加入，最后输出score_dict的所有键值对\n###### Begin ######\nsum&#x3D;0\nfor value in dict.values():\n    if value.isdigit():\n        sum&#x3D;sum+int(value)\ndict[&#39;总分&#39;]&#x3D;sum\n\n\n\nfor key,value in dict.items():  \n    print(key,value)  \n#######  End #######\n字典和列表的嵌套\n\n\n\n\n\n\n\n\n本关任务：编写程序实现一个包含列表的字典和包含字典的列表，形式分别如下：  \n{‘语文’: [85, 70], ‘英语’: [85, 95], ‘数学’: [80, 90]}[{‘语文’: 85, ‘英语’: 85, ‘数学’: 80}, {‘语文’: 70, ‘英语’: 95, ‘数学’: 90}]  \n\n\n\n\n\n\n\n\n\n列表嵌套字典employee_dict1 = {‘name’:’david’, ‘dept’:’ops’, ‘salary’: 12000}employee_dict2 = {‘name’:’brain’ , ‘dept’: ‘auto’ , ‘salary’: 13000}employee_list=[employee_dict1,employee_dict2]字典嵌套列表employee_dict = {‘name’:[‘david’,’brain’] , ‘dept’:[‘ops’, ‘auto’] , ‘salary’: [12000,13000]} \n根据提示，在右侧编辑器补充代码，执行以下操作：1.创建一个字典score_dict，里面包含三个列表，输出2.创建一个列表score_list，里面包含两个字典，输出\n测试说明平台会对你编写的代码进行测试：\n测试输入：  \n语文8570英语8595数学8090语文85英语85数学80语文70英语95数学90预期输出：  \n{‘语文’: [85, 70], ‘英语’: [85, 95], ‘数学’: [80, 90]}[{‘语文’: 85, ‘英语’: 85, ‘数学’: 80}, {‘语文’: 70, ‘英语’: 95, ‘数学’: 90}]  \n#创建空列表score_dict\nscore_dict&#x3D;&#123;&#125;\n#每次循环生成一个键值对\nfor i in range(3):\n    #输入课程名作为字典的键\n    key&#x3D;input()\n    # 创建空列表\n    value_list&#x3D;[] \n    # 请按下面的注释提示添加代码，完成相应功能\n    #1.从键盘输入两个分数，保存到列表中\n    ###### Begin ######       \n    m&#x3D;eval(input())\n    value_list.append(m)\n    n&#x3D;eval(input())\n    value_list.append(n)\n\n    #######  End #######\n    score_dict[key]&#x3D;value_list\n    \nprint(score_dict)    \n\n#创建空列表score_list\nscore_list&#x3D;[]\n#每次循环生成一个字典\n\nfor i in range(2):\n    # 创建空字典\n    s_dict&#x3D;&#123;&#125;\n    # 请按下面的注释提示添加代码，完成相应功能\n    #2.对从键盘输入三门课程及成绩，保存到字典中\n    ###### Begin ######\n    for i in range(3):\n        key&#x3D;input()\n        value&#x3D;eval(input())\n        s_dict[key]&#x3D;value\n\n    #######  End #######\n    score_list.append(s_dict)\n","slug":"python实训题目","date":"2022-11-03T13:52:49.000Z","categories_index":"","tags_index":"python","author_index":"Algernon"},{"id":"98617a616f5da740d44c6fdef4281028","title":"MCM 算法整理","content":"算法基础分治法许多有用的算法在结构上是递归的：为了解决一个给定的问题，算法一次或多次递归地调用其自身以解决紧密相关的若干子问题。这些算法典型地遵循分治法的思想：将原问题分解为几个较小但类似于原问题的子问题，递归地求解这些子问题，然后再合并这些子问题的解来建立原问题的解。\n随机算法如果一个算法的行为不仅由输入决定，而且也由随机数生成器产生的数值决定，则称这个算法是随机的。样例：生日悖论：一个屋子里人数必须要达到多少人，才能使其中两人生日相同的机会达到50%？\n\n两人生日相同的概率是1/n\n采用指示器随机变量\n若屋子里至少有$\\sqrt{2n}$+1个人，我们就可以期望至少有两人生日相同。对于n=365,k=28.排序希尔排序又称缩小增量排序法，是一种基于插入思想的排序方法。\n\n堆排序对树形选择排序的改进。\n优先队列优先队列是一种用来维护由一组元素构成的集合S的数据结构，其中的每一个元素都有一个相关 的值，称为关键字\n\n最大优先队列\n最小优先队列\n\n快速排序交换类排序冒泡排序（相邻排序法）通过对相邻的数据元素进行交换，逐步将待排序序列变成有序序列的过程。\n\n最好情况划分\n平衡划分\n最坏情况分析\n\n线性时间排序三种线性时间复杂度的排序算法：\n\n计数排序\n基数排序\n桶排序\n\n决策树模型比较排序可以被抽象为一棵决策树。决策树是一棵完全二叉树，它可以表示在给定输入规模情况下，某一特定排序算法对所有元素的比较操作。\n计数排序假设n个输入元素中的每一个都是在0到k区间内的一个整数，其中k为某个整数。计数排序的基本思想是：对每一个输入元素x，确定小于x的元素个数。\n基数排序是先按最低有效位进行排序。\n桶排序桶排序将[0,1)区间划分为n个相同大小的子区间，或称为桶。然后，将n个输入数分别放到各个桶中。因为输入数据是均匀、独立地分布在[0,1)区间上，所以一般不会出现很多数，落在同一个桶中的情况。为得到输出结果，对每个桶中的数进行排序，然后遍历每个桶，按照次序把各个桶中的元素列出来即可。\n中位数与顺序统计量最大值与最小值数据结构线性表是n个类型相同的数据元素的有限序列。\n栈和队列在栈中，被删除的是最近插入的元素，后进后出压入（push）弹出(pop)\n\n顺序存储的栈为顺序栈 \n链式存储的栈为链栈顺序栈利用一组地址连续的存储单元依次存放自栈底到栈顶的数据元素，同时由于栈操作的特殊性，还必须附设一个位置指针top（栈顶指针）来动态地指示栈顶元素在顺序栈中的位置。空栈：top=-1\n\n递归递归是在定义自身的同时又出现了对自身的引用。如果一个函数在定义体内直接调用自己，则称为直接递归函数如果一个函数经过一系列的中间调用语句，通过其他函数间接调用自己，则称为间接递归函数。\n递归定义函数二阶斐波那契数列定义为：\n$Fib(n)=\\begin{cases} 0,     若n=0 \\\\1，若n=1\\\\Fib(n-1)+Fib(n-2),若n&gt;1 \\end{cases}$\n阿克曼函数定义为：$Ack(m,n)=\\begin{cases} n+1,当m+0时 \\\\Ack(m-1,1),当m\\neq0,n=0时\\\\Ack(m-1,Ack(m,n-1),当m\\neq0,n\\neq0时 \\end{cases}$ 用C语言描述：\nint ack(int m ,int n)\n\n&#123;\n  if(m&#x3D;&#x3D;0)\n\n        return   n+1;\n\n  else if  (n&#x3D;&#x3D;0) \n\n        return ack(m-1,1);\n\n  else\n\n        return ack(m-1,ack(m,n-1));\n\n&#125;\nn阶汉诺塔问题假设有三个分别命名为X,Y,Z的塔座，在塔座X上插有n个直径大小各不相同、从小到大编号为1,2，···，n的圆盘。现要求将塔座X上的n个圆盘移动到塔座Z上，并仍按同样顺序叠排。圆盘移动时必须遵守以下规则：\n\n每次只能移动一个圆盘\n圆盘可以插在X,Y和Z中的任何一个塔座上。\n任何时刻都不能将一个较大的圆盘压在较小的圆盘之上。\n\n汉诺塔递归算法\nvoid hanoi(int n,char x,char y,char z)\n&#123;\n if(n&#x3D;&#x3D;1)\n         move(x,1,z)\n else\n\n   &#123;\n     hanoi(n-1,x,z,y);\n     move(x,n,z);\n     hanoi(n-1,y,x,z);\n\n   &#125;\n &#125;\n在队列中，被删去的总是在集合中存在时间最长的那个元素，先进先出入队(enqueue)出队(dequeue)队头队尾：在队列中，允许插入的一端称为队尾，允许删除的一端称为队头。链队列循环队列\n链表链表中的各对象按线性顺序排列，链表的顺序是由各个对象里的指针决定的。\n十字链表\n动态规划动态规划应用于子问题重叠的情况，即不同的子问题具有公共的子子问题。动态规划算法对每个子子问题只求解一次，将其保存在一个表格中。动态规划方法通常用来求解最优化问题。最优子结构如果一个问题的最优解包含其子问题的最优解，我们就称此问题具有最优子结构性质。无权最短路径：找到一条从u到$\\upsilon$的边数最少的路径。这条路径必然是简单路径，因为如果路径中包含环，将环去掉显然会减少边的数量。无权最长路径：找到一条从u到$\\upsilon$的边数最多的简单路径。  \n如果递归算法反复求解相同的子问题，称最优化问题具有重叠子问题性质。\n贪心算法做出局部最优的选择，寄希望这样的选择能导致全局最优解。0-1背包问题：小偷抢劫商店，背包容纳重量一定，商品重量、价值不同，求带走商品总价值最高。分数背包问题：设定与上题相同，但对每个商品，小偷可以拿走其一部分，而非二元选择。贪心策略：首先尽可能拿走每磅价值最高的商品，然后拿走每磅价值第二高的商品，以此类推，直到达到重量上限。贪心策略可以求解分数背包问题，而不能求解0-1背包问题。拟阵\n斐波那契图算法对于图G = (V,E),可以用两种标准表示方法表示。一种表示法将图作为邻接链表的组合，另一种表示法则将图作为邻接矩阵看待。\n二叉树把满足一下两个条件的树称为二叉树\n\n每个结点的度都不大于2\n每个结点的孩子结点次序不能任意颠倒\n二叉树的性质：\n\n在二叉树第i层上至多有$2^{i-1}$个结点（i $\\geqq$ 1）\n\n深度为k的二叉树至多有$2^k$-1个结点（i $\\geqq$ 1）\n\n二叉树的遍历用L、D、R分别表示遍历左子树、访问根节点、遍历右子树，按先左后右的方式，有三种：\n先序遍历（DLR）：若二叉树为空，则为空操作，否则依次执行以下三个操作：\n\n访问根结点\n按先序遍历左子树\n按先序遍历右子树\n\n中序遍历（LDR）：若二叉树为空，则为空操作，否则依次执行以下三个操作：\n\n按中序遍历左子树\n访问根结点\n按中序遍历右子树\n\n后序遍历（LRD）：若二叉树为空，则为空操作，否则依次执行以下三个操作：\n\n按后序遍历左子树\n按后序遍历右子树\n访问根结点\n\n哈夫曼树路径是指从根结点到该结点的分支序列，路径长度是指根结点到该结点所经过的分支数目。给树的每个结点赋予一个具有某种意义的实数，称该实数为这个结点的权在树结构中，把从树根到某一结点的路径长度与该结点的权的乘积，称为该结点的带权路径长度。\n哈夫曼树是由n个带权叶子结点构成的所有二叉树中带权路径长度最短的二叉树。又称最优二叉树。\n广度优先搜索树的按层次遍历的推广。\nprim 的最小生成树算法Dijkstra的单源最短路径算法\n深度优先搜索树的先根遍历的推广强连通分量\n最小生成树最小生成树问题图G=（V(G),E(G)）树T=（V(T),E’(T)）在一个连通无向图G=(V, E)中，对于其中的每条边(u,v)∈E，赋予其权重w(u, v)，则最小生成树问题就是要在G中找到一个连通图G中所有顶点的无环子集T⊆E，使得这个子集中所有边的权重之和最小。即生成树为一条连接所有点的路径，最小生成树为权重和最小那个生成树（非环）Kruskal算法——短边优先法（避圈法）Prim算法——加点法\n单源最短路径\n单目的地最短路径问题\n单结点对最短路径问题\n所有结点对最短路径问题\n\nDijkstra算法解决的是带权重的有向图上单源最短路径问题，该算法要求所有边的权重都为非负值。按最短路径长度递增的顺序产生一点到其余各项点的所有最短路径。\n所有结点对的最短路径参考资料：《算法导论》《数据结构》\n","slug":"mcm算法","date":"2022-11-03T13:51:49.000Z","categories_index":"数模","tags_index":"数模","author_index":"Algernon"},{"id":"a32f84760e004b1cfbde91612f64a1ec","title":"利用Markdown写文章 公式小册（Latex）","content":"公式使用\n\\begin{eqnarray}\n\\nabla\\cdot\\vec{E} &=& \\frac{\\rho}{\\epsilon_0} \\\\\n\\nabla\\cdot\\vec{B} &=& 0 \\\\\n\\nabla\\times\\vec{E} &=& -\\frac{\\partial B}{\\partial t} \\\\\n\\nabla\\times\\vec{B} &=& \\mu_0\\left(\\vec{J}+\\epsilon_0\\frac{\\partial E}{\\partial t} \\right)\n\\end{eqnarray}插入公式*\n行中公式       $ 数学公式 $独立公式（单独成行）\n$$ 数学公式 $$\n效果\n\n数学公式\n上下标^ 表示上标, _ 表示下标。如果上下标的内容多于一个字符，需要用 {} 将这些内容括成一个整体。上下标可以嵌套，也可以同时使用。表示$x_0$   ：$x_0$\n$$ x^&#123;y^z&#125;&#x3D;(1+&#123;\\rm e&#125;^x)^&#123;-2xy^w&#125; $$\n效果\nx^{y^z}=(1+{\\rm e}^x)^{-2xy^w}另外，如果要在左右两边都有上下标，可以使用 \\sideset 命令；也可以简单地在符号前面多打一个上下标，此时会以行内公式渲染。\n输入分数通常使用 \\frac {分子} {分母} 来生成一个分数，分数可多层嵌套。如果分式较为复杂，亦可使用 分子 \\over 分母 此时分数仅有一层。\n$$ \\frac&#123;a-1&#125;&#123;b-1&#125; \\quad or \\quad &#123;a+1 \\over b+1&#125; $$\n输出\n\\frac{a-1}{b-1} \\quad or \\quad {a+1 \\over b+1}当分式 仅有两个字符时 可直接输入 \\frac ab 来快速生成一个                 $\\frac ab$\n开方使用 \\sqrt [根指数，省略时为2] {被开方数} 命令输入开方。\n$\\sqrt[3]&#123;a&#125;$\n输出$\\sqrt[3]{a}$\n省略号数学公式中常见的省略号有两种，\\ldots 表示与 文本底线 对齐的省略号              $\\ldots$\\cdots 表示与 文本中线 对齐的省略号$\\cdots$\n积分使用 \\int_积分下限^积分上限 {被积表达式} 来输入一个积分。例子$$ \\int_0^1 &#123;x^2&#125; \\,&#123;\\rm d&#125;x $$输出\n\\int_0^1 {x^2} \\,{\\rm d}x极限运算使用 \\lim_{变量 \\to 表达式} 表达式 来输入一个极限。如有需求，可以更改 \\to 符号至任意符号。\n$$ \\lim_&#123;n \\to \\infty&#125; \\frac&#123;1&#125;&#123;n(n+1)&#125; \\quad and \\quad \\lim_&#123;x\\leftarrow&#123;示例&#125;&#125; \\frac&#123;1&#125;&#123;n(n+1)&#125; $$\n\\lim_{n \\to \\infty} \\frac{1}{n(n+1)} \\quad and \\quad \\lim_{x\\leftarrow{示例}} \\frac{1}{n(n+1)}希腊字母输入 \\小写希腊字母英文全称 和 \\首字母大写希腊字母英文全称 来分别输入小写和大写希腊字母。\n\n\n\n\n输入\n显示\n\n\n\n\n\\alpha\n$\\alpha$\n\n\n\\beta\n$\\beta$\n\n\n\\gamma\n$\\gamma$\n\n\n\\delta\n$\\delta$\n\n\n\\epsilon\n$\\epsilon$\n\n\n\\zeta\n$\\zeta$\n\n\n\\eta\n$\\eta$\n\n\n\\theta\n$\\theta$\n\n\n\\lambda\n$\\lambda$\n\n\n\\mu\n$\\mu$\n\n\n\\nu\n$\\nu$\n\n\n\\pi\n$\\pi$\n\n\n\\rho\n$\\rho$\n\n\n\\sigma\n$\\sigma$\n\n\n\\omega\n$\\omega$\n\n\n\n\n资料来源：https://www.zybuluo.com/codeep/note/163962#1%E5%A6%82%E4%BD%95%E6%8F%92%E5%85%A5%E5%85%AC%E5%BC%8F\n","slug":"latex","date":"2022-11-03T13:50:49.000Z","categories_index":"数模","tags_index":"latex","author_index":"Algernon"},{"id":"694b21aa68d69c8a1bd7b64f5260a5be","title":"统计学习导论 学习笔记（2）","content":"非线性模型\n多项式回归\n阶梯函数\n回归样条\n光滑样条\n局部回归\n广义可加模型\n分段多项式分段多项式回归在X的不同区域拟合独立的低阶多项式函数，以此取代在X全部取值范围内拟合高阶多项式\n\n\n局部回归局部回归是拟合光滑非线性函数的另外一种方法，在对一个目标观测点$x_0$拟合时，该方法只用到这个点附近的训练观测。\n基于树的方法基于树的回归和分类方法，这些方法主要是根据分层和分割的方式将预测变量空间划分为一系列简单区域。对某个给定待预测的观测值，用它所属区域中训练集的平均值或众数对其进行评测。\n回归树\n剪枝\n分类树分类树被用于预测定性变量而非定量变量。\n随机森林随机森林通过对树作去相关处理，实现对装袋法树的改进。\n提升法\n支持向量机","slug":"统计学习导论2","date":"2022-11-03T13:48:49.000Z","categories_index":"学习笔记","tags_index":"算法","author_index":"Algernon"},{"id":"6a6d5f1226605e232622dbe9c9907bfc","title":"摩尔钓鱼","content":"\n\n\n\n\n\n\n\n\n 编辑\n 题目描述：\n2021年的暑假到了，小摩尔们看着手游版波光粼粼的小河，觉得钓鱼会是一个很完美的夏日活动。可是参加活动的摩尔数量太多了，本着爱与和平的原则，为了不让小摩尔们为了争夺场地而吵架，几只聪明的小摩尔决定从一条有着各种各样小鱼的大河修建一个主水道引河水，再通过修建小水道把主水道的河水引到每个小摩尔的家门口。考虑到美观和地形优势，这几只聪明的小摩尔决定按照由东向西的方向修建主水道，而小水道则以由北往南或者由南往北的方向与主水道相连。为了更快竣工，小摩尔们想请你帮帮忙，确定主水道的最优位置并计算出最少需要多久可以修完下水道？\n输入格式：\n第一行是一个整数n，表示参加钓鱼比赛的摩尔数量（0&lt;n&lt;10000);第二行是一个整数t，表示修建一单位的小水道花费的时间（0&lt;t&lt;10）;接下来n行是每位参赛小摩尔的家的位置，每行有两个整数x和y（-10000&lt;x,y&lt;10000),其中x表示东西方向，y表示南北方向。\n输出格式：\n仅一行，即一个整数，代表最少需要的时间。\n样例\n样例输入\n\n6\n4\n3 7\n12 5\n9 13\n20 1\n11 11\n211 -5\n样例输出：\n\n\n\n\n\n\n\n\n\n120\n数据范围与提示：\n0&lt;n&lt;10000\n0&lt;t&lt;10\n-10000&lt;x,y&lt;10000\n\n根据题意，我们可以以东西主河道作为x轴，南北作为y轴，发现每一条小河道的距离为距离主河道的距离|y|，而所需时间即是|y|乘以单位时间t，与x无关，也就是说，从第三个数开始，每奇数个数读取后不产生作用，计算式不需要考虑x。\n所以解答程序有以下几个要点：\n1.构造一个循环，一次读入输入的所有数字，并储存。\n2.求得y轴上一点，使得该点距离其他点的距离之和（一次线性）最短\n3.求得以该点为x轴时各点纵坐标的绝对值之和。\n注意：数据范围（这一点会在之后详细阐述）\n以下是第一次的代码\n#include&lt;stdio.h&gt;\n\n#include&lt;math.h&gt;\n\n\n\nint split(long a[], int low, int high)\n&#123;\n\tint part_element &#x3D; a[low];\n\n\tfor (;;) &#123;\n\t\twhile (low &lt; high &amp;&amp; part_element &lt;&#x3D; a[high])\n\t\t\thigh--;\n\t\tif (low &gt;&#x3D; high)\n\t\t\tbreak;\n\t\ta[low++] &#x3D; a[high];\n\n\t\twhile (low &lt; high &amp;&amp; a[low] &lt;&#x3D; part_element)\n\t\t\tlow++;\n\t\tif (low &gt;&#x3D; high) break;\n\t\ta[high--] &#x3D; a[low];\n\t&#125;\n\n\ta[high] &#x3D; part_element;\n\treturn high;\n&#125;\n\nvoid quicksort(long a[], int low, int high)\n&#123;\n\tint middle;\n\n\tif (low &gt;&#x3D; high)\n\t\treturn;\n\tmiddle &#x3D; split(a, low, high);\n\tquicksort(a, low, middle - 1);\n\tquicksort(a, middle + 1, high);\n&#125;\n\nint main() &#123;\n\tlong n, num, sum, target;\n\tint t;\n\tlong x[10];\n\tlong y[10];\n\tscanf(&quot;%d&quot;, &amp;n);\n\tscanf(&quot;%d&quot;, &amp;t);\n\tfor (long i &#x3D; 0; i &lt; n; i++)\n\t&#123;\n\t\tx[i] &#x3D; scanf(&quot;%d&quot;, &amp;x[i]);\n\t\ty[i] &#x3D; scanf(&quot;%d&quot;, &amp;y[i]);\n\n\t&#125;\n\n\tquicksort(y, 0, n - 1);\n\tif (n % 2 &#x3D;&#x3D; 0)\n\t\tnum &#x3D; (y[n &#x2F; 2] + y[n &#x2F; 2 - 1]) &#x2F; 2;\n\telse\n\t\tnum &#x3D; y[(n&#x2F;2) ] ;\n\n\tfor (long i &#x3D; 0; i &lt; n; i++) &#123;\n\t sum +&#x3D; abs(y[i] - num);\n\t&#125;\n\n\ttarget &#x3D; sum * t;\n\tprintf(&quot;%d&quot;, target);\n\n\treturn 0;\n&#125;\n\n我的思路是，使用一个快速排序算法，将y所储存的数字按照从低到高排序，之后取中位数：\n当这一系列数字个数为奇数时，中位数到各点距离之和最短；\n当这一系列数字个数为偶数时，最中间两点间任意数字到各点距离之和想等且最短。\n然而在devC++上代入样例时发现无法得到预期结果。\n分析原因：\n最开始希望变长数组能够按照输入的数字改变长度，在声明时使用 int x[t]的形式，报错，再看题，数据范围0&lt;t&lt;10,改为 x[10] .\n根据输出结果推测，输出=t，可知y的读取和平均数的计算中有一部分出了错。\n于是修改代码，首先使用C++库中的sort函数简化；\n其次，根据题意，将数组扩大到10000；\n修改代码如下：\n#include&lt;iostream&gt;\n#include&lt;cmath&gt;\n#include&lt;stdio.h&gt;\n#include&lt;algorithm&gt;\n\n\n\n\n\n\n\nint main() &#123;\n\tusing namespace std;\n\tint n, target;\n\tint t;\n\tint num;\n\n\tscanf(&quot;%d&quot;, &amp;n);\n\tscanf(&quot;%d&quot;, &amp;t);\n\tint a[10000];\n\tint b[10000];\n\tfor (int i &#x3D; 0; i &lt; n; i++)\n\t&#123;\n\t\tscanf(&quot;%d&quot;, &amp;a[i]);\n\t\tscanf(&quot;%d&quot;, &amp;b[i]);\n\n\t&#125;\n\t\n\tsort(b, b + n);\n\tif (n % 2 &#x3D;&#x3D; 0)\n\t\tnum &#x3D; b[n &#x2F; 2];\n\telse if (n &#x3D;&#x3D; 1)\n\t\treturn 0;\n\telse \n\t\tnum &#x3D; ((b[n &#x2F; 2 - 1] + b[n &#x2F; 2]) &#x2F; 2);\n\t\n  \n\n\n\n\tint sum &#x3D; 0;\n\tfor (int i &#x3D; 0; i &lt; n; i++) &#123;\n\tsum +&#x3D; abs(b[i] - num);\n\t&#125;\n\n\t\n\ttarget &#x3D; t *  sum ;\n\t\n\n\tprintf(&quot;%d\\n&quot;, target);\n\n\treturn 0;\n&#125;\n\n代码已经可以满足样例，但oj上只有60分。\n继续分析：\n测试数据部分可以通过，部分不能。怀疑是奇偶数出错，即中位数出问题。\n（最后确实是中位数写反了，但那都是后话了）\n当时没有觉得算法出了什么问题，而且有的情况会超时，怀疑是数组越界，于是翻书，修改声明。\n朋友的建议下使用long long.\n之后选择查找的算法，使用三分查找；\n修改后代码如下：\n# include &lt;cstdio&gt;\n# include &lt;cmath&gt;\n# include &lt;algorithm&gt;\nusing namespace std;\nconst int N &#x3D; 2e4 + 12;\nint n;\nlong long t,m &#x3D; 0x7fffffff,y[N];\nlong long check(long long k)\n&#123;\n    long long ans &#x3D; 0;\n    for(int i &#x3D; 1;i &lt;&#x3D; n;i++)\n    ans +&#x3D; abs(y[i] - k);\n    return ans;\n&#125;\nint main()\n&#123;\n    scanf(&quot;%d %lld&quot;,&amp;n,&amp;t);\n    for(int i &#x3D; 1;i &lt;&#x3D; n;i++)\n     for(int j &#x3D; 0;j &lt; 2;j++)\n      scanf(&quot;%lld&quot;,&amp;y[i]);\n    sort(y + 1,y + n + 1);\n    long long l &#x3D; y[1],r &#x3D; y[n],mid1,mid2;\n    while(l + 5 &lt; r)\n    &#123;\n        mid1 &#x3D; l + (r - l) &#x2F; 3,\n      mid2 &#x3D; l + (r - l) &#x2F; 3 * 2;\n        if(check(mid1) &lt; check(mid2))r &#x3D; mid2;\n        else l &#x3D; mid1;\n    &#125; \n    for(int i &#x3D; l;i &lt;&#x3D; r;i++)m &#x3D; min(m,check(i));\n    printf(&quot;%lld\\n&quot;,m * t);\n&#125;\n\nabs函数用来求绝对值，声明改为long long.\nAC.\n但后续和学长交流得知，当初理解没问题，后续想复杂了。\n感想：\n1.分析题目第一重要，虽然看着很像查找但最终思路很简单；\n2.代码规范，对C++还不熟悉，代码中c与c++杂糅，需要尽快从c转向c++；\n3.多刷刷洛谷，不能再一道题做一天了。\n最后附上正解（python)  （来自学长）\nn &#x3D; eval(input())\nt &#x3D; eval(input())\ny_pos &#x3D; []\ny_max &#x3D; -1\ny_min &#x3D; 100000000\ndistance &#x3D; 100000000\nfor i in range(n):\n    temp &#x3D; input()\n    temp &#x3D; int(temp.split(&quot; &quot;)[1])\n    y_pos.append(temp)\n    if(temp &gt; y_max):\n        y_max &#x3D; temp\n    if(temp &lt; y_min):\n        y_min &#x3D; temp\nfor i in range(y_min, y_max+1):\n    temp &#x3D; 0\n    No &#x3D; 0\n    for j in range(n):\n        temp +&#x3D; t*abs(y_pos[j]-i)\n    if(temp &lt; distance):\n        distance &#x3D; temp\nprint(distance)\n\n","slug":"moerdiaoyu","date":"2022-11-03T13:44:49.000Z","categories_index":"算法","tags_index":"算法","author_index":"Algernon"},{"id":"2c79875937ce4f2b27d6f5db2a33f4e1","title":"统计学习导论 学习笔记（1）","content":"\n\n\n\n\n\n\n\n\n   大部分统计学习问题分为以下两种类型：指导学习和无指导学习。对每一个预测变量$x_i$(i=1,…,n)都有相应变量的观测$y_i$。建模的目标是通过建立预测变量与响应变量的关系，精准预测响应变量或更好理解响应变量与预测变量的关系。    许多传统的统计学习方法，比如线性回归和逻辑斯谛回归，以及诸如广义可加模型、提升方法和支持向量机等比较现代的方法，都属于指导学习范畴。   对于无指导学习，只有预测变量的观测向量，这些向量没有相应的响应向量与之对应。聚类分析可以用到无指导学习。   半指导学习不提及。\n   我们习惯于将响应变量为定量的问题称为回归分析问题，而将具有定性响应变量的问题定义为分类问题。\n\n贝叶斯分类器\n贝叶斯决策边界\n贝叶斯分类器将产生最低的测试错误率，称为贝叶斯错误率。\n\nK最近邻方法\n\nK最近邻分类器\n\n线性回归1.简单线性回归假定X和Y之间存在线性关系，在数学上，又可以将这种线性关系记为：\n   Y $\\approx$  $\\beta_0$ + $\\beta_1$X有时会将公式称为Y对X的回归。$\\beta_0$和$\\beta_1$被称为模型的系数或参数。最小二乘估计\n总体回归直线Y $\\approx$  $\\beta_0$ + $\\beta_1$X + $\\epsilon$\n2.多元线性回归假设有p个不同的观测变量，则多元线性回归模型的形式为：Y $\\approx$  $\\beta_0$ + $\\beta_1X _1$+ $\\beta_2X_2$+ ···+$\\beta_pX_p$+ $\\epsilon$\n最小二乘平面只是对真实总体回归平面的一个估计。我们可以计算置信区间以确定到$\\hat{y}$与f(X)的接近程度。                                                         \n数据的非线性——残差图\n\n离群点\n高杠杆点\n共线性\n\n分类逻辑斯谛回归p(X)  =  $\\beta_0$ + $\\beta_0$X\n使用逻辑斯谛函数     \np(X)  = $\\cfrac{e^{\\beta_0+\\beta_1X}}{1+e^{\\beta_0+\\beta_1X}}$\n二次判别分析\n线性模型选择与正则化\n子集选择\n压缩估计\n降维法\n\n1.子集选择最优子集选择，即对p个预测变量的所有组合分别使用最小二乘回归进行拟合。逐步选择\n\n向前逐步选择\n\n向前逐步选择以一个不包含任何预测变量的零模型为起点，依次往模型中添加变量，直至所有的预测变量都包含在模型中。特别之处在于，每次只将能够最大限度提升模型效果的变量加入模型中。\n\n向后逐步选择以包含全部p个变量的全模型为起点，逐次迭代，每次移除一个对模型拟合结果最不利的变量。\n\n选择最优模型\n\n$C_p$\n赤池信息量准则\n贝叶斯信息准则（BIC）与调整$R^2$\n2.压缩估计方法使用对系数进行约束或加罚的技巧对包含p个预测变量的模型进行拟合，将系数估计值往零的方向压缩。\n\n\n岭回归\nlassolasso建立的模型与岭回归建立的模型相比更易于解释。lasso得到了一个稀疏模型———只包含所有变量的一个子集的模型。 \n3.降维方法将预测变量进行变换，然后用转换之后的变量拟合最小二乘模型。\n\n主成分\n偏最小二乘\n主成分分析是一种可以从多个变量中得到低维变量的有效方法。https://www.bilibili.com/video/BV1uv4y1w7Vr/?spm_id_from=333.999.0.0&amp;vd_source=11bfc591eb1189ab7412b09ee29e1dcd)\n\n\n","slug":"统计学习导论1","date":"2022-11-03T13:28:49.000Z","categories_index":"学习笔记","tags_index":"算法","author_index":"Algernon"},{"id":"8239787d32df6c476a6ebbc5a4594a62","title":"【Python机器学习基础教程】（三）","content":"无监督学习与预处理无监督学习的预处理本章研究两类无监督学习：数据集变换与聚类\n数据集的无监督变换是创建数据新的表示的算法。\n无监督变换的一个常见应用是降维，它接受包含许多特征的数据的高维表示，并找到表示该数据的一种新方法，用较少的特征就可以概括其特性。降维的一个常见应用是为了可视化将数据将为2维。\n与之相反，聚类算法将数据划分成不同的组，每组包含相似的物项。\n预处理和缩放一些算法（如神经网络和SVM）对数据缩放非常敏感。因此，通常的做法是对特征进行调节，使数据表示更适合于这些算法。通常来说，这是对数据的一种简单的按特征的缩放 和移动。\nmglearn.plots.plot_scaling()\n\n降维、特征提取与流形学习利用无监督学习进行数据变换可能有很多目的。最常见的 目的就是可视化、压缩数据，以及寻找数据量更大的数据表示以用于进一步的处理。\n为实现这些目的，最简单也最常用的一种算法就是主成分分析。我们也将学习另外两种算法：非负矩阵分解和t-SNE，前者通常用于特征提取，后者通常用于二维散点图的可视化。\n主成分分析主成分分析（PCA）是一种旋转数据集的方法，旋转后的特征在统计上不相关。在做完这种旋转之后，通常是根据新特征对解释数据的重要性来选择它的一个子集。\nmglearn.plots.plot_pca_illustration()\n\n将PCA应用于cancer数据集并可视化PCA最常见的应用之一就是将高维数据集可视化。\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.preprocessing import StandardScaler\ncancer &#x3D; load_breast_cancer()\n\nfig,axes &#x3D; plt.subplots(15,2,figsize&#x3D;(10,20))\nmalignant&#x3D;cancer.data[cancer.target&#x3D;&#x3D;0]\nbenign&#x3D;cancer.data[cancer.target&#x3D;&#x3D;1]\n\nax&#x3D;axes.ravel()\n\nfor i in range(30):\n    _,bins &#x3D; np.histogram(cancer.data[:,i],bins&#x3D;50)\n    ax[i].hist(malignant[:,i],bins&#x3D;bins,color&#x3D;mglearn.cm3(0),alpha&#x3D;.5)\n    ax[i].hist(benign[:,i],bins&#x3D;bins,color&#x3D;mglearn.cm3(2),alpha&#x3D;.5)\n    ax[i].set_title(cancer.feature_names[i])\n    ax[i].set_yticks(())\nax[0].set_xlabel(&quot;Feature magnitude&quot;)\nax[0].set_ylabel(&quot;Frequency&quot;)\nax[0].legend([&quot;malignant&quot;,&quot;benign&quot;],loc&#x3D;&quot;best&quot;)\nfig.tight_layout()\n乳腺癌数据集中每个类别的特征直方图：我们为每个特征创建一个直方图，计算具有某一特征的数据点在特定范围内（bin）的出现频率。\n每张图都包含两个直方图，一个是良性类别的所有点（蓝色），一个是恶性类别的所有点（红色）。\n但这种图无法向我们展示变量之间的相互作用以及这种相互作用与类别之间的关系。利用PCA，我们可以获取到主要的相互作用，并得到稍微完整的图像。我们可以找到前两个主成分，并在这个新的二维空间中用散点图将数据可视化。\n在应用PCA之前，我们利用StandardScaler缩放数据，使每个特征的方差均为1：\nfrom sklearn.datasets import load_breast_cancer\n\ncancer &#x3D; load_breast_cancer()\n\nscaler&#x3D;StandardScaler()\nscaler.fit(cancer.data)\nX_scaled&#x3D;scaler.transform(cancer.data)\nfrom sklearn.decomposition import PCA\n#保留数据的前两个成分\npca&#x3D;PCA(n_components&#x3D;2)\n#对乳腺癌数据拟合PCA模型\npca.fit(X_scaled)\n\n#将数据变换到前两个主成分的方向上\nX_pca&#x3D;pca.transform(X_scaled)\nprint(&quot;Original shape:&#123;&#125;&quot;.format(str(X_scaled.shape)))\nprint(&quot;Reduced shape:&#123;&#125;&quot;.format(str(X_pca.shape)))\n\n\n\n\n\n\n\n\n\nOriginal shape:(569, 30)Reduced shape:(569, 2)\n现在我们可以对前两个主成分作图：\n#对第一个和第二个 主成分作图，按类别着色\nplt.figure(figsize&#x3D;(8,8))\nmglearn.discrete_scatter(X_pca[:,0],X_pca[:,1],cancer.target)\nplt.legend(cancer.target_names,loc&#x3D;&quot;best&quot;)\nplt.gca().set_aspect(&quot;equal&quot;)\nplt.xlabel(&quot;First principal component&quot;)\nplt.ylabel(&quot;Second principal component&quot;)\n主成分对应于原始数据中的方向，所以他们是原始特征的组合。\n在拟合过程中，主成分被保存在PCA对象的components_属性 中：\nprint(&quot;PCA component shape:&#123;&#125;&quot;.format(pca.components_.shape))\n\n\n\n\n\n\n\n\n\nPCA component shape:(2, 30)\n看一下components_的内容：\nprint(&quot;PCA components:\\n&#123;&#125;&quot;.format(pca.components_))\n\n\n\n\n\n\n\n\n\nPCA components:[[ 0.21890244  0.10372458  0.22753729  0.22099499  0.14258969  0.239285350.25840048  0.26085376  0.13816696  0.06436335  0.20597878  0.017428030.21132592  0.20286964  0.01453145  0.17039345  0.15358979  0.18341740.04249842  0.10256832  0.22799663  0.10446933  0.23663968  0.224870530.12795256  0.21009588  0.22876753  0.25088597  0.12290456  0.13178394] [-0.23385713 -0.05970609 -0.21518136 -0.23107671  0.18611302  0.151891610.06016536 -0.0347675   0.19034877  0.36657547 -0.10555215  0.08997968-0.08945723 -0.15229263  0.20443045  0.2327159   0.19720728  0.130321560.183848    0.28009203 -0.21986638 -0.0454673  -0.19987843 -0.219351860.17230435  0.14359317  0.09796411 -0.00825724  0.14188335  0.27533947]]\n我们还可以用热图将系数可视化：\nplt.matshow(pca.components_,cmap&#x3D;&#39;viridis&#39;)\nplt.yticks([0,1],[&quot;First component&quot;,&quot;Second component&quot;])\nplt.colorbar()\nplt.xticks(range(len(cancer.feature_names)),cancer.feature_names,rotation&#x3D;60,ha&#x3D;&#39;left&#39;)\nplt.xlabel(&quot;Feature&quot;)\nplt.ylabel(&quot;Principal components&quot;)\n\n特征提取的特征脸特征提取背后的思想是，可以找到一种数据表示，比给定的原始表示更适合于分析。\n特征提取很有用，它的一个很好的应用实例就是图像。图像由像素组成，通常存储为红绿蓝（RGB）强度。图像中的对象通常由上千个 像素组成，它们只有放在一起才有意义。\n我们将给出PCA对图像做特征提取的一个简单应用，即处理Wild数据集Labeled Faces(标记人脸)中的人脸图像。这一数据集包含从互联网上下载的名人脸部图像，它包含从21世纪初开始的政治家、歌手、演员和运动员的人脸图像。\n我们使用这些图像的灰度版本，并将它们按照比例缩小以加快处理速度。\nfrom sklearn.datasets import fetch_lfw_people\npeople &#x3D; fetch_lfw_people(min_faces_per_person&#x3D;20,resize&#x3D;0.7)\n\nimage_shape&#x3D;people.images[0].shape\nfix,axes&#x3D;plt.subplots(2,5,figsize&#x3D;(15,8),subplots_kw&#x3D;&#123;&#39;xticks&#39;:(),&#39;yticks&#39;:()&#125;)\nfor target,image,ax in zip(people.target,people.images,axes.ravel()):\n    ax.imshow(image)\n    ax.set_title(people.target_names[target])\n\nprint(&quot;people.image.shape:&#123;&#125;&quot;.format(people.image.shape))\nprint(&quot;Number of class :&#123;&#125;&quot;.format(len(people.target_names)))\n\n\n\n\n\n\n\n\n\npeople.image.shape:(1780, 87, 65)Number of class :23\n#计算每个目标出现的次数\ncounts&#x3D;np.bincount(people.target)\n#将次数与目标名称一起打印出来\nfor i,(count,name) in enumerate(zip(counts,people.target_names)):\n    print(&quot;&#123;0:25&#125;&#123;1:3&#125;&quot;.format(name,count),end&#x3D;&#39;  &#39;)\n    if (i+1)%3&#x3D;&#x3D;0:\n        print()\n    \n输出：\nAlejandro Toledo          39  Amelie Mauresmo           21  Ariel Sharon              77  \nAtal Bihari Vajpayee      24  Bill Clinton              29  Colin Powell             236  \nDonald Rumsfeld          121  George W Bush            530  Gerhard Schroeder        109  \nGloria Macapagal Arroyo   44  Hamid Karzai              22  Hans Blix                 39  \nIgor Ivanov               20  Junichiro Koizumi         60  Kofi Annan                32  \nLaura Bush                41  Lleyton Hewitt            41  Megawati Sukarnoputri     33  \nSerena Williams           38  Tiger Woods               23  Tom Daschle               25  \nTony Blair               144  Vicente Fox               32\n为了降低数据偏斜，我们对每个人最多只取50张图像\nmask &#x3D;np.zeros(people.target.shape,dtype&#x3D;np.bool)\nfor target in np.unique(people.target):\n    mask[np.where(people.target&#x3D;&#x3D;target)[0][:50]]&#x3D;1\nX_people&#x3D;people.data[mask]\ny_people&#x3D;people.target[mask]\n\n#将灰度值缩放到0到1之间，而不是在0到255之间\n#以得到更好的数据稳定性\nX_people&#x3D;X_people&#x2F;255\n使用单一最近邻分类器，寻找与要分类的人脸最为相似的人脸。这个分类器原则上可以处理每个类别只有一个训练器样例的情况。\nfrom sklearn.neighbors import KNeighborsClassifier\n#将数据分为训练集和测试集\nX_train,X_test,y_train,y_test&#x3D;train_test_split(X_people,y_people,stratify&#x3D;y_people,random_state&#x3D;0)\n#使用一个邻居构建KNeighborsClassifier\nknn &#x3D;KNeighborsClassifier(n_neighbors&#x3D;1)\nknn.fit(X_train,y_train)\nprint(&quot;Test set score of 1-nn:&#123;:.2f&#125;&quot;.format(knn.score(X_test,y_test)))\n\n\n\n\n\n\n\n\n\nTest set score of 1-nn:0.40\n我们得到的精度为40%我们希望，使用沿着主成分方向的距离可以提高精度。\n这里我们启用PCA的白化选项，它将主成分缩放到相同的尺度。变换后的结果与使用StandardScaler相同。再次使用数据，白化不仅对应于旋转数据，还对应于缩放数据 使其形状是圆形而不是椭圆。\nmglearn.plots.plot_pca_whitening()\n利用启用白化的PCA进行数据变换：我们对训练数据拟合PCA对象，并提取前100个主成分。然后对训练数据和测试数据进行变换：\npca&#x3D;PCA(n_components&#x3D;100,whiten&#x3D;True,random_state&#x3D;0).fit(X_train)\nX_train_pca&#x3D;pca.transform(X_train)\nX_test_pca&#x3D;pca.transform(X_test)\n\nprint(&quot;X_train_pca.shape:&#123;&#125;&quot;.format(X_train_pca.shape))\n\n\n\n\n\n\n\n\n\nX_train_pca.shape:(639, 100)\n新数据有100个特征，即前100个主成分。现在，可以用新表示使用单一最近邻分类器来将我们的图像分类。\nknn &#x3D;KNeighborsClassifier(n_neighbors&#x3D;1)\nknn.fit(X_train_pca,y_train)\nprint(&quot;Test set accuracy:&#123;:.2f&#125;&quot;.format(knn.score(X_test_pca,y_test)))\n\n\n\n\n\n\n\n\n\nTest set accuracy:0.43\n精度提升为43%\n对于图像数据，我们还可以很容易地将找到的主成分可视化。成分对应于输入空间里的方向。这里的输入空间是87像素x65像素的灰度图像，所以在这个空间中的方向也是87像素x65像素的灰度图像。\nimage_shape&#x3D;people.images[0].shape\nfix,axes&#x3D;plt.subplots(3,5,figsize&#x3D;(15,12),subplot_kw&#x3D;&#123;&#39;xticks&#39;:(),&#39;yticks&#39;:()&#125;)\nfor i,(component,ax) in enumerate(zip(pca.components_,axes.ravel())):\n    ax.imshow(component.reshape(image_shape),cmap&#x3D;&#39;viridis&#39;)\n    ax.set_title(&quot;&#123;&#125;.component&quot;.format((i+1)))\n人脸数据集前15个主成分的成分向量：\nmglearn.plots.plot_pca_faces(X_train,X_test,image_shape)\n这里我们分别用10个、50个、100个和500个成分对一些人脸进行重建并将其可视化：我们还可以尝试使用PCA的前两个主成分，将数据集中的所有人脸在散点图中可视化，其类别在图中给出。\nmglearn.discrete_scatter(X_train_pca[:,0],X_train_pca[:,1],y_train)\nplt.xlabel(&quot;First principal component&quot;)\nplt.ylabel(&quot;Second principal component&quot;)\n\n非负矩阵分解非负矩阵分解（NMF）是另一种无监督学习算法，其目的在于提取有用的特征。\n将NMF应用于模拟数据mglearn.plots.plot_nmf_illustration()\n\n将NMF应用于人脸图像首先，观察分量个数如何影响NMF重建数据的好坏：\nmglearn.plots.plot_nmf_faces(X_train,X_test,image_shape)\n\n\n\n\n\n\n\n\n\n未完待续\n假设我们对一个信号感兴趣，它是三个不同信号源合成的：\nS&#x3D;mglearn.datasets.make_signals()\nplt.figure(figsize&#x3D;(6,3))\nplt.plot(S,&#39;-&#39;)\nplt.xlabel(&quot;Time&quot;)\nplt.ylabel(&quot;Signal&quot;)\n原始信号源我们无法观测到原始信号，只能观察到三个信号的叠加混合。我们想要将混合信号分解为 原始分量。假设我们有许多种不同的方法来观测混合信号，每种方法都为我们提供了一系列测量结果。\n#将数据混合成100维的状态\nA&#x3D;np.random.RandomState(0).uniform(size&#x3D;(100,3))\nX&#x3D;np.dot(S,A.T)\nprint(&quot;Shape of measurements:&#123;&#125;&quot;.format(X.shape))\n\n\n\n\n\n\n\n\n\nShape of measurements:(2000, 100)\n我们可以使用NMF来还原这三个信号：\nfrom sklearn.decomposition import NMF\n\nnmf&#x3D;NMF(n_components&#x3D;3,random_state&#x3D;42)\nS_&#x3D;nmf.fit_transform(X)\nprint(&quot;Recovered signal shape:&#123;&#125;&quot;.format(S_.shape))\n\n\n\n\n\n\n\n\n\nRecovered signal shape:(2000, 3)\n为了对比，我们也应用了PCA\nfrom sklearn.decomposition import PCA\npca&#x3D;PCA(n_components&#x3D;3)\nH&#x3D;pca.fit_transform(X)\nmodels&#x3D;[X,S,S_,H]\nnames&#x3D;[&#39;Observations(first three measurements)&#39;,\n&#39;True sources&#39;,&#39;NMF recovered signals&#39;,&#39;PCA recovered signals&#39;]\nfig,axes&#x3D;plt.subplots(4,figsize&#x3D;(8,4),gridspec_kw&#x3D;&#123;&#39;hspace&#39;:.5&#125;,subplot_kw&#x3D;&#123;&#39;xticks&#39;:(),&#39;yticks&#39;:()&#125;)\nfor model,name,ax in zip(models,names,axes):\n    ax.set_title(name)\n    ax.plot(model[:,:3],&#39;-&#39;)\n\n用t-SNE进行流形学习有一类用于可视化的算法 叫做流形学习算法，它允许进行更复杂的映射，通常也可以给出更好的可视化。其中特别有用的一个就是t-SNE算法。\n我们将对scikit-learn包含的一个手写数字数据集应用 t-SNE流形学习算法。在这个数据集中，每个数据点都是0到9之间手写数字的一张8x8灰度图像。\nfrom sklearn.datasets import load_digits\ndigits &#x3D; load_digits()\nfig,axes&#x3D;plt.subplots(2,5,figsize&#x3D;(10,5),subplot_kw&#x3D;&#123;&#39;xticks&#39;:(),&#39;yticks&#39;:()&#125;)\nfor ax,img in zip(axes.ravel(),digits.images):\n    ax.imshow(img)\n我们用PCA将降到二维的数据可视化。我们对前两个主成分作图，并按类别对数据点着色：\n#构建一个PCA模型\npca&#x3D;PCA(n_components&#x3D;2)\npca.fit(digits.data)\n#将digits数据变换到前两个主成分的方向上\ndigits_pca&#x3D;pca.transform(digits.data)\ncolors&#x3D;[&quot;#476A2A&quot;,&quot;#7851B8&quot;,&quot;#BD3430&quot;,&quot;#4A2D4E&quot;,&quot;#8755255&quot;,&quot;#A83683&quot;,&quot;#4E655E&quot;,&quot;#853541&quot;,&quot;#3A3120&quot;,&quot;#535D8E&quot;]\nplt.figure(figsize&#x3D;(10,10))\nplt.xlim(digits_pca[:,0].min(),digits_pca[:,0].max())\nplt.ylim(digits_pca[:,1].min(),digits_pca[:,1].max())\nfor i in range(len(digits.data)):\n    plt.text(digits_pca[i,0],digits_pca[i,1],str(digits.target[i]),color&#x3D;colors[digits.target[i]],fontdict&#x3D;&#123;&#39;weight&#39;:&#39;bold&#39;,&#39;size&#39;:9&#125;)\nplt.xlabel(&quot;First principal component&quot;)\nplt.ylabel(&quot;Second principal component&quot;)\n利用前两个主成分绘制digits数据集的散点图我们将t-SNE应用于同一个数据集，并对结果进行比较。\nfrom sklearn.manifold import TSNE\ntsne&#x3D;TSNE(random_state&#x3D;42)\n#使用fit_transform而不是fit,因为TSNE没有transform方法\ndigits_tsne&#x3D;tsne.fit_transform(digits.data)\nplt.figure(figsize&#x3D;(10,10))\nplt.xlim(digits_tsne[:,0].min(),digits_tsne[:,0].max()+1)\nplt.ylim(digits_tsne[:,1].min(),digits_tsne[:,1].max()+1)\nfor i in range(len(digits.data)):\n    plt.text(digits_tsne[i,0],digits_tsne[i,1],str(digits.target[i]),color&#x3D;colors[digits.target[i]],fontdict&#x3D;&#123;&#39;weight&#39;:&#39;bold&#39;,&#39;size&#39;:9&#125;)\nplt.xlabel(&quot;t-SNE feature 0&quot;)\nplt.ylabel(&quot;t-SNE feature 1&quot;)\n\n聚类聚类是将数据集划分成组的任务，这些组叫做簇。其目标是划分区域，使得一个簇内的数据点**非常相似且不同于簇内的数据点非常不同**。与分类算法类似，聚类算法为每个数据点分配（或预测）一个数字，表示这个点属于哪个簇。\nk均值聚类k均值聚类是最简单也是最常用的聚类算法之一。它试图找到代表数据特定区域的簇中心。算法交替执行以下两个步骤：将每个数据点分配给最近的簇中心，然后将每个簇中心设置为所分配的所有数据点的平均值。如果簇的分配不再发生变化，那么算法结束。\nmglearn.plots.plot_kmeans_algorithm()\n\nmglearn.plots.plot_kmeans_boundaries()\nk均值算法找到的簇中心和簇边界\n","slug":"python机器学习3","date":"2022-11-03T13:17:49.000Z","categories_index":"","tags_index":"机器学习","author_index":"Algernon"},{"id":"2c7f1d22424dc4a90281ac827a7fabc2","title":"【暑期培训C语言题库】","content":"MSC-C语言题库第一讲格式化输入输出老爹盒子的体积\n\n\n\n\n\n\n\n\n老爹的侄子是一名考古学家，这一天他带回了一个奇妙的小玩意儿，想让见多识广的老爹掌掌眼。但即使是老爹也需要时间研究，于是老爹想定制一个精美的小盒子装下这个看似不同寻常的宝物，你可以设计一个程序帮助老爹确定这个 盒子的体积吗？\n还有一个盒子！\n\n\n\n\n\n\n\n\n老爹最近很烦！上一个古董还没有研究完，这个不省心的侄子又给他带了好几个小玩意儿，要知道，带有魔力的盒子是很不好定制的，不同的古董也有不同的参数，你能否改进程序，可以根据老爹的要求来求出适合的盒子体积呢？\n圈圈圆圆圈圈\n给出圆的半径，求圆的直径、周长和面积。输入圆的半径实数 r，输出圆的直径、周长、面积，每个数保留小数点后 4 位。圆周率取值为 3.14159\n&#x2F;* Author:Bio Sheep\n   website:https:&#x2F;&#x2F;algernon98.github.io&#x2F;  &#x2F;&#x2F;电子羊的个人主页 \n*&#x2F;\n\n#include &lt;stdio.h&gt;\nint main()&#123;\nint r;\nfloat d,c,s;\nfloat pi &#x3D;3.14159;\nscanf(&quot;%d&quot;,&amp;r);\nd&#x3D;2*r;\nc&#x3D;pi*d;\ns&#x3D;pi*r*r;\nprintf(&quot;d&#x3D;%.4f\\n&quot;,d);\nprintf(&quot;c&#x3D;%.4f\\n&quot;,c);\nprintf(&quot;s&#x3D;%.4f\\n&quot;,s);\n\nreturn 0;\n&#125;\n四则运算本题要求编写程序，计算2个正整数的和、差、积、商并输出。题目保证输入和输出全部在整型范围内。\n输入格式:\n输入在一行中给出2个正整数A和B。\n输出格式:\n在4行中按照格式“A 运算符 B = 结果”顺序输出和、差、积、商。\n输入样例:\n3 2\n输出样例：\n3 + 2 &#x3D; 5\n\n3 - 2 &#x3D; 1\n\n3 * 2 &#x3D; 6\n\n3 &#x2F; 2 &#x3D; 1\n代码：#include&lt;stdio.h&gt;\nint main()\n&#123;\n  int m,n;\n  scanf(&quot;%d %d\\n&quot;,&amp;m,&amp;n);\n  if(n!&#x3D;0)&#123;\n  printf(&quot;%d + %d &#x3D; %d\\n&quot;,m,n,m+n);\n  printf(&quot;%d - %d &#x3D; %d\\n&quot;,m,n,m-n);\n  printf(&quot;%d * %d &#x3D; %d\\n&quot;,m,n,m*n);\n  printf(&quot;%d &#x2F; %d &#x3D; %d\\n&quot;,m,n,m&#x2F;n);\n    \n  &#125;\n  return 0;\n&#125;\n打印小星星（青春版）\n\n\n\n\n\n\n\n\n编写一个程序，使用printf在屏幕上显示下面的图形\n              *\n            *\n          *\n*       *\n  *   *\n    *\n            \n\n表达式两位数逆序打印\n\n\n\n\n\n\n\n\n给出一个两位整数（1~99），打印出其逆序的数字。例如：19——&gt;91\n#include &lt;stdio.h&gt;\nint main()&#123;\nint a,b,num,sum;\nscanf(&quot;%d&quot;,&amp;num);\na&#x3D;num&#x2F;10;\nb&#x3D;num-a*10;\nsum&#x3D;b*10+a;\n\nprintf(&quot;%d&quot;,sum);\n\n\nreturn 0;\n&#125;\n国际金融学\n如图，是正在研究生院《国际金融学》课堂上摸鱼的电子羊。然而，老师的雨课堂会随机抽取一位幸运的小朋友来回答问题，电子羊不幸中招。“如果老师有一千英镑，想先兑换港币，再换成美元，请问相比于直接换成美元，是赚了还是亏了呢？”截至敲下这一行字，英镑兑港币的汇率为1 GBP = 9.54 HKD，港币兑美元汇率为1HKD=0.1276USD，1GBP=1.2119USD\n&#x2F;* Author:Bio Sheep\n   website:https:&#x2F;&#x2F;algernon98.github.io&#x2F;  &#x2F;&#x2F;电子羊的个人主页 \n*&#x2F;\n\n#include &lt;stdio.h&gt;\nint main()&#123;\nfloat gbp&#x3D; 1000,hkd,usd;\nfloat s;\nhkd&#x3D;1000*9.54;\nusd&#x3D;hkd*0.1276;\ns&#x3D;usd-1000*1.2119;\nprintf(&quot;%.4f&quot;,s);\n\n\nreturn 0;\n&#125;\nif语句交换两个数if(a&lt;b)&#123;\nt&#x3D;a;\na&#x3D;b;\nb&#x3D;t;\n\n&#125;\nMAGI的自我修养\n\n\n\n\n\n\n\n\n\n在EVA中，由赤木直子博士开发的三台超级电脑被命名为 “三贤人超级计算机系统”（MAGI System）简称“三贤人”（MAGI）。MAGI相当于NERV的大脑，由三大系统组成：MELCHIOR-1，BALTHASAR-2，CASPER-3\n\n该思维模式乃是移植自赤木直子博士。MELCHIOR-1、BALTHASAR-2与CASPER-3分别植入了赤木博士身为科学家、母亲与女人的人格。最后的决策出自于这三大系统的商议，一般问题少数服从多数，特殊问题（例如：基地自爆）采用一票否决制。\n当第十一使徒入侵NERV总部时，只有三台电脑同时达成“是”的命令才会执行程序，试写出执行程序的逻辑关系\nint a,b,c; &#x2F;&#x2F;只有0和1两种情况\nif(a&gt;0 &amp;&amp; b&gt;0  &amp;&amp;c&gt;0)&#123;\nprintf(&quot;YES&quot;);\n&#125;\nelse\n  printf(&quot;NO&quot;)\n是否是三角形写出一段程序，根据输入的三个正整数判断能否构成三角形\nint a,b,c; \nif(a+b&gt;c &amp;&amp; a+c&gt;b  &amp;&amp;b+c&gt;a)&#123;\nprintf(&quot;YES&quot;);\n&#125;\nelse\n  printf(&quot;NO&quot;);\n&#x2F;&#x2F;如果去掉正整数条件呢？\nint a,b,c;\nif(a&gt;0 &amp;&amp; b&gt;0  &amp;&amp;c&gt;0)&#123;\n    if(a+b&gt;c &amp;&amp; a+c&gt;b  &amp;&amp;b+c&gt;a)&#123;\n       printf(&quot;YES&quot;);\n    &#125;\n    else\n    printf(&quot;NO&quot;);\n&#125;\nelse\n  printf(&quot;NO&quot;);\n阶梯电费\n\n\n\n\n\n\n\n\n\n第三新东京市按照阶梯电价计算电费，第一档是200度及以下的0.588/度。第二档是200度以上-450度的部分0.638/度，第三档是450度以上0.888/度。根据输入的上月电表度数、本月电表度数来计算电费。由于第二次冲击，北半球全年为夏，故不考虑月份的问题。输入居民的上月和本月的电表度数，计算用电度数和电费。\n让我们回到三次元：\n&gt;\n\n\n\n\n\n\n\n\n\n长沙市按照阶梯电价计算电费，第一档是200度及以下的0.588/度。第二，三档分季节，春秋季：第二档是200度以上-350度的0.638/度，第三档是350度以上0.888/度。冬夏季：第二档是200度以上-450度的0.638/度，第三档是450度以上0.888/度。根据输入的上月电表度数、本月电表度数和月份来计算电费。3-5月份为春季，6-8月份为夏季，9-11为秋季，12-2月份为冬季。输入居民的上月和本月的电表度数，计算用电度数和电费。\n测试输入：上月电表读数200本月电表读数800月份7\n预期输出：用电度数600.0电费410.30\n测试输入：上月电表读数150本月电表读数450月份4\n预期输出：用电度数300.0电费181.40\n维多利亚家政的佣金以（过于）宽广的业务范围和高标准的服务质量为客户所熟知。\n\n\n\n\n\n\n\n\n\n维多利亚家政公司按小时计费。新艾利都规定每周5个工作日，每天工作8小时。工作日超时工作工资为正常工资的1.5倍。休息日工资，4小时内为正常工资的2倍，超过4小时的部分为正常工资的3倍。输入每小时工资，员工每周的工作日工作小时数和休息日工作小时数，计算其该周工资例如每小时工资30元。工作日50小时，休息日8小时，其工资为2250.00元4030+10301.5+4302+430*3=2250\n输入每小时工资，员工每周的工作日工作小时数和休息日工作小时数，计算其该周工资。\n\n\n\n\n\n\n\n\n\n测试输入：工资标准30工作日工作时间50休息日工作时间8预期输出：工资2250.00\n测试输入：工资标准20工作日工作时间80休息日工作时间40预期输出： 工资4320.00\n筝筝纸鸢众所周知，下雨天筝筝纸鸢第二杯半价。一杯素颜锡兰18元，一杯筝筝纸鸢16元，如果茶颜仅提供这两种产品，请设计一个小程序，根据天气和点餐数量得出应该支付的价格。\n\n\n\n\n\n\n\n\n\n天气：下雨——1；不下雨——0.素颜锡兰杯数：筝筝纸鸢杯数：\n输入：1 1 1输出：34\n输入：1 1 1输出：42\n程序设计的绩点\n弗兰大学的绩点换算如下：以90分为满绩点4.0，60分绩点2.0，低于60分无成绩。如果仅考虑A，B,C,D与不及格，输入一个同学的程序设计分数，试编写程序得出该同学对应的等级。\nswitch语句邦布真可爱！\n\n\n\n\n\n\n\n\n邦布最初诞生的目的是帮助新艾利都居民进行空洞灾害的避难行动，当新艾利都生活区域内出现空洞灾害时，每一台邦布都会第一时间从公用网络上接收到灾情与避难指引，他们会帮助自己身边的人群规避灾害。现如今，因更成熟的技术和多样的需求，邦布已经从单纯的避灾用小型辅助智能机械变为了更为综合泛用的智能个体，甚至有专业版的邦布会与调查员一起深入空洞中进行各项作业\n\n新艾利都录像店“Random Play”有着三只可爱的邦布，编号依次为1，2，3，分别充当“空洞探索者”、“录像店店员”以及“看家”的作用。对于人工智能Fairy(仙灵)而言，只要输入邦布的编号就可以找到分担相应功能的邦布，对于小有名气的绳匠“法厄同”来说，设计一段这样的程序也不在话下吧。\n\n\n\n\n\n\n\n\n\n使用switch语句，检测输入的指令数字，0为关闭系统，1~3为召唤对应邦布，其他的为default。\n第二讲while语句高斯数列求和斐波那契for语句打印小星星","slug":"C语言题库","date":"2022-11-02T13:50:49.000Z","categories_index":"编程语言","tags_index":"C语言","author_index":"Algernon"}]