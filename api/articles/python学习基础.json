{"title":"python学习基础","uid":"f7d5b366240b7b48d4ee1a1a176f024a","slug":"python学习基础","date":"2022-11-03T14:02:49.000Z","updated":"2022-11-03T14:02:35.498Z","comments":true,"path":"api/articles/python学习基础.json","keywords":null,"cover":[],"content":"<h1 id=\"《计算与人工智能概论》\"><a href=\"#《计算与人工智能概论》\" class=\"headerlink\" title=\"《计算与人工智能概论》\"></a>《计算与人工智能概论》</h1><h2 id=\"字符串和列表基础\"><a href=\"#字符串和列表基础\" class=\"headerlink\" title=\"字符串和列表基础\"></a>字符串和列表基础</h2><p>\\t 制表符<br>字符串与数字相乘：字符串重复几次<br>3<em>‘un’<br>字符串和字符串相加：字符串连接起来<br>‘un’+’ium’<br><em>*字符串索引</em></em><br>下标，第一个字符索引是0</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>word = ‘Python’<br>word[0]<br>‘P’<br>word[5]<br>‘n’</p></blockquote>\n<p>索引也可以用负数，这种会从右边开始数：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>word[-1]<br>‘n’<br>word[-2]<br>‘o’</p></blockquote>\n<p><strong>字符串切片</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>word[0:2] #左闭右开<br>‘Py’</p></blockquote>\n<p>切片的索引有默认值；省略开始索引时的默认值为0，省略结束索引时默认为到字符串的结束。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>word[:2]<br>word[-2:]</p></blockquote>\n<p>切片步长默认设置为1</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>word[::2]#步长设置为2</p></blockquote>\n<p>‘’’…’’’三引号可以跨行输入</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>print(‘’’东边儿滴太阳内个亮呦，\\<br>西边儿下的那个雨，\\<br>不知道妹妹那个心上人哟，\\<br>哪时候归来呦。’’’)</p></blockquote>\n<p><strong>列表</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>a=eval(input())<br>输入：[1,4,9,16,25]<br>a = [1,4,9,16,25]</p></blockquote>\n<p>列表也支持索引和切片<br>最右边是-1<br>切片也可以赋值</p>\n<p>len函数 len()可以获得列表的长度</p>\n<h2 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h2><h3 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">for i in range(10):\n   print(i)\n   i&#x3D;5</code></pre>\n<p><strong>break语句</strong><br>break语句，用于跳出最近的for或while循环</p>\n<p><strong>continue语句</strong><br>continue语句表示跳过当前的这次循环，直接开始下一次循环</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">for num in range(2,10):\n   if num%2 &#x3D;&#x3D; 0:\n      print(&quot;Found an even number&quot;,num)\n      continue\n   print(&quot;Found an odd number&quot;,num)</code></pre>\n<h2 id=\"字符串和列表进阶\"><a href=\"#字符串和列表进阶\" class=\"headerlink\" title=\"字符串和列表进阶\"></a>字符串和列表进阶</h2><h3 id=\"列表进阶\"><a href=\"#列表进阶\" class=\"headerlink\" title=\"列表进阶\"></a>列表进阶</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>list.append(x)</strong>:在列表的末尾添加一个元素。相当于a[len(a):]=[x]</p>\n<p><strong>list.insert(i,x)</strong>:在给定的位置插入一个元素。第一个参数是要插入的元素的索引，所以a.insert(0,x)插入列表头部，a.insert(len(a),x)等同于a.append(x)</p>\n<p><strong>list.remove(x)</strong>:移除列表中第一个值为x的元素。如果没有这样的元素，则抛出ValueError异常。</p>\n<p><strong>list.pop([i])</strong>:删除列表中给定位置的元素并返回它。如果没有给定位置，a.pop()将会删除并返回列表中的最后一个元素。</p>\n<p><strong>list.clear()</strong><br>删除列表中所有的元素</p>\n<p><strong>list.index(x[,start[,end]])</strong><br>返回列表中第一个值为x的元素的从零开始的索引。可选参数start和end是切片符号，用于将搜索限制为列表的特定子序列。</p>\n<p><strong>list.count(x)</strong><br>返回元素x在列表中出现的次数。</p>\n<p><strong>list.sort(key=None,reverse=False)</strong><br>对列表中的元素进行排序。</p>\n<p><strong>list.reverse()</strong><br>反转列表中的元素</p>\n<p><strong>list.copy()</strong><br>反转列表的一个拷贝。相当于a[:]</p></blockquote>\n<h3 id=\"字符串进阶\"><a href=\"#字符串进阶\" class=\"headerlink\" title=\"字符串进阶\"></a>字符串进阶</h3><p>字符串实现了所有一般序列的操作，还额外提供了以下列出的一些附加方法。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>str.capitalize()</strong><br>返回原字符串的副本，其首个字符大写，其余为小写。</p>\n<p><strong>str.count(sub[,start,end]])</strong><br>返回子字符串sub在[start,end]范围内非重叠出现的次数。可选参数start与end会被解读为切片表示法。</p>\n<p>str.find(sub[,start[,end]])<br>返回子字符串sub在s[start:end]切片内被找到的最小索引。可选参数start与end会被解读为切片表示法。如果sub未被找到则返回-1</p>\n<p>str.format(<em>args,*</em>kwargs)<br>执行字符串格式化操作。</p></blockquote>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">\n&gt;&gt;&gt;&quot;The sum of 1 +2 is &#123;0&#125;&quot;.format(1+2)\n&#39;The sum of 1+2 is 3&#39;</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>str.replace(old,new[,count])<br>返回字符串的副本，其中出现的所有字符串old都将被替换为new。如果给出了可选参数count，则只替换前count次出现。</p>\n<p>str.isalnum()<br>如果字符串中所有字符都是字母或数字，则返回True，否则返回False。<br>str.isalpha()<br>如果字符串中所有字符都是字母，则返回True，否则返回False。<br>str.isdigit()<br>如果字符串中所有字符都是数字，则返回True，否则返回False。<br>str.isspace()<br>如果字符串中只有空白字符（空格、制表符、换行符等）则返回True，否则返回False。</p></blockquote>\n<h3 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h3><p>虽然元组看起来和列表很像，但元组是immutable（不可变的），其序列通常包含不同种类的元素。列表是mutable（可变的），并且列表中的元素一般是同种类型的。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">t&#x3D;(12345,54321,&#39;hello!&#39;)</code></pre>\n<h3 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h3><p>python也包含有集合类型。集合是由不重复元素组成的无序的集。它的基本用法包括成员检测和消除重复元素。集合对象也支持像并集、交集等运算。不支持索引和切片。</p>\n<h2 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h2><h3 id=\"字典的创建\"><a href=\"#字典的创建\" class=\"headerlink\" title=\"字典的创建\"></a>字典的创建</h3><p>与以连续整数为索引的序列不同，字典是以<strong>关键字</strong>为索引的，关键字可以是任意不可变类型，通常是字符串和数字。<br>理解字典的最好方式，就是将它看作是一个键：值   对的集合，键必须是唯一的（在一个字典中).</p>\n<p>一对花括号可以创建一个空字典：{}<br>另一种初始化方式是在一对花括号里放置一些以逗号分隔的键值对，而这也是字典输出的方式。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">tel &#x3D; &#123;&#39;jack&#39;:4098,&#39;sape&#39;:4139&#125;</code></pre>\n<p>通过fromkeys()方法创建字典，初始化操作字典，设置默认值</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">dictname &#x3D; dict.fromkeys(iterable,value&#x3D;None)\n&gt;&gt;&gt;knowledge&#x3D;&#123;&#39;语文&#39;,&#39;数学&#39;,&#39;英语&#39;&#125; #集合\n&gt;&gt;&gt;scores&#x3D;dict.fromkeys(knowledge,60)\n&gt;&gt;&gt;print(scores)\n&#123;&#39;英语&#39;:60,&#39;数学&#39;:60,&#39;语文&#39;:60,&#125;</code></pre>\n<p>也可以用del来删除一个键值对</p>\n<p>对一个字典执行list(d)将返回包含该字典中所有键的列表，按插入次序排列（如需其他排序，则要使用sorted(d))。要检查字典中是否存在一个特定键，可使用in关键字。</p>\n<p>dict（）函数可以直接从键值对序列里创建字典。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>list(d):返回字典d中使用的所有键的列表。</p>\n<p>len(d):返回字典d中的项数。</p>\n<p>d[key]:返回d中以key为键的项。</p>\n<p>d[key] = value：将d[key]设为value</p>\n<p>del d[key]:将d[key]从d中移除。</p>\n<p>key in d :如果d中存在键key则返回True,否则返回False</p>\n<p>key not in d :等价于not key in d</p>\n<p>d.clear():移除字典中的所有元素。</p>\n<p>d.copy():返回原字典的拷贝。</p>\n<p>d.get(key[,default]):如果key存在于字典中则返回key的值，否则返回default</p>\n<p>d.items():返回由字典项((键，值)对)组成的一个新视图（类似列表，里面的元素是键值元组）。</p>\n<p>d.keys():返回由<strong>字典键</strong>组成的一个新视图（类似列表）。</p>\n<p>d.pop(key[,default]):如果 key存在于字典中则将其移除并返回其值，否则返回default。</p>\n<p>d.popitem():从字典中移除并返回一个（键，值）对。</p>\n<p>d.values():返回由<strong>字典值</strong>组成的一个新视图（类似列表）</p>\n<h3 id=\"循环的技巧\"><a href=\"#循环的技巧\" class=\"headerlink\" title=\"循环的技巧\"></a>循环的技巧</h3><p>当在序列中循环时，用enumerate()函数可以将索引位置和其对应的值同时取出。</p></blockquote>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">for i,v in enumerate([&#39;tic&#39;,&#39;tac&#39;,&#39;toe&#39;]):\n    print(i,v)</code></pre>\n<p>当同时在两个或更多序列中循环时 ，可以用zip()函数将其内元素一一匹配。</p>\n<p>当在字典中循环时，用items()方法可将关键字和对应的值同时取出</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">knights&#x3D;&#123;&#39;gallahad&#39;:&#39;the pure&#39;,&#39;robin&#39;:&#39;the brave&#39;&#125;\nfor k,v in knights.items():\n    print(k,v)</code></pre>\n<p>如果要按某个指定顺序循环一个序列，可以用sorted()函数，它可以在不改动 原序列的基础上返回一个新的排好序的序列</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">basket &#x3D; [&#39;apple&#39;,&#39;orange&#39;,&#39;apple&#39;,&#39;pear&#39;,&#39;orange&#39;,&#39;banana&#39;]\nfor  i in sorted(basket):\n    print(i)</code></pre>\n<p>对一个序列使用set()将去除重复的元素。对一个序列使用sorted()加set()则是按排序后顺序循环遍历序列中唯一一种元素的一种惯用方式。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">basket &#x3D; [&#39;apple&#39;,&#39;orange&#39;,&#39;apple&#39;,&#39;pear&#39;,&#39;orange&#39;,&#39;banana&#39;]\nfor  f in sorted(set(basket)):\n    print(f)</code></pre>\n<h3 id=\"数据类型小结\"><a href=\"#数据类型小结\" class=\"headerlink\" title=\"数据类型小结\"></a>数据类型小结</h3><ul>\n<li>Iterable（可迭代类型）：可用于for循环头，常见的由列表、字符串、元组、字典、集合。</li>\n<li>Sequence（序列类型）：序列是可迭代的，且是可以用整数下标访问的有序排列的一组数，常见的有列表、字符串、元组。其中列表是可变序列(mutable)，字符串和元组的不可变序列（immutable）。</li>\n</ul>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>关键字def引入一个函数定义。它必须后跟函数名称和带括号的形式参数列表。构成函数体的语句从下一行开始，并且必须缩进。<br>即使没有return语句的函数也会返回一个值None</p>\n<h3 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">&lt;函数名&gt;&#x3D;lamda&lt;参数列表&gt;:&lt;代表式&gt;\ndef&lt;函数名&gt;(&lt;参数列表&gt;):\n    return&lt;表达式&gt;</code></pre>\n<p>lambda函数用于定义简单的、能够在一行内表示的函数，返回一个函数值</p>\n<h3 id=\"常用内置函数\"><a href=\"#常用内置函数\" class=\"headerlink\" title=\"常用内置函数\"></a>常用内置函数</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>abs(x):返回一个函数的绝对值。</p>\n<p>chr(i):返回 Unicode码位为整数i的字符的字符串格式。</p>\n<p>ord(c）：对表示单个Unicode字符的字符串，返回代表它Unicode码点的整数。</p>\n<p><strong>字符串之间可以直接比较。</strong><br>str(object=’’):将object转换为str类型</p>\n<p>len(s):返回对象的长度（元素个数）。实参可以是序列（如string，tuple,list或range等）或集合（如dictionary,set等）。</p>\n<p>list([iterable]):返回一个列表</p>\n<p>sum(iterable,/,start=0):从start开始对iterable的项求和并返回总和。</p>\n<p>pow(base,exp[,mod]):返回base的exp次幂</p></blockquote>\n<h2 id=\"算法设计\"><a href=\"#算法设计\" class=\"headerlink\" title=\"算法设计\"></a>算法设计</h2><p><strong>常见的时间复杂度</strong><br>| 执行次数函数举例    | 时间复杂度/说明                                 |<br>| —————————- | ———————————————————————- |<br>| 217                 | $o$(1),常数                                     |<br>| 4log$n$+12          | $o$(log$n$),对数，log$n$是$log_2n$的简写        |<br>| 3n+21               | $o$($n$),线性                                   |<br>| 2$n$+ 3$n$log$n$+15 | $o$($n$log$n$),对数线性，log$n$是$log_2n$的简写 |<br>| $6n^2+5n+19$        | $o$($n^2$),平方                                 |<br>| $2n^3+3n^2+5n+8$    | $o$($n^3$),立方                                 |<br>| $7$x$3^n$           | $o$($2^n$),指数                                 |</p>\n<h3 id=\"问题求解计算思维方法\"><a href=\"#问题求解计算思维方法\" class=\"headerlink\" title=\"问题求解计算思维方法\"></a>问题求解计算思维方法</h3><h4 id=\"迭代法\"><a href=\"#迭代法\" class=\"headerlink\" title=\"迭代法\"></a>迭代法</h4><p>迭代法是从某个值开始，不断地利用旧值推导出新值的方法。</p>\n<h4 id=\"穷举法\"><a href=\"#穷举法\" class=\"headerlink\" title=\"穷举法\"></a>穷举法</h4><p>穷举法也称暴力法，如果在求解问题时，无法找到有效解决问题的方法，可以对所有可能的解进行逐一验证，将符合要求的解找出来。</p>\n<h4 id=\"二分法\"><a href=\"#二分法\" class=\"headerlink\" title=\"二分法\"></a>二分法</h4><p>二分法通常用来对搜索算法进行优化。</p>\n<h4 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h4><p>递归是函数调用自身的操作。<br>递归通常用来将复杂问题一层层地分解为更小的、形式相同的子问题，这种分解会一直进行下去，直到子问题可以直接求解。</p>\n<h4 id=\"深度优先遍历\"><a href=\"#深度优先遍历\" class=\"headerlink\" title=\"深度优先遍历\"></a>深度优先遍历</h4><p>深度优先遍历（DFS）是一种用于在树形结构或网状结构中进行搜索的有效算法。<br><strong>树</strong>是由结点和边组成的不存在任何环的一种数据结构。<br>一棵树可以被看成由根结点和子树构成，因此，树具有天然的递归结构。<br>没有结点的树被称为空树。</p>\n<h4 id=\"梯度下降法\"><a href=\"#梯度下降法\" class=\"headerlink\" title=\"梯度下降法\"></a>梯度下降法</h4><p><strong>用梯度下降法求一元函数的最值</strong><br>一元函数的最值一般通过找函数导数为0的点来求得，即$f^{‘}(x)=0$,然而在实际问题中，方程$f^{‘}(x)=0$通常不容易求解。梯度下降法不是直接求方程的解，而是通过逐步改变$x$的值，从而找出函数$f(x)$的最小值。</p>\n<p><strong>梯度下降法的基本思想</strong>就是 ：<br>为了找到函数的最小值处，只要让函数值朝着梯度方向的反方向（下降方向）走一小步，再求出此处的梯度方向，继续往梯度方向的反方向走一小步，如此往复，就能找到函数的最小值。</p>\n<h2 id=\"智能感知\"><a href=\"#智能感知\" class=\"headerlink\" title=\"智能感知\"></a>智能感知</h2><h3 id=\"自然语言处理\"><a href=\"#自然语言处理\" class=\"headerlink\" title=\"自然语言处理\"></a>自然语言处理</h3><p>依照人们所设定的自然语言语法规则将输入的语句分解为句法结构，再根据一套语义规则把句法结构映射到语义符号结构。<br>在这套自然语言处理系统中，规则集合是人们预先设计给机器的，是先验的知识。<br>自然语言处理的任务：</p>\n<ul>\n<li>自然语言理解（NLU)</li>\n<li>自然语言生成（NLG）</li>\n</ul>\n<h3 id=\"机器视觉\"><a href=\"#机器视觉\" class=\"headerlink\" title=\"机器视觉\"></a>机器视觉</h3><h4 id=\"神经网络\"><a href=\"#神经网络\" class=\"headerlink\" title=\"神经网络\"></a>神经网络</h4><p> 神经网络的一个典型应用是解决分类问题。</p>\n<p> 在分类问题中，神经网络一般包含输入层、隐含层和输出层，其中输入层神经元数量由输入向量的维数决定，输出层神经元数量由需要分类的类别数量决定。</p>\n<p>输入层不对数据进行处理，仅将输入数据送入下一层进行运算。</p>\n<p>在输入层和输出层中间存在若干隐含层，这些隐含层主要用于对数据进行计算和处理。</p>\n<p><strong>前馈神经网络</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d7262ad7e30e4cab3e9e3a8089f8a13b.png#pic_center\" alt=\"在这里插入图片描述\"><br>神经网络由大量彼此连接的神经元组成，神经网络的类型由神经元的连接方式决定。<br>一个常用的神经网络是<strong>多层前馈神经网络</strong>，其中每一层的神经元都与下一层完全互联，并且既没有同层连接也没有跨层连接。<br>输入层接受外部输入，隐含层和输出层的神经元处理信号，最后输出层的神经元输出结果。<br>在学习过程中，神经网络根据训练数据调整神经元之间的连接权重和每个功能神经元的阈值。</p>\n<p>神经网络的工作过程包括学习期和工作期。<br>在学习期，每个处理单元通过学习样本修改连接权重。在工作期，每个连接权重是固定的，处理单元的状态会发生变化，最后会达到稳定状态。</p>\n<h5 id=\"卷积神经网络\"><a href=\"#卷积神经网络\" class=\"headerlink\" title=\"卷积神经网络\"></a>卷积神经网络</h5><p><img src=\"https://img-blog.csdnimg.cn/267534742d124a65b0217c4fca335472.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQWxnZXJub245OA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\"><br>一个传播较为广泛的卷积神经网络是LeNet-5.<br>主要包括：</p>\n<ol>\n<li>输入层（INPUT层）</li>\n<li>卷积层（C1层，C3层和C5层）</li>\n<li>池化层（S2层和S4层）</li>\n<li>全连接层（F6层）</li>\n<li>输出层（OUTPUT层）</li>\n</ol>\n<p><strong>输入层</strong>可以处理多维数据。卷积神经网络广泛地应用于机器视觉领域，在该领域中的网络的输入数据一般是平面上的像素点所对应的RGB通道，因此一般是三维的。卷积神经网络的学习使用梯度下降法，因此需要对输入数据进行标准化处理。具体而言，对于分布在[0,255]的像素值，需要进行归一化处理，以提升网络的学习效率。</p>\n<p><strong>卷积层</strong>主要对输入数据进行特征提取。一个卷积层包含多个卷积核，每个卷积核都是一个特征提取器。与前馈神经网络中的神经元类似，组成卷积核的每个元素都对应一个权重和一个偏差量。一个卷积核对图像是有一定的卷积范围的，这一范围叫做<em>感受野</em>（<del>私以为这个翻译并不妥当</del> ）。如果要在不同的尺度上进行特征提取，则需要增加卷积层的数量。</p>\n<p><strong>池化层</strong>主要对卷积层输出的特征图进行特征选择和信息过滤。基本做法是用一个值代替图像的某个区域，这个值可以是最大值（最大池化），也可以是平均值（均值池化）。池化不仅可以降低图像尺寸，在一定程度上也可以使输出值对图像的小幅度平移和旋转不敏感。</p>\n<p><strong>全连接层</strong>主要对之前卷积层和池化层提取到的特征进行非线性组合，从而得到输出信号，它相当于传统前馈神经网络中的隐含层。全连接层的主要任务不是提取特征，而是利用已有的高阶特征达成学习目标。</p>\n<p><strong>输出层</strong>：经过前面一系列的处理后，信号传入输出层，再由逻辑函数或归一化指数函数进行处理，最终输出分类标签，如物体的大小、分类、或每个像素的分类结果。</p>\n<h5 id=\"模式识别\"><a href=\"#模式识别\" class=\"headerlink\" title=\"模式识别\"></a>模式识别</h5><p>对个别事物或现象的识别过程可以被称为模式识别。<br>模式识别系统通常由数据获取、预处理、特征提取、分类器、分类决策5个基本单元组成。</p>\n<p><strong>特征提取</strong><br>常见的特征选择方法有过滤式选择、包裹式选择和嵌入式选择等。</p>\n<p><strong>过滤式选择</strong>是先按照某种规则对数据集进行特征选择，再训练分类器。常见的过滤式选择方法有方差选择法、相关系数法、卡方检验法等。方差选择法认为取值较少的特征对分类没有帮助，它会计算各个特征的方差，根据预先设定的阈值或指定的数量来选取特征。</p>\n<p><strong>包裹式选择</strong>根据学习器的性能来对特征子集进行选择。</p>\n<p><strong>嵌入式选择</strong>结合了以上两者的优点，它将特征选择技术嵌入学习算法，在分类器训练过程中会自动进行特征选择。</p>\n<h2 id=\"机器学习\"><a href=\"#机器学习\" class=\"headerlink\" title=\"机器学习\"></a>机器学习</h2><h3 id=\"监督学习\"><a href=\"#监督学习\" class=\"headerlink\" title=\"监督学习\"></a>监督学习</h3><p>监督学习是指机器的学习系统通过学习信息之间的组合关系来对来对从未见过的数据进行有效的预测。<br>回归和分类是监督学习领域中的两个主要任务。</p>\n<h4 id=\"回归\"><a href=\"#回归\" class=\"headerlink\" title=\"回归\"></a>回归</h4><p>回归是用模型来拟合一组正确的训练数据，以便对未知的一些连续变量进行预测。</p>\n<h4 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h4><p>分类和回归的主要区别在于：分类用于预测一个离散值或者类别，而不是一系列连续值属性。</p>\n<h3 id=\"无监督学习\"><a href=\"#无监督学习\" class=\"headerlink\" title=\"无监督学习\"></a>无监督学习</h3><p>在无监督学习中，模型只能获取大量的无标记数据，他们需要利用这些无标记数据来进行学习，从而找到这些数据中潜在的组织结构。</p>\n<p>无监督学习的主要任务可以分为聚类和降维。</p>\n<h3 id=\"半监督学习\"><a href=\"#半监督学习\" class=\"headerlink\" title=\"半监督学习\"></a>半监督学习</h3><p>同时利用少量标记数据和大量未标记数据进行学习。</p>\n<h2 id=\"智能决策\"><a href=\"#智能决策\" class=\"headerlink\" title=\"智能决策\"></a>智能决策</h2><h3 id=\"基于搜索的最优路径决策\"><a href=\"#基于搜索的最优路径决策\" class=\"headerlink\" title=\"基于搜索的最优路径决策\"></a>基于搜索的最优路径决策</h3><p>在人工智能领域中，存在着一些非结构化的问题，这类问题通常没有特定的决策模型或者可求解的算法，只能在解空间中通过一步步的试探和摸索来确定可行解。<br>这样的过程被称为“搜索”，而通过搜索进行求解的问题则被称为“搜索问题”。</p>\n<p>著名的八皇后问题便是一个典型的搜索问题。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在一个8x8的棋盘上摆放8个棋子，使这8个棋子中的任意2个均不处于棋盘中的同一行、同一列或同一斜线上，一共有多少种可行的摆法？</p></blockquote>\n<p><strong>典型的搜索策略</strong><br><img src=\"https://img-blog.csdnimg.cn/img_convert/9e0f53f93d21363e7118f9ff04119529.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"深度优先搜索（DFS\"><a href=\"#深度优先搜索（DFS\" class=\"headerlink\" title=\"深度优先搜索（DFS)\"></a>深度优先搜索（DFS)</h4><p>深度优先搜索是一种一直向下的盲目搜索方法，搜索从根结点出发，沿一定的方向进行扩展。当无法继续扩展时，回溯到浅层节点，在另一条路径上重新开始扩展。其中，每个结点表示一个状态，子结点后的所有结点被称为该结点的后裔；与该结点位于同一层级的结点被称为兄弟结点。</p>\n<h4 id=\"宽度优先搜索（BFS\"><a href=\"#宽度优先搜索（BFS\" class=\"headerlink\" title=\"宽度优先搜索（BFS)\"></a>宽度优先搜索（BFS)</h4><p>宽度优先搜索又称广度优先搜索，优先扩展层数较低（深度较浅）的结点，仅当某一层的结点全部搜索完毕时，BFS才会进入下一层进行搜索，其具体搜索方法为：<br>在根结点处生成第一层结点，并在该层中横向进行搜索，检查该层是否存在所需的目标结点；若未找到目标结点，则将第一层的所有结点逐一进行扩展，生成第二层结点，再重复上述步骤，直至发现目标结点。</p>\n<h3 id=\"强化学习\"><a href=\"#强化学习\" class=\"headerlink\" title=\"强化学习\"></a>强化学习</h3><p>强化学习也叫增强学习。<br>强化学习有4个基本要素，分别是策略、奖励、价值函数以及环境模型。</p>\n<p><strong>策略</strong>是状态到行为的一种映射，它定义了智能体的行为。智能体在给定的状态下所采取的动作取决于策略。</p>\n<p><strong>奖励</strong>是环境对智能体当前行为的一个即时反馈。奖励可以反映智能体学习的任务目标。</p>\n<p><strong>价值函数</strong>是对智能体的序列决策的长期收益的衡量。价值函数与奖励不一样，奖励是环境在智能体每采取一个动作后给予的即时反馈，而价值函数是从一个长远的角度来估计智能体当前行为的好坏的。</p>\n<p><strong>环境模型</strong>是对环境的建模，它定义了不同状态之间的转移概率以及智能体在当前状态下采取某个动作所能获得的奖励。</p>\n<h4 id=\"强化学习与其他机器学习范式的不同\"><a href=\"#强化学习与其他机器学习范式的不同\" class=\"headerlink\" title=\"强化学习与其他机器学习范式的不同\"></a>强化学习与其他机器学习范式的不同</h4><p>监督学习从带有标记的训练数据中学习预测新的样本。例如，<strong>手写数字识别</strong>就是典型的适合用监督学习解决的问题。</p>\n<p>无监督学习从没有标记的训练数据中学习数据的特征，找出数据中潜在的结构并将其分成若干类。无监督学习主要解决预测学习中的聚类问题，例如，从大量无标签的猫猫和狗狗的照片中学习这是两种不同的动物并加以区分。</p>\n<p>监督学习和无监督学习本质上都属于预测学习，而强化学习属于决策学习。<br>强化学习没有标签，它会根据环境的反馈来判断行为的好坏，通过奖励和惩罚来学习最大化行为序列的长期收益。</p>\n<h3 id=\"群体智能\"><a href=\"#群体智能\" class=\"headerlink\" title=\"群体智能\"></a>群体智能</h3><p><strong>旅行商问题（TSP)</strong> </p>\n<ul>\n<li>蚁群算法</li>\n<li>人工蜂群算法</li>\n</ul>\n<h1 id=\"《Python语言程序设计基础》\"><a href=\"#《Python语言程序设计基础》\" class=\"headerlink\" title=\"《Python语言程序设计基础》\"></a>《Python语言程序设计基础》</h1><h2 id=\"程序实例\"><a href=\"#程序实例\" class=\"headerlink\" title=\"程序实例\"></a>程序实例</h2><h3 id=\"python蟒蛇绘制\"><a href=\"#python蟒蛇绘制\" class=\"headerlink\" title=\"python蟒蛇绘制\"></a>python蟒蛇绘制</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">import turtle\nturtle.setup(650,350,200,200)\nturtle.penup()\nturtle.fd(-250)\nturtle.pendown()\nturtle.pensize(25)\nturtle.pencolor(&quot;purple&quot;)\nturtle.seth(-40)\nfor i in range(4):\n    turtle.circle(40,80)\n    turtle.circle(-40,80)\nturtle.circle(40,80&#x2F;2)\nturtle.fd(40)\nturtle.circle(16,180)\nturtle.fd(40*2&#x2F;3)</code></pre>\n<h2 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h2><h3 id=\"math库解析\"><a href=\"#math库解析\" class=\"headerlink\" title=\"math库解析\"></a>math库解析</h3><h4 id=\"数学常数\"><a href=\"#数学常数\" class=\"headerlink\" title=\"数学常数\"></a>数学常数</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>常数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>math.pi</td>\n<td>Π，圆周率，值为3.141592653589793</td>\n</tr>\n<tr>\n<td>math.e</td>\n<td>e,自然对数，值为2.718281828459045</td>\n</tr>\n<tr>\n<td>math.inf</td>\n<td>正无穷大</td>\n</tr>\n<tr>\n<td>math.nan</td>\n<td>非浮点数标记，NaN(Not a Number)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"数值表示函数\"><a href=\"#数值表示函数\" class=\"headerlink\" title=\"数值表示函数\"></a>数值表示函数</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>math.fabs(x)</th>\n<th>返回x的绝对值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>math.fmod(x,y)</td>\n<td>x%y,返回x与y的模</td>\n</tr>\n<tr>\n<td>math.fsum([x,y,…])</td>\n<td>x+y+···,浮点数精确求和</td>\n</tr>\n<tr>\n<td>math.ceil(x)</td>\n<td><strong>向上</strong>取整，返回不小于x的最小整数</td>\n</tr>\n<tr>\n<td>math.floor(x)</td>\n<td><strong>向下</strong>取整，返回不大于x的最大整数</td>\n</tr>\n<tr>\n<td>math.factorial(x)</td>\n<td>x!，返回x的阶乘，如果x是小数或负数，返回ValueError</td>\n</tr>\n<tr>\n<td>math.gcd(a,b)</td>\n<td>返回a与b的最大公约数</td>\n</tr>\n<tr>\n<td>math.frexp(x)</td>\n<td>$x$=$m$x$2^e$,返回(m,e)，当x=0，返回（0.0，0）</td>\n</tr>\n<tr>\n<td>math.ldexp(x,i)</td>\n<td>返回$x$x$2^i$运算值，math.frexp(x)函数的反运算。</td>\n</tr>\n<tr>\n<td>math.modf(x)</td>\n<td>返回x的小数和整数部分</td>\n</tr>\n<tr>\n<td>math.trunc(x)</td>\n<td>返回x的整数部分</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>math包含8个幂对数函数<br>| 函数               | 描述                                                         |<br>| ————————— | —————————————————————————————— |<br>| math.pow(x,y)      | $x^y$,返回x的y次幂                                           |<br>| math.exp(x)        | $e^x$,返回e的x次幂，e是自然对数                              |<br>| math.sqrt(x)       | 返回x的平方根                                                |<br>| math.log(x[,base]) | $\\log_{base} {x}$，返回x的对数值，只输入x时，返回自然对数，即lnx |<br>| math.log1p(x)      | ln(1+x),返回1+x的自然对数值                                  |<br>| math.log2(x)       | l$og_2x$,返回x的2对数值                                      |<br>| math.log10(x)      | $log_{10}x$,返回x的10对数值                                  |</p>\n<h4 id=\"高等特殊函数\"><a href=\"#高等特殊函数\" class=\"headerlink\" title=\"高等特殊函数\"></a>高等特殊函数</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>math.erf(x)</td>\n<td>高斯误差函数，应用于概率论、统计学等领域</td>\n</tr>\n<tr>\n<td>math.erfc(x)</td>\n<td>余补高斯误差函数，math.erfc(x)=1-math.erf(x)</td>\n</tr>\n<tr>\n<td>math.gamma(x)</td>\n<td>伽马函数，也叫欧拉第二积分函数</td>\n</tr>\n<tr>\n<td>math.lgamma(x)</td>\n<td>伽马函数的自然对数</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>可以利用伽马函数计算浮点数的阶乘</p>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><h4 id=\"基本的字符串操作符\"><a href=\"#基本的字符串操作符\" class=\"headerlink\" title=\"基本的字符串操作符\"></a>基本的字符串操作符</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>x+y</td>\n<td>连接两个字符串x与y</td>\n</tr>\n<tr>\n<td>$x<em>n$或$n</em>x$</td>\n<td>复制</td>\n</tr>\n<tr>\n<td>x in s</td>\n<td>如果x是s的子串，返回True,否则返回False</td>\n</tr>\n<tr>\n<td>str[i]</td>\n<td>索引，返回第i个字符</td>\n</tr>\n<tr>\n<td>str[N:M]</td>\n<td>切片，返回索引第N到第M的子串，其中不包含M</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"内置的字符串处理函数\"><a href=\"#内置的字符串处理函数\" class=\"headerlink\" title=\"内置的字符串处理函数\"></a>内置的字符串处理函数</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>len(x)</td>\n<td>返回字符串x的长度</td>\n</tr>\n<tr>\n<td>str(x)</td>\n<td>返回任意类型x所对应的字符串形式</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"程序的控制结构\"><a href=\"#程序的控制结构\" class=\"headerlink\" title=\"程序的控制结构\"></a>程序的控制结构</h2><h3 id=\"异常处理：try-except语句\"><a href=\"#异常处理：try-except语句\" class=\"headerlink\" title=\"异常处理：try-except语句\"></a>异常处理：try-except语句</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">try:\n   &lt;语句块1&gt;\nexcept &lt;异常类型&gt;:\n    &lt;语句块2&gt;</code></pre>\n<h2 id=\"科学计算与可视化\"><a href=\"#科学计算与可视化\" class=\"headerlink\" title=\"科学计算与可视化\"></a>科学计算与可视化</h2><h3 id=\"numpy\"><a href=\"#numpy\" class=\"headerlink\" title=\"numpy\"></a>numpy</h3><p>引用numpy<br><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">import numpy as np</code></pre></p>\n<h4 id=\"创建数组函数\"><a href=\"#创建数组函数\" class=\"headerlink\" title=\"创建数组函数\"></a>创建数组函数</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>np.array([x,y,z],dtype=int)</td>\n<td>从python列表和元组创造数组</td>\n</tr>\n<tr>\n<td>np.arange(x,y,i)</td>\n<td>创建一个由x到y，以i为步长的数组</td>\n</tr>\n<tr>\n<td>np.linspace(x,y,n）</td>\n<td>创建一个由x到y，等分成n个元素的数组</td>\n</tr>\n<tr>\n<td>np.indices((m,n))</td>\n<td>创建一个m行n列的矩阵</td>\n</tr>\n<tr>\n<td>np.random.rand(m,n)</td>\n<td>创建一个m行n列的随机数组</td>\n</tr>\n<tr>\n<td>np.ones((m,n),dtype)</td>\n<td>创建一个m行n列全1的数组，dtype是数据类型</td>\n</tr>\n<tr>\n<td>np.empty((m,n),dtype)</td>\n<td>创建一个m行n列全0的数组，dtype是数据类型</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"算数运算函数\"><a href=\"#算数运算函数\" class=\"headerlink\" title=\"算数运算函数\"></a>算数运算函数</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>np.add(x1,x2[,y])</td>\n<td>y=x1+x2</td>\n</tr>\n<tr>\n<td>np.subtract(x1,x2[,y])</td>\n<td>y=x1-x2</td>\n</tr>\n<tr>\n<td>np.multiply(x1,x2[,y])</td>\n<td>y=x1*x2</td>\n</tr>\n<tr>\n<td>np.divide(x1,x2[,y])</td>\n<td>y=x1/x2</td>\n</tr>\n<tr>\n<td>np floor_divide(x1,x2[,y])</td>\n<td>y=x1//x2,返回值取整</td>\n</tr>\n<tr>\n<td>np.negative(x[,y])</td>\n<td>y=-x</td>\n</tr>\n<tr>\n<td>np.power(x1,x2[,y])</td>\n<td>y=x1**x2</td>\n</tr>\n<tr>\n<td>np.remainder(x1,x2[,y])</td>\n<td>y=x1%x2</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"网络爬虫和自动化\"><a href=\"#网络爬虫和自动化\" class=\"headerlink\" title=\"网络爬虫和自动化\"></a>网络爬虫和自动化</h2>","text":"《计算与人工智能概论》字符串和列表基础\\t 制表符字符串与数字相乘：字符串重复几次3‘un’字符串和字符串相加：字符串连接起来‘un’+’ium’*字符串索引下标，第一个字符索引是0 word = ‘Python’word[0]‘P’word[5]‘n’ 索引也可以用负数，这种会...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"python","slug":"python","count":9,"path":"api/tags/python.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E3%80%8A%E8%AE%A1%E7%AE%97%E4%B8%8E%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%A6%82%E8%AE%BA%E3%80%8B\"><span class=\"toc-text\">《计算与人工智能概论》</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%88%97%E8%A1%A8%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">字符串和列表基础</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">循环</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#for%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">for循环</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%88%97%E8%A1%A8%E8%BF%9B%E9%98%B6\"><span class=\"toc-text\">字符串和列表进阶</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%97%E8%A1%A8%E8%BF%9B%E9%98%B6\"><span class=\"toc-text\">列表进阶</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%9B%E9%98%B6\"><span class=\"toc-text\">字符串进阶</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%83%E7%BB%84\"><span class=\"toc-text\">元组</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9B%86%E5%90%88\"><span class=\"toc-text\">集合</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E5%85%B8\"><span class=\"toc-text\">字典</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E5%85%B8%E7%9A%84%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">字典的创建</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E7%9A%84%E6%8A%80%E5%B7%A7\"><span class=\"toc-text\">循环的技巧</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">数据类型小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">匿名函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">常用内置函数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">算法设计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E6%B1%82%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%80%9D%E7%BB%B4%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">问题求解计算思维方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%AD%E4%BB%A3%E6%B3%95\"><span class=\"toc-text\">迭代法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A9%B7%E4%B8%BE%E6%B3%95\"><span class=\"toc-text\">穷举法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%88%86%E6%B3%95\"><span class=\"toc-text\">二分法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%80%92%E5%BD%92\"><span class=\"toc-text\">递归</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">深度优先遍历</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95\"><span class=\"toc-text\">梯度下降法</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%99%BA%E8%83%BD%E6%84%9F%E7%9F%A5\"><span class=\"toc-text\">智能感知</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86\"><span class=\"toc-text\">自然语言处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89\"><span class=\"toc-text\">机器视觉</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C\"><span class=\"toc-text\">神经网络</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C\"><span class=\"toc-text\">卷积神经网络</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E8%AF%86%E5%88%AB\"><span class=\"toc-text\">模式识别</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0\"><span class=\"toc-text\">机器学习</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0\"><span class=\"toc-text\">监督学习</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9B%9E%E5%BD%92\"><span class=\"toc-text\">回归</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">分类</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0\"><span class=\"toc-text\">无监督学习</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%8A%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0\"><span class=\"toc-text\">半监督学习</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%99%BA%E8%83%BD%E5%86%B3%E7%AD%96\"><span class=\"toc-text\">智能决策</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8E%E6%90%9C%E7%B4%A2%E7%9A%84%E6%9C%80%E4%BC%98%E8%B7%AF%E5%BE%84%E5%86%B3%E7%AD%96\"><span class=\"toc-text\">基于搜索的最优路径决策</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%88DFS\"><span class=\"toc-text\">深度优先搜索（DFS)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%BD%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%88BFS\"><span class=\"toc-text\">宽度优先搜索（BFS)</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0\"><span class=\"toc-text\">强化学习</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%85%B6%E4%BB%96%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%8C%83%E5%BC%8F%E7%9A%84%E4%B8%8D%E5%90%8C\"><span class=\"toc-text\">强化学习与其他机器学习范式的不同</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BE%A4%E4%BD%93%E6%99%BA%E8%83%BD\"><span class=\"toc-text\">群体智能</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E3%80%8APython%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80%E3%80%8B\"><span class=\"toc-text\">《Python语言程序设计基础》</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">程序实例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#python%E8%9F%92%E8%9B%87%E7%BB%98%E5%88%B6\"><span class=\"toc-text\">python蟒蛇绘制</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">基本数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#math%E5%BA%93%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">math库解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E5%AD%A6%E5%B8%B8%E6%95%B0\"><span class=\"toc-text\">数学常数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E5%80%BC%E8%A1%A8%E7%A4%BA%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">数值表示函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%AB%98%E7%AD%89%E7%89%B9%E6%AE%8A%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">高等特殊函数</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">字符串</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">基本的字符串操作符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%86%85%E7%BD%AE%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">内置的字符串处理函数</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">程序的控制结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%EF%BC%9Atry-except%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">异常处理：try-except语句</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96\"><span class=\"toc-text\">科学计算与可视化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#numpy\"><span class=\"toc-text\">numpy</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">创建数组函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">算数运算函数</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%92%8C%E8%87%AA%E5%8A%A8%E5%8C%96\"><span class=\"toc-text\">网络爬虫和自动化</span></a></li></ol></li></ol>","author":{"name":"Algernon","slug":"blog-author","avatar":"https://user-images.githubusercontent.com/54904760/224857900-b2e8457c-43d2-46b7-901c-6c770f24bbad.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}},"mapped":true,"prev_post":{"title":"【数学建模】课程笔记","uid":"679a1ca1ed196b2867a4735b2a0d1db1","slug":"数模课程笔记","date":"2022-11-03T14:03:49.000Z","updated":"2022-11-03T14:03:50.062Z","comments":true,"path":"api/articles/数模课程笔记.json","keywords":null,"cover":[],"text":"插值及案例实验插值是对给定数据的处理方法，它在工程实践和科学实验中有非常广泛、重要的应用。主要应用在如下两个方面：1、通过数据进行预测分析，例如：工程实验数据与模型的分析、天气预报以及社会、经济行为的统计分析等。2、图形绘制与可视化，例如：图像重建、工程外观设计等。 插值基本概念...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"数模","slug":"数模","count":4,"path":"api/tags/数模.json"}],"author":{"name":"Algernon","slug":"blog-author","avatar":"https://user-images.githubusercontent.com/54904760/224857900-b2e8457c-43d2-46b7-901c-6c770f24bbad.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}}},"next_post":{"title":"【电子羊的奇妙冒险】初试深度学习（2）","uid":"bfaff7f2eff3b6451015614e9ceb60e7","slug":"电子羊2","date":"2022-11-03T13:59:49.000Z","updated":"2022-11-03T15:58:01.929Z","comments":true,"path":"api/articles/电子羊2.json","keywords":null,"cover":[],"text":"这一期内容有些杂，有基础知识，也有代码实战。 卷积神经网络 该部分图片及资料来源： http://www.huaxiaozhuan.com/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/chapters/5_CNN.html 卷积定义许多神经网络库会实...","link":"","photos":[],"count_time":{"symbolsCount":"33k","symbolsTime":"30 mins."},"categories":[],"tags":[{"name":"深度学习","slug":"深度学习","count":9,"path":"api/tags/深度学习.json"}],"author":{"name":"Algernon","slug":"blog-author","avatar":"https://user-images.githubusercontent.com/54904760/224857900-b2e8457c-43d2-46b7-901c-6c770f24bbad.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}}}}