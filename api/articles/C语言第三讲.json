{"title":"【HNUMSC】C语言第三讲","uid":"9e4aae0d62d70adf155bf02c14221ce4","slug":"C语言第三讲","date":"2022-11-03T14:44:49.000Z","updated":"2022-11-08T15:49:56.551Z","comments":true,"path":"api/articles/C语言第三讲.json","keywords":null,"cover":[],"content":"<h1 id=\"C语言第三讲\"><a href=\"#C语言第三讲\" class=\"headerlink\" title=\"C语言第三讲\"></a>C语言第三讲</h1><h2 id=\"基本数据结构\"><a href=\"#基本数据结构\" class=\"headerlink\" title=\"基本数据结构\"></a>基本数据结构</h2><h3 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h3><p>在栈（stack）中，被删除的是最近插入的元素：<br>栈实现的是一种后进先出策略（而<strong>队列</strong>则是先进先出）</p>\n<p>栈上insert操作称为<strong>压入</strong>（push），而无元素参数的delete操作称为<strong>弹出</strong>（pop）。<br>餐馆里的一摞盘子，“弹出”的顺序和压入的顺序相反，因为只有最上面的盘子才能够被取下来。</p>\n<h3 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h3><h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><p>算法（Algorithm）是规则的有限集合，是为解决特定问题而规定的一系列操作。<br>算法设计的目标是正确、可读、健壮、高效、低耗<br><strong>正确</strong></p>\n<ol>\n<li>对于几组输入数据能够得出满足结果的要求</li>\n<li>对于精心选择的典型、苛刻的输入数据能够得出满足要求的结果</li>\n<li>对于一切合法的输入数据都能够产生满足要求的结果</li>\n</ol>\n<p>一般情况下，至少应以第二层含义的正确性作为衡量一个算法是否正确的标准。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&#x2F;&#x2F;求n个数的最大值问题，给出核心处理的示意算法\nmax&#x3D;0;\nfor(i&#x3D;1;i&lt;n;i++)&#123;\nscanf(&quot;%f&quot;,&amp;x);\n   if(x&gt;max)\n      max&#x3D;x;\n&#125;</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>显然，当n个数全为负时，最大值max为0 ，这个算法的正确性是不够标准的</p></blockquote>\n<p><strong>可读</strong><br><strong>鲁棒性</strong><br>对非法输入的抵抗能力，即使输入非法数据，也能够识别并加以处理。<br><strong>高效率、低储存量</strong></p>\n<p>一个算法的执行时间是指算法中所有语句执行时间的总和。<br>每条语句的执行时间等于该条语句的执行次数乘以执行一次所需实际时间。</p>\n<p>语句频度是指该语句在一个算法中重复执行的次数，一个算法的时间耗费就是该算法中所有语句频度之和。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>算法中语句总的执行次数$f(n)$是问题规模n的函数<br>$T(n)=O(f(n))$，其中$O$是数量级</p></blockquote>\n<p>它表示随问题规模n的宏大，算法的执行时间的增长率和$f(n)$的增长率相同，称作算法的渐进时间复杂度，简称<strong>时间复杂度</strong></p>\n<p>常数阶</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">m&#x3D;i;\ni&#x3D;j;\nj&#x3D;temp;</code></pre>\n<p>该程序段的执行时间是一个与问题规模n无关的常数。<br>$T(n)=O(1)$</p>\n<p>线性阶</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">for(i&#x3D;1;1&lt;&#x3D;n;1++)\n  x&#x3D;x+1;</code></pre>\n<p>其时间复杂度为$O(n)$</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">for (i&#x3D;1;1&lt;&#x3D;n;i++)&#123;\n   for(j&#x3D;1;j&lt;&#x3D;n;j++)&#123;\n    y++;\n   &#125;\n&#125;</code></pre>\n<p>其时间复杂度为$O(n^2)$</p>\n<h3 id=\"模拟\"><a href=\"#模拟\" class=\"headerlink\" title=\"模拟\"></a>模拟</h3><h4 id=\"超级玛丽\"><a href=\"#超级玛丽\" class=\"headerlink\" title=\"超级玛丽\"></a>超级玛丽</h4><p>模拟的过程就是对真实场景尽可能的模拟，然后通过计算机强大的计算能力对结果进行预测。<br><img src=\"https://img-blog.csdnimg.cn/b808f505aa7445968425a692ee446e61.png\" alt=\"在这里插入图片描述\"><br>题解：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://www.luogu.com.cn/problem/solution/P1000\">https://www.luogu.com.cn/problem/solution/P1000</a></p></blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#include&lt;stdio.h&gt;\nint main() &#123;\n    printf(\n    &quot;                ********\\n&quot;\n    &quot;               ************\\n&quot;\n    &quot;               ####....#.\\n&quot;\n    &quot;             #..###.....##....\\n&quot;\n    &quot;             ###.......######              ###            ###\\n&quot;\n    &quot;                ...........               #...#          #...#\\n&quot;\n    &quot;               ##*#######                 #.#.#          #.#.#\\n&quot;\n    &quot;            ####*******######             #.#.#          #.#.#\\n&quot;\n    &quot;           ...#***.****.*###....          #...#          #...#\\n&quot;\n    &quot;           ....**********##.....           ###            ###\\n&quot;\n    &quot;           ....****    *****....\\n&quot;\n    &quot;             ####        ####\\n&quot;\n    &quot;           ######        ######\\n&quot;\n    &quot;##############################################################\\n&quot;\n    &quot;#...#......#.##...#......#.##...#......#.##------------------#\\n&quot;\n    &quot;###########################################------------------#\\n&quot;\n    &quot;#..#....#....##..#....#....##..#....#....#####################\\n&quot;\n    &quot;##########################################    #----------#\\n&quot;\n    &quot;#.....#......##.....#......##.....#......#    #----------#\\n&quot;\n    &quot;##########################################    #----------#\\n&quot;\n    &quot;#.#..#....#..##.#..#....#..##.#..#....#..#    #----------#\\n&quot;\n    &quot;##########################################    ############\\n&quot;\n    );\n    return 0;\n&#125;</code></pre>\n<h4 id=\"多项式输出\"><a href=\"#多项式输出\" class=\"headerlink\" title=\"多项式输出\"></a>多项式输出</h4><p><img src=\"https://img-blog.csdnimg.cn/593c918813254995880d8a82dc234c4c.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/22b569e59c6e4e2bbd373ffe43a7c022.png\" alt=\"在这里插入图片描述\"><br>题解：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://www.luogu.com.cn/problem/solution/P1067\">https://www.luogu.com.cn/problem/solution/P1067</a></p></blockquote>\n<h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><h4 id=\"三连击\"><a href=\"#三连击\" class=\"headerlink\" title=\"三连击\"></a>三连击</h4><p><img src=\"https://img-blog.csdnimg.cn/53bafa438fcb4b2a886e74229f42788a.png\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">192 384 576\n219 438 657\n273 546 819\n327 654 981</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>从123（最小）枚举，abc;abc<em>2;abc</em>3<br>当然，还有一种方法：<br>三个数 之比分别为1:2:3，也可以将第一个数设为a，从1开始（123，246，369）依次枚举，直到满足条件</p>\n<p><em>可以用三个数字的每一位相加为45作为限制</em><br>题解：<br><a href=\"https://www.luogu.com.cn/problem/solution/P1008?page=1\">https://www.luogu.com.cn/problem/solution/P1008?page=1</a></p></blockquote>\n<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><p>如果函数调用它本身，那么此函数就是递归的。<br><img src=\"https://img-blog.csdnimg.cn/de2cf495df9f4959afcf70837d3f9246.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"汉诺塔\"><a href=\"#汉诺塔\" class=\"headerlink\" title=\"汉诺塔\"></a>汉诺塔</h3><p>法国数学家爱德华·卢卡斯曾编写过一个印度的古老传说：在世界中心贝拿勒斯（在印度北部）的圣庙里，一块黄铜板上插着三根宝石针。印度教的主神梵天在创造世界的时候，在其中一根针上从下到上地穿好了由大到小的64片金片，这就是所谓的汉诺塔。不论白天黑夜，总有一个僧侣在按照下面的法则移动这些金片：一次只移动一片，不管在哪根针上，小片必须在大片上面。僧侣们预言，当所有的金片都从梵天穿好的那根针上移到另外一根针上时，世界就将在一声霹雳中消灭，而梵塔、庙宇和众生也都将同归于尽。<br>$2^n-1$<br>一个：1次<br>两个：3次<br><img src=\"https://img-blog.csdnimg.cn/0b0acfc8dd33419dbbf923ee92aa530d.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/8e7cb24e8f5c4859a36b918a3af486fd.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/4e7600b0c6d44ecfb120c1f9d6401ee3.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/94def836c1984205ba9bcab08b4416d0.png\" alt=\"在这里插入图片描述\"><br>三个:7次<br>1—&gt;C<br>2—&gt;B<br>1—&gt;B<br>3—&gt;C<br>1—&gt;A<br>2—&gt;C<br>1—&gt;C<br><img src=\"https://img-blog.csdnimg.cn/c107df8aa3414691afd599e38b282eb6.png\" alt=\"在这里插入图片描述\"><br>n个：<br><img src=\"https://img-blog.csdnimg.cn/8bd194162d074d8eb760ee77f191e889.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/0cea5210af3644dc9684fd8b6616511d.png\" alt=\"在这里插入图片描述\"><br>移动n个的次数+把最底层移动到C的次数（1次）+移动n个的次数<br><img src=\"https://img-blog.csdnimg.cn/130bd735e6594dd2a4a0fdb4de9d12d2.png\" alt=\"在这里插入图片描述\"></p>\n<p>题解：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://blog.csdn.net/Y673789476/article/details/124569813?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-124569813-blog-82025409.t0_searchtargeting_v1&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-124569813-blog-82025409.t0_searchtargeting_v1&amp;utm_relevant_index=2\">https://blog.csdn.net/Y673789476/article/details/124569813?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-124569813-blog-82025409.t0_searchtargeting_v1&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-124569813-blog-82025409.t0_searchtargeting_v1&amp;utm_relevant_index=2</a></p></blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/18c8ba0b0f86444ca7c38ec1087c8a95.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>算法</th>\n<th>最坏情况运行时间</th>\n<th>平均情况/期望运行时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>插入排序</td>\n<td>$Θ(n^2)$</td>\n<td>$Θ(n^2)$</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>$Θ(nlgn)$</td>\n<td>$Θ(nlgn)$</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>$Ο(nlgn)$</td>\n<td>——</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>$Θ(n^2)$</td>\n<td>$Θ(nlgn)$（期望）</td>\n</tr>\n<tr>\n<td>计数排序</td>\n<td>$Θ(k+n)$</td>\n<td>$Θ(k+n)$</td>\n</tr>\n<tr>\n<td>基数排序</td>\n<td>$Θ(d(k+n))$</td>\n<td>$Θ(d(k+n))$</td>\n</tr>\n<tr>\n<td>桶排序</td>\n<td>$Θ(n^2)$</td>\n<td>$Θ(n^2)$（平均情况）</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"插入法\"><a href=\"#插入法\" class=\"headerlink\" title=\"插入法\"></a>插入法</h3><h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><p>冒泡排序（相邻比序法）是一种简单的交换类排序方法，它是通过对相邻的数据元素进行交换，逐步将待排序序列变成有序序列的过程。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>反复扫描待排序记录序列，顺次比较相邻的两个元素的大小，若逆序就交换位置。<br>在扫描的过程中，不断地将相邻记录中关键字大的记录向后移动，最后必然将待排序记录序列中最大关键字换到序列的末尾，这也是最大关键字记录应在的位置<br>然后进行第二趟冒泡排序，对前n-1个记录进行同样的操作，其结果是使次大的记录被放在第n-1个记录的位置上<br>然后进行第三趟冒泡排序，对前n-2个记录进行同样的操作，其结果是使次大的记录被放在第n-2个记录的位置上<br>如此反复，每一趟冒泡排序都将一个记录排到位，直到剩下一个最小的记录。</p></blockquote>\n<p>如果在某一趟冒泡排序的过程中，没有发现一个逆序，则可直接结束整个排序过程，所以冒泡排序过程最多进行n-1次。<br>给出序列{48，62，35，77，55，14，35，98，22，40}的第一次冒泡排序过程。<br><img src=\"https://img-blog.csdnimg.cn/fb80f92a40764633be4fe272534c200c.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"分治算法\"><a href=\"#分治算法\" class=\"headerlink\" title=\"分治算法\"></a>分治算法</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>众所周知，弗兰大学的总图书馆距离寝室非常遥远，来回不便。<br>有⼀天热爱看书的电子羊同学到图书馆借了 N 本书，出图书馆的时候，警报响了，于是保安把热爱看书的电子羊同学拦下，要检查⼀下哪本书没有登记出借。热爱看书的电子羊同学正准备把每⼀本书在报警器下过⼀下，以找出引发警报的书，但是保安露出不屑的眼神：你连二分查找都不会吗？于是保安把书分成两堆，让第⼀堆过⼀下报警器，报警器响；于是再把这堆书分成两堆…… 最终，检测了 logN 次之后，保安成功的找到了那本引起警报的书，露出了得意和嘲讽的笑容。于是阿东背着剩下的书走了。<br>从此，图书馆丢了 N - 1 本书。</p></blockquote>\n<p>许多有用的算法在结构上是<strong>递归</strong>的：为了解决一个给定的问题，算法一次或多次递归地调用其自身以解决若干子问题。<br>这些算法典型地遵循<strong>分治法</strong>的思想，将原问题分解为几个规模较小但类似于原问题的子问题，递归地求解这些子问题，然后再合并这些子问题的解来建立原问题的解。</p>\n<h3 id=\"二分搜索\"><a href=\"#二分搜索\" class=\"headerlink\" title=\"二分搜索\"></a>二分搜索</h3><p>假设有n个呈升序排列的数组元素（例如1~100），当我们需要查找一个数a究竟在哪个位置时，可以使用二分搜索：<br>将数组分为两份，用a的值比较n/2的值，如果大于则在（n/2,n]中，反之则小于，若等于则查找完毕。<br>将n/2分成两份，重复上述操作，直到找出值相等为止。</p>\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><p>递归常用于<strong>分治法</strong>中。分治法是将一个大问题划分成多个较小的问题，然后采用相同的算法分别解决这些小问题。</p>\n<p>分治法的经典示例就是流行的排序算法：快速排序</p>\n<p> 假设要排序的数组的下标从1到n。</p>\n<ol>\n<li>选择数组元素e(作为“分割元素”)，然后重新排列数组使得元素从<br>1到i-1都是小于或等于元素e的，元素i包含e，而元素从i+1到n都是<br>大于或等于e的<ol>\n<li>通过递归地采用快速排序方法，对从1到i-1的元素进行排序</li>\n<li>通过递归地采用快速排序方法，对从i+1到n的元素进行排序。<br><img src=\"https://img-blog.csdnimg.cn/77efff4b578f47a6896bfe955d5c60d5.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/ffe22bc6a96c49e6b602b2b39c8d0bec.png\" alt=\"在这里插入图片描述\"><br>从最后一个图可以看出，分割元素左侧的所有元素都小于或等于12，而<br>其右侧的所有元素都大于或等于12。<br>既然己经分割了数组，那么就可以使用快速排序法对数组的前4个元素<br>(10,3,6,和7) 和后2个元素(15和18)进行递归快速排序了</li>\n</ol>\n</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>让我们先来开发一个名为quicksort的递归函数，此<br>函数采用快速排序算法对整型数组进行排序<br><img src=\"https://img-blog.csdnimg.cn/3f29de8bec7a46b5a749368615cfa8ea.png\" alt=\"在这里插入图片描述\"></p></blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#include &lt;stdio.h&gt;\n\n#define N 10\n\nvoid quicksort(int a[], int low, int high);\nint split(int a[], int low, int high);\n\nint main(void)\n&#123;\n  int a[N], i;\n\n  printf(&quot;Enter %d numbers to be sorted: &quot;, N);\n  for (i &#x3D; 0; i &lt; N; i++)\n    scanf(&quot;%d&quot;, &amp;a[i]);\n\n  quicksort(a, 0, N - 1);\n\n  printf(&quot;In sorted order: &quot;);\n  for (i &#x3D; 0; i &lt; N; i++)\n    printf(&quot;%d &quot;, a[i]);\n  printf(&quot;\\n&quot;);\n\n  return 0;\n&#125;\n\nvoid quicksort(int a[], int low, int high)\n&#123;\n  int middle;\n\n  if (low &gt;&#x3D; high) return;\n  middle &#x3D; split(a, low, high);\n  quicksort(a, low, middle - 1);\n  quicksort(a, middle + 1, high);\n&#125;\n\nint split(int a[], int low, int high)\n&#123;\n  int part_element &#x3D; a[low];\n\n  for (;;) &#123;\n    while (low &lt; high &amp;&amp; part_element &lt;&#x3D; a[high])\n      high--;\n    if (low &gt;&#x3D; high) break;\n    a[low++] &#x3D; a[high];\n\n    while (low &lt; high &amp;&amp; a[low] &lt;&#x3D; part_element)\n      low++;\n    if (low &gt;&#x3D; high) break;\n    a[high--] &#x3D; a[low];\n  &#125;\n\n  a[high] &#x3D; part_element;\n  return high;\n&#125;</code></pre>\n<h2 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h2><p>动态规划通常用来解决<strong>最优化问题</strong>。<br>这类问题有很多可行解，每个解都有一个值，我们希望寻找到具有最优值（最大值或最小值）的解。<br>我们称这样的解为问题的<strong>一个最优解</strong>，而非<strong>最优解</strong>（因为可能有多个解都达到最优值。）</p>\n<p><strong>钢条切割</strong></p>\n<h2 id=\"贪心算法\"><a href=\"#贪心算法\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h2><p>贪心算法在每一步都做出当时看起来最佳的选择。<br>总是做出局部最优的选择，寄希望于这样的选择能够导致全局最优解。</p>\n<p>运用贪心策略在每一次转化时都取得了最优解。问题的最优子结构性质是该问题可用贪心算法求解的关键特征。贪心算法的每一次操作都对结果产生直接影响。贪心算法对每个子问题的解决方案都做出选择，不能回退。<br><img src=\"https://img-blog.csdnimg.cn/e9173b8d591f44929b0c32f7e78fdcd3.png\" alt=\"在这里插入图片描述\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>贪心算法，一次遍历，只要今天价格小于明天价格就在今天买入然后明天卖出，时间复杂度O(n)</p></blockquote>\n","text":"C语言第三讲基本数据结构栈在栈（stack）中，被删除的是最近插入的元素：栈实现的是一种后进先出策略（而队列则是先进先出） 栈上insert操作称为压入（push），而无元素参数的delete操作称为弹出（pop）。餐馆里的一摞盘子，“弹出”的顺序和压入的顺序相反，因为只有最上面...","link":"","photos":[],"count_time":{"symbolsCount":"6.9k","symbolsTime":"6 mins."},"categories":[{"name":"编程语言","slug":"编程语言","count":13,"path":"api/categories/编程语言.json"}],"tags":[{"name":"C语言","slug":"C语言","count":4,"path":"api/tags/C语言.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#C%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E8%AE%B2\"><span class=\"toc-text\">C语言第三讲</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">基本数据结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%88\"><span class=\"toc-text\">栈</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A0%86\"><span class=\"toc-text\">堆</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E6%8B%9F\"><span class=\"toc-text\">模拟</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%B6%85%E7%BA%A7%E7%8E%9B%E4%B8%BD\"><span class=\"toc-text\">超级玛丽</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E9%A1%B9%E5%BC%8F%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">多项式输出</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9E%9A%E4%B8%BE\"><span class=\"toc-text\">枚举</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%89%E8%BF%9E%E5%87%BB\"><span class=\"toc-text\">三连击</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%92%E5%BD%92\"><span class=\"toc-text\">递归</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B1%89%E8%AF%BA%E5%A1%94\"><span class=\"toc-text\">汉诺塔</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">排序算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5%E6%B3%95\"><span class=\"toc-text\">插入法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">冒泡排序</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">分治算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2\"><span class=\"toc-text\">二分搜索</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">快速排序</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92\"><span class=\"toc-text\">动态规划</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">贪心算法</span></a></li></ol></li></ol>","author":{"name":"Algernon","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/68c4c7d8696c482da565ab5c8ebfa2fa.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}},"mapped":true,"prev_post":{"title":"【基于AnyLogic的管理仿真系统】","uid":"ab4d0720d723497e8948d6250eb13f1a","slug":"基于anylogic","date":"2022-11-03T14:45:49.000Z","updated":"2022-11-03T14:46:17.516Z","comments":true,"path":"api/articles/基于anylogic.json","keywords":null,"cover":[],"text":"bass模型（系统动力学） 建立基础模型将模型基础建立，组成一个简单的扩散模型，并填上变量值 添加从潜在消费者到消费者的流程 潜在消费者 消费者 转换速率（流量） 添加常量两个动态变量 广告 口碑 通过创建参数来定义常量四个参数： 总人口：100000 广告效果：0.011 接触...","link":"","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"信管","slug":"信管","count":5,"path":"api/tags/信管.json"}],"author":{"name":"Algernon","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/68c4c7d8696c482da565ab5c8ebfa2fa.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}}},"next_post":{"title":"【HNUMSC】C语言第二讲","uid":"bd5c7ff1ee333580d66d465ad6b85ea0","slug":"C语言第二讲","date":"2022-11-03T14:43:49.000Z","updated":"2022-11-08T15:49:40.652Z","comments":true,"path":"api/articles/C语言第二讲.json","keywords":null,"cover":[],"text":"C语言第二课循环循环是重复执行其他语句（循环体）的语句。C语言提供了三种重复语句： while do for 水仙花数“水仙花数”是指一个三位数，其各位数字立方和等于该数本身。 比方说153是一个“水仙花数”，因为153等于1的三次方、5的三次方、3的三次方这三个三次方数字的总和...","link":"","photos":[],"count_time":{"symbolsCount":"8.9k","symbolsTime":"8 mins."},"categories":[{"name":"编程语言","slug":"编程语言","count":13,"path":"api/categories/编程语言.json"}],"tags":[{"name":"C语言","slug":"C语言","count":4,"path":"api/tags/C语言.json"}],"author":{"name":"Algernon","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/68c4c7d8696c482da565ab5c8ebfa2fa.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}}}}