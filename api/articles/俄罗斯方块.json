{"title":"python实训 俄罗斯方块 面向对象编程MVC模式","uid":"ff813a6890c74120b08ea0e357e75669","slug":"俄罗斯方块","date":"2022-11-03T14:41:49.000Z","updated":"2022-11-08T15:13:25.231Z","comments":true,"path":"api/articles/俄罗斯方块.json","keywords":null,"cover":[],"content":"<h2 id=\"前端演示\"><a href=\"#前端演示\" class=\"headerlink\" title=\"前端演示\"></a>前端演示<img src=\"https://img-blog.csdnimg.cn/fcbbad495b414b548e57ab8974cd6ca1.png\" alt=\"在这里插入图片描述\"></h2><p><strong>viewtest.py</strong><br><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">from tkinter import *\nfrom random import *\nimport threading\nfrom tkinter.messagebox import showinfo\nfrom tkinter.messagebox import askquestion\nimport threading\nfrom time import sleep\nbrick &#x3D; [\n        [\n            [\n                [0, 1, 1],\n                [1, 1, 0],\n                [0, 0, 0]\n            ],\n            [\n                [1, 0, 0],\n                [1, 1, 0],\n                [0, 1, 0]\n            ],\n            [\n                [0, 1, 1],\n                [1, 1, 0],\n                [0, 0, 0]\n            ],\n            [\n                [1, 0, 0],\n                [1, 1, 0],\n                [0, 1, 0]\n            ]\n        ],\n        [\n            [\n                [1, 1, 1],\n                [1, 0, 0],\n                [0, 0, 0]\n            ],\n            [\n                [0, 1, 1],\n                [0, 0, 1],\n                [0, 0, 1]\n            ],\n            [\n                [0, 0, 0],\n                [0, 0, 1],\n                [1, 1, 1]\n            ],\n            [\n                [1, 0, 0],\n                [1, 0, 0],\n                [1, 1, 0]\n            ]\n        ],\n        [\n            [\n                [1, 1, 1],\n                [0, 0, 1],\n                [0, 0, 0]\n            ],\n            [\n                [0, 0, 1],\n                [0, 0, 1],\n                [0, 1, 1]\n            ],\n            [\n                [0, 0, 0],\n                [1, 0, 0],\n                [1, 1, 1]\n            ],\n            [\n                [1, 1, 0],\n                [1, 0, 0],\n                [1, 0, 0]\n            ]\n        ],\n        [\n            [\n                [0, 0, 0],\n                [0, 1, 1],\n                [0, 1, 1]\n            ],\n            [\n                [0, 0, 0],\n                [0, 1, 1],\n                [0, 1, 1]\n            ],\n            [\n                [0, 0, 0],\n                [0, 1, 1],\n                [0, 1, 1]\n            ],\n            [\n                [0, 0, 0],\n                [0, 1, 1],\n                [0, 1, 1]\n            ]\n        ],\n        [\n            [\n                [1, 1, 1],\n                [0, 1, 0],\n                [0, 0, 0]\n            ],\n            [\n                [0, 0, 1],\n                [0, 1, 1],\n                [0, 0, 1]\n            ],\n            [\n                [0, 0, 0],\n                [0, 1, 0],\n                [1, 1, 1]\n            ],\n            [\n                [1, 0, 0],\n                [1, 1, 0],\n                [1, 0, 0]\n            ]\n        ],\n        [\n            [\n                [0, 1, 0],\n                [0, 1, 0],\n                [0, 1, 0]\n\n            ],\n            [\n                [0, 0, 0],\n                [1, 1, 1],\n                [0, 0, 0]\n\n            ],\n            [\n                [0, 1, 0],\n                [0, 1, 0],\n                [0, 1, 0]\n            ],\n            [\n                [0, 0, 0],\n                [1, 1, 1],\n                [0, 0, 0]\n            ]\n        ],\n        [\n            [\n                [1, 1, 0],\n                [0, 1, 1],\n                [0, 0, 0]\n            ],\n            [\n                [0, 0, 1],\n                [0, 1, 1],\n                [0, 1, 0]\n            ],\n            [\n                [0, 0, 0],\n                [1, 1, 0],\n                [0, 1, 1]\n            ],\n            [\n                [0, 1, 0],\n                [1, 1, 0],\n                [1, 0, 0]\n            ]\n        ]\n\n    ]\n\nclass View(object):\n    # 是否开始\n    start &#x3D; True\n    # 是否到达底部\n    isDown &#x3D; True\n    isPause &#x3D; False\n    # 窗体\n    window &#x3D; None\n    # frame\n    frame1 &#x3D; None\n    frame2 &#x3D; None\n\n    # 按钮\n    btnStart &#x3D; None\n\n    # 绘图类\n    canvas &#x3D; None\n    canvas1 &#x3D; None\n\n    # 标题\n    title &#x3D; &quot;Python暑期课程设计&quot;\n    # 宽和高\n    width &#x3D; 450\n    height &#x3D; 670\n\n    # 行和列\n    rows &#x3D; 20\n    cols &#x3D; 10\n\n    # 下降方块的线程\n    downThread &#x3D; None\n\n    # 几种方块\n    brick&#x3D;brick\n\n    # 当前的方块\n    #curBrick &#x3D; None\n    curBrick&#x3D;None\n    # 当前方块数组\n    arr &#x3D; None\n    arr1 &#x3D; None\n    # 当前方块形状\n    shape &#x3D; -1\n    # 当前方块的行和列（最左上角）\n    curRow &#x3D; -10\n    curCol &#x3D; -10\n\n    # 背景\n    back &#x3D; list()\n    # 格子\n    gridBack &#x3D; list()\n    preBack &#x3D; list()\n    # 初始化\n    def init(self):\n\n        for i in range(0, self.rows):\n            self.back.insert(i, list())\n            self.gridBack.insert(i, list())\n\n        for i in range(0, self.rows):\n\n            for j in range(0, self.cols):\n                self.back[i].insert(j, 0)\n                self.gridBack[i].insert(j, self.canvas.create_rectangle(30 * j, 30 * i, 30 * (j + 1), 30 * (i + 1),\n                                                                        fill&#x3D;&quot;red&quot;))\n\n        for i in range(0, 3):\n            self.preBack.insert(i, list())\n\n        for i in range(0, 3):\n\n            for j in range(0, 3):\n                self.preBack[i].insert(j, self.canvas1.create_rectangle(30 * j, 30 * i, 30 * (j + 1), 30 * (i + 1),\n                                                                        fill&#x3D;&quot;red&quot;))\n\n                # 绘制游戏的格子\n    def drawRect(self):\n        for i in range(0, self.rows):\n\n            for j in range(0, self.cols):\n\n                if self.back[i][j] &#x3D;&#x3D; 1:\n\n                    self.canvas.itemconfig(self.gridBack[i][j], fill&#x3D;&quot;purple&quot;, outline&#x3D;&quot;white&quot;)#掉落之后的方块，填充色、轮廓色\n\n                elif self.back[i][j] &#x3D;&#x3D; 0:\n\n                    self.canvas.itemconfig(self.gridBack[i][j], fill&#x3D;&quot;black&quot;, outline&#x3D;&quot;white&quot;) #棋盘格子的填充色、轮廓色\n\n                    # 绘制预览方块\n        for i in range(0, len(self.arr1)):\n\n            for j in range(0, len(self.arr1[i])):\n\n                if self.arr1[i][j] &#x3D;&#x3D; 0:\n\n                    self.canvas1.itemconfig(self.preBack[i][j], fill&#x3D;&quot;black&quot;, outline&#x3D;&quot;white&quot;)\n\n                elif self.arr1[i][j] &#x3D;&#x3D; 1:\n\n                    self.canvas1.itemconfig(self.preBack[i][j], fill&#x3D;&quot;orange&quot;, outline&#x3D;&quot;white&quot;)\n\n                    # 绘制当前正在运动的方块\n    def clickStart(self):\n\n        self.start &#x3D; True\n\n        for i in range(0, self.rows):\n\n            for j in range(0, self.cols):\n                self.back[i][j] &#x3D; 0\n                self.canvas.itemconfig(self.gridBack[i][j], fill&#x3D;&quot;black&quot;, outline&#x3D;&quot;white&quot;)\n\n        for i in range(0, len(self.arr)):\n\n            for j in range(0, len(self.arr[i])):\n                self.canvas1.itemconfig(self.preBack[i][j], fill&#x3D;&quot;black&quot;, outline&#x3D;&quot;white&quot;)\n\n        #self.getCurBrick()\n        self.drawRect()\n\n        self.downThread &#x3D; threading.Thread(target&#x3D;self.brickDown, args&#x3D;())\n        self.downThread.start()\n\n    def clickPause(self):\n        self.isPause &#x3D; not self.isPause\n        print(self.isPause)\n        if not self.isPause:\n            self.btnPause[&quot;text&quot;] &#x3D; &quot;暂停&quot;\n        else:\n            self.btnPause[&quot;text&quot;] &#x3D; &quot;恢复&quot;\n\n    def clickReStart(self):\n        ackRestart &#x3D; askquestion(&quot;remake！好耶！&quot;, &quot;光速重开?&quot;)\n        if ackRestart &#x3D;&#x3D; &#39;yes&#39;:\n            self.clickStart()\n        else:\n            return\n\n    def clickQuit(self):\n        ackQuit &#x3D; askquestion(&quot;就走了？&quot;, &quot;没你我可怎么活啊！&quot;)\n        if ackQuit &#x3D;&#x3D; &#39;yes&#39;:\n            self.window.destroy()\n            exit()\n    def getCurBrick(self):\n\n        self.curBrick &#x3D; randint(0, len(self.brick) -1)\n        self.shape &#x3D; 0\n        # 当前方块数组\n        self.arr &#x3D; self.brick[self.curBrick][self.shape]\n\n       # self.arr1 &#x3D; self.arr\n        self.arr1 &#x3D; self.brick[self.curBrick][self.shape]\n        self.curRow &#x3D; 0\n        self.curCol &#x3D; 1\n\n        # 是否到底部为False\n        self.isDown &#x3D; False\n    # 获得当前的方块\n    def __init__(self):\n\n        self.window &#x3D; Tk()\n        self.window.title(self.title)\n        self.window.minsize(self.width, self.height)\n        self.window.maxsize(self.width, self.height)\n\n        self.frame1 &#x3D; Frame(self.window, width&#x3D;300, height&#x3D;600, bg&#x3D;&quot;black&quot;)\n        self.frame1.place(x&#x3D;20, y&#x3D;30);\n\n        self.scoreLabel1 &#x3D; Label(self.window, text&#x3D;&quot;Score:&quot;, font&#x3D;(30))\n        self.scoreLabel1.place(x&#x3D;340, y&#x3D;60)\n        self.scoreLabel2 &#x3D; Label(self.window, text&#x3D;&quot;0&quot;, fg&#x3D;&#39;red&#39;, font&#x3D;(30))\n        self.scoreLabel2.place(x&#x3D;410, y&#x3D;60)\n\n        self.frame2 &#x3D; Frame(self.window, width&#x3D;90, height&#x3D;90, bg&#x3D;&quot;black&quot;)\n        self.frame2.place(x&#x3D;340, y&#x3D;120)\n\n        self.canvas &#x3D; Canvas(self.frame1, width&#x3D;300, height&#x3D;600, bg&#x3D;&quot;black&quot;)\n        self.canvas1 &#x3D; Canvas(self.frame2, width&#x3D;90, height&#x3D;90, bg&#x3D;&quot;black&quot;)\n\n        self.btnStart &#x3D; Button(self.window, text&#x3D;&quot;开始&quot;, command&#x3D;self.clickStart)\n        self.btnStart.place(x&#x3D;340, y&#x3D;400, width&#x3D;80, height&#x3D;25)\n\n        self.btnPause &#x3D; Button(self.window, text&#x3D;&quot;暂停&quot;, command&#x3D;self.clickPause)\n        self.btnPause.place(x&#x3D;340, y&#x3D;450, width&#x3D;80, height&#x3D;25)\n\n        self.btnReStart &#x3D; Button(self.window, text&#x3D;&quot;重新开始&quot;, command&#x3D;self.clickReStart)\n        self.btnReStart.place(x&#x3D;340, y&#x3D;500, width&#x3D;80, height&#x3D;25)\n\n        self.btnQuit &#x3D; Button(self.window, text&#x3D;&quot;退出&quot;, command&#x3D;self.clickQuit)\n        self.btnQuit.place(x&#x3D;340, y&#x3D;550, width&#x3D;80, height&#x3D;25)\n\n        self.init()\n\n        # 获得当前的方块\n        self.getCurBrick()\n\n        # 按照数组，绘制格子\n\n        self.drawRect()\n\n        self.canvas.pack()\n\n        self.canvas1.pack()\n        self.window.mainloop()\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    view &#x3D; View()</code></pre></p>\n<h2 id=\"主程序\"><a href=\"#主程序\" class=\"headerlink\" title=\"主程序\"></a>主程序</h2><h3 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">from tkinter import *\nfrom random import *\nimport threading\nfrom tkinter.messagebox import showinfo\nfrom tkinter.messagebox import askquestion\nimport threading\nfrom time import sleep\n\nclass View():\n    def __init__(self):\n        # 标题\n        self.title &#x3D; &quot;Python暑期课程设计&quot;\n        # 宽和高\n        self.width &#x3D; 450\n        self.height &#x3D; 670\n        self.window &#x3D; Tk()\n        self.window.title(self.title)\n        self.window.minsize(self.width, self.height)\n        self.window.maxsize(self.width, self.height)\n\n        self.frame1 &#x3D; Frame(self.window, width&#x3D;300, height&#x3D;600, bg&#x3D;&quot;black&quot;)\n        self.frame1.place(x&#x3D;20, y&#x3D;30)\n\n        self.scoreLabel1 &#x3D; Label(self.window, text&#x3D;&quot;Score:&quot;, font&#x3D;(30))\n        self.scoreLabel1.place(x&#x3D;340, y&#x3D;60)\n        self.scoreLabel2 &#x3D; Label(self.window, text&#x3D;&quot;0&quot;, fg&#x3D;&#39;red&#39;, font&#x3D;(30))\n        self.scoreLabel2.place(x&#x3D;410, y&#x3D;60)\n\n        self.frame2 &#x3D; Frame(self.window, width&#x3D;90, height&#x3D;90, bg&#x3D;&quot;black&quot;)\n        self.frame2.place(x&#x3D;340, y&#x3D;120)\n\n        self.canvas &#x3D; Canvas(self.frame1, width&#x3D;300, height&#x3D;600, bg&#x3D;&quot;black&quot;)  # 界面画布，被挡住了所以修改颜色看不出来，但最好还是保持黑色\n        self.canvas1 &#x3D; Canvas(self.frame2, width&#x3D;90, height&#x3D;90, bg&#x3D;&quot;black&quot;)  # 预览画布，虽然被遮住了但最好还是黑底\n\n        self.btnStart &#x3D; Button(self.window, text&#x3D;&quot;开始&quot;, command&#x3D;self.clickStart)\n        self.btnStart.place(x&#x3D;340, y&#x3D;400, width&#x3D;80, height&#x3D;25)    #位置\n\n        self.btnPause &#x3D; Button(self.window, text&#x3D;&quot;暂停&quot;, command&#x3D;self.clickPause)\n        self.btnPause.place(x&#x3D;340, y&#x3D;450, width&#x3D;80, height&#x3D;25)\n\n        self.btnReStart &#x3D; Button(self.window, text&#x3D;&quot;重新开始&quot;, command&#x3D;self.clickReStart)\n        self.btnReStart.place(x&#x3D;340, y&#x3D;500, width&#x3D;80, height&#x3D;25)\n\n        self.btnQuit &#x3D; Button(self.window, text&#x3D;&quot;退出&quot;, command&#x3D;self.clickQuit)\n        self.btnQuit.place(x&#x3D;340, y&#x3D;550, width&#x3D;80, height&#x3D;25)\n    def clickQuit(self):\n        ackQuit &#x3D; askquestion(&quot;就走了？&quot;, &quot;没你我可怎么活啊！&quot;)\n        if ackQuit &#x3D;&#x3D; &#39;yes&#39;:\n            self.window.destroy()\n            exit()\n\n    def clickPause(self):\n        self.isPause &#x3D; not self.isPause\n        print(self.isPause)\n        if not self.isPause:\n            self.btnPause[&quot;text&quot;] &#x3D; &quot;暂停&quot;\n        else:\n            self.btnPause[&quot;text&quot;] &#x3D; &quot;恢复&quot;\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    view &#x3D; View()</code></pre>\n<h3 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">from tkinter import *\nfrom random import *\nimport threading\nfrom tkinter.messagebox import showinfo\nfrom tkinter.messagebox import askquestion\nimport threading\nfrom time import sleep\nclass Model(): #预定义变量\n    def __init__(self):\n        \n        self.brick &#x3D; None\n\n        # 是否到达底部\n        self.isDown &#x3D; True\n        self.isPause &#x3D; False\n        # 窗体\n        self.window &#x3D; None\n        # frame\n        self.frame1 &#x3D; None\n        self.frame2 &#x3D; None\n        # 按钮\n        self.btnStart &#x3D; None\n        # 绘图类\n        self.canvas &#x3D; None\n        self.canvas1 &#x3D; None\n        # 下降方块的线程\n        self.downThread &#x3D; None\n        # 当前的方块\n        self.curBrick &#x3D; None\n        # 下一个方块\n        self.nextBrick &#x3D; None\n        # 当前方块数组\n        self.arr &#x3D; None\n        self.arr1 &#x3D; None\n        # 当前方块形状\n        self.shape &#x3D; -1\n        # 当前方块的行和列（最左上角）\n        self.curRow &#x3D; -10\n        self.curCol &#x3D; -10\n    # 初始化\n    def init(self):\n        # 格子\n        self.gridBack &#x3D; list()\n        self.preBack &#x3D; list()\n        # 背景\n        self.back &#x3D; list()\n        self.brick &#x3D; [\n            [\n                [\n                    [0, 1, 1],\n                    [1, 1, 0],\n                    [0, 0, 0]\n                ],\n                [\n                    [1, 0, 0],\n                    [1, 1, 0],\n                    [0, 1, 0]\n                ],\n                [\n                    [0, 1, 1],\n                    [1, 1, 0],\n                    [0, 0, 0]\n                ],\n                [\n                    [1, 0, 0],\n                    [1, 1, 0],\n                    [0, 1, 0]\n                ]\n            ],\n            [\n                [\n                    [1, 1, 1],\n                    [1, 0, 0],\n                    [0, 0, 0]\n                ],\n                [\n                    [0, 1, 1],\n                    [0, 0, 1],\n                    [0, 0, 1]\n                ],\n                [\n                    [0, 0, 0],\n                    [0, 0, 1],\n                    [1, 1, 1]\n                ],\n                [\n                    [1, 0, 0],\n                    [1, 0, 0],\n                    [1, 1, 0]\n                ]\n            ],\n            [\n                [\n                    [1, 1, 1],\n                    [0, 0, 1],\n                    [0, 0, 0]\n                ],\n                [\n                    [0, 0, 1],\n                    [0, 0, 1],\n                    [0, 1, 1]\n                ],\n                [\n                    [0, 0, 0],\n                    [1, 0, 0],\n                    [1, 1, 1]\n                ],\n                [\n                    [1, 1, 0],\n                    [1, 0, 0],\n                    [1, 0, 0]\n                ]\n            ],\n            [\n                [\n                    [0, 0, 0],\n                    [0, 1, 1],\n                    [0, 1, 1]\n                ],\n                [\n                    [0, 0, 0],\n                    [0, 1, 1],\n                    [0, 1, 1]\n                ],\n                [\n                    [0, 0, 0],\n                    [0, 1, 1],\n                    [0, 1, 1]\n                ],\n                [\n                    [0, 0, 0],\n                    [0, 1, 1],\n                    [0, 1, 1]\n                ]\n            ],\n            [\n                [\n                    [1, 1, 1],\n                    [0, 1, 0],\n                    [0, 0, 0]\n                ],\n                [\n                    [0, 0, 1],\n                    [0, 1, 1],\n                    [0, 0, 1]\n                ],\n                [\n                    [0, 0, 0],\n                    [0, 1, 0],\n                    [1, 1, 1]\n                ],\n                [\n                    [1, 0, 0],\n                    [1, 1, 0],\n                    [1, 0, 0]\n                ]\n            ],\n            [\n                [\n                    [0, 1, 0],\n                    [0, 1, 0],\n                    [0, 1, 0]\n\n                ],\n                [\n                    [0, 0, 0],\n                    [1, 1, 1],\n                    [0, 0, 0]\n\n                ],\n                [\n                    [0, 1, 0],\n                    [0, 1, 0],\n                    [0, 1, 0]\n                ],\n                [\n                    [0, 0, 0],\n                    [1, 1, 1],\n                    [0, 0, 0]\n                ]\n            ],\n            [\n                [\n                    [1, 1, 0],\n                    [0, 1, 1],\n                    [0, 0, 0]\n                ],\n                [\n                    [0, 0, 1],\n                    [0, 1, 1],\n                    [0, 1, 0]\n                ],\n                [\n                    [0, 0, 0],\n                    [1, 1, 0],\n                    [0, 1, 1]\n                ],\n                [\n                    [0, 1, 0],\n                    [1, 1, 0],\n                    [1, 0, 0]\n                ]\n            ]\n\n        ]    #方块数组\n        # 行和列\n        self.rows &#x3D; 20\n        self.cols &#x3D; 10\n        for i in range(0, self.rows):\n            self.back.insert(i, list())\n            self.gridBack.insert(i, list())\n        for i in range(0, self.rows):\n            for j in range(0, self.cols):\n                self.back[i].insert(j, 0)\n                self.gridBack[i].insert(j, self.canvas.create_rectangle(30 * j, 30 * i, 30 * (j + 1), 30 * (i + 1),\n                                                                        fill&#x3D;&quot;red&quot;))\n        for i in range(0, 3):\n            self.preBack.insert(i, list())\n\n        for i in range(0, 3):\n\n            for j in range(0, 3):\n                self.preBack[i].insert(j, self.canvas1.create_rectangle(30 * j, 30 * i, 30 * (j + 1), 30 * (i + 1),\n                                                                        fill&#x3D;&quot;red&quot;))\n    # 绘制游戏的格子\n    def drawRect(self):\n        for i in range(0, self.rows):\n            for j in range(0, self.cols):\n                if self.back[i][j] &#x3D;&#x3D; 1:\n                    self.canvas.itemconfig(self.gridBack[i][j], fill&#x3D;&quot;purple&quot;, outline&#x3D;&quot;white&quot;)\n                elif self.back[i][j] &#x3D;&#x3D; 0:\n                    self.canvas.itemconfig(self.gridBack[i][j], fill&#x3D;&quot;black&quot;, outline&#x3D;&quot;white&quot;)\n\n        # 绘制预览方块\n        for i in range(0, len(self.arr1)):\n            for j in range(0, len(self.arr1[i])):\n                if self.arr1[i][j] &#x3D;&#x3D; 0:\n                    self.canvas1.itemconfig(self.preBack[i][j], fill&#x3D;&quot;black&quot;, outline&#x3D;&quot;white&quot;)\n                elif self.arr1[i][j] &#x3D;&#x3D; 1:\n                    self.canvas1.itemconfig(self.preBack[i][j], fill&#x3D;&quot;orange&quot;, outline&#x3D;&quot;white&quot;)\n\n        # 绘制当前正在运动的方块\n        if self.curRow !&#x3D; -10 and self.curCol !&#x3D; -10:\n            for i in range(0, len(self.arr)):\n                for j in range(0, len(self.arr[i])):\n                    if self.arr[i][j] &#x3D;&#x3D; 1:\n                        self.canvas.itemconfig(self.gridBack[self.curRow + i][self.curCol + j], fill&#x3D;&quot;blue&quot;,\n                                               outline&#x3D;&quot;white&quot;)\n\n        # 判断方块是否已经运动到达底部\n        if self.isDown:\n            for i in range(0, 3):\n                for j in range(0, 3):\n                    if self.arr[i][j] !&#x3D; 0:\n                        self.back[self.curRow + i][self.curCol + j] &#x3D; self.arr[i][j]\n\n            # 判断整行消除\n            self.removeRow()\n            # 判断是否死了\n            self.isDead()\n            # 获得下一个方块\n            self.getCurBrick()\n\n    # 判断是否有整行需要消除\n    def removeRow(self):\n        count &#x3D; 0\n        for i in range(0, self.rows):\n            tag1 &#x3D; True\n            for j in range(0, self.cols):\n                if self.back[i][j] &#x3D;&#x3D; 0:\n                    tag1 &#x3D; False\n                    break\n            if tag1 &#x3D;&#x3D; True:\n                # 从上向下挪动\n                count &#x3D; count + 1\n                for m in range(i - 1, 0, -1):\n                    for n in range(0, self.cols):\n                        self.back[m + 1][n] &#x3D; self.back[m][n]\n\n        scoreValue &#x3D; eval(self.scoreLabel2[&#39;text&#39;])\n        scoreValue +&#x3D; 5 * count * (count + 3)\n        self.scoreLabel2.config(text&#x3D;str(scoreValue))\n\n    # 获得当前的方块\n    def getCurBrick(self):\n        if(not self.curBrick):\n            self.curBrick &#x3D; randint(0, len(self.brick) - 1)\n            self.nextBrick &#x3D; randint(0, len(self.brick) - 1)\n        else:\n            self.curBrick &#x3D; self.nextBrick\n            self.nextBrick &#x3D; randint(0, len(self.brick) - 1)\n        self.shape &#x3D; 0\n        # 当前方块数组\n        self.arr &#x3D; self.brick[self.curBrick][self.shape]\n        self.arr1 &#x3D; self.brick[self.nextBrick][self.shape]\n\n        self.curRow &#x3D; 0\n        self.curCol &#x3D; 1\n\n        # 是否到底部为False\n        self.isDown &#x3D; False\n\n# 监听键盘输入\n\n    def onKeyboardEvent(self, event):\n        # 未开始，不必监听键盘输入\n        if self.start &#x3D;&#x3D; False:\n            return\n        if self.isPause &#x3D;&#x3D; True:\n            return\n\n        # 记录原来的值\n        tempCurCol &#x3D; self.curCol\n        tempCurRow &#x3D; self.curRow\n        tempShape &#x3D; self.shape\n        tempArr &#x3D; self.arr\n        direction &#x3D; -1\n\n        if event.keycode &#x3D;&#x3D; 37:\n            # 左移\n            self.curCol -&#x3D; 1\n            direction &#x3D; 1\n        elif event.keycode &#x3D;&#x3D; 38:\n            # 变化方块的形状\n            self.shape +&#x3D; 1\n            direction &#x3D; 2\n            if self.shape &gt;&#x3D; 4:\n                self.shape &#x3D; 0\n            self.arr &#x3D; self.brick[self.curBrick][self.shape]\n        elif event.keycode &#x3D;&#x3D; 39:\n            direction &#x3D; 3\n            # 右移\n            self.curCol +&#x3D; 1\n        elif event.keycode &#x3D;&#x3D; 40:\n            direction &#x3D; 4\n            # 下移\n            self.curRow +&#x3D; 1\n        if self.isEdge(direction) &#x3D;&#x3D; False:\n            self.curCol &#x3D; tempCurCol\n            self.curRow &#x3D; tempCurRow\n            self.shape &#x3D; tempShape\n            self.arr &#x3D; tempArr\n\n        self.drawRect()\n\n        return True\n\n    # 判断当前方块是否到达边界\n    def isEdge(self, direction):\n        tag &#x3D; True\n        # 向左，判断边界\n        if direction &#x3D;&#x3D; 1:\n            for i in range(0, 3):\n                for j in range(0, 3):\n                    if self.arr[j][i] !&#x3D; 0 and (\n                            self.curCol + i &lt; 0 or self.back[self.curRow + j][self.curCol + i] !&#x3D; 0):\n                        tag &#x3D; False\n                        break\n                        # 向右，判断边界\n        elif direction &#x3D;&#x3D; 3:\n            for i in range(0, 3):\n                for j in range(0, 3):\n                    if self.arr[j][i] !&#x3D; 0 and (\n                            self.curCol + i &gt;&#x3D; self.cols or self.back[self.curRow + j][self.curCol + i] !&#x3D; 0):\n                        tag &#x3D; False\n                        break\n                        # 向下，判断底部\n        elif direction &#x3D;&#x3D; 4:\n            for i in range(0, 3):\n                for j in range(0, 3):\n                    if self.arr[i][j] !&#x3D; 0 and (\n                            self.curRow + i &gt;&#x3D; self.rows or self.back[self.curRow + i][self.curCol + j] !&#x3D; 0):\n                        tag &#x3D; False\n                        self.isDown &#x3D; True\n                        break\n                        # 进行变形，判断边界\n        elif direction &#x3D;&#x3D; 2:\n            if self.curCol &lt; 0:\n                self.curCol &#x3D; 0\n            if self.curCol + 2 &gt;&#x3D; self.cols:\n                self.curCol &#x3D; self.cols - 3\n            if self.curRow + 2 &gt;&#x3D; self.rows:\n                self.curRow &#x3D; self.curRow - 3\n\n        return tag\n\n        # 方块向下移动\n\n    def brickDown(self):\n        # 是否开始\n        self.start &#x3D; True\n\n        while True:\n\n            if self.start &#x3D;&#x3D; False:\n                print(&quot;exit thread&quot;)\n                break\n            if self.isPause &#x3D;&#x3D; False:\n                tempRow &#x3D; self.curRow\n                self.curRow +&#x3D; 1\n\n                if self.isEdge(4) &#x3D;&#x3D; False:\n                    self.curRow &#x3D; tempRow\n\n                self.drawRect()\n\n                # 每一秒下降一格\n                sleep(1)\n\n                # 点击开始\n\n    def clickStart(self):\n        self.start &#x3D; True\n        for i in range(0, self.rows):\n            for j in range(0, self.cols):\n                self.back[i][j] &#x3D; 0\n                self.canvas.itemconfig(self.gridBack[i][j], fill&#x3D;&quot;black&quot;, outline&#x3D;&quot;white&quot;)\n        for i in range(0, len(self.arr)):\n            for j in range(0, len(self.arr[i])):\n                self.canvas1.itemconfig(self.preBack[i][j], fill&#x3D;&quot;black&quot;, outline&#x3D;&quot;white&quot;)\n\n        self.getCurBrick()\n        self.drawRect()\n        self.downThread &#x3D; threading.Thread(target&#x3D;self.brickDown, args&#x3D;())\n        self.downThread.start()\n\n    def clickReStart(self):\n        ackRestart &#x3D; askquestion(&quot;remake！好耶！&quot;, &quot;光速重开?&quot;)\n        if ackRestart &#x3D;&#x3D; &#39;yes&#39;:\n            self.clickStart()\n        else:\n            return\n\n\n    # 判断是否死了\n    def isDead(self):\n        for j in range(0, len(self.back[0])):\n            if self.back[0][j] !&#x3D; 0:\n                showinfo(&quot;寄！&quot;, &quot;鉴定为：\\n建议重开&quot;)\n                self.start &#x3D; False\n                break\n                # 运行\n</code></pre>\n<h3 id=\"Control\"><a href=\"#Control\" class=\"headerlink\" title=\"Control\"></a>Control</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">from tkinter import *\nfrom random import *\nimport threading\nfrom tkinter.messagebox import showinfo\nfrom tkinter.messagebox import askquestion\nimport threading\nfrom time import sleep\nfrom Model import *\nfrom View import *\n#from benshouView import *\nclass Ctrl(Model,View):\n\n    def __init__(self):\n        Model.__init__(self)\n        View.__init__(self)\n\n    def rungame(self):\n        self.init()\n\n        # 获得当前的方块\n        self.getCurBrick()\n\n        # 按照数组，绘制格子\n        self.drawRect()\n\n        self.canvas.pack()\n\n        self.canvas1.pack()\n\n        # 监听键盘事件\n        self.window.bind(&quot;&lt;KeyPress&gt;&quot;, self.onKeyboardEvent)\n\n        # 启动方块下落线程\n        self.downThread &#x3D; threading.Thread(target&#x3D;self.brickDown, args&#x3D;())\n        self.downThread.start()\n\n        self.window.mainloop()\n\n        self.start &#x3D; False\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    use &#x3D; Ctrl()\n    use.rungame()</code></pre>\n","text":"前端演示viewtest.pyfrom tkinter import * from random import * import threading from tkinter.messagebox import showinfo from tkinter.messagebox i...","link":"","photos":[],"count_time":{"symbolsCount":"27k","symbolsTime":"25 mins."},"categories":[{"name":"信管","slug":"信管","count":19,"path":"api/categories/信管.json"}],"tags":[{"name":"python","slug":"python","count":9,"path":"api/tags/python.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%AB%AF%E6%BC%94%E7%A4%BA\"><span class=\"toc-text\">前端演示</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">主程序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#View\"><span class=\"toc-text\">View</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Model\"><span class=\"toc-text\">Model</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Control\"><span class=\"toc-text\">Control</span></a></li></ol></li></ol>","author":{"name":"Algernon","slug":"blog-author","avatar":"https://user-images.githubusercontent.com/54904760/224857900-b2e8457c-43d2-46b7-901c-6c770f24bbad.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}},"mapped":true,"prev_post":{"title":"【HNUMSC】C语言第一讲","uid":"146a852d05d3eb85968d596488683f29","slug":"C语言第一讲","date":"2022-11-03T14:42:49.000Z","updated":"2022-11-08T15:49:28.567Z","comments":true,"path":"api/articles/C语言第一讲.json","keywords":null,"cover":[],"text":"C语言第一讲简介 C语言是一种底层语言 C语言是一种小型语言 C语言是一种包容性语言 #include&lt;stdio.h&gt; int main()&#123; int a,i; a&#x3D;6; for(i&#x3D;1;i&lt;&#x3D;3;i++) printf...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"编程语言","slug":"编程语言","count":13,"path":"api/categories/编程语言.json"}],"tags":[{"name":"C语言","slug":"C语言","count":4,"path":"api/tags/C语言.json"}],"author":{"name":"Algernon","slug":"blog-author","avatar":"https://user-images.githubusercontent.com/54904760/224857900-b2e8457c-43d2-46b7-901c-6c770f24bbad.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}}},"next_post":{"title":"【计算与人工智能概论】（进阶）","uid":"15c6023f64ef1e6727ffc77c5b7783db","slug":"计算与人工智能概论进阶","date":"2022-11-03T14:40:49.000Z","updated":"2022-11-03T14:40:09.552Z","comments":true,"path":"api/articles/计算与人工智能概论进阶.json","keywords":null,"cover":[],"text":"算法思维方程求根二分法画图猜f(x)=0的大概范围[a,b]再缩小范围，保证f(a)f(b)&lt;0,在[a,b]上一定有实根。 中点x0=a+(b-a)/2=(a+b)/2 即两端值和的一半。若中点与右端符号相同(如左图)，则缩小到[a,x0]。若中点与左端符号相同(如右图)...","link":"","photos":[],"count_time":{"symbolsCount":"25k","symbolsTime":"23 mins."},"categories":[],"tags":[{"name":"python","slug":"python","count":9,"path":"api/tags/python.json"}],"author":{"name":"Algernon","slug":"blog-author","avatar":"https://user-images.githubusercontent.com/54904760/224857900-b2e8457c-43d2-46b7-901c-6c770f24bbad.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}}}}