{"title":"【GO语言编程】（四）","uid":"5f49d908c20f45931c28cee8b97efd48","slug":"GO4","date":"2022-11-03T14:57:49.000Z","updated":"2022-11-08T15:50:55.385Z","comments":true,"path":"api/articles/GO4.json","keywords":null,"cover":[],"content":"<h2 id=\"http编程\"><a href=\"#http编程\" class=\"headerlink\" title=\"http编程\"></a>http编程</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"> package main\n\n import (\n &quot;fmt&quot;\n &quot;net&#x2F;http&quot;\n )\n\n func main() &#123;\n &#x2F;&#x2F;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;go\n &#x2F;&#x2F; 单独写回调函数\n http.HandleFunc(&quot;&#x2F;go&quot;, myHandler)\n &#x2F;&#x2F;http.HandleFunc(&quot;&#x2F;ungo&quot;,myHandler2 )\n &#x2F;&#x2F; addr：监听的地址\n&#x2F;&#x2F; handler：回调函数\n http.ListenAndServe(&quot;127.0.0.1:8000&quot;, nil)\n &#125;\n\n &#x2F;&#x2F; handler函数\n func myHandler(w http.ResponseWriter, r *http.Request) &#123;\n fmt.Println(r.RemoteAddr, &quot;连接成功&quot;)\n\n&#x2F;&#x2F; 请求方式：GET POST DELETE PUT UPDATE\n fmt.Println(&quot;method:&quot;, r.Method)\n &#x2F;&#x2F; &#x2F;go\n fmt.Println(&quot;url:&quot;, r.URL.Path)\n fmt.Println(&quot;header:&quot;, r.Header)\n fmt.Println(&quot;body:&quot;, r.Body)\n &#x2F;&#x2F; 回复\n w.Write([]byte(&quot;www.5lmh.com&quot;))\n&#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/a897b217345547378d4f3a9ddb59e9f1.png\" alt=\"请添加图片描述\"></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\n import (\n &quot;fmt&quot;\n &quot;io&quot;\n &quot;net&#x2F;http&quot;\n )\n\n func main() &#123;\n &#x2F;&#x2F;resp, _ :&#x3D; http.Get(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;)\n &#x2F;&#x2F;fmt.Println(resp)\n resp, _ :&#x3D; http.Get(&quot;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;go&quot;)\n defer resp.Body.Close()\n &#x2F;&#x2F; 200 OK\n fmt.Println(resp.Status)\n fmt.Println(resp.Header)\n\n buf :&#x3D; make([]byte, 1024)\n for &#123;\n &#x2F;&#x2F; 接收服务端信息\n n, err :&#x3D; resp.Body.Read(buf)\n if err !&#x3D; nil &amp;&amp; err !&#x3D; io.EOF &#123;\n fmt.Println(err)\n return\n &#125; else &#123;\n fmt.Println(&quot;读取完毕&quot;)\n res :&#x3D; string(buf[:n])\n fmt.Println(res)\n break\n &#125;\n\n &#125;\n &#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/3d35b27d6fc34e558dcae16a891ae68e.png\" alt=\"请添加图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/abcd012182334b02951faa4e8d675e42.png\" alt=\"请添加图片描述\"></p>\n<h2 id=\"go操作MYSQL\"><a href=\"#go操作MYSQL\" class=\"headerlink\" title=\"go操作MYSQL\"></a>go操作MYSQL</h2><h3 id=\"Mysql-install\"><a href=\"#Mysql-install\" class=\"headerlink\" title=\"Mysql-install\"></a>Mysql-install</h3><p><img src=\"https://img-blog.csdnimg.cn/882c7a4084ad495cacfb621af267a279.png\" alt=\"请添加图片描述\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://developer.aliyun.com/article/758177#:~:text=%E5%A6%82%E4%BD%95%E5%9C%A8%20Ubuntu%2020.04%20%E4%B8%8A%E5%AE%89%E8%A3%85%20MySQL%201%20%E4%B8%80%E3%80%81%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6%20%E7%A1%AE%E4%BF%9D%E4%BD%A0%E4%BB%A5,5%20%E4%BA%94%E3%80%81%E6%80%BB%E7%BB%93%20%E6%88%91%E4%BB%AC%E5%B7%B2%E7%BB%8F%E5%90%91%E4%BD%A0%E5%B1%95%E7%A4%BA%E5%A6%82%E4%BD%95%E5%9C%A8%20Ubuntu%2020.04%20%E4%B8%8A%E5%AE%89%E8%A3%85%20MySQL%E3%80%82%20\">https://developer.aliyun.com/article/758177#:~:text=%E5%A6%82%E4%BD%95%E5%9C%A8%20Ubuntu%2020.04%20%E4%B8%8A%E5%AE%89%E8%A3%85%20MySQL%201%20%E4%B8%80%E3%80%81%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6%20%E7%A1%AE%E4%BF%9D%E4%BD%A0%E4%BB%A5,5%20%E4%BA%94%E3%80%81%E6%80%BB%E7%BB%93%20%E6%88%91%E4%BB%AC%E5%B7%B2%E7%BB%8F%E5%90%91%E4%BD%A0%E5%B1%95%E7%A4%BA%E5%A6%82%E4%BD%95%E5%9C%A8%20Ubuntu%2020.04%20%E4%B8%8A%E5%AE%89%E8%A3%85%20MySQL%E3%80%82%20</a></p></blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/182c4e86ad304ca9b13308bf8871d0c6.png\" alt=\"请添加图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/ab2df77f239c47ca977fb9b98500e3da.png\" alt=\"请添加图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/32a19b7a7694404a8f39cf93ec052ec0.png\" alt=\"请添加图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/f091d0b21df9449cb88b23c6731cb785.png\" alt=\"请添加图片描述\"><br>一旦安装完成，MySQL 服务将会自动启动。想要验证 MySQL 服务器正在运行，输入：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">sudo systemctl status mysql</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/c66f3b655f0b4a1f9dac28962a2dbd00.png\" alt=\"请添加图片描述\"></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">● mysql.service - MySQL Community Server\n     Loaded: loaded (&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mysql.service; enabled; vendor preset: enabled)\n     Active: active (running) since Sun 2022-09-25 17:18:35 CST; 2min 10s ago\n   Main PID: 20386 (mysqld)\n     Status: &quot;Server is operational&quot;\n      Tasks: 38 (limit: 9294)\n     Memory: 360.0M\n     CGroup: &#x2F;system.slice&#x2F;mysql.service\n             └─20386 &#x2F;usr&#x2F;sbin&#x2F;mysqld\n\n9月 25 17:18:27 algernon-Lenovo-Legion-Y7000 systemd[1]: Starting MySQL Community Server...\n9月 25 17:18:35 algernon-Lenovo-Legion-Y7000 systemd[1]: Started MySQL Community Server.\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/fdb055c3a69949f2861b0b62c8376d0e.png\" alt=\"请添加图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/616cf607b3794f19a7ef9c2c949b8bf8.png\" alt=\"请添加图片描述\"></p>\n<h3 id=\"Mysql使用\"><a href=\"#Mysql使用\" class=\"headerlink\" title=\"Mysql使用\"></a>Mysql使用</h3><p>新建test数据库，person、place 表</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"> CREATE TABLE &#96;person&#96; (\n &#96;user_id&#96; int(11) NOT NULL AUTO_INCREMENT,\n &#96;username&#96; varchar(260) DEFAULT NULL,\n &#96;sex&#96; varchar(260) DEFAULT NULL,\n &#96;email&#96; varchar(260) DEFAULT NULL,\n PRIMARY KEY (&#96;user_id&#96;)\n) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;2 DEFAULT CHARSET&#x3D;utf8;\n\n CREATE TABLE place (\n country varchar(200),\n city varchar(200),\n telcode int\n )ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;2 DEFAULT CHARSET&#x3D;utf8;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/694928ac8d63443da6601ba6e9af36d5.png\" alt=\"请添加图片描述\"></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">mysql&gt; desc person;\n+----------+--------------+------+-----+---------+----------------+\n| Field | Type | Null | Key | Default | Extra |\n+----------+--------------+------+-----+---------+----------------+\n| user_id | int(11) | NO | PRI | NULL | auto_increment |\n| username | varchar(260) | YES | | NULL | |\n| sex | varchar(260) | YES | | NULL | |\n| email | varchar(260) | YES | | NULL | |\n+----------+--------------+------+-----+---------+----------------+\n4 rows in set (0.00 sec)\n\nmysql&gt; desc place;\n+---------+--------------+------+-----+---------+-------+\n| Field | Type | Null | Key | Default | Extra |\n+---------+--------------+------+-----+---------+-------+\n| country | varchar(200) | YES | | NULL | |\n| city | varchar(200) | YES | | NULL | |\n| telcode | int(11) | YES | | NULL | |\n+---------+--------------+------+-----+---------+-------+\n3 rows in set (0.01 sec)</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://blog.csdn.net/kuangshp128/article/details/115816597\">https://blog.csdn.net/kuangshp128/article/details/115816597</a><br><img src=\"https://img-blog.csdnimg.cn/842f29ed300d4843ba7ccb1b6ef05616.png\" alt=\"请添加图片描述\"></p></blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">+----------+--------------+------+-----+---------+----------------+\n| Field    | Type         | Null | Key | Default | Extra          |\n+----------+--------------+------+-----+---------+----------------+\n| user_id  | int          | NO   | PRI | NULL    | auto_increment |\n| username | varchar(260) | YES  |     | NULL    |                |\n| sex      | varchar(260) | YES  |     | NULL    |                |\n| email    | varchar(260) | YES  |     | NULL    |                |\n+----------+--------------+------+-----+---------+----------------+\n4 rows in set (0.01 sec)\n\nmysql&gt; desc place;\n+---------+--------------+------+-----+---------+-------+\n| Field   | Type         | Null | Key | Default | Extra |\n+---------+--------------+------+-----+---------+-------+\n| country | varchar(200) | YES  |     | NULL    |       |\n| city    | varchar(200) | YES  |     | NULL    |       |\n| telcode | int          | YES  |     | NULL    |       |\n+---------+--------------+------+-----+---------+-------+\n3 rows in set (0.01 sec)\n\n</code></pre>\n<h4 id=\"mysql使用\"><a href=\"#mysql使用\" class=\"headerlink\" title=\"mysql使用\"></a>mysql使用</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>使用第三方开源的mysql库: github.com/go-sql-driver/mysql （mysql驱动）<br>github.com/jmoiron/sqlx （基于mysql驱动的封装）</p></blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">go get github.com&#x2F;go-sql-driver&#x2F;mysql\ngo get github.com&#x2F;jmoiron&#x2F;sqlx</code></pre>\n<p>链接mysql</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">database, err :&#x3D; sqlx.Open(&quot;mysql&quot;, &quot;root:XXXX@tcp(127.0.0.1:3306)&#x2F;test&quot;)\n&#x2F;&#x2F;database, err :&#x3D; sqlx.Open(&quot;数据库类型&quot;, &quot;用户名:密码@tcp(地址:端口)&#x2F;数据库名&quot;)\ndatabase, err :&#x3D; sqlx.Open(&quot;mysql&quot;, &quot;debian-sys-maint:ACrhxSvWeDh0z8Km@tcp(127.0.0.1:3306)&#x2F;test&quot;)</code></pre>\n<h5 id=\"Insert操作\"><a href=\"#Insert操作\" class=\"headerlink\" title=\"Insert操作\"></a>Insert操作</h5><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"> package main\n\n import (\n &quot;fmt&quot;\n _ &quot;github.com&#x2F;go-sql-driver&#x2F;mysql&quot;\n &quot;github.com&#x2F;jmoiron&#x2F;sqlx&quot;\n )\n\n type Person struct &#123;\n UserId int &#96;db:&quot;user_id&quot;&#96;\n Username string &#96;db:&quot;username&quot;&#96;\n Sex string &#96;db:&quot;sex&quot;&#96;\n Email string &#96;db:&quot;email&quot;&#96;\n &#125;\n\n type Place struct &#123;\n Country string &#96;db:&quot;country&quot;&#96;\n City string &#96;db:&quot;city&quot;&#96;\n TelCode int &#96;db:&quot;telcode&quot;&#96;\n &#125;\n\n var Db *sqlx.DB\n\n func init() &#123;\n database, err :&#x3D; sqlx.Open(&quot;mysql&quot;, &quot;debian-sys-maint:ACrhxSvWeDh0z8Km@tcp(127.0.0.1:3306)&#x2F;test&quot;)\n if err !&#x3D; nil &#123;\n fmt.Println(&quot;open mysql failed,&quot;, err)\n return\n &#125;\n Db &#x3D; database\n &#125;\n\n func main() &#123;\n\nr, err :&#x3D; Db.Exec(&quot;insert into person(username, sex, email)values(?, ?,\n?)&quot;, &quot;stu001&quot;, &quot;man&quot;, &quot;stu01@qq.com&quot;)\n if err !&#x3D; nil &#123;\n fmt.Println(&quot;exec failed, &quot;, err)\n return\n &#125;\n id, err :&#x3D; r.LastInsertId()\n if err !&#x3D; nil &#123;\n fmt.Println(&quot;exec failed, &quot;, err)\n return\n &#125;\n\n fmt.Println(&quot;insert succ:&quot;, id)\n &#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/283e90333280483fbddcf461d86611fa.png\" alt=\"请添加图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/8213d259d6cc476bb82ba36515486a5f.png\" alt=\"请添加图片描述\"></p>\n<h5 id=\"Select操作\"><a href=\"#Select操作\" class=\"headerlink\" title=\"Select操作\"></a>Select操作</h5><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"> package main\n\n import (\n &quot;fmt&quot;\n\n _ &quot;github.com&#x2F;go-sql-driver&#x2F;mysql&quot;\n &quot;github.com&#x2F;jmoiron&#x2F;sqlx&quot;\n )\n\n type Person struct &#123;\n UserId int &#96;db:&quot;user_id&quot;&#96;\n Username string &#96;db:&quot;username&quot;&#96;\n Sex string &#96;db:&quot;sex&quot;&#96;\n Email string &#96;db:&quot;email&quot;&#96;\n &#125;\n type Place struct &#123;\n Country string &#96;db:&quot;country&quot;&#96;\n City string &#96;db:&quot;city&quot;&#96;\n TelCode int &#96;db:&quot;telcode&quot;&#96;\n &#125;\n\n var Db *sqlx.DB\n\n func init() &#123;\n\n database, err :&#x3D; sqlx.Open(&quot;mysql&quot;, &quot;debian-sys-maint:ACrhxSvWeDh0z8Km@tcp(127.0.0.1:3306)&#x2F;test&quot;)\n if err !&#x3D; nil &#123;\n fmt.Println(&quot;open mysql failed,&quot;, err)\n return\n &#125;\n\n Db &#x3D; database\n &#125;\n\n func main() &#123;\n\n var person []Person\n\nerr :&#x3D; Db.Select(&amp;person, &quot;select user_id, username, sex, email from person\nwhere user_id&#x3D;?&quot;, 1)\n if err !&#x3D; nil &#123;\n fmt.Println(&quot;exec failed, &quot;, err)\n return\n &#125;\n\n fmt.Println(&quot;select succ:&quot;, person)\n &#125;</code></pre>\n<h5 id=\"update操作\"><a href=\"#update操作\" class=\"headerlink\" title=\"update操作\"></a>update操作</h5><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"> package main\n\n import (\n &quot;fmt&quot;\n\n _ &quot;github.com&#x2F;go-sql-driver&#x2F;mysql&quot;\n &quot;github.com&#x2F;jmoiron&#x2F;sqlx&quot;\n )\n\n type Person struct &#123;\n UserId int &#96;db:&quot;user_id&quot;&#96;\n Username string &#96;db:&quot;username&quot;&#96;\n Sex string &#96;db:&quot;sex&quot;&#96;\n Email string &#96;db:&quot;email&quot;&#96;\n &#125;\n\n type Place struct &#123;\n Country string &#96;db:&quot;country&quot;&#96;\n City string &#96;db:&quot;city&quot;&#96;\n TelCode int &#96;db:&quot;telcode&quot;&#96;\n &#125;\n\n var Db *sqlx.DB\n\n func init() &#123;\n\n database, err :&#x3D; sqlx.Open(&quot;mysql&quot;, &quot;root:root@tcp(127.0.0.1:3306)&#x2F;test&quot;)\n if err !&#x3D; nil &#123;\n fmt.Println(&quot;open mysql failed,&quot;, err)\n return\n &#125;\n\n Db &#x3D; database\n &#125;\n\n func main() &#123;\n\n\nres, err :&#x3D; Db.Exec(&quot;update person set username&#x3D;? where user_id&#x3D;?&quot;,\n&quot;stu0003&quot;, 1)\n if err !&#x3D; nil &#123;\n fmt.Println(&quot;exec failed, &quot;, err)\n return\n &#125;\n row, err :&#x3D; res.RowsAffected()\n if err !&#x3D; nil &#123;\n fmt.Println(&quot;rows failed, &quot;,err)\n &#125;\n fmt.Println(&quot;update succ:&quot;,row)\n\n &#125;</code></pre>\n<h5 id=\"delete操作\"><a href=\"#delete操作\" class=\"headerlink\" title=\"delete操作\"></a>delete操作</h5><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n&quot;fmt&quot;\n\n_ &quot;github.com&#x2F;go-sql-driver&#x2F;mysql&quot;\n&quot;github.com&#x2F;jmoiron&#x2F;sqlx&quot;\n)\n\ntype Person struct &#123;\nUserId int &#96;db:&quot;user_id&quot;&#96;\nUsername string &#96;db:&quot;username&quot;&#96;\nSex string &#96;db:&quot;sex&quot;&#96;\nEmail string &#96;db:&quot;email&quot;&#96;\n&#125;\n\ntype Place struct &#123;\nCountry string &#96;db:&quot;country&quot;&#96;\nCity string &#96;db:&quot;city&quot;&#96;\nTelCode int &#96;db:&quot;telcode&quot;&#96;\n&#125;\n\nvar Db *sqlx.DB\n\nfunc init() &#123;\n\ndatabase, err :&#x3D; sqlx.Open(&quot;mysql&quot;, &quot;root:root@tcp(127.0.0.1:3306)&#x2F;test&quot;)\nif err !&#x3D; nil &#123;\nfmt.Println(&quot;open mysql failed,&quot;, err)\nreturn\n&#125;\n\nDb &#x3D; database\n&#125;\n\nfunc main() &#123;\n\n&#x2F;*\n_, err :&#x3D; Db.Exec(&quot;delete from person where user_id&#x3D;?&quot;, 1)\nif err !&#x3D; nil &#123;\nfmt.Println(&quot;exec failed, &quot;, err)\nreturn\n&#125;\n*&#x2F;\n\nres, err :&#x3D; Db.Exec(&quot;delete from person where user_id&#x3D;?&quot;, 1)\nif err !&#x3D; nil &#123;\nfmt.Println(&quot;exec failed, &quot;, err)\nreturn\n&#125;\n\nrow,err :&#x3D; res.RowsAffected()\nif err !&#x3D; nil &#123;\nfmt.Println(&quot;rows failed, &quot;,err)\n&#125;\n\nfmt.Println(&quot;delete succ: &quot;,row)\n&#125;</code></pre>\n<h5 id=\"Mysql事务\"><a href=\"#Mysql事务\" class=\"headerlink\" title=\"Mysql事务\"></a>Mysql事务</h5><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"> package main\n\n import (\n &quot;fmt&quot;\n\n _ &quot;github.com&#x2F;go-sql-driver&#x2F;mysql&quot;\n &quot;github.com&#x2F;jmoiron&#x2F;sqlx&quot;\n )\n\n type Person struct &#123;\n UserId int &#96;db:&quot;user_id&quot;&#96;\n Username string &#96;db:&quot;username&quot;&#96;\n Sex string &#96;db:&quot;sex&quot;&#96;\n Email string &#96;db:&quot;email&quot;&#96;\n &#125;\n\n type Place struct &#123;\n Country string &#96;db:&quot;country&quot;&#96;\n City string &#96;db:&quot;city&quot;&#96;\n TelCode int &#96;db:&quot;telcode&quot;&#96;\n &#125;\n\n var Db *sqlx.DB\n func init() &#123;\n\ndatabase, err :&#x3D; sqlx.Open(&quot;mysql&quot;,\n&quot;root:root@tcp(127.0.0.1:3306)&#x2F;test&quot;)\n if err !&#x3D; nil &#123;\n fmt.Println(&quot;open mysql failed,&quot;, err)\n return\n &#125;\n Db &#x3D; database\n &#125;\n\n func main() &#123;\n conn, err :&#x3D; Db.Begin()\n if err !&#x3D; nil &#123;\n fmt.Println(&quot;begin failed :&quot;, err)\n return\n &#125;\n\n\nr, err :&#x3D; conn.Exec(&quot;insert into person(username, sex, email)values(?,\n?, ?)&quot;, &quot;stu001&quot;, &quot;man&quot;, &quot;stu01@qq.com&quot;)\n if err !&#x3D; nil &#123;\n fmt.Println(&quot;exec failed, &quot;, err)\n conn.Rollback()\n return\n &#125;\n id, err :&#x3D; r.LastInsertId()\n if err !&#x3D; nil &#123;\n fmt.Println(&quot;exec failed, &quot;, err)\n conn.Rollback()\n return\n &#125;\n fmt.Println(&quot;insert succ:&quot;, id)\n\n\nr, err &#x3D; conn.Exec(&quot;insert into person(username, sex, email)values(?,\n?, ?)&quot;, &quot;stu001&quot;, &quot;man&quot;, &quot;stu01@qq.com&quot;)\n if err !&#x3D; nil &#123;\n fmt.Println(&quot;exec failed, &quot;, err)\n conn.Rollback()\n return\n &#125;\n id, err &#x3D; r.LastInsertId()\n if err !&#x3D; nil &#123;\n fmt.Println(&quot;exec failed, &quot;, err)\n conn.Rollback()\n return\n &#125;\n fmt.Println(&quot;insert succ:&quot;, id)\n\n conn.Commit()\n &#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/9a18ce41bd6e4c75a1b96c427c02f90b.png\" alt=\"请添加图片描述\"></p>\n<p>查看MySQL：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">mysql&gt; select * from person;\n+---------+----------+------+--------------+\n| user_id | username | sex | email |\n+---------+----------+------+--------------+\n| 2 | stu001 | man | stu01@qq.com |\n| 3 | stu001 | man | stu01@qq.com |\n+---------+----------+------+--------------+\n2 rows in set (0.00 sec)</code></pre>\n<h2 id=\"Gin框架\"><a href=\"#Gin框架\" class=\"headerlink\" title=\"Gin框架\"></a>Gin框架</h2><h3 id=\"安装配置\"><a href=\"#安装配置\" class=\"headerlink\" title=\"安装配置\"></a>安装配置</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">go get -u github.com&#x2F;gin-gonic&#x2F;gin\nimport &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n</code></pre>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"> package main\n\n import (\n &quot;net&#x2F;http&quot;\n\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n )\n\n func main() &#123;\n &#x2F;&#x2F; 1.创建路由\n r :&#x3D; gin.Default()\n &#x2F;&#x2F; 2.绑定路由规则，执行的函数\n &#x2F;&#x2F; gin.Context，封装了request和response\n r.GET(&quot;&#x2F;&quot;, func(c *gin.Context) &#123;\n c.String(http.StatusOK, &quot;hello World!&quot;)\n &#125;)\n &#x2F;&#x2F; 3.监听端口，默认在8080\n&#x2F;&#x2F; Run(&quot;里面不指定端口号默认为8080&quot;)\n r.Run(&quot;:8000&quot;)\n &#125;</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://zhuanlan.zhihu.com/p/453462046\">https://zhuanlan.zhihu.com/p/453462046</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_63943623/article/details/124245012\">https://blog.csdn.net/weixin_63943623/article/details/124245012</a></p>\n<p><img src=\"https://img-blog.csdnimg.cn/ccf423c51c0d40e78efdf9a55d95bdd1.png\" alt=\"请添加图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/f4f1c869520349f9ba4e7b19feb71260.png\" alt=\"请添加图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/29a9c7dccda545f2895e38ba194e4ed4.png\" alt=\"请添加图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/3088cc63ca9a4c50ba9bafa668c65a98.png\" alt=\"请添加图片描述\"></p>\n<h3 id=\"gin路由\"><a href=\"#gin路由\" class=\"headerlink\" title=\"gin路由\"></a>gin路由</h3></blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n&quot;net&#x2F;http&quot;\n&quot;strings&quot;\n\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc main() &#123;\nr :&#x3D; gin.Default()\nr.GET(&quot;&#x2F;user&#x2F;:name&#x2F;*action&quot;, func(c *gin.Context) &#123;\nname :&#x3D; c.Param(&quot;name&quot;)\naction :&#x3D; c.Param(&quot;action&quot;)\n&#x2F;&#x2F;截取&#x2F;\naction &#x3D; strings.Trim(action, &quot;&#x2F;&quot;)\nc.String(http.StatusOK, name+&quot; is &quot;+action)\n&#125;)\n&#x2F;&#x2F;默认为监听8080端口\nr.Run(&quot;:8000&quot;)\n&#125;</code></pre>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n&quot;fmt&quot;\n&quot;net&#x2F;http&quot;\n\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc main() &#123;\nr :&#x3D; gin.Default()\nr.GET(&quot;&#x2F;user&quot;, func(c *gin.Context) &#123;\n&#x2F;&#x2F;指定默认值\n&#x2F;&#x2F;http:&#x2F;&#x2F;localhost:8080&#x2F;user 才会打印出来默认的值\nname :&#x3D; c.DefaultQuery(&quot;name&quot;, &quot;枯藤&quot;)\nc.String(http.StatusOK, fmt.Sprintf(&quot;hello %s&quot;, name))\n&#125;)\nr.Run()\n&#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/fcee3ed6b28e4c21935567d969e2acde.png\" alt=\"请添加图片描述\"></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"> &lt;!DOCTYPE html&gt;\n &lt;html lang&#x3D;&quot;en&quot;&gt;\n &lt;head&gt;\n &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;\n &lt;title&gt;Document&lt;&#x2F;title&gt;\n &lt;&#x2F;head&gt;\n &lt;body&gt;\n\n&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;form&quot; method&#x3D;&quot;post&quot;\naction&#x3D;&quot;application&#x2F;x-www-form-urlencoded&quot;&gt;\n\n用户名：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; placeholder&#x3D;&quot;请输入你的用户名&quot;&gt;\n&lt;br&gt;\n\n密&amp;nbsp;&amp;nbsp;&amp;nbsp;码：&lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;userpassword&quot;\nplaceholder&#x3D;&quot;请输入你的密码&quot;&gt; &lt;br&gt;\n &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;\n &lt;&#x2F;form&gt;\n &lt;&#x2F;body&gt;\n &lt;&#x2F;html&gt;</code></pre>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\n &#x2F;&#x2F;\n import (\n &quot;fmt&quot;\n &quot;net&#x2F;http&quot;\n\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n )\n\n\n func main() &#123;\n r :&#x3D; gin.Default()\n r.POST(&quot;&#x2F;form&quot;, func(c *gin.Context) &#123;\n types :&#x3D; c.DefaultPostForm(&quot;type&quot;, &quot;post&quot;)\n username :&#x3D; c.PostForm(&quot;username&quot;)\n password :&#x3D; c.PostForm(&quot;userpassword&quot;)\n\n&#x2F;&#x2F; c.String(http.StatusOK,\nfmt.Sprintf(&quot;username:%s,password:%s,type:%s&quot;, username, password, types))\n\nc.String(http.StatusOK, fmt.Sprintf(&quot;username:%s,password:%s,type:%s&quot;,\nusername, password, types))\n &#125;)\n r.Run()\n &#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/242acceb9cc5437bbf65feded76ed453.png\" alt=\"请添加图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/5f4c6c7a565645d3b5e440ba0dc83822.png\" alt=\"请添加图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/2a62672adaed4184b4688aa35298c4b0.png\" alt=\"请添加图片描述\"></p>\n<h4 id=\"上传单个文件\"><a href=\"#上传单个文件\" class=\"headerlink\" title=\"上传单个文件\"></a>上传单个文件</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"> &lt;!DOCTYPE html&gt;\n &lt;html lang&#x3D;&quot;en&quot;&gt;\n &lt;head&gt;\n &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;\n &lt;title&gt;Document&lt;&#x2F;title&gt;\n &lt;&#x2F;head&gt;\n &lt;body&gt;\n\n&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;upload&quot; method&#x3D;&quot;post&quot;\nenctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;\n 上传文件:&lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;file&quot; &gt;\n &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;\n &lt;&#x2F;form&gt;\n &lt;&#x2F;body&gt;\n &lt;&#x2F;html&gt;</code></pre>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc main() &#123;\nr :&#x3D; gin.Default()\n&#x2F;&#x2F;限制上传最大尺寸\nr.MaxMultipartMemory &#x3D; 8 &lt;&lt; 20\nr.POST(&quot;&#x2F;upload&quot;, func(c *gin.Context) &#123;\nfile, err :&#x3D; c.FormFile(&quot;file&quot;)\nif err !&#x3D; nil &#123;\nc.String(500, &quot;上传图片出错&quot;)\n&#125;\n&#x2F;&#x2F; c.JSON(200, gin.H&#123;&quot;message&quot;: file.Header.Context&#125;)\nc.SaveUploadedFile(file, file.Filename)\n\nc.String(http.StatusOK, file.Filename)\n&#125;)\nr.Run()\n&#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/5a218c3eacd44934ae12aeb21d667c0e.png\" alt=\"请添加图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/ac64f1d7a35940dcbb30f028954a89a0.png\" alt=\"请添加图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/9fdf025d380a472c899d962b3cc28f5c.png\" alt=\"请添加图片描述\"></p>\n<h5 id=\"上传特定文件\"><a href=\"#上传特定文件\" class=\"headerlink\" title=\"上传特定文件\"></a>上传特定文件</h5><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"> package main\n\n import (\n &quot;fmt&quot;\n &quot;log&quot;\n &quot;net&#x2F;http&quot;\n\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n )\n\n func main() &#123;\n r :&#x3D; gin.Default()\n r.POST(&quot;&#x2F;upload&quot;, func(c *gin.Context) &#123;\n _, headers, err :&#x3D; c.Request.FormFile(&quot;file&quot;)\n if err !&#x3D; nil &#123;\nlog.Printf(&quot;Error when try to get file: %v&quot;, err)\n &#125;\n &#x2F;&#x2F;headers.Size 获取文件大小\n if headers.Size &gt; 1024*1024*2 &#123;\n fmt.Println(&quot;文件太大了&quot;)\n return\n &#125;\n &#x2F;&#x2F;headers.Header.Get(&quot;Content-Type&quot;)获取上传文件的类型\n if headers.Header.Get(&quot;Content-Type&quot;) !&#x3D; &quot;image&#x2F;png&quot; &#123;\n fmt.Println(&quot;只允许上传png图片&quot;)\n return\n &#125;\n c.SaveUploadedFile(headers, &quot;.&#x2F;video&#x2F;&quot;+headers.Filename)\n c.String(http.StatusOK, headers.Filename)\n &#125;)\n r.Run()\n &#125;</code></pre>\n<h4 id=\"上传多个文件\"><a href=\"#上传多个文件\" class=\"headerlink\" title=\"上传多个文件\"></a>上传多个文件</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"> &lt;!DOCTYPE html&gt;\n &lt;html lang&#x3D;&quot;en&quot;&gt;\n &lt;head&gt;\n &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;\n &lt;title&gt;Document&lt;&#x2F;title&gt;\n &lt;&#x2F;head&gt;\n &lt;body&gt;\n\n&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;localhost:8000&#x2F;upload&quot; method&#x3D;&quot;post&quot;\nenctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;\n 上传文件:&lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;files&quot; multiple&gt;\n &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;\n &lt;&#x2F;form&gt;\n &lt;&#x2F;body&gt;\n &lt;&#x2F;html&gt;</code></pre>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"> package main\n\n import (\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n &quot;net&#x2F;http&quot;\n &quot;fmt&quot;\n )\n\n &#x2F;&#x2F; gin的helloWorld\n\n func main() &#123;\n &#x2F;&#x2F; 1.创建路由\n &#x2F;&#x2F; 默认使用了2个中间件Logger(), Recovery()\n r :&#x3D; gin.Default()\n &#x2F;&#x2F; 限制表单上传大小 8MB，默认为32MB\n r.MaxMultipartMemory &#x3D; 8 &lt;&lt; 20\n r.POST(&quot;&#x2F;upload&quot;, func(c *gin.Context) &#123;\n form, err :&#x3D; c.MultipartForm()\n if err !&#x3D; nil &#123;\n\nc.String(http.StatusBadRequest, fmt.Sprintf(&quot;get err %s&quot;,\nerr.Error()))\n &#125;\n &#x2F;&#x2F; 获取所有图片\n files :&#x3D; form.File[&quot;files&quot;]\n &#x2F;&#x2F; 遍历所有图片\n for _, file :&#x3D; range files &#123;\n &#x2F;&#x2F; 逐个存\n if err :&#x3D; c.SaveUploadedFile(file, file.Filename); err !&#x3D; nil &#123;\n\nc.String(http.StatusBadRequest, fmt.Sprintf(&quot;upload err %s&quot;,\nerr.Error()))\n return\n &#125;\n &#125;\n c.String(200, fmt.Sprintf(&quot;upload ok %d files&quot;, len(files)))\n &#125;)\n &#x2F;&#x2F;默认端口号是8080\n r.Run(&quot;:8000&quot;)\n &#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/26f869d783fa40f98f991434e1774815.png\" alt=\"请添加图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/dae8b43fa660489e818cb8b2e151b704.png\" alt=\"请添加图片描述\"></p>\n<h4 id=\"routes-group\"><a href=\"#routes-group\" class=\"headerlink\" title=\"routes group\"></a>routes group</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"> package main\n\n import (\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n &quot;fmt&quot;\n )\n\n&#x2F;&#x2F; gin的helloWorld\n\n func main() &#123;\n &#x2F;&#x2F; 1.创建路由\n &#x2F;&#x2F; 默认使用了2个中间件Logger(), Recovery()\n r :&#x3D; gin.Default()\n &#x2F;&#x2F; 路由组1 ，处理GET请求\n v1 :&#x3D; r.Group(&quot;&#x2F;v1&quot;)\n &#x2F;&#x2F; &#123;&#125; 是书写规范\n &#123;\n v1.GET(&quot;&#x2F;login&quot;, login)\n v1.GET(&quot;submit&quot;, submit)\n &#125;\n v2 :&#x3D; r.Group(&quot;&#x2F;v2&quot;)\n &#123;\n v2.POST(&quot;&#x2F;login&quot;, login)\n v2.POST(&quot;&#x2F;submit&quot;, submit)\n &#125;\n r.Run(&quot;:8000&quot;)\n &#125;\n\n func login(c *gin.Context) &#123;\n name :&#x3D; c.DefaultQuery(&quot;name&quot;, &quot;jack&quot;)\n c.String(200, fmt.Sprintf(&quot;hello %s\\n&quot;, name))\n &#125;\n\n func submit(c *gin.Context) &#123;\n name :&#x3D; c.DefaultQuery(&quot;name&quot;, &quot;lily&quot;)\n c.String(200, fmt.Sprintf(&quot;hello %s\\n&quot;, name))\n &#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/5e1a29197d3a422b99136c2341a4df9a.png\" alt=\"请添加图片描述\"></p>\n<h3 id=\"路由拆分与注册\"><a href=\"#路由拆分与注册\" class=\"headerlink\" title=\"路由拆分与注册\"></a>路由拆分与注册</h3><h4 id=\"基本的路由注册\"><a href=\"#基本的路由注册\" class=\"headerlink\" title=\"基本的路由注册\"></a>基本的路由注册</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n&quot;net&#x2F;http&quot;\n\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc helloHandler(c *gin.Context) &#123;\nc.JSON(http.StatusOK, gin.H&#123;\n&quot;message&quot;: &quot;Hello www.topgoer.com!&quot;,\n&#125;)\n&#125;\n\nfunc main() &#123;\nr :&#x3D; gin.Default()\nr.GET(&quot;&#x2F;topgoer&quot;, helloHandler)\nif err :&#x3D; r.Run(); err !&#x3D; nil &#123;\nfmt.Println(&quot;startup service failed, err:%v\\n&quot;, err)\n&#125;\n&#125;</code></pre>\n<h4 id=\"路由拆分成单独文件或包\"><a href=\"#路由拆分成单独文件或包\" class=\"headerlink\" title=\"路由拆分成单独文件或包\"></a>路由拆分成单独文件或包</h4><p>当项目的规模增大后就不太适合继续在项目的main.go文件中去实现路由注册相关逻辑了，我们会倾向<br>于把路由部分的代码都拆分出来，形成一个单独的文件或包：<br>我们在routers.go文件中定义并注册路由信息：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n&quot;net&#x2F;http&quot;\n\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc helloHandler(c *gin.Context) &#123;\nc.JSON(http.StatusOK, gin.H&#123;\n&quot;message&quot;: &quot;Hello www.topgoer.com!&quot;,\n&#125;)\n&#125;\n\nfunc setupRouter() *gin.Engine &#123;\nr :&#x3D; gin.Default()\nr.GET(&quot;&#x2F;topgoer&quot;, helloHandler)\nreturn r\n&#125;</code></pre>\n<p>此时main.go中调用上面定义好的setupRouter函数：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func main() &#123;\nr :&#x3D; setupRouter()\nif err :&#x3D; r.Run(); err !&#x3D; nil &#123;\nfmt.Println(&quot;startup service failed, err:%v\\n&quot;, err)\n&#125;\n&#125;</code></pre>\n<p>routers/routers.go需要注意此时setupRouter需要改成首字母大写：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package routers\n\nimport (\n&quot;net&#x2F;http&quot;\n\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc helloHandler(c *gin.Context) &#123;\nc.JSON(http.StatusOK, gin.H&#123;\n&quot;message&quot;: &quot;Hello www.topgoer.com&quot;,\n&#125;)\n&#125;\n\n&#x2F;&#x2F; SetupRouter 配置路由信息\nfunc SetupRouter() *gin.Engine &#123;\nr :&#x3D; gin.Default()\nr.GET(&quot;&#x2F;topgoer&quot;, helloHandler)\nreturn r\n&#125;</code></pre>\n<p>main.go文件内容如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n&quot;fmt&quot;\n&quot;gin_demo&#x2F;routers&quot;\n)\n\nfunc main() &#123;\nr :&#x3D; routers.SetupRouter()\nif err :&#x3D; r.Run(); err !&#x3D; nil &#123;\nfmt.Println(&quot;startup service failed, err:%v\\n&quot;, err)\n&#125;\n&#125;</code></pre>\n<h4 id=\"路由拆分成多个文件\"><a href=\"#路由拆分成多个文件\" class=\"headerlink\" title=\"路由拆分成多个文件\"></a>路由拆分成多个文件</h4><p>我们可以分开定义多个路由文件，例如：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">1. gin_demo\n2. ├── go.mod\n3. ├── go.sum\n4. ├── main.go\n5. └── routers\n6. ├── blog.go\n7. └── shop.go</code></pre>\n<p>routers/shop.go中添加一个LoadShop的函数，将shop相关的路由注册到指定的路由器：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func LoadShop(e *gin.Engine) &#123;\ne.GET(&quot;&#x2F;hello&quot;, helloHandler)\ne.GET(&quot;&#x2F;goods&quot;, goodsHandler)\ne.GET(&quot;&#x2F;checkout&quot;, checkoutHandler)\n...\n&#125;</code></pre>\n<p>routers/blog.go中添加一个LoadBlog的函数，将blog相关的路由注册到指定的路由器：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func LoadBlog(e *gin.Engine) &#123;\ne.GET(&quot;&#x2F;post&quot;, postHandler)\ne.GET(&quot;&#x2F;comment&quot;, commentHandler)\n...\n&#125;</code></pre>\n<p>在main函数中实现最终的注册逻辑如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func main() &#123;\nr :&#x3D; gin.Default()\nrouters.LoadBlog(r)\nrouters.LoadShop(r)\nif err :&#x3D; r.Run(); err !&#x3D; nil &#123;\nfmt.Println(&quot;startup service failed, err:%v\\n&quot;, err)\n &#125;\n&#125;</code></pre>\n<h4 id=\"路由拆分到不同APP\"><a href=\"#路由拆分到不同APP\" class=\"headerlink\" title=\"路由拆分到不同APP\"></a>路由拆分到不同APP</h4><p>有时候项目规模实在太大，那么我们就更倾向于把业务拆分的更详细一些，例如把不同的业务代码拆分<br>成不同的APP。<br>因此我们在项目目录下单独定义一个app目录，用来存放我们不同业务线的代码文件，这样就很容易进<br>行横向扩展。大致目录结构如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">1. gin_demo\n2. ├── app\n3. │ ├── blog\n4. │ │ ├── handler.go\n5. │ │ └── router.go\n6. │ └── shop\n7. │ ├── handler.go\n8. │ └── router.go\n9. ├── go.mod\n10. ├── go.sum\n11. ├── main.go\n12. └── routers\n13. └── routers.go</code></pre>\n<p>其中app/blog/router.go用来定义post相关路由信息，具体内容如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func Routers(e *gin.Engine) &#123;\ne.GET(&quot;&#x2F;post&quot;, postHandler)\ne.GET(&quot;&#x2F;comment&quot;, commentHandler)\n&#125;</code></pre>\n<p>app/shop/router.go用来定义shop相关路由信息，具体内容如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func Routers(e *gin.Engine) &#123;\ne.GET(&quot;&#x2F;goods&quot;, goodsHandler)\ne.GET(&quot;&#x2F;checkout&quot;, checkoutHandler)\n&#125;</code></pre>\n<p>routers/routers.go中根据需要定义Include函数用来注册子app中定义的路由，Init函数用来进<br>行路由的初始化操作：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">type Option func(*gin.Engine)\n\nvar options &#x3D; []Option&#123;&#125;\n\n&#x2F;&#x2F; 注册app的路由配置\nfunc Include(opts ...Option) &#123;\noptions &#x3D; append(options, opts...)\n&#125;\n\n&#x2F;&#x2F; 初始化\nfunc Init() *gin.Engine &#123;\nr :&#x3D; gin.New()\nfor _, opt :&#x3D; range options &#123;\nopt(r)\n&#125;\nreturn r\n&#125;</code></pre>\n<p>main.go中按如下方式先注册子app中的路由，然后再进行路由的初始化：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func main() &#123;\n&#x2F;&#x2F; 加载多个APP的路由配置\nrouters.Include(shop.Routers, blog.Routers)\n&#x2F;&#x2F; 初始化路由\nr :&#x3D; routers.Init()\nif err :&#x3D; r.Run(); err !&#x3D; nil &#123;\nfmt.Println(&quot;startup service failed, err:%v\\n&quot;, err)\n&#125;\n&#125;</code></pre>\n<h3 id=\"gin数据解析与绑定\"><a href=\"#gin数据解析与绑定\" class=\"headerlink\" title=\"gin数据解析与绑定\"></a>gin数据解析与绑定</h3><h4 id=\"Json-数据解析和绑定\"><a href=\"#Json-数据解析和绑定\" class=\"headerlink\" title=\"Json 数据解析和绑定\"></a>Json 数据解析和绑定</h4><p>客户端传参，后端接收并解析到结构体：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"> package main\n\n import (\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n &quot;net&#x2F;http&quot;\n )\n\n&#x2F;&#x2F; 定义接收数据的结构体\n type Login struct &#123;\n &#x2F;&#x2F; binding:&quot;required&quot;修饰的字段，若接收为空值，则报错，是必须字段\n\nUser string &#96;form:&quot;username&quot; json:&quot;user&quot; uri:&quot;user&quot; xml:&quot;user&quot;\nbinding:&quot;required&quot;&#96;\n\nPssword string &#96;form:&quot;password&quot; json:&quot;password&quot; uri:&quot;password&quot;\nxml:&quot;password&quot; binding:&quot;required&quot;&#96;\n &#125;\n\n func main() &#123;\n &#x2F;&#x2F; 1.创建路由\n &#x2F;&#x2F; 默认使用了2个中间件Logger(), Recovery()\n r :&#x3D; gin.Default()\n &#x2F;&#x2F; JSON绑定\n r.POST(&quot;loginJSON&quot;, func(c *gin.Context) &#123;\n &#x2F;&#x2F; 声明接收的变量\n var json Login\n &#x2F;&#x2F; 将request的body中的数据，自动按照json格式解析到结构体\n if err :&#x3D; c.ShouldBindJSON(&amp;json); err !&#x3D; nil &#123;\n &#x2F;&#x2F; 返回错误信息\n &#x2F;&#x2F; gin.H封装了生成json数据的工具\n c.JSON(http.StatusBadRequest, gin.H&#123;&quot;error&quot;: err.Error()&#125;)\n return\n &#125;\n &#x2F;&#x2F; 判断用户名密码是否正确\n if json.User !&#x3D; &quot;root&quot; || json.Pssword !&#x3D; &quot;admin&quot; &#123;\n c.JSON(http.StatusBadRequest, gin.H&#123;&quot;status&quot;: &quot;304&quot;&#125;)\n return\n &#125;\n c.JSON(http.StatusOK, gin.H&#123;&quot;status&quot;: &quot;200&quot;&#125;)\n &#125;)\n r.Run(&quot;:8000&quot;)\n &#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/e185cb3a75734ac1abf2c74500bf528d.png\" alt=\"请添加图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/5eba1d75828b43aeae04ae396aadda6a.png\" alt=\"请添加图片描述\"></p>\n<h4 id=\"表单数据解析和绑定\"><a href=\"#表单数据解析和绑定\" class=\"headerlink\" title=\"表单数据解析和绑定\"></a>表单数据解析和绑定</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"> &lt;!DOCTYPE html&gt;\n &lt;html lang&#x3D;&quot;en&quot;&gt;\n &lt;head&gt;\n &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;\n &lt;title&gt;Document&lt;&#x2F;title&gt;\n &lt;&#x2F;head&gt;\n &lt;body&gt;\n\n&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;localhost:8000&#x2F;loginForm&quot; method&#x3D;&quot;post&quot;\nenctype&#x3D;&quot;application&#x2F;x-www-form-urlencoded&quot;&gt;\n 用户名&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&gt;&lt;br&gt;\n 密码&lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot;&gt;\n &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;\n &lt;&#x2F;form&gt;\n &lt;&#x2F;body&gt;\n &lt;&#x2F;html&gt;</code></pre>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"> package main\n\n import (\n &quot;net&#x2F;http&quot;\n\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n )\n\n &#x2F;&#x2F; 定义接收数据的结构体\n type Login struct &#123;\n &#x2F;&#x2F; binding:&quot;required&quot;修饰的字段，若接收为空值，则报错，是必须字段\n\nUser string &#96;form:&quot;username&quot; json:&quot;user&quot; uri:&quot;user&quot; xml:&quot;user&quot;\nbinding:&quot;required&quot;&#96;\n\nPssword string &#96;form:&quot;password&quot; json:&quot;password&quot; uri:&quot;password&quot;\nxml:&quot;password&quot; binding:&quot;required&quot;&#96;\n &#125;\n\n func main() &#123;\n &#x2F;&#x2F; 1.创建路由\n &#x2F;&#x2F; 默认使用了2个中间件Logger(), Recovery()\n r :&#x3D; gin.Default()\n &#x2F;&#x2F; JSON绑定\n r.POST(&quot;&#x2F;loginForm&quot;, func(c *gin.Context) &#123;\n &#x2F;&#x2F; 声明接收的变量\n var form Login\n &#x2F;&#x2F; Bind()默认解析并绑定form格式\n &#x2F;&#x2F; 根据请求头中content-type自动推断\n if err :&#x3D; c.Bind(&amp;form); err !&#x3D; nil &#123;\n c.JSON(http.StatusBadRequest, gin.H&#123;&quot;error&quot;: err.Error()&#125;)\n return\n &#125;\n &#x2F;&#x2F; 判断用户名密码是否正确\n if form.User !&#x3D; &quot;root&quot; || form.Pssword !&#x3D; &quot;admin&quot; &#123;\n c.JSON(http.StatusBadRequest, gin.H&#123;&quot;status&quot;: &quot;304&quot;&#125;)\n return\n &#125;\n c.JSON(http.StatusOK, gin.H&#123;&quot;status&quot;: &quot;200&quot;&#125;)\n &#125;)\n r.Run(&quot;:8000&quot;)\n &#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/7c9aaf88065640c484c63d154c35683a.png\" alt=\"请添加图片描述\"></p>\n<h4 id=\"URI数据解析和绑定\"><a href=\"#URI数据解析和绑定\" class=\"headerlink\" title=\"URI数据解析和绑定\"></a>URI数据解析和绑定</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"> package main\n\n import (\n &quot;net&#x2F;http&quot;\n\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n )\n\n &#x2F;&#x2F; 定义接收数据的结构体\n type Login struct &#123;\n &#x2F;&#x2F; binding:&quot;required&quot;修饰的字段，若接收为空值，则报错，是必须字段\n\nUser string &#96;form:&quot;username&quot; json:&quot;user&quot; uri:&quot;user&quot; xml:&quot;user&quot;\nbinding:&quot;required&quot;&#96;\n\nPssword string &#96;form:&quot;password&quot; json:&quot;password&quot; uri:&quot;password&quot;\nxml:&quot;password&quot; binding:&quot;required&quot;&#96;\n &#125;\n\n func main() &#123;\n &#x2F;&#x2F; 1.创建路由\n &#x2F;&#x2F; 默认使用了2个中间件Logger(), Recovery()\n r :&#x3D; gin.Default()\n &#x2F;&#x2F; JSON绑定\n r.GET(&quot;&#x2F;:user&#x2F;:password&quot;, func(c *gin.Context) &#123;\n &#x2F;&#x2F; 声明接收的变量\n var login Login\n &#x2F;&#x2F; Bind()默认解析并绑定form格式\n &#x2F;&#x2F; 根据请求头中content-type自动推断\n if err :&#x3D; c.ShouldBindUri(&amp;login); err !&#x3D; nil &#123;\n c.JSON(http.StatusBadRequest, gin.H&#123;&quot;error&quot;: err.Error()&#125;)\n return\n  &#125;\n &#x2F;&#x2F; 判断用户名密码是否正确\n if login.User !&#x3D; &quot;root&quot; || login.Pssword !&#x3D; &quot;admin&quot; &#123;\n c.JSON(http.StatusBadRequest, gin.H&#123;&quot;status&quot;: &quot;304&quot;&#125;)\n return\n &#125;\n c.JSON(http.StatusOK, gin.H&#123;&quot;status&quot;: &quot;200&quot;&#125;)\n &#125;)\n r.Run(&quot;:8000&quot;)\n &#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/aaf9c9c0d07d4fcc8e2fa645b8693cb8.png\" alt=\"请添加图片描述\"></p>\n<h3 id=\"gin渲染\"><a href=\"#gin渲染\" class=\"headerlink\" title=\"gin渲染\"></a>gin渲染</h3><h4 id=\"各种数据格式的响应\"><a href=\"#各种数据格式的响应\" class=\"headerlink\" title=\"各种数据格式的响应\"></a>各种数据格式的响应</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&#x2F;testdata&#x2F;protoexample&quot;\n)\n\n&#x2F;&#x2F; 多种响应方式\nfunc main() &#123;\n&#x2F;&#x2F; 1.创建路由\n&#x2F;&#x2F; 默认使用了2个中间件Logger(), Recovery()\nr :&#x3D; gin.Default()\n&#x2F;&#x2F; 1.json\nr.GET(&quot;&#x2F;someJSON&quot;, func(c *gin.Context) &#123;\nc.JSON(200, gin.H&#123;&quot;message&quot;: &quot;someJSON&quot;, &quot;status&quot;: 200&#125;)\n&#125;)\n&#x2F;&#x2F; 2. 结构体响应\nr.GET(&quot;&#x2F;someStruct&quot;, func(c *gin.Context) &#123;\nvar msg struct &#123;\nName string\nMessage string\nNumber int\n&#125;\nmsg.Name &#x3D; &quot;root&quot;\nmsg.Message &#x3D; &quot;message&quot;\nmsg.Number &#x3D; 123\nc.JSON(200, msg)\n&#125;)\n&#x2F;&#x2F; 3.XML\nr.GET(&quot;&#x2F;someXML&quot;, func(c *gin.Context) &#123;\nc.XML(200, gin.H&#123;&quot;message&quot;: &quot;abc&quot;&#125;)\n&#125;)\n&#x2F;&#x2F; 4.YAML响应\nr.GET(&quot;&#x2F;someYAML&quot;, func(c *gin.Context) &#123;\nc.YAML(200, gin.H&#123;&quot;name&quot;: &quot;zhangsan&quot;&#125;)\n&#125;)\n&#x2F;&#x2F; 5.protobuf格式,谷歌开发的高效存储读取的工具\n&#x2F;&#x2F; 数组？切片？如果自己构建一个传输格式，应该是什么格式？\nr.GET(&quot;&#x2F;someProtoBuf&quot;, func(c *gin.Context) &#123;\nreps :&#x3D; []int64&#123;int64(1), int64(2)&#125;\n&#x2F;&#x2F; 定义数据\nlabel :&#x3D; &quot;label&quot;\n&#x2F;&#x2F; 传protobuf格式数据\ndata :&#x3D; &amp;protoexample.Test&#123;\nLabel: &amp;label,\nReps: reps,\n&#125;\nc.ProtoBuf(200, data)\n&#125;)\n\nr.Run(&quot;:8000&quot;)\n&#125;</code></pre>\n<h4 id=\"HTML模板渲染\"><a href=\"#HTML模板渲染\" class=\"headerlink\" title=\"HTML模板渲染\"></a>HTML模板渲染</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"> package main\n\n import (\n &quot;net&#x2F;http&quot;\n\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n )\n\n func main() &#123;\n r :&#x3D; gin.Default()\n r.LoadHTMLGlob(&quot;tem&#x2F;*&quot;)\n r.GET(&quot;&#x2F;index&quot;, func(c *gin.Context) &#123;\n\nc.HTML(http.StatusOK, &quot;index.html&quot;, gin.H&#123;&quot;title&quot;: &quot;我是测试&quot;, &quot;ce&quot;:\n&quot;123456&quot;&#125;)\n &#125;)\n r.Run()\n &#125;</code></pre>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n&lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;\n&lt;title&gt;&#123;&#123;.title&#125;&#125;&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\nfgkjdskjdsh&#123;&#123;.ce&#125;&#125;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/bc39bbd3a1ff452db7cd1755e70ebb42.png\" alt=\"在这里插入图片描述\"><br>代码如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"> package main\n\n import (\n &quot;net&#x2F;http&quot;\n\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n )\n\n func main() &#123;\n r :&#x3D; gin.Default()\n r.LoadHTMLGlob(&quot;tem&#x2F;**&#x2F;*&quot;)\n r.GET(&quot;&#x2F;index&quot;, func(c *gin.Context) &#123;\n\nc.HTML(http.StatusOK, &quot;user&#x2F;index.html&quot;, gin.H&#123;&quot;title&quot;: &quot;我是测试&quot;,\n&quot;address&quot;: &quot;www.5lmh.com&quot;&#125;)\n &#125;)\n r.Run()\n &#125;</code></pre>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#123;&#123; define &quot;user&#x2F;index.html&quot; &#125;&#125;\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n&lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;\n&lt;title&gt;&#123;&#123;.title&#125;&#125;&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\nfgkjdskjdsh&#123;&#123;.address&#125;&#125;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n&#123;&#123; end &#125;&#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/c665922df58c4670a12cffa70f0685df.png\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"> package main\n\n import (\n &quot;net&#x2F;http&quot;\n\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n )\n\n func main() &#123;\n r :&#x3D; gin.Default()\n r.LoadHTMLGlob(&quot;tem&#x2F;**&#x2F;*&quot;)\n r.GET(&quot;&#x2F;index&quot;, func(c *gin.Context) &#123;\n\nc.HTML(http.StatusOK, &quot;user&#x2F;index.html&quot;, gin.H&#123;&quot;title&quot;: &quot;我是测试&quot;,\n&quot;address&quot;: &quot;www.5lmh.com&quot;&#125;)\n &#125;)\n r.Run()\n &#125;</code></pre>\n<p>user/index.html 文件代码：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#123;&#123; define &quot;user&#x2F;index.html&quot; &#125;&#125;\n&#123;&#123;template &quot;public&#x2F;header&quot; .&#125;&#125;\nfgkjdskjdsh&#123;&#123;.address&#125;&#125;\n&#123;&#123;template &quot;public&#x2F;footer&quot; .&#125;&#125;\n&#123;&#123; end &#125;&#125;</code></pre>\n<p>public/header.html 文件代码：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#123;&#123;define &quot;public&#x2F;header&quot;&#125;&#125;\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n&lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;\n&lt;title&gt;&#123;&#123;.title&#125;&#125;&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n\n&#123;&#123;end&#125;&#125;</code></pre>\n<p>public/footer.html 文件代码：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#123;&#123;define &quot;public&#x2F;footer&quot;&#125;&#125;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n&#123;&#123; end &#125;&#125;</code></pre>\n<ul>\n<li>如果你需要引入静态文件需要定义一个静态文件目录</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">r.Static(&quot;&#x2F;assets&quot;, &quot;.&#x2F;assets&quot;)</code></pre>\n<h4 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n&quot;net&#x2F;http&quot;\n\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc main() &#123;\nr :&#x3D; gin.Default()\nr.GET(&quot;&#x2F;index&quot;, func(c *gin.Context) &#123;\nc.Redirect(http.StatusMovedPermanently, &quot;http:&#x2F;&#x2F;www.5lmh.com&quot;)\n&#125;)\nr.Run()\n&#125;</code></pre>\n<h4 id=\"同步异步\"><a href=\"#同步异步\" class=\"headerlink\" title=\"同步异步\"></a>同步异步</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n&quot;log&quot;\n&quot;time&quot;\n\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc main() &#123;\n&#x2F;&#x2F; 1.创建路由\n&#x2F;&#x2F; 默认使用了2个中间件Logger(), Recovery()\nr :&#x3D; gin.Default()\n&#x2F;&#x2F; 1.异步\nr.GET(&quot;&#x2F;long_async&quot;, func(c *gin.Context) &#123;\n&#x2F;&#x2F; 需要搞一个副本\ncopyContext :&#x3D; c.Copy()\n&#x2F;&#x2F; 异步处理\ngo func() &#123;\ntime.Sleep(3 * time.Second)\nlog.Println(&quot;异步执行：&quot; + copyContext.Request.URL.Path)\n&#125;()\n&#125;)\n&#x2F;&#x2F; 2.同步\nr.GET(&quot;&#x2F;long_sync&quot;, func(c *gin.Context) &#123;\ntime.Sleep(3 * time.Second)\nlog.Println(&quot;同步执行：&quot; + c.Request.URL.Path)\n&#125;)\n\nr.Run(&quot;:8000&quot;)\n&#125;</code></pre>\n<h3 id=\"gin中间件\"><a href=\"#gin中间件\" class=\"headerlink\" title=\"gin中间件\"></a>gin中间件</h3><h4 id=\"全局中间件\"><a href=\"#全局中间件\" class=\"headerlink\" title=\"全局中间件\"></a>全局中间件</h4><ul>\n<li>所有请求都经过此中间件</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"> package main\n\n import (\n &quot;fmt&quot;\n &quot;time&quot;\n\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n )\n\n &#x2F;&#x2F; 定义中间\n func MiddleWare() gin.HandlerFunc &#123;\n return func(c *gin.Context) &#123;\n t :&#x3D; time.Now()\n fmt.Println(&quot;中间件开始执行了&quot;)\n &#x2F;&#x2F; 设置变量到Context的key中，可以通过Get()取\nc.Set(&quot;request&quot;, &quot;中间件&quot;)\n status :&#x3D; c.Writer.Status()\n fmt.Println(&quot;中间件执行完毕&quot;, status)\n t2 :&#x3D; time.Since(t)\n fmt.Println(&quot;time:&quot;, t2)\n &#125;\n &#125;\n\n func main() &#123;\n &#x2F;&#x2F; 1.创建路由\n &#x2F;&#x2F; 默认使用了2个中间件Logger(), Recovery()\n r :&#x3D; gin.Default()\n &#x2F;&#x2F; 注册中间件\n r.Use(MiddleWare())\n &#x2F;&#x2F; &#123;&#125;为了代码规范\n &#123;\n r.GET(&quot;&#x2F;ce&quot;, func(c *gin.Context) &#123;\n &#x2F;&#x2F; 取值\n req, _ :&#x3D; c.Get(&quot;request&quot;)\n fmt.Println(&quot;request:&quot;, req)\n &#x2F;&#x2F; 页面接收\n c.JSON(200, gin.H&#123;&quot;request&quot;: req&#125;)\n &#125;)\n\n &#125;\n r.Run()\n &#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/adb7462c1e2b4555a6db9f10fca8ef72.png\" alt=\"请添加图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/1baf004e36894eb1ab5fa266f1ffa7d1.png\" alt=\"请添加图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/837bcfef4d804bbdaa5fb33cbe360ecc.png\" alt=\"请添加图片描述\"></p>\n<h4 id=\"next-方法\"><a href=\"#next-方法\" class=\"headerlink\" title=\"next()方法\"></a>next()方法</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n&quot;fmt&quot;\n&quot;time&quot;\n\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\n&#x2F;&#x2F; 定义中间\nfunc MiddleWare() gin.HandlerFunc &#123;\nreturn func(c *gin.Context) &#123;\nt :&#x3D; time.Now()\nfmt.Println(&quot;中间件开始执行了&quot;)\n&#x2F;&#x2F; 设置变量到Context的key中，可以通过Get()取\nc.Set(&quot;request&quot;, &quot;中间件&quot;)\n&#x2F;&#x2F; 执行函数\nc.Next()\n&#x2F;&#x2F; 中间件执行完后续的一些事情\nstatus :&#x3D; c.Writer.Status()\nfmt.Println(&quot;中间件执行完毕&quot;, status)\nt2 :&#x3D; time.Since(t)\nfmt.Println(&quot;time:&quot;, t2)\n&#125;\n&#125;\n\nfunc main() &#123;\n&#x2F;&#x2F; 1.创建路由\n&#x2F;&#x2F; 默认使用了2个中间件Logger(), Recovery()\nr :&#x3D; gin.Default()\n&#x2F;&#x2F; 注册中间件\nr.Use(MiddleWare())\n&#x2F;&#x2F; &#123;&#125;为了代码规范\n&#123;\nr.GET(&quot;&#x2F;ce&quot;, func(c *gin.Context) &#123;\n&#x2F;&#x2F; 取值\nreq, _ :&#x3D; c.Get(&quot;request&quot;)\nfmt.Println(&quot;request:&quot;, req)\n&#x2F;&#x2F; 页面接收\nc.JSON(200, gin.H&#123;&quot;request&quot;: req&#125;)\n&#125;)\n&#125;\nr.Run()\n&#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/21756fb1b45e41bcad745da31f0933f2.png\" alt=\"请添加图片描述\"></p>\n<h4 id=\"局部中间件\"><a href=\"#局部中间件\" class=\"headerlink\" title=\"局部中间件\"></a>局部中间件</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n&quot;fmt&quot;\n&quot;time&quot;\n\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\n&#x2F;&#x2F; 定义中间\nfunc MiddleWare() gin.HandlerFunc &#123;\nreturn func(c *gin.Context) &#123;\nt :&#x3D; time.Now()\nfmt.Println(&quot;中间件开始执行了&quot;)\n&#x2F;&#x2F; 设置变量到Context的key中，可以通过Get()取\nc.Set(&quot;request&quot;, &quot;中间件&quot;)\n&#x2F;&#x2F; 执行函数\nc.Next()\n&#x2F;&#x2F; 中间件执行完后续的一些事情\nstatus :&#x3D; c.Writer.Status()\nfmt.Println(&quot;中间件执行完毕&quot;, status)\nt2 :&#x3D; time.Since(t)\nfmt.Println(&quot;time:&quot;, t2)\n&#125;\n&#125;\n\nfunc main() &#123;\n&#x2F;&#x2F; 1.创建路由\n&#x2F;&#x2F; 默认使用了2个中间件Logger(), Recovery()\nr :&#x3D; gin.Default()\n&#x2F;&#x2F;局部中间键使用\nr.GET(&quot;&#x2F;ce&quot;, MiddleWare(), func(c *gin.Context) &#123;\n&#x2F;&#x2F; 取值\nreq, _ :&#x3D; c.Get(&quot;request&quot;)\nfmt.Println(&quot;request:&quot;, req)\n&#x2F;&#x2F; 页面接收\nc.JSON(200, gin.H&#123;&quot;request&quot;: req&#125;)\n&#125;)\nr.Run()\n&#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/36af13549f4b4f46affa93f9419a5d87.png\" alt=\"请添加图片描述\"></p>\n<h4 id=\"中间件练习\"><a href=\"#中间件练习\" class=\"headerlink\" title=\"中间件练习\"></a>中间件练习</h4><ul>\n<li>定义程序计时中间件，然后定义2个路由，执行函数后应该打印统计的执行时间，如下：</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n&quot;fmt&quot;\n&quot;time&quot;\n\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\n&#x2F;&#x2F; 定义中间\nfunc myTime(c *gin.Context) &#123;\nstart :&#x3D; time.Now()\nc.Next()\n&#x2F;&#x2F; 统计时间\nsince :&#x3D; time.Since(start)\nfmt.Println(&quot;程序用时：&quot;, since)\n&#125;\n\nfunc main() &#123;\n&#x2F;&#x2F; 1.创建路由\n&#x2F;&#x2F; 默认使用了2个中间件Logger(), Recovery()\nr :&#x3D; gin.Default()\n&#x2F;&#x2F; 注册中间件\nr.Use(myTime)\n&#x2F;&#x2F; &#123;&#125;为了代码规范\nshoppingGroup :&#x3D; r.Group(&quot;&#x2F;shopping&quot;)\n&#123;\nshoppingGroup.GET(&quot;&#x2F;index&quot;, shopIndexHandler)\nshoppingGroup.GET(&quot;&#x2F;home&quot;, shopHomeHandler)\n&#125;\nr.Run(&quot;:8000&quot;)\n&#125;\n\nfunc shopIndexHandler(c *gin.Context) &#123;\ntime.Sleep(5 * time.Second)\n&#125;\nfunc shopHomeHandler(c *gin.Context) &#123;\ntime.Sleep(3 * time.Second)\n&#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/7f28e6a9c9e545a2af6b6916a9d94fb6.png\" alt=\"请添加图片描述\"></p>\n<h3 id=\"会话控制\"><a href=\"#会话控制\" class=\"headerlink\" title=\"会话控制\"></a>会话控制</h3><h4 id=\"Cookie介绍\"><a href=\"#Cookie介绍\" class=\"headerlink\" title=\"Cookie介绍\"></a>Cookie介绍</h4><ul>\n<li>HTTP是无状态协议，服务器不能记录浏览器的访问状态，也就是说服务器不能区分两次请求是否 由同一个客户端发出</li>\n<li>Cookie就是解决HTTP协议无状态的方案之一，中文是小甜饼的意思</li>\n<li>Cookie实际上就是服务器保存在浏览器上的一段信息。浏览器有了Cookie之后，每次向服务器</li>\n</ul>\n<ul>\n<li>发送请求时都会同时将该信息发送给服务器，服务器收到请求后，就可以根据该信息处理请求</li>\n<li>Cookie由服务器创建，并发送给浏览器，最终由浏览器保存<h5 id=\"cookie的用途\"><a href=\"#cookie的用途\" class=\"headerlink\" title=\"cookie的用途\"></a>cookie的用途</h5>测试服务端发送cookie给客户端，客户端请求时携带cookie</li>\n</ul>\n<h4 id=\"Cookie的使用\"><a href=\"#Cookie的使用\" class=\"headerlink\" title=\"Cookie的使用\"></a>Cookie的使用</h4><p>测试服务端发送cookie给客户端，客户端请求时携带cookie</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n&quot;fmt&quot;\n)\n\nfunc main() &#123;\n&#x2F;&#x2F; 1.创建路由\n&#x2F;&#x2F; 默认使用了2个中间件Logger(), Recovery()\nr :&#x3D; gin.Default()\n&#x2F;&#x2F; 服务端要给客户端cookie\nr.GET(&quot;cookie&quot;, func(c *gin.Context) &#123;\n&#x2F;&#x2F; 获取客户端是否携带cookie\ncookie, err :&#x3D; c.Cookie(&quot;key_cookie&quot;)\nif err !&#x3D; nil &#123;\ncookie &#x3D; &quot;NotSet&quot;\n&#x2F;&#x2F; 给客户端设置cookie\n&#x2F;&#x2F; maxAge int, 单位为秒\n&#x2F;&#x2F; path,cookie所在目录\n&#x2F;&#x2F; domain string,域名\n&#x2F;&#x2F; secure 是否智能通过https访问\n&#x2F;&#x2F; httpOnly bool 是否允许别人通过js获取自己的cookie\nc.SetCookie(&quot;key_cookie&quot;, &quot;value_cookie&quot;, 60, &quot;&#x2F;&quot;,\n&quot;localhost&quot;, false, true)\n&#125;\nfmt.Printf(&quot;cookie的值是： %s\\n&quot;, cookie)\n&#125;)\nr.Run(&quot;:8000&quot;)\n&#125;</code></pre>\n<h4 id=\"cookie练习\"><a href=\"#cookie练习\" class=\"headerlink\" title=\"cookie练习\"></a>cookie练习</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n&quot;net&#x2F;http&quot;\n)\nfunc AuthMiddleWare() gin.HandlerFunc &#123;\nreturn func(c *gin.Context) &#123;\n&#x2F;&#x2F; 获取客户端cookie并校验\nif cookie, err :&#x3D; c.Cookie(&quot;abc&quot;); err &#x3D;&#x3D; nil &#123;\nif cookie &#x3D;&#x3D; &quot;123&quot; &#123;\nc.Next()\nreturn\n&#125;\n&#125;\n &#x2F;&#x2F; 返回错误\nc.JSON(http.StatusUnauthorized, gin.H&#123;&quot;error&quot;: &quot;err&quot;&#125;)\n&#x2F;&#x2F; 若验证不通过，不再调用后续的函数处理\nc.Abort()\nreturn\n&#125;\n&#125;\n\nfunc main() &#123;\n&#x2F;&#x2F; 1.创建路由\nr :&#x3D; gin.Default()\nr.GET(&quot;&#x2F;login&quot;, func(c *gin.Context) &#123;\n&#x2F;&#x2F; 设置cookie\nc.SetCookie(&quot;abc&quot;, &quot;123&quot;, 60, &quot;&#x2F;&quot;,\n&quot;localhost&quot;, false, true)\n&#x2F;&#x2F; 返回信息\nc.String(200, &quot;Login success!&quot;)\n&#125;)\nr.GET(&quot;&#x2F;home&quot;, AuthMiddleWare(), func(c *gin.Context) &#123;\nc.JSON(200, gin.H&#123;&quot;data&quot;: &quot;home&quot;&#125;)\n&#125;)\nr.Run(&quot;:8000&quot;)\n&#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/c4460642f5f1409698a18ac5f184bba5.png\" alt=\"请添加图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/7815452737934c538749ffd36310447a.png\" alt=\"请添加图片描述\"></p>\n<h4 id=\"Sessions\"><a href=\"#Sessions\" class=\"headerlink\" title=\"Sessions\"></a>Sessions</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"> package main\n\n import (\n &quot;fmt&quot;\n &quot;net&#x2F;http&quot;\n\n &quot;github.com&#x2F;gorilla&#x2F;sessions&quot;\n )\n\n &#x2F;&#x2F; 初始化一个cookie存储对象\n  &#x2F;&#x2F; something-very-secret应该是一个你自己的密匙，只要不被别人知道就行\n var store &#x3D; sessions.NewCookieStore([]byte(&quot;something-very-secret&quot;))\n\n func main() &#123;\n http.HandleFunc(&quot;&#x2F;save&quot;, SaveSession)\n http.HandleFunc(&quot;&#x2F;get&quot;, GetSession)\n err :&#x3D; http.ListenAndServe(&quot;:8080&quot;, nil)\n if err !&#x3D; nil &#123;\n fmt.Println(&quot;HTTP server failed,err:&quot;, err)\n return\n &#125;\n &#125;\n\nfunc SaveSession(w http.ResponseWriter, r *http.Request) &#123;\n &#x2F;&#x2F; Get a session. We&#39;re ignoring the error resulted from decoding an\n &#x2F;&#x2F; existing session: Get() always returns a session, even if empty.\n\n &#x2F;&#x2F; 获取一个session对象，session-name是session的名字\n session, err :&#x3D; store.Get(r, &quot;session-name&quot;)\n if err !&#x3D; nil &#123;\n http.Error(w, err.Error(), http.StatusInternalServerError)\n return\n &#125;\n\n &#x2F;&#x2F; 在session中存储值\n session.Values[&quot;foo&quot;] &#x3D; &quot;bar&quot;\n session.Values[42] &#x3D; 43\n&#x2F;&#x2F; 保存更改\n session.Save(r, w)\n &#125;\n func GetSession(w http.ResponseWriter, r *http.Request) &#123;\n session, err :&#x3D; store.Get(r, &quot;session-name&quot;)\n  if err !&#x3D; nil &#123;\n http.Error(w, err.Error(), http.StatusInternalServerError)\n return\n &#125; \n foo :&#x3D; session.Values[&quot;foo&quot;]\n fmt.Println(foo)\n &#125;</code></pre>\n<p>删除session的值：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; 删除\n&#x2F;&#x2F; 将session的最大存储时间设置为小于零的数即为删除\nsession.Options.MaxAge &#x3D; -1\nsession.Save(r, w)</code></pre>\n<h3 id=\"参数校正\"><a href=\"#参数校正\" class=\"headerlink\" title=\"参数校正\"></a>参数校正</h3><h4 id=\"结构体验证\"><a href=\"#结构体验证\" class=\"headerlink\" title=\"结构体验证\"></a>结构体验证</h4><p>用gin框架的数据验证，可以不用解析数据，减少if else，会简洁许多。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n&quot;fmt&quot;\n&quot;time&quot;\n\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\n&#x2F;&#x2F;Person ..\ntype Person struct &#123;\n&#x2F;&#x2F;不能为空并且大于10\nAge int &#96;form:&quot;age&quot; binding:&quot;required,gt&#x3D;10&quot;&#96;\nName string &#96;form:&quot;name&quot; binding:&quot;required&quot;&#96;\nBirthday time.Time &#96;form:&quot;birthday&quot; time_format:&quot;2006-01-02&quot; time_utc:&quot;1&quot;&#96;\n&#125;\n\nfunc main() &#123;\nr :&#x3D; gin.Default()\nr.GET(&quot;&#x2F;5lmh&quot;, func(c *gin.Context) &#123;\nvar person Person\nif err :&#x3D; c.ShouldBind(&amp;person); err !&#x3D; nil &#123;\nc.String(500, fmt.Sprint(err))\nreturn\n&#125;\nc.String(200, fmt.Sprintf(&quot;%#v&quot;, person))\n&#125;)\nr.Run()\n&#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/d03f694837794f8eb713b2800c620fbf.png\" alt=\"请添加图片描述\"></p>\n<h4 id=\"自定义验证\"><a href=\"#自定义验证\" class=\"headerlink\" title=\"自定义验证\"></a>自定义验证</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"> package main\n\n import (\n &quot;net&#x2F;http&quot;\n &quot;reflect&quot;\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&#x2F;binding&quot;\n &quot;gopkg.in&#x2F;go-playground&#x2F;validator.v8&quot;\n )\n\n &#x2F;*\n 对绑定解析到结构体上的参数，自定义验证功能\n\n比如我们要对 name 字段做校验，要不能为空，并且不等于 admin ，类似这种需求，就无法\nbinding 现成的方法\n\n需要我们自己验证方法才能实现 官网示例（https:&#x2F;&#x2F;godoc.org&#x2F;gopkg.in&#x2F;goplayground&#x2F;validator.v8#hdr-Custom_Functions）\n 这里需要下载引入下 gopkg.in&#x2F;go-playground&#x2F;validator.v8\n *&#x2F;\n type Person struct &#123;\n Age int &#96;form:&quot;age&quot; binding:&quot;required,gt&#x3D;10&quot;&#96;\n &#x2F;&#x2F; 2、在参数 binding 上使用自定义的校验方法函数注册时候的名称\n Name string &#96;form:&quot;name&quot; binding:&quot;NotNullAndAdmin&quot;&#96;\n Address string &#96;form:&quot;address&quot; binding:&quot;required&quot;&#96;\n &#125;\n &#x2F;&#x2F; 1、自定义的校验方法\n\nfunc nameNotNullAndAdmin(v *validator.Validate, topStruct reflect.Value,\ncurrentStructOrField reflect.Value, field reflect.Value, fieldType\nreflect.Type, fieldKind reflect.Kind, param string) bool &#123;\n\n if value, ok :&#x3D; field.Interface().(string); ok &#123;\n &#x2F;&#x2F; 字段不能为空，并且不等于 admin\n return value !&#x3D; &quot;&quot; &amp;&amp; !(&quot;5lmh&quot; &#x3D;&#x3D; value)\n &#125;\n\n return true\n &#125;\n\n func main() &#123;\n r :&#x3D; gin.Default()\n\n &#x2F;&#x2F; 3、将我们自定义的校验方法注册到 validator中\n if v, ok :&#x3D; binding.Validator.Engine().(*validator.Validate); ok &#123;\n &#x2F;&#x2F; 这里的 key 和 fn 可以不一样最终在 struct 使用的是 key\n v.RegisterValidation(&quot;NotNullAndAdmin&quot;, nameNotNullAndAdmin)\n &#125;\n\n &#x2F;*\n\ncurl -X GET &quot;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;testing?\nname&#x3D;&amp;age&#x3D;12&amp;address&#x3D;beijing&quot;\n\ncurl -X GET &quot;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;testing?\nname&#x3D;lmh&amp;age&#x3D;12&amp;address&#x3D;beijing&quot;\n\ncurl -X GET &quot;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;testing?\nname&#x3D;adz&amp;age&#x3D;12&amp;address&#x3D;beijing&quot;\n *&#x2F;\n r.GET(&quot;&#x2F;5lmh&quot;, func(c *gin.Context) &#123;\n var person Person\n if e :&#x3D; c.ShouldBind(&amp;person); e &#x3D;&#x3D; nil &#123;\n c.String(http.StatusOK, &quot;%v&quot;, person)\n &#125; else &#123;\n c.String(http.StatusOK, &quot;person bind err:%v&quot;, e.Error())\n &#125;\n &#125;)\n r.Run()\n &#125;</code></pre>\n<h4 id=\"多语言翻译验证\"><a href=\"#多语言翻译验证\" class=\"headerlink\" title=\"多语言翻译验证\"></a>多语言翻译验证</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"> package main\n\n import (\n &quot;fmt&quot;\n\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n &quot;github.com&#x2F;go-playground&#x2F;locales&#x2F;en&quot;\n &quot;github.com&#x2F;go-playground&#x2F;locales&#x2F;zh&quot;\n &quot;github.com&#x2F;go-playground&#x2F;locales&#x2F;zh_Hant_TW&quot;\n ut &quot;github.com&#x2F;go-playground&#x2F;universal-translator&quot;\n &quot;gopkg.in&#x2F;go-playground&#x2F;validator.v9&quot;\n en_translations &quot;gopkg.in&#x2F;go-playground&#x2F;validator.v9&#x2F;translations&#x2F;en&quot;\n zh_translations &quot;gopkg.in&#x2F;go-playground&#x2F;validator.v9&#x2F;translations&#x2F;zh&quot;\n zh_tw_translations &quot;gopkg.in&#x2F;go-playground&#x2F;validator.v9&#x2F;translations&#x2F;zh_tw&quot;\n )\n\n var (\n Uni *ut.UniversalTranslator\n Validate *validator.Validate\n )\n\n type User struct &#123;\n Username string &#96;form:&quot;user_name&quot; validate:&quot;required&quot;&#96;\n Tagline string &#96;form:&quot;tag_line&quot; validate:&quot;required,lt&#x3D;10&quot;&#96;\n Tagline2 string &#96;form:&quot;tag_line2&quot; validate:&quot;required,gt&#x3D;1&quot;&#96;\n &#125;\n\n func main() &#123;\n en :&#x3D; en.New()\n zh :&#x3D; zh.New()\n zh_tw :&#x3D; zh_Hant_TW.New()\n Uni &#x3D; ut.New(en, zh, zh_tw)\n Validate &#x3D; validator.New()\n\n route :&#x3D; gin.Default()\n route.GET(&quot;&#x2F;5lmh&quot;, startPage)\n route.POST(&quot;&#x2F;5lmh&quot;, startPage)\n route.Run(&quot;:8080&quot;)\n &#125;\n\n func startPage(c *gin.Context) &#123;\n &#x2F;&#x2F;这部分应放到中间件中\n locale :&#x3D; c.DefaultQuery(&quot;locale&quot;, &quot;zh&quot;)\n trans, _ :&#x3D; Uni.GetTranslator(locale)\n switch locale &#123;\n case &quot;zh&quot;:\n zh_translations.RegisterDefaultTranslations(Validate, trans)\n break\n case &quot;en&quot;:\n en_translations.RegisterDefaultTranslations(Validate, trans)\n break\n case &quot;zh_tw&quot;:\n zh_tw_translations.RegisterDefaultTranslations(Validate, trans)\n break\n default:\n zh_translations.RegisterDefaultTranslations(Validate, trans)\n break\n &#125;\n\n &#x2F;&#x2F;自定义错误内容\n\nValidate.RegisterTranslation(&quot;required&quot;, trans, func(ut ut.Translator)\nerror &#123;\n\nreturn ut.Add(&quot;required&quot;, &quot;&#123;0&#125; must have a value!&quot;, true) &#x2F;&#x2F; see\nuniversal-translator for details\n &#125;, func(ut ut.Translator, fe validator.FieldError) string &#123;\n t, _ :&#x3D; ut.T(&quot;required&quot;, fe.Field())\n return t\n &#125;)\n\n &#x2F;&#x2F;这块应该放到公共验证方法中\n user :&#x3D; User&#123;&#125;\n c.ShouldBind(&amp;user)\n fmt.Println(user)\n err :&#x3D; Validate.Struct(user)\n if err !&#x3D; nil &#123;\n errs :&#x3D; err.(validator.ValidationErrors)\n sliceErrs :&#x3D; []string&#123;&#125;\n for _, e :&#x3D; range errs &#123;\n sliceErrs &#x3D; append(sliceErrs, e.Translate(trans))\n &#125;\n c.String(200, fmt.Sprintf(&quot;%#v&quot;, sliceErrs))\n &#125;\n c.String(200, fmt.Sprintf(&quot;%#v&quot;, &quot;user&quot;))\n &#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/2f5f5c61e1824c38bcb459facfe8ff8a.png\" alt=\"请添加图片描述\"></p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><h4 id=\"日志文件\"><a href=\"#日志文件\" class=\"headerlink\" title=\"日志文件\"></a>日志文件</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n&quot;io&quot;\n&quot;os&quot;\n\n&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc main() &#123;\ngin.DisableConsoleColor()\n\n&#x2F;&#x2F; Logging to a file.\nf, _ :&#x3D; os.Create(&quot;gin.log&quot;)\ngin.DefaultWriter &#x3D; io.MultiWriter(f)\n\n&#x2F;&#x2F; 如果需要同时将日志写入文件和控制台，请使用以下代码。\n&#x2F;&#x2F; gin.DefaultWriter &#x3D; io.MultiWriter(f, os.Stdout)\nr :&#x3D; gin.Default()\nr.GET(&quot;&#x2F;ping&quot;, func(c *gin.Context) &#123;\nc.String(200, &quot;pong&quot;)\n&#125;)\nr.Run()\n&#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/4cb217eb1e424a988648140a223e5df3.png\" alt=\"请添加图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/1bc046041e3142958c99c5c4df1ce8b4.png\" alt=\"请添加图片描述\"></p>\n<h4 id=\"gin验证码\"><a href=\"#gin验证码\" class=\"headerlink\" title=\"gin验证码\"></a>gin验证码</h4><p>后端代码<br><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"> package main\n\n import (\n &quot;bytes&quot;\n &quot;github.com&#x2F;dchest&#x2F;captcha&quot;\n &quot;github.com&#x2F;gin-contrib&#x2F;sessions&quot;\n &quot;github.com&#x2F;gin-contrib&#x2F;sessions&#x2F;cookie&quot;\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n &quot;net&#x2F;http&quot;\n &quot;time&quot;\n )\n\n &#x2F;&#x2F; 中间件，处理session\n func Session(keyPairs string) gin.HandlerFunc &#123;\n store :&#x3D; SessionConfig()\n return sessions.Sessions(keyPairs, store)\n &#125;\n func SessionConfig() sessions.Store &#123;\n sessionMaxAge :&#x3D; 3600\n sessionSecret :&#x3D; &quot;topgoer&quot;\n var store sessions.Store\n store &#x3D; cookie.NewStore([]byte(sessionSecret))\n  store.Options(sessions.Options&#123;\n MaxAge: sessionMaxAge, &#x2F;&#x2F;seconds\n Path: &quot;&#x2F;&quot;,\n &#125;)\n return store\n &#125;\n\n func Captcha(c *gin.Context, length ...int) &#123;\n l :&#x3D; captcha.DefaultLen\n w, h :&#x3D; 107, 36\n if len(length) &#x3D;&#x3D; 1 &#123;\n l &#x3D; length[0]\n &#125;\n if len(length) &#x3D;&#x3D; 2 &#123;\n w &#x3D; length[1]\n &#125;\n if len(length) &#x3D;&#x3D; 3 &#123;\n h &#x3D; length[2]\n &#125;\n captchaId :&#x3D; captcha.NewLen(l)\n session :&#x3D; sessions.Default(c)\n session.Set(&quot;captcha&quot;, captchaId)\n _ &#x3D; session.Save()\n _ &#x3D; Serve(c.Writer, c.Request, captchaId, &quot;.png&quot;, &quot;zh&quot;, false, w, h)\n &#125;\n func CaptchaVerify(c *gin.Context, code string) bool &#123;\n session :&#x3D; sessions.Default(c)\n if captchaId :&#x3D; session.Get(&quot;captcha&quot;); captchaId !&#x3D; nil &#123;\n session.Delete(&quot;captcha&quot;)\n _ &#x3D; session.Save()\n if captcha.VerifyString(captchaId.(string), code) &#123;\n return true\n &#125; else &#123;\n return false\n &#125;\n &#125; else &#123;\n return false\n &#125;\n &#125;\n\nfunc Serve(w http.ResponseWriter, r *http.Request, id, ext, lang string,\ndownload bool, width, height int) error &#123;\n w.Header().Set(&quot;Cache-Control&quot;, &quot;no-cache, no-store, must-revalidate&quot;)\n w.Header().Set(&quot;Pragma&quot;, &quot;no-cache&quot;)\n w.Header().Set(&quot;Expires&quot;, &quot;0&quot;)\n\n var content bytes.Buffer\n switch ext &#123;\n case &quot;.png&quot;:\n w.Header().Set(&quot;Content-Type&quot;, &quot;image&#x2F;png&quot;)\n _ &#x3D; captcha.WriteImage(&amp;content, id, width, height)\n case &quot;.wav&quot;:\n w.Header().Set(&quot;Content-Type&quot;, &quot;audio&#x2F;x-wav&quot;)\n _ &#x3D; captcha.WriteAudio(&amp;content, id, lang)\n default:\n return captcha.ErrNotFound\n &#125;\n\n if download &#123;\n w.Header().Set(&quot;Content-Type&quot;, &quot;application&#x2F;octet-stream&quot;)\n &#125;\n\nhttp.ServeContent(w, r, id+ext, time.Time&#123;&#125;,\nbytes.NewReader(content.Bytes()))\n return nil\n &#125;\n\n func main() &#123;\n router :&#x3D; gin.Default()\n router.LoadHTMLGlob(&quot;.&#x2F;*.html&quot;)\n router.Use(Session(&quot;topgoer&quot;))\n router.GET(&quot;&#x2F;captcha&quot;, func(c *gin.Context) &#123;\n Captcha(c, 4)\n &#125;)\n router.GET(&quot;&#x2F;&quot;, func(c *gin.Context) &#123;\n c.HTML(http.StatusOK, &quot;index.html&quot;, nil)\n &#125;)\n router.GET(&quot;&#x2F;captcha&#x2F;verify&#x2F;:value&quot;, func(c *gin.Context) &#123;\n value :&#x3D; c.Param(&quot;value&quot;)\n if CaptchaVerify(c, value) &#123;\n c.JSON(http.StatusOK, gin.H&#123;&quot;status&quot;: 0, &quot;msg&quot;: &quot;success&quot;&#125;)\n &#125; else &#123;\n c.JSON(http.StatusOK, gin.H&#123;&quot;status&quot;: 1, &quot;msg&quot;: &quot;failed&quot;&#125;)\n &#125;\n &#125;)\n router.Run(&quot;:8080&quot;)\n &#125;</code></pre><br>前端代码：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n&lt;title&gt;www.topgoer.com验证码&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;img src&#x3D;&quot;&#x2F;captcha&quot; onclick&#x3D;&quot;this.src&#x3D;&#39;&#x2F;captcha?v&#x3D;&#39;+Math.random()&quot;&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20d886d601e844ba868572b91e327635.png\" alt=\"请添加图片描述\"></p>\n<blockquote>\n<p>浏览器访问<a href=\"http://127.0.0.1:8080\">http://127.0.0.1:8080</a><br>访问<a href=\"http://127.0.0.1:8080/captcha/verify/5721\">http://127.0.0.1:8080/captcha/verify/5721</a> 进行验证</p></blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#123;\n &quot;msg&quot;: &quot;failed&quot;,\n &quot;status&quot;: 1 &#125;\n </code></pre>\n<h4 id=\"生成解析token\"><a href=\"#生成解析token\" class=\"headerlink\" title=\"生成解析token\"></a>生成解析token</h4><p>下面的代码是gin框架对jwt的封装</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"> package main\n\n import (\n &quot;fmt&quot;\n &quot;net&#x2F;http&quot;\n &quot;time&quot;\n\n &quot;github.com&#x2F;dgrijalva&#x2F;jwt-go&quot;\n &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n )\n\n &#x2F;&#x2F;自定义一个字符串\n var jwtkey &#x3D; []byte(&quot;www.topgoer.com&quot;)\n var str string\n\n type Claims struct &#123;\n UserId uint\n jwt.StandardClaims\n &#125;\n\n func main() &#123;\n r :&#x3D; gin.Default()\n r.GET(&quot;&#x2F;set&quot;, setting)\n r.GET(&quot;&#x2F;get&quot;, getting)\n &#x2F;&#x2F;监听端口默认为8080\n r.Run(&quot;:8080&quot;)\n &#125;\n\n &#x2F;&#x2F;颁发token\n func setting(ctx *gin.Context) &#123;\n expireTime :&#x3D; time.Now().Add(7 * 24 * time.Hour)\n claims :&#x3D; &amp;Claims&#123;\n UserId: 2,\n StandardClaims: jwt.StandardClaims&#123;\n ExpiresAt: expireTime.Unix(), &#x2F;&#x2F;过期时间\n IssuedAt: time.Now().Unix(),\n Issuer: &quot;127.0.0.1&quot;, &#x2F;&#x2F; 签名颁发者\n Subject: &quot;user token&quot;, &#x2F;&#x2F;签名主题\n &#125;,\n &#125;\n token :&#x3D; jwt.NewWithClaims(jwt.SigningMethodHS256, claims)\n &#x2F;&#x2F; fmt.Println(token)\n tokenString, err :&#x3D; token.SignedString(jwtkey)\n if err !&#x3D; nil &#123;\n fmt.Println(err)\n &#125;\n str &#x3D; tokenString\n ctx.JSON(200, gin.H&#123;&quot;token&quot;: tokenString&#125;)\n &#125;\n\n &#x2F;&#x2F;解析token\n func getting(ctx *gin.Context) &#123;\n tokenString :&#x3D; ctx.GetHeader(&quot;Authorization&quot;)\n &#x2F;&#x2F;vcalidate token formate\n if tokenString &#x3D;&#x3D; &quot;&quot; &#123;\n ctx.JSON(http.StatusUnauthorized, gin.H&#123;&quot;code&quot;: 401, &quot;msg&quot;: &quot;权限不足&quot;&#125;)\n ctx.Abort()\n return\n &#125;\n\n token, claims, err :&#x3D; ParseToken(tokenString)\n if err !&#x3D; nil || !token.Valid &#123;\n ctx.JSON(http.StatusUnauthorized, gin.H&#123;&quot;code&quot;: 401, &quot;msg&quot;: &quot;权限不足&quot;&#125;)\n ctx.Abort()\n return\n &#125;\n fmt.Println(111)\n fmt.Println(claims.UserId)\n &#125;\n\n func ParseToken(tokenString string) (*jwt.Token, *Claims, error) &#123;\n Claims :&#x3D; &amp;Claims&#123;&#125;\n\ntoken, err :&#x3D; jwt.ParseWithClaims(tokenString, Claims, func(token\n*jwt.Token) (i interface&#123;&#125;, err error) &#123;\n return jwtkey, nil\n &#125;)\n return token, Claims, err\n &#125;</code></pre>\n","text":"http编程 package main import ( &quot;fmt&quot; &quot;net&#x2F;http&quot; ) func main() &#123; &#x2F;&#x2F;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F...","link":"","photos":[],"count_time":{"symbolsCount":"57k","symbolsTime":"51 mins."},"categories":[{"name":"编程语言","slug":"编程语言","count":13,"path":"api/categories/编程语言.json"}],"tags":[{"name":"GO","slug":"GO","count":4,"path":"api/tags/GO.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#http%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">http编程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#go%E6%93%8D%E4%BD%9CMYSQL\"><span class=\"toc-text\">go操作MYSQL</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Mysql-install\"><span class=\"toc-text\">Mysql-install</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Mysql%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">Mysql使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#mysql%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">mysql使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Insert%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">Insert操作</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Select%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">Select操作</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#update%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">update操作</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#delete%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">delete操作</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Mysql%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">Mysql事务</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Gin%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">Gin框架</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">安装配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#gin%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">gin路由</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%8A%E4%BC%A0%E5%8D%95%E4%B8%AA%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">上传单个文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%B8%8A%E4%BC%A0%E7%89%B9%E5%AE%9A%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">上传特定文件</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%8A%E4%BC%A0%E5%A4%9A%E4%B8%AA%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">上传多个文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#routes-group\"><span class=\"toc-text\">routes group</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E6%8B%86%E5%88%86%E4%B8%8E%E6%B3%A8%E5%86%8C\"><span class=\"toc-text\">路由拆分与注册</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%9A%84%E8%B7%AF%E7%94%B1%E6%B3%A8%E5%86%8C\"><span class=\"toc-text\">基本的路由注册</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E6%8B%86%E5%88%86%E6%88%90%E5%8D%95%E7%8B%AC%E6%96%87%E4%BB%B6%E6%88%96%E5%8C%85\"><span class=\"toc-text\">路由拆分成单独文件或包</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E6%8B%86%E5%88%86%E6%88%90%E5%A4%9A%E4%B8%AA%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">路由拆分成多个文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E6%8B%86%E5%88%86%E5%88%B0%E4%B8%8D%E5%90%8CAPP\"><span class=\"toc-text\">路由拆分到不同APP</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#gin%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E4%B8%8E%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">gin数据解析与绑定</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Json-%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E5%92%8C%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">Json 数据解析和绑定</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E5%92%8C%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">表单数据解析和绑定</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#URI%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E5%92%8C%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">URI数据解析和绑定</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#gin%E6%B8%B2%E6%9F%93\"><span class=\"toc-text\">gin渲染</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E7%9A%84%E5%93%8D%E5%BA%94\"><span class=\"toc-text\">各种数据格式的响应</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#HTML%E6%A8%A1%E6%9D%BF%E6%B8%B2%E6%9F%93\"><span class=\"toc-text\">HTML模板渲染</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%87%8D%E5%AE%9A%E5%90%91\"><span class=\"toc-text\">重定向</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5\"><span class=\"toc-text\">同步异步</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#gin%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">gin中间件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">全局中间件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#next-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">next()方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B1%80%E9%83%A8%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">局部中间件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">中间件练习</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%9A%E8%AF%9D%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">会话控制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Cookie%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">Cookie介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#cookie%E7%9A%84%E7%94%A8%E9%80%94\"><span class=\"toc-text\">cookie的用途</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Cookie%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">Cookie的使用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#cookie%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">cookie练习</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Sessions\"><span class=\"toc-text\">Sessions</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%82%E6%95%B0%E6%A0%A1%E6%AD%A3\"><span class=\"toc-text\">参数校正</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%84%E4%BD%93%E9%AA%8C%E8%AF%81\"><span class=\"toc-text\">结构体验证</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%AA%8C%E8%AF%81\"><span class=\"toc-text\">自定义验证</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E8%AF%AD%E8%A8%80%E7%BF%BB%E8%AF%91%E9%AA%8C%E8%AF%81\"><span class=\"toc-text\">多语言翻译验证</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96\"><span class=\"toc-text\">其他</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">日志文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#gin%E9%AA%8C%E8%AF%81%E7%A0%81\"><span class=\"toc-text\">gin验证码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90%E8%A7%A3%E6%9E%90token\"><span class=\"toc-text\">生成解析token</span></a></li></ol></li></ol></li></ol>","author":{"name":"Algernon","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/68c4c7d8696c482da565ab5c8ebfa2fa.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}},"mapped":true,"prev_post":{"title":"【区块链技术与应用】（一）","uid":"9707db72db0abf36328a217eb8d73065","slug":"区块链1","date":"2022-11-03T14:58:49.000Z","updated":"2022-11-08T16:30:06.004Z","comments":true,"path":"api/articles/区块链1.json","keywords":null,"cover":[],"text":"技术胖开启docker使用systemctl start命令，开启Docker服务端。 sudo systemctl start docker 创建容器后，如果查看这个容器的信息和状态那？这时候你可以使用下面的命令。 docker container ls 这时候我们需要学一个新...","link":"","photos":[],"count_time":{"symbolsCount":"23k","symbolsTime":"21 mins."},"categories":[{"name":"信管","slug":"信管","count":12,"path":"api/categories/信管.json"}],"tags":[{"name":"区块链","slug":"区块链","count":10,"path":"api/tags/区块链.json"}],"author":{"name":"Algernon","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/68c4c7d8696c482da565ab5c8ebfa2fa.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}}},"next_post":{"title":"【数据挖掘】（一）用jupyter编程","uid":"6fcdfe05d0345160147b0e4b83a609f1","slug":"数据挖掘1","date":"2022-11-03T14:56:49.000Z","updated":"2022-11-08T16:17:05.932Z","comments":true,"path":"api/articles/数据挖掘1.json","keywords":null,"cover":[],"text":"为熟悉jupyter，找了一本书练习。参考资料：《Python数据挖掘入门与实践》数据集： https://github.com/packtpublishing/learning-data-mining-with-python 第一行代码import numpy as np da...","link":"","photos":[],"count_time":{"symbolsCount":"47k","symbolsTime":"43 mins."},"categories":[{"name":"机器学习","slug":"机器学习","count":9,"path":"api/categories/机器学习.json"}],"tags":[{"name":"数据挖掘","slug":"数据挖掘","count":2,"path":"api/tags/数据挖掘.json"}],"author":{"name":"Algernon","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/68c4c7d8696c482da565ab5c8ebfa2fa.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}}}}