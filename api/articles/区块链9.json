{"title":"【区块链技术与应用】（九）","uid":"6836c19fc065dca88d3b1abe7f721a20","slug":"区块链9","date":"2022-12-15T13:50:49.000Z","updated":"2022-12-16T05:18:19.129Z","comments":true,"path":"api/articles/区块链9.json","keywords":null,"cover":[],"content":"<h1 id=\"Hyperledger-Fabric-2-4-开发环境配置与测试\"><a href=\"#Hyperledger-Fabric-2-4-开发环境配置与测试\" class=\"headerlink\" title=\"Hyperledger Fabric 2.4 开发环境配置与测试\"></a><em>Hyperledger Fabric</em> 2.4 开发环境配置与测试</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>超级账本的<em><code>Fabric</code></em>具有高可扩展性和高可定制性，能够应用在复杂的商业场景中，但<em><code>Fabric</code></em>技术涉及很多新的概念，源代码跟新速度快且各版本间兼容性差，对初学者很不友好。为了使能够快速掌握<em><code>Fabric</code></em>，本文基于其目前最新的2.4.6版本搭建了<em>Hyperledger Fabric</em>运行环境，并在此之上部署了官方示例<em><code>chaincode</code></em>并对其进行交互调试，最终整个环境及示例代码能够正常运行且得出预期结果。</p>\n<h2 id=\"软件需求说明\"><a href=\"#软件需求说明\" class=\"headerlink\" title=\"软件需求说明\"></a>软件需求说明</h2><p>网上几乎所有的<code>Fabric</code>教程都是基于<code>Ubuntu</code>环境而不是<code>Windows</code>，其原因主要是<code>Fabric</code>的运行需要的<code>Docker</code>环境在<code>Windows</code>下表现不佳，此外<code>Fabric</code>许多官方文档也是基于<code>Ubuntu</code>纂写，在<code>windows</code>下运行可能会遇到难以预估的<code>bug</code>。原本为了方便后期部署至公网服务器想在CentOS上搭建环境，但由于CentOS8停止维护，且CentOS Stream使用体验颇差，于是最终选择了Ubuntu系统。<br>本环境各系统、软件版本如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">系统、软件</th>\n<th style=\"text-align:center\">版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">VMware Pro</td>\n<td style=\"text-align:center\">16.0.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ubuntu 18.04 Server LTS</td>\n<td style=\"text-align:center\"><a href=\"https://mirrors.aliyun.com/ubuntu-releases/18.04/ubuntu-18.04.6-live-server-amd64.iso?spm=a2c6h.25603864.0.0.3b9f5e15qZuU0u\">ubuntu-18.04.6-live-server-amd64.iso</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git</td>\n<td style=\"text-align:center\">2.30.2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">curl</td>\n<td style=\"text-align:center\">7.74.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker</td>\n<td style=\"text-align:center\">20.10</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">golang</td>\n<td style=\"text-align:center\">go1.18.6</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jq</td>\n<td style=\"text-align:center\">jq-1.6</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fabric</td>\n<td style=\"text-align:center\"><a href=\"https://link.segmentfault.com/?enc=XP%2BUVJEcSj26a91wh%2BxcVg%3D%3D.AiKwyXmku4yXZPqGSJR2%2BZSXEKhs97Vezgvkbf7zZUgRZ4sRndbYM0Oc7mY3%2F8GyuSYqVAIVfTWjZKmKcZ2I7xh2cHVtkswewBwNWAs7q9WwgXtQUMS%2Fp0z2zMqWZlAqY75%2FbgjR2oGIQ%2F0DmiQEFQ%3D%3D\">2.4.6</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fabric-ca</td>\n<td style=\"text-align:center\"><a href=\"https://link.segmentfault.com/?enc=9fshBYvW%2F0Z%2FROXS%2FuQMgg%3D%3D.7b9HTvh7ViwCfFJTB%2FWQ2qbSnv%2BQOsBYqWCdiHhlyMIKyoxooUcZvV2fz2q6sNBBVgmPdCqIfZZE4uBcwkF5yOU1Dpy%2F7OFMgwTFEdQdW88l9UhAb%2B7ttKuNnkLqmfleNUqi8mudxd%2F4Nfw2O7Uk%2FJuFw2P%2BD5y5R1K8pcqGMb4%3D\">1.5.5</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fabric-samples</td>\n<td style=\"text-align:center\"><a href=\"\">v2.3.0</a></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>本环境各Docker镜像版本如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">镜像</th>\n<th style=\"text-align:left\">版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">hyperledger/fabric-tools</td>\n<td style=\"text-align:left\">2.4.6</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">hyperledger/fabric-peer</td>\n<td style=\"text-align:left\">2.4.6</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">hyperledger/fabric-orderer</td>\n<td style=\"text-align:left\">2.4.6</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">hyperledger/fabric-ccenv</td>\n<td style=\"text-align:left\">2.4.6</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">hyperledger/fabric-baseos</td>\n<td style=\"text-align:left\">2.4.6</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">hyperledger/fabric-ca</td>\n<td style=\"text-align:left\">1.5.5</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"安装-Ubuntu-Server\"><a href=\"#安装-Ubuntu-Server\" class=\"headerlink\" title=\"安装 Ubuntu Server\"></a>安装 Ubuntu Server</h2><h3 id=\"Ubuntu-Server-18-04-06-lts-下载\"><a href=\"#Ubuntu-Server-18-04-06-lts-下载\" class=\"headerlink\" title=\"Ubuntu Server 18.04.06 lts 下载\"></a>Ubuntu Server 18.04.06 lts 下载</h3><p>阿里镜像下载网址：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">https:&#x2F;&#x2F;developer.aliyun.com&#x2F;mirror&#x2F;\nhttps:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu-releases&#x2F;18.04&#x2F;</code></pre>\n<h3 id=\"Ubuntu-18-04-LTS-更换国内源\"><a href=\"#Ubuntu-18-04-LTS-更换国内源\" class=\"headerlink\" title=\"Ubuntu 18.04 LTS 更换国内源\"></a>Ubuntu 18.04 LTS 更换国内源</h3><p>装了ubuntu18.04 LTS，下载软件有点慢，可以把<strong>/etc/apt/sources.list</strong>文件里的源更换一下。</p>\n<p>Ubuntu阿里镜像源文件（/etc/apt/sources.list）</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://developer.aliyun.com/mirror/ubuntu?spm=a2c6h.13651102.0.0.18b11b11F2f91v\">https://developer.aliyun.com/mirror/ubuntu?spm=a2c6h.13651102.0.0.18b11b11F2f91v</a></p></blockquote>\n<h4 id=\"备份源列表\"><a href=\"#备份源列表\" class=\"headerlink\" title=\"备份源列表\"></a>备份源列表</h4><p>Ubuntu配置的默认源并不是国内的服务器，下载更新软件都比较慢。首先备份源列表文件<strong>sources.list</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 首先备份源列表\nsudo cp &#x2F;etc&#x2F;apt&#x2F;sources.list &#x2F;etc&#x2F;apt&#x2F;sources.list_backup</code></pre>\n<h4 id=\"打开sources-list文件修改\"><a href=\"#打开sources-list文件修改\" class=\"headerlink\" title=\"打开sources.list文件修改\"></a>打开sources.list文件修改</h4><p>选择合适的源（阿里、清华、中科大），替换原文件的内容，保存编辑好的文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 打开sources.list文件\nsudo vim &#x2F;etc&#x2F;apt&#x2F;sources.list</code></pre>\n<p>编辑<strong>/etc/apt/sources.list</strong>文件, 在文件最前面添加阿里云镜像源：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">#  阿里源\ndeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse\ndeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse\n\ndeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse\ndeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse\n\ndeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse\ndeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse\n\n# deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse\n# deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse\n\ndeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse\ndeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</code></pre>\n<h4 id=\"刷新列表\"><a href=\"#刷新列表\" class=\"headerlink\" title=\"刷新列表\"></a>刷新列表</h4><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install build-essential</code></pre>\n<h3 id=\"创建Ubuntu-Server用户\"><a href=\"#创建Ubuntu-Server用户\" class=\"headerlink\" title=\"创建Ubuntu Server用户\"></a>创建Ubuntu Server用户</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 添加用户(可选)\nsudo adduser xxxx\n# 为新用户设置密码\nsudo passwd xxxx\n# 为新用户添加sudo权限\nsudo echo &#39;xxxx ALL&#x3D;(ALL) ALL&#39; &gt;&gt; &#x2F;etc&#x2F;sudoers</code></pre>\n<h2 id=\"安装-Golang\"><a href=\"#安装-Golang\" class=\"headerlink\" title=\"安装 Golang\"></a>安装 Golang</h2><h3 id=\"Golang下载解压\"><a href=\"#Golang下载解压\" class=\"headerlink\" title=\"Golang下载解压\"></a>Golang下载解压</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Go 语言支持以下系统：</p>\n<ul>\n<li>Linux</li>\n<li>FreeBSD</li>\n<li>Mac OS X（也称为 Darwin）</li>\n<li>Windows</li>\n</ul></blockquote>\n<p>安装包下载地址为：<a href=\"https://golang.org/dl/。\">https://golang.org/dl/。</a></p>\n<p>如果打不开可以使用这个地址：<a href=\"https://golang.google.cn/dl/。\">https://golang.google.cn/dl/。</a></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ wget https:&#x2F;&#x2F;golang.google.cn&#x2F;dl&#x2F;go1.18.6.linux-amd64.tar.gz\n$ sudo tar -zxvf go1.18.6.linux-amd64.tar.gz -C &#x2F;usr&#x2F;local&#x2F;</code></pre>\n<h3 id=\"全局环境配置\"><a href=\"#全局环境配置\" class=\"headerlink\" title=\"全局环境配置\"></a>全局环境配置</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ sudo vim &#x2F;etc&#x2F;profile</code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># GOROOT\nexport GOROOT&#x3D;&#x2F;usr&#x2F;local&#x2F;go\n# GOROOT bin\nexport PATH&#x3D;$PATH:$GOROOT&#x2F;bin\n# GOPATH\nexport GOPATH&#x3D;$HOME&#x2F;go\n# GOPATH bin\nexport PATH&#x3D;$PATH:$GOPATH&#x2F;bin</code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&#x2F;&#x2F;或如下：\nexport PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;go&#x2F;bin\nexport GOROOT&#x3D;&#x2F;usr&#x2F;local&#x2F;go\nexport GOPATH&#x3D;$HOME&#x2F;go\nexport PATH&#x3D;$PATH:$GOPATH&#x2F;bin</code></pre>\n<ul>\n<li>更新环境变量</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ source &#x2F;etc&#x2F;profile</code></pre>\n<ul>\n<li>查看Go环境</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ go env</code></pre>\n<h3 id=\"GO111MODULE设置\"><a href=\"#GO111MODULE设置\" class=\"headerlink\" title=\"GO111MODULE设置\"></a>GO111MODULE设置</h3><p>Go version &gt;= 1.13，直接用go env -w 设置（注意大小写）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go env -w GOPROXY&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;goproxy&#x2F;,direct\ngo env -w GO111MODULE&#x3D;on</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注：可以用go env -u 恢复初始设置；</p>\n<p>GOPROXY值还可以是<a href=\"https://goproxy.cn\">https://goproxy.cn</a></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go env -w GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy&#x2F;cn,direct</code></pre>\n<h4 id=\"go-mod-命令\"><a href=\"#go-mod-命令\" class=\"headerlink\" title=\"go mod 命令\"></a>go mod 命令</h4><p>go module 使用前置条件: GO111MODULE 设置为 on</p>\n<ul>\n<li>在当前文件夹下初始化一个新的 module，创建 go.mod 文件； <code>go mod init name</code></li>\n<li>拉取缺少的模块，移除不用的模块 ： <code>go mod tidy</code></li>\n<li>将依赖复制到 vendor 下 : <code>go mod vendor</code></li>\n<li>下载依赖 : <code>go mod download</code></li>\n<li>检验依赖: <code>go mod verify</code></li>\n<li>显示模块依赖图: <code>go mod graph</code></li>\n<li>解释为什么需要依赖: <code>go mod why</code></li>\n<li>编辑 go.mod 文件: <code>go eidt</code></li>\n<li>查看命令列表: <code>go mod</code></li>\n<li>查看命令帮助文档: <code>go help mod &lt;command&gt;</code></li>\n</ul></blockquote>\n<h2 id=\"安装-docker\"><a href=\"#安装-docker\" class=\"headerlink\" title=\"安装 docker\"></a>安装 docker</h2><h3 id=\"官方手动安装（不推荐）\"><a href=\"#官方手动安装（不推荐）\" class=\"headerlink\" title=\"官方手动安装（不推荐）\"></a>官方手动安装（不推荐）</h3><p><strong>Fabric 目前采用 Docker 容器作为链码执行环境，因此即使在本地运行，Peer 节点上也需要安装 Docker 环境，</strong>推荐使用 1.18 或者更新的版本。</p>\n<ul>\n<li>服务器上如果已经安装 docker，部署无需安装</li>\n<li>具体安装细节参见 <a href=\"https://docs.docker.com/install/linux/docker-ce/centos/\">官方文档</a></li>\n<li><a href=\"https://docs.docker.com/engine/install/ubuntu/\">https://docs.docker.com/engine/install/ubuntu/</a></li>\n</ul>\n<p>由于网络原因，安装速度可能无法忍受</p>\n<h3 id=\"阿里手动安装Docker（推荐）\"><a href=\"#阿里手动安装Docker（推荐）\" class=\"headerlink\" title=\"阿里手动安装Docker（推荐）\"></a>阿里手动安装Docker（推荐）</h3><p>1.如果Ubuntu系统中有旧版本的Docker，需要卸载后重新安装。可以使用以下命令进行卸载：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo apt-get remove docker docker-engine docker.io containerd runc</code></pre>\n<p>2.然后执行以下命令安装Docker：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 安装必要的一些系统工具\n$ sudo apt-get update\n$ sudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    gnupg-agent \\\n    software-properties-common\n\n#安装GPG证书：\n$ curl -fsSL http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo apt-key add -\n$ sudo apt-key fingerprint 0EBFCD88\n\n#写入软件源信息\n$ sudo add-apt-repository &quot;deb [arch&#x3D;amd64] http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu $(lsb_release -cs) stable&quot;\n\n#更新并安装Docker-CE\n$ sudo apt-get -y update\n$ sudo apt-get -y install docker-ce</code></pre>\n<p>3.将当前用户添加到Docker用户组：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#创建docker用户组\n$ sudo groupadd docker\n\n#将当前用户添加到docker用户组\n$sudo usermod -aG docker $USER\n\n$ sudo usermod -aG root $USER\n$ sudo usermod -aG sudo $USER\n\n#退出当前终端\n$ exit</code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker\n\n#执行以下命令如果输出docker版本信息如：Docker version 19.03.08则说明安装成功\n&amp; docker version</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><h3 id=\"可以用阿里镜像一键安装Docker（推荐）\"><a href=\"#可以用阿里镜像一键安装Docker（推荐）\" class=\"headerlink\" title=\"可以用阿里镜像一键安装Docker（推荐）\"></a>可以用阿里镜像一键安装Docker（推荐）</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">curl -fsSL https:&#x2F;&#x2F;get.docker.com | sudo bash -s docker --mirror Aliyun</code></pre></blockquote>\n<h3 id=\"安装Docker-Compose\"><a href=\"#安装Docker-Compose\" class=\"headerlink\" title=\"安装Docker-Compose\"></a>安装Docker-Compose</h3><p>下载docker-compose的二进制包：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#如果用户不是root,建议切换到root\n$ su -\n\n$ curl -SL https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;v2.11.2&#x2F;docker-compose-linux-x86_64 -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose\n\n$ chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose\n\n#检测docker-compose是否安装成功：\n$ exit\n$ docker-compose version</code></pre>\n<p>如果以上步骤可以顺利完成的话，接下来就可以进入docker镜像加速.</p>\n<h3 id=\"Docker-阿里云镜像加速\"><a href=\"#Docker-阿里云镜像加速\" class=\"headerlink\" title=\"Docker 阿里云镜像加速\"></a>Docker 阿里云镜像加速</h3><p>1.进入阿里云镜像加速页面</p>\n<p><a href=\"https://cr.console.aliyun.com/#/accelerator\">https://cr.console.aliyun.com/#/accelerator</a></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>需要注册才能获得个人加速地址，如后面/etc/docker/daemon.json配置： “<a href=\"https://xxxx.mirror.aliyuncs.com&quot;，xxxx是对应个人账户。\">https://xxxx.mirror.aliyuncs.com&quot;，xxxx是对应个人账户。</a></p></blockquote>\n<p>2.修改/etc/docker/daemon.json文件配置，没有则新建；</p>\n<p>您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ sudo mkdir -p &#x2F;etc&#x2F;docker\n\n$ sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;\n&#123;\n  &quot;registry-mirrors&quot;: [\n  &quot;https:&#x2F;&#x2F;xxxx.mirror.aliyuncs.com&quot;,\n  &quot;http:&#x2F;&#x2F;f1361db2.m.daocloud.io&quot;,\n  &quot;https:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&quot;\n   ]\n&#125;\nEOF\n\n#然后执行\nsudo systemctl daemon-reload\nsudo systemctl enable docker.service\nsudo systemctl restart docker.service\nsudo systemctl status docker.service</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Docker Hub 镜像加速器列表</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>镜像加速器</th>\n<th>镜像加速器地址</th>\n<th>专属加速器<a href=\"#\">？</a></th>\n<th>其它加速<a href=\"#\">？</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fdocker-cn.com%2Fregistry-mirror\">Docker 中国官方镜像</a></td>\n<td><code>https://registry.docker-cn.com</code></td>\n<td></td>\n<td>Docker Hub</td>\n</tr>\n<tr>\n<td><a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fdaocloud.io%2Fmirror\">DaoCloud 镜像站</a></td>\n<td><code>http://f1361db2.m.daocloud.io</code></td>\n<td>可登录，系统分配</td>\n<td>Docker Hub</td>\n</tr>\n<tr>\n<td><a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2FAzure%2Fcontainer-service-for-azure-china%2Fblob%2Fmaster%2Faks%2FREADME.md%2322-container-registry-proxy\">Azure 中国镜像</a></td>\n<td><code>https://dockerhub.azk8s.cn</code></td>\n<td></td>\n<td>Docker Hub、GCR、Quay</td>\n</tr>\n<tr>\n<td><a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fmirrors.ustc.edu.cn%2Fhelp%2Fdockerhub.html\">科大镜像站</a></td>\n<td><code>https://docker.mirrors.ustc.edu.cn</code></td>\n<td></td>\n<td>Docker Hub、<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fustclug%2Fmirrorrequest%2Fissues%2F91\">GCR</a>、<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fustclug%2Fmirrorrequest%2Fissues%2F135\">Quay</a></td>\n</tr>\n<tr>\n<td><a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fcr.console.aliyun.com\">阿里云</a></td>\n<td><code>https://&lt;your_code&gt;.mirror.aliyuncs.com</code></td>\n<td>需登录，系统分配</td>\n<td>Docker Hub</td>\n</tr>\n<tr>\n<td><a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fkirk-enterprise.github.io%2Fhub-docs%2F%23%2Fuser-guide%2Fmirror\">七牛云</a></td>\n<td><code>https://reg-mirror.qiniu.com</code></td>\n<td></td>\n<td>Docker Hub、GCR、Quay</td>\n</tr>\n<tr>\n<td><a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fc.163yun.com%2Fhub\">网易云</a></td>\n<td><code>https://hub-mirror.c.163.com</code></td>\n<td></td>\n<td>Docker Hub</td>\n</tr>\n<tr>\n<td><a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fcloud.tencent.com%2Fdocument%2Fproduct%2F457%2F9113\">腾讯云</a></td>\n<td><code>https://mirror.ccs.tencentyun.com</code></td>\n<td></td>\n<td>Docker Hub</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>Docker prune 删除相关命令</strong></p>\n<p>prune 命令用来删除不再使用的 docker 对象。</p>\n<p>删除所有未被 tag 标记和未被容器使用的镜像:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$ docker image prune</code></pre>\n<p>删除所有未被容器使用的镜像:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$ docker image prune -a</code></pre>\n<p>删除所有停止运行的容器:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$ docker container prune</code></pre>\n<p>删除所有未被挂载的卷:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$ docker volume prune</code></pre>\n<p>删除所有网络:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$ docker network prune</code></pre>\n<p>删除 docker 所有资源:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$ docker system prune</code></pre>\n<h3 id=\"Docker-Docker镜像存储位置\"><a href=\"#Docker-Docker镜像存储位置\" class=\"headerlink\" title=\"Docker-Docker镜像存储位置\"></a>Docker-Docker镜像存储位置</h3><p>不同系统Docker容器与镜像默认存放位置</p>\n<p>Linux 存放位置如下</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#容器与镜像存放在此目录下:\ncd &#x2F;var&#x2F;lib&#x2F;docker \n#镜像位置: \n&#x2F;var&#x2F;lib&#x2F;docker&#x2F;image\n#容器位置: \n&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers</code></pre>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-AjKX1RlK-1669947206343)(C:\\Users\\acrow\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221012124157762.png)]</p></blockquote>\n<h2 id=\"安装Nodejs\"><a href=\"#安装Nodejs\" class=\"headerlink\" title=\"安装Nodejs\"></a>安装Nodejs</h2><h3 id=\"安装NVM\"><a href=\"#安装NVM\" class=\"headerlink\" title=\"安装NVM\"></a>安装NVM</h3><p>nvm是一个<a href=\"https://so.csdn.net/so/search?q=node&amp;spm=1001.2101.3001.7020\">nodejs</a>的版本管理工具，可以简单操作node版本的切换、安装、查看。。。等等，与npm不同的是，npm是依赖包的管理工具。由于无法下载原因<code>，导致GitHub的</code>raw.githubusercontent.com域名解析被污染了。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">curl -o- https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;nvm-sh&#x2F;nvm&#x2F;v0.37.0&#x2F;install.sh | bash\nwget -qO- https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;nvm-sh&#x2F;nvm&#x2F;v0.37.0&#x2F;install.sh | bash</code></pre>\n<p>以上官方安装模式可能无法完成，这样通过如下方式安装：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ git clone https:&#x2F;&#x2F;github.com&#x2F;nvm-sh&#x2F;nvm.git\n$ cd nvm\n$ .&#x2F;install.sh</code></pre>\n<p>主要环境变量.bashrc的修改和启动</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ source .bashrc</code></pre>\n<p>检验安装</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ nvm -v\n$ nvm help</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>NVM常用相关命令，可以用nvm help查看相关命令</p>\n<p>nvm ls<br>nvm ls-remote<br>nvm install —lts<br>nvm uninstall —lts<br>nvm use —lts<br>nvm exec —lts<br>nvm run —lts<br>nvm version-remote —lts </p>\n<p>nvm ls ：列出所有已安装的 node 版本<br>nvm list ：列出所有已安装的 node 版本<br>nvm list available ：显示所有可下载的版本<br>nvm install latest：安装最新版 node<br>nvm install [node版本号] ：安装指定版本 node<br>nvm uninstall [node版本号] ：删除已安装的指定版本<br>nvm use [node版本号] ：切换到指定版本 node<br>nvm current ：当前 node 版本<br>nvm unalias [别名] ：删除已定义的别名</p></blockquote>\n<h3 id=\"安装Nodejs-LTS稳定版\"><a href=\"#安装Nodejs-LTS稳定版\" class=\"headerlink\" title=\"安装Nodejs LTS稳定版\"></a>安装Nodejs LTS稳定版</h3><p>下载太慢问题解决 以及下载稳定版本方法</p>\n<p>更换下载源（默认是从 <a href=\"https://link.jianshu.com/?t=http://nodejs.org/dist/\">http://nodejs.org/dist/</a> 下载的, 国外服务器, 必然很慢)），建议如下安装方式：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ NVM_NODEJS_ORG_MIRROR&#x3D;https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node</code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ nvm install --lts #安装最新稳定版 node\n$ nvm use --lts </code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>安装lts版本nodejs</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nvm ls\nnvm ls-remote\nnvm install --lts \nnvm use --lts </code></pre>\n<h2 id=\"Nodejs-加速\"><a href=\"#Nodejs-加速\" class=\"headerlink\" title=\"Nodejs 加速\"></a>Nodejs 加速</h2><p>外网在国内访问太慢了，所以一般大家都把镜像改成taobao镜像会加快安装速度。。。</p>\n<p>1.查看原始配置 npm config ls</p>\n<p>会发现里面的registry是npm原始的镜像：<a href=\"https://registry.npmjs.org/\">https://registry.npmjs.org/</a></p>\n<p>2.npm临时使用淘宝镜像安装依赖包</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">npm i -g express --registry https:&#x2F;&#x2F;registry.npm.taobao.org</code></pre>\n<p>3.npm持久使用淘宝镜像安装依赖包</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org\nnpm config get registry</code></pre>\n<p>注意，不推荐这样子，因为把npm的镜像完全设为了淘宝的镜像，万一我们有些依赖包只有npm原始镜像里面才有，而淘宝里面没有，那就悲剧了。所以分开npm和cnpm是最好的。</p></blockquote>\n<p>查看npm </p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">npm config ls\nnpm config ls -l</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>可以临时一键安装nodejs lts（不推荐）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">NVM_NODEJS_ORG_MIRROR&#x3D;https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node nvm install --lts</code></pre></blockquote>\n<h2 id=\"安装Fabric\"><a href=\"#安装Fabric\" class=\"headerlink\" title=\"安装Fabric\"></a>安装Fabric</h2><h3 id=\"官方脚本安装（不推荐）\"><a href=\"#官方脚本安装（不推荐）\" class=\"headerlink\" title=\"官方脚本安装（不推荐）\"></a>官方脚本安装（不推荐）</h3><p>为了帮助开发者快速搭建<code>Fabric</code>环境，官方创建了一个<code>Fabric</code>环境搭建的批处理工具<code>bootstrap.sh</code>，可以通过该工具直接安装环境：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;hyperledger&#x2F;fabric&#x2F;master&#x2F;scripts&#x2F;bootstrap.sh\n$ chmod +x bootstrap.sh\n$ .&#x2F;bootstrap.sh</code></pre>\n<p>不出意外的话会看见脚本顺利安装，但是可能痛苦不堪，同时对于初学者来说，一键安装的便捷的同时，也会导致无法理解Hyperledger Fabric网络启动原理和运行机制，因此强烈建议采用源码编译方式安装。</p>\n<h3 id=\"Fabric-源码编译（强烈推荐）\"><a href=\"#Fabric-源码编译（强烈推荐）\" class=\"headerlink\" title=\"Fabric 源码编译（强烈推荐）\"></a>Fabric 源码编译（强烈推荐）</h3><h4 id=\"获取代码\"><a href=\"#获取代码\" class=\"headerlink\" title=\"获取代码\"></a><strong>获取代码</strong></h4><p>目前，Fabric 官方仓库托管在 Github 仓库（github.com/hyperledger/fabric）中供下载使用。</p>\n<p>如果使用 1.13 之前版本的 Go 环境，需要将 Fabric 项目放到 $GOPATH 路径下。如下命令所示，创建 <code>$GOPATH/src/github.com/hyperledger</code> 目录结构并切换到该路径：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ mkdir -p $GOPATH&#x2F;src&#x2F;github.com&#x2F;hyperledger\n$ cd $GOPATH&#x2F;src&#x2F;github.com&#x2F;hyperledger</code></pre>\n<p>获取 Peer 和 Orderer 组件编译所需要的代码，两者目前在同一个 fabric 仓库中：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ git clone https:&#x2F;&#x2F;github.com&#x2F;hyperledger&#x2F;fabric.git\n$ cd fabric\n$ git checkout -b v2.4.6\n$ git branch</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/a1e49ee90b3040d69344fb71354ef5aa.png\" alt=\"在这里插入图片描述\"></p>\n<p>也可以指定 <code>--single-branch -b master --depth 1</code> 命令选项来指定只获取 master 分支最新代码：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ git clone --single-branch -b master --depth 1 https:&#x2F;&#x2F;github.com&#x2F;hyperledger&#x2F;fabric.git</code></pre>\n<p>Fabric CA 组件在独立的 fabric-ca 仓库中，可以通过如下命令获取：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ cd $GOPATH&#x2F;src&#x2F;github.com&#x2F;hyperledger\n$ git clone https:&#x2F;&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-ca.git\n$ cd fabric-ca\n$ git checkout -b v1.5.5\n$ git branch</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/3895ce1afde54fb686b4067778b83c75.png\" alt=\"在这里插入图片描述\"></p>\n<p>最后，检查确认 fabric 和 fabric-ca 两个仓库下载成功：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ls $GOPATH&#x2F;src&#x2F;github.com&#x2F;hyperledger\nfabric fabric-ca</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/74f0ecc944c44033b9c2315f03dcea53.png\" alt=\"请添加图片描述\"></p>\n<h4 id=\"编译安装-Peer-组件\"><a href=\"#编译安装-Peer-组件\" class=\"headerlink\" title=\"编译安装 Peer 组件\"></a><strong>编译安装 Peer 组件</strong></h4><p>配置版本号和编译参数：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ PROJECT_VERSION&#x3D;2.4.6\n$ LD_FLAGS&#x3D;&quot;-X github.com&#x2F;hyperledger&#x2F;fabric&#x2F;common&#x2F;metadata.Version&#x3D;$&#123;PROJECT_VERSION&#125; \\\n            -X github.com&#x2F;hyperledger&#x2F;fabric&#x2F;common&#x2F;metadata.BaseDockerLabel&#x3D;org.hyperledger.fabric \\\n            -X github.com&#x2F;hyperledger&#x2F;fabric&#x2F;common&#x2F;metadata.DockerNamespace&#x3D;hyperledger \\\n            -X github.com&#x2F;hyperledger&#x2F;fabric&#x2F;common&#x2F;metadata.BaseDockerNamespace&#x3D;hyperledger&quot;</code></pre>\n<p>通过如下命令编译并安装 fabric 的 peer 组件到 $GOPATH/bin 下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ CGO_CFLAGS&#x3D;&quot; &quot; go install -tags &quot;&quot; -ldflags &quot;$LD_FLAGS&quot; \\\ngithub.com&#x2F;hyperledger&#x2F;fabric&#x2F;cmd&#x2F;peer</code></pre>\n<p>当然，用户也可直接使用源码中的 Makefile 来进行编译，相关命令如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ make peer</code></pre>\n<p>这种情况下编译生成的 peer 组件会默认放在 build/bin 路径下。</p>\n<h4 id=\"编译安装-Orderer-组件\"><a href=\"#编译安装-Orderer-组件\" class=\"headerlink\" title=\"编译安装 Orderer 组件\"></a><strong>编译安装 Orderer 组件</strong></h4><p>通过如下命令编译并安装 fabric orderer 组件到 $GOPATH/bin 下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ CGO_CFLAGS&#x3D;&quot; &quot; go install -tags &quot;&quot; -ldflags &quot;$LD_FLAGS&quot; \\\ngithub.com&#x2F;hyperledger&#x2F;fabric&#x2F;cmd&#x2F;orderer</code></pre>\n<p>同样的，也可使用 Makefile 来编译安装 orderer 组件到 build/bin 路径下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ make orderer</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/3c1fa7aa8d464fdf9ca275ffd16e1783.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"编译安装-Fabric-CA-组件\"><a href=\"#编译安装-Fabric-CA-组件\" class=\"headerlink\" title=\"编译安装 Fabric CA 组件\"></a><strong>编译安装 Fabric CA 组件</strong></h4><p>采用如下命令编译并安装 fabric-ca 相关组件到 $GOPATH/bin 下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$PROJECT_VERSION&#x3D;1.5.5\n$go install -ldflags &quot;-X github.com&#x2F;hyperledger&#x2F;fabric-ca&#x2F;lib&#x2F;metadata.Version&#x3D;$PROJECT_VERSION&quot; \\\ngithub.com&#x2F;hyperledger&#x2F;fabric-ca&#x2F;cmd&#x2F;...\n\n或\n$ go install github.com&#x2F;hyperledger&#x2F;fabric-ca&#x2F;cmd&#x2F;...\n\n或链接静态库\n$go install -ldflags &quot;-X github.com&#x2F;hyperledger&#x2F;fabric-ca&#x2F;lib&#x2F;metadata.Version&#x3D;$PROJECT_VERSION\\\n-linkmode external -extldflags &#39;-static -lpthread&#39;&quot; \\\ngithub.com&#x2F;hyperledger&#x2F;fabric-ca&#x2F;cmd&#x2F;...</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/139d3a923a6b4b80af96acb14382585d.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"编译安装配置辅助工具\"><a href=\"#编译安装配置辅助工具\" class=\"headerlink\" title=\"编译安装配置辅助工具\"></a><strong>编译安装配置辅助工具</strong></h4><p>Fabric 中还提供了一系列配置辅助工具，包括：</p>\n<ul>\n<li>cryptogen（本地生成组织结构和身份文件）</li>\n<li>configtxgen（生成配置区块和配置交易）</li>\n<li>configtxlator（解析转换配置信息）</li>\n<li>discover（拓扑探测）</li>\n<li>idemixgen（Idemix 证书生成）等</li>\n</ul>\n<p>可以通过如下命令来快速编译和安装：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 编译安装 cryptogen，等价于执行 make cryptogen\n$ CGO_CFLAGS&#x3D;&quot; &quot; \\\ngo install -tags &quot;&quot; -ldflags &quot;$LD_FLAGS&quot; \\\ngithub.com&#x2F;hyperledger&#x2F;fabric&#x2F;cmd&#x2F;cryptogen\n\n# 编译安装 configtxgen，等价于执行 make configtxgen\n$ CGO_CFLAGS&#x3D;&quot; &quot; \\\ngo install -tags &quot;&quot; -ldflags &quot;$LD_FLAGS&quot; \\\ngithub.com&#x2F;hyperledger&#x2F;fabric&#x2F;cmd&#x2F;configtxgen\n\n# 编译安装 configtxlator，等价于执行 make configtxlator\n$ CGO_CFLAGS&#x3D;&quot; &quot; \\\ngo install -tags &quot;&quot; -ldflags &quot;$LD_FLAGS&quot; \\\ngithub.com&#x2F;hyperledger&#x2F;fabric&#x2F;cmd&#x2F;configtxlator\n\n# 编译安装 discover，等价于执行 make discover\n$ CGO_CFLAGS&#x3D;&quot; &quot; \\\ngo install -tags &quot;&quot; -ldflags &quot;$LD_FLAGS&quot; \\\ngithub.com&#x2F;hyperledger&#x2F;fabric&#x2F;cmd&#x2F;discover\n\n# 编译安装 idemixgen，等价于执行 make idemixgen\n$ CGO_CFLAGS&#x3D;&quot; &quot; \\\ngo install -tags &quot;&quot; -ldflags &quot;$LD_FLAGS&quot; \\\ngithub.com&#x2F;hyperledger&#x2F;fabric&#x2F;cmd&#x2F;idemixgen\n\n# 编译安装 osnadmin，等价于执行 make osnadmin,v2.2.3版本所需\n$ CGO_CFLAGS&#x3D;&quot; &quot; \\\n  go install -tags &quot;&quot; -ldflags &quot;$LD_FLAGS&quot; \\\n  github.com&#x2F;hyperledger&#x2F;fabric&#x2F;cmd&#x2F;osnadmin</code></pre>\n<p>另外，fabric 项目还提供了不少常见的编译命令，可以参考 Makefile 文件，例如编译所有的二进制文件可以使用如下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ make native</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/b8c9ded96dcd4f248c78787fe64bfb12.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"Dockefile-生成镜像（强烈推荐）\"><a href=\"#Dockefile-生成镜像（强烈推荐）\" class=\"headerlink\" title=\"Dockefile 生成镜像（强烈推荐）\"></a>Dockefile 生成镜像（强烈推荐）</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Hyperledger Fabric2.x Docker镜像编译加速</p>\n<p>Fabric的镜像是基于Alpine（Alpine Linux 是一个面向安全，轻量级的基于musl libc与busybox项目的Linux发行版），Alpine的包管理工具是APK，Alpine系统默认源是国外，因此在以Alpine为基础创建的镜像容器中安装软件会很慢。比如：安装最耗时的是”installing gcc”，真的要等半天。本文将使用清华大学开源软件源，地址为：<a href=\"https://links.jianshu.com/go?to=http%3A%2F%2Fmirrors.tuna.tsinghua.edu.cn%2Falpine%2Fv3.11%2Fmain%2F\">http://mirrors.tuna.tsinghua.edu.cn/alpine/v3.16/main/</a>，v3.16是Alpine的版本号。</p></blockquote>\n<h4 id=\"修改Dockerfile文件Alpine镜像加速\"><a href=\"#修改Dockerfile文件Alpine镜像加速\" class=\"headerlink\" title=\"修改Dockerfile文件Alpine镜像加速\"></a>修改Dockerfile文件Alpine镜像加速</h4><p>那如何Fabric镜像容器的源呢？具体步骤如下：</p>\n<p>进入Fabric源码中的images目录，该目录下有5个子目录，每个目录包含一个Dockerfile。如下图所示：</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-3Hbk6QGJ-1669947206346)(C:\\Users\\acrow\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221020084024529.png)]</p>\n<p>依次修改每个Dockerfile文件，在对应的位置增加代码：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">RUN echo -e http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;alpine&#x2F;v3.16&#x2F;main&#x2F; &gt; &#x2F;etc&#x2F;apk&#x2F;repositories</code></pre>\n<p>修改后的Dockerfile文件内容如下图所示：</p>\n<p>tools/Dockerfile：</p>\n<pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\"># Copyright IBM Corp. All Rights Reserved.\n#\n# SPDX-License-Identifier: Apache-2.0\n\nARG GO_VER\nARG ALPINE_VER\nFROM golang:$&#123;GO_VER&#125;-alpine$&#123;ALPINE_VER&#125; as golang\n\nRUN echo -e http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;alpine&#x2F;v3.16&#x2F;main&#x2F; &gt; &#x2F;etc&#x2F;apk&#x2F;repositories\n\nRUN apk add --no-cache \\\n\tbash \\\n\tbinutils-gold \\\n\tgcc \\\n\tgit \\\n\tmake \\\n\tmusl-dev;\n\nADD . $GOPATH&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric\nWORKDIR $GOPATH&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric\n\nFROM golang as tools\nARG GO_TAGS\nRUN CGO_ENABLED&#x3D;0 make tools GO_TAGS&#x3D;$&#123;GO_TAGS&#125;\n\nFROM golang:$&#123;GO_VER&#125;-alpine$&#123;ALPINE_VER&#125;\nRUN echo -e http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;alpine&#x2F;v3.16&#x2F;main&#x2F; &gt; &#x2F;etc&#x2F;apk&#x2F;repositories\n\n# git is required to support &#96;go list -m&#96;\nRUN apk add --no-cache \\\n\tbash \\\n\tgit \\\n\tjq \\\n\ttzdata;\nENV FABRIC_CFG_PATH &#x2F;etc&#x2F;hyperledger&#x2F;fabric\nVOLUME &#x2F;etc&#x2F;hyperledger&#x2F;fabric\nCOPY --from&#x3D;tools &#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;build&#x2F;bin &#x2F;usr&#x2F;local&#x2F;bin\nCOPY --from&#x3D;tools &#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;sampleconfig $&#123;FABRIC_CFG_PATH&#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/dbf3243de8e8ef81ff6735f7a9e08b22.png\" alt=\"img\"></p>\n<p>编译Dockerfile</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ cd ~&#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;images&#x2F;baseos\n$ docker build -t hyperledger&#x2F;baseos .</code></pre>\n<p>orderer/Dockerfile：</p>\n<pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\"># Copyright IBM Corp. All Rights Reserved.\n#\n# SPDX-License-Identifier: Apache-2.0\n\nARG GO_VER\nARG ALPINE_VER\nFROM alpine:$&#123;ALPINE_VER&#125; as base\nRUN echo -e http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;alpine&#x2F;v3.16&#x2F;main&#x2F; &gt; &#x2F;etc&#x2F;apk&#x2F;repositories\n\nRUN apk add --no-cache tzdata\n# set up nsswitch.conf for Go&#39;s &quot;netgo&quot; implementation\n# - https:&#x2F;&#x2F;github.com&#x2F;golang&#x2F;go&#x2F;blob&#x2F;go1.9.1&#x2F;src&#x2F;net&#x2F;conf.go#L194-L275\n# - docker run --rm debian:stretch grep &#39;^hosts:&#39; &#x2F;etc&#x2F;nsswitch.conf\nRUN [ ! -e &#x2F;etc&#x2F;nsswitch.conf ] &amp;&amp; echo &#39;hosts: files dns&#39; &gt; &#x2F;etc&#x2F;nsswitch.conf\n\nFROM golang:$&#123;GO_VER&#125;-alpine$&#123;ALPINE_VER&#125; as golang\nRUN echo -e http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;alpine&#x2F;v3.16&#x2F;main&#x2F; &gt; &#x2F;etc&#x2F;apk&#x2F;repositories\n\nRUN apk add --no-cache \\\n\tbash \\\n\tbinutils-gold \\\n\tgcc \\\n\tgit \\\n\tmake \\\n\tmusl-dev\nADD . $GOPATH&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric\nWORKDIR $GOPATH&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric\n\nFROM golang as orderer\nARG GO_TAGS\nRUN CGO_ENABLED&#x3D;0 make orderer GO_TAGS&#x3D;$&#123;GO_TAGS&#125;\n\nFROM base\nENV FABRIC_CFG_PATH &#x2F;etc&#x2F;hyperledger&#x2F;fabric\nVOLUME &#x2F;etc&#x2F;hyperledger&#x2F;fabric\nVOLUME &#x2F;var&#x2F;hyperledger\nCOPY --from&#x3D;orderer &#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;build&#x2F;bin &#x2F;usr&#x2F;local&#x2F;bin\nCOPY --from&#x3D;orderer &#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;sampleconfig&#x2F;msp $&#123;FABRIC_CFG_PATH&#125;&#x2F;msp\nCOPY --from&#x3D;orderer &#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;sampleconfig&#x2F;orderer.yaml $&#123;FABRIC_CFG_PATH&#125;\nCOPY --from&#x3D;orderer &#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;sampleconfig&#x2F;configtx.yaml $&#123;FABRIC_CFG_PATH&#125;\nEXPOSE 7050\nCMD [&quot;orderer&quot;]</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/cdb0d67d391a7517272910284bfc2db4.png\" alt=\"img\"></p>\n<p>peer/Dockerfile：</p>\n<pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\"># Copyright IBM Corp. All Rights Reserved.\n#\n# SPDX-License-Identifier: Apache-2.0\n\nARG GO_VER\nARG ALPINE_VER\n\nFROM alpine:$&#123;ALPINE_VER&#125; as peer-base\nRUN echo -e http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;alpine&#x2F;v3.16&#x2F;main&#x2F; &gt; &#x2F;etc&#x2F;apk&#x2F;repositories\n\nRUN apk add --no-cache tzdata\n# set up nsswitch.conf for Go&#39;s &quot;netgo&quot; implementation\n# - https:&#x2F;&#x2F;github.com&#x2F;golang&#x2F;go&#x2F;blob&#x2F;go1.9.1&#x2F;src&#x2F;net&#x2F;conf.go#L194-L275\n# - docker run --rm debian:stretch grep &#39;^hosts:&#39; &#x2F;etc&#x2F;nsswitch.conf\nRUN echo &#39;hosts: files dns&#39; &gt; &#x2F;etc&#x2F;nsswitch.conf\n\nFROM golang:$&#123;GO_VER&#125;-alpine$&#123;ALPINE_VER&#125; as golang\nRUN echo -e http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;alpine&#x2F;v3.16&#x2F;main&#x2F; &gt; &#x2F;etc&#x2F;apk&#x2F;repositories\n\nRUN apk add --no-cache \\\n\tbash \\\n\tbinutils-gold \\\n\tgcc \\\n\tgit \\\n\tmake \\\n\tmusl-dev\nADD . $GOPATH&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric\nWORKDIR $GOPATH&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric\n\nFROM golang as peer\nARG GO_TAGS\nRUN CGO_ENABLED&#x3D;0 make peer GO_TAGS&#x3D;$&#123;GO_TAGS&#125;\nRUN CGO_ENABLED&#x3D;0 make ccaasbuilder\nRUN \\\n    export MARCH&#x3D;$(go env GOOS)-$(go env GOARCH) &amp;&amp; \\\n    mkdir -p release&#x2F;linux-platform &amp;&amp; \\\n    cp -r release&#x2F;$&#123;MARCH&#125;&#x2F;builders release&#x2F;linux-platform&#x2F;.\n\nFROM peer-base\nENV FABRIC_CFG_PATH &#x2F;etc&#x2F;hyperledger&#x2F;fabric\nVOLUME &#x2F;etc&#x2F;hyperledger&#x2F;fabric\nVOLUME &#x2F;var&#x2F;hyperledger\nCOPY --from&#x3D;peer &#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;build&#x2F;bin &#x2F;usr&#x2F;local&#x2F;bin\nCOPY --from&#x3D;peer &#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;sampleconfig&#x2F;msp $&#123;FABRIC_CFG_PATH&#125;&#x2F;msp\nCOPY --from&#x3D;peer &#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;sampleconfig&#x2F;core.yaml $&#123;FABRIC_CFG_PATH&#125;&#x2F;core.yaml\nCOPY --from&#x3D;peer &#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;release&#x2F;linux-platform&#x2F;builders&#x2F;ccaas&#x2F;bin&#x2F; &#x2F;opt&#x2F;hyperledger&#x2F;ccaas_builder&#x2F;bin&#x2F;\nEXPOSE 7051\nCMD [&quot;peer&quot;,&quot;node&quot;,&quot;start&quot;]\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/424b6471ad3bea3c99b0c19e1eb0383a.png\" alt=\"img\"></p>\n<p>ccenv/Dockerfile：</p>\n<pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\"># Copyright IBM Corp. All Rights Reserved.\n#\n# SPDX-License-Identifier: Apache-2.0\n\nARG GO_VER\nARG ALPINE_VER\nFROM golang:$&#123;GO_VER&#125;-alpine$&#123;ALPINE_VER&#125;\nRUN echo -e http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;alpine&#x2F;v3.16&#x2F;main&#x2F; &gt; &#x2F;etc&#x2F;apk&#x2F;repositories\n\nRUN apk add --no-cache \\\n\tbinutils-gold \\\n\tg++ \\\n\tgcc \\\n\tgit \\\n\tmusl-dev\n\nRUN mkdir -p &#x2F;chaincode&#x2F;output &#x2F;chaincode&#x2F;input\nRUN addgroup -g 500 chaincode &amp;&amp; adduser -u 500 -D -h &#x2F;home&#x2F;chaincode -G chaincode chaincode\nRUN chown -R chaincode:chaincode &#x2F;chaincode\nUSER chaincode\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/fa9bdabc0e2d01f2752986d8665ebd8e.png\" alt=\"img\"></p>\n<pre><code>baseos/Dockerfile：\n</code></pre><pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\"># Copyright IBM Corp. All Rights Reserved.\n#\n# SPDX-License-Identifier: Apache-2.0\n\nARG GO_VER\nARG ALPINE_VER\n\nFROM alpine:$&#123;ALPINE_VER&#125; as base\nRUN echo -e http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;alpine&#x2F;v3.16&#x2F;main&#x2F; &gt; &#x2F;etc&#x2F;apk&#x2F;repositories\n\nRUN apk add --no-cache tzdata\nRUN addgroup -g 500 chaincode &amp;&amp; adduser -u 500 -D -h &#x2F;home&#x2F;chaincode -G chaincode chaincode\nUSER chaincode\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f104701283e8570e92c4e46e09cfdfe3.png\" alt=\"img\"></p>\n<p>修改完这5个Dockerfile文件之后，在去Fabric源码根目录下执行：make docker，感觉像风一样快。</p>\n<h4 id=\"编译Dockerfile生成镜像\"><a href=\"#编译Dockerfile生成镜像\" class=\"headerlink\" title=\"编译Dockerfile生成镜像\"></a>编译Dockerfile生成镜像</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">make docker</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/241571b4735e46f49bb5f9cec9baa4b7.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/d6bcd8b4566a4ae3bb2cfb8565369bbe.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"手动安装官方二进制包（推荐）\"><a href=\"#手动安装官方二进制包（推荐）\" class=\"headerlink\" title=\"手动安装官方二进制包（推荐）\"></a>手动安装官方二进制包（推荐）</h3><p>直接使用官方脚本不出意外的话肯定会出意外（网络原因），推荐手动安装需要的各项环境。</p>\n<h4 id=\"1-安装fabric-samples\"><a href=\"#1-安装fabric-samples\" class=\"headerlink\" title=\"1.安装fabric-samples\"></a>1.安装fabric-samples</h4><p><code>fabric-samples</code>是<code>Fabric</code>的官方Demo集合，其内部包含多个示例，每个示例有<code>Golang</code>、<code>JavaScript</code>、<code>typescript</code>、<code>Java</code>的链码实现，并且这些链码可以直接部署到对应的<code>Fabric</code>上，对初学者很有帮助。<code>fabric-samples</code>安装非常简单，使用`</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ git clone https:&#x2F;&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-samples.git\n$ git clone https:&#x2F;&#x2F;gitee.com&#x2F;hyperledger&#x2F;fabric-samples.git\n$ git tag&#96;\n$ git checkout -b v2.3.0</code></pre>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-hjFZ08Y1-1669947206348)(C:\\Users\\acrow\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221019104109660.png)]</p>\n<p>将项目源码克隆到本地即可，若一直失败也可以直接在release中下载对应版本的压缩包。</p>\n<h4 id=\"2-安装Fabric\"><a href=\"#2-安装Fabric\" class=\"headerlink\" title=\"2.安装Fabric\"></a>2.安装Fabric</h4><p><a href=\"https://link.segmentfault.com/?enc=E6lollozaRc0eWH9ucvkcQ%3D%3D.XhhkJuXXek6bLz2v2umhnlGq1i7b75WIeax8UPuO78p0ZkGJfrd%2FtPxuFv7UM67q\">Fabric</a>是联盟链的核心开发工具，包含了我们开发、编译、部署过程中的所有命令。下载fabric 2.4.6并解压</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ wget https:&#x2F;&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;releases&#x2F;download&#x2F;v2.4.6&#x2F;hyperledger-fabric-linux-amd64-2.4.6.tar.gz\n\n$ mkdir &#x2F;usr&#x2F;local&#x2F;fabric\n\n$ tar -xzvf hyperledger-fabric-linux-amd64-2.4.6.tar.gz -C &#x2F;usr&#x2F;local&#x2F;fabric</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/0b7d6b515c1e47419c0017192c551655.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/cc0574e689ee4ffeb96a983ce68bd7f2.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"3-下载fabric-ca-1-5-5并解压\"><a href=\"#3-下载fabric-ca-1-5-5并解压\" class=\"headerlink\" title=\"3.下载fabric-ca 1.5.5并解压\"></a>3.下载fabric-ca 1.5.5并解压</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ wget https:&#x2F;&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-ca&#x2F;releases&#x2F;download&#x2F;v1.5.5&#x2F;hyperledger-fabric-ca-linux-amd64-1.5.5.tar.gz\n\n$ tar -xzvf hyperledger-fabric-ca-linux-amd64-1.5.5.tar.gz\n\n$ mv bin&#x2F;* &#x2F;usr&#x2F;local&#x2F;fabric&#x2F;bin</code></pre>\n<h4 id=\"4-设置环境变量，在-etc-profile末尾添加\"><a href=\"#4-设置环境变量，在-etc-profile末尾添加\" class=\"headerlink\" title=\"4.设置环境变量，在/etc/profile末尾添加\"></a>4.设置环境变量，在<code>/etc/profile</code>末尾添加</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#Fabric\nexport FABRIC&#x3D;&#x2F;usr&#x2F;local&#x2F;fabric\nexport PATH&#x3D;$PATH:$FABRIC&#x2F;bin</code></pre>\n<h4 id=\"5-更新环境变量source-etc-profile\"><a href=\"#5-更新环境变量source-etc-profile\" class=\"headerlink\" title=\"5.更新环境变量source /etc/profile\"></a>5.更新环境变量<code>source /etc/profile</code></h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ source &#x2F;etc&#x2F;profile</code></pre>\n<h3 id=\"拉取Fabric相关组件Docker镜像\"><a href=\"#拉取Fabric相关组件Docker镜像\" class=\"headerlink\" title=\"拉取Fabric相关组件Docker镜像\"></a>拉取Fabric相关组件Docker镜像</h3><p> 部分镜像说明如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>镜像名称</th>\n<th>是否可选</th>\n<th>镜像说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hyperledger/fabric-tools</td>\n<td>可选</td>\n<td>包含crytogen、configtxgen、configtxlator我第二次工具的镜像文件</td>\n</tr>\n<tr>\n<td>hyperledger/fabric-couchdb</td>\n<td>可选</td>\n<td>CouchDB的数据库镜像文件、状态数据库选择CouchDB的时候才需要</td>\n</tr>\n<tr>\n<td>hyperledger/fabric-kafka</td>\n<td>可选</td>\n<td>Kafka的镜像文件</td>\n</tr>\n<tr>\n<td>hyperledger/fabric-zookeeper</td>\n<td>可选</td>\n<td>Zookeeper的镜像文件，Kafka需要的组件</td>\n</tr>\n<tr>\n<td>hyperledger/fabric-peer</td>\n<td>必选</td>\n<td>Peer节点的镜像文件</td>\n</tr>\n<tr>\n<td>hyperledger/fabric-orderer</td>\n<td>必选</td>\n<td>排序服务节点的镜像文件</td>\n</tr>\n<tr>\n<td>hyperledger/fabric-javaenv</td>\n<td>可选</td>\n<td>java链码的基础镜像文件</td>\n</tr>\n<tr>\n<td>hyperledger/fabric-ccenv</td>\n<td>必选</td>\n<td>Golang链码的基础镜像文件</td>\n</tr>\n<tr>\n<td>hyperledger/fabric-ca</td>\n<td>可选</td>\n<td>fabric-ca的镜像文件，用到fabric-ca的时候才需要</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><code>Fabric</code>相关镜像均可以在<a href=\"https://link.segmentfault.com/?enc=DhZHHOTYt8h00zGmC5wdSA%3D%3D.nL93LsMCP%2B720TTezn8nCykyHIKYG2xOh%2B9PxoLqwz0%3D\">DockerHub</a>官方镜像网站进行下载，搜索需要的镜像则可获取安装方法，本试验用到的所有镜像为：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ sudo docker pull hyperledger&#x2F;fabric-tools:2.4.6\n$ sudo docker pull hyperledger&#x2F;fabric-peer:2.4.6\n$ sudo docker pull hyperledger&#x2F;fabric-orderer:2.4.6\n$ sudo docker pull hyperledger&#x2F;fabric-ccenv:2.4.6\n$ sudo docker pull hyperledger&#x2F;fabric-baseos:2.4.6\n$ sudo docker pull hyperledger&#x2F;fabric-ca:1.5.5</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/ab545085edf141d7920beaf84fb42a7f.png\" alt=\"在这里插入图片描述\"></p>\n<p>使用<code>docker images</code>命令查看安装完成后镜像：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hyperledger&#x2F;fabric-tools     2.4.6       625237d887db   4 weeks ago    473MB\nhyperledger&#x2F;fabric-peer      2.4.6       ee643d889779   4 weeks ago    62.3MB\nhyperledger&#x2F;fabric-orderer   2.4.6       df64446ac2df   4 weeks ago    37.3MB\nhyperledger&#x2F;fabric-ccenv     2.4.6       da4f00cb576a   4 weeks ago    517MB\nhyperledger&#x2F;fabric-baseos    2.4.6       0287ebf8aaf3   4 weeks ago    6.94MB\nhyperledger&#x2F;fabric-ca        1.5.5       4ea287b75c63   6 months ago   69.8MB</code></pre>\n<p>镜像打上<code>latest</code>标签</p>\n<p>示例代码中使用的镜像标签都为<code>latest</code>，但如果在<code>pull</code>时直接选择<code>latest</code>可能会报错，因此我们在上面镜像拉取完成后手动使用以下命令为镜像打上<code>latest</code>标签：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ sudo docker tag hyperledger&#x2F;fabric-tools:2.4.6 hyperledger&#x2F;fabric-tools:latest\n$ sudo docker tag hyperledger&#x2F;fabric-peer:2.4.6 hyperledger&#x2F;fabric-peer:latest\n$ sudo docker tag hyperledger&#x2F;fabric-orderer:2.4.6 hyperledger&#x2F;fabric-orderer:latest\n$ sudo docker tag hyperledger&#x2F;fabric-ccenv:2.4.6 hyperledger&#x2F;fabric-ccenv:latest\n$ sudo docker tag hyperledger&#x2F;fabric-baseos:2.4.6 hyperledger&#x2F;fabric-baseos:latest\n$ sudo docker tag hyperledger&#x2F;fabric-ca:1.5.5 hyperledger&#x2F;fabric-ca:latest</code></pre>\n<p>删除2.4.6的镜像</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$ sudo docker rmi hyperledger&#x2F;fabric-tools:2.4.6\n$ sudo docker rmi hyperledger&#x2F;fabric-peer:2.4.6\n$ sudo docker rmi hyperledger&#x2F;fabric-orderer:2.4.6\n$ sudo docker rmi hyperledger&#x2F;fabric-ccenv:2.4.6\n$ sudo docker rmi hyperledger&#x2F;fabric-baseos:2.4.6\n$ sudo docker rmi hyperledger&#x2F;fabric-ca:1.5.5</code></pre>\n<p>最终的镜像为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/4c8a1c6dfc614782a1ab8f1d757c7c1e.png\" alt=\"在这里插入图片描述\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>特别注意，下载拉取镜像之前建议通过相关镜像命令删除相关镜像和配置，避免冲突！</p></blockquote>\n<h2 id=\"test-network网络测试\"><a href=\"#test-network网络测试\" class=\"headerlink\" title=\"test-network网络测试\"></a>test-network网络测试</h2><h3 id=\"启动fabric网络\"><a href=\"#启动fabric网络\" class=\"headerlink\" title=\"启动fabric网络\"></a>启动fabric网络</h3><ol>\n<li><p>进入fabric-sample的test-network目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ cd ~&#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-samples&#x2F;test-network</code></pre>\n</li>\n<li><p>运行<code>./network.sh up</code>启动网络</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ .&#x2F;network.sh up\nUsing docker and docker-compose\nStarting nodes with CLI timeout of &#39;5&#39; tries and CLI delay of &#39;3&#39; seconds and using database &#39;leveldb&#39; with crypto from &#39;cryptogen&#39;\nLOCAL_VERSION&#x3D;2.4.6\nDOCKER_IMAGE_VERSION&#x3D;2.4.6\n&#x2F;home&#x2F;magpie&#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-samples&#x2F;test-network&#x2F;..&#x2F;bin&#x2F;cryptogen\nGenerating certificates using cryptogen tool\nCreating Org1 Identities\n+ cryptogen generate --config&#x3D;.&#x2F;organizations&#x2F;cryptogen&#x2F;crypto-config-org1.yaml --output&#x3D;organizations\norg1.example.com\n+ res&#x3D;0\nCreating Org2 Identities\n+ cryptogen generate --config&#x3D;.&#x2F;organizations&#x2F;cryptogen&#x2F;crypto-config-org2.yaml --output&#x3D;organizations\norg2.example.com\n+ res&#x3D;0\nCreating Orderer Org Identities\n+ cryptogen generate --config&#x3D;.&#x2F;organizations&#x2F;cryptogen&#x2F;crypto-config-orderer.yaml --output&#x3D;organizations\n+ res&#x3D;0\nGenerating CCP files for Org1 and Org2\n[+] Running 8&#x2F;8\n ⠿ Network fabric_test                      Created                                                                                                               0.3s\n ⠿ Volume &quot;compose_orderer.example.com&quot;     Created                                                                                                               0.0s\n ⠿ Volume &quot;compose_peer0.org1.example.com&quot;  Created                                                                                                               0.0s\n ⠿ Volume &quot;compose_peer0.org2.example.com&quot;  Created                                                                                                               0.0s\n ⠿ Container peer0.org1.example.com         Started                                                                                                               3.5s\n ⠿ Container peer0.org2.example.com         Started                                                                                                               5.5s\n ⠿ Container orderer.example.com            Started                                                                                                               4.9s\n ⠿ Container cli                            Started                                                                                                               6.6s\nCONTAINER ID   IMAGE                               COMMAND             CREATED         STATUS                  PORTS                                                                                                                             NAMES\nbced8a5c720d   hyperledger&#x2F;fabric-tools:latest     &quot;&#x2F;bin&#x2F;bash&quot;         7 seconds ago   Up Less than a second                                                                                                                                     cli\n0f61f922dd99   hyperledger&#x2F;fabric-orderer:latest   &quot;orderer&quot;           7 seconds ago   Up 2 seconds            0.0.0.0:7050-&gt;7050&#x2F;tcp, :::7050-&gt;7050&#x2F;tcp, 0.0.0.0:7053-&gt;7053&#x2F;tcp, :::7053-&gt;7053&#x2F;tcp, 0.0.0.0:9443-&gt;9443&#x2F;tcp, :::9443-&gt;9443&#x2F;tcp   orderer.example.com\n4a1aec960d09   hyperledger&#x2F;fabric-peer:latest      &quot;peer node start&quot;   7 seconds ago   Up 1 second             0.0.0.0:9051-&gt;9051&#x2F;tcp, :::9051-&gt;9051&#x2F;tcp, 7051&#x2F;tcp, 0.0.0.0:9445-&gt;9445&#x2F;tcp, :::9445-&gt;9445&#x2F;tcp                                    peer0.org2.example.com\ncd163867a31c   hyperledger&#x2F;fabric-peer:latest      &quot;peer node start&quot;   7 seconds ago   Up 3 seconds            0.0.0.0:7051-&gt;7051&#x2F;tcp, :::7051-&gt;7051&#x2F;tcp, 0.0.0.0:9444-&gt;9444&#x2F;tcp, :::9444-&gt;9444&#x2F;tcp                                              peer0.org1.example.com\nefd328836573   portainer&#x2F;portainer-ce              &quot;&#x2F;portainer&quot;        9 days ago      Up 17 hours             0.0.0.0:8000-&gt;8000&#x2F;tcp, :::8000-&gt;8000&#x2F;tcp, 0.0.0.0:9000-&gt;9000&#x2F;tcp, :::9000-&gt;9000&#x2F;tcp, 9443&#x2F;tcp                                    portainer</code></pre>\n<h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"!!!\"></a>!!!</h4><p><img src=\"https://img-blog.csdnimg.cn/1fb1b182c6b347c1a0fef3325cd8cf32.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/3e55328681384e53b575f221d9ea6af9.png\" alt=\"在这里插入图片描述\"></p>\n<p>最终出现以上输出日志则表示网络启动成功，每个加入Fabric网络的Node和User都需要隶属于某个组织，以上网络中包含了两个平行组织—peer0.org1.example.com<code>和</code>peer0.org2.example.com<code>，它还包括一个作为ordering service维护网络的</code>orderer.example.com`。</p>\n<h3 id=\"创建channel\"><a href=\"#创建channel\" class=\"headerlink\" title=\"创建channel\"></a>创建channel</h3><p>上节已经在机器上运行了peer节点和orderer节点，现在可以使用network.sh为Org1和Org2之间创建channel。channel是特定网络成员之间的私有通道，只能被属于该通道的组织使用，并且对网络的其他成员是不可见的。每个channel都有一个单独的区块链账本，属于该通道的组织可以让其下peer加入该通道，以让peer能够存储channel上的帐本并验证账本上的交易。<br>使用以下命令创建自定义通道testchannel：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ cd ~&#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-samples&#x2F;test-network\n$ .&#x2F;network.sh createChannel -c testchannel</code></pre>\n<p> 结果显示：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">magpie@Goserver:~&#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-samples&#x2F;test-network$ .&#x2F;network.sh createChannel -c testchannel\nCreating channel &#39;testchannel&#39;.\nIf network is not up, starting nodes with CLI timeout of &#39;5&#39; tries and CLI delay of &#39;3&#39; seconds and using database &#39;leveldb \nGenerating channel create transaction &#39;testchannel.tx&#39;\n+ configtxgen -profile TwoOrgsChannel -outputCreateChannelTx .&#x2F;channel-artifacts&#x2F;testchannel.tx -channelID testchannel\n2022-10-16 06:17:21.349 UTC [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration\n2022-10-16 06:17:21.371 UTC [common.tools.configtxgen.localconfig] Load -&gt; INFO 002 Loaded configuration: &#x2F;home&#x2F;magpie&#x2F;fabric-samples01&#x2F;test-network&#x2F;configtx&#x2F;configtx.yaml\n2022-10-16 06:17:21.371 UTC [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 003 Generating new channel configtx\n2022-10-16 06:17:21.377 UTC [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 004 Writing new channel tx\n+ res&#x3D;0\nCreating channel testchannel\nUsing organization 1\n+ peer channel create -o localhost:7050 -c testchannel --ordererTLSHostnameOverride orderer.example.com -f .&#x2F;channel-artifacts&#x2F;testchannel.tx --outputBlock .&#x2F;channel-artifacts&#x2F;testchannel.block --tls --cafile &#x2F;home&#x2F;magpie&#x2F;fabric-samples01&#x2F;test-network&#x2F;organizations&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem\n+ res&#x3D;0\n2022-10-16 06:17:24.799 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized\n2022-10-16 06:17:25.437 UTC [cli.common] readBlock -&gt; INFO 002 Expect block, but got status: &amp;&#123;NOT_FOUND&#125;\n2022-10-16 06:17:25.440 UTC [channelCmd] InitCmdFactory -&gt; INFO 003 Endorser and orderer connections initialized\n2022-10-16 06:17:25.644 UTC [cli.common] readBlock -&gt; INFO 004 Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;\n2022-10-16 06:17:25.650 UTC [channelCmd] InitCmdFactory -&gt; INFO 005 Endorser and orderer connections initialized\n2022-10-16 06:17:25.852 UTC [cli.common] readBlock -&gt; INFO 006 Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;\n2022-10-16 06:17:25.855 UTC [channelCmd] InitCmdFactory -&gt; INFO 007 Endorser and orderer connections initialized\n2022-10-16 06:17:26.057 UTC [cli.common] readBlock -&gt; INFO 008 Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;\n2022-10-16 06:17:26.059 UTC [channelCmd] InitCmdFactory -&gt; INFO 009 Endorser and orderer connections initialized\n2022-10-16 06:17:26.262 UTC [cli.common] readBlock -&gt; INFO 00a Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;\n2022-10-16 06:17:26.264 UTC [channelCmd] InitCmdFactory -&gt; INFO 00b Endorser and orderer connections initialized\n2022-10-16 06:17:26.467 UTC [cli.common] readBlock -&gt; INFO 00c Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;\n2022-10-16 06:17:26.469 UTC [channelCmd] InitCmdFactory -&gt; INFO 00d Endorser and orderer connections initialized\n2022-10-16 06:17:26.675 UTC [cli.common] readBlock -&gt; INFO 00e Received block: 0\nChannel &#39;testchannel&#39; created\nJoining org1 peer to the channel...\nUsing organization 1\n+ peer channel join -b .&#x2F;channel-artifacts&#x2F;testchannel.block\n+ res&#x3D;0\n2022-10-16 06:17:29.724 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized\n2022-10-16 06:17:29.877 UTC [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel\nJoining org2 peer to the channel...\nUsing organization 2\n+ peer channel join -b .&#x2F;channel-artifacts&#x2F;testchannel.block\n+ res&#x3D;0\n2022-10-16 06:17:32.917 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized\n2022-10-16 06:17:33.012 UTC [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel\nSetting anchor peer for org1...\nUsing organization 1\nFetching channel config for channel testchannel\nUsing organization 1\nFetching the most recent configuration block for the channel\n+ peer channel fetch config config_block.pb -o orderer.example.com:7050 --ordererTLSHostnameOverride orderer.example.com -c testchannel --tls --cafile &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;organizations&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem\n2022-10-16 06:17:33.356 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized\n2022-10-16 06:17:33.358 UTC [cli.common] readBlock -&gt; INFO 002 Received block: 0\n2022-10-16 06:17:33.395 UTC [channelCmd] fetch -&gt; INFO 003 Retrieving last config block: 0\n2022-10-16 06:17:33.397 UTC [cli.common] readBlock -&gt; INFO 004 Received block: 0\nDecoding config block to JSON and isolating config to Org1MSPconfig.json\n+ jq &#39;.data.data[0].payload.data.config&#39;\n+ configtxlator proto_decode --input config_block.pb --type common.Block\n+ jq &#39;.channel_group.groups.Application.groups.Org1MSP.values +&#x3D; &#123;&quot;AnchorPeers&quot;:&#123;&quot;mod_policy&quot;: &quot;Admins&quot;,&quot;value&quot;:&#123;&quot;anchor_peers&quot;: [&#123;&quot;host&quot;: &quot;peer0.org1.example.com&quot;,&quot;port&quot;: 7051&#125;]&#125;,&quot;version&quot;: &quot;0&quot;&#125;&#125;&#39; Org1MSPconfig.json\nGenerating anchor peer update transaction for Org1 on channel testchannel\n+ configtxlator proto_encode --input Org1MSPconfig.json --type common.Config\n+ configtxlator proto_encode --input Org1MSPmodified_config.json --type common.Config\n+ configtxlator compute_update --channel_id testchannel --original original_config.pb --updated modified_config.pb\n+ configtxlator proto_decode --input config_update.pb --type common.ConfigUpdate\n+ jq .\n++ cat config_update.json\n+ echo &#39;&#123;&quot;payload&quot;:&#123;&quot;header&quot;:&#123;&quot;channel_header&quot;:&#123;&quot;channel_id&quot;:&quot;testchannel&quot;, &quot;type&quot;:2&#125;&#125;,&quot;data&quot;:&#123;&quot;config_update&quot;:&#123;&#39; &#39;&quot;channel_id&quot;:&#39; &#39;&quot;testchannel&quot;,&#39; &#39;&quot;isolated_data&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;read_set&quot;:&#39; &#39;&#123;&#39; &#39;&quot;groups&quot;:&#39; &#39;&#123;&#39; &#39;&quot;Application&quot;:&#39; &#39;&#123;&#39; &#39;&quot;groups&quot;:&#39; &#39;&#123;&#39; &#39;&quot;Org1MSP&quot;:&#39; &#39;&#123;&#39; &#39;&quot;groups&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policies&quot;:&#39; &#39;&#123;&#39; &#39;&quot;Admins&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;Endorsement&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;Readers&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;Writers&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;values&quot;:&#39; &#39;&#123;&#39; &#39;&quot;MSP&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;value&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policies&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;values&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;version&quot;:&#39; &#39;&quot;1&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policies&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;values&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;write_set&quot;:&#39; &#39;&#123;&#39; &#39;&quot;groups&quot;:&#39; &#39;&#123;&#39; &#39;&quot;Application&quot;:&#39; &#39;&#123;&#39; &#39;&quot;groups&quot;:&#39; &#39;&#123;&#39; &#39;&quot;Org1MSP&quot;:&#39; &#39;&#123;&#39; &#39;&quot;groups&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;Admins&quot;,&#39; &#39;&quot;policies&quot;:&#39; &#39;&#123;&#39; &#39;&quot;Admins&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;Endorsement&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;Readers&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;Writers&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;values&quot;:&#39; &#39;&#123;&#39; &#39;&quot;AnchorPeers&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;Admins&quot;,&#39; &#39;&quot;value&quot;:&#39; &#39;&#123;&#39; &#39;&quot;anchor_peers&quot;:&#39; &#39;[&#39; &#39;&#123;&#39; &#39;&quot;host&quot;:&#39; &#39;&quot;peer0.org1.example.com&quot;,&#39; &#39;&quot;port&quot;:&#39; 7051 &#39;&#125;&#39; &#39;]&#39; &#39;&#125;,&#39; &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;MSP&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;value&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;version&quot;:&#39; &#39;&quot;1&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policies&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;values&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;version&quot;:&#39; &#39;&quot;1&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policies&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;values&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;&#39; &#39;&#125;&#125;&#125;&#125;&#39;\n+ configtxlator proto_encode --input config_update_in_envelope.json --type common.Envelope\n2022-10-16 06:17:36.045 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized\n2022-10-16 06:17:36.060 UTC [channelCmd] update -&gt; INFO 002 Successfully submitted channel update\nAnchor peer set for org &#39;Org1MSP&#39; on channel &#39;testchannel&#39;\nSetting anchor peer for org2...\nUsing organization 2\nFetching channel config for channel testchannel\nUsing organization 2\nFetching the most recent configuration block for the channel\n+ peer channel fetch config config_block.pb -o orderer.example.com:7050 --ordererTLSHostnameOverride orderer.example.com -c testchannel --tls --cafile &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;organizations&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem\n2022-10-16 06:17:36.242 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized\n2022-10-16 06:17:36.245 UTC [cli.common] readBlock -&gt; INFO 002 Received block: 1\n2022-10-16 06:17:36.246 UTC [channelCmd] fetch -&gt; INFO 003 Retrieving last config block: 1\n2022-10-16 06:17:36.247 UTC [cli.common] readBlock -&gt; INFO 004 Received block: 1\nDecoding config block to JSON and isolating config to Org2MSPconfig.json\n+ configtxlator proto_decode --input config_block.pb --type common.Block\n+ jq &#39;.data.data[0].payload.data.config&#39;\n+ jq &#39;.channel_group.groups.Application.groups.Org2MSP.values +&#x3D; &#123;&quot;AnchorPeers&quot;:&#123;&quot;mod_policy&quot;: &quot;Admins&quot;,&quot;value&quot;:&#123;&quot;anchor_peers&quot;: [&#123;&quot;host&quot;: &quot;peer0.org2.example.com&quot;,&quot;port&quot;: 9051&#125;]&#125;,&quot;version&quot;: &quot;0&quot;&#125;&#125;&#39; Org2MSPconfig.json\nGenerating anchor peer update transaction for Org2 on channel testchannel\n+ configtxlator proto_encode --input Org2MSPconfig.json --type common.Config\n+ configtxlator proto_encode --input Org2MSPmodified_config.json --type common.Config\n+ configtxlator compute_update --channel_id testchannel --original original_config.pb --updated modified_config.pb\n+ configtxlator proto_decode --input config_update.pb --type common.ConfigUpdate\n+ jq .\n++ cat config_update.json\n+ echo &#39;&#123;&quot;payload&quot;:&#123;&quot;header&quot;:&#123;&quot;channel_header&quot;:&#123;&quot;channel_id&quot;:&quot;testchannel&quot;, &quot;type&quot;:2&#125;&#125;,&quot;data&quot;:&#123;&quot;config_update&quot;:&#123;&#39; &#39;&quot;channel_id&quot;:&#39; &#39;&quot;testchannel&quot;,&#39; &#39;&quot;isolated_data&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;read_set&quot;:&#39; &#39;&#123;&#39; &#39;&quot;groups&quot;:&#39; &#39;&#123;&#39; &#39;&quot;Application&quot;:&#39; &#39;&#123;&#39; &#39;&quot;groups&quot;:&#39; &#39;&#123;&#39; &#39;&quot;Org2MSP&quot;:&#39; &#39;&#123;&#39; &#39;&quot;groups&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policies&quot;:&#39; &#39;&#123;&#39; &#39;&quot;Admins&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;Endorsement&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;Readers&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;Writers&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;values&quot;:&#39; &#39;&#123;&#39; &#39;&quot;MSP&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;value&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policies&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;values&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;version&quot;:&#39; &#39;&quot;1&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policies&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;values&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;write_set&quot;:&#39; &#39;&#123;&#39; &#39;&quot;groups&quot;:&#39; &#39;&#123;&#39; &#39;&quot;Application&quot;:&#39; &#39;&#123;&#39; &#39;&quot;groups&quot;:&#39; &#39;&#123;&#39; &#39;&quot;Org2MSP&quot;:&#39; &#39;&#123;&#39; &#39;&quot;groups&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;Admins&quot;,&#39; &#39;&quot;policies&quot;:&#39; &#39;&#123;&#39; &#39;&quot;Admins&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;Endorsement&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;Readers&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;Writers&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policy&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;values&quot;:&#39; &#39;&#123;&#39; &#39;&quot;AnchorPeers&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;Admins&quot;,&#39; &#39;&quot;value&quot;:&#39; &#39;&#123;&#39; &#39;&quot;anchor_peers&quot;:&#39; &#39;[&#39; &#39;&#123;&#39; &#39;&quot;host&quot;:&#39; &#39;&quot;peer0.org2.example.com&quot;,&#39; &#39;&quot;port&quot;:&#39; 9051 &#39;&#125;&#39; &#39;]&#39; &#39;&#125;,&#39; &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;,&#39; &#39;&quot;MSP&quot;:&#39; &#39;&#123;&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;value&quot;:&#39; null, &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;version&quot;:&#39; &#39;&quot;1&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policies&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;values&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;version&quot;:&#39; &#39;&quot;1&quot;&#39; &#39;&#125;&#39; &#39;&#125;,&#39; &#39;&quot;mod_policy&quot;:&#39; &#39;&quot;&quot;,&#39; &#39;&quot;policies&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;values&quot;:&#39; &#39;&#123;&#125;,&#39; &#39;&quot;version&quot;:&#39; &#39;&quot;0&quot;&#39; &#39;&#125;&#39; &#39;&#125;&#125;&#125;&#125;&#39;\n+ configtxlator proto_encode --input config_update_in_envelope.json --type common.Envelope\n2022-10-16 06:17:36.573 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized\n2022-10-16 06:17:36.589 UTC [channelCmd] update -&gt; INFO 002 Successfully submitted channel update\nAnchor peer set for org &#39;Org2MSP&#39; on channel &#39;testchannel&#39;\nChannel &#39;testchannel&#39; joined</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/7abbe66c3e5041db91d57d707caa86b0.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/4288a9123aa04603b6ea3e69551ce8ab.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"部署chaincode\"><a href=\"#部署chaincode\" class=\"headerlink\" title=\"部署chaincode\"></a>部署chaincode</h3><p>部署链码前，建议到链码子目录下执行<strong>go mod tidy</strong>，检查链码调用的包存在。同时，可能需要<strong>sudo apt install jq</strong>。创建通道后，您可以开始使用智能合约与通道账本交互。智能合约包含管理区块链账本上资产的业务逻辑，由成员运行的应用程序网络可以在账本上调用智能合约创建，更改和转让这些资产。可以通过<code>./network.sh deployCC</code>命令部署智能合约，但本过程可能会出现很多问题。使用以下命令部署chaincode：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ .&#x2F;network.sh deployCC -c testchannel -ccn basic -ccp ..&#x2F;asset-transfer-basic&#x2F;chaincode-go -ccl go</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/049bcb41b13b41be9157fe6a64c19ae0.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/e46c7b05432049cda86b5073481f1f82.png\" alt=\"在这里插入图片描述\"></p>\n<p>此命令执行后可能会出现错误：<code>scripts/deployCC.sh: line 114: log.txt: Permission denied</code>，很明显这是权限不足所致，加上sudo试试：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$sudo .&#x2F;network.sh deployCC -c testchannel -ccn basic -ccp ..&#x2F;asset-transfer-basic&#x2F;chaincode-go -ccl go</code></pre>\n<p>加上sudo后出现新的错误：<code>deployCC.sh: line 59: go: command not found</code>。检查本用户<code>go</code>命令可用，检查<code>root</code>用户<code>go</code>命令可用，单单<code>sudo</code>后不能用。查阅资料后发现这是因为<code>linux</code>系统为了安全，限制在使用<code>sudo</code>时会清空自定义的环境变量，最简单的解决方法是在<code>/etc/sudoers</code>文件中直接将该限制注释<a href=\"https://segmentfault.com/a/1190000041662904#fn-1\">1</a>：</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-DYT0wCOB-1669947206350)(C:\\Users\\acrow\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221016182659200.png)]</p>\n<p>成功运行后可看见如下结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">magpie@Goserver:~&#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-samples&#x2F;test-network$ .&#x2F;network.sh deployCC -c testchannel -ccn basic -ccp ..&#x2F;asset-transfer-basic&#x2F;chaincode-go -ccl go\ndeploying chaincode on channel &#39;testchannel&#39;\nexecuting with the following\n- CHANNEL_NAME: testchannel\n- CC_NAME: basic\n- CC_SRC_PATH: ..&#x2F;asset-transfer-basic&#x2F;chaincode-go\n- CC_SRC_LANGUAGE: go\n- CC_VERSION: 1.0\n- CC_SEQUENCE: 1\n- CC_END_POLICY: NA\n- CC_COLL_CONFIG: NA\n- CC_INIT_FCN: NA\n- DELAY: 3\n- MAX_RETRY: 5\n- VERBOSE: false\nVendoring Go dependencies at ..&#x2F;asset-transfer-basic&#x2F;chaincode-go\n~&#x2F;fabric-samples01&#x2F;asset-transfer-basic&#x2F;chaincode-go ~&#x2F;fabric-samples01&#x2F;test-network\n~&#x2F;fabric-samples01&#x2F;test-network\nFinished vendoring Go dependencies\n+ peer lifecycle chaincode package basic.tar.gz --path ..&#x2F;asset-transfer-basic&#x2F;chaincode-go --lang golang --label basic_1.0\n+ res&#x3D;0\nChaincode is packaged\nInstalling chaincode on peer0.org1...\nUsing organization 1\n+ peer lifecycle chaincode install basic.tar.gz\n+ res&#x3D;0\n2022-10-16 06:20:17.735 UTC [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 001 Installed remotely: response:&lt;status:200 payload:&quot;\\nJbasic_1.0:3cfcf67978d6b3f7c5e0375660c995b21db19c4330946079afc3925ad7306881\\022\\tbasic_1.0&quot; &gt; \n2022-10-16 06:20:17.735 UTC [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 002 Chaincode code package identifier: basic_1.0:3cfcf67978d6b3f7c5e0375660c995b21db19c4330946079afc3925ad7306881\nChaincode is installed on peer0.org1\nInstall chaincode on peer0.org2...\nUsing organization 2\n+ peer lifecycle chaincode install basic.tar.gz\n+ res&#x3D;0\n2022-10-16 06:20:32.262 UTC [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 001 Installed remotely: response:&lt;status:200 payload:&quot;\\nJbasic_1.0:3cfcf67978d6b3f7c5e0375660c995b21db19c4330946079afc3925ad7306881\\022\\tbasic_1.0&quot; &gt; \n2022-10-16 06:20:32.262 UTC [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 002 Chaincode code package identifier: basic_1.0:3cfcf67978d6b3f7c5e0375660c995b21db19c4330946079afc3925ad7306881\nChaincode is installed on peer0.org2\nUsing organization 1\n+ peer lifecycle chaincode queryinstalled\n+ res&#x3D;0\nInstalled chaincodes on peer:\nPackage ID: basic_1.0:3cfcf67978d6b3f7c5e0375660c995b21db19c4330946079afc3925ad7306881, Label: basic_1.0\nQuery installed successful on peer0.org1 on channel\nUsing organization 1\n+ peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile &#x2F;home&#x2F;magpie&#x2F;fabric-samples01&#x2F;test-network&#x2F;organizations&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem --channelID testchannel --name basic --version 1.0 --package-id basic_1.0:3cfcf67978d6b3f7c5e0375660c995b21db19c4330946079afc3925ad7306881 --sequence 1\n+ res&#x3D;0\n2022-10-16 06:20:34.654 UTC [chaincodeCmd] ClientWait -&gt; INFO 001 txid [66a8cf4ffc15cd947f5d3d4d8b371f4bab0a88af7069059df2fa5e5af7d8724c] committed with status (VALID) at localhost:7051\nChaincode definition approved on peer0.org1 on channel &#39;testchannel&#39;\nUsing organization 1\nChecking the commit readiness of the chaincode definition on peer0.org1 on channel &#39;testchannel&#39;...\nAttempting to check the commit readiness of the chaincode definition on peer0.org1, Retry after 3 seconds.\n+ peer lifecycle chaincode checkcommitreadiness --channelID testchannel --name basic --version 1.0 --sequence 1 --output json\n+ res&#x3D;0\n&#123;\n        &quot;approvals&quot;: &#123;\n                &quot;Org1MSP&quot;: true,\n                &quot;Org2MSP&quot;: false\n        &#125;\n&#125;\nChecking the commit readiness of the chaincode definition successful on peer0.org1 on channel &#39;testchannel&#39;\nUsing organization 2\nChecking the commit readiness of the chaincode definition on peer0.org2 on channel &#39;testchannel&#39;...\nAttempting to check the commit readiness of the chaincode definition on peer0.org2, Retry after 3 seconds.\n+ peer lifecycle chaincode checkcommitreadiness --channelID testchannel --name basic --version 1.0 --sequence 1 --output json\n+ res&#x3D;0\n&#123;\n        &quot;approvals&quot;: &#123;\n                &quot;Org1MSP&quot;: true,\n                &quot;Org2MSP&quot;: false\n        &#125;\n&#125;\nChecking the commit readiness of the chaincode definition successful on peer0.org2 on channel &#39;testchannel&#39;\nUsing organization 2\n+ peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile &#x2F;home&#x2F;magpie&#x2F;fabric-samples01&#x2F;test-network&#x2F;organizations&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem --channelID testchannel --name basic --version 1.0 --package-id basic_1.0:3cfcf67978d6b3f7c5e0375660c995b21db19c4330946079afc3925ad7306881 --sequence 1\n+ res&#x3D;0\n2022-10-16 06:20:43.092 UTC [chaincodeCmd] ClientWait -&gt; INFO 001 txid [47456dcd71001580d05c5a0e84c069df8c5dd8c7d2c1d279464a9e625c671136] committed with status (VALID) at localhost:9051\nChaincode definition approved on peer0.org2 on channel &#39;testchannel&#39;\nUsing organization 1\nChecking the commit readiness of the chaincode definition on peer0.org1 on channel &#39;testchannel&#39;...\nAttempting to check the commit readiness of the chaincode definition on peer0.org1, Retry after 3 seconds.\n+ peer lifecycle chaincode checkcommitreadiness --channelID testchannel --name basic --version 1.0 --sequence 1 --output json\n+ res&#x3D;0\n&#123;\n        &quot;approvals&quot;: &#123;\n                &quot;Org1MSP&quot;: true,\n                &quot;Org2MSP&quot;: true\n        &#125;\n&#125;\nChecking the commit readiness of the chaincode definition successful on peer0.org1 on channel &#39;testchannel&#39;\nUsing organization 2\nChecking the commit readiness of the chaincode definition on peer0.org2 on channel &#39;testchannel&#39;...\nAttempting to check the commit readiness of the chaincode definition on peer0.org2, Retry after 3 seconds.\n+ peer lifecycle chaincode checkcommitreadiness --channelID testchannel --name basic --version 1.0 --sequence 1 --output json\n+ res&#x3D;0\n&#123;\n        &quot;approvals&quot;: &#123;\n                &quot;Org1MSP&quot;: true,\n                &quot;Org2MSP&quot;: true\n        &#125;\n&#125;\nChecking the commit readiness of the chaincode definition successful on peer0.org2 on channel &#39;testchannel&#39;\nUsing organization 1\nUsing organization 2\n+ peer lifecycle chaincode commit -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile &#x2F;home&#x2F;magpie&#x2F;fabric-samples01&#x2F;test-network&#x2F;organizations&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem --channelID testchannel --name basic --peerAddresses localhost:7051 --tlsRootCertFiles &#x2F;home&#x2F;magpie&#x2F;fabric-samples01&#x2F;test-network&#x2F;organizations&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles &#x2F;home&#x2F;magpie&#x2F;fabric-samples01&#x2F;test-network&#x2F;organizations&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;peers&#x2F;peer0.org2.example.com&#x2F;tls&#x2F;ca.crt --version 1.0 --sequence 1\n+ res&#x3D;0\n2022-10-16 06:20:51.575 UTC [chaincodeCmd] ClientWait -&gt; INFO 001 txid [ff045f6bf52924b59de9a158259a4435333e6d08b7b0289a95cbd65ce081e917] committed with status (VALID) at localhost:9051\n2022-10-16 06:20:51.595 UTC [chaincodeCmd] ClientWait -&gt; INFO 002 txid [ff045f6bf52924b59de9a158259a4435333e6d08b7b0289a95cbd65ce081e917] committed with status (VALID) at localhost:7051\nChaincode definition committed on channel &#39;testchannel&#39;\nUsing organization 1\nQuerying chaincode definition on peer0.org1 on channel &#39;testchannel&#39;...\nAttempting to Query committed status on peer0.org1, Retry after 3 seconds.\n+ peer lifecycle chaincode querycommitted --channelID testchannel --name basic\n+ res&#x3D;0\nCommitted chaincode definition for chaincode &#39;basic&#39; on channel &#39;testchannel&#39;:\nVersion: 1.0, Sequence: 1, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: [Org1MSP: true, Org2MSP: true]\nQuery chaincode definition successful on peer0.org1 on channel &#39;testchannel&#39;\nUsing organization 2\nQuerying chaincode definition on peer0.org2 on channel &#39;testchannel&#39;...\nAttempting to Query committed status on peer0.org2, Retry after 3 seconds.\n+ peer lifecycle chaincode querycommitted --channelID testchannel --name basic\n+ res&#x3D;0\nCommitted chaincode definition for chaincode &#39;basic&#39; on channel &#39;testchannel&#39;:\nVersion: 1.0, Sequence: 1, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: [Org1MSP: true, Org2MSP: true]\nQuery chaincode definition successful on peer0.org2 on channel &#39;testchannel&#39;\nChaincode initialization is not required</code></pre>\n<h3 id=\"合约交互\"><a href=\"#合约交互\" class=\"headerlink\" title=\"合约交互\"></a>合约交互</h3><p>在<a href=\"https://segmentfault.com/2021/07/21/setup_hyperledger_fabric_environment_and_test_demo/#安装fabric\">安装fabric</a>中我们已经设置了<code>fabric</code>可执行文件的环境变量，需保证可以成功在<code>test-network</code>目录下使用<code>peer</code>命令。</p>\n<ol>\n<li><p>设置FABRIC_CFG_PATH变量，其下需包含core.yaml文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">export FABRIC_CFG_PATH&#x3D;$PWD&#x2F;..&#x2F;config&#x2F;\n# export FABRIC_CFG_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;fabric&#x2F;config&#x2F;</code></pre>\n</li>\n<li><p>设置其它<code>Org1</code>组织的变量依赖</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># Environment variables for Org1\n# CORE_PEER_TLS_ROOTCERT_FILE和CORE_PEER_MSPCONFIGPATH环境变量指向Org1的organizations文件夹中的身份证书。\nexport CORE_PEER_TLS_ENABLED&#x3D;true\nexport CORE_PEER_LOCALMSPID&#x3D;&quot;Org1MSP&quot;\nexport CORE_PEER_TLS_ROOTCERT_FILE&#x3D;$&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;ca.crt\nexport CORE_PEER_MSPCONFIGPATH&#x3D;$&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;users&#x2F;Admin@org1.example.com&#x2F;msp\nexport CORE_PEER_ADDRESS&#x3D;localhost:7051</code></pre>\n</li>\n<li><p>初始化chaincode</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ peer chaincode invoke -o localhost:7050 \\\n--ordererTLSHostnameOverride orderer.example.com \\\n--tls --cafile $&#123;PWD&#125;&#x2F;organizations&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem -C testchannel -n basic \\\n--peerAddresses localhost:7051 \\\n--tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;ca.crt \\\n--peerAddresses localhost:9051 \\\n--tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;peers&#x2F;peer0.org2.example.com&#x2F;tls&#x2F;ca.crt -c &#39;&#123;&quot;function&quot;:&quot;InitLedger&quot;,&quot;Args&quot;:[]&#125;&#39;</code></pre>\n<p>结果如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ export FABRIC_CFG_PATH&#x3D;$PWD&#x2F;..&#x2F;config&#x2F;\n$ export CORE_PEER_TLS_ENABLED&#x3D;true\n$ export CORE_PEER_LOCALMSPID&#x3D;&quot;Org1MSP&quot;\n$ export CORE_PEER_TLS_ROOTCERT_FILE&#x3D;$&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;ca.crt\nmagpie@Goserver:~&#x2F;fabric-samples01&#x2F;test-network$ export CORE_PEER_MSPCONFIGPATH&#x3D;$&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;users&#x2F;Admin@org1.example.com&#x2F;msp\ncalhost:7051magpie@Goserver:~&#x2F;fabric-samples01&#x2F;test-network$ export CORE_PEER_ADDRESS&#x3D;localhost:7051\nmagpie@Goserver:~&#x2F;fabric-samples01&#x2F;test-network$ peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;&#x2F;organizations&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem -C testchannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;peers&#x2F;peer0.org2.example.com&#x2F;tls&#x2F;ca.crt -c &#39;&#123;&quot;function&quot;:&quot;InitLedger&quot;,&quot;Args&quot;:[]&#125;&#39;\n2022-10-16 10:36:46.942 UTC [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200 </code></pre>\n</li>\n</ol>\n<ol>\n<li><p>查询账本资产列表</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ peer chaincode query -C testchannel -n basic -c &#39;&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;&#39;</code></pre>\n</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/8d61580dd788467394e807bcf9876b39.png\" alt=\"在这里插入图片描述\"></p>\n<ol>\n<li><p>修改账本资产</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;&#x2F;organizations&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem -C testchannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;peers&#x2F;peer0.org2.example.com&#x2F;tls&#x2F;ca.crt -c &#39;&#123;&quot;function&quot;:&quot;TransferAsset&quot;,&quot;Args&quot;:[&quot;asset6&quot;,&quot;Christopher&quot;]&#125;&#39;</code></pre>\n<p>结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;&#x2F;organizations&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem -C testchannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;peers&#x2F;peer0.org2.example.com&#x2F;tls&#x2F;ca.crt -c &#39;&#123;&quot;function&quot;:&quot;TransferAsset&quot;,&quot;Args&quot;:[&quot;asset6&quot;,&quot;Christopher&quot;]&#125;&#39;\n2022-10-16 10:42:29.089 UTC [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200 </code></pre>\n</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/93bc2719c43d4f44ac1059508d6b204a.png\" alt=\"在这里插入图片描述\"></p>\n<ol>\n<li><p>列出一个peer节点已经加入的通道清单</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ peer channel list</code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">magpie@Goserver:~&#x2F;fabric-samples01&#x2F;test-network$ peer channel list\n2022-10-16 14:26:16.298 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized\nChannels peers has joined: \ntestchannel</code></pre>\n</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/036fa48d6acb41dc9dc5bf08c1e32a84.png\" alt=\"在这里插入图片描述\"></p>\n<ol>\n<li><p>获取通道testchannel的信息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ peer channel getinfo -c testchannel</code></pre>\n<p>结果如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">magpie@Goserver:~&#x2F;fabric-samples01&#x2F;test-network$ peer channel getinfo -c testchannel\n2022-10-16 14:31:52.163 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized\nBlockchain info: &#123;&quot;height&quot;:8,&quot;currentBlockHash&quot;:&quot;72kQArOj0SDdrgqwYFv2B9HdbQ5E265Nwia36EZ+7Jo&#x3D;&quot;,&quot;previousBlockHash&quot;:&quot;cQYpptj7CX1s1EklZdwyFZmnzcWyHOC9k40mSPTiY5w&#x3D;&quot;&#125;</code></pre>\n</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/02b73112c58a4724b71816d6fd566211.png\" alt=\"在这里插入图片描述\"></p>\n<ol>\n<li><p>关闭网络</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ cd ~&#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-samples&#x2F;test-network\n$ .&#x2F;network.sh down</code></pre>\n</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">   \n运行结果：\n   \n   &#96;&#96;&#96;bash\n   $ .&#x2F;network.sh down\n   Stopping network\n   [+] Running 8&#x2F;8\n    ⠿ Container cli                         Removed                10.3s\n    ⠿ Container orderer.example.com         Removed                0.5s\n    ⠿ Container peer0.org2.example.com      Removed                0.9s\n    ⠿ Container peer0.org1.example.com      Removed                0.9s\n    ⠿ Volume docker_peer0.org2.example.com  Removed                0.0s\n    ⠿ Volume docker_orderer.example.com     Removed                0.0s\n    ⠿ Volume docker_peer0.org1.example.com  Removed                0.0s\n    ⠿ Network fabric_test                   Removed                0.1s\n   [+] Running 1&#x2F;0\n    ⠿ Volume docker_peer0.org3.example.com  Removed                0.0s\n   No containers available for deletion\n   Untagged: dev-peer0.org2.example.com-basic_1.0-3cfcf67978d6b3f7c5e0375660c995b21db19c4330946079afc3925ad7306881-6a8fb30d4a694b406bf4f255c7e84f22faeb3190e416cfb1d742ae192a406805:latest\n   Deleted: sha256:9a2ccd4b9b355452aa80ec6a5a2422205e79eaec58a14dffc519a437d563ed93\n   Deleted: sha256:619c528e2179e1db7a1ca828a03a6962d4a8627e7fd45fae0b2a9ed7f15285ac\n   Deleted: sha256:98b7d3308aded987a197bc9d9e2cd4bc5c730dd07a4403f493dd3a4fbdc79c15\n   Deleted: sha256:af81e4c9bb7329bb4a94e9ba1e9343bab6358bd1197e4299d5da03b463e5a50e\n   Untagged: dev-peer0.org1.example.com-basic_1.0-3cfcf67978d6b3f7c5e0375660c995b21db19c4330946079afc3925ad7306881-c6c446ce0bcf4e0229bc2660312ba359cb00358628cf199bfc1ae60f85b825a7:latest\n   Deleted: sha256:d0fca8cfd4daeffc3ae74111adb4ab77f84c9fdbff8b20ff6bc6f933894e0818\n   Deleted: sha256:a2cf358756a65de692e5c2871cf1fe9457f30761d66ea23e11f2d62efc82577b\n   Deleted: sha256:c82c7262395bbdc90459b31859782280a119a668e67dd7085044a86f342387a8\n   Deleted: sha256:7b236e3e0493109259b348a38c5603b27793dae1aada7150bd0f1459511db9c0</code></pre>\n<p>截图如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/3ddbbb85744e4999b433fe9832c5b2c5.png\" alt=\"在这里插入图片描述\"></p>\n<p>   该命令将停止并删除节点和链码容器、组织加密材料、删除之前运行的通道项目和docker卷，并从Docker Registry移除链码镜像。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>因为<code>asset-transfer (basic)</code>链码的背书策略需要交易同时被<code>Org1</code>和<code>Org2</code>签名，所以链码调用指令需要使用<code>--peerAddresses</code>标签来指向<code>peer0.org1.example.com</code>和<code>peer0.org2.example.com</code>；因为网络的<code>TLS</code>被开启，指令也需要用<code>--tlsRootCertFiles</code>标签指向每个<code>peer</code>节点的<code>TLS</code>证书。</p></blockquote>\n","text":"Hyperledger Fabric 2.4 开发环境配置与测试前言超级账本的Fabric具有高可扩展性和高可定制性，能够应用在复杂的商业场景中，但Fabric技术涉及很多新的概念，源代码跟新速度快且各版本间兼容性差，对初学者很不友好。为了使能够快速掌握Fabric，本文基于其目...","link":"","photos":[],"count_time":{"symbolsCount":"69k","symbolsTime":"1:03"},"categories":[{"name":"信管","slug":"信管","count":12,"path":"api/categories/信管.json"}],"tags":[{"name":"区块链","slug":"区块链","count":10,"path":"api/tags/区块链.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Hyperledger-Fabric-2-4-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">Hyperledger Fabric 2.4 开发环境配置与测试</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">软件需求说明</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85-Ubuntu-Server\"><span class=\"toc-text\">安装 Ubuntu Server</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Ubuntu-Server-18-04-06-lts-%E4%B8%8B%E8%BD%BD\"><span class=\"toc-text\">Ubuntu Server 18.04.06 lts 下载</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Ubuntu-18-04-LTS-%E6%9B%B4%E6%8D%A2%E5%9B%BD%E5%86%85%E6%BA%90\"><span class=\"toc-text\">Ubuntu 18.04 LTS 更换国内源</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%87%E4%BB%BD%E6%BA%90%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">备份源列表</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%93%E5%BC%80sources-list%E6%96%87%E4%BB%B6%E4%BF%AE%E6%94%B9\"><span class=\"toc-text\">打开sources.list文件修改</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%B7%E6%96%B0%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">刷新列表</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAUbuntu-Server%E7%94%A8%E6%88%B7\"><span class=\"toc-text\">创建Ubuntu Server用户</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85-Golang\"><span class=\"toc-text\">安装 Golang</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Golang%E4%B8%8B%E8%BD%BD%E8%A7%A3%E5%8E%8B\"><span class=\"toc-text\">Golang下载解压</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">全局环境配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#GO111MODULE%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">GO111MODULE设置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#go-mod-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">go mod 命令</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85-docker\"><span class=\"toc-text\">安装 docker</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%98%E6%96%B9%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%8D%E6%8E%A8%E8%8D%90%EF%BC%89\"><span class=\"toc-text\">官方手动安装（不推荐）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%98%BF%E9%87%8C%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85Docker%EF%BC%88%E6%8E%A8%E8%8D%90%EF%BC%89\"><span class=\"toc-text\">阿里手动安装Docker（推荐）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E4%BB%A5%E7%94%A8%E9%98%BF%E9%87%8C%E9%95%9C%E5%83%8F%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85Docker%EF%BC%88%E6%8E%A8%E8%8D%90%EF%BC%89\"><span class=\"toc-text\">可以用阿里镜像一键安装Docker（推荐）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85Docker-Compose\"><span class=\"toc-text\">安装Docker-Compose</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Docker-%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F\"><span class=\"toc-text\">Docker 阿里云镜像加速</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Docker-Docker%E9%95%9C%E5%83%8F%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE\"><span class=\"toc-text\">Docker-Docker镜像存储位置</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85Nodejs\"><span class=\"toc-text\">安装Nodejs</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85NVM\"><span class=\"toc-text\">安装NVM</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85Nodejs-LTS%E7%A8%B3%E5%AE%9A%E7%89%88\"><span class=\"toc-text\">安装Nodejs LTS稳定版</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Nodejs-%E5%8A%A0%E9%80%9F\"><span class=\"toc-text\">Nodejs 加速</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85Fabric\"><span class=\"toc-text\">安装Fabric</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%98%E6%96%B9%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%8D%E6%8E%A8%E8%8D%90%EF%BC%89\"><span class=\"toc-text\">官方脚本安装（不推荐）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Fabric-%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%EF%BC%88%E5%BC%BA%E7%83%88%E6%8E%A8%E8%8D%90%EF%BC%89\"><span class=\"toc-text\">Fabric 源码编译（强烈推荐）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">获取代码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85-Peer-%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">编译安装 Peer 组件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85-Orderer-%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">编译安装 Orderer 组件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85-Fabric-CA-%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">编译安装 Fabric CA 组件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">编译安装配置辅助工具</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Dockefile-%E7%94%9F%E6%88%90%E9%95%9C%E5%83%8F%EF%BC%88%E5%BC%BA%E7%83%88%E6%8E%A8%E8%8D%90%EF%BC%89\"><span class=\"toc-text\">Dockefile 生成镜像（强烈推荐）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9Dockerfile%E6%96%87%E4%BB%B6Alpine%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F\"><span class=\"toc-text\">修改Dockerfile文件Alpine镜像加速</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91Dockerfile%E7%94%9F%E6%88%90%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">编译Dockerfile生成镜像</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85%E5%AE%98%E6%96%B9%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%EF%BC%88%E6%8E%A8%E8%8D%90%EF%BC%89\"><span class=\"toc-text\">手动安装官方二进制包（推荐）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%AE%89%E8%A3%85fabric-samples\"><span class=\"toc-text\">1.安装fabric-samples</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%AE%89%E8%A3%85Fabric\"><span class=\"toc-text\">2.安装Fabric</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E4%B8%8B%E8%BD%BDfabric-ca-1-5-5%E5%B9%B6%E8%A7%A3%E5%8E%8B\"><span class=\"toc-text\">3.下载fabric-ca 1.5.5并解压</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%EF%BC%8C%E5%9C%A8-etc-profile%E6%9C%AB%E5%B0%BE%E6%B7%BB%E5%8A%A0\"><span class=\"toc-text\">4.设置环境变量，在&#x2F;etc&#x2F;profile末尾添加</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E6%9B%B4%E6%96%B0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8Fsource-etc-profile\"><span class=\"toc-text\">5.更新环境变量source &#x2F;etc&#x2F;profile</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8B%89%E5%8F%96Fabric%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6Docker%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">拉取Fabric相关组件Docker镜像</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#test-network%E7%BD%91%E7%BB%9C%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">test-network网络测试</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8fabric%E7%BD%91%E7%BB%9C\"><span class=\"toc-text\">启动fabric网络</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">!!!</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAchannel\"><span class=\"toc-text\">创建channel</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%83%A8%E7%BD%B2chaincode\"><span class=\"toc-text\">部署chaincode</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%88%E7%BA%A6%E4%BA%A4%E4%BA%92\"><span class=\"toc-text\">合约交互</span></a></li></ol></li></ol></li></ol>","author":{"name":"Algernon","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/68c4c7d8696c482da565ab5c8ebfa2fa.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}},"mapped":true,"prev_post":{"title":"2021APMCM赛后总结——边缘检测","uid":"1940527d2a1b736857ad6c179b7a19e4","slug":"边缘检测","date":"2022-11-03T13:52:49.000Z","updated":"2022-11-04T06:39:15.731Z","comments":true,"path":"api/articles/边缘检测.json","keywords":null,"cover":[],"text":"APMCM被称为小美赛，和美赛一样使用英文提交论文，比赛时间又在国赛后美赛前，因此很适合作为MCM的热身赛。第一次参加这种正规比赛，而且是英文写作，作为对美赛的预热，花四天时间提前演练一下是很有必要的。在日常上课和（几乎）按时休息的条件下，最终，我们队能够拿到二等奖，算是比较满意...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"数模","slug":"数模","count":4,"path":"api/tags/数模.json"}],"author":{"name":"Algernon","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/68c4c7d8696c482da565ab5c8ebfa2fa.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}},"feature":true},"next_post":{"title":"【PYTHON程序设计】期末作业","uid":"d449e663f4d76a93a71a143c613d264d","slug":"python期末","date":"2022-12-06T09:32:49.000Z","updated":"2022-12-06T15:02:46.231Z","comments":true,"path":"api/articles/python期末.json","keywords":null,"cover":[],"text":" 电商版项目要求一、项目要求： 获取京东商城中200条黑茶商品信息，保存在文本文件中。要求如下 文件名：京东商城黑茶200条信息.txt 每条商品保存如下信息，商品说明、商家名称、价格 ,评价数，包装与规格 参考1 https://blog.csdn.net/qq_4565750...","link":"","photos":[],"count_time":{"symbolsCount":"93k","symbolsTime":"1:25"},"categories":[{"name":"信管","slug":"信管","count":12,"path":"api/categories/信管.json"}],"tags":[{"name":"python","slug":"python","count":9,"path":"api/tags/python.json"},{"name":"信管","slug":"信管","count":5,"path":"api/tags/信管.json"},{"name":"爬虫","slug":"爬虫","count":2,"path":"api/tags/爬虫.json"}],"author":{"name":"Algernon","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/68c4c7d8696c482da565ab5c8ebfa2fa.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}}}}