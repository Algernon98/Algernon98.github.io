{"title":"【数据挖掘】（一）用jupyter编程","uid":"6fcdfe05d0345160147b0e4b83a609f1","slug":"数据挖掘1","date":"2022-11-03T14:56:49.000Z","updated":"2022-11-08T16:17:05.932Z","comments":true,"path":"api/articles/数据挖掘1.json","keywords":null,"cover":[],"content":"<p>为熟悉jupyter，找了一本书练习。<br>参考资料：《Python数据挖掘入门与实践》<br>数据集：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://github.com/packtpublishing/learning-data-mining-with-python\">https://github.com/packtpublishing/learning-data-mining-with-python</a></p></blockquote>\n<h2 id=\"第一行代码\"><a href=\"#第一行代码\" class=\"headerlink\" title=\"第一行代码\"></a>第一行代码</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import numpy as np\ndataset_filename &#x3D; &quot;affinity_dataset.txt&quot;\nX &#x3D;np.loadtxt(dataset_filename)</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">print(X[:5])</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[[0. 0. 1. 1. 1.]<br> [1. 1. 0. 1. 0.]<br> [1. 0. 1. 1. 0.]<br> [0. 0. 1. 1. 1.]<br> [0. 1. 0. 0. 1.]]</p></blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/1f2ec52ee2c54e5e9966707306915852.png\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">num_apple_purchases&#x3D;0\nfor sample in X:\n  if sample[3]&#x3D;&#x3D;1:\n     num_apple_purchases +&#x3D;1\nprint(&quot;&#123;0&#125;prople bought Apples&quot;.format(num_apple_purchases))</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/888c0f6543af4b32a0669e87aca445cb.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2><p>鸢尾花数据集</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from sklearn.datasets import load_iris\ndataset &#x3D;load_iris()\nX&#x3D;dataset.data\ny&#x3D;dataset.target</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">print(dataset.DESCR)</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/1ef95946e08b4371b4ecfe3ef9e7fb19.png\" alt=\"在这里插入图片描述\"><br>把连续值转变为类别型，这个过程叫做离散化。<br>最简单的离散化方法，莫过于确定一个阈值，将低于该阈值的特征值置为0，高于阈值的置为1.<br>我们把某项特征的阈值设定为该特征所有特征值的均值。<br>每个特征的均值计算方法如下：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">attribute_means &#x3D;X.mean(axis&#x3D;0)</code></pre>\n<p>我们得到了一个长度为4的数组，这是特征的数量。<br>数组的第一项是第一个特征的均值，以此类推。<br>接下来，用该方法将数据集打散，把连续的特征值转换为类别型。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">X_d&#x3D;np.array(X &gt;&#x3D; attribute_means,dtype&#x3D;&#39;int&#39;)</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/266b24dab107417f90ef315f5c39d5b9.png\" alt=\"在这里插入图片描述\"><br>后面的训练和测试，都将用到新得到的X_d数据集（打散后的数组X），而不使用原来的数据集（X）</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">attribute_means &#x3D; X.mean(axis&#x3D;0)\nassert attribute_means.shape &#x3D;&#x3D; (n_features,)\nX_d &#x3D; np.array(X &gt;&#x3D; attribute_means, dtype&#x3D;&#39;int&#39;)</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import sklearn.model_selection\nfrom sklearn.model_selection import train_test_split\n\n# Set the random state to the same number to get the same results as in the book\nrandom_state &#x3D; 14\n\nX_train, X_test, y_train, y_test &#x3D; train_test_split(X_d, y, random_state&#x3D;random_state)\nprint(&quot;There are &#123;&#125; training samples&quot;.format(y_train.shape))\nprint(&quot;There are &#123;&#125; testing samples&quot;.format(y_test.shape))</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>There are (112,) training samples<br>There are (38,) testing samples</p></blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/64844f6e691f4a18ae968d9fdcc4b82b.png\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from collections import defaultdict\nfrom operator import itemgetter\n\n\ndef train(X, y_true, feature):\n    &quot;&quot;&quot;Computes the predictors and error for a given feature using the OneR algorithm\n    \n    Parameters\n    ----------\n    X: array [n_samples, n_features]\n        The two dimensional array that holds the dataset. Each row is a sample, each column\n        is a feature.\n    \n    y_true: array [n_samples,]\n        The one dimensional array that holds the class values. Corresponds to X, such that\n        y_true[i] is the class value for sample X[i].\n    \n    feature: int\n        An integer corresponding to the index of the variable we wish to test.\n        0 &lt;&#x3D; variable &lt; n_features\n        \n    Returns\n    -------\n    predictors: dictionary of tuples: (value, prediction)\n        For each item in the array, if the variable has a given value, make the given prediction.\n    \n    error: float\n        The ratio of training data that this rule incorrectly predicts.\n    &quot;&quot;&quot;\n    # Check that variable is a valid number\n    n_samples, n_features &#x3D; X.shape\n    assert 0 &lt;&#x3D; feature &lt; n_features\n    # Get all of the unique values that this variable has\n    values &#x3D; set(X[:,feature])\n    # Stores the predictors array that is returned\n    predictors &#x3D; dict()\n    errors &#x3D; []\n    for current_value in values:\n        most_frequent_class, error &#x3D; train_feature_value(X, y_true, feature, current_value)\n        predictors[current_value] &#x3D; most_frequent_class\n        errors.append(error)\n    # Compute the total error of using this feature to classify on\n    total_error &#x3D; sum(errors)\n    return predictors, total_error\n\n# Compute what our predictors say each sample is based on its value\n#y_predicted &#x3D; np.array([predictors[sample[feature]] for sample in X])\n    \n\ndef train_feature_value(X, y_true, feature, value):\n    # Create a simple dictionary to count how frequency they give certain predictions\n    class_counts &#x3D; defaultdict(int)\n    # Iterate through each sample and count the frequency of each class&#x2F;value pair\n    for sample, y in zip(X, y_true):\n        if sample[feature] &#x3D;&#x3D; value:\n            class_counts[y] +&#x3D; 1\n    # Now get the best one by sorting (highest first) and choosing the first item\n    sorted_class_counts &#x3D; sorted(class_counts.items(), key&#x3D;itemgetter(1), reverse&#x3D;True)\n    most_frequent_class &#x3D; sorted_class_counts[0][0]\n    # The error is the number of samples that do not classify as the most frequent class\n    # *and* have the feature value.\n    n_samples &#x3D; X.shape[1]\n    error &#x3D; sum([class_count for class_value, class_count in class_counts.items()\n                 if class_value !&#x3D; most_frequent_class])\n    return most_frequent_class, error</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># Compute all of the predictors\nall_predictors &#x3D; &#123;variable: train(X_train, y_train, variable) for variable in range(X_train.shape[1])&#125;\nerrors &#x3D; &#123;variable: error for variable, (mapping, error) in all_predictors.items()&#125;\n# Now choose the best and save that as &quot;model&quot;\n# Sort by error\nbest_variable, best_error &#x3D; sorted(errors.items(), key&#x3D;itemgetter(1))[0]\nprint(&quot;The best model is based on variable &#123;0&#125; and has error &#123;1:.2f&#125;&quot;.format(best_variable, best_error))\n\n# Choose the bset model\nmodel &#x3D; &#123;&#39;variable&#39;: best_variable,\n         &#39;predictor&#39;: all_predictors[best_variable][0]&#125;\nprint(model)</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>The best model is based on variable 2 and has error 37.00<br>{‘variable’: 2, ‘predictor’: {0: 0, 1: 2}}<br><img src=\"https://img-blog.csdnimg.cn/aa05c451436f42e68baf471f05d88279.png\" alt=\"在这里插入图片描述\"></p></blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def predict(X_test, model):\n    variable &#x3D; model[&#39;variable&#39;]\n    predictor &#x3D; model[&#39;predictor&#39;]\n    y_predicted &#x3D; np.array([predictor[int(sample[variable])] for sample in X_test])\n    return y_predicted</code></pre>\n<p>我们经常需要一次对多条数据进行预测，因此用代码实现这个函数，通过遍历数据集中的每条数据来完成预测。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">y_predicted &#x3D; predict(X_test, model)\nprint(y_predicted)</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[0 0 0 2 2 2 0 2 0 2 2 0 2 2 0 2 0 2 2 2 0 0 0 2 0 2 0 2 2 0 0 0 2 0 2 0 2<br> 2]</p></blockquote>\n<p>比较预测结果和实际类别，就能得到正确率是多少。<br><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># Compute the accuracy by taking the mean of the amounts that y_predicted is equal to y_test\naccuracy &#x3D; np.mean(y_predicted &#x3D;&#x3D; y_test) * 100\nprint(&quot;The test accuracy is &#123;:.1f&#125;%&quot;.format(accuracy))</code></pre></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>The test accuracy is 65.8%</p></blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/82a3bc0fa9a24714be5bdfd72ad9c785.png\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from sklearn.metrics import classification_report</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">print(classification_report(y_test, y_predicted))</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/00cbc9e2e9a5451da396dfc3fa55bd5c.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"近邻\"><a href=\"#近邻\" class=\"headerlink\" title=\"近邻\"></a>近邻</h2><h3 id=\"主目录位置\"><a href=\"#主目录位置\" class=\"headerlink\" title=\"主目录位置\"></a>主目录位置</h3><p><img src=\"https://img-blog.csdnimg.cn/506ffd224ea94ba2b8935c1862b05444.png\" alt=\"在这里插入图片描述\"></p>\n<p>数据集：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"http://archive.ics.uci.edu/ml/datasets/Ionosphere\">http://archive.ics.uci.edu/ml/datasets/Ionosphere</a><br><img src=\"https://img-blog.csdnimg.cn/8393410c54b848a8a2032a4ba9a6444e.png\" alt=\"在这里插入图片描述\"></p></blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/ecd6fcbfd1a944c2ae312905cbe5511c.png\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># Change this to the location of your dataset\ndata_folder &#x3D; os.path.join(home_folder, &quot;Data&quot;, &quot;Ionosphere&quot;)\ndata_filename &#x3D; os.path.join(data_folder, &quot;ionosphere.data&quot;)\nprint(data_filename)</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>C:\\Users\\83854\\Data\\Ionosphere\\ionosphere.data</p></blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import csv\nimport numpy as np\n\n# Size taken from the dataset and is known\nX &#x3D; np.zeros((351, 34), dtype&#x3D;&#39;float&#39;)\ny &#x3D; np.zeros((351,), dtype&#x3D;&#39;bool&#39;)\n\nwith open(data_filename, &#39;r&#39;) as input_file:\n    reader &#x3D; csv.reader(input_file)\n    for i, row in enumerate(reader):\n        # Get the data, converting each item to a float\n        data &#x3D; [float(datum) for datum in row[:-1]]\n        # Set the appropriate row in our dataset\n        X[i] &#x3D; data\n        # 1 if the class is &#39;g&#39;, 0 otherwise\n        y[i] &#x3D; row[-1] &#x3D;&#x3D; &#39;g&#39;</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test &#x3D; train_test_split(X, y, random_state&#x3D;14)\nprint(&quot;There are &#123;&#125; samples in the training dataset&quot;.format(X_train.shape[0]))\nprint(&quot;There are &#123;&#125; samples in the testing dataset&quot;.format(X_test.shape[0]))\nprint(&quot;Each sample has &#123;&#125; features&quot;.format(X_train.shape[1]))</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>There are 263 samples in the training dataset<br>There are 88 samples in the testing dataset<br>Each sample has 34 features</p></blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from sklearn.neighbors import KNeighborsClassifier\n\nestimator &#x3D; KNeighborsClassifier()</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">estimator.fit(X_train, y_train)</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/ed31e821ee704cfd856497450565af4b.png\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">y_predicted &#x3D; estimator.predict(X_test)\naccuracy &#x3D; np.mean(y_test &#x3D;&#x3D; y_predicted) * 100\nprint(&quot;The accuracy is &#123;0:.1f&#125;%&quot;.format(accuracy))</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>The accuracy is 86.4%</p></blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from sklearn.model_selection import cross_val_score</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">scores &#x3D; cross_val_score(estimator, X, y, scoring&#x3D;&#39;accuracy&#39;)\naverage_accuracy &#x3D; np.mean(scores) * 100\nprint(&quot;The average accuracy is &#123;0:.1f&#125;%&quot;.format(average_accuracy))</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>The average accuracy is 82.6%</p></blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/a11e98b17bf34116ab10bbc210ff5ffc.png\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">avg_scores &#x3D; []\nall_scores &#x3D; []\nparameter_values &#x3D; list(range(1, 21))  # Including 20\nfor n_neighbors in parameter_values:\n    estimator &#x3D; KNeighborsClassifier(n_neighbors&#x3D;n_neighbors)\n    scores &#x3D; cross_val_score(estimator, X, y, scoring&#x3D;&#39;accuracy&#39;)\n    avg_scores.append(np.mean(scores))\n    all_scores.append(scores)</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.figure(figsize&#x3D;(32,20))\nplt.plot(parameter_values, avg_scores, &#39;-o&#39;, linewidth&#x3D;5, markersize&#x3D;24)\n#plt.axis([0, max(parameter_values), 0, 1.0])</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/cea1d0c1104f46638f92e71c6662cd3e.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/119424d90442408eb67ff35ef51eac8f.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/7ceb7318ed054674963c125687f66eaa.png\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">for parameter, scores in zip(parameter_values, all_scores):\n    n_scores &#x3D; len(scores)\n    plt.plot([parameter] * n_scores, scores, &#39;-o&#39;)</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/f9242152b7ff44ae996feadeb2eceed2.png\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">plt.plot(parameter_values, all_scores, &#39;bx&#39;)</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[<matplotlib.lines.Line2D at 0x17f0c1866b0>,<br> <matplotlib.lines.Line2D at 0x17f0c186770>,<br> <matplotlib.lines.Line2D at 0x17f0c186890>,<br> <matplotlib.lines.Line2D at 0x17f0c185600>,<br> <matplotlib.lines.Line2D at 0x17f0c1869b0>]</p></blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/c3c259ad59a14f468e80d9837c72ff5b.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"电影推荐\"><a href=\"#电影推荐\" class=\"headerlink\" title=\"电影推荐\"></a>电影推荐</h2><p>数据集：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://grouplens.org/datasets/movielens/\">https://grouplens.org/datasets/movielens/</a></p></blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import os\nimport pandas as pd\n#data_folder &#x3D;os.path.join(os.path.expanduser(&quot;~&quot;),&quot;shujvji&quot;,&quot;ml-100k&quot;)\n#ratings_filename&#x3D;os.path.join(data_folder,&quot;u.data&quot;)\nratings_filename &#x3D; r&quot;D:\\coder\\randomnumbers\\shujvji\\ml-100k\\u.data&quot;</code></pre>\n<p>该数据集非常规整，但有几点与pandas.read_csv方法的默认设置有出入，所以要调整参数设置。<br>第一个问题是数据集每行的几个数据之间用制表符而不是逗号分隔。<br>其次，没有表头，这表示数据集的第一行就是数据部分，我们需要手动为各列添加名称。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">all_ratings&#x3D;pd.read_csv(ratings_filename,delimiter&#x3D;&quot;\\t&quot;,header&#x3D;None,names&#x3D;[&quot;UserID&quot;,&quot;MovieID&quot;,&quot;Rating&quot;,&quot;Datetime&quot;])</code></pre>\n<p>运行下面代码，看一下前五条记录：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">all_ratings[:5]</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><pre><code>    UserID    MovieID    Rating    Datetime\n0    196    242    3    881250949\n1    186    302    3    891717742\n2    22    377    1    878887116\n3    244    51    2    880606923\n4    166    346    1    886397596\n</code></pre></blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/31d78c3d841b495da503e22295c51b0e.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><p>下面是完整代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import os\ndata_folder &#x3D; os.path.join(os.path.expanduser(&quot;~&quot;), &quot;Data&quot;, &quot;ml-100k&quot;)\nratings_filename &#x3D; os.path.join(data_folder, &quot;u.data&quot;)</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import pandas as pd</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">all_ratings &#x3D; pd.read_csv(ratings_filename, delimiter&#x3D;&quot;\\t&quot;, header&#x3D;None, names &#x3D; [&quot;UserID&quot;, &quot;MovieID&quot;, &quot;Rating&quot;, &quot;Datetime&quot;])\nall_ratings[&quot;Datetime&quot;] &#x3D; pd.to_datetime(all_ratings[&#39;Datetime&#39;],unit&#x3D;&#39;s&#39;)\nall_ratings[:5]</code></pre>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n</style>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>UserID</th>\n      <th>MovieID</th>\n      <th>Rating</th>\n      <th>Datetime</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>196</td>\n      <td>242</td>\n      <td>3</td>\n      <td>1997-12-04 15:55:49</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>186</td>\n      <td>302</td>\n      <td>3</td>\n      <td>1998-04-04 19:22:22</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>22</td>\n      <td>377</td>\n      <td>1</td>\n      <td>1997-11-07 07:18:36</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>244</td>\n      <td>51</td>\n      <td>2</td>\n      <td>1997-11-27 05:02:03</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>166</td>\n      <td>346</td>\n      <td>1</td>\n      <td>1998-02-02 05:33:16</td>\n    </tr>\n  </tbody>\n</table>\n\n</div>\n\n\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">all_ratings[all_ratings[&quot;UserID&quot;] &#x3D;&#x3D; 675].sort_values(&quot;MovieID&quot;)  </code></pre>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n</style>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>UserID</th>\n      <th>MovieID</th>\n      <th>Rating</th>\n      <th>Datetime</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>81098</th>\n      <td>675</td>\n      <td>86</td>\n      <td>4</td>\n      <td>1998-03-10 00:26:14</td>\n    </tr>\n    <tr>\n      <th>90696</th>\n      <td>675</td>\n      <td>223</td>\n      <td>1</td>\n      <td>1998-03-10 00:35:51</td>\n    </tr>\n    <tr>\n      <th>92650</th>\n      <td>675</td>\n      <td>235</td>\n      <td>1</td>\n      <td>1998-03-10 00:35:51</td>\n    </tr>\n    <tr>\n      <th>95459</th>\n      <td>675</td>\n      <td>242</td>\n      <td>4</td>\n      <td>1998-03-10 00:08:42</td>\n    </tr>\n    <tr>\n      <th>82845</th>\n      <td>675</td>\n      <td>244</td>\n      <td>3</td>\n      <td>1998-03-10 00:29:35</td>\n    </tr>\n    <tr>\n      <th>53293</th>\n      <td>675</td>\n      <td>258</td>\n      <td>3</td>\n      <td>1998-03-10 00:11:19</td>\n    </tr>\n    <tr>\n      <th>97286</th>\n      <td>675</td>\n      <td>269</td>\n      <td>5</td>\n      <td>1998-03-10 00:08:07</td>\n    </tr>\n    <tr>\n      <th>93720</th>\n      <td>675</td>\n      <td>272</td>\n      <td>3</td>\n      <td>1998-03-10 00:07:11</td>\n    </tr>\n    <tr>\n      <th>73389</th>\n      <td>675</td>\n      <td>286</td>\n      <td>4</td>\n      <td>1998-03-10 00:07:11</td>\n    </tr>\n    <tr>\n      <th>77524</th>\n      <td>675</td>\n      <td>303</td>\n      <td>5</td>\n      <td>1998-03-10 00:08:42</td>\n    </tr>\n    <tr>\n      <th>47367</th>\n      <td>675</td>\n      <td>305</td>\n      <td>4</td>\n      <td>1998-03-10 00:09:08</td>\n    </tr>\n    <tr>\n      <th>44300</th>\n      <td>675</td>\n      <td>306</td>\n      <td>5</td>\n      <td>1998-03-10 00:08:07</td>\n    </tr>\n    <tr>\n      <th>53730</th>\n      <td>675</td>\n      <td>311</td>\n      <td>3</td>\n      <td>1998-03-10 00:10:47</td>\n    </tr>\n    <tr>\n      <th>54284</th>\n      <td>675</td>\n      <td>312</td>\n      <td>2</td>\n      <td>1998-03-10 00:10:24</td>\n    </tr>\n    <tr>\n      <th>63291</th>\n      <td>675</td>\n      <td>318</td>\n      <td>5</td>\n      <td>1998-03-10 00:21:13</td>\n    </tr>\n    <tr>\n      <th>87082</th>\n      <td>675</td>\n      <td>321</td>\n      <td>2</td>\n      <td>1998-03-10 00:11:48</td>\n    </tr>\n    <tr>\n      <th>56108</th>\n      <td>675</td>\n      <td>344</td>\n      <td>4</td>\n      <td>1998-03-10 00:12:34</td>\n    </tr>\n    <tr>\n      <th>53046</th>\n      <td>675</td>\n      <td>347</td>\n      <td>4</td>\n      <td>1998-03-10 00:07:11</td>\n    </tr>\n    <tr>\n      <th>94617</th>\n      <td>675</td>\n      <td>427</td>\n      <td>5</td>\n      <td>1998-03-10 00:28:11</td>\n    </tr>\n    <tr>\n      <th>69915</th>\n      <td>675</td>\n      <td>463</td>\n      <td>5</td>\n      <td>1998-03-10 00:16:43</td>\n    </tr>\n    <tr>\n      <th>46744</th>\n      <td>675</td>\n      <td>509</td>\n      <td>5</td>\n      <td>1998-03-10 00:24:25</td>\n    </tr>\n    <tr>\n      <th>46598</th>\n      <td>675</td>\n      <td>531</td>\n      <td>5</td>\n      <td>1998-03-10 00:18:28</td>\n    </tr>\n    <tr>\n      <th>52962</th>\n      <td>675</td>\n      <td>650</td>\n      <td>5</td>\n      <td>1998-03-10 00:32:51</td>\n    </tr>\n    <tr>\n      <th>94029</th>\n      <td>675</td>\n      <td>750</td>\n      <td>4</td>\n      <td>1998-03-10 00:08:07</td>\n    </tr>\n    <tr>\n      <th>53223</th>\n      <td>675</td>\n      <td>874</td>\n      <td>4</td>\n      <td>1998-03-10 00:11:19</td>\n    </tr>\n    <tr>\n      <th>62277</th>\n      <td>675</td>\n      <td>891</td>\n      <td>2</td>\n      <td>1998-03-10 00:12:59</td>\n    </tr>\n    <tr>\n      <th>77274</th>\n      <td>675</td>\n      <td>896</td>\n      <td>5</td>\n      <td>1998-03-10 00:09:35</td>\n    </tr>\n    <tr>\n      <th>66194</th>\n      <td>675</td>\n      <td>900</td>\n      <td>4</td>\n      <td>1998-03-10 00:10:24</td>\n    </tr>\n    <tr>\n      <th>54994</th>\n      <td>675</td>\n      <td>937</td>\n      <td>1</td>\n      <td>1998-03-10 00:35:51</td>\n    </tr>\n    <tr>\n      <th>61742</th>\n      <td>675</td>\n      <td>1007</td>\n      <td>4</td>\n      <td>1998-03-10 00:25:22</td>\n    </tr>\n    <tr>\n      <th>49225</th>\n      <td>675</td>\n      <td>1101</td>\n      <td>4</td>\n      <td>1998-03-10 00:33:49</td>\n    </tr>\n    <tr>\n      <th>50692</th>\n      <td>675</td>\n      <td>1255</td>\n      <td>1</td>\n      <td>1998-03-10 00:35:51</td>\n    </tr>\n    <tr>\n      <th>74202</th>\n      <td>675</td>\n      <td>1628</td>\n      <td>5</td>\n      <td>1998-03-10 00:30:37</td>\n    </tr>\n    <tr>\n      <th>47866</th>\n      <td>675</td>\n      <td>1653</td>\n      <td>5</td>\n      <td>1998-03-10 00:31:53</td>\n    </tr>\n  </tbody>\n</table>\n\n</div>\n\n\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">all_ratings[&quot;Favorable&quot;] &#x3D; all_ratings[&quot;Rating&quot;] &gt; 3\nall_ratings[10:15]</code></pre>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n</style>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>UserID</th>\n      <th>MovieID</th>\n      <th>Rating</th>\n      <th>Datetime</th>\n      <th>Favorable</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>10</th>\n      <td>62</td>\n      <td>257</td>\n      <td>2</td>\n      <td>1997-11-12 22:07:14</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>286</td>\n      <td>1014</td>\n      <td>5</td>\n      <td>1997-11-17 15:38:45</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>200</td>\n      <td>222</td>\n      <td>5</td>\n      <td>1997-10-05 09:05:40</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>210</td>\n      <td>40</td>\n      <td>3</td>\n      <td>1998-03-27 21:59:54</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>224</td>\n      <td>29</td>\n      <td>3</td>\n      <td>1998-02-21 23:40:57</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n\n</div>\n\n\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">all_ratings[all_ratings[&quot;UserID&quot;] &#x3D;&#x3D; 1][:5]</code></pre>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n</style>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>UserID</th>\n      <th>MovieID</th>\n      <th>Rating</th>\n      <th>Datetime</th>\n      <th>Favorable</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>202</th>\n      <td>1</td>\n      <td>61</td>\n      <td>4</td>\n      <td>1997-11-03 07:33:40</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>305</th>\n      <td>1</td>\n      <td>189</td>\n      <td>3</td>\n      <td>1998-03-01 06:15:28</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>333</th>\n      <td>1</td>\n      <td>33</td>\n      <td>4</td>\n      <td>1997-11-03 07:38:19</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>334</th>\n      <td>1</td>\n      <td>160</td>\n      <td>4</td>\n      <td>1997-09-24 03:42:27</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>478</th>\n      <td>1</td>\n      <td>20</td>\n      <td>4</td>\n      <td>1998-02-14 04:51:23</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n\n</div>\n\n\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">ratings &#x3D; all_ratings[all_ratings[&#39;UserID&#39;].isin(range(200))]  # &amp; ratings[&quot;UserID&quot;].isin(range(100))]</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">favorable_ratings &#x3D; ratings[ratings[&quot;Favorable&quot;]]\nfavorable_ratings[:5]</code></pre>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n</style>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>UserID</th>\n      <th>MovieID</th>\n      <th>Rating</th>\n      <th>Datetime</th>\n      <th>Favorable</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>16</th>\n      <td>122</td>\n      <td>387</td>\n      <td>5</td>\n      <td>1997-11-11 17:47:39</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>119</td>\n      <td>392</td>\n      <td>4</td>\n      <td>1998-01-30 16:13:34</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>167</td>\n      <td>486</td>\n      <td>4</td>\n      <td>1998-04-16 14:54:12</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>38</td>\n      <td>95</td>\n      <td>5</td>\n      <td>1998-04-13 01:14:54</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>63</td>\n      <td>277</td>\n      <td>4</td>\n      <td>1997-10-01 23:10:01</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n\n</div>\n\n\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">favorable_reviews_by_users &#x3D; dict((k, frozenset(v.values)) for k, v in favorable_ratings.groupby(&quot;UserID&quot;)[&quot;MovieID&quot;])\nlen(favorable_reviews_by_users)</code></pre>\n<pre><code>199\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">num_favorable_by_movie &#x3D; ratings[[&quot;MovieID&quot;, &quot;Favorable&quot;]].groupby(&quot;MovieID&quot;).sum()\nnum_favorable_by_movie.sort_values(&quot;Favorable&quot;, ascending&#x3D;False)[:5]</code></pre>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n</style>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Favorable</th>\n    </tr>\n    <tr>\n      <th>MovieID</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>50</th>\n      <td>100</td>\n    </tr>\n    <tr>\n      <th>100</th>\n      <td>89</td>\n    </tr>\n    <tr>\n      <th>258</th>\n      <td>83</td>\n    </tr>\n    <tr>\n      <th>181</th>\n      <td>79</td>\n    </tr>\n    <tr>\n      <th>174</th>\n      <td>74</td>\n    </tr>\n  </tbody>\n</table>\n\n</div>\n\n\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from collections import defaultdict\n\ndef find_frequent_itemsets(favorable_reviews_by_users, k_1_itemsets, min_support):\n    counts &#x3D; defaultdict(int)\n    for user, reviews in favorable_reviews_by_users.items():\n        for itemset in k_1_itemsets:\n            if itemset.issubset(reviews):\n                for other_reviewed_movie in reviews - itemset:\n                    current_superset &#x3D; itemset | frozenset((other_reviewed_movie,))\n                    counts[current_superset] +&#x3D; 1\n    return dict([(itemset, frequency) for itemset, frequency in counts.items() if frequency &gt;&#x3D; min_support])</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import sys\nfrequent_itemsets &#x3D; &#123;&#125;  # itemsets are sorted by length\nmin_support &#x3D; 50\n\n# k&#x3D;1 candidates are the isbns with more than min_support favourable reviews\nfrequent_itemsets[1] &#x3D; dict((frozenset((movie_id,)), row[&quot;Favorable&quot;])\n                                for movie_id, row in num_favorable_by_movie.iterrows()\n                                if row[&quot;Favorable&quot;] &gt; min_support)\n\nprint(&quot;There are &#123;&#125; movies with more than &#123;&#125; favorable reviews&quot;.format(len(frequent_itemsets[1]), min_support))\nsys.stdout.flush()\nfor k in range(2, 20):\n    # Generate candidates of length k, using the frequent itemsets of length k-1\n    # Only store the frequent itemsets\n    cur_frequent_itemsets &#x3D; find_frequent_itemsets(favorable_reviews_by_users, frequent_itemsets[k-1],\n                                                   min_support)\n    if len(cur_frequent_itemsets) &#x3D;&#x3D; 0:\n        print(&quot;Did not find any frequent itemsets of length &#123;&#125;&quot;.format(k))\n        sys.stdout.flush()\n        break\n    else:\n        print(&quot;I found &#123;&#125; frequent itemsets of length &#123;&#125;&quot;.format(len(cur_frequent_itemsets), k))\n        #print(cur_frequent_itemsets)\n        sys.stdout.flush()\n        frequent_itemsets[k] &#x3D; cur_frequent_itemsets\n# We aren&#39;t interested in the itemsets of length 1, so remove those\ndel frequent_itemsets[1]</code></pre>\n<pre><code>There are 16 movies with more than 50 favorable reviews\nI found 93 frequent itemsets of length 2\nI found 295 frequent itemsets of length 3\nI found 593 frequent itemsets of length 4\nI found 785 frequent itemsets of length 5\nI found 677 frequent itemsets of length 6\nI found 373 frequent itemsets of length 7\nI found 126 frequent itemsets of length 8\nI found 24 frequent itemsets of length 9\nI found 2 frequent itemsets of length 10\nDid not find any frequent itemsets of length 11\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">print(&quot;Found a total of &#123;0&#125; frequent itemsets&quot;.format(sum(len(itemsets) for itemsets in frequent_itemsets.values())))</code></pre>\n<pre><code>Found a total of 2968 frequent itemsets\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">candidate_rules &#x3D; []\nfor itemset_length, itemset_counts in frequent_itemsets.items():\n    for itemset in itemset_counts.keys():\n        for conclusion in itemset:\n            premise &#x3D; itemset - set((conclusion,))\n            candidate_rules.append((premise, conclusion))\nprint(&quot;There are &#123;&#125; candidate rules&quot;.format(len(candidate_rules)))</code></pre>\n<pre><code>There are 15285 candidate rules\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">print(candidate_rules[:5])</code></pre>\n<pre><code>[(frozenset(&#123;7&#125;), 1), (frozenset(&#123;1&#125;), 7), (frozenset(&#123;50&#125;), 1), (frozenset(&#123;1&#125;), 50), (frozenset(&#123;1&#125;), 56)]\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">correct_counts &#x3D; defaultdict(int)\nincorrect_counts &#x3D; defaultdict(int)\nfor user, reviews in favorable_reviews_by_users.items():\n    for candidate_rule in candidate_rules:\n        premise, conclusion &#x3D; candidate_rule\n        if premise.issubset(reviews):\n            if conclusion in reviews:\n                correct_counts[candidate_rule] +&#x3D; 1\n            else:\n                incorrect_counts[candidate_rule] +&#x3D; 1\nrule_confidence &#x3D; &#123;candidate_rule: correct_counts[candidate_rule] &#x2F; float(correct_counts[candidate_rule] + incorrect_counts[candidate_rule])\n              for candidate_rule in candidate_rules&#125;</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">min_confidence &#x3D; 0.9</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">rule_confidence &#x3D; &#123;rule: confidence for rule, confidence in rule_confidence.items() if confidence &gt; min_confidence&#125;\nprint(len(rule_confidence))</code></pre>\n<pre><code>5152\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from operator import itemgetter\nsorted_confidence &#x3D; sorted(rule_confidence.items(), key&#x3D;itemgetter(1), reverse&#x3D;True)</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">for index in range(5):\n    print(&quot;Rule #&#123;0&#125;&quot;.format(index + 1))\n    (premise, conclusion) &#x3D; sorted_confidence[index][0]\n    print(&quot;Rule: If a person recommends &#123;0&#125; they will also recommend &#123;1&#125;&quot;.format(premise, conclusion))\n    print(&quot; - Confidence: &#123;0:.3f&#125;&quot;.format(rule_confidence[(premise, conclusion)]))\n    print(&quot;&quot;)</code></pre>\n<pre><code>Rule #1\nRule: If a person recommends frozenset(&#123;98, 181&#125;) they will also recommend 50\n - Confidence: 1.000\n\nRule #2\nRule: If a person recommends frozenset(&#123;172, 79&#125;) they will also recommend 174\n - Confidence: 1.000\n\nRule #3\nRule: If a person recommends frozenset(&#123;258, 172&#125;) they will also recommend 174\n - Confidence: 1.000\n\nRule #4\nRule: If a person recommends frozenset(&#123;1, 181, 7&#125;) they will also recommend 50\n - Confidence: 1.000\n\nRule #5\nRule: If a person recommends frozenset(&#123;1, 172, 7&#125;) they will also recommend 174\n - Confidence: 1.000\n</code></pre><p>​    </p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">movie_name_filename &#x3D; os.path.join(data_folder, &quot;u.item&quot;)\nmovie_name_data &#x3D; pd.read_csv(movie_name_filename, delimiter&#x3D;&quot;|&quot;, header&#x3D;None, encoding &#x3D; &quot;mac-roman&quot;)\nmovie_name_data.columns &#x3D; [&quot;MovieID&quot;, &quot;Title&quot;, &quot;Release Date&quot;, &quot;Video Release&quot;, &quot;IMDB&quot;, &quot;&lt;UNK&gt;&quot;, &quot;Action&quot;, &quot;Adventure&quot;,\n                           &quot;Animation&quot;, &quot;Children&#39;s&quot;, &quot;Comedy&quot;, &quot;Crime&quot;, &quot;Documentary&quot;, &quot;Drama&quot;, &quot;Fantasy&quot;, &quot;Film-Noir&quot;,\n                           &quot;Horror&quot;, &quot;Musical&quot;, &quot;Mystery&quot;, &quot;Romance&quot;, &quot;Sci-Fi&quot;, &quot;Thriller&quot;, &quot;War&quot;, &quot;Western&quot;]</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def get_movie_name(movie_id):\n    title_object &#x3D; movie_name_data[movie_name_data[&quot;MovieID&quot;] &#x3D;&#x3D; movie_id][&quot;Title&quot;]\n    title &#x3D; title_object.values[0]\n    return title</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">get_movie_name(4)</code></pre>\n<pre><code>&#39;Get Shorty (1995)&#39;\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">for index in range(5):\n    print(&quot;Rule #&#123;0&#125;&quot;.format(index + 1))\n    (premise, conclusion) &#x3D; sorted_confidence[index][0]\n    premise_names &#x3D; &quot;, &quot;.join(get_movie_name(idx) for idx in premise)\n    conclusion_name &#x3D; get_movie_name(conclusion)\n    print(&quot;Rule: If a person recommends &#123;0&#125; they will also recommend &#123;1&#125;&quot;.format(premise_names, conclusion_name))\n    print(&quot; - Confidence: &#123;0:.3f&#125;&quot;.format(rule_confidence[(premise, conclusion)]))\n    print(&quot;&quot;)</code></pre>\n<pre><code>Rule #1\nRule: If a person recommends Silence of the Lambs, The (1991), Return of the Jedi (1983) they will also recommend Star Wars (1977)\n - Confidence: 1.000\n\nRule #2\nRule: If a person recommends Empire Strikes Back, The (1980), Fugitive, The (1993) they will also recommend Raiders of the Lost Ark (1981)\n - Confidence: 1.000\n\nRule #3\nRule: If a person recommends Contact (1997), Empire Strikes Back, The (1980) they will also recommend Raiders of the Lost Ark (1981)\n - Confidence: 1.000\n\nRule #4\nRule: If a person recommends Toy Story (1995), Return of the Jedi (1983), Twelve Monkeys (1995) they will also recommend Star Wars (1977)\n - Confidence: 1.000\n\nRule #5\nRule: If a person recommends Toy Story (1995), Empire Strikes Back, The (1980), Twelve Monkeys (1995) they will also recommend Raiders of the Lost Ark (1981)\n - Confidence: 1.000\n</code></pre><p>​    </p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># Evaluation using test data\ntest_dataset &#x3D; all_ratings[~all_ratings[&#39;UserID&#39;].isin(range(200))]\ntest_favorable &#x3D; test_dataset[test_dataset[&quot;Favorable&quot;]]\n#test_not_favourable &#x3D; test_dataset[~test_dataset[&quot;Favourable&quot;]]\ntest_favorable_by_users &#x3D; dict((k, frozenset(v.values)) for k, v in test_favorable.groupby(&quot;UserID&quot;)[&quot;MovieID&quot;])\n#test_not_favourable_by_users &#x3D; dict((k, frozenset(v.values)) for k, v in test_not_favourable.groupby(&quot;UserID&quot;)[&quot;MovieID&quot;])\n#test_users &#x3D; test_dataset[&quot;UserID&quot;].unique()</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">test_dataset[:5]</code></pre>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n</style>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>UserID</th>\n      <th>MovieID</th>\n      <th>Rating</th>\n      <th>Datetime</th>\n      <th>Favorable</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>244</td>\n      <td>51</td>\n      <td>2</td>\n      <td>1997-11-27 05:02:03</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>298</td>\n      <td>474</td>\n      <td>4</td>\n      <td>1998-01-07 14:20:06</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>253</td>\n      <td>465</td>\n      <td>5</td>\n      <td>1998-04-03 18:34:27</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>305</td>\n      <td>451</td>\n      <td>3</td>\n      <td>1998-02-01 09:20:17</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>286</td>\n      <td>1014</td>\n      <td>5</td>\n      <td>1997-11-17 15:38:45</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n\n</div>\n\n\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">correct_counts &#x3D; defaultdict(int)\nincorrect_counts &#x3D; defaultdict(int)\nfor user, reviews in test_favorable_by_users.items():\n    for candidate_rule in candidate_rules:\n        premise, conclusion &#x3D; candidate_rule\n        if premise.issubset(reviews):\n            if conclusion in reviews:\n                correct_counts[candidate_rule] +&#x3D; 1\n            else:\n                incorrect_counts[candidate_rule] +&#x3D; 1</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">test_confidence &#x3D; &#123;candidate_rule: correct_counts[candidate_rule] &#x2F; float(correct_counts[candidate_rule] + incorrect_counts[candidate_rule])\n                   for candidate_rule in rule_confidence&#125;\nprint(len(test_confidence))</code></pre>\n<pre><code>5152\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">sorted_test_confidence &#x3D; sorted(test_confidence.items(), key&#x3D;itemgetter(1), reverse&#x3D;True)\nprint(sorted_test_confidence[:5])</code></pre>\n<pre><code>[((frozenset(&#123;64, 1, 7, 79, 50&#125;), 174), 1.0), ((frozenset(&#123;64, 1, 98, 7, 79&#125;), 174), 1.0), ((frozenset(&#123;64, 1, 7, 172, 79&#125;), 174), 1.0), ((frozenset(&#123;64, 1, 7, 79, 181&#125;), 174), 1.0), ((frozenset(&#123;64, 1, 172, 79, 56&#125;), 174), 1.0)]\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">for index in range(10):\n    print(&quot;Rule #&#123;0&#125;&quot;.format(index + 1))\n    (premise, conclusion) &#x3D; sorted_confidence[index][0]\n    premise_names &#x3D; &quot;, &quot;.join(get_movie_name(idx) for idx in premise)\n    conclusion_name &#x3D; get_movie_name(conclusion)\n    print(&quot;Rule: If a person recommends &#123;0&#125; they will also recommend &#123;1&#125;&quot;.format(premise_names, conclusion_name))\n    print(&quot; - Train Confidence: &#123;0:.3f&#125;&quot;.format(rule_confidence.get((premise, conclusion), -1)))\n    print(&quot; - Test Confidence: &#123;0:.3f&#125;&quot;.format(test_confidence.get((premise, conclusion), -1)))\n    print(&quot;&quot;)</code></pre>\n<pre><code>Rule #1\nRule: If a person recommends Silence of the Lambs, The (1991), Return of the Jedi (1983) they will also recommend Star Wars (1977)\n - Train Confidence: 1.000\n - Test Confidence: 0.936\n\nRule #2\nRule: If a person recommends Empire Strikes Back, The (1980), Fugitive, The (1993) they will also recommend Raiders of the Lost Ark (1981)\n - Train Confidence: 1.000\n - Test Confidence: 0.876\n\nRule #3\nRule: If a person recommends Contact (1997), Empire Strikes Back, The (1980) they will also recommend Raiders of the Lost Ark (1981)\n - Train Confidence: 1.000\n - Test Confidence: 0.841\n\nRule #4\nRule: If a person recommends Toy Story (1995), Return of the Jedi (1983), Twelve Monkeys (1995) they will also recommend Star Wars (1977)\n - Train Confidence: 1.000\n - Test Confidence: 0.932\n\nRule #5\nRule: If a person recommends Toy Story (1995), Empire Strikes Back, The (1980), Twelve Monkeys (1995) they will also recommend Raiders of the Lost Ark (1981)\n - Train Confidence: 1.000\n - Test Confidence: 0.903\n\nRule #6\nRule: If a person recommends Pulp Fiction (1994), Toy Story (1995), Star Wars (1977) they will also recommend Raiders of the Lost Ark (1981)\n - Train Confidence: 1.000\n - Test Confidence: 0.816\n\nRule #7\nRule: If a person recommends Pulp Fiction (1994), Toy Story (1995), Return of the Jedi (1983) they will also recommend Star Wars (1977)\n - Train Confidence: 1.000\n - Test Confidence: 0.970\n\nRule #8\nRule: If a person recommends Toy Story (1995), Silence of the Lambs, The (1991), Return of the Jedi (1983) they will also recommend Star Wars (1977)\n - Train Confidence: 1.000\n - Test Confidence: 0.933\n\nRule #9\nRule: If a person recommends Toy Story (1995), Empire Strikes Back, The (1980), Return of the Jedi (1983) they will also recommend Star Wars (1977)\n - Train Confidence: 1.000\n - Test Confidence: 0.971\n\nRule #10\nRule: If a person recommends Pulp Fiction (1994), Toy Story (1995), Shawshank Redemption, The (1994) they will also recommend Silence of the Lambs, The (1991)\n - Train Confidence: 1.000\n - Test Confidence: 0.794\n</code></pre><p>​    </p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"></code></pre>\n<h2 id=\"特征抽取\"><a href=\"#特征抽取\" class=\"headerlink\" title=\"特征抽取\"></a>特征抽取</h2><h3 id=\"第一部分\"><a href=\"#第一部分\" class=\"headerlink\" title=\"第一部分\"></a>第一部分</h3><p>数据集：</p>\n<blockquote>\n<p><a href=\"http://archive.ics.uci.edu/ml/machine-learning-databases/adult/\">http://archive.ics.uci.edu/ml/machine-learning-databases/adult/</a></p></blockquote>\n<h4 id=\"完整代码-1\"><a href=\"#完整代码-1\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import os\nimport pandas as pd\ndata_folder &#x3D; os.path.join(os.path.expanduser(&quot;~&quot;), &quot;Data&quot;, &quot;Adult&quot;)\nadult_filename &#x3D; os.path.join(data_folder, &quot;adult.data&quot;)</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">print(adult_filename)</code></pre>\n<pre><code>C:\\Users\\83854\\Data\\Adult\\adult.data\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">adult &#x3D; pd.read_csv(adult_filename, header&#x3D;None, names&#x3D;[&quot;Age&quot;, &quot;Work-Class&quot;, &quot;fnlwgt&quot;, &quot;Education&quot;,\n                                                        &quot;Education-Num&quot;, &quot;Marital-Status&quot;, &quot;Occupation&quot;,\n                                                        &quot;Relationship&quot;, &quot;Race&quot;, &quot;Sex&quot;, &quot;Capital-gain&quot;,\n                                                        &quot;Capital-loss&quot;, &quot;Hours-per-week&quot;, &quot;Native-Country&quot;,\n                                                        &quot;Earnings-Raw&quot;])</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">adult.dropna(how&#x3D;&#39;all&#39;, inplace&#x3D;True)</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">adult.columns</code></pre>\n<pre><code>Index([&#39;Age&#39;, &#39;Work-Class&#39;, &#39;fnlwgt&#39;, &#39;Education&#39;, &#39;Education-Num&#39;,\n       &#39;Marital-Status&#39;, &#39;Occupation&#39;, &#39;Relationship&#39;, &#39;Race&#39;, &#39;Sex&#39;,\n       &#39;Capital-gain&#39;, &#39;Capital-loss&#39;, &#39;Hours-per-week&#39;, &#39;Native-Country&#39;,\n       &#39;Earnings-Raw&#39;],\n      dtype=&#39;object&#39;)\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">adult[&quot;Hours-per-week&quot;].describe()</code></pre>\n<pre><code>count    32561.000000\nmean        40.437456\nstd         12.347429\nmin          1.000000\n25%         40.000000\n50%         40.000000\n75%         45.000000\nmax         99.000000\nName: Hours-per-week, dtype: float64\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">adult[&quot;Education-Num&quot;].median()</code></pre>\n<pre><code>10.0\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">adult[&quot;Work-Class&quot;].unique()</code></pre>\n<pre><code>array([&#39; State-gov&#39;, &#39; Self-emp-not-inc&#39;, &#39; Private&#39;, &#39; Federal-gov&#39;,\n       &#39; Local-gov&#39;, &#39; ?&#39;, &#39; Self-emp-inc&#39;, &#39; Without-pay&#39;,\n       &#39; Never-worked&#39;], dtype=object)\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import numpy as np\nX &#x3D; np.arange(30).reshape((10, 3))</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">X</code></pre>\n<pre><code>array([[ 0,  1,  2],\n       [ 3,  4,  5],\n       [ 6,  7,  8],\n       [ 9, 10, 11],\n       [12, 13, 14],\n       [15, 16, 17],\n       [18, 19, 20],\n       [21, 22, 23],\n       [24, 25, 26],\n       [27, 28, 29]])\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">X[:,1] &#x3D; 1</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">X</code></pre>\n<pre><code>array([[ 0,  1,  2],\n       [ 3,  1,  5],\n       [ 6,  1,  8],\n       [ 9,  1, 11],\n       [12,  1, 14],\n       [15,  1, 17],\n       [18,  1, 20],\n       [21,  1, 23],\n       [24,  1, 26],\n       [27,  1, 29]])\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from sklearn.feature_selection import VarianceThreshold</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">vt &#x3D; VarianceThreshold()\nXt &#x3D; vt.fit_transform(X)</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">Xt</code></pre>\n<pre><code>array([[ 0,  2],\n       [ 3,  5],\n       [ 6,  8],\n       [ 9, 11],\n       [12, 14],\n       [15, 17],\n       [18, 20],\n       [21, 23],\n       [24, 26],\n       [27, 29]])\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">print(vt.variances_)</code></pre>\n<pre><code>[27.  0. 27.]\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">X &#x3D; adult[[&quot;Age&quot;, &quot;Education-Num&quot;, &quot;Capital-gain&quot;, &quot;Capital-loss&quot;, &quot;Hours-per-week&quot;]].values\ny &#x3D; (adult[&quot;Earnings-Raw&quot;] &#x3D;&#x3D; &#39; &gt;50K&#39;).values</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\ntransformer &#x3D; SelectKBest(score_func&#x3D;chi2, k&#x3D;3)</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">Xt_chi2 &#x3D; transformer.fit_transform(X, y)\nprint(transformer.scores_)</code></pre>\n<pre><code>[8.60061182e+03 2.40142178e+03 8.21924671e+07 1.37214589e+06\n 6.47640900e+03]\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from scipy.stats import pearsonr\n\ndef multivariate_pearsonr(X, y):\n    scores, pvalues &#x3D; [], []\n    for column in range(X.shape[1]):\n        cur_score, cur_p &#x3D; pearsonr(X[:,column], y)\n        scores.append(abs(cur_score))\n        pvalues.append(cur_p)\n    return (np.array(scores), np.array(pvalues))</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">transformer &#x3D; SelectKBest(score_func&#x3D;multivariate_pearsonr, k&#x3D;3)\nXt_pearson &#x3D; transformer.fit_transform(X, y)\nprint(transformer.scores_)</code></pre>\n<pre><code>[0.2340371  0.33515395 0.22332882 0.15052631 0.22968907]\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import cross_val_score\nclf &#x3D; DecisionTreeClassifier(random_state&#x3D;14)\nscores_chi2 &#x3D; cross_val_score(clf, Xt_chi2, y, scoring&#x3D;&#39;accuracy&#39;)\nscores_pearson &#x3D; cross_val_score(clf, Xt_pearson, y, scoring&#x3D;&#39;accuracy&#39;)</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">print(&quot;Chi2 performance: &#123;0:.3f&#125;&quot;.format(scores_chi2.mean()))\nprint(&quot;Pearson performance: &#123;0:.3f&#125;&quot;.format(scores_pearson.mean()))</code></pre>\n<pre><code>Chi2 performance: 0.829\nPearson performance: 0.772\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from sklearn.base import TransformerMixin\nfrom sklearn.utils import as_float_array\n\nclass MeanDiscrete(TransformerMixin):\n    def fit(self, X, y&#x3D;None):\n        X &#x3D; as_float_array(X)\n        self.mean &#x3D; np.mean(X, axis&#x3D;0)\n        return self\n\n    def transform(self, X):\n        X &#x3D; as_float_array(X)\n        assert X.shape[1] &#x3D;&#x3D; self.mean.shape[0]\n        return X &gt; self.mean</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">mean_discrete &#x3D; MeanDiscrete()</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">X_mean &#x3D; mean_discrete.fit_transform(X)</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">%%file adult_tests.py\nimport numpy as np\nfrom numpy.testing import assert_array_equal\n\ndef test_meandiscrete():\n    X_test &#x3D; np.array([[ 0,  2],\n                        [ 3,  5],\n                        [ 6,  8],\n                        [ 9, 11],\n                        [12, 14],\n                        [15, 17],\n                        [18, 20],\n                        [21, 23],\n                        [24, 26],\n                        [27, 29]])\n    mean_discrete &#x3D; MeanDiscrete()\n    mean_discrete.fit(X_test)\n    assert_array_equal(mean_discrete.mean, np.array([13.5, 15.5]))\n    X_transformed &#x3D; mean_discrete.transform(X_test)\n    X_expected &#x3D; np.array([[ 0,  0],\n                            [ 0, 0],\n                            [ 0, 0],\n                            [ 0, 0],\n                            [ 0, 0],\n                            [ 1, 1],\n                            [ 1, 1],\n                            [ 1, 1],\n                            [ 1, 1],\n                            [ 1, 1]])\n    assert_array_equal(X_transformed, X_expected)</code></pre>\n<pre><code>Writing adult_tests.py\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">test_meandiscrete()</code></pre>\n<pre><code>---------------------------------------------------------------------------\n\nNameError                                 Traceback (most recent call last)\n\nCell In [41], line 1\n----&gt; 1 test_meandiscrete()\n\n\nNameError: name &#39;test_meandiscrete&#39; is not defined\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from sklearn.pipeline import Pipeline\n\npipeline &#x3D; Pipeline([(&#39;mean_discrete&#39;, MeanDiscrete()),\n                     (&#39;classifier&#39;, DecisionTreeClassifier(random_state&#x3D;14))])\nscores_mean_discrete &#x3D; cross_val_score(pipeline, X, y, scoring&#x3D;&#39;accuracy&#39;)</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">print(&quot;Mean Discrete performance: &#123;0:.3f&#125;&quot;.format(scores_mean_discrete.mean()))</code></pre>\n<pre><code>Mean Discrete performance: 0.803\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"></code></pre>\n<h3 id=\"第二部分\"><a href=\"#第二部分\" class=\"headerlink\" title=\"第二部分\"></a>第二部分</h3><p>数据集：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"http://archive.ics.uci.edu/ml/datasets/Internet+Advertisements\">http://archive.ics.uci.edu/ml/datasets/Internet+Advertisements</a></p></blockquote>\n<h2 id=\"用神经网络破解验证码\"><a href=\"#用神经网络破解验证码\" class=\"headerlink\" title=\"用神经网络破解验证码\"></a>用神经网络破解验证码</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import numpy as np\nfrom PIL import Image, ImageDraw, ImageFont\nfrom skimage import transform as tf</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def create_captcha(text, shear&#x3D;0, size&#x3D;(100,24)):\n    im &#x3D; Image.new(&quot;L&quot;, size, &quot;black&quot;)\n    draw &#x3D; ImageDraw.Draw(im)\n    font &#x3D; ImageFont.truetype(r&quot;Coval.otf&quot;, 22)\n    draw.text((2, 2), text, fill&#x3D;1, font&#x3D;font)\n    image &#x3D; np.array(im)\n    affine_tf &#x3D; tf.AffineTransform(shear&#x3D;shear)\n    image &#x3D; tf.warp(image, affine_tf)\n    return image &#x2F; image.max()</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">%matplotlib inline\nfrom matplotlib import pyplot as plt\nimage &#x3D; create_captcha(&quot;GENE&quot;, shear&#x3D;0.3)\nplt.imshow(image, cmap&#x3D;&quot;gray&quot;)</code></pre>\n<pre><code>&lt;matplotlib.image.AxesImage at 0x1b3b5c3d060&gt;\n</code></pre><p>​<br><img src=\"https://img-blog.csdnimg.cn/c89a0615aeb746b0b6e452b0631dc3f0.png\" alt=\"\\[(img-OZ6LJsos-1663901538446)(output_2_1.png)\\]\"></p>\n<p>​    </p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from skimage.measure import label, regionprops\n\ndef segment_image(image):\n    labeled_image &#x3D; label(image &gt; 0)\n    subimages &#x3D; []\n    for region in regionprops(labeled_image):\n        start_x, start_y, end_x, end_y &#x3D; region.bbox\n        subimages.append(image[start_x:end_x, start_y:end_y])\n    if len(subimages) &#x3D;&#x3D; 0:\n        return [image,]\n    return subimages</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">subimages &#x3D; segment_image(image)\nf, axes &#x3D; plt.subplots(1, len(subimages), figsize&#x3D;(10, 3))\nfor i in range(len(subimages)):\n    axes[i].imshow(subimages[i], cmap&#x3D;&quot;gray&quot;)</code></pre>\n<p>​<br><img src=\"https://img-blog.csdnimg.cn/3328fe13843b48d484f2bab2eb530ab4.png\" alt=\"在这里插入图片描述\"></p>\n<p>​    </p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from sklearn.utils import check_random_state\nrandom_state &#x3D; check_random_state(14)\nletters &#x3D; list(&quot;ACBDEFGHIJKLMNOPQRSTUVWXYZ&quot;)\nshear_values &#x3D; np.arange(0, 0.5, 0.05)</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def generate_sample(random_state&#x3D;None):\n    random_state &#x3D; check_random_state(random_state)\n    letter &#x3D; random_state.choice(letters)\n    shear &#x3D; random_state.choice(shear_values)\n    return create_captcha(letter, shear&#x3D;shear, size&#x3D;(20, 20)), letters.index(letter)</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">image, target &#x3D; generate_sample(random_state)\nplt.imshow(image, cmap&#x3D;&quot;gray&quot;)\nprint(&quot;The target for this image is: &#123;0&#125;&quot;.format(target))</code></pre>\n<pre><code>The target for this image is: 11\n</code></pre><p><img src=\"https://img-blog.csdnimg.cn/237b8b8ba3bd4c4ab11562e5b517f8a2.png\" alt=\"在这里插入图片描述\"></p>\n<p>​    </p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dataset, targets &#x3D; zip(*(generate_sample(random_state) for i in\nrange(3000)))\ndataset &#x3D; np.array(dataset, dtype&#x3D;&#39;float&#39;)\ntargets &#x3D; np.array(targets)</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from sklearn.preprocessing import OneHotEncoder\nonehot &#x3D; OneHotEncoder()\ny &#x3D; onehot.fit_transform(targets.reshape(targets.shape[0],1))</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">y &#x3D; y.todense()</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from skimage.transform import resize\ndataset &#x3D; np.array([resize(segment_image(sample)[0], (20, 20)) for\nsample in dataset])\nX &#x3D; dataset.reshape((dataset.shape[0], dataset.shape[1] *\ndataset.shape[2]))\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test &#x3D; \\\ntrain_test_split(X, y, train_size&#x3D;0.9)\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from pybrain.datasets import SupervisedDataSet\n\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">training &#x3D; SupervisedDataSet(X.shape[1], y.shape[1])\nfor i in range(X_train.shape[0]):\n    training.addSample(X_train[i], y_train[i])\ntesting &#x3D; SupervisedDataSet(X.shape[1], y.shape[1])\nfor i in range(X_test.shape[0]):\n    testing.addSample(X_test[i], y_test[i])</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import scipy\nfrom pybrain.tools.shortcuts import buildNetwork\nnet &#x3D; buildNetwork(X.shape[1], 100, y.shape[1], bias&#x3D;True)</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from pybrain.supervised.trainers import BackpropTrainer\ntrainer &#x3D; BackpropTrainer(net, training, learningrate&#x3D;0.01,\nweightdecay&#x3D;0.01)</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">trainer.trainEpochs(epochs&#x3D;20)</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">predictions &#x3D; trainer.testOnClassData(dataset&#x3D;testing)</code></pre>\n<p>下面这行代码micro部分是添加处理数据问题</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from sklearn.metrics import f1_score\nprint(&quot;F-score: &#123;0:.2f&#125;&quot;.format(f1_score(predictions, y_test.argmax(axis&#x3D;1), average&#x3D;&#39;weighted&#39;)))</code></pre>\n<pre><code>F-score: 0.89\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from sklearn.metrics import classification_report\nprint(classification_report(y_test.argmax(axis&#x3D;1), predictions))</code></pre>\n<pre><code>              precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00         8\n           1       0.72      1.00      0.84        13\n           2       1.00      0.83      0.91        12\n           3       1.00      1.00      1.00        12\n           4       0.00      0.00      0.00        13\n           5       0.41      1.00      0.58         9\n           6       1.00      1.00      1.00        12\n           7       1.00      1.00      1.00        12\n           8       0.36      1.00      0.53         9\n           9       0.00      0.00      0.00        10\n          10       1.00      1.00      1.00        13\n          11       0.33      0.14      0.20         7\n          12       0.92      0.92      0.92        13\n          13       0.95      1.00      0.98        20\n          14       0.91      1.00      0.95        10\n          15       0.90      1.00      0.95        19\n          16       1.00      0.50      0.67        12\n          17       1.00      1.00      1.00        13\n          18       1.00      1.00      1.00        10\n          19       1.00      1.00      1.00        11\n          20       0.00      0.00      0.00         2\n          21       1.00      0.93      0.96        14\n          22       1.00      1.00      1.00        12\n          23       1.00      1.00      1.00        13\n          24       1.00      1.00      1.00         8\n          25       1.00      1.00      1.00        13\n\n    accuracy                           0.86       300\n   macro avg       0.79      0.82      0.79       300\nweighted avg       0.84      0.86      0.84       300\n</code></pre><p>​    </p>\n<pre><code>D:\\coder\\randomnumbers\\venv\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\nD:\\coder\\randomnumbers\\venv\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\nD:\\coder\\randomnumbers\\venv\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def predict_captcha(captcha_image, neural_network):\n    subimages &#x3D; segment_image(captcha_image)\n    predicted_word &#x3D; &quot;&quot;\n    for subimage in subimages:\n        subimage &#x3D; resize(subimage, (20, 20))\n        outputs &#x3D; net.activate(subimage.flatten())\n        prediction &#x3D; np.argmax(outputs)\n        predicted_word +&#x3D; letters[prediction]\n    return predicted_word</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">word &#x3D; &quot;GENE&quot;\ncaptcha &#x3D; create_captcha(word, shear&#x3D;0.2)\nprint(predict_captcha(captcha, net))</code></pre>\n<pre><code>ANAA\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def test_prediction(word, net, shear&#x3D;0.2):\n    captcha &#x3D; create_captcha(word, shear&#x3D;shear)\n    prediction &#x3D; predict_captcha(captcha, net)\n    prediction &#x3D; prediction[:4]\n    return word &#x3D;&#x3D; prediction, word, prediction</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from nltk.corpus import words</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import nltk\n\n\n\nvalid_words &#x3D; [word.upper() for word in words.words() if len(word) &#x3D;&#x3D; 4]</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">num_correct &#x3D; 0\nnum_incorrect &#x3D; 0\nfor word in valid_words:\n    correct, word, prediction &#x3D; test_prediction(word, net, shear&#x3D;0.2)\n    if correct:\n        num_correct +&#x3D; 1\n    else:\n        num_incorrect +&#x3D; 1</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">print(&quot;Number correct is &#123;0&#125;&quot;.format(num_correct))\nprint(&quot;Number incorrect is &#123;0&#125;&quot;.format(num_incorrect))</code></pre>\n<pre><code>Number correct is 57\nNumber incorrect is 5456\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from sklearn.metrics import confusion_matrix\ncm &#x3D; confusion_matrix(np.argmax(y_test, axis&#x3D;1), predictions)</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">plt.figure(figsize&#x3D;(20,20))\nplt.imshow(cm, cmap&#x3D;&quot;Blues&quot;)</code></pre>\n<pre><code>&lt;matplotlib.image.AxesImage at 0x1b3ba7a4f40&gt;\n\n\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/073c0b14c1354724b2b59a6b9ae4e3f3.png)\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from nltk.metrics import edit_distance\nsteps &#x3D; edit_distance(&quot;STEP&quot;, &quot;STOP&quot;)\nprint(&quot;The number of steps needed is: &#123;0&#125;&quot;.format(steps))</code></pre>\n<pre><code>The number of steps needed is: 1\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def compute_distance(prediction, word):\n    return len(prediction) - sum(prediction[i] &#x3D;&#x3D; word[i] for i in range(len(prediction)))</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from operator import itemgetter\ndef improved_prediction(word, net, dictionary, shear&#x3D;0.2):\n    captcha &#x3D; create_captcha(word, shear&#x3D;shear)\n    prediction &#x3D; predict_captcha(captcha, net)\n    prediction &#x3D; prediction[:4]\n    if prediction not in dictionary:\n        distances &#x3D; sorted([(word, compute_distance(prediction, word))\n                            for word in dictionary],\n                           key&#x3D;itemgetter(1))\n        best_word &#x3D; distances[0]\n        prediction &#x3D; best_word[0]\n    return word &#x3D;&#x3D; prediction, word, prediction</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">num_correct &#x3D; 0\nnum_incorrect &#x3D; 0\nfor word in valid_words:\n    correct, word, prediction &#x3D; improved_prediction (word, net, valid_words, shear&#x3D;0.2)\n    if correct:\n        num_correct +&#x3D; 1\n    else:\n        num_incorrect +&#x3D; 1\nprint(&quot;Number correct is &#123;0&#125;&quot;.format(num_correct))\nprint(&quot;Number incorrect is &#123;0&#125;&quot;.format(num_incorrect))</code></pre>\n<pre><code>Number correct is 123\nNumber incorrect is 5390\n</code></pre><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"></code></pre>\n","text":"为熟悉jupyter，找了一本书练习。参考资料：《Python数据挖掘入门与实践》数据集： https://github.com/packtpublishing/learning-data-mining-with-python 第一行代码import numpy as np da...","link":"","photos":[],"count_time":{"symbolsCount":"47k","symbolsTime":"43 mins."},"categories":[{"name":"机器学习","slug":"机器学习","count":9,"path":"api/categories/机器学习.json"}],"tags":[{"name":"数据挖掘","slug":"数据挖掘","count":2,"path":"api/tags/数据挖掘.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">第一行代码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">分类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%91%E9%82%BB\"><span class=\"toc-text\">近邻</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E7%9B%AE%E5%BD%95%E4%BD%8D%E7%BD%AE\"><span class=\"toc-text\">主目录位置</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90\"><span class=\"toc-text\">电影推荐</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">完整代码</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%89%B9%E5%BE%81%E6%8A%BD%E5%8F%96\"><span class=\"toc-text\">特征抽取</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86\"><span class=\"toc-text\">第一部分</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81-1\"><span class=\"toc-text\">完整代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86\"><span class=\"toc-text\">第二部分</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%A0%B4%E8%A7%A3%E9%AA%8C%E8%AF%81%E7%A0%81\"><span class=\"toc-text\">用神经网络破解验证码</span></a></li></ol>","author":{"name":"Algernon","slug":"blog-author","avatar":"https://user-images.githubusercontent.com/54904760/224857900-b2e8457c-43d2-46b7-901c-6c770f24bbad.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}},"mapped":true,"prev_post":{"title":"【GO语言编程】（四）","uid":"5f49d908c20f45931c28cee8b97efd48","slug":"GO4","date":"2022-11-03T14:57:49.000Z","updated":"2022-11-08T15:50:55.385Z","comments":true,"path":"api/articles/GO4.json","keywords":null,"cover":[],"text":"http编程 package main import ( &quot;fmt&quot; &quot;net&#x2F;http&quot; ) func main() &#123; &#x2F;&#x2F;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F...","link":"","photos":[],"count_time":{"symbolsCount":"57k","symbolsTime":"51 mins."},"categories":[{"name":"编程语言","slug":"编程语言","count":13,"path":"api/categories/编程语言.json"}],"tags":[{"name":"GO","slug":"GO","count":4,"path":"api/tags/GO.json"}],"author":{"name":"Algernon","slug":"blog-author","avatar":"https://user-images.githubusercontent.com/54904760/224857900-b2e8457c-43d2-46b7-901c-6c770f24bbad.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}}},"next_post":{"title":"【GO语言编程】（三）","uid":"424355acc1981b780ee62e0097527e8c","slug":"GO3","date":"2022-11-03T14:55:49.000Z","updated":"2022-11-08T15:50:38.599Z","comments":true,"path":"api/articles/GO3.json","keywords":null,"cover":[],"text":"方法方法** 其实就是一个函数，在 func 这个关键字和方法名中间加入了一个特殊的接收器类型。接收器可以是结构体类型或者是非结构体类型。接收器是可以在方法的内部访问的。 GO func (t Type) methodName(parameterList) returnList&...","link":"","photos":[],"count_time":{"symbolsCount":"54k","symbolsTime":"49 mins."},"categories":[{"name":"编程语言","slug":"编程语言","count":13,"path":"api/categories/编程语言.json"}],"tags":[{"name":"GO","slug":"GO","count":4,"path":"api/tags/GO.json"}],"author":{"name":"Algernon","slug":"blog-author","avatar":"https://user-images.githubusercontent.com/54904760/224857900-b2e8457c-43d2-46b7-901c-6c770f24bbad.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}}}}