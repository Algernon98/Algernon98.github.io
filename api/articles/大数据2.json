{"title":"【大数据基础】Linux常用命令","uid":"6b74fce8d05b74231edb685307366d2f","slug":"大数据2","date":"2023-02-20T13:50:49.000Z","updated":"2023-04-04T02:32:55.003Z","comments":true,"path":"api/articles/大数据2.json","keywords":null,"cover":[],"content":"<p>参考资料：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://www.runoob.com/w3cnote/linux-common-command-2.html\">https://www.runoob.com/w3cnote/linux-common-command-2.html</a></p></blockquote>\n<h3 id=\"1、ls命令\"><a href=\"#1、ls命令\" class=\"headerlink\" title=\"1、ls命令\"></a>1、ls命令</h3><p>就是 list 的缩写，通过 ls 命令不仅可以查看 linux 文件夹包含的文件，而且可以查看文件权限(包括目录、文件夹、文件权限)查看目录信息等等。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ls -a 列出目录所有文件，包含以.开始的隐藏文件\nls -A 列出除.及..的其它文件\nls -r 反序排列\nls -t 以文件修改时间排序\nls -S 以文件大小排序\nls -h 以易读大小显示\nls -l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/5f0540a1002340708d40fb7037a9a47b.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/c43d12d0cf7a4eadb6668a190dc40627.png\" alt=\"在这里插入图片描述\"></p>\n<p>(1) 按易读方式按时间反序排序，并显示文件详细信息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ls -lhrt</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/fa03a1f7affc4bd68ef8652f4cce0dad.png\" alt=\"在这里插入图片描述\"></p>\n<p>(2) 按大小反序显示文件详细信息</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">ls -lrS</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/af14f101f4f8431489602b16ae9adac4.png\" alt=\"在这里插入图片描述\"></p>\n<p>(3)列出当前目录中所有以”t”开头的目录的详细内容</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">ls -l t*</code></pre>\n<p>(4) 列出文件绝对路径（不包含隐藏文件）</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">ls | sed &quot;s:^:&#96;pwd&#96;&#x2F;:&quot;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/ef8b5d174dd045ff8247b2e808b550e3.png\" alt=\"在这里插入图片描述\"></p>\n<p>(5) 列出文件绝对路径（包含隐藏文件）</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">find $pwd -maxdepth 1 | xargs ls -ld</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/7490fc5c84a341d48633cac789f16bad.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"2、cd-命令\"><a href=\"#2、cd-命令\" class=\"headerlink\" title=\"2、cd 命令\"></a>2、cd 命令</h3><p>cd(changeDirectory) 命令语法：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">cd [目录名]</code></pre>\n<p>说明：切换当前目录至 dirName。</p>\n<p>实例：</p>\n<p>（1）进入要目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cd &#x2F;</code></pre>\n<p>（2）进入 “home” 目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cd ~</code></pre>\n<p>（3）进入上一次工作路径</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cd -</code></pre>\n<p>（4）把上个命令的参数作为cd参数使用。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cd !$</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/2d6537a84b94422e921a41a3877df88c.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"3、pwd-命令\"><a href=\"#3、pwd-命令\" class=\"headerlink\" title=\"3、pwd 命令\"></a>3、pwd 命令</h3><p>pwd 命令用于查看当前工作目录路径。</p>\n<p>实例：</p>\n<p>（1）查看当前路径</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pwd</code></pre>\n<p>（2）查看软链接的实际路径</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pwd -P</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/1817d987295d4b628cfcf75debfc7e5e.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"4、mkdir-命令\"><a href=\"#4、mkdir-命令\" class=\"headerlink\" title=\"4、mkdir 命令\"></a>4、mkdir 命令</h3><p>mkdir 命令用于创建文件夹。<br>可用选项：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>-m: 对新建目录设置存取权限，也可以用 chmod 命令设置;<br>-p: 可以是一个路径名称。此时若路径中的某些目录尚不存在,加上此选项后，系统将自动建立好那些尚不在的目录，即一次可以建立多个目录。</p></blockquote>\n<p>实例：</p>\n<p>（1）当前工作目录下创建名为 t的文件夹</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mkdir t</code></pre>\n<p>（2）在 tmp 目录下创建路径为 test/t1/t 的目录，若不存在，则创建：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mkdir -p &#x2F;tmp&#x2F;test&#x2F;t1&#x2F;t</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/bffceeb71cde469ebe2d01d6c3f378be.png\" alt=\"在这里插入图片描述\"><br>注意，在这里要使用系统命令sudo</p>\n<h3 id=\"5、rm-命令\"><a href=\"#5、rm-命令\" class=\"headerlink\" title=\"5、rm 命令\"></a>5、rm 命令</h3><p>删除一个目录中的一个或多个文件或目录，如果没有使用 -r 选项，则 rm 不会删除目录。如果使用 rm 来删除文件，通常仍可以将该文件恢复原状。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rm [选项] 文件…</code></pre>\n<p>实例：</p>\n<p>（1）删除任何 .log 文件，删除前逐一询问确认：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rm -i *.log</code></pre>\n<p>（2）删除 test 子目录及子目录中所有档案删除，并且不用一一确认：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rm -rf test</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/7d2e24d7353745dfb927d5206828e3f9.png\" alt=\"在这里插入图片描述\"></p>\n<p>（3）删除以 -f 开头的文件</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">rm -- -f*</code></pre>\n<h3 id=\"6、rmdir-命令\"><a href=\"#6、rmdir-命令\" class=\"headerlink\" title=\"6、rmdir 命令\"></a>6、rmdir 命令</h3><p>从一个目录中删除一个或多个子目录项，删除某目录时也必须具有对其父目录的写权限。</p>\n<p>注意：不能删除非空目录</p>\n<p>实例：</p>\n<p>（1）当 parent 子目录被删除后使它也成为空目录的话，则顺便一并删除：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">rmdir -p parent&#x2F;child&#x2F;child11</code></pre>\n<h3 id=\"7、mv-命令\"><a href=\"#7、mv-命令\" class=\"headerlink\" title=\"7、mv 命令\"></a>7、mv 命令</h3><p>移动文件或修改文件名，根据第二参数类型（如目录，则移动文件；如为文件则重命令该文件）。</p>\n<p>当第二个参数为目录时，第一个参数可以是多个以空格分隔的文件或目录，然后移动第一个参数指定的多个文件到第二个参数指定的目录中。</p>\n<p>实例：</p>\n<p>（1）将文件 test.log 重命名为 test1.txt</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">mv test.log test1.txt</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/3b24af7e1834496b99390880fbc2af47.png\" alt=\"在这里插入图片描述\"></p>\n<p>（2）将文件 log1.txt,log2.txt,log3.txt 移动到根的 test3 目录中</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">mv llog1.txt log2.txt log3.txt &#x2F;test3</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/f328e358d87a4acf84a6d67153804dc6.png\" alt=\"在这里插入图片描述\"></p>\n<p>（3）将文件 file1 改名为 file2，如果 file2 已经存在，则询问是否覆盖</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">mv -i log1.txt log2.txt</code></pre>\n<p>（4）移动当前文件夹下的所有文件到上一级目录</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">mv * ..&#x2F;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/c631792dc66f4dfbae623aa8d3b7f471.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"8、cp-命令\"><a href=\"#8、cp-命令\" class=\"headerlink\" title=\"8、cp 命令\"></a>8、cp 命令</h3><p>将源文件复制至目标文件，或将多个源文件复制至目标目录。</p>\n<p>注意：命令行复制，如果目标文件已经存在会提示是否覆盖，而在 shell 脚本中，如果不加 -i 参数，则不会提示，而是直接覆盖！</p>\n<p>-i 提示<br>-r 复制目录及目录内所有项目<br>-a 复制的文件与原文件时间一样<br>实例：</p>\n<p>（1）复制 a.txt 到 test 目录下，保持原文件时间，如果原文件存在提示是否覆盖。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">cp -ai a.txt test</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/a53ff90c7e2741469462484892fc38a1.png\" alt=\"在这里插入图片描述\"></p>\n<p>（2）为 a.txt 建立一个链接（快捷方式）</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">cp -s a.txt link_a.txt</code></pre>\n<h3 id=\"9、cat-命令\"><a href=\"#9、cat-命令\" class=\"headerlink\" title=\"9、cat 命令\"></a>9、cat 命令</h3><p>cat 主要有三大功能：</p>\n<p>1.一次显示整个文件:</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">cat filename</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/8e2cda5294654308b69ca5f369eb3571.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/0200ca6348e748d0977603caa92bd8a9.png\" alt=\"在这里插入图片描述\"></p>\n<p>2.从键盘创建一个文件:</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">cat &gt; filename</code></pre>\n<p>只能创建新文件，不能编辑已有文件。</p>\n<p>3.将几个文件合并为一个文件:</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">cat file1 file2 &gt; file</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>-b 对非空输出行号<br>-n 输出所有行号</p></blockquote>\n<p>实例：</p>\n<p>（1）把 log2012.log 的文件内容加上行号后输入 log2013.log 这个文件里</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">cat -n log2012.log log2013.log</code></pre>\n<p>（2）把 log2012.log 和 log2013.log 的文件内容加上行号（空白行不加）之后将内容附加到 log.log 里</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">cat -b log2012.log log2013.log log.log</code></pre>\n<p>（3）使用 here doc 生成新文件</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">cat &gt;log.txt &lt;&lt;EOF\n&gt;Hello\n&gt;World\n&gt;PWD&#x3D;$(pwd)\n&gt;EOF\nls -l log.txt\ncat log.txt\nHello\nWorld\nPWD&#x3D;&#x2F;opt&#x2F;soft&#x2F;test</code></pre>\n<p>（4）反向列示</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">tac log.txt\nPWD&#x3D;&#x2F;opt&#x2F;soft&#x2F;test\nWorld\nHello</code></pre>\n<h3 id=\"10、more-命令\"><a href=\"#10、more-命令\" class=\"headerlink\" title=\"10、more 命令\"></a>10、more 命令</h3><p>功能类似于 cat, more 会以一页一页的显示方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示。</p>\n<p>命令参数：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">+n      从笫 n 行开始显示\n-n       定义屏幕大小为n行\n+&#x2F;pattern 在每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示 \n-c       从顶部清屏，然后显示\n-d       提示“Press space to continue，’q’ to quit（按空格键继续，按q键退出）”，禁用响铃功能\n-l        忽略Ctrl+l（换页）字符\n-p       通过清除窗口而不是滚屏来对文件进行换页，与-c选项相似\n-s       把连续的多个空行显示为一行\n-u       把文件内容中的下画线去掉</code></pre>\n<p>常用操作命令：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">Enter    向下 n 行，需要定义。默认为 1 行\nCtrl+F   向下滚动一屏\n空格键  向下滚动一屏\nCtrl+B  返回上一屏\n&#x3D;       输出当前行的行号\n:f     输出文件名和当前行的行号\nV      调用vi编辑器\n!命令   调用Shell，并执行命令\nq       退出more</code></pre>\n<p>实例：</p>\n<p>（1）显示文件中从第3行起的内容</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">more +3 text.txt</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/304ac3bf143444879d22092058e37284.png\" alt=\"在这里插入图片描述\"></p>\n<p>（2）在所列出文件目录详细信息，借助管道使每次显示 5 行</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">ls -l | more -5</code></pre>\n<p>按空格显示下 5 行。<br><img src=\"https://img-blog.csdnimg.cn/2b7fd48a577c442ca0e4aff866f47fd7.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"11、less-命令\"><a href=\"#11、less-命令\" class=\"headerlink\" title=\"11、less 命令\"></a>11、less 命令</h3><p>less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。</p>\n<p>常用命令参数：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">-i  忽略搜索时的大小写\n-N  显示每行的行号\n-o  &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来\n-s  显示连续空行为一行\n&#x2F;字符串：向下搜索“字符串”的功能\n?字符串：向上搜索“字符串”的功能\nn：重复前一个搜索（与 &#x2F; 或 ? 有关）\nN：反向重复前一个搜索（与 &#x2F; 或 ? 有关）\n-x &lt;数字&gt; 将“tab”键显示为规定的数字空格\nb  向后翻一页\nd  向后翻半页\nh  显示帮助界面\nQ  退出less 命令\nu  向前滚动半页\ny  向前滚动一行\n空格键 滚动一行\n回车键 滚动一页\n[pagedown]： 向下翻动一页\n[pageup]：   向上翻动一页</code></pre>\n<p>实例：</p>\n<p>（1）ps 查看进程信息并通过 less 分页显示</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">ps -aux | less -N</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/8db1b5209e0a4d60b25449fd7662b6b8.png\" alt=\"在这里插入图片描述\"></p>\n<p>（2）查看多个文件</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">less 1.log 2.log</code></pre>\n<p>可以使用 n 查看下一个，使用 p 查看前一个。</p>\n<h3 id=\"12、head-命令\"><a href=\"#12、head-命令\" class=\"headerlink\" title=\"12、head 命令\"></a>12、head 命令</h3><p>head 用来显示档案的开头至标准输出中，默认 head 命令打印其相应文件的开头 10 行。</p>\n<p>常用参数：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">-n&lt;行数&gt; 显示的行数（行数为复数表示从最后向前数）</code></pre>\n<p>实例：</p>\n<p>（1）显示 s.md 文件中前 20 行</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">head s.md -n 20</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/de423878243f4190bed1b2cc4e8ed202.png\" alt=\"在这里插入图片描述\"></p>\n<p>（2）显示 s.md 文件前 20 字节</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">head -c 20 s.md</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/949752e13f9243b4b916143bdd364cc1.png\" alt=\"在这里插入图片描述\"></p>\n<p>（3）显示 s.md最后 10 行</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">head -n -10 s.md</code></pre>\n<h3 id=\"13、tail-命令\"><a href=\"#13、tail-命令\" class=\"headerlink\" title=\"13、tail 命令\"></a>13、tail 命令</h3><p>用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件。</p>\n<p>常用参数：</p>\n<p>-f 循环读取（常用于查看递增的日志文件）<br>-n&lt;行数&gt; 显示行数（从后向前）<br>（1）循环读取逐渐增加的文件内容</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">ping 127.0.0.1 &gt; ping.log &amp;</code></pre>\n<p>后台运行：可使用 jobs -l 查看，也可使用 fg 将其移到前台运行。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">tail -f ping.log</code></pre>\n<p>（查看日志）</p>\n<h3 id=\"14、which-命令\"><a href=\"#14、which-命令\" class=\"headerlink\" title=\"14、which 命令\"></a>14、which 命令</h3><p>在 linux 要查找某个文件，但不知道放在哪里了，可以使用下面的一些命令来搜索：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">which     查看可执行文件的位置。\nwhereis 查看文件的位置。\nlocate  配合数据库查看文件位置。\nfind        实际搜寻硬盘查询文件名称。\nwhich 是在 PATH 就是指定的路径中，搜索某个系统命令的位置，并返回第一个搜索结果。使用 which 命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。</code></pre>\n<p>常用参数：</p>\n<p>-n 　指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。<br>实例：</p>\n<p>（1）查看 ls 命令是否存在，执行哪个</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">which ls</code></pre>\n<p>（2）查看 which</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">which which</code></pre>\n<p>（3）查看 cd</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">which cd（显示不存在，因为 cd 是内建命令，而 which 查找显示是 PATH 中的命令）</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/c5665c1b4b674454ab7426a7c5585d39.png\" alt=\"在这里插入图片描述\"></p>\n<p>查看当前 PATH 配置：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">echo $PATH</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/cd5bb270ad9545abac5826f5c48d8aba.png\" alt=\"在这里插入图片描述\"></p>\n<p>或使用 env 查看所有环境变量及对应值</p>\n<h3 id=\"15、whereis-命令\"><a href=\"#15、whereis-命令\" class=\"headerlink\" title=\"15、whereis 命令\"></a>15、whereis 命令</h3><p>whereis 命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。whereis 及 locate 都是基于系统内建的数据库进行搜索，因此效率很高，而find则是遍历硬盘查找文件。</p>\n<p>常用参数：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">-b   定位可执行文件。\n-m   定位帮助文件。\n-s   定位源代码文件。\n-u   搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件。</code></pre>\n<p>实例：</p>\n<p>（1）查找 locate 程序相关文件</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">whereis locate</code></pre>\n<p>（2）查找 locate 的源码文件</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">whereis -s locate</code></pre>\n<p>（3）查找 lcoate 的帮助文件</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">whereis -m locate</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/2e5c9f72269243b285600eec6c218b9b.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"16、locate-命令\"><a href=\"#16、locate-命令\" class=\"headerlink\" title=\"16、locate 命令\"></a>16、locate 命令</h3><p>locate 通过搜寻系统内建文档数据库达到快速找到档案，数据库由 updatedb 程序来更新，updatedb 是由 cron daemon 周期性调用的。默认情况下 locate 命令在搜寻数据库时比由整个由硬盘资料来搜寻资料来得快，但较差劲的是 locate 所找到的档案若是最近才建立或 刚更名的，可能会找不到，在内定值中，updatedb 每天会跑一次，可以由修改 crontab 来更新设定值 (etc/crontab)。</p>\n<p>locate 与 find 命令相似，可以使用如 *、? 等进行正则匹配查找</p>\n<p>常用参数：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">-l num（要显示的行数）\n-f   将特定的档案系统排除在外，如将proc排除在外\n-r   使用正则运算式做为寻找条件</code></pre>\n<p>实例：</p>\n<p>（1）查找和 pwd 相关的所有文件(文件名中包含 pwd）</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">locate pwd</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/a32af42811d841f38cee4fa52b4bd0c4.png\" alt=\"在这里插入图片描述\"></p>\n<p>（2）搜索 etc 目录下所有以 sh 开头的文件</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">locate &#x2F;etc&#x2F;sh</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/f9044dc776d9452fa315a6e8ebdf3636.png\" alt=\"在这里插入图片描述\"></p>\n<p>（3）查找 /var 目录下，以 reason 结尾的文件</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">locate -r &#39;^&#x2F;var.*reason$&#39;（其中.表示一个字符，*表示任务多个；.*表示任意多个字符）</code></pre>\n<h3 id=\"17、find-命令\"><a href=\"#17、find-命令\" class=\"headerlink\" title=\"17、find 命令\"></a>17、find 命令</h3><p>用于在文件树中查找文件，并作出相应的处理。</p>\n<p>命令格式：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">find pathname -options [-print -exec -ok ...]</code></pre>\n<p>命令参数：</p>\n<p>pathname: find命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录。<br>-print： find命令将匹配的文件输出到标准输出。<br>-exec： find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为’command’ {  } \\;，注意{   }和\\；之间的空格。<br>-ok： 和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。<br>命令选项：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">-name 按照文件名查找文件\n-perm 按文件权限查找文件\n-user 按文件属主查找文件\n-group  按照文件所属的组来查找文件。\n-type  查找某一类型的文件，诸如：\n   b - 块设备文件\n   d - 目录\n   c - 字符设备文件\n   l - 符号链接文件\n   p - 管道文件\n   f - 普通文件\n\n-size n :[c] 查找文件长度为n块文件，带有c时表文件字节大小\n-amin n   查找系统中最后N分钟访问的文件\n-atime n  查找系统中最后n*24小时访问的文件\n-cmin n   查找系统中最后N分钟被改变文件状态的文件\n-ctime n  查找系统中最后n*24小时被改变文件状态的文件\n-mmin n   查找系统中最后N分钟被改变文件数据的文件\n-mtime n  查找系统中最后n*24小时被改变文件数据的文件\n(用减号-来限定更改时间在距今n日以内的文件，而用加号+来限定更改时间在距今n日以前的文件。 )\n-maxdepth n 最大查找目录深度\n-prune 选项来指出需要忽略的目录。在使用-prune选项时要当心，因为如果你同时使用了-depth选项，那么-prune选项就会被find命令忽略\n-newer 如果希望查找更改时间比某个文件新但比另一个文件旧的所有文件，可以使用-newer选项</code></pre>\n<p>实例：</p>\n<p>（1）查找 48 小时内修改过的文件</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">find -atime -2</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/1dfc109d37b447a48c39ef55fc8e2412.png\" alt=\"在这里插入图片描述\"></p>\n<p>（2）在当前目录查找 以 .log 结尾的文件。 . 代表当前目录</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">find .&#x2F; -name &#39;*.log&#39;</code></pre>\n<p>（3）查找 /opt 目录下 权限为 777 的文件</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">find &#x2F;opt -perm 777</code></pre>\n<p>（4）查找大于 1K 的文件</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">find -size +1000c</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/cf74890731ba4da6ba8f52ada190c75c.png\" alt=\"在这里插入图片描述\"></p>\n<p>查找等于 1000 字符的文件</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">find -size 1000c </code></pre>\n<p>-exec 参数后面跟的是 command 命令，它的终止是以 ; 为结束标志的，所以这句命令后面的分号是不可缺少的，考虑到各个系统中分号会有不同的意义，所以前面加反斜杠。{} 花括号代表前面find查找出来的文件名。</p>\n<p>实例：</p>\n<p>（5）在当前目录中查找更改时间在10日以前的文件并删除它们(无提醒）</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">find . -type f -mtime +10 -exec rm -f &#123;&#125; \\;</code></pre>\n<p>（6）当前目录中查找所有文件名以.log结尾、更改时间在5日以上的文件，并删除它们，只不过在删除之前先给出提示。 按y键删除文件，按n键不删除</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">find . -name &#39;*.log&#39; mtime +5 -ok -exec rm &#123;&#125; \\;</code></pre>\n<p>（7）当前目录下查找文件名以 passwd 开头，内容包含 “pkg” 字符的文件</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">find . -f -name &#39;passwd*&#39; -exec grep &quot;pkg&quot; &#123;&#125; \\;</code></pre>\n<p>（8）用 exec 选项执行 cp 命令</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">find . -name &#39;*.log&#39; -exec cp &#123;&#125; test3 \\;</code></pre>\n<p>-xargs find 命令把匹配到的文件传递给 xargs 命令，而 xargs 命令每次只获取一部分文件而不是全部，不像 -exec 选项那样。这样它可以先处理最先获取的一部分文件，然后是下一批，并如此继续下去。</p>\n<p>实例：</p>\n<p>（9）查找当前目录下每个普通文件，然后使用 xargs 来判断文件类型</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">find . -type f -print | xargs file</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/c4bb8cdd5d524fd9b04d57a419e037c5.png\" alt=\"在这里插入图片描述\"></p>\n<p>（10）查找当前目录下所有以 js 结尾的并且其中包含 ‘editor’ 字符的普通文件</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">find . -type f -name &quot;*.js&quot; -exec grep -lF &#39;ueditor&#39; &#123;&#125; \\;\nfind -type f -name &#39;*.js&#39; | xargs grep -lF &#39;editor&#39;</code></pre>\n<p>（11）利用 xargs 执行 mv 命令</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">find . -name &quot;*.log&quot; | xargs -i mv &#123;&#125; test4</code></pre>\n<p>（12）用 grep 命令在当前目录下的所有普通文件中搜索 hostnames 这个词，并标出所在行：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">find . -name \\*(转义） -type f -print | xargs grep -n &#39;hostnames&#39;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/6b0ad397cc3d452f9ed9f37c3596e71f.png\" alt=\"在这里插入图片描述\"></p>\n<p>（13）查找当前目录中以一个小写字母开头，最后是 4 到 9 加上 .log 结束的文件：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">find . -name &#39;[a-z]*[4-9].log&#39; -print</code></pre>\n<p>（14）在 test 目录查找不在 test4 子目录查找</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">find test -path &#39;test&#x2F;test4&#39; -prune -o -print</code></pre>\n<p>（15）实例1：查找更改时间比文件 log2012.log新但比文件 log2017.log 旧的文件</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">find -newer log2012.log ! -newer log2017.log</code></pre>\n<p>使用 depth 选项：</p>\n<p>depth 选项可以使 find 命令向磁带上备份文件系统时，希望首先备份所有的文件，其次再备份子目录中的文件。</p>\n<p>实例：find 命令从文件系统的根目录开始，查找一个名为 CON.FILE 的文件。 它将首先匹配所有的文件然后再进入子目录中查找。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">find &#x2F; -name &quot;CON.FILE&quot; -depth -print</code></pre>\n<h3 id=\"18、chmod-命令\"><a href=\"#18、chmod-命令\" class=\"headerlink\" title=\"18、chmod 命令\"></a>18、chmod 命令</h3><p>用于改变 linux 系统文件或目录的访问权限。用它控制文件或目录的访问权限。该命令有两种用法。一种是包含字母和操作符表达式的文字设定法；另一种是包含数字的数字设定法。</p>\n<p>每一文件或目录的访问权限都有三组，每组用三位表示，分别为文件属主的读、写和执行权限；与属主同组的用户的读、写和执行权限；系统中其他用户的读、写和执行权限。可使用 ls -l test.txt 查找。</p>\n<p>以文件 log2012.log 为例：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">-rw-r--r-- 1 root root 296K 11-13 06:03 log2012.log</code></pre>\n<p>第一列共有 10 个位置，第一个字符指定了文件类型。在通常意义上，一个目录也是一个文件。如果第一个字符是横线，表示是一个非目录的文件。如果是 d，表示是一个目录。从第二个字符开始到第十个 9 个字符，3 个字符一组，分别表示了 3 组用户对文件或者目录的权限。权限字符用横线代表空许可，r 代表只读，w 代表写，x 代表可执行。</p>\n<p>常用参数：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">-c 当发生改变时，报告处理信息\n-R 处理指定目录以及其子目录下所有文件\n权限范围：\n\nu ：目录或者文件的当前的用户\ng ：目录或者文件的当前的群组\no ：除了目录或者文件的当前用户或群组之外的用户或者群组\na ：所有的用户及群组\n权限代号：\n\nr ：读权限，用数字4表示\nw ：写权限，用数字2表示\nx ：执行权限，用数字1表示\n- ：删除权限，用数字0表示\ns ：特殊权限</code></pre>\n<p>实例：</p>\n<p>（1）增加文件 s.md 所有用户可执行权限</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">chmod a+x s.md</code></pre>\n<p>（2）撤销原来所有的权限，然后使拥有者具有可读权限,并输出处理信息</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">chmod u&#x3D;r s.md -c</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/6dc7bcdf057f4d88b1ab22858768340a.png\" alt=\"在这里插入图片描述\"></p>\n<p>（3）给 file 的属主分配读、写、执行(7)的权限，给file的所在组分配读、执行(5)的权限，给其他用户分配执行(1)的权限</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">chmod 751 t.log -c（或者：chmod u&#x3D;rwx,g&#x3D;rx,o&#x3D;x t.log -c)</code></pre>\n<p>（4）将 test 目录及其子目录所有文件添加可读权限</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">chmod u+r,g+r,o+r -R text&#x2F; -c</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/4a06162b847844f49bfe37170b625368.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"19、tar-命令\"><a href=\"#19、tar-命令\" class=\"headerlink\" title=\"19、tar 命令\"></a>19、tar 命令</h3><p>用来压缩和解压文件。tar 本身不具有压缩功能，只具有打包功能，有关压缩及解压是调用其它的功能来完成。</p>\n<p>弄清两个概念：打包和压缩。打包是指将一大堆文件或目录变成一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件</p>\n<p>常用参数：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">-c 建立新的压缩文件\n-f 指定压缩文件\n-r 添加文件到已经压缩文件包中\n-u 添加改了和现有的文件到压缩包中\n-x 从压缩包中抽取文件\n-t 显示压缩文件中的内容\n-z 支持gzip压缩\n-j 支持bzip2压缩\n-Z 支持compress解压文件\n-v 显示操作过程</code></pre>\n<p>有关 gzip 及 bzip2 压缩:</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">gzip 实例：压缩 gzip fileName .tar.gz 和.tgz  解压：gunzip filename.gz 或 gzip -d filename.gz\n          对应：tar zcvf filename.tar.gz     tar zxvf filename.tar.gz\n\nbz2实例：压缩 bzip2 -z filename .tar.bz2 解压：bunzip filename.bz2或bzip -d filename.bz2\n       对应：tar jcvf filename.tar.gz         解压：tar jxvf filename.tar.bz2</code></pre>\n<p>实例：</p>\n<p>（1）将文件全部打包成 tar 包</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">tar -cvf log.tar 1.log,2.log 或tar -cvf log.*</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/6ac756c879cb41e1a25b8674454dfff3.png\" alt=\"在这里插入图片描述\"></p>\n<p>（2）将 /etc 下的所有文件及目录打包到指定目录，并使用 gz 压缩</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">tar -zcvf &#x2F;tmp&#x2F;etc.tar.gz &#x2F;etc</code></pre>\n<p>（3）查看刚打包的文件内容（一定加z，因为是使用 gzip 压缩的）</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">tar -ztvf &#x2F;tmp&#x2F;etc.tar.gz</code></pre>\n<p>（4）要压缩打包 /home, /etc ，但不要 /home/dmtsai</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">tar --exclude &#x2F;home&#x2F;dmtsai -zcvf myfile.tar.gz &#x2F;home&#x2F;* &#x2F;etc</code></pre>\n<h3 id=\"20、chown-命令\"><a href=\"#20、chown-命令\" class=\"headerlink\" title=\"20、chown 命令\"></a>20、chown 命令</h3><p>chown 将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户 ID；组可以是组名或者组 ID；文件是以空格分开的要改变权限的文件列表，支持通配符。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">-c 显示更改的部分的信息\n-R 处理指定目录及子目录</code></pre>\n<p>实例：</p>\n<p>（1）改变拥有者和群组 并显示改变信息</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">chown -c mail:mail log2012.log</code></pre>\n<p>（2）改变文件群组</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">chown -c :mail t.log</code></pre>\n<p>（3）改变文件夹及子文件目录属主及属组为 mail</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">chown -cR mail: test&#x2F;</code></pre>\n<h3 id=\"21、df-命令\"><a href=\"#21、df-命令\" class=\"headerlink\" title=\"21、df 命令\"></a>21、df 命令</h3><p>显示磁盘空间使用情况。获取硬盘被占用了多少空间，目前还剩下多少空间等信息，如果没有文件名被指定，则所有当前被挂载的文件系统的可用空间将被显示。默认情况下，磁盘空间将以 1KB 为单位进行显示，除非环境变量 POSIXLY_CORRECT 被指定，那样将以512字节为单位进行显示：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">-a 全部文件系统列表\n-h 以方便阅读的方式显示信息\n-i 显示inode信息\n-k 区块为1024字节\n-l 只显示本地磁盘\n-T 列出文件系统类型</code></pre>\n<p>实例：</p>\n<p>（1）显示磁盘使用情况</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">df -l</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/a60b743fbdec4142b4b706bcab4bd5fe.png\" alt=\"在这里插入图片描述\"></p>\n<p>（2）以易读方式列出所有文件系统及其类型</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">df -haT</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/93b8f6da6cdc4d7ead00cf2998825214.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"22、du-命令\"><a href=\"#22、du-命令\" class=\"headerlink\" title=\"22、du 命令\"></a>22、du 命令</h3><p>du 命令也是查看使用空间的，但是与 df 命令不同的是 Linux du 命令是对文件和目录磁盘使用的空间的查看：</p>\n<p>命令格式：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">du [选项] [文件]</code></pre>\n<p>常用参数：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">-a 显示目录中所有文件大小\n-k 以KB为单位显示文件大小\n-m 以MB为单位显示文件大小\n-g 以GB为单位显示文件大小\n-h 以易读方式显示文件大小\n-s 仅显示总计\n-c或--total  除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和</code></pre>\n<p>实例：</p>\n<p>（1）以易读方式显示文件夹内及子文件夹大小</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">du -h scf&#x2F;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/a444b4bb04f4413c8e6d3c434dbafd50.png\" alt=\"在这里插入图片描述\"></p>\n<p>（2）以易读方式显示文件夹内所有文件大小</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">du -ah scf&#x2F;</code></pre>\n<p>（3）显示几个文件或目录各自占用磁盘空间的大小，还统计它们的总和</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">du -hc test&#x2F; scf&#x2F;</code></pre>\n<p>（4）输出当前目录下各个子目录所使用的空间</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">du -hc --max-depth&#x3D;1 scf&#x2F;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/7d142a75fbc044399a3d20cf7f8ab5f7.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"23、ln-命令\"><a href=\"#23、ln-命令\" class=\"headerlink\" title=\"23、ln 命令\"></a>23、ln 命令</h3><p>功能是为文件在另外一个位置建立一个同步的链接，当在不同目录需要该问题时，就不需要为每一个目录创建同样的文件，通过 ln 创建的链接（link）减少磁盘占用量。</p>\n<p>链接分类：软件链接及硬链接</p>\n<p>软链接：</p>\n<p>1.软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式<br>2.软链接可以 跨文件系统 ，硬链接不可以<br>3.软链接可以对一个不存在的文件名进行链接<br>4.软链接可以对目录进行链接<br>硬链接:</p>\n<p>1.硬链接，以文件副本的形式存在。但不占用实际空间。<br>2.不允许给目录创建硬链接<br>3.硬链接只有在同一个文件系统中才能创建<br>需要注意：</p>\n<p>第一：ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化；<br>第二：ln的链接又分软链接和硬链接两种，软链接就是ln –s 源文件 目标文件，它只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，硬链接 ln 源文件 目标文件，没有参数-s， 它会在你选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化。<br>第三：ln指令用在链接文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则会把前面指定的所有文件或目录复制到该目录中。若同时指定多个文件或目录，且最后的目的地并非是一个已存在的目录，则会出现错误信息。<br>常用参数：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">-b 删除，覆盖以前建立的链接\n-s 软链接（符号链接）\n-v 显示详细处理过程</code></pre>\n<p>实例：</p>\n<p>（1）给文件创建软链接，并显示操作信息</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">ln -sv source.log link.log</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/112a6fcb72d84905b5dd3241bca002db.png\" alt=\"在这里插入图片描述\"></p>\n<p>（2）给文件创建硬链接，并显示操作信息</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">ln -v source.log link1.log</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/b2cf06960f9f41a7a5efb8fc87228a83.png\" alt=\"在这里插入图片描述\"></p>\n<p>（3）给目录创建软链接</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">ln -sv &#x2F;opt&#x2F;soft&#x2F;test&#x2F;test3 &#x2F;opt&#x2F;soft&#x2F;test&#x2F;test5</code></pre>\n<h3 id=\"24、date-命令\"><a href=\"#24、date-命令\" class=\"headerlink\" title=\"24、date 命令\"></a>24、date 命令</h3><p>显示或设定系统的日期与时间。</p>\n<p>命令参数：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">-d&lt;字符串&gt; 　显示字符串所指的日期与时间。字符串前后必须加上双引号。\n-s&lt;字符串&gt; 　根据字符串来设置日期与时间。字符串前后必须加上双引号。\n-u 　显示GMT。\n%H 小时(00-23)\n%I 小时(00-12)\n%M 分钟(以00-59来表示)\n%s 总秒数。起算时间为1970-01-01 00:00:00 UTC。\n%S 秒(以本地的惯用法来表示)\n%a 星期的缩写。\n%A 星期的完整名称。\n%d 日期(以01-31来表示)。\n%D 日期(含年月日)。\n%m 月份(以01-12来表示)。\n%y 年份(以00-99来表示)。\n%Y 年份(以四位数来表示)。</code></pre>\n<p>实例：</p>\n<p>（1）显示下一天</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">date +%Y%m%d --date&#x3D;&quot;+1 day&quot;  &#x2F;&#x2F;显示下一天的日期</code></pre>\n<p>（2）-d参数使用</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">date -d &quot;nov 22&quot;  今年的 11 月 22 日是星期三\ndate -d &#39;2 weeks&#39; 2周后的日期\ndate -d &#39;next monday&#39; (下周一的日期)\ndate -d next-day +%Y%m%d（明天的日期）或者：date -d tomorrow +%Y%m%d\ndate -d last-day +%Y%m%d(昨天的日期) 或者：date -d yesterday +%Y%m%d\ndate -d last-month +%Y%m(上个月是几月)\ndate -d next-month +%Y%m(下个月是几月)</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/fca6472702824e0ea23af7e209bbcef8.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"25、cal-命令\"><a href=\"#25、cal-命令\" class=\"headerlink\" title=\"25、cal 命令\"></a>25、cal 命令</h3><p>可以用户显示公历（阳历）日历如只有一个参数，则表示年份(1-9999)，如有两个参数，则表示月份和年份：</p>\n<p>常用参数：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">-3 显示前一月，当前月，后一月三个月的日历\n-m 显示星期一为第一列\n-j 显示在当前年第几天\n-y [year]显示当前年[year]份的日历</code></pre>\n<p>实例：</p>\n<p>（1）显示指定年月日期</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">cal 9 2012</code></pre>\n<p>（2）显示2013年每个月日历</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">cal -y 2013</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/5d9b1e14979b49e2870893367ffad8aa.png\" alt=\"在这里插入图片描述\"></p>\n<p>（3）将星期一做为第一列,显示前中后三月</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">cal -3m</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/3a06a0339c3a471f92fd2bdb5f005487.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"26、grep-命令\"><a href=\"#26、grep-命令\" class=\"headerlink\" title=\"26、grep 命令\"></a>26、grep 命令</h3><p>强大的文本搜索命令，grep(Global Regular Expression Print) 全局正则表达式搜索。</p>\n<p>grep 的工作方式是这样的，它在一个或多个文件中搜索字符串模板。如果模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响原文件内容。</p>\n<p>命令格式：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">grep [option] pattern file|dir</code></pre>\n<p>常用参数：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">-A n --after-context显示匹配字符后n行\n-B n --before-context显示匹配字符前n行\n-C n --context 显示匹配字符前后n行\n-c --count 计算符合样式的列数\n-i 忽略大小写\n-l 只列出文件内容符合指定的样式的文件名称\n-f 从文件中读取关键词\n-n 显示匹配内容的所在文件中行数\n-R 递归查找文件夹</code></pre>\n<p>grep 的规则表达式:</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">^  #锚定行的开始 如：&#39;^grep&#39;匹配所有以grep开头的行。 \n$  #锚定行的结束 如：&#39;grep$&#39;匹配所有以grep结尾的行。 \n.  #匹配一个非换行符的字符 如：&#39;gr.p&#39;匹配gr后接一个任意字符，然后是p。  \n*  #匹配零个或多个先前字符 如：&#39;*grep&#39;匹配所有一个或多个空格后紧跟grep的行。\n.*   #一起用代表任意字符。  \n[]   #匹配一个指定范围内的字符，如&#39;[Gg]rep&#39;匹配Grep和grep。 \n[^]  #匹配一个不在指定范围内的字符，如：&#39;[^A-FH-Z]rep&#39;匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。  \n\\(..\\)  #标记匹配字符，如&#39;\\(love\\)&#39;，love被标记为1。   \n\\&lt;      #锚定单词的开始，如:&#39;\\&lt;grep&#39;匹配包含以grep开头的单词的行。\n\\&gt;      #锚定单词的结束，如&#39;grep\\&gt;&#39;匹配包含以grep结尾的单词的行。\nx\\&#123;m\\&#125;  #重复字符x，m次，如：&#39;0\\&#123;5\\&#125;&#39;匹配包含5个o的行。 \nx\\&#123;m,\\&#125;  #重复字符x,至少m次，如：&#39;o\\&#123;5,\\&#125;&#39;匹配至少有5个o的行。  \nx\\&#123;m,n\\&#125;  #重复字符x，至少m次，不多于n次，如：&#39;o\\&#123;5,10\\&#125;&#39;匹配5--10个o的行。  \n\\w    #匹配文字和数字字符，也就是[A-Za-z0-9]，如：&#39;G\\w*p&#39;匹配以G后跟零个或多个文字或数字字符，然后是p。  \n\\W    #\\w的反置形式，匹配一个或多个非单词字符，如点号句号等。  \n\\b    #单词锁定符，如: &#39;\\bgrep\\b&#39;只匹配grep。</code></pre>\n<p>实例：</p>\n<p>（1）查找指定进程</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">ps -ef | grep svn</code></pre>\n<p>（2）查找指定进程个数</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">ps -ef | grep svn -c</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/c346adea495b4c7c97ab0df75fd752ca.png\" alt=\"在这里插入图片描述\"></p>\n<p>（3）从文件中读取关键词</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">cat test1.txt | grep -f key.log</code></pre>\n<p>（4）从文件夹中递归查找以grep开头的行，并只列出文件</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">grep -lR &#39;^grep&#39; &#x2F;tmp</code></pre>\n<p>（5）查找非x开关的行内容</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">grep &#39;^[^x]&#39; test.txt</code></pre>\n<p>（6）显示包含 ed 或者 at 字符的内容行</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">grep -E &#39;ed|at&#39; test.txt</code></pre>\n<h3 id=\"27、wc-命令\"><a href=\"#27、wc-命令\" class=\"headerlink\" title=\"27、wc 命令\"></a>27、wc 命令</h3><p>wc(word count)功能为统计指定的文件中字节数、字数、行数，并将统计结果输出</p>\n<p>命令格式：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">wc [option] file..</code></pre>\n<p>命令参数：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">-c 统计字节数\n-l 统计行数\n-m 统计字符数\n-w 统计词数，一个字被定义为由空白、跳格或换行字符分隔的字符串</code></pre>\n<p>实例：</p>\n<p>（1）查找文件的 行数 单词数 字节数 文件名</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">wc text.txt</code></pre>\n<p>结果：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">7     8     70     test.txt</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/002ed0f5e54243df94a286308e799a01.png\" alt=\"在这里插入图片描述\"></p>\n<p>（2）统计输出结果的行数</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">cat test.txt | wc -l</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/a1192553bcd342768675efd37a368feb.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"28、ps-命令\"><a href=\"#28、ps-命令\" class=\"headerlink\" title=\"28、ps 命令\"></a>28、ps 命令</h3><p>ps(process status)，用来查看当前运行的进程状态，一次性查看，如果需要动态连续结果使用 top</p>\n<p>linux上进程有5种状态:</p>\n<ol>\n<li>运行(正在运行或在运行队列中等待)</li>\n<li>中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)</li>\n<li>不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)</li>\n<li>僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放)</li>\n<li>停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行)<br>ps 工具标识进程的5种状态码:</li>\n</ol>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">D 不可中断 uninterruptible sleep (usually IO)\nR 运行 runnable (on run queue)\nS 中断 sleeping\nT 停止 traced or stopped\nZ 僵死 a defunct (”zombie”) process</code></pre>\n<p>命令参数：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">-A 显示所有进程\na 显示所有进程\n-a 显示同一终端下所有进程\nc 显示进程真实名称\ne 显示环境变量\nf 显示进程间的关系\nr 显示当前终端运行的进程\n-aux 显示所有包含其它使用的进程</code></pre>\n<p>实例：</p>\n<p>（1）显示当前所有进程环境变量及进程间关系</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">ps -ef</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/ec38eb9d49c04e0ea38cb592ff8b959f.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/65b5d013596f4831b90ba66199223f5c.png\" alt=\"在这里插入图片描述\"></p>\n<p>（2）显示当前所有进程</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">ps -A</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/1e7a26faec3c40bf8ca8913f12034c40.png\" alt=\"在这里插入图片描述\"></p>\n<p>（3）与grep联用查找某进程</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">ps -aux | grep apache</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/8fe5ea401eb64d119bac5a2e88da1381.png\" alt=\"在这里插入图片描述\"></p>\n<p>（4）找出与 cron 与 syslog 这两个服务有关的 PID 号码</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">ps aux | grep &#39;(cron|syslog)&#39;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/db12451104aa4865be2da7534fc19b3c.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"29、top-命令\"><a href=\"#29、top-命令\" class=\"headerlink\" title=\"29、top 命令\"></a>29、top 命令</h3><p>显示当前系统正在执行的进程的相关信息，包括进程 ID、内存占用率、CPU 占用率等</p>\n<p>常用参数：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">-c 显示完整的进程命令\n-s 保密模式\n-p &lt;进程号&gt; 指定进程显示\n-n &lt;次数&gt;循环显示次数</code></pre>\n<p>实例：</p>\n<p>（1）</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">top - 14:06:23 up 70 days, 16:44,  2 users,  load average: 1.25, 1.32, 1.35\nTasks: 206 total,   1 running, 205 sleeping,   0 stopped,   0 zombie\nCpu(s):  5.9%us,  3.4%sy,  0.0%ni, 90.4%id,  0.0%wa,  0.0%hi,  0.2%si,  0.0%st\nMem:  32949016k total, 14411180k used, 18537836k free,   169884k buffers\nSwap: 32764556k total,        0k used, 32764556k free,  3612636k cached\nPID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND  \n28894 root      22   0 1501m 405m  10m S 52.2  1.3   2534:16 java  </code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/072a959f27b546f6879ce2bf7b66b8c2.png\" alt=\"在这里插入图片描述\"></p>\n<p>前五行是当前系统情况整体的统计信息区。</p>\n<p>第一行，任务队列信息，同 uptime 命令的执行结果，具体参数说明情况如下：</p>\n<p>14:06:23 — 当前系统时间</p>\n<p>up 70 days, 16:44 — 系统已经运行了70天16小时44分钟（在这期间系统没有重启过的吆！）</p>\n<p>2 users — 当前有2个用户登录系统</p>\n<p>load average: 1.15, 1.42, 1.44 — load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况。</p>\n<p>load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了。</p>\n<p>第二行，Tasks — 任务（进程），具体信息说明如下：</p>\n<p>系统现在共有206个进程，其中处于运行中的有1个，205个在休眠（sleep），stoped状态的有0个，zombie状态（僵尸）的有0个。</p>\n<p>第三行，cpu状态信息，具体属性说明如下：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">5.9%us — 用户空间占用CPU的百分比。\n3.4% sy — 内核空间占用CPU的百分比。\n0.0% ni — 改变过优先级的进程占用CPU的百分比\n90.4% id — 空闲CPU百分比\n0.0% wa — IO等待占用CPU的百分比\n0.0% hi — 硬中断（Hardware IRQ）占用CPU的百分比\n0.2% si — 软中断（Software Interrupts）占用CPU的百分比</code></pre>\n<p>备注：在这里CPU的使用比率和windows概念不同，需要理解linux系统用户空间和内核空间的相关知识！</p>\n<p>第四行，内存状态，具体信息如下：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">32949016k total — 物理内存总量（32GB）\n14411180k used — 使用中的内存总量（14GB）\n18537836k free — 空闲内存总量（18GB）\n169884k buffers — 缓存的内存量 （169M）</code></pre>\n<p>第五行，swap交换分区信息，具体信息说明如下：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">32764556k total — 交换区总量（32GB）\n0k used — 使用的交换区总量（0K）\n32764556k free — 空闲交换区总量（32GB）\n3612636k cached — 缓冲的交换区总量（3.6GB）</code></pre>\n<p>第六行，空行。</p>\n<p>第七行以下：各进程（任务）的状态监控，项目列信息说明如下：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">PID — 进程id\nUSER — 进程所有者\nPR — 进程优先级\nNI — nice值。负值表示高优先级，正值表示低优先级\nVIRT — 进程使用的虚拟内存总量，单位kb。VIRT&#x3D;SWAP+RES\nRES — 进程使用的、未被换出的物理内存大小，单位kb。RES&#x3D;CODE+DATA\nSHR — 共享内存大小，单位kb\nS — 进程状态。D&#x3D;不可中断的睡眠状态 R&#x3D;运行 S&#x3D;睡眠 T&#x3D;跟踪&#x2F;停止 Z&#x3D;僵尸进程\n%CPU — 上次更新到现在的CPU时间占用百分比\n%MEM — 进程使用的物理内存百分比\nTIME+ — 进程使用的CPU时间总计，单位1&#x2F;100秒\nCOMMAND — 进程名称（命令名&#x2F;命令行）</code></pre>\n<p>top 交互命令</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">h 显示top交互命令帮助信息\nc 切换显示命令名称和完整命令行\nm 以内存使用率排序\nP 根据CPU使用百分比大小进行排序\nT 根据时间&#x2F;累计时间进行排序\nW 将当前设置写入~&#x2F;.toprc文件中\no或者O 改变显示项目的顺序</code></pre>\n<h3 id=\"30、kill-命令\"><a href=\"#30、kill-命令\" class=\"headerlink\" title=\"30、kill 命令\"></a>30、kill 命令</h3><p>发送指定的信号到相应进程。不指定型号将发送SIGTERM（15）终止指定进程。如果任无法终止该程序可用”-KILL” 参数，其发送的信号为SIGKILL(9) ，将强制结束进程，使用ps命令或者jobs 命令可以查看进程号。root用户将影响用户的进程，非root用户只能影响自己的进程。</p>\n<p>常用参数：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">-l  信号，若果不加信号的编号参数，则使用“-l”参数会列出全部的信号名称\n-a  当处理当前进程时，不限制命令名和进程号的对应关系\n-p  指定kill 命令只打印相关进程的进程号，而不发送任何信号\n-s  指定发送信号\n-u  指定用户</code></pre>\n<p>实例：</p>\n<p>（1）先使用ps查找进程pro1，然后用kill杀掉</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">kill -9 $(ps -ef | grep pro1)</code></pre>\n<h3 id=\"31、free-命令\"><a href=\"#31、free-命令\" class=\"headerlink\" title=\"31、free 命令\"></a>31、free 命令</h3><p>显示系统内存使用情况，包括物理内存、交互区内存(swap)和内核缓冲区内存。</p>\n<p>命令参数：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">-b 以Byte显示内存使用情况\n-k 以kb为单位显示内存使用情况\n-m 以mb为单位显示内存使用情况\n-g 以gb为单位显示内存使用情况\n-s&lt;间隔秒数&gt; 持续显示内存\n-t 显示内存使用总合</code></pre>\n<p>实例：</p>\n<p>（1）显示内存使用情况</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">free\nfree -k\nfree -m</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/d0005057f41d4ac991d6213386c00e1b.png\" alt=\"在这里插入图片描述\"></p>\n<p>（2）以总和的形式显示内存的使用信息</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">free -t</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/7839ea4baabc4315ae186112cfff1984.png\" alt=\"在这里插入图片描述\"></p>\n<p>（3）周期性查询内存使用情况</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">free -s 10</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/90386798012b4e968b5bf2b32f6076ec.png\" alt=\"在这里插入图片描述\"></p>\n","text":"参考资料： https://www.runoob.com/w3cnote/linux-common-command-2.html 1、ls命令就是 list 的缩写，通过 ls 命令不仅可以查看 linux 文件夹包含的文件，而且可以查看文件权限(包括目录、文件夹、文件权限)查...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[{"name":"信管","slug":"信管","count":19,"path":"api/categories/信管.json"}],"tags":[{"name":"大数据","slug":"大数据","count":7,"path":"api/tags/大数据.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81ls%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">1、ls命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81cd-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">2、cd 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81pwd-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">3、pwd 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81mkdir-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">4、mkdir 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%E3%80%81rm-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">5、rm 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6%E3%80%81rmdir-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">6、rmdir 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7%E3%80%81mv-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">7、mv 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8%E3%80%81cp-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">8、cp 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9%E3%80%81cat-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">9、cat 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10%E3%80%81more-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">10、more 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11%E3%80%81less-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">11、less 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12%E3%80%81head-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">12、head 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13%E3%80%81tail-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">13、tail 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14%E3%80%81which-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">14、which 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15%E3%80%81whereis-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">15、whereis 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#16%E3%80%81locate-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">16、locate 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#17%E3%80%81find-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">17、find 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#18%E3%80%81chmod-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">18、chmod 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#19%E3%80%81tar-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">19、tar 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#20%E3%80%81chown-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">20、chown 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#21%E3%80%81df-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">21、df 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#22%E3%80%81du-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">22、du 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#23%E3%80%81ln-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">23、ln 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#24%E3%80%81date-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">24、date 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#25%E3%80%81cal-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">25、cal 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#26%E3%80%81grep-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">26、grep 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#27%E3%80%81wc-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">27、wc 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#28%E3%80%81ps-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">28、ps 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#29%E3%80%81top-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">29、top 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#30%E3%80%81kill-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">30、kill 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#31%E3%80%81free-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">31、free 命令</span></a></li></ol>","author":{"name":"Algernon","slug":"blog-author","avatar":"https://user-images.githubusercontent.com/54904760/224857900-b2e8457c-43d2-46b7-901c-6c770f24bbad.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}},"mapped":true,"prev_post":{"title":"【大数据基础】Hadoop3.1.3安装教程","uid":"78b7ddde844e9e414cf17e82e5c26627","slug":"大数据3","date":"2023-02-27T13:50:49.000Z","updated":"2023-04-04T02:33:40.265Z","comments":true,"path":"api/articles/大数据3.json","keywords":null,"cover":[],"text":"来源： https://dblab.xmu.edu.cn/blog/2441/ 前言：重装解决一切bug！事实上，问题中的绝大部分衍生问题都可以通过重装解决。 实验内容创建Hadoop用户首先按 ctrl+alt+t 打开终端窗口，输入如下命令创建新用户 : sudo usera...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"信管","slug":"信管","count":19,"path":"api/categories/信管.json"}],"tags":[{"name":"大数据","slug":"大数据","count":7,"path":"api/tags/大数据.json"}],"author":{"name":"Algernon","slug":"blog-author","avatar":"https://user-images.githubusercontent.com/54904760/224857900-b2e8457c-43d2-46b7-901c-6c770f24bbad.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}}},"next_post":{"title":"【大数据基础】vmware+ununtu安装详细过程","uid":"742380d4c8e833aace283f6b8db25e56","slug":"大数据1","date":"2023-02-13T13:50:49.000Z","updated":"2023-04-04T02:25:22.653Z","comments":true,"path":"api/articles/大数据1.json","keywords":null,"cover":[],"text":"环境配置1. 虚拟机VMware下载与安装首先安装vmware workstation 密钥直接利用科技生成。检查vmware是否成功安装 2. VMware安装Ubuntu18.04 LTS在清华源镜像站找到合适版本的ubuntu联网安装需要一些时间，大致在一到两个小时。出现这...","link":"","photos":[],"count_time":{"symbolsCount":674,"symbolsTime":"1 mins."},"categories":[{"name":"信管","slug":"信管","count":19,"path":"api/categories/信管.json"}],"tags":[{"name":"大数据","slug":"大数据","count":7,"path":"api/tags/大数据.json"}],"author":{"name":"Algernon","slug":"blog-author","avatar":"https://user-images.githubusercontent.com/54904760/224857900-b2e8457c-43d2-46b7-901c-6c770f24bbad.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}}}}