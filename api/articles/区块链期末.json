{"title":"【区块链技术与应用】（期末）","uid":"ea7cffe5131c619222c78fc92a3e60e6","slug":"区块链期末","date":"2022-12-16T05:50:49.000Z","updated":"2022-12-16T05:42:46.822Z","comments":true,"path":"api/articles/区块链期末.json","keywords":null,"cover":[],"content":"<h2 id=\"1-学历信息征信系统需求分析\"><a href=\"#1-学历信息征信系统需求分析\" class=\"headerlink\" title=\"1. 学历信息征信系统需求分析\"></a>1. 学历信息征信系统需求分析</h2><p>现在是一个信息化的高科技时代，许许多多的企业必须紧跟时代步伐，不断创新，才能发展壮大；而企业的发展必然离不开人才队伍的建设，也可以说创新是企业发展的动力，而人才却是企业发展的根本，所以现在各企业对于人才队伍建设十分看重，而对于人才的素质及受教育情况的要求更是重中之重。</p>\n<p>对学历信息的查询，要么成本较高，要么比较麻烦，甚至还有一些假冒网站让人防不胜防；传统应用是将数据保存在数据库中来实现，但是现在出现的数据库由于故障或者被删、被黑造成的数据丢失的情况更是屡见不鲜，所以传统数据库并不能真正意义上确保数据的完整性及安全性。</p>\n<p>基于这些情况，我们设计并开发了一个 <code>基于区块链技术的实现的学历信息征信系统</code>，实现了在线对学历信息的查询功能，由于区块链技术本身的特点，无须考虑数据被破坏的问题，而且杜绝了对于信息造假的情况，保证了学历信息的真实性。由于篇幅原因，我们对学历信息征信系统的应用场景进行修改及简化，实现的业务逻辑包括添加信息、修改信息、查询信息、查询详情信息等操作，实际情况下的的业务逻辑需要根据实际需求场景做出相应的调整。</p>\n<p>由于系统需要保证人才受教育情况真实性，所以对于系统的用户而言，不可能由用户自己添加相应的学历信息，而是由具有一定权限的用户来完成添加或修改的功能。但普通用户可以通过系统溯源功能来确定信息的真伪。所以我们将系统用户的使用角色分为两种：</p>\n<ol>\n<li>普通用户</li>\n<li>管理员用户</li>\n</ol>\n<p>普通用户具有对数据的查询功能 ，但实现查询之前必须经过登录认证：</p>\n<ul>\n<li>用户登录：系统只针对合法用户进行授权使用，所以用户必须先进行登录才能完成相应的功能。</li>\n<li>查询实现：查询分为两种方式实现<ul>\n<li>根据证书编号与姓名查询：根据用户输入的证书编号与姓名进行查询。</li>\n<li>根据身份证号码查询：根据用户输入指定的身份证号码进行查询，此功能可以实现溯源。</li>\n</ul>\n</li>\n</ul>\n<p>管理员用户除具有普通用户的功能之外，额外添加了两个功能：</p>\n<ul>\n<li>添加信息：可以向系统中添加新的学历信息。</li>\n<li>修改信息：针对已存在的学历信息进行修改。</li>\n</ul>\n<h2 id=\"2-学历信息征信系统架构设计\"><a href=\"#2-学历信息征信系统架构设计\" class=\"headerlink\" title=\"2. 学历信息征信系统架构设计\"></a>2. 学历信息征信系统架构设计</h2><p>我们在本书的第十、十一、十二章中已经完成了一个完整的基于 <code>fabric-sdk-go</code> 的应用示例，所以我们现在使用之前的应用架构，不同的是在此应用中需要编写实现完整的链码并通过业务层调用链码中的各个函数，以实现对数据状态的操作。界面为了方便用户操作使用，仍然使用Web浏览器的方式实现。而且在此应用中我们将 <code>Hyperledger Fabric</code> 默认的状态数据库由 <code>LevelDB</code> 替换为 <code>CouchDB</code> 来实现</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f9f68c8af853d297920e8667922d1206.png\" alt=\"架构\"></p>\n<p>对于 <code>Fabric Network</code>结构如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4b30f91577b34d0aa3074509ad06e083.png\" alt=\"networkArch\"></p>\n<h2 id=\"3-学历信息征信数据模型设计\"><a href=\"#3-学历信息征信数据模型设计\" class=\"headerlink\" title=\"3.学历信息征信数据模型设计\"></a>3.学历信息征信数据模型设计</h2><p>由于需要向分类账本中保存数据，所以必须设计相关的结构体用于声明要保存的数据结构，用于方便的在应用中处理数据。</p>\n<p><code>Education</code> 结构体设计如下表所示：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">数据类型</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ObjectType</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Name</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">姓名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Gender</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">性别</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Nation</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">民族</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">EntityID</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">身份证号（记录的Key）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Place</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">籍贯</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BirthDay</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">出生日期</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Photo</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">照片</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">EnrollDate</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">入学日期</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">GraduationDate</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">毕（结）业日期</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SchoolName</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">所读学校名称</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Major</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">所读专业</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QuaType</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">学历类别（普通、成考等）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Length</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">学制（两年、三年、四年、五年）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Mode</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">学习形式（普通全日制）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Level</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">层次（专科、本科、研究生、博士）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Graduation</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">毕（结）业（毕业、结业）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CertNo</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">证书编号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Historys</td>\n<td style=\"text-align:left\">[]HistoryItem</td>\n<td style=\"text-align:left\">当前edu的详细历史记录</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>为了能够从当前的分类状态中查询出详细的历史操作记录，我们在 <code>Education</code> 中设计了一个类型为<code>HistoryItem</code> 数组的 <code>Historys</code> 成员，表示当前状态的历史记录集。</p>\n<p><code>HistoryItem</code> 结构体设计如下表所示：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">数据类型</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">TxId</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">交易编号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Education</td>\n<td style=\"text-align:left\">Education</td>\n<td style=\"text-align:left\">本次历史记录的详细信息</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"4-学历信息业务网络设计与实现\"><a href=\"#4-学历信息业务网络设计与实现\" class=\"headerlink\" title=\"4. 学历信息业务网络设计与实现\"></a>4. 学历信息业务网络设计与实现</h2><h3 id=\"4-1-设置环境\"><a href=\"#4-1-设置环境\" class=\"headerlink\" title=\"4.1 设置环境\"></a>4.1 设置环境</h3><p>我们在第十章中说明了如何构建fabric网络环境，现在我们要重新完成一个新的应用，所以网络环境可以使用之前的内容，但是因为<strong>状态数据库使用 <code>CouchDB</code> 来实现</strong>，所以需要做出部分修改，新增与 <code>CouchDB</code> 相关的内容。为了方便读者起见，我们重新搭建一个应用所需的网络环境。</p>\n<p>在<code>GOPATH</code>的<code>src</code>文件夹中新建一个目录如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ mkdir -p $GOPATH&#x2F;src&#x2F;github.com&#x2F;kongyixueyuan.com&#x2F;education \n$ cd $GOPATH&#x2F;src&#x2F;github.com&#x2F;kongyixueyuan.com&#x2F;education</code></pre>\n<p>使用 <code>git</code> 命令克隆 hf-fixtures 目录当前路径</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ git clone https:&#x2F;&#x2F;github.com&#x2F;kevin-hf&#x2F;hf-fixtures.git</code></pre>\n<p>将 hf-fixtures 文件夹重命名为 fixtures</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ mv hf-fixtures fixtures</code></pre>\n<p>修改<code>fixtures</code> 文件夹的所属关系为当前用户</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ sudo chown -R kevin:kevin .&#x2F;fixtures</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>提示： kevin 为安装 Ubuntu 16.04 系统时创建的用户<br><img src=\"https://img-blog.csdnimg.cn/d2853c8258c84246b6ec6c797244c46b.png\" alt=\"在这里插入图片描述\"></p></blockquote>\n<p>进入 <code>fixtures</code> 目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ cd fixtures</code></pre>\n<p>为了构建区块链网络，使用 <code>docker</code> 构建处理不同角色的虚拟计算机。 在这里我们将尽可能保持简单。如果确定您的系统中已经存在相关的所需容器，或可以使用其它方式获取，则无需执行如下命令。否则请将 <code>fixtures</code> 目录下的 <code>pull_images.sh</code> 文件添加可执行权限后直接执行。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ chmod 777 .&#x2F;pull_images.sh\n$ .&#x2F;pull_images.sh</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>提示：<code>pull_images.sh</code> 文件是下载 Fabric 环境所需容器的一个可执行脚本，下载过程需要一段时间（视网速情况而定），请耐心等待。另：请确定您的系统支持虚拟技术。<br><img src=\"https://img-blog.csdnimg.cn/248c672381ba41c289628d98ed31d5dc.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/160365acf800457c99e566204a7ad7e4.png\" alt=\"在这里插入图片描述\"></p></blockquote>\n<h3 id=\"4-2-配置docker-compose-yml文件\"><a href=\"#4-2-配置docker-compose-yml文件\" class=\"headerlink\" title=\"4.2 配置docker-compose.yml文件\"></a>4.2 配置docker-compose.yml文件</h3><p>在 <code>fixtures</code> 目录下创建一个 <code>docker-compose.yml</code> 文件并编辑</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ vim docker-compose.yml</code></pre>\n<ol>\n<li><p>将 <code>network下的basic</code> 修改为 <code>default</code></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">version: &#39;2&#39;\n\nnetworks:\n  default:\n\nservices:</code></pre>\n</li>\n<li><p>编辑 orderer 部分</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">orderer.kevin.kongyixueyuan.com:\n  image: hyperledger&#x2F;fabric-orderer\n  container_name: orderer.kevin.kongyixueyuan.com\n  environment:\n    - ORDERER_GENERAL_LOGLEVEL&#x3D;debug\n    - ORDERER_GENERAL_LISTENADDRESS&#x3D;0.0.0.0\n    - ORDERER_GENERAL_LISTENPORT&#x3D;7050\n    - ORDERER_GENERAL_GENESISPROFILE&#x3D;kongyixueyuan\n    - ORDERER_GENERAL_GENESISMETHOD&#x3D;file\n    - ORDERER_GENERAL_GENESISFILE&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;genesis.block\n    - ORDERER_GENERAL_LOCALMSPID&#x3D;kevin.kongyixueyuan.com\n    - ORDERER_GENERAL_LOCALMSPDIR&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;msp\n    - ORDERER_GENERAL_TLS_ENABLED&#x3D;true\n    - ORDERER_GENERAL_TLS_PRIVATEKEY&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls&#x2F;server.key\n    - ORDERER_GENERAL_TLS_CERTIFICATE&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls&#x2F;server.crt\n    - ORDERER_GENERAL_TLS_ROOTCAS&#x3D;[&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls&#x2F;ca.crt]\n  working_dir: &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric\n  command: orderer\n  volumes:\n    - .&#x2F;artifacts&#x2F;genesis.block:&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;genesis.block\n    - .&#x2F;crypto-config&#x2F;ordererOrganizations&#x2F;kevin.kongyixueyuan.com&#x2F;orderers&#x2F;orderer.kevin.kongyixueyuan.com&#x2F;msp:&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;msp\n    - .&#x2F;crypto-config&#x2F;ordererOrganizations&#x2F;kevin.kongyixueyuan.com&#x2F;orderers&#x2F;orderer.kevin.kongyixueyuan.com&#x2F;tls:&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls\n  ports:\n    - 7050:7050\n  networks:\n    default:\n      aliases:\n        - orderer.kevin.kongyixueyuan.com</code></pre>\n</li>\n<li><p>编辑 ca 部分</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">ca.org1.kevin.kongyixueyuan.com:\n  image: hyperledger&#x2F;fabric-ca\n  container_name: ca.org1.kevin.kongyixueyuan.com\n  environment:\n    - FABRIC_CA_HOME&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric-ca-server\n    - FABRIC_CA_SERVER_CA_NAME&#x3D;ca.org1.kevin.kongyixueyuan.com\n    - FABRIC_CA_SERVER_CA_CERTFILE&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric-ca-server-config&#x2F;ca.org1.kevin.kongyixueyuan.com-cert.pem\n    - FABRIC_CA_SERVER_CA_KEYFILE&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric-ca-server-config&#x2F;727e69ed4a01a204cd53bf4a97c2c1cb947419504f82851f6ae563c3c96dea3a_sk\n    - FABRIC_CA_SERVER_TLS_ENABLED&#x3D;true\n    - FABRIC_CA_SERVER_TLS_CERTFILE&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric-ca-server-config&#x2F;ca.org1.kevin.kongyixueyuan.com-cert.pem\n    - FABRIC_CA_SERVER_TLS_KEYFILE&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric-ca-server-config&#x2F;727e69ed4a01a204cd53bf4a97c2c1cb947419504f82851f6ae563c3c96dea3a_sk\n  ports:\n    - 7054:7054\n  command: sh -c &#39;fabric-ca-server start -b admin:adminpw -d&#39;\n  volumes:\n    - .&#x2F;crypto-config&#x2F;peerOrganizations&#x2F;org1.kevin.kongyixueyuan.com&#x2F;ca&#x2F;:&#x2F;etc&#x2F;hyperledger&#x2F;fabric-ca-server-config\n  networks:\n    default:\n      aliases:\n        - ca.org1.kevin.kongyixueyuan.com</code></pre>\n</li>\n<li><p>声明 CouchDB 部分：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">couchdb:\n  container_name: couchdb\n  image: hyperledger&#x2F;fabric-couchdb\n  # Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password\n  # for CouchDB.  This will prevent CouchDB from operating in an &quot;Admin Party&quot; mode.\n  environment:\n    - COUCHDB_USER&#x3D;\n    - COUCHDB_PASSWORD&#x3D;\n  # Comment&#x2F;Uncomment the port mapping if you want to hide&#x2F;expose the CouchDB service,\n  # for example map it to utilize Fauxton User Interface in dev environments.\n  ports:\n    - &quot;5984:5984&quot;</code></pre>\n</li>\n<li><p>编辑Peer部分</p>\n<ol>\n<li><p><code>peer0.org1.example.com</code> 内容如下</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">peer0.org1.kevin.kongyixueyuan.com:\n  image: hyperledger&#x2F;fabric-peer\n  container_name: peer0.org1.kevin.kongyixueyuan.com\n  environment:\n    - CORE_VM_ENDPOINT&#x3D;unix:&#x2F;&#x2F;&#x2F;host&#x2F;var&#x2F;run&#x2F;docker.sock\n    - CORE_VM_DOCKER_ATTACHSTDOUT&#x3D;true\n    - CORE_LOGGING_LEVEL&#x3D;DEBUG\n    - CORE_PEER_NETWORKID&#x3D;kongyixueyuan\n    - CORE_PEER_PROFILE_ENABLED&#x3D;true\n    - CORE_PEER_TLS_ENABLED&#x3D;true\n    - CORE_PEER_TLS_CERT_FILE&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;tls&#x2F;server.crt\n    - CORE_PEER_TLS_KEY_FILE&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;tls&#x2F;server.key\n    - CORE_PEER_TLS_ROOTCERT_FILE&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;tls&#x2F;ca.crt\n    - CORE_PEER_ID&#x3D;peer0.org1.kevin.kongyixueyuan.com\n    - CORE_PEER_ADDRESSAUTODETECT&#x3D;true\n    - CORE_PEER_ADDRESS&#x3D;peer0.org1.kevin.kongyixueyuan.com:7051\n    - CORE_PEER_GOSSIP_EXTERNALENDPOINT&#x3D;peer0.org1.kevin.kongyixueyuan.com:7051\n    - CORE_PEER_GOSSIP_USELEADERELECTION&#x3D;true\n    - CORE_PEER_GOSSIP_ORGLEADER&#x3D;false\n    - CORE_PEER_GOSSIP_SKIPHANDSHAKE&#x3D;true\n    - CORE_PEER_LOCALMSPID&#x3D;org1.kevin.kongyixueyuan.com\n    - CORE_PEER_MSPCONFIGPATH&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;msp\n    - CORE_PEER_TLS_SERVERHOSTOVERRIDE&#x3D;peer0.org1.kevin.kongyixueyuan.com\n    - CORE_LEDGER_STATE_STATEDATABASE&#x3D;CouchDB\n    - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS&#x3D;couchdb:5984\n    - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME&#x3D;\n    - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD&#x3D;\n  working_dir: &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer\n  command: peer node start\n  volumes:\n    - &#x2F;var&#x2F;run&#x2F;:&#x2F;host&#x2F;var&#x2F;run&#x2F;\n    - .&#x2F;crypto-config&#x2F;peerOrganizations&#x2F;org1.kevin.kongyixueyuan.com&#x2F;peers&#x2F;peer0.org1.kevin.kongyixueyuan.com&#x2F;msp:&#x2F;var&#x2F;hyperledger&#x2F;msp\n    - .&#x2F;crypto-config&#x2F;peerOrganizations&#x2F;org1.kevin.kongyixueyuan.com&#x2F;peers&#x2F;peer0.org1.kevin.kongyixueyuan.com&#x2F;tls:&#x2F;var&#x2F;hyperledger&#x2F;tls\n  ports:\n    - 7051:7051\n    - 7053:7053\n  depends_on:\n    - orderer.kevin.kongyixueyuan.com\n    - couchdb\n  networks:\n    default:\n      aliases:\n        - peer0.org1.kevin.kongyixueyuan.com</code></pre>\n</li>\n<li><p>peer1.org1.example.com 内容如下</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">peer1.org1.kevin.kongyixueyuan.com:\n  image: hyperledger&#x2F;fabric-peer\n  container_name: peer1.org1.kevin.kongyixueyuan.com\n  environment:\n    - CORE_VM_ENDPOINT&#x3D;unix:&#x2F;&#x2F;&#x2F;host&#x2F;var&#x2F;run&#x2F;docker.sock\n    - CORE_VM_DOCKER_ATTACHSTDOUT&#x3D;true\n    - CORE_LOGGING_LEVEL&#x3D;DEBUG\n    - CORE_PEER_NETWORKID&#x3D;kongyixueyuan\n    - CORE_PEER_PROFILE_ENABLED&#x3D;true\n    - CORE_PEER_TLS_ENABLED&#x3D;true\n    - CORE_PEER_TLS_CERT_FILE&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;tls&#x2F;server.crt\n    - CORE_PEER_TLS_KEY_FILE&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;tls&#x2F;server.key\n    - CORE_PEER_TLS_ROOTCERT_FILE&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;tls&#x2F;ca.crt\n    - CORE_PEER_ID&#x3D;peer1.org1.kevin.kongyixueyuan.com\n    - CORE_PEER_ADDRESSAUTODETECT&#x3D;true\n    - CORE_PEER_ADDRESS&#x3D;peer1.org1.kevin.kongyixueyuan.com:7051\n    - CORE_PEER_GOSSIP_EXTERNALENDPOINT&#x3D;peer1.org1.kevin.kongyixueyuan.com:7051\n    - CORE_PEER_GOSSIP_USELEADERELECTION&#x3D;true\n    - CORE_PEER_GOSSIP_ORGLEADER&#x3D;false\n    - CORE_PEER_GOSSIP_SKIPHANDSHAKE&#x3D;true\n    - CORE_PEER_LOCALMSPID&#x3D;org1.kevin.kongyixueyuan.com\n    - CORE_PEER_MSPCONFIGPATH&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;msp\n    - CORE_PEER_TLS_SERVERHOSTOVERRIDE&#x3D;peer1.org1.kevin.kongyixueyuan.com\n    - CORE_LEDGER_STATE_STATEDATABASE&#x3D;CouchDB\n    - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS&#x3D;couchdb:5984\n    - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME&#x3D;\n    - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD&#x3D;\n  working_dir: &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer\n  command: peer node start\n  volumes:\n    - &#x2F;var&#x2F;run&#x2F;:&#x2F;host&#x2F;var&#x2F;run&#x2F;\n    - .&#x2F;crypto-config&#x2F;peerOrganizations&#x2F;org1.kevin.kongyixueyuan.com&#x2F;peers&#x2F;peer1.org1.kevin.kongyixueyuan.com&#x2F;msp:&#x2F;var&#x2F;hyperledger&#x2F;msp\n    - .&#x2F;crypto-config&#x2F;peerOrganizations&#x2F;org1.kevin.kongyixueyuan.com&#x2F;peers&#x2F;peer1.org1.kevin.kongyixueyuan.com&#x2F;tls:&#x2F;var&#x2F;hyperledger&#x2F;tls\n  ports:\n    - 7151:7051\n    - 7153:7053\n  depends_on:\n    - orderer.kevin.kongyixueyuan.com\n    - couchdb\n  networks:\n    default:\n      aliases:\n        - peer1.org1.kevin.kongyixueyuan.com</code></pre>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"4-3-测试网络环境\"><a href=\"#4-3-测试网络环境\" class=\"headerlink\" title=\"4.3 测试网络环境\"></a>4.3 测试网络环境</h3><p>为了检查网络是否正常工作，使用<code>docker-compose</code>同时启动或停止所有容器。 进入<code>fixtures</code>文件夹，运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ cd $GOPATH&#x2F;src&#x2F;github.com&#x2F;kongyixueyuan.com&#x2F;education&#x2F;fixtures\n$ docker-compose up</code></pre>\n<p>如果在您的系统中没有相关的容器，那么会自动下载docker镜像。下载完毕后自动启动，控制台会输出很多不同颜色的日志（红色不等于错误）</p>\n<p><img src=\"https://img-blog.csdnimg.cn/97ea7b3ae9cd43009050ab9ef397616d.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/47a72a5450f941238404df7cf085ce05.png\" alt=\"在这里插入图片描述\"></p>\n<p>打开一个新终端并运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker ps</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/62c611da85fe9ff53ad18ec83fdbb544.png\" alt=\"查看容器\"></p>\n<p>将看到：两个peer，一个orderer和一个CA容器，还有一个 CouchDB 容器。 代表已成功创建了一个新的网络，可以随SDK一起使用。 要停止网络，请返回到上一个终端，按<code>Ctrl+C</code>并等待所有容器都停止。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>提示</strong> ：当网络成功启动后，所有处于活动中的容器都可以访问。 也可以查看指定容器的详细日志内容。 如果想删除这些容器，需要使用<code>docker rm $(docker ps -aq)</code>将其删除 ，但在删除容器之前需要确定其在网络环境中已不再使用。</p>\n<p>如果在网络环境启动过程中不想看到大量的日志信息，请在该启动命令中添加参数 <code>-d</code> ，如下所示： <code>docker-compose up -d</code> 。 如果要停止网络，请务必在 <code>docker-compose.yaml</code> 所在的文件夹中运行命令： <code>docker-compose stop</code> （或 使用<code>docker-compose down</code> 进行清理停止所有容器）。</p></blockquote>\n<p>最后在终端2中执行如下命令关闭网络：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ cd $GOPATH&#x2F;src&#x2F;github.com&#x2F;kongyixueyuan.com&#x2F;education&#x2F;fixtures\n$ docker-compose down</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/79bdc2d30ccd622a8bd6888b107c364b.png\" alt=\"关闭网络\"></p>\n<p>终端1窗口中输出如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/435eca6ad426c6a6b06ff202140e4982.png\" alt=\"关闭网络过程\"></p>\n<h2 id=\"5-SDK与链码的实现\"><a href=\"#5-SDK与链码的实现\" class=\"headerlink\" title=\"5. SDK与链码的实现\"></a>5. SDK与链码的实现</h2><h3 id=\"5-1-创建-config-yaml-文件\"><a href=\"#5-1-创建-config-yaml-文件\" class=\"headerlink\" title=\"5.1 创建 config.yaml 文件\"></a>5.1 创建 <code>config.yaml</code> 文件</h3><p>确认 Hyperledger Fabric 基础网络环境运行没有问题后，现在我们通过创建一个新的 config.yaml 配置文件给应用程序所使用的 Fabric-SDK-Go 配置相关参数及 Fabric 组件的通信地址</p>\n<p>进入项目的根目录中创建一个 <code>config.yaml</code> 文件并编辑</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ cd $GOPATH&#x2F;src&#x2F;github.com&#x2F;kongyixueyuan.com&#x2F;education\n$ vim config.yaml</code></pre>\n<p><em>config.yaml</em> 配置文件完整内容如下:</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">name: &quot;kongyixueyuan-network&quot;\n#\n# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.\n#\nversion: 1.0.0\n\n#\n# The client section used by GO SDK.\n#\nclient:\n\n  # Which organization does this application instance belong to? The value must be the name of an org\n  # defined under &quot;organizations&quot;\n  organization: Org1\n\n  logging:\n    level: info\n\n  # Global configuration for peer, event service and orderer timeouts\n  # if this this section is omitted, then default values will be used (same values as below)\n#  peer:\n#    timeout:\n#      connection: 10s\n#      response: 180s\n#      discovery:\n#        # Expiry period for discovery service greylist filter\n#        # The channel client will greylist peers that are found to be offline\n#        # to prevent re-selecting them in subsequent retries.\n#        # This interval will define how long a peer is greylisted\n#        greylistExpiry: 10s\n#  eventService:\n#    # Event service type (optional). If not specified then the type is automatically\n#    # determined from channel capabilities.\n#    type: (deliver|eventhub)\n    # the below timeouts are commented out to use the default values that are found in\n    # &quot;pkg&#x2F;fab&#x2F;endpointconfig.go&quot;\n    # the client is free to override the default values by uncommenting and resetting\n    # the values as they see fit in their config file\n#    timeout:\n#      connection: 15s\n#      registrationResponse: 15s\n#  orderer:\n#    timeout:\n#      connection: 15s\n#      response: 15s\n#  global:\n#    timeout:\n#      query: 180s\n#      execute: 180s\n#      resmgmt: 180s\n#    cache:\n#      connectionIdle: 30s\n#      eventServiceIdle: 2m\n#      channelConfig: 30m\n#      channelMembership: 30s\n#      discovery: 10s\n#      selection: 10m\n\n  # Root of the MSP directories with keys and certs.\n  cryptoconfig:\n    path: $&#123;GOPATH&#125;&#x2F;src&#x2F;github.com&#x2F;kongyixueyuan.com&#x2F;education&#x2F;fixtures&#x2F;crypto-config\n\n  # Some SDKs support pluggable KV stores, the properties under &quot;credentialStore&quot;\n  # are implementation specific\n  credentialStore:\n    path: &#x2F;tmp&#x2F;kongyixueyuan-store\n\n    # [Optional]. Specific to the CryptoSuite implementation used by GO SDK. Software-based implementations\n    # requiring a key store. PKCS#11 based implementations does not.\n    cryptoStore:\n      path: &#x2F;tmp&#x2F;kongyixueyuan-msp\n\n   # BCCSP config for the client. Used by GO SDK.\n  BCCSP:\n    security:\n     enabled: true\n     default:\n      provider: &quot;SW&quot;\n     hashAlgorithm: &quot;SHA2&quot;\n     softVerify: true\n     level: 256\n\n  tlsCerts:\n    # [Optional]. Use system certificate pool when connecting to peers, orderers (for negotiating TLS) Default: false\n    systemCertPool: false\n\n    # [Optional]. Client key and cert for TLS handshake with peers and orderers\n    client:\n      key:\n        path:\n      cert:\n        path:\n\n#\n# [Optional]. But most apps would have this section so that channel objects can be constructed\n# based on the content below. If an app is creating channels, then it likely will not need this\n# section.\n#\nchannels:\n  # name of the channel\n  kevinkongyixueyuan:\n    # Required. list of orderers designated by the application to use for transactions on this\n    # channel. This list can be a result of access control (&quot;org1&quot; can only access &quot;ordererA&quot;), or\n    # operational decisions to share loads from applications among the orderers.  The values must\n    # be &quot;names&quot; of orgs defined under &quot;organizations&#x2F;peers&quot;\n    # deprecated: not recommended, to override any orderer configuration items, entity matchers should be used.\n    # orderers:\n    #  - orderer.kevin.kongyixueyuan.com\n\n    # Required. list of peers from participating orgs\n    peers:\n      peer0.org1.kevin.kongyixueyuan.com:\n        # [Optional]. will this peer be sent transaction proposals for endorsement? The peer must\n        # have the chaincode installed. The app can also use this property to decide which peers\n        # to send the chaincode install request. Default: true\n        endorsingPeer: true\n\n        # [Optional]. will this peer be sent query proposals? The peer must have the chaincode\n        # installed. The app can also use this property to decide which peers to send the\n        # chaincode install request. Default: true\n        chaincodeQuery: true\n\n        # [Optional]. will this peer be sent query proposals that do not require chaincodes, like\n        # queryBlock(), queryTransaction(), etc. Default: true\n        ledgerQuery: true\n\n        # [Optional]. will this peer be the target of the SDK&#39;s listener registration? All peers can\n        # produce events but the app typically only needs to connect to one to listen to events.\n        # Default: true\n        eventSource: true\n\n      peer1.org1.kevin.kongyixueyuan.com:\n        endorsingPeer: true\n        chaincodeQuery: true\n        ledgerQuery: true\n        eventSource: true\n\n    policies:\n      #[Optional] options for retrieving channel configuration blocks\n      queryChannelConfig:\n        #[Optional] min number of success responses (from targets&#x2F;peers)\n        minResponses: 1\n        #[Optional] channel config will be retrieved for these number of random targets\n        maxTargets: 1\n        #[Optional] retry options for query config block\n        retryOpts:\n          #[Optional] number of retry attempts\n          attempts: 5\n          #[Optional] the back off interval for the first retry attempt\n          initialBackoff: 500ms\n          #[Optional] the maximum back off interval for any retry attempt\n          maxBackoff: 5s\n          #[Optional] he factor by which the initial back off period is exponentially incremented\n          backoffFactor: 2.0\n      #[Optional] options for retrieving discovery info\n      discovery:\n        #[Optional] discovery info will be retrieved for these number of random targets\n        maxTargets: 2\n        #[Optional] retry options for retrieving discovery info\n        retryOpts:\n          #[Optional] number of retry attempts\n          attempts: 4\n          #[Optional] the back off interval for the first retry attempt\n          initialBackoff: 500ms\n          #[Optional] the maximum back off interval for any retry attempt\n          maxBackoff: 5s\n          #[Optional] he factor by which the initial back off period is exponentially incremented\n          backoffFactor: 2.0\n      #[Optional] options for the event service\n      eventService:\n        # [Optional] resolverStrategy specifies the peer resolver strategy to use when connecting to a peer\n        # Possible values: [PreferOrg (default), MinBlockHeight, Balanced]\n        #\n        # PreferOrg:\n        #   Determines which peers are suitable based on block height lag threshold, although will prefer the peers in the\n        #   current org (as long as their block height is above a configured threshold). If none of the peers from the current org\n        #   are suitable then a peer from another org is chosen.\n        # MinBlockHeight:\n        #   Chooses the best peer according to a block height lag threshold. The maximum block height of all peers is\n        #   determined and the peers whose block heights are under the maximum height but above a provided &quot;lag&quot; threshold are load\n        #   balanced. The other peers are not considered.\n        # Balanced:\n        #   Chooses peers using the configured balancer.\n        resolverStrategy: PreferOrg\n        # [Optional] balancer is the balancer to use when choosing a peer to connect to\n        # Possible values: [Random (default), RoundRobin]\n        balancer: Random\n        # [Optional] blockHeightLagThreshold sets the block height lag threshold. This value is used for choosing a peer\n        # to connect to. If a peer is lagging behind the most up-to-date peer by more than the given number of\n        # blocks then it will be excluded from selection.\n        # If set to 0 then only the most up-to-date peers are considered.\n        # If set to -1 then all peers (regardless of block height) are considered for selection.\n        # Default: 5\n        blockHeightLagThreshold: 5\n        # [Optional] reconnectBlockHeightLagThreshold - if &gt;0 then the event client will disconnect from the peer if the peer&#39;s\n        # block height falls behind the specified number of blocks and will reconnect to a better performing peer.\n        # If set to 0 then this feature is disabled.\n        # Default: 10\n        # NOTES:\n        #   - peerMonitorPeriod must be &gt;0 to enable this feature\n        #   - Setting this value too low may cause the event client to disconnect&#x2F;reconnect too frequently, thereby\n        #     affecting performance.\n        reconnectBlockHeightLagThreshold: 10\n        # [Optional] peerMonitorPeriod is the period in which the connected peer is monitored to see if\n        # the event client should disconnect from it and reconnect to another peer.\n        # Default: 0 (disabled)\n        peerMonitorPeriod: 5s\n\n#\n# list of participating organizations in this network\n#\norganizations:\n  Org1:\n    mspid: org1.kevin.kongyixueyuan.com\n    cryptoPath: peerOrganizations&#x2F;org1.kevin.kongyixueyuan.com&#x2F;users&#x2F;&#123;userName&#125;@org1.kevin.kongyixueyuan.com&#x2F;msp\n    peers:\n      - peer0.org1.kevin.kongyixueyuan.com\n      - peer1.org1.kevin.kongyixueyuan.com\n\n    # [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based\n    # network. Typically certificates provisioning is done in a separate process outside of the\n    # runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for\n    # dynamic certificate management (enroll, revoke, re-enroll). The following section is only for\n    # Fabric-CA servers.\n    certificateAuthorities:\n      - ca.org1.kevin.kongyixueyuan.com\n\n#\n# List of orderers to send transaction and channel create&#x2F;update requests to. For the time\n# being only one orderer is needed. If more than one is defined, which one get used by the\n# SDK is implementation specific. Consult each SDK&#39;s documentation for its handling of orderers.\n#\norderers:\n  orderer.kevin.kongyixueyuan.com:\n    url: localhost:7050\n\n    # these are standard properties defined by the gRPC library\n    # they will be passed in as-is to gRPC client constructor\n    grpcOptions:\n      ssl-target-name-override: orderer.kevin.kongyixueyuan.com\n      # These parameters should be set in coordination with the keepalive policy on the server,\n      # as incompatible settings can result in closing of connection.\n      # When duration of the &#39;keep-alive-time&#39; is set to 0 or less the keep alive client parameters are disabled\n      keep-alive-time: 0s\n      keep-alive-timeout: 20s\n      keep-alive-permit: false\n      fail-fast: false\n      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs\n      allow-insecure: false\n\n    tlsCACerts:\n      # Certificate location absolute path\n      path: $&#123;GOPATH&#125;&#x2F;src&#x2F;github.com&#x2F;kongyixueyuan.com&#x2F;education&#x2F;fixtures&#x2F;crypto-config&#x2F;ordererOrganizations&#x2F;kevin.kongyixueyuan.com&#x2F;tlsca&#x2F;tlsca.kevin.kongyixueyuan.com-cert.pem\n\n#\n# List of peers to send various requests to, including endorsement, query\n# and event listener registration.\n#\npeers:\n  peer0.org1.kevin.kongyixueyuan.com:\n    # this URL is used to send endorsement and query requests\n    url: localhost:7051\n    # eventUrl is only needed when using eventhub (default is delivery service)\n    eventUrl: localhost:7053\n\n    grpcOptions:\n      ssl-target-name-override: peer0.org1.kevin.kongyixueyuan.com\n      # These parameters should be set in coordination with the keepalive policy on the server,\n      # as incompatible settings can result in closing of connection.\n      # When duration of the &#39;keep-alive-time&#39; is set to 0 or less the keep alive client parameters are disabled\n      keep-alive-time: 0s\n      keep-alive-timeout: 20s\n      keep-alive-permit: false\n      fail-fast: false\n      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs\n      allow-insecure: false\n\n    tlsCACerts:\n      # Certificate location absolute path\n      path: $&#123;GOPATH&#125;&#x2F;src&#x2F;github.com&#x2F;kongyixueyuan.com&#x2F;education&#x2F;fixtures&#x2F;crypto-config&#x2F;peerOrganizations&#x2F;org1.kevin.kongyixueyuan.com&#x2F;tlsca&#x2F;tlsca.org1.kevin.kongyixueyuan.com-cert.pem\n\n  peer1.org1.kevin.kongyixueyuan.com:\n    # this URL is used to send endorsement and query requests\n    url: localhost:7151\n    # eventUrl is only needed when using eventhub (default is delivery service)\n    eventUrl: localhost:7153\n\n    grpcOptions:\n      ssl-target-name-override: peer1.org1.kevin.kongyixueyuan.com\n      # These parameters should be set in coordination with the keepalive policy on the server,\n      # as incompatible settings can result in closing of connection.\n      # When duration of the &#39;keep-alive-time&#39; is set to 0 or less the keep alive client parameters are disabled\n      keep-alive-time: 0s\n      keep-alive-timeout: 20s\n      keep-alive-permit: false\n      fail-fast: false\n      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs\n      allow-insecure: false\n\n    tlsCACerts:\n      # Certificate location absolute path\n      path: $&#123;GOPATH&#125;&#x2F;src&#x2F;github.com&#x2F;kongyixueyuan.com&#x2F;education&#x2F;fixtures&#x2F;crypto-config&#x2F;peerOrganizations&#x2F;org1.kevin.kongyixueyuan.com&#x2F;tlsca&#x2F;tlsca.org1.kevin.kongyixueyuan.com-cert.pem\n\n#\n# Fabric-CA is a special kind of Certificate Authority provided by Hyperledger Fabric which allows\n# certificate management to be done via REST APIs. Application may choose to use a standard\n# Certificate Authority instead of Fabric-CA, in which case this section would not be specified.\n#\ncertificateAuthorities:\n  ca.org1.kevin.kongyixueyuan.com:\n    url: http:&#x2F;&#x2F;localhost:7054\n    tlsCACerts:\n      # Certificate location absolute path\n      path: $&#123;GOPATH&#125;&#x2F;src&#x2F;github.com&#x2F;kongyixueyuan.com&#x2F;education&#x2F;fixtures&#x2F;crypto-config&#x2F;peerOrganizations&#x2F;org1.kevin.kongyixueyuan.com&#x2F;ca&#x2F;ca.org1.kevin.kongyixueyuan.com-cert.pem\n\n    # Fabric-CA supports dynamic user enrollment via REST APIs. A &quot;root&quot; user, a.k.a registrar, is\n    # needed to enroll and invoke new users.\n    registrar:\n      enrollId: admin\n      enrollSecret: adminpw\n    # [Optional] The optional name of the CA.\n    caName: ca.org1.kevin.kongyixueyuan.com\n\nentityMatchers:\n  peer:\n    - pattern: (\\w*)peer0.org1.kevin.kongyixueyuan.com(\\w*)\n      urlSubstitutionExp: localhost:7051\n      eventUrlSubstitutionExp: localhost:7053\n      sslTargetOverrideUrlSubstitutionExp: peer0.org1.kevin.kongyixueyuan.com\n      mappedHost: peer0.org1.kevin.kongyixueyuan.com\n\n    - pattern: (\\w*)peer1.org1.kevin.kongyixueyuan.com(\\w*)\n      urlSubstitutionExp: localhost:7151\n      eventUrlSubstitutionExp: localhost:7153\n      sslTargetOverrideUrlSubstitutionExp: peer1.org1.kevin.kongyixueyuan.com\n      mappedHost: peer1.org1.kevin.kongyixueyuan.com\n\n  orderer:\n    - pattern: (\\w*)orderer.kevin.kongyixueyuan.com(\\w*)\n      urlSubstitutionExp: localhost:7050\n      sslTargetOverrideUrlSubstitutionExp: orderer.kevin.kongyixueyuan.com\n      mappedHost: orderer.kevin.kongyixueyuan.com\n\n  certificateAuthorities:\n    - pattern: (\\w*)ca.org1.kevin.kongyixueyuan.com(\\w*)\n      urlSubstitutionExp: http:&#x2F;&#x2F;localhost:7054\n      mappedHost: ca.org1.kevin.kongyixueyuan.com</code></pre>\n<h3 id=\"5-2-声明结构体\"><a href=\"#5-2-声明结构体\" class=\"headerlink\" title=\"5.2 声明结构体\"></a>5.2 声明结构体</h3><p>在当前项目根目录中创建一个存放链码文件的 <code>chaincode</code> 目录，然后在该目录下创建一个 <code>eduStruct.go</code> 的文件并对其进行编辑</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ mkdir chaincode\n$ vim chaincode&#x2F;eduStruct.go</code></pre>\n<p><code>eduStruct.go</code> 文件主要声明一个结构体，用于将多个数据包装成为一个对象，然后进行进一步的处理。该文件完整代码如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;**\n  @Author : hanxiaodong\n*&#x2F;\npackage main\n\ntype Education struct &#123;\n    ObjectType    string    &#96;json:&quot;docType&quot;&#96;\n    Name    string    &#96;json:&quot;Name&quot;&#96;        &#x2F;&#x2F; 姓名\n    Gender    string    &#96;json:&quot;Gender&quot;&#96;        &#x2F;&#x2F; 性别\n    Nation    string    &#96;json:&quot;Nation&quot;&#96;        &#x2F;&#x2F; 民族\n    EntityID    string    &#96;json:&quot;EntityID&quot;&#96;        &#x2F;&#x2F; 身份证号\n    Place    string    &#96;json:&quot;Place&quot;&#96;        &#x2F;&#x2F; 籍贯\n    BirthDay    string    &#96;json:&quot;BirthDay&quot;&#96;        &#x2F;&#x2F; 出生日期\n\n    EnrollDate    string    &#96;json:&quot;EnrollDate&quot;&#96;        &#x2F;&#x2F; 入学日期\n    GraduationDate    string    &#96;json:&quot;GraduationDate&quot;&#96;    &#x2F;&#x2F; 毕（结）业日期\n    SchoolName    string    &#96;json:&quot;SchoolName&quot;&#96;    &#x2F;&#x2F; 学校名称\n    Major    string    &#96;json:&quot;Major&quot;&#96;    &#x2F;&#x2F; 专业\n    QuaType    string    &#96;json:&quot;QuaType&quot;&#96;    &#x2F;&#x2F; 学历类别\n    Length    string    &#96;json:&quot;Length&quot;&#96;    &#x2F;&#x2F; 学制\n    Mode    string    &#96;json:&quot;Mode&quot;&#96;    &#x2F;&#x2F; 学习形式\n    Level    string    &#96;json:&quot;Level&quot;&#96;    &#x2F;&#x2F; 层次\n    Graduation    string    &#96;json:&quot;Graduation&quot;&#96;    &#x2F;&#x2F; 毕（结）业\n    CertNo    string    &#96;json:&quot;CertNo&quot;&#96;    &#x2F;&#x2F; 证书编号\n\n    Photo    string    &#96;json:&quot;Photo&quot;&#96;    &#x2F;&#x2F; 照片\n\n    Historys    []HistoryItem    &#x2F;&#x2F; 当前edu的历史记录\n&#125;\n\ntype HistoryItem struct &#123;\n    TxId    string\n    Education    Education\n&#125;</code></pre>\n<h3 id=\"5-3-编写链码\"><a href=\"#5-3-编写链码\" class=\"headerlink\" title=\"5.3 编写链码\"></a>5.3 编写链码</h3><p>在 <code>chaincode</code> 目录下创建一个 <code>main.go</code> 的文件并对其进行编辑</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ vim chaincode&#x2F;main.go</code></pre>\n<p><code>main.go</code> 文件作为链码的主文件，主要声明 <code>Init(stub shim.ChaincodeStubInterface)、Invoke(stub shim.ChaincodeStubInterface)</code> 函数，完成对链码初始化及调用的相关实现，完整代码如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;**\n  @Author : hanxiaodong\n*&#x2F;\npackage main\n\nimport (\n    &quot;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;core&#x2F;chaincode&#x2F;shim&quot;\n    &quot;fmt&quot;\n    &quot;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;protos&#x2F;peer&quot;\n)\n\ntype EducationChaincode struct &#123;\n\n&#125;\n\nfunc (t *EducationChaincode) Init(stub shim.ChaincodeStubInterface) peer.Response&#123;\n\n    return shim.Success(nil)\n&#125;\n\nfunc (t *EducationChaincode) Invoke(stub shim.ChaincodeStubInterface) peer.Response&#123;\n    &#x2F;&#x2F; 获取用户意图\n    fun, args :&#x3D; stub.GetFunctionAndParameters()\n\n    if fun &#x3D;&#x3D; &quot;addEdu&quot;&#123;\n        return t.addEdu(stub, args)        &#x2F;&#x2F; 添加信息\n    &#125;else if fun &#x3D;&#x3D; &quot;queryEduByCertNoAndName&quot; &#123;\n        return t.queryEduByCertNoAndName(stub, args)        &#x2F;&#x2F; 根据证书编号及姓名查询信息\n    &#125;else if fun &#x3D;&#x3D; &quot;queryEduInfoByEntityID&quot; &#123;\n        return t.queryEduInfoByEntityID(stub, args)    &#x2F;&#x2F; 根据身份证号码及姓名查询详情\n    &#125;else if fun &#x3D;&#x3D; &quot;updateEdu&quot; &#123;\n        return t.updateEdu(stub, args)        &#x2F;&#x2F; 根据证书编号更新信息\n    &#125;else if fun &#x3D;&#x3D; &quot;delEdu&quot;&#123;\n        return t.delEdu(stub, args)    &#x2F;&#x2F; 根据证书编号删除信息\n    &#125;\n\n    return shim.Error(&quot;指定的函数名称错误&quot;)\n\n&#125;\n\nfunc main()&#123;\n    err :&#x3D; shim.Start(new(EducationChaincode))\n    if err !&#x3D; nil&#123;\n        fmt.Printf(&quot;启动EducationChaincode时发生错误: %s&quot;, err)\n    &#125;\n&#125;</code></pre>\n<p>创建 <code>eduCC.go</code> 文件，该文件实现了使用链码相关的API对分类账本状态进行具体操作的各个函数：</p>\n<ul>\n<li><strong>PutEdu：</strong>实现将指定的对象序列化后保存至分类账本中</li>\n<li><strong>GetEduInfo：</strong>根据指定的Key（身份证号码）查询对应的状态，反序列后将对象返回</li>\n<li><strong>getEduByQueryString：</strong>根据指定的查询字符串从 <code>CouchDB</code> 中查询状态</li>\n<li><strong>addEdu：</strong>接收对象并调用 <code>PutEdu</code> 函数实现保存状态的功能</li>\n<li><strong>queryEduByCertNoAndName：</strong>根据指定的证书编号与姓名查询状态</li>\n<li><strong>queryEduInfoByEntityID：</strong>根据指定的身份证号码（Key）查询状态</li>\n<li><strong>updateEdu：</strong>实现对状态进行编辑功能</li>\n<li><strong>delEdu：</strong>从分类账本中删除状态，此功能暂不提供</li>\n</ul>\n<p><code>eduCC.go</code> 文件完整内容如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;**\n  @Author : hanxiaodong\n*&#x2F;\n\npackage main\n\nimport (\n    &quot;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;core&#x2F;chaincode&#x2F;shim&quot;\n    &quot;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;protos&#x2F;peer&quot;\n    &quot;encoding&#x2F;json&quot;\n    &quot;fmt&quot;\n    &quot;bytes&quot;\n)\n\nconst DOC_TYPE &#x3D; &quot;eduObj&quot;\n\n&#x2F;&#x2F; 保存edu\n&#x2F;&#x2F; args: education\nfunc PutEdu(stub shim.ChaincodeStubInterface, edu Education) ([]byte, bool) &#123;\n\n    edu.ObjectType &#x3D; DOC_TYPE\n\n    b, err :&#x3D; json.Marshal(edu)\n    if err !&#x3D; nil &#123;\n        return nil, false\n    &#125;\n\n    &#x2F;&#x2F; 保存edu状态\n    err &#x3D; stub.PutState(edu.EntityID, b)\n    if err !&#x3D; nil &#123;\n        return nil, false\n    &#125;\n\n    return b, true\n&#125;\n\n&#x2F;&#x2F; 根据身份证号码查询信息状态\n&#x2F;&#x2F; args: entityID\nfunc GetEduInfo(stub shim.ChaincodeStubInterface, entityID string) (Education, bool)  &#123;\n    var edu Education\n    &#x2F;&#x2F; 根据身份证号码查询信息状态\n    b, err :&#x3D; stub.GetState(entityID)\n    if err !&#x3D; nil &#123;\n        return edu, false\n    &#125;\n\n    if b &#x3D;&#x3D; nil &#123;\n        return edu, false\n    &#125;\n\n    &#x2F;&#x2F; 对查询到的状态进行反序列化\n    err &#x3D; json.Unmarshal(b, &amp;edu)\n    if err !&#x3D; nil &#123;\n        return edu, false\n    &#125;\n\n    &#x2F;&#x2F; 返回结果\n    return edu, true\n&#125;\n\n&#x2F;&#x2F; 根据指定的查询字符串实现富查询\nfunc getEduByQueryString(stub shim.ChaincodeStubInterface, queryString string) ([]byte, error) &#123;\n\n    resultsIterator, err :&#x3D; stub.GetQueryResult(queryString)\n    if err !&#x3D; nil &#123;\n        return nil, err\n    &#125;\n    defer  resultsIterator.Close()\n\n    &#x2F;&#x2F; buffer is a JSON array containing QueryRecords\n    var buffer bytes.Buffer\n\n    bArrayMemberAlreadyWritten :&#x3D; false\n    for resultsIterator.HasNext() &#123;\n        queryResponse, err :&#x3D; resultsIterator.Next()\n        if err !&#x3D; nil &#123;\n            return nil, err\n        &#125;\n        &#x2F;&#x2F; Add a comma before array members, suppress it for the first array member\n        if bArrayMemberAlreadyWritten &#x3D;&#x3D; true &#123;\n            buffer.WriteString(&quot;,&quot;)\n        &#125;\n\n        &#x2F;&#x2F; Record is a JSON object, so we write as-is\n        buffer.WriteString(string(queryResponse.Value))\n        bArrayMemberAlreadyWritten &#x3D; true\n    &#125;\n\n    fmt.Printf(&quot;- getQueryResultForQueryString queryResult:\\n%s\\n&quot;, buffer.String())\n\n    return buffer.Bytes(), nil\n\n&#125;\n\n&#x2F;&#x2F; 添加信息\n&#x2F;&#x2F; args: educationObject\n&#x2F;&#x2F; 身份证号为 key, Education 为 value\nfunc (t *EducationChaincode) addEdu(stub shim.ChaincodeStubInterface, args []string) peer.Response &#123;\n\n    if len(args) !&#x3D; 2&#123;\n        return shim.Error(&quot;给定的参数个数不符合要求&quot;)\n    &#125;\n\n    var edu Education\n    err :&#x3D; json.Unmarshal([]byte(args[0]), &amp;edu)\n    if err !&#x3D; nil &#123;\n        return shim.Error(&quot;反序列化信息时发生错误&quot;)\n    &#125;\n\n    &#x2F;&#x2F; 查重: 身份证号码必须唯一\n    _, exist :&#x3D; GetEduInfo(stub, edu.EntityID)\n    if exist &#123;\n        return shim.Error(&quot;要添加的身份证号码已存在&quot;)\n    &#125;\n\n    _, bl :&#x3D; PutEdu(stub, edu)\n    if !bl &#123;\n        return shim.Error(&quot;保存信息时发生错误&quot;)\n    &#125;\n\n    err &#x3D; stub.SetEvent(args[1], []byte&#123;&#125;)\n    if err !&#x3D; nil &#123;\n        return shim.Error(err.Error())\n    &#125;\n\n    return shim.Success([]byte(&quot;信息添加成功&quot;))\n&#125;\n\n&#x2F;&#x2F; 根据证书编号及姓名查询信息\n&#x2F;&#x2F; args: CertNo, name\nfunc (t *EducationChaincode) queryEduByCertNoAndName(stub shim.ChaincodeStubInterface, args []string) peer.Response &#123;\n\n    if len(args) !&#x3D; 2 &#123;\n        return shim.Error(&quot;给定的参数个数不符合要求&quot;)\n    &#125;\n    CertNo :&#x3D; args[0]\n    name :&#x3D; args[1]\n\n    &#x2F;&#x2F; 拼装CouchDB所需要的查询字符串(是标准的一个JSON串)\n    &#x2F;&#x2F; queryString :&#x3D; fmt.Sprintf(&quot;&#123;\\&quot;selector\\&quot;:&#123;\\&quot;docType\\&quot;:\\&quot;eduObj\\&quot;, \\&quot;CertNo\\&quot;:\\&quot;%s\\&quot;&#125;&#125;&quot;, CertNo)\n    queryString :&#x3D; fmt.Sprintf(&quot;&#123;\\&quot;selector\\&quot;:&#123;\\&quot;docType\\&quot;:\\&quot;%s\\&quot;, \\&quot;CertNo\\&quot;:\\&quot;%s\\&quot;, \\&quot;Name\\&quot;:\\&quot;%s\\&quot;&#125;&#125;&quot;, DOC_TYPE, CertNo, name)\n\n    &#x2F;&#x2F; 查询数据\n    result, err :&#x3D; getEduByQueryString(stub, queryString)\n    if err !&#x3D; nil &#123;\n        return shim.Error(&quot;根据证书编号及姓名查询信息时发生错误&quot;)\n    &#125;\n    if result &#x3D;&#x3D; nil &#123;\n        return shim.Error(&quot;根据指定的证书编号及姓名没有查询到相关的信息&quot;)\n    &#125;\n    return shim.Success(result)\n&#125;\n\n&#x2F;&#x2F; 根据身份证号码查询详情（溯源）\n&#x2F;&#x2F; args: entityID\nfunc (t *EducationChaincode) queryEduInfoByEntityID(stub shim.ChaincodeStubInterface, args []string) peer.Response &#123;\n    if len(args) !&#x3D; 1 &#123;\n        return shim.Error(&quot;给定的参数个数不符合要求&quot;)\n    &#125;\n\n    &#x2F;&#x2F; 根据身份证号码查询edu状态\n    b, err :&#x3D; stub.GetState(args[0])\n    if err !&#x3D; nil &#123;\n        return shim.Error(&quot;根据身份证号码查询信息失败&quot;)\n    &#125;\n\n    if b &#x3D;&#x3D; nil &#123;\n        return shim.Error(&quot;根据身份证号码没有查询到相关的信息&quot;)\n    &#125;\n\n    &#x2F;&#x2F; 对查询到的状态进行反序列化\n    var edu Education\n    err &#x3D; json.Unmarshal(b, &amp;edu)\n    if err !&#x3D; nil &#123;\n        return  shim.Error(&quot;反序列化edu信息失败&quot;)\n    &#125;\n\n    &#x2F;&#x2F; 获取历史变更数据\n    iterator, err :&#x3D; stub.GetHistoryForKey(edu.EntityID)\n    if err !&#x3D; nil &#123;\n        return shim.Error(&quot;根据指定的身份证号码查询对应的历史变更数据失败&quot;)\n    &#125;\n    defer iterator.Close()\n\n    &#x2F;&#x2F; 迭代处理\n    var historys []HistoryItem\n    var hisEdu Education\n    for iterator.HasNext() &#123;\n        hisData, err :&#x3D; iterator.Next()\n        if err !&#x3D; nil &#123;\n            return shim.Error(&quot;获取edu的历史变更数据失败&quot;)\n        &#125;\n\n        var historyItem HistoryItem\n        historyItem.TxId &#x3D; hisData.TxId\n        json.Unmarshal(hisData.Value, &amp;hisEdu)\n\n        if hisData.Value &#x3D;&#x3D; nil &#123;\n            var empty Education\n            historyItem.Education &#x3D; empty\n        &#125;else &#123;\n            historyItem.Education &#x3D; hisEdu\n        &#125;\n\n        historys &#x3D; append(historys, historyItem)\n\n    &#125;\n\n    edu.Historys &#x3D; historys\n\n    &#x2F;&#x2F; 返回\n    result, err :&#x3D; json.Marshal(edu)\n    if err !&#x3D; nil &#123;\n        return shim.Error(&quot;序列化edu信息时发生错误&quot;)\n    &#125;\n    return shim.Success(result)\n&#125;\n\n&#x2F;&#x2F; 根据身份证号更新信息\n&#x2F;&#x2F; args: educationObject\nfunc (t *EducationChaincode) updateEdu(stub shim.ChaincodeStubInterface, args []string) peer.Response &#123;\n    if len(args) !&#x3D; 2&#123;\n        return shim.Error(&quot;给定的参数个数不符合要求&quot;)\n    &#125;\n\n    var info Education\n    err :&#x3D; json.Unmarshal([]byte(args[0]), &amp;info)\n    if err !&#x3D; nil &#123;\n        return  shim.Error(&quot;反序列化edu信息失败&quot;)\n    &#125;\n\n    &#x2F;&#x2F; 根据身份证号码查询信息\n    result, bl :&#x3D; GetEduInfo(stub, info.EntityID)\n    if !bl&#123;\n        return shim.Error(&quot;根据身份证号码查询信息时发生错误&quot;)\n    &#125;\n\n    result.EnrollDate &#x3D; info.EnrollDate\n    result.GraduationDate &#x3D; info.GraduationDate\n    result.SchoolName &#x3D; info.SchoolName\n    result.Major &#x3D; info.Major\n    result.QuaType &#x3D; info.QuaType\n    result.Length &#x3D; info.Length\n    result.Mode &#x3D; info.Mode\n    result.Level &#x3D; info.Level\n    result.Graduation &#x3D; info.Graduation\n    result.CertNo &#x3D; info.CertNo;\n\n    _, bl &#x3D; PutEdu(stub, result)\n    if !bl &#123;\n        return shim.Error(&quot;保存信息信息时发生错误&quot;)\n    &#125;\n\n    err &#x3D; stub.SetEvent(args[1], []byte&#123;&#125;)\n    if err !&#x3D; nil &#123;\n        return shim.Error(err.Error())\n    &#125;\n\n    return shim.Success([]byte(&quot;信息更新成功&quot;))\n&#125;\n\n&#x2F;&#x2F; 根据身份证号删除信息（暂不对外提供）\n&#x2F;&#x2F; args: entityID\nfunc (t *EducationChaincode) delEdu(stub shim.ChaincodeStubInterface, args []string) peer.Response &#123;\n    if len(args) !&#x3D; 2&#123;\n        return shim.Error(&quot;给定的参数个数不符合要求&quot;)\n    &#125;\n\n    &#x2F;*var edu Education\n    result, bl :&#x3D; GetEduInfo(stub, info.EntityID)\n    err :&#x3D; json.Unmarshal(result, &amp;edu)\n    if err !&#x3D; nil &#123;\n        return shim.Error(&quot;反序列化信息时发生错误&quot;)\n    &#125;*&#x2F;\n\n    err :&#x3D; stub.DelState(args[0])\n    if err !&#x3D; nil &#123;\n        return shim.Error(&quot;删除信息时发生错误&quot;)\n    &#125;\n\n    err &#x3D; stub.SetEvent(args[1], []byte&#123;&#125;)\n    if err !&#x3D; nil &#123;\n        return shim.Error(err.Error())\n    &#125;\n\n    return shim.Success([]byte(&quot;信息删除成功&quot;))\n&#125;</code></pre>\n<p>链码编写好以后，我们需要使用 Fabric-SDK-Go 提供的相关 API 来实现对链码的安装及实例化操作，而无需在命令提示符中输入烦锁的相关操作命令。接下来依次完成如下步骤：</p>\n<ul>\n<li>安装依赖：相关内容及代码请参见第十一章第二节中的内容。</li>\n<li>链码自动布署：相关内容代码请参见第十一章 第四节中的内容。</li>\n</ul>\n<h2 id=\"6-业务层实现\"><a href=\"#6-业务层实现\" class=\"headerlink\" title=\"6.业务层实现\"></a>6.业务层实现</h2><h3 id=\"6-1-事件处理\"><a href=\"#6-1-事件处理\" class=\"headerlink\" title=\"6.1 事件处理\"></a>6.1 事件处理</h3><p>在项目根目录下创建一个 <code>service</code> 目录作为业务层，在业务层中，我们使用 <code>Fabric-SDK-Go</code> 提供的接口对象调用相应的 API 以实现对链码的访问，最终实现对分类账本中的状态进行操作。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ cd $GOPATH&#x2F;src&#x2F;github.com&#x2F;kongyixueyuan.com&#x2F;education\n$ mkdir service</code></pre>\n<p>在 <code>service</code> 目录下创建 <code>domain.go</code> 文件并进行编辑， 声明一个结构体及对事件相关而封装的源代码</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ vim service&#x2F;domain.go</code></pre>\n<p><code>domain.go</code> 文件完整内容如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;**\n  @Author : hanxiaodong\n*&#x2F;\npackage service\n\nimport (\n    &quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;client&#x2F;channel&quot;\n    &quot;fmt&quot;\n    &quot;time&quot;\n    &quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;common&#x2F;providers&#x2F;fab&quot;\n)\n\ntype Education struct &#123;\n    ObjectType    string    &#96;json:&quot;docType&quot;&#96;\n    Name    string    &#96;json:&quot;Name&quot;&#96;        &#x2F;&#x2F; 姓名\n    Gender    string    &#96;json:&quot;Gender&quot;&#96;        &#x2F;&#x2F; 性别\n    Nation    string    &#96;json:&quot;Nation&quot;&#96;        &#x2F;&#x2F; 民族\n    EntityID    string    &#96;json:&quot;EntityID&quot;&#96;        &#x2F;&#x2F; 身份证号\n    Place    string    &#96;json:&quot;Place&quot;&#96;        &#x2F;&#x2F; 籍贯\n    BirthDay    string    &#96;json:&quot;BirthDay&quot;&#96;        &#x2F;&#x2F; 出生日期\n    EnrollDate    string    &#96;json:&quot;EnrollDate&quot;&#96;        &#x2F;&#x2F; 入学日期\n    GraduationDate    string    &#96;json:&quot;GraduationDate&quot;&#96;    &#x2F;&#x2F; 毕（结）业日期\n    SchoolName    string    &#96;json:&quot;SchoolName&quot;&#96;    &#x2F;&#x2F; 学校名称\n    Major    string    &#96;json:&quot;Major&quot;&#96;    &#x2F;&#x2F; 专业\n    QuaType    string    &#96;json:&quot;QuaType&quot;&#96;    &#x2F;&#x2F; 学历类别\n    Length    string    &#96;json:&quot;Length&quot;&#96;    &#x2F;&#x2F; 学制\n    Mode    string    &#96;json:&quot;Mode&quot;&#96;    &#x2F;&#x2F; 学习形式\n    Level    string    &#96;json:&quot;Level&quot;&#96;    &#x2F;&#x2F; 层次\n    Graduation    string    &#96;json:&quot;Graduation&quot;&#96;    &#x2F;&#x2F; 毕（结）业\n    CertNo    string    &#96;json:&quot;CertNo&quot;&#96;    &#x2F;&#x2F; 证书编号\n\n    Photo    string    &#96;json:&quot;Photo&quot;&#96;    &#x2F;&#x2F; 照片\n\n    Historys    []HistoryItem    &#x2F;&#x2F; 当前edu的历史记录\n&#125;\n\ntype HistoryItem struct &#123;\n    TxId    string\n    Education    Education\n&#125;\n\ntype ServiceSetup struct &#123;\n    ChaincodeID    string\n    Client    *channel.Client\n&#125;\n\nfunc regitserEvent(client *channel.Client, chaincodeID, eventID string) (fab.Registration, &lt;-chan *fab.CCEvent) &#123;\n\n    reg, notifier, err :&#x3D; client.RegisterChaincodeEvent(chaincodeID, eventID)\n    if err !&#x3D; nil &#123;\n        fmt.Println(&quot;注册链码事件失败: %s&quot;, err)\n    &#125;\n    return reg, notifier\n&#125;\n\nfunc eventResult(notifier &lt;-chan *fab.CCEvent, eventID string) error &#123;\n    select &#123;\n    case ccEvent :&#x3D; &lt;-notifier:\n        fmt.Printf(&quot;接收到链码事件: %v\\n&quot;, ccEvent)\n    case &lt;-time.After(time.Second * 20):\n        return fmt.Errorf(&quot;不能根据指定的事件ID接收到相应的链码事件(%s)&quot;, eventID)\n    &#125;\n    return nil\n&#125;</code></pre>\n<h3 id=\"6-2-业务层调用链码实现添加状态\"><a href=\"#6-2-业务层调用链码实现添加状态\" class=\"headerlink\" title=\"6.2 业务层调用链码实现添加状态\"></a>6.2 业务层调用链码实现添加状态</h3><p>在 <code>service</code> 目录下创建 <code>eduService.go</code> 文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ vim service&#x2F;eduService.go</code></pre>\n<p>在 <code>eduService.go</code> 文件中编写内容如下，通过一个 <code>SaveEdu</code> 函数实现链码的调用，向分类账本中添加状态的功能：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;**\n  author: hanxiaodong\n  QQ群（专业Fabric交流群）：862733552\n *&#x2F;\npackage service\n\nimport (\n    &quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;client&#x2F;channel&quot;\n    &quot;encoding&#x2F;json&quot;\n)\n\nfunc (t *ServiceSetup) SaveEdu(edu Education) (string, error) &#123;\n\n    eventID :&#x3D; &quot;eventAddEdu&quot;\n    reg, notifier :&#x3D; regitserEvent(t.Client, t.ChaincodeID, eventID)\n    defer t.Client.UnregisterChaincodeEvent(reg)\n\n    &#x2F;&#x2F; 将edu对象序列化成为字节数组\n    b, err :&#x3D; json.Marshal(edu)\n    if err !&#x3D; nil &#123;\n        return &quot;&quot;, fmt.Errorf(&quot;指定的edu对象序列化时发生错误&quot;)\n    &#125;\n\n    req :&#x3D; channel.Request&#123;ChaincodeID: t.ChaincodeID, Fcn: &quot;addEdu&quot;, Args: [][]byte&#123;b, []byte(eventID)&#125;&#125;\n    respone, err :&#x3D; t.Client.Execute(req)\n    if err !&#x3D; nil &#123;\n        return &quot;&quot;, err\n    &#125;\n\n    err &#x3D; eventResult(notifier, eventID)\n    if err !&#x3D; nil &#123;\n        return &quot;&quot;, err\n    &#125;\n\n    return string(respone.TransactionID), nil\n&#125;</code></pre>\n<p><strong>测试添加状态</strong></p>\n<p>编辑 <code>main.go</code> 文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ vim main.go</code></pre>\n<p><code>main.go</code> 中创建两个 <code>edu</code> 个对象，并调用 <code>SaveEdu</code> 函数，内容如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;**\n  author: hanxiaodong\n *&#x2F;\n\npackage main\n\nimport (\n    [......]\n    &quot;github.com&#x2F;kongyixueyuan.com&#x2F;education&#x2F;service&quot;\n)\n\n[......]\n    &#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F;\n\n    serviceSetup :&#x3D; service.ServiceSetup&#123;\n        ChaincodeID:EduCC,\n        Client:channelClient,\n    &#125;\n\n    edu :&#x3D; service.Education&#123;\n        Name: &quot;张三&quot;,\n        Gender: &quot;男&quot;,\n        Nation: &quot;汉&quot;,\n        EntityID: &quot;101&quot;,\n        Place: &quot;北京&quot;,\n        BirthDay: &quot;1991年01月01日&quot;,\n        EnrollDate: &quot;2009年9月&quot;,\n        GraduationDate: &quot;2013年7月&quot;,\n        SchoolName: &quot;中国政法大学&quot;,\n        Major: &quot;社会学&quot;,\n        QuaType: &quot;普通&quot;,\n        Length: &quot;四年&quot;,\n        Mode: &quot;普通全日制&quot;,\n        Level: &quot;本科&quot;,\n        Graduation: &quot;毕业&quot;,\n        CertNo: &quot;111&quot;,\n        Photo: &quot;&#x2F;static&#x2F;phone&#x2F;11.png&quot;,\n    &#125;\n\n    edu2 :&#x3D; service.Education&#123;\n        Name: &quot;李四&quot;,\n        Gender: &quot;男&quot;,\n        Nation: &quot;汉&quot;,\n        EntityID: &quot;102&quot;,\n        Place: &quot;上海&quot;,\n        BirthDay: &quot;1992年02月01日&quot;,\n        EnrollDate: &quot;2010年9月&quot;,\n        GraduationDate: &quot;2014年7月&quot;,\n        SchoolName: &quot;中国人民大学&quot;,\n        Major: &quot;行政管理&quot;,\n        QuaType: &quot;普通&quot;,\n        Length: &quot;四年&quot;,\n        Mode: &quot;普通全日制&quot;,\n        Level: &quot;本科&quot;,\n        Graduation: &quot;毕业&quot;,\n        CertNo: &quot;222&quot;,\n        Photo: &quot;&#x2F;static&#x2F;phone&#x2F;22.png&quot;,\n    &#125;\n\n    msg, err :&#x3D; serviceSetup.SaveEdu(edu)\n    if err !&#x3D; nil &#123;\n        fmt.Println(err.Error())\n    &#125;else &#123;\n        fmt.Println(&quot;信息发布成功, 交易编号为: &quot; + msg)\n    &#125;\n\n    msg, err &#x3D; serviceSetup.SaveEdu(edu2)\n    if err !&#x3D; nil &#123;\n        fmt.Println(err.Error())\n    &#125;else &#123;\n        fmt.Println(&quot;信息发布成功, 交易编号为: &quot; + msg)\n    &#125;    \n\n    &#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F;\n\n&#125;</code></pre>\n<p>执行 <code>make</code> 命令运行应用程序</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ make</code></pre>\n<p>执行后如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/6297ffe2e5ee4a3e8945fd9c10e09a18.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"6-3-调用链码实现根据证书编号与名称查询状态\"><a href=\"#6-3-调用链码实现根据证书编号与名称查询状态\" class=\"headerlink\" title=\"6.3 调用链码实现根据证书编号与名称查询状态\"></a>6.3 调用链码实现根据证书编号与名称查询状态</h3><p>通过上面的 <code>SaveEdu(edu Education)</code> 函数，实现了向分类账本中添加状态，那么我们还需要实现从该分类账本中根据指定的条件查询出相应的状态，编辑 <code>service/eduService.go</code> 文件，向该文件中添加实现根据证书编号与姓名查询状态的相应代码。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ vim service&#x2F;eduService.go</code></pre>\n<p>定义一个 <code>FindEduByCertNoAndName</code> 函数，接收两个字符串类型的参数，分别代表证书编号与姓名，该函数实现通过调用链码而实现查询状态的功能，该函数完整代码如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">[......]\n\nfunc (t *ServiceSetup) FindEduByCertNoAndName(certNo, name string) ([]byte, error)&#123;\n\n    req :&#x3D; channel.Request&#123;ChaincodeID: t.ChaincodeID, Fcn: &quot;queryEduByCertNoAndName&quot;, Args: [][]byte&#123;[]byte(certNo), []byte(name)&#125;&#125;\n    respone, err :&#x3D; t.Client.Query(req)\n    if err !&#x3D; nil &#123;\n        return []byte&#123;0x00&#125;, err\n    &#125;\n\n    return respone.Payload, nil\n&#125;</code></pre>\n<p><strong>测试根据证书编号与名称查询状态</strong></p>\n<p>编辑 <code>main.go</code> 文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ vim main.go</code></pre>\n<p>在 <code>main.go</code> 文件中添加调用代码如下内容：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">[......]\n\n    &#x2F;&#x2F; 根据证书编号与名称查询信息\n    result, err :&#x3D; serviceSetup.FindEduByCertNoAndName(&quot;222&quot;,&quot;李四&quot;)\n    if err !&#x3D; nil &#123;\n        fmt.Println(err.Error())\n    &#125; else &#123;\n        var edu service.Education\n        json.Unmarshal(result, &amp;edu)\n        fmt.Println(&quot;根据证书编号与姓名查询信息成功：&quot;)\n        fmt.Println(edu)\n    &#125;\n\n    &#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F;\n\n&#125;</code></pre>\n<p>执行 <code>make</code> 命令运行应用程序</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ make</code></pre>\n<h3 id=\"6-4-调用链码实现根据身份证号码查询状态\"><a href=\"#6-4-调用链码实现根据身份证号码查询状态\" class=\"headerlink\" title=\"6.4 调用链码实现根据身份证号码查询状态\"></a>6.4 调用链码实现根据身份证号码查询状态</h3><p>通过上面的 <code>FindEduByCertNoAndName(certNo, name string)</code> 函数，实现从该分类账本中根据指定的证书编号与姓名查询出相应的状态，下面我们来实现根据身份证号码查询状态的功能，编辑 <code>service/eduService.go</code> 文件，向该文件中添加实现根据 key 查询状态的相应代码。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ vim service&#x2F;eduService.go</code></pre>\n<p>定义一个 <code>FindEduInfoByEntityID</code> 函数，接收一个字符串类型的参数，代表身份证号码（key），该函数实现通过调用链码而实现查询状态的功能，该函数完整代码如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">[......]\n\nfunc (t *ServiceSetup) FindEduInfoByEntityID(entityID string) ([]byte, error)&#123;\n\n    req :&#x3D; channel.Request&#123;ChaincodeID: t.ChaincodeID, Fcn: &quot;queryEduInfoByEntityID&quot;, Args: [][]byte&#123;[]byte(entityID)&#125;&#125;\n    respone, err :&#x3D; t.Client.Query(req)\n    if err !&#x3D; nil &#123;\n        return []byte&#123;0x00&#125;, err\n    &#125;\n\n    return respone.Payload, nil\n&#125;</code></pre>\n<p><strong>测试根据身份证号码查询状态</strong></p>\n<p>编辑 <code>main.go</code> 文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ vim main.go</code></pre>\n<p>在 <code>main.go</code> 文件中添加调用代码如下内容：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">[......]\n\n    &#x2F;&#x2F; 根据身份证号码查询信息\n    result, err &#x3D; serviceSetup.FindEduInfoByEntityID(&quot;101&quot;)\n    if err !&#x3D; nil &#123;\n        fmt.Println(err.Error())\n    &#125; else &#123;\n        var edu service.Education\n        json.Unmarshal(result, &amp;edu)\n        fmt.Println(&quot;根据身份证号码查询信息成功：&quot;)\n        fmt.Println(edu)\n    &#125;\n\n    &#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F;\n\n&#125;</code></pre>\n<p>执行 <code>make</code> 命令运行应用程序</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ make</code></pre>\n<h3 id=\"6-5-调用链码实现修改-添加信息状态\"><a href=\"#6-5-调用链码实现修改-添加信息状态\" class=\"headerlink\" title=\"6.5 调用链码实现修改/添加信息状态\"></a>6.5 调用链码实现修改/添加信息状态</h3><p>在一些情况下，有些人才会利用工作的业余时间进修，从而提升学历层次，我们必须要考虑到这种情况，所以需要应用程序实现对已有人员的信息进行编辑的功能；但是编辑并不能将之前的学历信息删除，而是在保留之前状态的基础之上添加新的状态，区块链技术很好的帮我们解决了这个问题。编辑 <code>service/eduService.go</code> 文件，向该文件中添加修改已有状态的相关代码。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ vim service&#x2F;eduService.go</code></pre>\n<p>定义一个 <code>ModifyEdu</code> 函数，接收一个 <code>Education</code> 类型的对象，该函数实现通过调用链码而实现对已存在的状态进行修改（添加新信息）的功能，该函数完整代码如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">[......]\n\nfunc (t *ServiceSetup) ModifyEdu(edu Education) (string, error) &#123;\n\n    eventID :&#x3D; &quot;eventModifyEdu&quot;\n    reg, notifier :&#x3D; regitserEvent(t.Client, t.ChaincodeID, eventID)\n    defer t.Client.UnregisterChaincodeEvent(reg)\n\n    &#x2F;&#x2F; 将edu对象序列化成为字节数组\n    b, err :&#x3D; json.Marshal(edu)\n    if err !&#x3D; nil &#123;\n        return &quot;&quot;, fmt.Errorf(&quot;指定的edu对象序列化时发生错误&quot;)\n    &#125;\n\n    req :&#x3D; channel.Request&#123;ChaincodeID: t.ChaincodeID, Fcn: &quot;updateEdu&quot;, Args: [][]byte&#123;b, []byte(eventID)&#125;&#125;\n    respone, err :&#x3D; t.Client.Execute(req)\n    if err !&#x3D; nil &#123;\n        return &quot;&quot;, err\n    &#125;\n\n    err &#x3D; eventResult(notifier, eventID)\n    if err !&#x3D; nil &#123;\n        return &quot;&quot;, err\n    &#125;\n\n    return string(respone.TransactionID), nil\n&#125;</code></pre>\n<p><strong>测试修改状态</strong></p>\n<p>编辑 <code>main.go</code> 文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ vim main.go</code></pre>\n<p>在 <code>main.go</code> 文件中添加调用代码如下内容：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">[......]\n\n    &#x2F;&#x2F; 修改&#x2F;添加信息\n    info :&#x3D; service.Education&#123;\n        Name: &quot;张三&quot;,\n        Gender: &quot;男&quot;,\n        Nation: &quot;汉&quot;,\n        EntityID: &quot;101&quot;,\n        Place: &quot;北京&quot;,\n        BirthDay: &quot;1991年01月01日&quot;,\n        EnrollDate: &quot;2013年9月&quot;,\n        GraduationDate: &quot;2015年7月&quot;,\n        SchoolName: &quot;中国政法大学&quot;,\n        Major: &quot;社会学&quot;,\n        QuaType: &quot;普通&quot;,\n        Length: &quot;两年&quot;,\n        Mode: &quot;普通全日制&quot;,\n        Level: &quot;研究生&quot;,\n        Graduation: &quot;毕业&quot;,\n        CertNo: &quot;333&quot;,\n        Photo: &quot;&#x2F;static&#x2F;phone&#x2F;11.png&quot;,\n    &#125;\n    msg, err &#x3D; serviceSetup.ModifyEdu(info)\n    if err !&#x3D; nil &#123;\n        fmt.Println(err.Error())\n    &#125;else &#123;\n        fmt.Println(&quot;信息操作成功, 交易编号为: &quot; + msg)\n    &#125;\n\n    &#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F;\n\n&#125;</code></pre>\n<p>执行 <code>make</code> 命令运行应用程序</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ make</code></pre>\n<p><strong>查看修改之后的状态（根据身份证号码）</strong></p>\n<p>状态被修改之后，我们为了确认是否真正修改成功，所以需要调用已经编写好的 <code>FindEduInfoByEntityID(entityID string)</code> 函数实现查询详情的功能。</p>\n<p>编辑 <code>main.go</code> 文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ vim main.go</code></pre>\n<p>在 <code>main.go</code> 文件中添加调用代码如下内容：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">[......]\n\n    &#x2F;&#x2F; 根据身份证号码查询信息\n    result, err &#x3D; serviceSetup.FindEduInfoByEntityID(&quot;101&quot;)\n    if err !&#x3D; nil &#123;\n        fmt.Println(err.Error())\n    &#125; else &#123;\n        var edu service.Education\n        json.Unmarshal(result, &amp;edu)\n        fmt.Println(&quot;根据身份证号码查询信息成功：&quot;)\n        fmt.Println(edu)\n    &#125;\n\n    &#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F;\n\n&#125;</code></pre>\n<p>执行 <code>make</code> 命令运行应用程序</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ make</code></pre>\n<p>从终端的输出结果中可以看到详情信息已从分类账本中被成功查询，接下来我们使用根据证书编号与姓名查询修改之后的信息，看看是否正确</p>\n<p><strong>查看修改之后的最新状态（根据证书编号与姓名）</strong></p>\n<p>状态被修改之后，我们为了确认是否真正修改成功，所以需要调用已经编写好的 <code>FindEduInfoByEntityID(entityID string)</code> 函数实现查询详情的功能。</p>\n<p>编辑 <code>main.go</code> 文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ vim main.go</code></pre>\n<p>在 <code>main.go</code> 文件中添加调用代码如下内容：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">[......]\n\n    &#x2F;&#x2F; 根据证书编号与名称查询信息\n    result, err &#x3D; serviceSetup.FindEduByCertNoAndName(&quot;333&quot;,&quot;张三&quot;)\n    if err !&#x3D; nil &#123;\n        fmt.Println(err.Error())\n    &#125; else &#123;\n        var edu service.Education\n        json.Unmarshal(result, &amp;edu)\n        fmt.Println(&quot;根据证书编号与姓名查询信息成功：&quot;)\n        fmt.Println(edu)\n    &#125;\n\n    &#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F;\n\n&#125;</code></pre>\n<p>执行 <code>make</code> 命令运行应用程序</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ make</code></pre>\n<p>执行后如下图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/0234340fcf3b4828b61666cc540f5c3a.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/0e2d28650d604016a9c04fb1dbab7d0a.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"7-控制层实现\"><a href=\"#7-控制层实现\" class=\"headerlink\" title=\"7.控制层实现\"></a>7.控制层实现</h2><h3 id=\"7-1-设置系统用户\"><a href=\"#7-1-设置系统用户\" class=\"headerlink\" title=\"7.1 设置系统用户\"></a>7.1 设置系统用户</h3><p>通过业务层已经实现了利用 <code>fabric-sdk-go</code> 调用链码查询或操作分类账本状态，接下来，我们开始实现Web应用层，应用层将其分为两个部分，</p>\n<ul>\n<li><strong>控制层</strong></li>\n<li><strong>视图层</strong></li>\n</ul>\n<p>在项目根目录下新创建一个名为 <code>web</code> 的目录，用来存放Web应用层的所有内容</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ cd $GOPATH&#x2F;src&#x2F;github.com&#x2F;kongyixueyuan.com&#x2F;education\n$ mkdir -p web&#x2F;controller</code></pre>\n<p>在 <code>web</code> 目录下创建 <code>controller</code> 子目录，在该目录下创建 <code>userInfo.go</code> 、 <code>controllerResponse.go</code> 与 <code>controllerHandler.go</code> 三个文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ vim web&#x2F;controller&#x2F;userInfo.go</code></pre>\n<p><code>userInfo.go</code> 用来模拟RDB，保存系统用户信息，作为用户登录时核对用户信息，当然，这部分大家可以使用 <code>MySQL</code> 或其它数据库来实现。</p>\n<p><code>userInfo.go</code> 完整代码如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;**\n  @Author : hanxiaodong\n*&#x2F;\n\npackage controller\n\nimport &quot;github.com&#x2F;kongyixueyuan.com&#x2F;education&#x2F;service&quot;\n\ntype Application struct &#123;\n    Setup *service.ServiceSetup\n&#125;\n\ntype User struct &#123;\n    LoginName    string\n    Password    string\n    IsAdmin    string\n&#125;\n\n\nvar users []User\n\nfunc init() &#123;\n\n    admin :&#x3D; User&#123;LoginName:&quot;Hanxiaodong&quot;, Password:&quot;123456&quot;, IsAdmin:&quot;T&quot;&#125;\n    alice :&#x3D; User&#123;LoginName:&quot;ChainDesk&quot;, Password:&quot;123456&quot;, IsAdmin:&quot;T&quot;&#125;\n    bob :&#x3D; User&#123;LoginName:&quot;alice&quot;, Password:&quot;123456&quot;, IsAdmin:&quot;F&quot;&#125;\n    jack :&#x3D; User&#123;LoginName:&quot;bob&quot;, Password:&quot;123456&quot;, IsAdmin:&quot;F&quot;&#125;\n\n    users &#x3D; append(users, admin)\n    users &#x3D; append(users, alice)\n    users &#x3D; append(users, bob)\n    users &#x3D; append(users, jack)\n\n&#125;\n\nfunc isAdmin(cuser User) bool &#123;\n    if cuser.IsAdmin &#x3D;&#x3D; &quot;T&quot;&#123;\n        return true\n    &#125;\n    return false\n&#125;</code></pre>\n<h3 id=\"7-2-处理响应\"><a href=\"#7-2-处理响应\" class=\"headerlink\" title=\"7.2 处理响应\"></a>7.2 处理响应</h3><p>创建 <code>controllerResponse.go</code> 文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ vim web&#x2F;controller&#x2F;controllerResponse.go</code></pre>\n<p><code>controllerResponse.go</code> 主要实现对用户请求的响应，将响应结果返回给客户端浏览器。文件完整代码如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;**\n  @Author : hanxiaodong\n*&#x2F;\n\npackage controller\n\nimport (\n    &quot;net&#x2F;http&quot;\n    &quot;path&#x2F;filepath&quot;\n    &quot;html&#x2F;template&quot;\n    &quot;fmt&quot;\n)\n\nfunc ShowView(w http.ResponseWriter, r *http.Request, templateName string, data interface&#123;&#125;)  &#123;\n\n    &#x2F;&#x2F; 指定视图所在路径\n    pagePath :&#x3D; filepath.Join(&quot;web&quot;, &quot;tpl&quot;, templateName)\n\n    resultTemplate, err :&#x3D; template.ParseFiles(pagePath)\n    if err !&#x3D; nil &#123;\n        fmt.Printf(&quot;创建模板实例错误: %v&quot;, err)\n        return\n    &#125;\n\n    err &#x3D; resultTemplate.Execute(w, data)\n    if err !&#x3D; nil &#123;\n        fmt.Printf(&quot;在模板中融合数据时发生错误: %v&quot;, err)\n        &#x2F;&#x2F;fmt.Fprintf(w, &quot;显示在客户端浏览器中的错误信息&quot;)\n        return\n    &#125;\n\n&#125;</code></pre>\n<h3 id=\"7-3-处理请求\"><a href=\"#7-3-处理请求\" class=\"headerlink\" title=\"7.3 处理请求\"></a>7.3 处理请求</h3><p>创建 <code>controllerHandler.go</code> 文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ vim web&#x2F;controller&#x2F;controllerHandler.go</code></pre>\n<p><code>controllerHandler.go</code> 文件主要实现接收用户请求，并根据不同的用户请求调用业务层不同的函数，实现对分类账本的访问。其中需要声明并实现的函数：</p>\n<p>文件完整内容如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;**\n  @Author : hanxiaodong\n*&#x2F;\n\npackage controller\n\nimport (\n    &quot;net&#x2F;http&quot;\n    &quot;encoding&#x2F;json&quot;\n    &quot;github.com&#x2F;kongyixueyuan.com&#x2F;education&#x2F;service&quot;\n    &quot;fmt&quot;\n)\n\nvar cuser User\n\nfunc (app *Application) LoginView(w http.ResponseWriter, r *http.Request)  &#123;\n\n    ShowView(w, r, &quot;login.html&quot;, nil)\n&#125;\n\nfunc (app *Application) Index(w http.ResponseWriter, r *http.Request)  &#123;\n    ShowView(w, r, &quot;index.html&quot;, nil)\n&#125;\n\nfunc (app *Application) Help(w http.ResponseWriter, r *http.Request)  &#123;\n    data :&#x3D; &amp;struct &#123;\n        CurrentUser User\n    &#125;&#123;\n        CurrentUser:cuser,\n    &#125;\n    ShowView(w, r, &quot;help.html&quot;, data)\n&#125;\n\n&#x2F;&#x2F; 用户登录\nfunc (app *Application) Login(w http.ResponseWriter, r *http.Request) &#123;\n    loginName :&#x3D; r.FormValue(&quot;loginName&quot;)\n    password :&#x3D; r.FormValue(&quot;password&quot;)\n\n    var flag bool\n    for _, user :&#x3D; range users &#123;\n        if user.LoginName &#x3D;&#x3D; loginName &amp;&amp; user.Password &#x3D;&#x3D; password &#123;\n            cuser &#x3D; user\n            flag &#x3D; true\n            break\n        &#125;\n    &#125;\n\n    data :&#x3D; &amp;struct &#123;\n        CurrentUser User\n        Flag bool\n    &#125;&#123;\n        CurrentUser:cuser,\n        Flag:false,\n    &#125;\n\n    if flag &#123;\n        &#x2F;&#x2F; 登录成功\n        ShowView(w, r, &quot;index.html&quot;, data)\n    &#125;else&#123;\n        &#x2F;&#x2F; 登录失败\n        data.Flag &#x3D; true\n        data.CurrentUser.LoginName &#x3D; loginName\n        ShowView(w, r, &quot;login.html&quot;, data)\n    &#125;\n&#125;\n\n&#x2F;&#x2F; 用户登出\nfunc (app *Application) LoginOut(w http.ResponseWriter, r *http.Request)  &#123;\n    cuser &#x3D; User&#123;&#125;\n    ShowView(w, r, &quot;login.html&quot;, nil)\n&#125;\n\n&#x2F;&#x2F; 显示添加信息页面\nfunc (app *Application) AddEduShow(w http.ResponseWriter, r *http.Request)  &#123;\n    data :&#x3D; &amp;struct &#123;\n        CurrentUser User\n        Msg string\n        Flag bool\n    &#125;&#123;\n        CurrentUser:cuser,\n        Msg:&quot;&quot;,\n        Flag:false,\n    &#125;\n    ShowView(w, r, &quot;addEdu.html&quot;, data)\n&#125;\n\n&#x2F;&#x2F; 添加信息\nfunc (app *Application) AddEdu(w http.ResponseWriter, r *http.Request)  &#123;\n\n    edu :&#x3D; service.Education&#123;\n        Name:r.FormValue(&quot;name&quot;),\n        Gender:r.FormValue(&quot;gender&quot;),\n        Nation:r.FormValue(&quot;nation&quot;),\n        EntityID:r.FormValue(&quot;entityID&quot;),\n        Place:r.FormValue(&quot;place&quot;),\n        BirthDay:r.FormValue(&quot;birthDay&quot;),\n        EnrollDate:r.FormValue(&quot;enrollDate&quot;),\n        GraduationDate:r.FormValue(&quot;graduationDate&quot;),\n        SchoolName:r.FormValue(&quot;schoolName&quot;),\n        Major:r.FormValue(&quot;major&quot;),\n        QuaType:r.FormValue(&quot;quaType&quot;),\n        Length:r.FormValue(&quot;length&quot;),\n        Mode:r.FormValue(&quot;mode&quot;),\n        Level:r.FormValue(&quot;level&quot;),\n        Graduation:r.FormValue(&quot;graduation&quot;),\n        CertNo:r.FormValue(&quot;certNo&quot;),\n        Photo:r.FormValue(&quot;photo&quot;),\n    &#125;\n\n    app.Setup.SaveEdu(edu)\n\n    r.Form.Set(&quot;certNo&quot;, edu.CertNo)\n    r.Form.Set(&quot;name&quot;, edu.Name)\n    app.FindCertByNoAndName(w, r)\n&#125;\n\nfunc (app *Application) QueryPage(w http.ResponseWriter, r *http.Request)  &#123;\n    data :&#x3D; &amp;struct &#123;\n        CurrentUser User\n        Msg string\n        Flag bool\n    &#125;&#123;\n        CurrentUser:cuser,\n        Msg:&quot;&quot;,\n        Flag:false,\n    &#125;\n    ShowView(w, r, &quot;query.html&quot;, data)\n&#125;\n\n&#x2F;&#x2F; 根据证书编号与姓名查询信息\nfunc (app *Application) FindCertByNoAndName(w http.ResponseWriter, r *http.Request)  &#123;\n    certNo :&#x3D; r.FormValue(&quot;certNo&quot;)\n    name :&#x3D; r.FormValue(&quot;name&quot;)\n    result, err :&#x3D; app.Setup.FindEduByCertNoAndName(certNo, name)\n    var edu &#x3D; service.Education&#123;&#125;\n    json.Unmarshal(result, &amp;edu)\n\n    fmt.Println(&quot;根据证书编号与姓名查询信息成功：&quot;)\n    fmt.Println(edu)\n\n    data :&#x3D; &amp;struct &#123;\n        Edu service.Education\n        CurrentUser User\n        Msg string\n        Flag bool\n        History bool\n    &#125;&#123;\n        Edu:edu,\n        CurrentUser:cuser,\n        Msg:&quot;&quot;,\n        Flag:false,\n        History:false,\n    &#125;\n\n    if err !&#x3D; nil &#123;\n        data.Msg &#x3D; err.Error()\n        data.Flag &#x3D; true\n    &#125;\n\n    ShowView(w, r, &quot;queryResult.html&quot;, data)\n&#125;\n\nfunc (app *Application) QueryPage2(w http.ResponseWriter, r *http.Request)  &#123;\n    data :&#x3D; &amp;struct &#123;\n        CurrentUser User\n        Msg string\n        Flag bool\n    &#125;&#123;\n        CurrentUser:cuser,\n        Msg:&quot;&quot;,\n        Flag:false,\n    &#125;\n    ShowView(w, r, &quot;query2.html&quot;, data)\n&#125;\n\n&#x2F;&#x2F; 根据身份证号码查询信息\nfunc (app *Application) FindByID(w http.ResponseWriter, r *http.Request)  &#123;\n    entityID :&#x3D; r.FormValue(&quot;entityID&quot;)\n    result, err :&#x3D; app.Setup.FindEduInfoByEntityID(entityID)\n    var edu &#x3D; service.Education&#123;&#125;\n    json.Unmarshal(result, &amp;edu)\n\n    data :&#x3D; &amp;struct &#123;\n        Edu service.Education\n        CurrentUser User\n        Msg string\n        Flag bool\n        History bool\n    &#125;&#123;\n        Edu:edu,\n        CurrentUser:cuser,\n        Msg:&quot;&quot;,\n        Flag:false,\n        History:true,\n    &#125;\n\n    if err !&#x3D; nil &#123;\n        data.Msg &#x3D; err.Error()\n        data.Flag &#x3D; true\n    &#125;\n\n    ShowView(w, r, &quot;queryResult.html&quot;, data)\n&#125;\n\n&#x2F;&#x2F; 修改&#x2F;添加新信息\nfunc (app *Application) ModifyShow(w http.ResponseWriter, r *http.Request)  &#123;\n    &#x2F;&#x2F; 根据证书编号与姓名查询信息\n    certNo :&#x3D; r.FormValue(&quot;certNo&quot;)\n    name :&#x3D; r.FormValue(&quot;name&quot;)\n    result, err :&#x3D; app.Setup.FindEduByCertNoAndName(certNo, name)\n\n    var edu &#x3D; service.Education&#123;&#125;\n    json.Unmarshal(result, &amp;edu)\n\n    data :&#x3D; &amp;struct &#123;\n        Edu service.Education\n        CurrentUser User\n        Msg string\n        Flag bool\n    &#125;&#123;\n        Edu:edu,\n        CurrentUser:cuser,\n        Flag:true,\n        Msg:&quot;&quot;,\n    &#125;\n\n    if err !&#x3D; nil &#123;\n        data.Msg &#x3D; err.Error()\n        data.Flag &#x3D; true\n    &#125;\n\n    ShowView(w, r, &quot;modify.html&quot;, data)\n&#125;\n\n&#x2F;&#x2F; 修改&#x2F;添加新信息\nfunc (app *Application) Modify(w http.ResponseWriter, r *http.Request) &#123;\n    edu :&#x3D; service.Education&#123;\n        Name:r.FormValue(&quot;name&quot;),\n        Gender:r.FormValue(&quot;gender&quot;),\n        Nation:r.FormValue(&quot;nation&quot;),\n        EntityID:r.FormValue(&quot;entityID&quot;),\n        Place:r.FormValue(&quot;place&quot;),\n        BirthDay:r.FormValue(&quot;birthDay&quot;),\n        EnrollDate:r.FormValue(&quot;enrollDate&quot;),\n        GraduationDate:r.FormValue(&quot;graduationDate&quot;),\n        SchoolName:r.FormValue(&quot;schoolName&quot;),\n        Major:r.FormValue(&quot;major&quot;),\n        QuaType:r.FormValue(&quot;quaType&quot;),\n        Length:r.FormValue(&quot;length&quot;),\n        Mode:r.FormValue(&quot;mode&quot;),\n        Level:r.FormValue(&quot;level&quot;),\n        Graduation:r.FormValue(&quot;graduation&quot;),\n        CertNo:r.FormValue(&quot;certNo&quot;),\n        Photo:r.FormValue(&quot;photo&quot;),\n    &#125;\n\n    app.Setup.ModifyEdu(edu)\n\n    r.Form.Set(&quot;entityID&quot;, edu.EntityID)\n    app.FindByID(w, r)\n&#125;</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>提示：用户在做一些管理操作时需要验证其它是否有相应的操作权限，需要另外进行设计。</p></blockquote>\n<h3 id=\"7-4-指定路由\"><a href=\"#7-4-指定路由\" class=\"headerlink\" title=\"7.4 指定路由\"></a>7.4 指定路由</h3><p>在 <code>web</code> 目录下创建一个 <code>webServer.go</code> 文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ vim web&#x2F;webServer.go</code></pre>\n<p>该文件主要声明用户请求的路由信息，并且指定 Web 服务的启动信息。文件完整内容如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;**\n  @Author : hanxiaodong\n*&#x2F;\n\npackage web\n\nimport (\n    &quot;net&#x2F;http&quot;\n    &quot;fmt&quot;\n    &quot;github.com&#x2F;kongyixueyuan.com&#x2F;education&#x2F;web&#x2F;controller&quot;\n)\n\n\n&#x2F;&#x2F; 启动Web服务并指定路由信息\nfunc WebStart(app controller.Application)  &#123;\n\n    fs:&#x3D; http.FileServer(http.Dir(&quot;web&#x2F;static&quot;))\n    http.Handle(&quot;&#x2F;static&#x2F;&quot;, http.StripPrefix(&quot;&#x2F;static&#x2F;&quot;, fs))\n\n    &#x2F;&#x2F; 指定路由信息(匹配请求)\n    http.HandleFunc(&quot;&#x2F;&quot;, app.LoginView)\n    http.HandleFunc(&quot;&#x2F;login&quot;, app.Login)\n    http.HandleFunc(&quot;&#x2F;loginout&quot;, app.LoginOut)\n\n    http.HandleFunc(&quot;&#x2F;index&quot;, app.Index)\n    http.HandleFunc(&quot;&#x2F;help&quot;, app.Help)\n\n    http.HandleFunc(&quot;&#x2F;addEduInfo&quot;, app.AddEduShow)    &#x2F;&#x2F; 显示添加信息页面\n    http.HandleFunc(&quot;&#x2F;addEdu&quot;, app.AddEdu)    &#x2F;&#x2F; 提交信息请求\n\n    http.HandleFunc(&quot;&#x2F;queryPage&quot;, app.QueryPage)    &#x2F;&#x2F; 转至根据证书编号与姓名查询信息页面\n    http.HandleFunc(&quot;&#x2F;query&quot;, app.FindCertByNoAndName)    &#x2F;&#x2F; 根据证书编号与姓名查询信息\n\n    http.HandleFunc(&quot;&#x2F;queryPage2&quot;, app.QueryPage2)    &#x2F;&#x2F; 转至根据身份证号码查询信息页面\n    http.HandleFunc(&quot;&#x2F;query2&quot;, app.FindByID)    &#x2F;&#x2F; 根据身份证号码查询信息\n\n\n    http.HandleFunc(&quot;&#x2F;modifyPage&quot;, app.ModifyShow)    &#x2F;&#x2F; 修改信息页面\n    http.HandleFunc(&quot;&#x2F;modify&quot;, app.Modify)    &#x2F;&#x2F;  修改信息\n\n    http.HandleFunc(&quot;&#x2F;upload&quot;, app.UploadFile)\n\n    fmt.Println(&quot;启动Web服务, 监听端口号为: 9000&quot;)\n    err :&#x3D; http.ListenAndServe(&quot;:9000&quot;, nil)\n    if err !&#x3D; nil &#123;\n        fmt.Printf(&quot;Web服务启动失败: %v&quot;, err)\n    &#125;\n\n&#125;</code></pre>\n<p>未经授权禁止转载、改编，转载请注明出处！</p>\n<p>本文地址: <a href=\"https://www.chaindesk.cn/witbook/11/224\">https://www.chaindesk.cn/witbook/11/224</a></p>\n<p><img src=\"https://img-blog.csdnimg.cn/caa3b2810638406b896e6271d4345f8b.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"8-视图层实现\"><a href=\"#8-视图层实现\" class=\"headerlink\" title=\"8.视图层实现\"></a>8.视图层实现</h2><h3 id=\"8-1-目录结构\"><a href=\"#8-1-目录结构\" class=\"headerlink\" title=\"8.1 目录结构\"></a>8.1 目录结构</h3><p>在项目的web目录下新创建一个名为 <code>static</code> 的目录，用来存放Web应用视图层的所有静态内容</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ cd $GOPATH&#x2F;src&#x2F;github.com&#x2F;kongyixueyuan.com&#x2F;education\n$ mkdir web&#x2F;static</code></pre>\n<p><strong><code>web/static</code>目录下包括四个子目录，分别为：</strong></p>\n<ul>\n<li><code>web/static/css</code> ：用于存放控制页面布局及显示样式所需的 <code>CSS</code> 文件</li>\n<li><code>web/static/js</code> ：用于存放编写的与用户交互的 <code>JavaScript</code> 源代码文件</li>\n<li><code>web/static/images</code>：用户存放页面显示所需的所有图片文件</li>\n<li><code>web/static/photo</code>：用于存储添加信息时上传的图片文件</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ mkdir -p web&#x2F;static&#x2F;css\n$ mkdir -p web&#x2F;static&#x2F;images\n$ mkdir -p web&#x2F;static&#x2F;js\n$ mkdir -p web&#x2F;static&#x2F;photo</code></pre>\n<p>在项目的web目录下新创建一个名为 <code>tpl</code> 的目录，用来存放Web应用响应客户端的模板页面</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ mkdir web&#x2F;tpl</code></pre>\n<p>在 <code>web/tpl</code> 目录下主要有如下页面：</p>\n<ul>\n<li><code>login.html</code>：用户登录页面</li>\n<li><code>index.html</code>：用户登录成功之后进入的首页面</li>\n<li><code>help.html</code>： 显示帮助信息及相关操作的链接页面</li>\n<li><code>query.html</code>：根据证书编号与姓名查询的页面</li>\n<li><code>query2.html</code>：根据身份证号码查询的页面</li>\n<li><code>queryResult.html</code>：根据不同的查询请求显示查询结果的页面</li>\n<li><code>addEdu.html</code>：添加信息的页面</li>\n<li><code>modify.html</code>：修改信息的页面</li>\n</ul>\n<h3 id=\"8-2-相关源码实现\"><a href=\"#8-2-相关源码实现\" class=\"headerlink\" title=\"8.2 相关源码实现\"></a>8.2 相关源码实现</h3><p>相关源代码请参考：</p>\n<p>CSS 部分：</p>\n<p><a href=\"https://github.com/kevin-hf/education/blob/master/web/static/css/addEdu.css\">web/static/css/addEdu.css</a></p>\n<p><a href=\"https://github.com/kevin-hf/education/blob/master/web/static/css/bootstrap.min.css\">web/static/css/bootstrap.min.css</a></p>\n<p><a href=\"https://github.com/kevin-hf/education/blob/master/web/static/css/help.css\">web/static/css/help.css</a></p>\n<p><a href=\"https://github.com/kevin-hf/education/blob/master/web/static/css/index.css\">web/static/css/index.css</a></p>\n<p><a href=\"https://github.com/kevin-hf/education/blob/master/web/static/css/login.css\">web/static/css/login.css</a></p>\n<p><a href=\"https://github.com/kevin-hf/education/blob/master/web/static/css/query.css\">web/static/css/query.css</a></p>\n<p><a href=\"https://github.com/kevin-hf/education/blob/master/web/static/css/queryResult.css\">web/static/css/queryResult.css</a></p>\n<p><a href=\"https://github.com/kevin-hf/education/blob/master/web/static/css/reset.css\">web/static/css/reset.css</a><br><img src=\"https://img-blog.csdnimg.cn/aeb7e6659b6a485da7fa02427bb8c7f3.png\" alt=\"在这里插入图片描述\"></p>\n<p>JavaScript 部分</p>\n<p><a href=\"https://github.com/kevin-hf/education/blob/master/web/static/js/bootstrap.min.js\">web/static/js/bootstrap.min.js</a></p>\n<p><a href=\"https://github.com/kevin-hf/education/blob/master/web/static/js/jquery.min.js\">web/static/js/jquery.min.js</a><br><img src=\"https://img-blog.csdnimg.cn/ac30f96c11374de38d8bbc25d7446762.png\" alt=\"在这里插入图片描述\"></p>\n<p>HTML 页面模板部分：</p>\n<p><a href=\"https://github.com/kevin-hf/education/blob/master/web/tpl/addEdu.html\">web/tpl/addEdu.html</a></p>\n<p><a href=\"https://github.com/kevin-hf/education/blob/master/web/tpl/help.html\">web/tpl/help.html</a></p>\n<p><a href=\"https://github.com/kevin-hf/education/blob/master/web/tpl/index.html\">web/tpl/index.html</a></p>\n<p><a href=\"https://github.com/kevin-hf/education/blob/master/web/tpl/login.html\">web/tpl/login.html</a></p>\n<p><a href=\"https://github.com/kevin-hf/education/blob/master/web/tpl/modify.html\">web/tpl/modify.html</a></p>\n<p><a href=\"https://github.com/kevin-hf/education/blob/master/web/tpl/query.html\">web/tpl/query.html</a></p>\n<p><a href=\"https://github.com/kevin-hf/education/blob/master/web/tpl/query2.html\">web/tpl/query2.html</a></p>\n<p><a href=\"https://github.com/kevin-hf/education/blob/master/web/tpl/queryResult.html\">web/tpl/queryResult.html</a><br><img src=\"https://img-blog.csdnimg.cn/d7f3f984b856451a83861799a9932064.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/04bcec29bd0842cc9f9a29d95d733b62.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/5ca69d609a224e9e876492970c142672.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/2f472230d2594c6488d284ed35a5a66b.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"8-3-照片上传\"><a href=\"#8-3-照片上传\" class=\"headerlink\" title=\"8.3 照片上传\"></a>8.3 照片上传</h3><p>在添加信息时需要额外实现一个功能－添加照片</p>\n<p>使用jQuery Ajax功能实现</p>\n<p>HTML代码如下：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">  &lt;div class&#x3D;&quot;headImg&quot;&gt;\n      &lt;div class&#x3D;&quot;uploadImg&quot;&gt;\n          &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;&quot; value&#x3D;&quot;上传照片&quot; id&#x3D;&quot;file&quot;&gt;\n          +\n          &lt;!-- &lt;img src&#x3D;&quot;.&#x2F;images&#x2F;head.jpg&quot; alt&#x3D;&quot;&quot;&gt; --&gt;\n          &lt;img src&#x3D;&quot;&quot; alt&#x3D;&quot;&quot;&gt;\n      &lt;&#x2F;div&gt;\n      &lt;p&gt;请上传照片(120*160px)&lt;&#x2F;p&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;div&gt;</code></pre>\n<p>JavaScript代码如下:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> &#x2F;&#x2F; 上传图片\n$(&#39;#file&#39;).unbind(&#39;change&#39;).bind(&#39;change&#39;,function() &#123;\n    event.stopPropagation();\n    uploadFile(&#39;img&#39;);\n    return;\n&#125;);\n&#x2F;&#x2F; 头像图片\nvar artImg;\nfunction uploadFile(type) &#123;\n    event.stopPropagation();\n    let formData &#x3D; new FormData();\n    if( type &#x3D;&#x3D; &quot;img&quot;)&#123;\n        formData.append(&#39;file&#39;, $(&#39;#file&#39;)[0].files[0]);\n    &#125;\n    $.ajax(&#123;\n        url: &#39;&#x2F;upload&#39;,\n        type: &#39;POST&#39;,\n        cache: false,\n        data: formData,\n        processData: false,\n        dataType: &quot;json&quot;,\n        contentType: false\n    &#125;).done(function (res) &#123;\n        if (res.error &#x3D;&#x3D; &quot;0&quot;) &#123;\n            if( type &#x3D;&#x3D; &quot;img&quot;)&#123;\n                $(&#39;.uploadImg img&#39;).attr(&#39;src&#39;,res.result.path);\n                $(&#39;#photo&#39;).val(res.result.path)\n                return artImg &#x3D; res.result.path;\n            &#125;\n        &#125; else &#123;\n            alert(&quot;上传失败！&quot; + res.result.msg)\n        &#125;\n    &#125;).fail(function (res) &#123; &#125;);\n&#125;</code></pre>\n<p>在 <code>web/controller</code> 目录下创建一个 <code>upload.go</code> 文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ vim web&#x2F;controller&#x2F;upload.go</code></pre>\n<p><code>upload.go</code> 文件主要利用 Ajax完成 照片传功能的，完整代码如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;**\n  @Author : hanxiaodong\n*&#x2F;\n\npackage controller\n\nimport (\n    &quot;fmt&quot;\n    &quot;net&#x2F;http&quot;\n    &quot;io&#x2F;ioutil&quot;\n    &quot;crypto&#x2F;rand&quot;\n    &quot;path&#x2F;filepath&quot;\n    &quot;os&quot;\n    &quot;mime&quot;\n    &quot;log&quot;\n)\n\nfunc (app *Application) UploadFile(w http.ResponseWriter, r *http.Request)  &#123;\n\n    start :&#x3D; &quot;&#123;&quot;\n    content :&#x3D; &quot;&quot;\n    end :&#x3D; &quot;&#125;&quot;\n\n    file, _, err :&#x3D; r.FormFile(&quot;file&quot;)\n    if err !&#x3D; nil &#123;\n        content &#x3D; &quot;\\&quot;error\\&quot;:1,\\&quot;result\\&quot;:&#123;\\&quot;msg\\&quot;:\\&quot;指定了无效的文件\\&quot;,\\&quot;path\\&quot;:\\&quot;\\&quot;&#125;&quot;\n        w.Write([]byte(start + content + end))\n        return\n    &#125;\n    defer file.Close()\n\n    fileBytes, err :&#x3D; ioutil.ReadAll(file)\n    if err !&#x3D; nil &#123;\n        content &#x3D; &quot;\\&quot;error\\&quot;:1,\\&quot;result\\&quot;:&#123;\\&quot;msg\\&quot;:\\&quot;无法读取文件内容\\&quot;,\\&quot;path\\&quot;:\\&quot;\\&quot;&#125;&quot;\n        w.Write([]byte(start + content + end))\n        return\n    &#125;\n\n    filetype :&#x3D; http.DetectContentType(fileBytes)\n    &#x2F;&#x2F;log.Println(&quot;filetype &#x3D; &quot; + filetype)\n    switch filetype &#123;\n    case &quot;image&#x2F;jpeg&quot;, &quot;image&#x2F;jpg&quot;:\n    case &quot;image&#x2F;gif&quot;, &quot;image&#x2F;png&quot;:\n    case &quot;application&#x2F;pdf&quot;:\n        break\n    default:\n        content &#x3D; &quot;\\&quot;error\\&quot;:1,\\&quot;result\\&quot;:&#123;\\&quot;msg\\&quot;:\\&quot;文件类型错误\\&quot;,\\&quot;path\\&quot;:\\&quot;\\&quot;&#125;&quot;\n        w.Write([]byte(start + content + end))\n        return\n    &#125;\n\n    fileName :&#x3D; randToken(12)    &#x2F;&#x2F; 指定文件名\n    fileEndings, err :&#x3D; mime.ExtensionsByType(filetype)    &#x2F;&#x2F; 获取文件扩展名\n    &#x2F;&#x2F;log.Println(&quot;fileEndings &#x3D; &quot; + fileEndings[0])\n    &#x2F;&#x2F; 指定文件存储路径\n    newPath :&#x3D; filepath.Join(&quot;web&quot;, &quot;static&quot;, &quot;photo&quot;, fileName + fileEndings[0])\n    &#x2F;&#x2F;fmt.Printf(&quot;FileType: %s, File: %s\\n&quot;, filetype, newPath)\n\n    newFile, err :&#x3D; os.Create(newPath)\n    if err !&#x3D; nil &#123;\n        log.Println(&quot;创建文件失败：&quot; + err.Error())\n        content &#x3D; &quot;\\&quot;error\\&quot;:1,\\&quot;result\\&quot;:&#123;\\&quot;msg\\&quot;:\\&quot;创建文件失败\\&quot;,\\&quot;path\\&quot;:\\&quot;\\&quot;&#125;&quot;\n        w.Write([]byte(start + content + end))\n        return\n    &#125;\n    defer newFile.Close()\n\n    if _, err :&#x3D; newFile.Write(fileBytes); err !&#x3D; nil || newFile.Close() !&#x3D; nil &#123;\n        log.Println(&quot;写入文件失败：&quot; + err.Error())\n        content &#x3D; &quot;\\&quot;error\\&quot;:1,\\&quot;result\\&quot;:&#123;\\&quot;msg\\&quot;:\\&quot;保存文件内容失败\\&quot;,\\&quot;path\\&quot;:\\&quot;\\&quot;&#125;&quot;\n        w.Write([]byte(start + content + end))\n        return\n    &#125;\n\n    path :&#x3D; &quot;&#x2F;static&#x2F;photo&#x2F;&quot; + fileName + fileEndings[0]\n    content &#x3D; &quot;\\&quot;error\\&quot;:0,\\&quot;result\\&quot;:&#123;\\&quot;fileType\\&quot;:\\&quot;image&#x2F;png\\&quot;,\\&quot;path\\&quot;:\\&quot;&quot; + path + &quot;\\&quot;,\\&quot;fileName\\&quot;:\\&quot;ce73ac68d0d93de80d925b5a.png\\&quot;&#125;&quot;\n    w.Write([]byte(start + content + end))\n    return\n&#125;\n\nfunc randToken(len int) string &#123;\n    b :&#x3D; make([]byte, len)\n    rand.Read(b)\n    return fmt.Sprintf(&quot;%x&quot;, b)\n&#125;</code></pre>\n<h2 id=\"9-项目交互演示\"><a href=\"#9-项目交互演示\" class=\"headerlink\" title=\"9.项目交互演示\"></a>9.项目交互演示</h2><h3 id=\"9-1-启动Web服务\"><a href=\"#9-1-启动Web服务\" class=\"headerlink\" title=\"9.1 启动Web服务\"></a>9.1 启动Web服务</h3><p>最后编辑 <code>main.go</code> ，以便启动Web界面实现Web应用程序</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ vim main.go</code></pre>\n<p>添加如下内容:</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">import(\n    [......]\n    &quot;github.com&#x2F;kongyixueyuan.com&#x2F;education&#x2F;web&#x2F;controller&quot;\n    &quot;github.com&#x2F;kongyixueyuan.com&#x2F;education&#x2F;web&quot;\n)\n\nfunc main()&#123;&#125;\n    [......]\n\n    app :&#x3D; controller.Application&#123;\n        Setup: &amp;serviceSetup,\n    &#125;\n    web.WebStart(app)\n&#125;</code></pre>\n<p>应用项目开发完成后，可以直接启动用来查看效果。在命令提示符中输入 <code>make</code> 命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ make</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/0234340fcf3b4828b61666cc540f5c3a.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"9-2-访问页面\"><a href=\"#9-2-访问页面\" class=\"headerlink\" title=\"9.2 访问页面\"></a>9.2 访问页面</h3><p>项目启动成功之后，打开浏览器访问: <a href=\"http://localhost:9000/\">http://localhost:9000/</a></p>\n<p>根据访问的URL地址系统自动响应登录页面</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/cd4addf84a202785f5a0cd6801f678ca.png\" alt=\"login\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/096c9adc38714634abb8bd79a4ea7e61.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/392745223139430ebfd1e7eef54308ec.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/6eddfed16ba241b7803cb968473286c6.png\" alt=\"在这里插入图片描述\"><br>输入管理员账号及密码登录验证成功，则进入系统首页面<br><img src=\"https://img-blog.csdnimg.cn/dbb7ef2cedaf42ef8f73bb6fafb58265.png\" alt=\"在这里插入图片描述\"><br>在首页面中点击 <code>查询范围</code>链接，进入 <code>help</code>页面，</p>\n<p><img src=\"https://img-blog.csdnimg.cn/28e30db122474356b8540d132d507b94.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/b1fa6e0b6cf145e6a575c725e135c57c.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/112a0122c75d41b2a359d2a37f11bff3.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/c5a8557e45004711a860a6a50d20b149.png\" alt=\"在这里插入图片描述\"><br>点击添加学历信息链接进入，添加学历信息页面<br><img src=\"https://img-blog.csdnimg.cn/8337458160e94191ba800d68ec803a87.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/2984c64df1b44551b6a0081d2e262349.png\" alt=\"在这里插入图片描述\"><br>根据学历证书编号与姓名查询页面<br><img src=\"https://img-blog.csdnimg.cn/805d4d43e14e4ecdb7ab1e472e47f2b8.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/0e8078186e414717a3de7db4999bc7b2.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/7ba05ec248c34d2a96374dad7c32a88f.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"9-3-education运行\"><a href=\"#9-3-education运行\" class=\"headerlink\" title=\"9.3 education运行\"></a>9.3 education运行</h3><p>将<code>GOPATH</code>设置为<code>/root/go</code>,拉取项目：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cd $GOPATH&#x2F;src &amp;&amp; git clone https:&#x2F;&#x2F;github.com&#x2F;sxguan&#x2F;education.git</code></pre>\n<p>在<code>/etc/hosts</code>中添加：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">127.0.0.1  orderer.example.com\n127.0.0.1  peer0.org1.example.com\n127.0.0.1  peer1.org1.example.com</code></pre>\n<p>添加依赖：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cd education &amp;&amp; go mod tidy</code></pre>\n<p>运行项目：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">.&#x2F;clean_docker.sh</code></pre>\n<p>在<code>127.0.0.1:9000</code>进行访问</p>\n<p><img src=\"https://img-blog.csdnimg.cn/34ccdab66fd34966b10b88c2572a5566.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/7d714532294140e09451f4aaba1479ab.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/ef034fb72fea4a5f9bfb200533f8c324.png\" alt=\"在这里插入图片描述\"><img src=\"https://img-blog.csdnimg.cn/c22638cdcbd7494a9885b5abfab6aba0.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/a302ccf6d9ea43a7a974519e0879173f.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/08c70a99e6eb430883f39d8c09a157a1.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/c946afdd65684ecdadd37067dffed65d.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"10-课程知识总结\"><a href=\"#10-课程知识总结\" class=\"headerlink\" title=\"10.课程知识总结\"></a>10.课程知识总结</h2><h3 id=\"10-1课程实验总结\"><a href=\"#10-1课程实验总结\" class=\"headerlink\" title=\"10.1课程实验总结\"></a>10.1课程实验总结</h3><h4 id=\"10-1-1课程实验汇总\"><a href=\"#10-1-1课程实验汇总\" class=\"headerlink\" title=\"10.1.1课程实验汇总\"></a>10.1.1课程实验汇总</h4><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-q2eOlQQE-1671167271446)(C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216105743562.png)]</p>\n<p>算上这次的期末，一共十二次作业。</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-RefaYAB7-1671167271448)(C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216105945417.png)]</p>\n<p>在我的博客中，前四次是GO语言相关，后8次是区块链相关。</p>\n<p>二者链接如下 ：</p>\n<p><a href=\"https://algernon98.github.io/tags/search?slug=GO\">搜索结果 | 电子羊的秘密花园 (algernon98.github.io)</a></p>\n<p><a href=\"https://algernon98.github.io/tags/search/?slug=区块链\">搜索结果 | 电子羊的秘密花园 (algernon98.github.io)</a></p>\n<h5 id=\"10-1-1-1-实验一：go语言环境搭建及基础语法（w3cschool）\"><a href=\"#10-1-1-1-实验一：go语言环境搭建及基础语法（w3cschool）\" class=\"headerlink\" title=\"10.1.1.1 实验一：go语言环境搭建及基础语法（w3cschool）\"></a>10.1.1.1 实验一：go语言环境搭建及基础语法（w3cschool）</h5><h5 id=\"10-1-1-2-go语言基础及进阶\"><a href=\"#10-1-1-2-go语言基础及进阶\" class=\"headerlink\" title=\"10.1.1.2 go语言基础及进阶\"></a>10.1.1.2 go语言基础及进阶</h5><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-M3GvLOHE-1671167271449)(C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216111427905.png)]</p>\n<h5 id=\"10-1-1-3-http编程、go操作MYSQL以及Gin框架\"><a href=\"#10-1-1-3-http编程、go操作MYSQL以及Gin框架\" class=\"headerlink\" title=\"10.1.1.3 http编程、go操作MYSQL以及Gin框架\"></a>10.1.1.3 http编程、go操作MYSQL以及Gin框架</h5><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-bECfBDdS-1671167271449)(C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216111636503.png)]</p>\n<h5 id=\"10-1-1-4-docker（技术胖）\"><a href=\"#10-1-1-4-docker（技术胖）\" class=\"headerlink\" title=\"10.1.1.4 docker（技术胖）\"></a>10.1.1.4 docker（技术胖）</h5><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-q2S4Twey-1671167271449)(C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216111939520.png)]</p>\n<h5 id=\"10-1-1-5-启动fabric网络\"><a href=\"#10-1-1-5-启动fabric网络\" class=\"headerlink\" title=\"10.1.1.5 启动fabric网络\"></a>10.1.1.5 启动fabric网络</h5><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-EbKrGmcM-1671167271449)(C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216112111521.png)]</p>\n<h5 id=\"10-1-1-6-hyperledger-fabric网络搭建\"><a href=\"#10-1-1-6-hyperledger-fabric网络搭建\" class=\"headerlink\" title=\"10.1.1.6 hyperledger-fabric网络搭建\"></a>10.1.1.6 hyperledger-fabric网络搭建</h5><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-2b9vabhZ-1671167271450)(C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216112252582.png)]</p>\n<h5 id=\"10-1-1-7-两个视频实战（简单资产链码）\"><a href=\"#10-1-1-7-两个视频实战（简单资产链码）\" class=\"headerlink\" title=\"10.1.1.7 两个视频实战（简单资产链码）\"></a>10.1.1.7 两个视频实战（简单资产链码）</h5><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-MseHaoe4-1671167271450)(C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216112412058.png)]</p>\n<h5 id=\"10-1-1-8-链码与网络启动\"><a href=\"#10-1-1-8-链码与网络启动\" class=\"headerlink\" title=\"10.1.1.8 链码与网络启动\"></a>10.1.1.8 链码与网络启动</h5><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-l5JtELjj-1671167271450)(C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216112538446.png)]</p>\n<h5 id=\"10-1-1-9-三个示例（资产转移、链下数据存储）\"><a href=\"#10-1-1-9-三个示例（资产转移、链下数据存储）\" class=\"headerlink\" title=\"10.1.1.9 三个示例（资产转移、链下数据存储）\"></a>10.1.1.9 三个示例（资产转移、链下数据存储）</h5><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-k4uGA4Fu-1671167271451)(C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216112701824.png)]</p>\n<h5 id=\"10-1-1-10-链码分析\"><a href=\"#10-1-1-10-链码分析\" class=\"headerlink\" title=\"10.1.1.10 链码分析\"></a>10.1.1.10 链码分析</h5><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-cKXYBAii-1671167271451)(C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216112918537.png)]</p>\n<h5 id=\"10-1-1-11-两个综合实验\"><a href=\"#10-1-1-11-两个综合实验\" class=\"headerlink\" title=\"10.1.1.11 两个综合实验\"></a>10.1.1.11 两个综合实验</h5><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-rsAoFHBj-1671167271451)(C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216113035057.png)]</p>\n<h4 id=\"10-1-2实验总结\"><a href=\"#10-1-2实验总结\" class=\"headerlink\" title=\"10.1.2实验总结\"></a>10.1.2实验总结</h4><p>因为实验内容多而广，内容又有所重叠，所以在此给一个较为全面的总结：</p>\n<p>从w3cschool和技术胖学习go语言基础，再到初试docker和gin框架，最后利用hyperledger fabric构建区块链网络，虽然其中遇到了不少困难，但最终还是解决了。我在区块链三————也就是下图的实验中遇到的问题最多，这也是刚接触区块链的整体框架，生成创世区块、连接通道的部分，有几个问题困住了我整整三天，以至于那几天晚上都熬夜坐在电脑前debug。</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-EqWtmOhb-1671167271452)(C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216110825508.png)]</p>\n<p>但是付出也会获得回报，每当我把作业传上我的网站时，总会获得一种成就感————每周都能够获得新的知识，学习充实而忙碌。</p>\n<p>正如每一个实验结语中我说的那样，“这周实验做的很多，也学到了很多内容”。</p>\n<h3 id=\"10-2课程原理总结\"><a href=\"#10-2课程原理总结\" class=\"headerlink\" title=\"10.2课程原理总结\"></a>10.2课程原理总结</h3><h4 id=\"10-2-1环境配置\"><a href=\"#10-2-1环境配置\" class=\"headerlink\" title=\"10.2.1环境配置\"></a>10.2.1环境配置</h4><h4 id=\"10-2-2go语言基础\"><a href=\"#10-2-2go语言基础\" class=\"headerlink\" title=\"10.2.2go语言基础\"></a>10.2.2go语言基础</h4><h5 id=\"10-2-2-1go语言基础语法\"><a href=\"#10-2-2-1go语言基础语法\" class=\"headerlink\" title=\"10.2.2.1go语言基础语法\"></a>10.2.2.1go语言基础语法</h5><p><a href=\"https://algernon98.github.io/post/GO1\">【Go语言编程】（一） | 电子羊的秘密花园 (algernon98.github.io)</a></p>\n<p><img src=\"C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216095334945.png\" alt=\"image-20221216095334945\" style=\"zoom: 50%;\" /></p>\n<p><a href=\"https://algernon98.github.io/post/GO2\">【GO语言编程】（二） | 电子羊的秘密花园 (algernon98.github.io)</a></p>\n<h5 id=\"10-2-2-2channel通道\"><a href=\"#10-2-2-2channel通道\" class=\"headerlink\" title=\"10.2.2.2channel通道\"></a>10.2.2.2channel通道</h5><p><a href=\"https://algernon98.github.io/post/GO3\">【GO语言编程】（三） | 电子羊的秘密花园 (algernon98.github.io)</a></p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-RlbSsOnx-1671167271452)(C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216095647251.png)]</p>\n<h5 id=\"10-2-2-3gin框架\"><a href=\"#10-2-2-3gin框架\" class=\"headerlink\" title=\"10.2.2.3gin框架\"></a>10.2.2.3gin框架</h5><p><a href=\"https://algernon98.github.io/post/GO4\">【GO语言编程】（四） | 电子羊的秘密花园 (algernon98.github.io)</a></p>\n<h4 id=\"10-2-3区块链知识\"><a href=\"#10-2-3区块链知识\" class=\"headerlink\" title=\"10.2.3区块链知识\"></a>10.2.3区块链知识</h4><h5 id=\"10-2-3-1docker容器构建\"><a href=\"#10-2-3-1docker容器构建\" class=\"headerlink\" title=\"10.2.3.1docker容器构建\"></a>10.2.3.1docker容器构建</h5><p><a href=\"https://algernon98.github.io/post/区块链1\">【区块链技术与应用】（一） | 电子羊的秘密花园 (algernon98.github.io)</a></p>\n<p>dockerfile</p>\n<p>Dockerfile是一个包含用于组合映像的命令的文本文档。可以使用在命令行中调用任何命令。 Docker通过读取Dockerfile中的指令自动生成映像。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/c0c736ff48f04efba1e594e2ea346e68.png\" alt=\"请添加图片描述\"></p>\n<p>docker-compose</p>\n<p>我们可以把很多相关的命令写成一个xxx.sh文件，而且这些步骤也是相对固定的。</p>\n<p>这样直接运行sh文件，就可以逐一执行很多相关的Docker命令。这种形式可以减少出错和解决复用问题。Docker很贴心的为我们准备了一个专门的工具docker-compose，实现类似sh文件的功能。让我们更加轻松的实现多Docker命令的操作。</p>\n<p>你也可以把docker-compose就是把很多Docker命令写入一个专属的文件docker-compose.yml，然后执行这个文件，就可以直接启动我们想要的容器。docker-compose也为我们提供了对应的操作命令。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker-compose up</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/4c8a1c6dfc614782a1ab8f1d757c7c1e.png\" alt=\"在这里插入图片描述\"></p>\n<h5 id=\"10-2-3-2fabric网络\"><a href=\"#10-2-3-2fabric网络\" class=\"headerlink\" title=\"10.2.3.2fabric网络\"></a>10.2.3.2fabric网络</h5><p><a href=\"https://algernon98.github.io/post/区块链2\">【区块链技术与应用】（二） | 电子羊的秘密花园 (algernon98.github.io)</a></p>\n<p>本地编译组件：</p>\n<ul>\n<li>获取代码</li>\n<li>编译安装peer组件</li>\n<li>编译安装Orderer组件</li>\n<li>编译安装Fabric CA组件</li>\n<li>编译安装辅助配置工具</li>\n</ul>\n<p>本地方式启动Fabric网络：</p>\n<ul>\n<li>生成组织关系和身份证书</li>\n<li>生成系统通道初始区块</li>\n<li>生成新建应用通道配置交易</li>\n<li>生成锚节点配置更新文件</li>\n<li>启动Orderer节点</li>\n<li>启动Peer节点</li>\n<li>创建通道</li>\n<li>加入通道</li>\n<li>更新锚节点配置</li>\n</ul>\n<h5 id=\"10-2-3-3链码\"><a href=\"#10-2-3-3链码\" class=\"headerlink\" title=\"10.2.3.3链码\"></a>10.2.3.3链码</h5><p><a href=\"https://algernon98.github.io/post/区块链4\">【区块链技术与应用】（四） | 电子羊的秘密花园 (algernon98.github.io)</a></p>\n<p>以fabric-go-sdk为例</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cd .. &amp;&amp; go build &amp;&amp; .&#x2F;fabric-go-sdk\n&gt;&gt; 开始创建通道......\n&gt;&gt;&gt;&gt; 使用每个org的管理员身份更新锚节点配置...\n&gt;&gt;&gt;&gt; 使用每个org的管理员身份更新锚节点配置完成\n&gt;&gt; 创建通道成功\n&gt;&gt; 加入通道......\n&gt;&gt; 加入通道成功\n&gt;&gt; 开始打包链码......\n&gt;&gt; 打包链码成功\n&gt;&gt; 开始安装链码......\n&gt;&gt; 安装链码成功\n&gt;&gt; 组织认可智能合约定义......\n&gt;&gt;&gt; chaincode approved by Org1 peers:\n\tpeer0.org1.example.com:7051\n\tpeer1.org1.example.com:9051\n&gt;&gt; 组织认可智能合约定义完成\n&gt;&gt; 检查智能合约是否就绪......\nLifecycleCheckCCCommitReadiness cc &#x3D; simplecc, &#x3D; &#123;map[Org1MSP:true]&#125;\nLifecycleCheckCCCommitReadiness cc &#x3D; simplecc, &#x3D; &#123;map[Org1MSP:true]&#125;\n&gt;&gt; 智能合约已经就绪\n&gt;&gt; 提交智能合约定义......\n&gt;&gt; 智能合约定义提交完成\n&gt;&gt; 调用智能合约初始化方法......\n&gt;&gt; 完成智能合约初始化\n&gt;&gt; 通过链码外部服务设置链码状态......\n&gt;&gt; 设置链码状态完成\n&lt;--- 添加信息　---&gt;： 18c0c86ce029d7de04461484976c5151992864b52ca28905d0ccf911443fdfcb\n&lt;--- 查询信息　---&gt;： 123\n\n---------------------------------\n作者: Algernon\n本文来自于: https:&#x2F;&#x2F;algernon98.github.io&#x2F;\n博客内容遵循 署名-非商业性使用-相同方式共享 4.0 国际 (CC BY-NC-SA 4.0) 协议</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/154d44970b0549a09f524a4df8cbc35e.png\" alt=\"请添加图片描述\"></p>\n<ol>\n<li>声明合约</li>\n<li>编写合约函数</li>\n<li>创建并启动链码</li>\n<li>test-network网络测试<ul>\n<li>启动fabric网络</li>\n<li>创建channel</li>\n<li>部署chaincode</li>\n</ul>\n</li>\n</ol>\n<p>创建通道成功结果：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/4288a9123aa04603b6ea3e69551ce8ab.png\" alt=\"在这里插入图片描述\"></p>\n<p>部署chaincode成功结果：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/e46c7b05432049cda86b5073481f1f82.png\" alt=\"在这里插入图片描述\"></p>\n<h5 id=\"10-2-3-4实现智能合约\"><a href=\"#10-2-3-4实现智能合约\" class=\"headerlink\" title=\"10.2.3.4实现智能合约\"></a>10.2.3.4实现智能合约</h5><p>资产转移事件示例演示：</p>\n<p>从智能合约交易函数发出链码事件。<br>在客户端应用程序中接收链码事件。<br>在客户端应用程序中重放以前的链码事件。</p>\n<p>智能合约链码分析：</p>\n<p><a href=\"https://algernon98.github.io/post/区块链7\">【区块链技术与应用】（七） | 电子羊的秘密花园 (algernon98.github.io)</a></p>\n<p>查询账本资产列表</p>\n<p><img src=\"https://img-blog.csdnimg.cn/8d61580dd788467394e807bcf9876b39.png\" alt=\"在这里插入图片描述\"></p>\n<p>修改账本资产</p>\n<p><img src=\"https://img-blog.csdnimg.cn/93bc2719c43d4f44ac1059508d6b204a.png\" alt=\"在这里插入图片描述\"></p>\n<p>列出一个peer节点已经加入的通道清单：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">peer channel list</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/036fa48d6acb41dc9dc5bf08c1e32a84.png\" alt=\"在这里插入图片描述\"></p>\n<p>获取通道testchannel的信息：<br><img src=\"https://img-blog.csdnimg.cn/02b73112c58a4724b71816d6fd566211.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"10-2-4web操作\"><a href=\"#10-2-4web操作\" class=\"headerlink\" title=\"10.2.4web操作\"></a>10.2.4web操作</h4><h5 id=\"10-2-4-1html\"><a href=\"#10-2-4-1html\" class=\"headerlink\" title=\"10.2.4.1html\"></a>10.2.4.1html</h5><p>学习征信系统需要用到html文件建立网页模板</p>\n<p><img src=\"https://img-blog.csdnimg.cn/d7f3f984b856451a83861799a9932064.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/5ca69d609a224e9e876492970c142672.png\" alt=\"在这里插入图片描述\"></p>\n<h5 id=\"10-2-4-2postman\"><a href=\"#10-2-4-2postman\" class=\"headerlink\" title=\"10.2.4.2postman\"></a>10.2.4.2postman</h5><p>测试网络：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/be32919985884d23bc093b3205c96b0c.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/2223b2d34bb9484d9f750014dd1621f8.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"11-结束语\"><a href=\"#11-结束语\" class=\"headerlink\" title=\"11.结束语\"></a>11.结束语</h2><p>在每一次实验的结尾，我都会附上结语。“引言——内容——结语”的模式，后来我每次实验报告都会使用。如果说“引言”是讲本次实验做了什么，重点在于实验与技术；那“结语”往往是自己想说的话。如果实验特别难，结语往往会感慨终于做完了，如果这周实验简单，或者运行顺利，言语之中自然附带一种灵动的轻快。</p>\n<p>这个期末作业我忙了三个整天。</p>\n<p>第一天，把所有的内容重新配置，从go语言安装开始，找一个完整且正确的教程，配置完所有环境，然后启动网络，调用链码，这次一步到位，一气呵成的感觉，即使对之前十一次作业的一个总结，也加深了对区块链结构体系的理解。</p>\n<p>第二天，开始期末作业的实战。业务层、控制层、视图层————有自己没有接触过的内容，就上网现学；见过但忘了的，便打开作业或者资料查阅。然而第二天出的bug又让进度陷于停滞。</p>\n<p>重新配置、重新下载、重新搭建……网上的bug不尽相同，成功的程序千篇一律，失败的代码却各有各的报错。</p>\n<p>最终，我找到的问题所在，修改路径，修改profile，修改hosts，修改的次数太多以至于我可以很快从/etc中找到文件。</p>\n<p>终于，跑通了整套程序。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/112a0122c75d41b2a359d2a37f11bff3.png\" alt=\"在这里插入图片描述\"></p>\n<p>这门课学的内容太多，设计的知识面太广，以至于我恍惚之间以为自己做了一个毕设————当然，很多代码是站在前人的肩膀上完成的。</p>\n<p>html，css,go…其实能够深挖的知识还有很多，我欣幸于最终得以如愿完成这份期末作业，也明白之后可以学的内容同样广博。</p>\n<p>如果说印象最深刻的一点，就是在我打算删掉所有之前的内容，重新配置之后，感觉每周不同知识杂乱的体系逐渐在脑海中清晰，和系统上重新建立的简洁而明确的路径一样，区块链体系的结构、作用，函数、链码、框架、makefile文件之间的关系也理顺了。</p>\n<p>昔年曾见此湖图，<br>不信人间有此湖。<br>今日打从湖上过，<br>画工还欠费功夫。</p>\n<p>这门课是我这学期学的最硬核的一门课，应该说幸运的是概率论期末考试延期，给了我充足而平静的时间整理区块链这学期学习的知识体系。我没有选择使用wsl+vmware+ubuntu的形式，原因其一是我的双系统中ubuntu主要承担深度学习的功能，用以区块链开发是因为Linux对docker虚拟的支持较好；其二则是我倾向于图形化界面，对于一个学习中的开发者而言，图形化界面能够直观看到文件形式，同样，也有更多功能，这也是我从虚拟机逐渐过渡到双系统的原因。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/4288a9123aa04603b6ea3e69551ce8ab.png\" alt=\"在这里插入图片描述\"></p>\n<p>自定义终端也挺好看。</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-BfIvbWHR-1671167271453)(C:\\Users\\83854\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221216123117476.png)]</p>\n<p>“区块链”内容为博文贡献十万字还是有的，总而言之，过程很艰苦，结果很美好。</p>\n<p>希望日后“湖上过”的时候，也能感叹一句：“画图还欠费工夫”吧！</p>\n","text":"1. 学历信息征信系统需求分析现在是一个信息化的高科技时代，许许多多的企业必须紧跟时代步伐，不断创新，才能发展壮大；而企业的发展必然离不开人才队伍的建设，也可以说创新是企业发展的动力，而人才却是企业发展的根本，所以现在各企业对于人才队伍建设十分看重，而对于人才的素质及受教育情况的...","link":"","photos":[],"count_time":{"symbolsCount":"82k","symbolsTime":"1:14"},"categories":[{"name":"信管","slug":"信管","count":19,"path":"api/categories/信管.json"}],"tags":[{"name":"区块链","slug":"区块链","count":10,"path":"api/tags/区块链.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%AD%A6%E5%8E%86%E4%BF%A1%E6%81%AF%E5%BE%81%E4%BF%A1%E7%B3%BB%E7%BB%9F%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90\"><span class=\"toc-text\">1. 学历信息征信系统需求分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%AD%A6%E5%8E%86%E4%BF%A1%E6%81%AF%E5%BE%81%E4%BF%A1%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">2. 学历信息征信系统架构设计</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%AD%A6%E5%8E%86%E4%BF%A1%E6%81%AF%E5%BE%81%E4%BF%A1%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">3.学历信息征信数据模型设计</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%AD%A6%E5%8E%86%E4%BF%A1%E6%81%AF%E4%B8%9A%E5%8A%A1%E7%BD%91%E7%BB%9C%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">4. 学历信息业务网络设计与实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">4.1 设置环境</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-%E9%85%8D%E7%BD%AEdocker-compose-yml%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">4.2 配置docker-compose.yml文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">4.3 测试网络环境</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-SDK%E4%B8%8E%E9%93%BE%E7%A0%81%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">5. SDK与链码的实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-%E5%88%9B%E5%BB%BA-config-yaml-%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">5.1 创建 config.yaml 文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-%E5%A3%B0%E6%98%8E%E7%BB%93%E6%9E%84%E4%BD%93\"><span class=\"toc-text\">5.2 声明结构体</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-%E7%BC%96%E5%86%99%E9%93%BE%E7%A0%81\"><span class=\"toc-text\">5.3 编写链码</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E4%B8%9A%E5%8A%A1%E5%B1%82%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">6.业务层实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-1-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86\"><span class=\"toc-text\">6.1 事件处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-2-%E4%B8%9A%E5%8A%A1%E5%B1%82%E8%B0%83%E7%94%A8%E9%93%BE%E7%A0%81%E5%AE%9E%E7%8E%B0%E6%B7%BB%E5%8A%A0%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">6.2 业务层调用链码实现添加状态</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-3-%E8%B0%83%E7%94%A8%E9%93%BE%E7%A0%81%E5%AE%9E%E7%8E%B0%E6%A0%B9%E6%8D%AE%E8%AF%81%E4%B9%A6%E7%BC%96%E5%8F%B7%E4%B8%8E%E5%90%8D%E7%A7%B0%E6%9F%A5%E8%AF%A2%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">6.3 调用链码实现根据证书编号与名称查询状态</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-4-%E8%B0%83%E7%94%A8%E9%93%BE%E7%A0%81%E5%AE%9E%E7%8E%B0%E6%A0%B9%E6%8D%AE%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7%E7%A0%81%E6%9F%A5%E8%AF%A2%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">6.4 调用链码实现根据身份证号码查询状态</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-5-%E8%B0%83%E7%94%A8%E9%93%BE%E7%A0%81%E5%AE%9E%E7%8E%B0%E4%BF%AE%E6%94%B9-%E6%B7%BB%E5%8A%A0%E4%BF%A1%E6%81%AF%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">6.5 调用链码实现修改&#x2F;添加信息状态</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-%E6%8E%A7%E5%88%B6%E5%B1%82%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">7.控制层实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-1-%E8%AE%BE%E7%BD%AE%E7%B3%BB%E7%BB%9F%E7%94%A8%E6%88%B7\"><span class=\"toc-text\">7.1 设置系统用户</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-2-%E5%A4%84%E7%90%86%E5%93%8D%E5%BA%94\"><span class=\"toc-text\">7.2 处理响应</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-3-%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">7.3 处理请求</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-4-%E6%8C%87%E5%AE%9A%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">7.4 指定路由</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-%E8%A7%86%E5%9B%BE%E5%B1%82%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">8.视图层实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-1-%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">8.1 目录结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-2-%E7%9B%B8%E5%85%B3%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">8.2 相关源码实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-3-%E7%85%A7%E7%89%87%E4%B8%8A%E4%BC%A0\"><span class=\"toc-text\">8.3 照片上传</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-%E9%A1%B9%E7%9B%AE%E4%BA%A4%E4%BA%92%E6%BC%94%E7%A4%BA\"><span class=\"toc-text\">9.项目交互演示</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-1-%E5%90%AF%E5%8A%A8Web%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">9.1 启动Web服务</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-2-%E8%AE%BF%E9%97%AE%E9%A1%B5%E9%9D%A2\"><span class=\"toc-text\">9.2 访问页面</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-3-education%E8%BF%90%E8%A1%8C\"><span class=\"toc-text\">9.3 education运行</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">10.课程知识总结</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-1%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">10.1课程实验总结</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-1-1%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C%E6%B1%87%E6%80%BB\"><span class=\"toc-text\">10.1.1课程实验汇总</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#10-1-1-1-%E5%AE%9E%E9%AA%8C%E4%B8%80%EF%BC%9Ago%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%EF%BC%88w3cschool%EF%BC%89\"><span class=\"toc-text\">10.1.1.1 实验一：go语言环境搭建及基础语法（w3cschool）</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#10-1-1-2-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%8F%8A%E8%BF%9B%E9%98%B6\"><span class=\"toc-text\">10.1.1.2 go语言基础及进阶</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#10-1-1-3-http%E7%BC%96%E7%A8%8B%E3%80%81go%E6%93%8D%E4%BD%9CMYSQL%E4%BB%A5%E5%8F%8AGin%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">10.1.1.3 http编程、go操作MYSQL以及Gin框架</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#10-1-1-4-docker%EF%BC%88%E6%8A%80%E6%9C%AF%E8%83%96%EF%BC%89\"><span class=\"toc-text\">10.1.1.4 docker（技术胖）</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#10-1-1-5-%E5%90%AF%E5%8A%A8fabric%E7%BD%91%E7%BB%9C\"><span class=\"toc-text\">10.1.1.5 启动fabric网络</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#10-1-1-6-hyperledger-fabric%E7%BD%91%E7%BB%9C%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">10.1.1.6 hyperledger-fabric网络搭建</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#10-1-1-7-%E4%B8%A4%E4%B8%AA%E8%A7%86%E9%A2%91%E5%AE%9E%E6%88%98%EF%BC%88%E7%AE%80%E5%8D%95%E8%B5%84%E4%BA%A7%E9%93%BE%E7%A0%81%EF%BC%89\"><span class=\"toc-text\">10.1.1.7 两个视频实战（简单资产链码）</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#10-1-1-8-%E9%93%BE%E7%A0%81%E4%B8%8E%E7%BD%91%E7%BB%9C%E5%90%AF%E5%8A%A8\"><span class=\"toc-text\">10.1.1.8 链码与网络启动</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#10-1-1-9-%E4%B8%89%E4%B8%AA%E7%A4%BA%E4%BE%8B%EF%BC%88%E8%B5%84%E4%BA%A7%E8%BD%AC%E7%A7%BB%E3%80%81%E9%93%BE%E4%B8%8B%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%EF%BC%89\"><span class=\"toc-text\">10.1.1.9 三个示例（资产转移、链下数据存储）</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#10-1-1-10-%E9%93%BE%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">10.1.1.10 链码分析</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#10-1-1-11-%E4%B8%A4%E4%B8%AA%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C\"><span class=\"toc-text\">10.1.1.11 两个综合实验</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-1-2%E5%AE%9E%E9%AA%8C%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">10.1.2实验总结</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-2%E8%AF%BE%E7%A8%8B%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">10.2课程原理总结</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-2-1%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">10.2.1环境配置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-2-2go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">10.2.2go语言基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#10-2-2-1go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">10.2.2.1go语言基础语法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#10-2-2-2channel%E9%80%9A%E9%81%93\"><span class=\"toc-text\">10.2.2.2channel通道</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#10-2-2-3gin%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">10.2.2.3gin框架</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-2-3%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">10.2.3区块链知识</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#10-2-3-1docker%E5%AE%B9%E5%99%A8%E6%9E%84%E5%BB%BA\"><span class=\"toc-text\">10.2.3.1docker容器构建</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#10-2-3-2fabric%E7%BD%91%E7%BB%9C\"><span class=\"toc-text\">10.2.3.2fabric网络</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#10-2-3-3%E9%93%BE%E7%A0%81\"><span class=\"toc-text\">10.2.3.3链码</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#10-2-3-4%E5%AE%9E%E7%8E%B0%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6\"><span class=\"toc-text\">10.2.3.4实现智能合约</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-2-4web%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">10.2.4web操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#10-2-4-1html\"><span class=\"toc-text\">10.2.4.1html</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#10-2-4-2postman\"><span class=\"toc-text\">10.2.4.2postman</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-%E7%BB%93%E6%9D%9F%E8%AF%AD\"><span class=\"toc-text\">11.结束语</span></a></li></ol>","author":{"name":"Algernon","slug":"blog-author","avatar":"https://user-images.githubusercontent.com/54904760/224857900-b2e8457c-43d2-46b7-901c-6c770f24bbad.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}},"mapped":true,"prev_post":{"title":"【大数据基础】vmware+ununtu安装详细过程","uid":"742380d4c8e833aace283f6b8db25e56","slug":"大数据1","date":"2023-02-13T13:50:49.000Z","updated":"2023-04-04T02:25:22.653Z","comments":true,"path":"api/articles/大数据1.json","keywords":null,"cover":[],"text":"环境配置1. 虚拟机VMware下载与安装首先安装vmware workstation 密钥直接利用科技生成。检查vmware是否成功安装 2. VMware安装Ubuntu18.04 LTS在清华源镜像站找到合适版本的ubuntu联网安装需要一些时间，大致在一到两个小时。出现这...","link":"","photos":[],"count_time":{"symbolsCount":674,"symbolsTime":"1 mins."},"categories":[{"name":"信管","slug":"信管","count":19,"path":"api/categories/信管.json"}],"tags":[{"name":"大数据","slug":"大数据","count":7,"path":"api/tags/大数据.json"}],"author":{"name":"Algernon","slug":"blog-author","avatar":"https://user-images.githubusercontent.com/54904760/224857900-b2e8457c-43d2-46b7-901c-6c770f24bbad.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}}},"next_post":{"title":"【区块链技术与应用】（九）","uid":"6836c19fc065dca88d3b1abe7f721a20","slug":"区块链9","date":"2022-12-15T13:50:49.000Z","updated":"2022-12-16T05:18:19.129Z","comments":true,"path":"api/articles/区块链9.json","keywords":null,"cover":[],"text":"Hyperledger Fabric 2.4 开发环境配置与测试前言超级账本的Fabric具有高可扩展性和高可定制性，能够应用在复杂的商业场景中，但Fabric技术涉及很多新的概念，源代码跟新速度快且各版本间兼容性差，对初学者很不友好。为了使能够快速掌握Fabric，本文基于其目...","link":"","photos":[],"count_time":{"symbolsCount":"69k","symbolsTime":"1:03"},"categories":[{"name":"信管","slug":"信管","count":19,"path":"api/categories/信管.json"}],"tags":[{"name":"区块链","slug":"区块链","count":10,"path":"api/tags/区块链.json"}],"author":{"name":"Algernon","slug":"blog-author","avatar":"https://user-images.githubusercontent.com/54904760/224857900-b2e8457c-43d2-46b7-901c-6c770f24bbad.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}}}}