{"title":"【区块链技术与应用】（八）","uid":"a8e01e489f77aa1141e71d498b937811","slug":"区块链8","date":"2022-11-24T14:50:49.000Z","updated":"2022-11-24T14:29:24.354Z","comments":true,"path":"api/articles/区块链8.json","keywords":null,"cover":[],"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://blog.csdn.net/lakersssss24/article/details/125762826?spm=1001.2014.3001.5501\">https://blog.csdn.net/lakersssss24/article/details/125762826?spm=1001.2014.3001.5501</a><br><a href=\"https://blog.csdn.net/lakersssss24/article/details/126434147\">https://blog.csdn.net/lakersssss24/article/details/126434147</a><br><a href=\"https://blog.csdn.net/lakersssss24/article/details/126671408?spm=1001.2101.3001.6650.3&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-3-126671408-blog-126434147.pc_relevant_3mothn_strategy_and_data_recovery&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-3-126671408-blog-126434147.pc_relevant_3mothn_strategy_and_data_recovery&amp;utm_relevant_index=4\">https://blog.csdn.net/lakersssss24/article/details/126671408?spm=1001.2101.3001.6650.3&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-3-126671408-blog-126434147.pc_relevant_3mothn_strategy_and_data_recovery&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-3-126671408-blog-126434147.pc_relevant_3mothn_strategy_and_data_recovery&amp;utm_relevant_index=4</a></p>\n<h2 id=\"提前准备\"><a href=\"#提前准备\" class=\"headerlink\" title=\"提前准备\"></a>提前准备</h2><p><img src=\"https://img-blog.csdnimg.cn/6fedb46a8b244eb0911428e45c3fd3fc.jpeg\" alt=\"在这里插入图片描述\"></p></blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">sudo apt-get update  更新源 \nsudo apt-get install ssh 安装远程客户端\nsudo apt-get install curl 安装命令行工具\nsudo apt-get install git 安装git\nsudo apt-get install gcc 安装gcc\nsudo apt-get install vim 安装vim文件编辑器\nsudo apt-get install make 安装make\nsudo apt-get install net-tools 安装网络工具\nsudo apt-get install net-tools  安装mousepad 类似于windows的记事本</code></pre>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">.&#x2F;bootstrap.sh</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://teach.imcn.me/y2020/1146.html\">https://teach.imcn.me/y2020/1146.html</a></p>\n<p>couchDB安装 <a href=\"https://blog.csdn.net/TU_Dresden/article/details/126864418\">https://blog.csdn.net/TU_Dresden/article/details/126864418</a></p></blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/f032ef92fe724950aa8eab80f4f08e96.png\" alt=\"请添加图片描述\"></p>\n<h2 id=\"实验一\"><a href=\"#实验一\" class=\"headerlink\" title=\"实验一\"></a>实验一</h2><h3 id=\"network\"><a href=\"#network\" class=\"headerlink\" title=\"network\"></a>network</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">.&#x2F;network.sh up</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/13164f2d94a3435980f3433e863f8610.png\" alt=\"请添加图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/e0307a7cc4994aefa8571bab48d31069.png\" alt=\"请添加图片描述\"></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">.&#x2F;network.sh up createChannel -s couchdb</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/d2d1ff65fde840c8826459417831c076.png\" alt=\"请添加图片描述\"></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">.&#x2F;network.sh deployCC -ccn basic -ccp ..&#x2F;asset-transfer-basic&#x2F;chaincode-go -ccl go</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/8ce4185f2dc74a999eb755e2a1f4fb08.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/eef613ecac914a49aa99b554d8ac5dfe.png\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">export PATH&#x3D;$&#123;PWD&#125;&#x2F;..&#x2F;bin:$PATH\nexport FABRIC_CFG_PATH&#x3D;$PWD&#x2F;..&#x2F;config&#x2F;\nexport CORE_PEER_TLS_ENABLED&#x3D;true\nexport CORE_PEER_LOCALMSPID&#x3D;&quot;Org1MSP&quot; \nexport CORE_PEER_TLS_ROOTCERT_FILE&#x3D;$&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;ca.crt\nexport CORE_PEER_MSPCONFIGPATH&#x3D;$&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;users&#x2F;Admin@org1.example.com&#x2F;msp\nexport CORE_PEER_ADDRESS&#x3D;localhost:7051</code></pre>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile &quot;$&#123;PWD&#125;&#x2F;organizations&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem&quot; -C mychannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles &quot;$&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;ca.crt&quot; --peerAddresses localhost:9051 --tlsRootCertFiles &quot;$&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;peers&#x2F;peer0.org2.example.com&#x2F;tls&#x2F;ca.crt&quot; -c &#39;&#123;&quot;function&quot;:&quot;InitLedger&quot;,&quot;Args&quot;:[&quot;&quot;]&#125;&#39;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/ef8b8f1b9ca74aa998fcbbb7047dbce3.png\" alt=\"在这里插入图片描述\"><br>restart </p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">.&#x2F;network.sh up createChannel -ca -s couchdb\n\n</code></pre>\n<p>gin模板</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n \nimport (\n\t&quot;fmt&quot;\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n \ntype Stu struct &#123;\n\tName string &#96;form:&quot;name&quot;&#96;\n\tId   string &#96;form:&quot;id&quot;&#96;\n\tAge  string &#96;form:&quot;age&quot;&#96;\n&#125;\n \nfunc main() &#123;\n\tr :&#x3D; gin.Default()\n\tvar stu Stu\n\tr1 :&#x3D; r.Group(&quot;&#x2F;fabric2.4&quot;)\n\tr1.POST(&quot;&#x2F;setstu&quot;, func(c *gin.Context) &#123;\n\t\t&#x2F;&#x2F;var stu Stu\n\t\tc.ShouldBind(&amp;stu)\n\t\tc.JSON(200, stu)\n\t\tfmt.Println(&quot;stu:&quot;, stu)\n\t&#125;)\n\tr1.POST(&quot;&#x2F;ok1&quot;, func(c *gin.Context) &#123;\n\t\tc.JSON(200, &quot;ok1&quot;)\n\t&#125;)\n\tr.Run(&quot;:8080&quot;) &#x2F;&#x2F; 监听并在 0.0.0.0:8080 上启动服务\n \n&#125;</code></pre>\n<p>链码的只要功能部分：<br><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package chaincode\n \nimport (\n\t&quot;encoding&#x2F;json&quot;\n\t&quot;fmt&quot;\n \n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-contract-api-go&#x2F;contractapi&quot;\n)\n \n&#x2F;&#x2F; SmartContract provides functions for managing an Asset\ntype SmartContract struct &#123;\n\tcontractapi.Contract\n&#125;\n \n&#x2F;&#x2F; Asset describes basic details of what makes up a simple asset\n&#x2F;&#x2F;Insert struct field in alphabetic order &#x3D;&gt; to achieve determinism across languages\n&#x2F;&#x2F; golang keeps the order when marshal to json but doesn&#39;t order automatically\ntype Asset struct &#123;\n\tAppraisedValue int    &#96;json:&quot;AppraisedValue&quot;&#96;\n\tColor          string &#96;json:&quot;Color&quot;&#96;\n\tID             string &#96;json:&quot;ID&quot;&#96;\n\tOwner          string &#96;json:&quot;Owner&quot;&#96;\n\tSize           int    &#96;json:&quot;Size&quot;&#96;\n&#125;\n \n&#x2F;&#x2F; InitLedger adds a base set of assets to the ledger\nfunc (s *SmartContract) InitLedger(ctx contractapi.TransactionContextInterface) error &#123;\n\tassets :&#x3D; []Asset&#123;\n\t\t&#123;ID: &quot;asset1&quot;, Color: &quot;blue&quot;, Size: 5, Owner: &quot;Tomoko&quot;, AppraisedValue: 300&#125;,\n\t\t&#123;ID: &quot;asset2&quot;, Color: &quot;red&quot;, Size: 5, Owner: &quot;Brad&quot;, AppraisedValue: 400&#125;,\n\t\t&#123;ID: &quot;asset3&quot;, Color: &quot;green&quot;, Size: 10, Owner: &quot;Jin Soo&quot;, AppraisedValue: 500&#125;,\n\t\t&#123;ID: &quot;asset4&quot;, Color: &quot;yellow&quot;, Size: 10, Owner: &quot;Max&quot;, AppraisedValue: 600&#125;,\n\t\t&#123;ID: &quot;asset5&quot;, Color: &quot;black&quot;, Size: 15, Owner: &quot;Adriana&quot;, AppraisedValue: 700&#125;,\n\t\t&#123;ID: &quot;asset6&quot;, Color: &quot;white&quot;, Size: 15, Owner: &quot;Michel&quot;, AppraisedValue: 800&#125;,\n\t&#125;\n \n\tfor _, asset :&#x3D; range assets &#123;\n\t\tassetJSON, err :&#x3D; json.Marshal(asset)\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn err\n\t\t&#125;\n \n\t\terr &#x3D; ctx.GetStub().PutState(asset.ID, assetJSON)\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn fmt.Errorf(&quot;failed to put to world state. %v&quot;, err)\n\t\t&#125;\n\t&#125;\n \n\treturn nil\n&#125;\n \n&#x2F;&#x2F; CreateAsset issues a new asset to the world state with given details.\nfunc (s *SmartContract) CreateAsset(ctx contractapi.TransactionContextInterface, id string, color string, size int, owner string, appraisedValue int) error &#123;\n\texists, err :&#x3D; s.AssetExists(ctx, id)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\tif exists &#123;\n\t\treturn fmt.Errorf(&quot;the asset %s already exists&quot;, id)\n\t&#125;\n \n\tasset :&#x3D; Asset&#123;\n\t\tID:             id,\n\t\tColor:          color,\n\t\tSize:           size,\n\t\tOwner:          owner,\n\t\tAppraisedValue: appraisedValue,\n\t&#125;\n\tassetJSON, err :&#x3D; json.Marshal(asset)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n \n\treturn ctx.GetStub().PutState(id, assetJSON)\n&#125;\n \n&#x2F;&#x2F; ReadAsset returns the asset stored in the world state with given id.\nfunc (s *SmartContract) ReadAsset(ctx contractapi.TransactionContextInterface, id string) (*Asset, error) &#123;\n\tassetJSON, err :&#x3D; ctx.GetStub().GetState(id)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, fmt.Errorf(&quot;failed to read from world state: %v&quot;, err)\n\t&#125;\n\tif assetJSON &#x3D;&#x3D; nil &#123;\n\t\treturn nil, fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n\t&#125;\n \n\tvar asset Asset\n\terr &#x3D; json.Unmarshal(assetJSON, &amp;asset)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n \n\treturn &amp;asset, nil\n&#125;\n \n&#x2F;&#x2F; UpdateAsset updates an existing asset in the world state with provided parameters.\nfunc (s *SmartContract) UpdateAsset(ctx contractapi.TransactionContextInterface, id string, color string, size int, owner string, appraisedValue int) error &#123;\n\texists, err :&#x3D; s.AssetExists(ctx, id)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\tif !exists &#123;\n\t\treturn fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n\t&#125;\n \n\t&#x2F;&#x2F; overwriting original asset with new asset\n\tasset :&#x3D; Asset&#123;\n\t\tID:             id,\n\t\tColor:          color,\n\t\tSize:           size,\n\t\tOwner:          owner,\n\t\tAppraisedValue: appraisedValue,\n\t&#125;\n\tassetJSON, err :&#x3D; json.Marshal(asset)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n \n\treturn ctx.GetStub().PutState(id, assetJSON)\n&#125;\n \n&#x2F;&#x2F; DeleteAsset deletes an given asset from the world state.\nfunc (s *SmartContract) DeleteAsset(ctx contractapi.TransactionContextInterface, id string) error &#123;\n\texists, err :&#x3D; s.AssetExists(ctx, id)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\tif !exists &#123;\n\t\treturn fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n\t&#125;\n \n\treturn ctx.GetStub().DelState(id)\n&#125;\n \n&#x2F;&#x2F; AssetExists returns true when asset with given ID exists in world state\nfunc (s *SmartContract) AssetExists(ctx contractapi.TransactionContextInterface, id string) (bool, error) &#123;\n\tassetJSON, err :&#x3D; ctx.GetStub().GetState(id)\n\tif err !&#x3D; nil &#123;\n\t\treturn false, fmt.Errorf(&quot;failed to read from world state: %v&quot;, err)\n\t&#125;\n \n\treturn assetJSON !&#x3D; nil, nil\n&#125;\n \n&#x2F;&#x2F; TransferAsset updates the owner field of asset with given id in world state, and returns the old owner.\nfunc (s *SmartContract) TransferAsset(ctx contractapi.TransactionContextInterface, id string, newOwner string) (string, error) &#123;\n\tasset, err :&#x3D; s.ReadAsset(ctx, id)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, err\n\t&#125;\n \n\toldOwner :&#x3D; asset.Owner\n\tasset.Owner &#x3D; newOwner\n \n\tassetJSON, err :&#x3D; json.Marshal(asset)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, err\n\t&#125;\n \n\terr &#x3D; ctx.GetStub().PutState(id, assetJSON)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, err\n\t&#125;\n \n\treturn oldOwner, nil\n&#125;\n \n&#x2F;&#x2F; GetAllAssets returns all assets found in world state\nfunc (s *SmartContract) GetAllAssets(ctx contractapi.TransactionContextInterface) ([]*Asset, error) &#123;\n\t&#x2F;&#x2F; range query with empty string for startKey and endKey does an\n\t&#x2F;&#x2F; open-ended query of all assets in the chaincode namespace.\n\tresultsIterator, err :&#x3D; ctx.GetStub().GetStateByRange(&quot;&quot;, &quot;&quot;)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\tdefer resultsIterator.Close()\n \n\tvar assets []*Asset\n\tfor resultsIterator.HasNext() &#123;\n\t\tqueryResponse, err :&#x3D; resultsIterator.Next()\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn nil, err\n\t\t&#125;\n \n\t\tvar asset Asset\n\t\terr &#x3D; json.Unmarshal(queryResponse.Value, &amp;asset)\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn nil, err\n\t\t&#125;\n\t\tassets &#x3D; append(assets, &amp;asset)\n\t&#125;\n \n\treturn assets, nil\n&#125;</code></pre><br>查看虚拟机的IP和地址：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">ifconfig</code></pre>\n<h3 id=\"gin框架\"><a href=\"#gin框架\" class=\"headerlink\" title=\"gin框架\"></a>gin框架</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n \nimport (\n\t&quot;bytes&quot;\n\t&quot;crypto&#x2F;x509&quot;\n\t&quot;encoding&#x2F;json&quot;\n\t&quot;fmt&quot;\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-gateway&#x2F;pkg&#x2F;client&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-gateway&#x2F;pkg&#x2F;identity&quot;\n\t&quot;google.golang.org&#x2F;grpc&quot;\n\t&quot;google.golang.org&#x2F;grpc&#x2F;credentials&quot;\n\t&quot;io&#x2F;ioutil&quot;\n\t&quot;path&quot;\n\t&quot;time&quot;\n)\n \nconst (\n\tmspID         &#x3D; &quot;Org1MSP&quot;\n\tcryptoPath    &#x3D; &quot;.&#x2F;peerOrganizations&#x2F;org1.example.com&quot;\n\tcertPath      &#x3D; cryptoPath + &quot;&#x2F;users&#x2F;User1@org1.example.com&#x2F;msp&#x2F;signcerts&#x2F;cert.pem&quot;\n\tkeyPath       &#x3D; cryptoPath + &quot;&#x2F;users&#x2F;User1@org1.example.com&#x2F;msp&#x2F;keystore&#x2F;&quot;\n\ttlsCertPath   &#x3D; cryptoPath + &quot;&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;ca.crt&quot;\n\tpeerEndpoint  &#x3D; &quot;192.168.136.130:7051&quot;\n\tgatewayPeer   &#x3D; &quot;peer0.org1.example.com&quot;\n\tchannelName   &#x3D; &quot;mychannel&quot;\n\tchaincodeName &#x3D; &quot;basic&quot;\n)\n \ntype Asset struct &#123;\n\tAppraisedValue int    &#96;form:&quot;appraisedValue&quot; json:&quot;appraisedValue&quot; &#96;\n\tColor          string &#96;form:&quot;color&quot; json:&quot;color&quot;&#96;\n\tID             string &#96;form:&quot;id&quot; json:&quot;id&quot;&#96;\n\tOwner          string &#96;form:&quot;owner&quot; json:&quot;owner&quot;&#96;\n\tSize           int    &#96;form:&quot;size&quot; json:&quot;size&quot;&#96;\n&#125;\n \nfunc main() &#123;\n\t&#x2F;&#x2F; The gRPC client connection should be shared by all Gateway connections to this endpoint\n\tclientConnection :&#x3D; newGrpcConnection()\n\tdefer clientConnection.Close()\n \n\tid :&#x3D; newIdentity()\n\tsign :&#x3D; newSign()\n \n\t&#x2F;&#x2F; Create a Gateway connection for a specific client identity\n\tgateway, err :&#x3D; client.Connect(\n\t\tid,\n\t\tclient.WithSign(sign),\n\t\tclient.WithClientConnection(clientConnection),\n\t\t&#x2F;&#x2F; Default timeouts for different gRPC calls\n\t\tclient.WithEvaluateTimeout(5*time.Second),\n\t\tclient.WithEndorseTimeout(15*time.Second),\n\t\tclient.WithSubmitTimeout(5*time.Second),\n\t\tclient.WithCommitStatusTimeout(1*time.Minute),\n\t)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n\tdefer gateway.Close()\n\tnetwork :&#x3D; gateway.GetNetwork(channelName)\n\tcontract :&#x3D; network.GetContract(chaincodeName)\n \n\tr :&#x3D; gin.Default()\n\tr1 :&#x3D; r.Group(&quot;&#x2F;fabric2.4&quot;)\n\tr1.POST(&quot;&#x2F;CreateAsset&quot;, func(c *gin.Context) &#123;\n\t\tvar asset Asset\n\t\tc.ShouldBind(&amp;asset)\n\t\tc.JSON(200, asset)\n\t\tmarshal, _ :&#x3D; json.Marshal(asset)\n\t\tfmt.Println(string(marshal))\n\t\tfmt.Println(&quot;asset:&quot;, asset)\n\t&#125;)\n\tr1.POST(&quot;&#x2F;GetAllAssets&quot;, func(c *gin.Context) &#123;\n\t\tresult :&#x3D; getAllAssets(contract)\n\t\tc.JSON(200, result)\n\t&#125;)\n\tr.Run(&quot;:8080&quot;) &#x2F;&#x2F; 监听并在 0.0.0.0:8080 上启动服务\n \n&#125;\n \n&#x2F;&#x2F; Evaluate a transaction to query ledger state.\nfunc getAllAssets(contract *client.Contract) string &#123;\n\tfmt.Println(&quot;Evaluate Transaction: GetAllAssets, function returns all the current assets on the ledger&quot;)\n \n\tevaluateResult, err :&#x3D; contract.EvaluateTransaction(&quot;GetAllAssets&quot;)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to evaluate transaction: %w&quot;, err))\n\t&#125;\n\tresult :&#x3D; formatJSON(evaluateResult)\n \n\tfmt.Printf(&quot;*** Result:%s\\n&quot;, result)\n \n\treturn string(evaluateResult)\n&#125;\n \n&#x2F;&#x2F; newGrpcConnection creates a gRPC connection to the Gateway server.\nfunc newGrpcConnection() *grpc.ClientConn &#123;\n\tcertificate, err :&#x3D; loadCertificate(tlsCertPath)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n \n\tcertPool :&#x3D; x509.NewCertPool()\n\tcertPool.AddCert(certificate)\n\ttransportCredentials :&#x3D; credentials.NewClientTLSFromCert(certPool, gatewayPeer)\n \n\tconnection, err :&#x3D; grpc.Dial(peerEndpoint, grpc.WithTransportCredentials(transportCredentials))\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to create gRPC connection: %w&quot;, err))\n\t&#125;\n \n\treturn connection\n&#125;\n \n&#x2F;&#x2F; newIdentity creates a client identity for this Gateway connection using an X.509 certificate.\nfunc newIdentity() *identity.X509Identity &#123;\n\tcertificate, err :&#x3D; loadCertificate(certPath)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n \n\tid, err :&#x3D; identity.NewX509Identity(mspID, certificate)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n \n\treturn id\n&#125;\n \nfunc loadCertificate(filename string) (*x509.Certificate, error) &#123;\n\tcertificatePEM, err :&#x3D; ioutil.ReadFile(filename)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, fmt.Errorf(&quot;failed to read certificate file: %w&quot;, err)\n\t&#125;\n\treturn identity.CertificateFromPEM(certificatePEM)\n&#125;\n \n&#x2F;&#x2F; newSign creates a function that generates a digital signature from a message digest using a private key.\nfunc newSign() identity.Sign &#123;\n\tfiles, err :&#x3D; ioutil.ReadDir(keyPath)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to read private key directory: %w&quot;, err))\n\t&#125;\n\tprivateKeyPEM, err :&#x3D; ioutil.ReadFile(path.Join(keyPath, files[0].Name()))\n \n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to read private key file: %w&quot;, err))\n\t&#125;\n \n\tprivateKey, err :&#x3D; identity.PrivateKeyFromPEM(privateKeyPEM)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n \n\tsign, err :&#x3D; identity.NewPrivateKeySign(privateKey)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n \n\treturn sign\n&#125;\n \n&#x2F;&#x2F; Format JSON data\nfunc formatJSON(data []byte) string &#123;\n\tvar prettyJSON bytes.Buffer\n\tif err :&#x3D; json.Indent(&amp;prettyJSON, data, &quot; &quot;, &quot;&quot;); err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to parse JSON: %w&quot;, err))\n\t&#125;\n\treturn prettyJSON.String()\n&#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/d4c54fda12834088988fc80394a8104a.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"链码\"><a href=\"#链码\" class=\"headerlink\" title=\"链码\"></a>链码</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package chaincode\n \nimport (\n\t&quot;encoding&#x2F;json&quot;\n\t&quot;fmt&quot;\n \n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-contract-api-go&#x2F;contractapi&quot;\n)\n \n&#x2F;&#x2F; SmartContract provides functions for managing an Asset\ntype SmartContract struct &#123;\n\tcontractapi.Contract\n&#125;\n \n&#x2F;&#x2F; Asset describes basic details of what makes up a simple asset\n&#x2F;&#x2F;Insert struct field in alphabetic order &#x3D;&gt; to achieve determinism across languages\n&#x2F;&#x2F; golang keeps the order when marshal to json but doesn&#39;t order automatically\ntype Asset struct &#123;\n\tAppraisedValue int    &#96;json:&quot;AppraisedValue&quot;&#96;\n\tColor          string &#96;json:&quot;Color&quot;&#96;\n\tID             string &#96;json:&quot;ID&quot;&#96;\n\tOwner          string &#96;json:&quot;Owner&quot;&#96;\n\tSize           int    &#96;json:&quot;Size&quot;&#96;\n&#125;\n \n&#x2F;&#x2F; InitLedger adds a base set of assets to the ledger\nfunc (s *SmartContract) InitLedger(ctx contractapi.TransactionContextInterface) error &#123;\n\tassets :&#x3D; []Asset&#123;\n\t\t&#123;ID: &quot;asset1&quot;, Color: &quot;blue&quot;, Size: 5, Owner: &quot;Tomoko&quot;, AppraisedValue: 300&#125;,\n\t\t&#123;ID: &quot;asset2&quot;, Color: &quot;red&quot;, Size: 5, Owner: &quot;Brad&quot;, AppraisedValue: 400&#125;,\n\t\t&#123;ID: &quot;asset3&quot;, Color: &quot;green&quot;, Size: 10, Owner: &quot;Jin Soo&quot;, AppraisedValue: 500&#125;,\n\t\t&#123;ID: &quot;asset4&quot;, Color: &quot;yellow&quot;, Size: 10, Owner: &quot;Max&quot;, AppraisedValue: 600&#125;,\n\t\t&#123;ID: &quot;asset5&quot;, Color: &quot;black&quot;, Size: 15, Owner: &quot;Adriana&quot;, AppraisedValue: 700&#125;,\n\t\t&#123;ID: &quot;asset6&quot;, Color: &quot;white&quot;, Size: 15, Owner: &quot;Michel&quot;, AppraisedValue: 800&#125;,\n\t&#125;\n \n\tfor _, asset :&#x3D; range assets &#123;\n\t\tassetJSON, err :&#x3D; json.Marshal(asset)\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn err\n\t\t&#125;\n \n\t\terr &#x3D; ctx.GetStub().PutState(asset.ID, assetJSON)\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn fmt.Errorf(&quot;failed to put to world state. %v&quot;, err)\n\t\t&#125;\n\t&#125;\n \n\treturn nil\n&#125;\n \n&#x2F;&#x2F; CreateAsset issues a new asset to the world state with given details.\nfunc (s *SmartContract) CreateAsset(ctx contractapi.TransactionContextInterface, id string, color string, size int, owner string, appraisedValue int) error &#123;\n\texists, err :&#x3D; s.AssetExists(ctx, id)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\tif exists &#123;\n\t\treturn fmt.Errorf(&quot;the asset %s already exists&quot;, id)\n\t&#125;\n \n\tasset :&#x3D; Asset&#123;\n\t\tID:             id,\n\t\tColor:          color,\n\t\tSize:           size,\n\t\tOwner:          owner,\n\t\tAppraisedValue: appraisedValue,\n\t&#125;\n\tassetJSON, err :&#x3D; json.Marshal(asset)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n \n\treturn ctx.GetStub().PutState(id, assetJSON)\n&#125;\n \n&#x2F;&#x2F; ReadAsset returns the asset stored in the world state with given id.\nfunc (s *SmartContract) ReadAsset(ctx contractapi.TransactionContextInterface, id string) (*Asset, error) &#123;\n\tassetJSON, err :&#x3D; ctx.GetStub().GetState(id)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, fmt.Errorf(&quot;failed to read from world state: %v&quot;, err)\n\t&#125;\n\tif assetJSON &#x3D;&#x3D; nil &#123;\n\t\treturn nil, fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n\t&#125;\n \n\tvar asset Asset\n\terr &#x3D; json.Unmarshal(assetJSON, &amp;asset)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n \n\treturn &amp;asset, nil\n&#125;\n \n&#x2F;&#x2F; UpdateAsset updates an existing asset in the world state with provided parameters.\nfunc (s *SmartContract) UpdateAsset(ctx contractapi.TransactionContextInterface, id string, color string, size int, owner string, appraisedValue int) error &#123;\n\texists, err :&#x3D; s.AssetExists(ctx, id)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\tif !exists &#123;\n\t\treturn fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n\t&#125;\n \n\t&#x2F;&#x2F; overwriting original asset with new asset\n\tasset :&#x3D; Asset&#123;\n\t\tID:             id,\n\t\tColor:          color,\n\t\tSize:           size,\n\t\tOwner:          owner,\n\t\tAppraisedValue: appraisedValue,\n\t&#125;\n\tassetJSON, err :&#x3D; json.Marshal(asset)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n \n\treturn ctx.GetStub().PutState(id, assetJSON)\n&#125;\n \n&#x2F;&#x2F; DeleteAsset deletes an given asset from the world state.\nfunc (s *SmartContract) DeleteAsset(ctx contractapi.TransactionContextInterface, id string) error &#123;\n\texists, err :&#x3D; s.AssetExists(ctx, id)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\tif !exists &#123;\n\t\treturn fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n\t&#125;\n \n\treturn ctx.GetStub().DelState(id)\n&#125;\n \n&#x2F;&#x2F; AssetExists returns true when asset with given ID exists in world state\nfunc (s *SmartContract) AssetExists(ctx contractapi.TransactionContextInterface, id string) (bool, error) &#123;\n\tassetJSON, err :&#x3D; ctx.GetStub().GetState(id)\n\tif err !&#x3D; nil &#123;\n\t\treturn false, fmt.Errorf(&quot;failed to read from world state: %v&quot;, err)\n\t&#125;\n \n\treturn assetJSON !&#x3D; nil, nil\n&#125;\n \n&#x2F;&#x2F; TransferAsset updates the owner field of asset with given id in world state, and returns the old owner.\nfunc (s *SmartContract) TransferAsset(ctx contractapi.TransactionContextInterface, id string, newOwner string) (string, error) &#123;\n\tasset, err :&#x3D; s.ReadAsset(ctx, id)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, err\n\t&#125;\n \n\toldOwner :&#x3D; asset.Owner\n\tasset.Owner &#x3D; newOwner\n \n\tassetJSON, err :&#x3D; json.Marshal(asset)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, err\n\t&#125;\n \n\terr &#x3D; ctx.GetStub().PutState(id, assetJSON)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, err\n\t&#125;\n \n\treturn oldOwner, nil\n&#125;\n \n&#x2F;&#x2F; GetAllAssets returns all assets found in world state\nfunc (s *SmartContract) GetAllAssets(ctx contractapi.TransactionContextInterface) ([]*Asset, error) &#123;\n\t&#x2F;&#x2F; range query with empty string for startKey and endKey does an\n\t&#x2F;&#x2F; open-ended query of all assets in the chaincode namespace.\n\tresultsIterator, err :&#x3D; ctx.GetStub().GetStateByRange(&quot;&quot;, &quot;&quot;)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\tdefer resultsIterator.Close()\n \n\tvar assets []*Asset\n\tfor resultsIterator.HasNext() &#123;\n\t\tqueryResponse, err :&#x3D; resultsIterator.Next()\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn nil, err\n\t\t&#125;\n \n\t\tvar asset Asset\n\t\terr &#x3D; json.Unmarshal(queryResponse.Value, &amp;asset)\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn nil, err\n\t\t&#125;\n\t\tassets &#x3D; append(assets, &amp;asset)\n\t&#125;\n \n\treturn assets, nil\n&#125;</code></pre>\n<h3 id=\"postman\"><a href=\"#postman\" class=\"headerlink\" title=\"postman\"></a>postman</h3><p><img src=\"https://img-blog.csdnimg.cn/be32919985884d23bc093b3205c96b0c.png\" alt=\"在这里插入图片描述\"><br>测试自家网站：<br><img src=\"https://img-blog.csdnimg.cn/e70c4b344c30431f9c67f358a1cf47a1.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/d135fcca4dc04a89a01cdef1de6c41c3.png\" alt=\"在这里插入图片描述\"></p>\n<p>本地查询：<br><img src=\"https://img-blog.csdnimg.cn/da1e4e197a6d49feb300403ff7b84b3e.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/2223b2d34bb9484d9f750014dd1621f8.png\" alt=\"在这里插入图片描述\"><br>自己的github：<br><img src=\"https://img-blog.csdnimg.cn/331d71247ebf46e7a46a3ca8818fe8dd.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/2b73c3d1876c4a8ba87e22b37a746c38.png\" alt=\"请添加图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/15836e9e154c48829cd51f8339de9251.png\" alt=\"请添加图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/dbd3f7827c7e4f19b2d617e2369e5b94.png\" alt=\"请添加图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/71f25947866f4a128d7bd183432f1a3f.png\" alt=\"请添加图片描述\"></p>\n<h2 id=\"实验二\"><a href=\"#实验二\" class=\"headerlink\" title=\"实验二\"></a>实验二</h2><h3 id=\"gin\"><a href=\"#gin\" class=\"headerlink\" title=\"gin\"></a>gin</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n \nimport (\n\t&quot;bytes&quot;\n\t&quot;crypto&#x2F;x509&quot;\n\t&quot;encoding&#x2F;json&quot;\n\t&quot;fmt&quot;\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-gateway&#x2F;pkg&#x2F;client&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-gateway&#x2F;pkg&#x2F;identity&quot;\n\t&quot;google.golang.org&#x2F;grpc&quot;\n\t&quot;google.golang.org&#x2F;grpc&#x2F;credentials&quot;\n\t&quot;io&#x2F;ioutil&quot;\n\t&quot;path&quot;\n\t&quot;time&quot;\n)\n \nconst (\n\tmspID         &#x3D; &quot;Org1MSP&quot;\n\tcryptoPath    &#x3D; &quot;.&#x2F;peerOrganizations&#x2F;org1.example.com&quot;\n\tcertPath      &#x3D; cryptoPath + &quot;&#x2F;users&#x2F;User1@org1.example.com&#x2F;msp&#x2F;signcerts&#x2F;cert.pem&quot;\n\tkeyPath       &#x3D; cryptoPath + &quot;&#x2F;users&#x2F;User1@org1.example.com&#x2F;msp&#x2F;keystore&#x2F;&quot;\n\ttlsCertPath   &#x3D; cryptoPath + &quot;&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;ca.crt&quot;\n\tpeerEndpoint  &#x3D; &quot;192.168.136.130:7051&quot;\n\tgatewayPeer   &#x3D; &quot;peer0.org1.example.com&quot;\n\tchannelName   &#x3D; &quot;mychannel&quot;\n\tchaincodeName &#x3D; &quot;basic&quot;\n)\n \ntype Asset struct &#123;\n\tAppraisedValue int    &#96;form:&quot;appraisedValue&quot; json:&quot;appraisedValue&quot; &#96;\n\tColor          string &#96;form:&quot;color&quot; json:&quot;color&quot;&#96;\n\tID             string &#96;form:&quot;id&quot; json:&quot;id&quot;&#96;\n\tOwner          string &#96;form:&quot;owner&quot; json:&quot;owner&quot;&#96;\n\tSize           int    &#96;form:&quot;size&quot; json:&quot;size&quot;&#96;\n&#125;\n \nfunc main() &#123;\n\t&#x2F;&#x2F; The gRPC client connection should be shared by all Gateway connections to this endpoint\n\tclientConnection :&#x3D; newGrpcConnection()\n\tdefer clientConnection.Close()\n \n\tid :&#x3D; newIdentity()\n\tsign :&#x3D; newSign()\n \n\t&#x2F;&#x2F; Create a Gateway connection for a specific client identity\n\tgateway, err :&#x3D; client.Connect(\n\t\tid,\n\t\tclient.WithSign(sign),\n\t\tclient.WithClientConnection(clientConnection),\n\t\t&#x2F;&#x2F; Default timeouts for different gRPC calls\n\t\tclient.WithEvaluateTimeout(5*time.Second),\n\t\tclient.WithEndorseTimeout(15*time.Second),\n\t\tclient.WithSubmitTimeout(5*time.Second),\n\t\tclient.WithCommitStatusTimeout(1*time.Minute),\n\t)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n\tdefer gateway.Close()\n\tnetwork :&#x3D; gateway.GetNetwork(channelName)\n\tcontract :&#x3D; network.GetContract(chaincodeName)\n \n\tr :&#x3D; gin.Default()\n\tr1 :&#x3D; r.Group(&quot;&#x2F;fabric2.4.2&quot;)\n\tr1.POST(&quot;&#x2F;Init&quot;, func(c *gin.Context) &#123;\n\t\tinitLedger(contract)\n\t\tc.JSON(200, &quot;init ok!&quot;)\n\t&#125;)\n\tr.Run(&quot;:8080&quot;) &#x2F;&#x2F; 监听并在 0.0.0.0:8080 上启动服务\n \n&#125;\n \n&#x2F;&#x2F; Evaluate a transaction to query ledger state.\nfunc getAllAssets(contract *client.Contract) string &#123;\n\tfmt.Println(&quot;Evaluate Transaction: GetAllAssets, function returns all the current assets on the ledger&quot;)\n \n\tevaluateResult, err :&#x3D; contract.EvaluateTransaction(&quot;GetAllAssets&quot;)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to evaluate transaction: %w&quot;, err))\n\t&#125;\n\tresult :&#x3D; formatJSON(evaluateResult)\n \n\tfmt.Printf(&quot;*** Result:%s\\n&quot;, result)\n \n\treturn string(evaluateResult)\n&#125;\n \n&#x2F;&#x2F; newGrpcConnection creates a gRPC connection to the Gateway server.\nfunc newGrpcConnection() *grpc.ClientConn &#123;\n\tcertificate, err :&#x3D; loadCertificate(tlsCertPath)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n \n\tcertPool :&#x3D; x509.NewCertPool()\n\tcertPool.AddCert(certificate)\n\ttransportCredentials :&#x3D; credentials.NewClientTLSFromCert(certPool, gatewayPeer)\n \n\tconnection, err :&#x3D; grpc.Dial(peerEndpoint, grpc.WithTransportCredentials(transportCredentials))\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to create gRPC connection: %w&quot;, err))\n\t&#125;\n \n\treturn connection\n&#125;\n \n&#x2F;&#x2F; newIdentity creates a client identity for this Gateway connection using an X.509 certificate.\nfunc newIdentity() *identity.X509Identity &#123;\n\tcertificate, err :&#x3D; loadCertificate(certPath)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n \n\tid, err :&#x3D; identity.NewX509Identity(mspID, certificate)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n \n\treturn id\n&#125;\n \nfunc loadCertificate(filename string) (*x509.Certificate, error) &#123;\n\tcertificatePEM, err :&#x3D; ioutil.ReadFile(filename)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, fmt.Errorf(&quot;failed to read certificate file: %w&quot;, err)\n\t&#125;\n\treturn identity.CertificateFromPEM(certificatePEM)\n&#125;\n \n&#x2F;&#x2F; newSign creates a function that generates a digital signature from a message digest using a private key.\nfunc newSign() identity.Sign &#123;\n\tfiles, err :&#x3D; ioutil.ReadDir(keyPath)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to read private key directory: %w&quot;, err))\n\t&#125;\n\tprivateKeyPEM, err :&#x3D; ioutil.ReadFile(path.Join(keyPath, files[0].Name()))\n \n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to read private key file: %w&quot;, err))\n\t&#125;\n \n\tprivateKey, err :&#x3D; identity.PrivateKeyFromPEM(privateKeyPEM)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n \n\tsign, err :&#x3D; identity.NewPrivateKeySign(privateKey)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n \n\treturn sign\n&#125;\n \n&#x2F;&#x2F; Format JSON data\nfunc formatJSON(data []byte) string &#123;\n\tvar prettyJSON bytes.Buffer\n\tif err :&#x3D; json.Indent(&amp;prettyJSON, data, &quot; &quot;, &quot;&quot;); err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to parse JSON: %w&quot;, err))\n\t&#125;\n\treturn prettyJSON.String()\n&#125;</code></pre>\n<p>New asset部分：<br>把下图代码：<br><img src=\"https://img-blog.csdnimg.cn/71a3939f074d428ca233e042689e2180.png\" alt=\"在这里插入图片描述\"><br>改为这个：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">r1.POST(&quot;&#x2F;CreateAsset&quot;, func(c *gin.Context) &#123;\n\t\tvar asset Asset\n\t\tc.ShouldBind(&amp;asset)\n\t\tc.JSON(200, asset)\n\t\tmarshal, _ :&#x3D; json.Marshal(asset)\n\t\tCreateAsset(contract, asset)\n\t\tfmt.Println(&quot;存入成功！存入的数据是:&quot;, string(marshal))\n\t\t&#x2F;&#x2F;fmt.Println(&quot;asset:&quot;, asset)\n\t&#125;)</code></pre>\n<p>函数：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func CreateAsset(contract *client.Contract, asset Asset) string &#123;\n\tevaluateResult, err :&#x3D; contract.SubmitTransaction(&quot;CreateAsset&quot;, asset.ID, asset.Color, strconv.Itoa(asset.Size), asset.Owner, strconv.Itoa(asset.AppraisedValue))\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to evaluate transaction: %w&quot;, err))\n\t&#125;\n\tresult :&#x3D; formatJSON(evaluateResult)\n \n\tfmt.Printf(&quot;*** Result:%s\\n&quot;, result)\n \n\treturn string(evaluateResult)\n&#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/b80d786d2c31434abe07d3efd3b5b361.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/be62f1df241f40f6a02f54ff94c48710.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本次实验内容内容不多，难度颇大。<br>其一在于作者默认搭好框架，所以需要按照前文做出适配。<br>其二是网络搭好之后的查询，如果看了前文，可以知道作者是修改了</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://github.com/hyperledger/fabric-samples/tree/main/asset-transfer-basic\">https://github.com/hyperledger/fabric-samples/tree/main/asset-transfer-basic</a></p>\n<p>部分的代码，也就是本文的gin框架部分。修改也很多，<br><img src=\"https://img-blog.csdnimg.cn/80b8ebd9e1ed460186bf76e8c933ebb2.png\" alt=\"在这里插入图片描述\"><br>然后就是代码，代码在我这里经常报错，然后为了解决一个bug往往会搞出更多的问题，尤其是网络接口的占用，就在写文档的现在，我的7051端口莫名被占用了，为了更好完成期末任务，决定找一个正确而清晰的文档从头开始配置。（很大的原因是这几次作业下来整个fabric文件夹臃肿不堪，fabric-samples就有好几个，隔着几周时间回去看，有能运行的，也有当初是坑，后来没删的，总之，归零重启更有效）</p></blockquote>\n<p>在做两个实验之前，我先按照作者的思路配置了环境，主要是启动网络。<br>其次是一种很新的工具，postman，现在还没有完全摸清这个软件的用途，目前仅做查询网址用途。</p>\n<p>第二个查询部分没有把assets查出来，可能是某个方面出了bug，之后会重新启用虚拟机，然后从头开始做一遍。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/bf47930e35b9477ebf5f4fa286303011.jpeg\" alt=\"请添加图片描述\"></p>\n","text":" https://blog.csdn.net/lakersssss24/article/details/125762826?spm=1001.2014.3001.5501https://blog.csdn.net/lakersssss24/article/details/1264...","link":"","photos":[],"count_time":{"symbolsCount":"30k","symbolsTime":"27 mins."},"categories":[{"name":"信管","slug":"信管","count":12,"path":"api/categories/信管.json"}],"tags":[{"name":"区块链","slug":"区块链","count":10,"path":"api/tags/区块链.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8F%90%E5%89%8D%E5%87%86%E5%A4%87\"><span class=\"toc-text\">提前准备</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E9%AA%8C%E4%B8%80\"><span class=\"toc-text\">实验一</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#network\"><span class=\"toc-text\">network</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#gin%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">gin框架</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%93%BE%E7%A0%81\"><span class=\"toc-text\">链码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#postman\"><span class=\"toc-text\">postman</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E9%AA%8C%E4%BA%8C\"><span class=\"toc-text\">实验二</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#gin\"><span class=\"toc-text\">gin</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"Algernon","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/68c4c7d8696c482da565ab5c8ebfa2fa.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}},"mapped":true,"prev_post":{"title":"【文本挖掘】业绩预告原因·其二","uid":"cff508c862505ad67891de36ae9bac94","slug":"文本挖掘-业绩预告2","date":"2022-12-04T10:50:49.000Z","updated":"2022-12-04T11:00:52.491Z","comments":true,"path":"api/articles/文本挖掘-业绩预告2.json","keywords":null,"cover":[],"text":"任务目标 查阅论文 https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CJFD&amp;dbname=CJFDLAST2022&amp;filename=GJMW202206010&amp;uniplatform=NZKPT&...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"信管","slug":"信管","count":12,"path":"api/categories/信管.json"},{"name":"机器学习","slug":"信管/机器学习","count":1,"path":"api/categories/信管/机器学习.json"}],"tags":[{"name":"文本挖掘","slug":"文本挖掘","count":3,"path":"api/tags/文本挖掘.json"}],"author":{"name":"Algernon","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/68c4c7d8696c482da565ab5c8ebfa2fa.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}}},"next_post":{"title":"【文本挖掘】业绩预告原因·其一","uid":"30cc2024ad37b5f81bb1a638f94642bf","slug":"文本挖掘-业绩预告1","date":"2022-11-23T09:30:49.000Z","updated":"2022-11-23T09:31:31.689Z","comments":true,"path":"api/articles/文本挖掘-业绩预告1.json","keywords":null,"cover":[],"text":"下载数据及提取信息在此单列前15行：000001,平安银行,预计本公司2006年度净利润与上一年度相比将增长300%-350%。2）业绩变化原因:利润的显著增长主要是由于利差的改善、资金运用效率的提高和贷款的良好增长，不良资产的成功清收和资产质量的改善使得所需减值拨备降低。这些因...","link":"","photos":[],"count_time":{"symbolsCount":"9.6k","symbolsTime":"9 mins."},"categories":[{"name":"机器学习","slug":"机器学习","count":9,"path":"api/categories/机器学习.json"}],"tags":[{"name":"文本挖掘","slug":"文本挖掘","count":3,"path":"api/tags/文本挖掘.json"}],"author":{"name":"Algernon","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/68c4c7d8696c482da565ab5c8ebfa2fa.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}}}}