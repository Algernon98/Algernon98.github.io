{"title":"【区块链技术与应用】（三）","uid":"a8f74615832b979b7524788c050fb00a","slug":"区块链3","date":"2022-11-03T15:00:49.000Z","updated":"2022-11-03T15:00:48.042Z","comments":true,"path":"api/articles/区块链3.json","keywords":null,"cover":[],"content":"<p><img src=\"https://img-blog.csdnimg.cn/c1ea6f96aab24517899d4365c70444fb.gif\" alt=\"请添加图片描述\"></p>\n<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>本次内容复杂、且报错较多，部分图片没有放在最终文档里，而部分报错放在文档中，最终也没有删去。解决报错比单纯对着代码跑一遍难度更大，也更有意义，故予以保留。<br><img src=\"https://img-blog.csdnimg.cn/dbb7a35febb440f7a4c60fd9431ce747.jpeg\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"内容\"><a href=\"#内容\" class=\"headerlink\" title=\"内容\"></a>内容</h2><h3 id=\"1-0-内容准备\"><a href=\"#1-0-内容准备\" class=\"headerlink\" title=\"1.0  内容准备\"></a>1.0  内容准备</h3><p>这一部分作为一些常用命令的存储，显然，我在搭建环境的过程中重新配置的一遍之前的内容。（呜呜呜破防了）</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>正文从1.1开始</p></blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">sudo docker rm $(sudo docker ps -aq)</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://blog.csdn.net/qq_28421553/article/details/126835125\">https://blog.csdn.net/qq_28421553/article/details/126835125</a></p></blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">$ mkdir -p $GOPATH&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;\n$ cd $GOPATH&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;\n$ git clone https:&#x2F;&#x2F;github.com&#x2F;hyperledger&#x2F;fabric.git</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">$ PROJECT_VERSION&#x3D;2.2.8\n$ LD_FLAGS&#x3D;&quot;-X github.com&#x2F;hyperledger&#x2F;fabric&#x2F;common&#x2F;metadata.Version&#x3D;$&#123;PROJECT_VERSION&#125; \\\n            -X github.com&#x2F;hyperledger&#x2F;fabric&#x2F;common&#x2F;metadata.BaseDockerLabel&#x3D;org.hyperledger.fabric \\\n            -X github.com&#x2F;hyperledger&#x2F;fabric&#x2F;common&#x2F;metadata.DockerNamespace&#x3D;hyperledger \\\n            -X github.com&#x2F;hyperledger&#x2F;fabric&#x2F;common&#x2F;metadata.BaseDockerNamespace&#x3D;hyperledger&quot;\n\n$ CGO_CFLAGS&#x3D;&quot; &quot; go install -tags &quot;&quot; -ldflags &quot;$LD_FLAGS&quot; \\\ngithub.com&#x2F;hyperledger&#x2F;fabric&#x2F;cmd&#x2F;peer</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">https:&#x2F;&#x2F;hyperledger-fabric.readthedocs.io&#x2F;zh_CN&#x2F;release-2.2&#x2F;install.html</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># GOROOT\nexport GOROOT&#x3D;&#x2F;usr&#x2F;local&#x2F;go\n# GOROOT bin\nexport PATH&#x3D;$PATH:$GOROOT&#x2F;bin\n# GOPATH\nexport GOPATH&#x3D;$HOME&#x2F;go\n# GOPATH bin\nexport PATH&#x3D;$PATH:$GOPATH&#x2F;bin</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">CGO_CFLAGS&#x3D;&quot; &quot; go install -tags &quot;&quot; -ldflags &quot;$LD_FLAGS&quot; \\\ngithub.com&#x2F;hyperledger&#x2F;fabric&#x2F;cmd&#x2F;peer</code></pre>\n<h3 id=\"1-1-生成证书及配置文件\"><a href=\"#1-1-生成证书及配置文件\" class=\"headerlink\" title=\"1.1 生成证书及配置文件\"></a>1.1 生成证书及配置文件</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/developing_applications.html\">https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/developing_applications.html</a></p>\n<p>代码来源：<br><a href=\"https://sunkaiyuan.blog.csdn.net/article/details/121585240\">https://sunkaiyuan.blog.csdn.net/article/details/121585240</a></p></blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">利用cryptogen生成证书（构建一个网络所需要生成的所有证书文件）：\ncrypto 词根---加密\ngen    词根---证书\ncryptogen（使用cryptogen命令生成组织结构和身份证书文件）\n \n\n \ncryptogen\n是用于生成 Hyperledger Fabric 密钥材料的实用程序，它是作为一种为测试目的预配置网络的方式提供的，它通常不会用于生产网络的操作\n \n5个子命令：\nhelp\ngenerate     生成所有的证书命令\nshowtemplate 展示一个模板文件命令\nextend\nversion\n \n1、展示一个模板文件命令，随便找一个地新建一个文件夹 twonodes\n# 输出到终端展示\nroot@aa:~&#x2F;block&#x2F;geneg&#x2F;twonodes# cryptogen showtemplate\n# 导出一个文件\nroot@aa:~&#x2F;block&#x2F;geneg&#x2F;twonodes# cryptogen showtemplate &gt; cryptogen-config.yaml\nroot@aa:~&#x2F;block&#x2F;geneg&#x2F;twonodes# cat cryptogen-config.yaml\n# ---------------------------------------------------------------------------\n# &quot;OrdererOrgs&quot; - Definition of organizations managing orderer nodes\n# ---------------------------------------------------------------------------\nOrdererOrgs:\n  # ---------------------------------------------------------------------------\n  # Orderer   \n  # （1）排序节点的置\n  # ---------------------------------------------------------------------------\n  - Name: Orderer            # 排序节点的名称\n    Domain: example.com      # 排序节点的域名\n    EnableNodeOUs: false     # 是否使用OU配置，OU相当于组织下面的部门，我们的每个组织的下面有很多个节点，我们可以将一些节点作为类似于一个部门，\n\t                         # 也就是说你的组织下面可以有好几个部门，每个部门下面有多个节点\n    # ---------------------------------------------------------------------------\n    # &quot;Specs&quot; - See PeerOrgs below for complete description\n    # ---------------------------------------------------------------------------\n    Specs:\n      - Hostname: orderer\n \n# ---------------------------------------------------------------------------\n# &quot;PeerOrgs&quot; - Definition of organizations managing peer nodes\n# ---------------------------------------------------------------------------\nPeerOrgs:   （2）per节点的配置\n  # ---------------------------------------------------------------------------\n  # Org1                            \n  # ---------------------------------------------------------------------------\n  - Name: Org1                      # 组织1节点的名称\n    Domain: org1.example.com        # 组织1节点的域名\n    EnableNodeOUs: false            # 是否开启OU配置\n \n    # ---------------------------------------------------------------------------\n    # &quot;CA&quot;\n    # ---------------------------------------------------------------------------\n    # Uncomment this section to enable the explicit definition of the CA for this\n    # organization.  This entry is a Spec.  See &quot;Specs&quot; section below for details.\n    # ---------------------------------------------------------------------------\n \n \n    # Note: Template and Specs are not mutually exclusive.  You may define both\n    # sections and the aggregate nodes will be created for you.  Take care with\n    # name collisions\n    # ---------------------------------------------------------------------------\n    Template:               \n      Count: 1              # （3）在组织1下面生成1个节点\n      # Start: 5\n      # Hostname: &#123;&#123;.Prefix&#125;&#125;&#123;&#123;.Index&#125;&#125; # default\n      # SANS:\n      #   - &quot;&#123;&#123;.Hostname&#125;&#125;.alt.&#123;&#123;.Domain&#125;&#125;&quot;\n \n    # ---------------------------------------------------------------------------\n    # &quot;Users&quot;\n    # ---------------------------------------------------------------------------\n    # Count: The number of user accounts _in addition_ to Admin\n    # ---------------------------------------------------------------------------\n    Users:                  # （4）在组织下面有节点的概念，Users--&gt;就是真正操作节点的人的个数（操作终端的个数）\n      Count: 1\n \n  # ---------------------------------------------------------------------------\n  # Org2: See &quot;Org1&quot; for full specification\n  # ---------------------------------------------------------------------------\n  - Name: Org2\n    Domain: org2.example.com\n    EnableNodeOUs: false\n    Template:\n      Count: 1\n    Users:\n      Count: 1\n \n2、生成证书文件，--config指定配置文件\nroot@aa:~&#x2F;block&#x2F;geneg&#x2F;twonodes# cryptogen generate --config&#x3D;cryptogen-config.yaml\n# 生成了两个组织\norg1.example.com\norg2.example.com\nroot@aa:~&#x2F;block&#x2F;geneg&#x2F;twonodes# ls\ncrypto-config  cryptogen-config.yaml\nroot@aa:~&#x2F;block&#x2F;geneg&#x2F;twonodes# cd crypto-config&#x2F;\nroot@aa:~&#x2F;block&#x2F;geneg&#x2F;twonodes&#x2F;crypto-config# ls\n# 生成了一个排序节点，一个peer节点，两个组织的信息\nordererOrganizations  peerOrganizations\nroot@aa:~&#x2F;block&#x2F;geneg&#x2F;twonodes&#x2F;crypto-config# cd ordererOrganizations&#x2F;\nroot@aa:~&#x2F;block&#x2F;geneg&#x2F;twonodes&#x2F;crypto-config&#x2F;ordererOrganizations# ls\nexample.com\nroot@aa:~&#x2F;block&#x2F;geneg&#x2F;twonodes&#x2F;crypto-config&#x2F;ordererOrganizations# cd example.com&#x2F;\nroot@aa:~&#x2F;block&#x2F;geneg&#x2F;twonodes&#x2F;crypto-config&#x2F;ordererOrganizations&#x2F;example.com# ls\n# 排序节点组织的所有证书文件\nca  msp  orderers  tlsca  users\n \n这样我们就生成了组织结构，和所有的证书文件</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/f24c78991b5344b4ba73a34e81d5b6be.png\" alt=\"请添加图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/7d935417fafa4863a5bd29b8bd6c916c.png\" alt=\"请添加图片描述\"></p>\n<h3 id=\"1-2-生成创世区块及通道文件\"><a href=\"#1-2-生成创世区块及通道文件\" class=\"headerlink\" title=\"1.2 生成创世区块及通道文件\"></a>1.2 生成创世区块及通道文件</h3><p>生成创世区块<br><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">configtxgen -profile TwoOrgsOrdererGenesis -outputBlock .&#x2F;channel-artifacts&#x2F;genesis.block -channelID fabric-channel</code></pre><br><img src=\"https://img-blog.csdnimg.cn/960c11dd7b824e3aa5346316431c954c.png\" alt=\"请添加图片描述\"><br>生成通道<br><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">configtxgen -profile TwoOrgsChannel -outputCreateChannelTX .&#x2F;channel-artifacts&#x2F;channel.tx -channelID mychannel</code></pre><br>生成组织1的锚节点文件<br><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate .&#x2F;channel-artifacts&#x2F;Org1MSPanchors.tx -channelID mychannel -asOrg Org1MSP</code></pre><br>生成组织2的锚节点文件</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate .&#x2F;channel-artifacts&#x2F;Org2MSPanchors.tx -channelID mychannel -asOrg Org2MSP</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/04af784e54e34f1cb13f9ca3bd189d6b.png\" alt=\"请添加图片描述\"></p>\n<h3 id=\"1-3-编写docker-compose文件\"><a href=\"#1-3-编写docker-compose文件\" class=\"headerlink\" title=\"1.3 编写docker-compose文件\"></a>1.3 编写docker-compose文件</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">algernon@algernon-Lenovo-Legion-Y7000:~&#x2F;twonodes$ configtxgen -profile TwoOrgsChannel -outputCreateChannelTX .&#x2F;channel-artifacts&#x2F;channel.tx -channelID mychannel\nflag provided but not defined: -outputCreateChannelTX\n</code></pre>\n<p>在raft-test目录下，新建docker-compose.yaml文件。文件内容如下面所示。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>docker-compose.yaml文件内容</p></blockquote>\n<h4 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">version: &#39;2.4&#39;\n\nvolumes:\n  orderer.example.com:\n  peer0.org1.example.com:\n  peer0.org2.example.com:\n  \nnetworks:\n  test:\n    name: twonodes_test\n\nservices:\n\n  orderer.example.com:\n    container_name: orderer.example.com\n    image: hyperledger&#x2F;fabric-orderer:latest\n    labels:\n        service: hyperledger-fabric\n    environment:\n      - FABRIC_LOGGING_SPEC&#x3D;INFO\n      - ORDERER_GENERAL_LISTENADDRESS&#x3D;0.0.0.0\n      - ORDERER_GENERAL_LISTENPORT&#x3D;7050\n      - ORDERER_GENERAL_LOCALMSPID&#x3D;OrdererMSP\n      - ORDERER_GENERAL_LOCALMSPDIR&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;msp\n      # enabled TLS\n      - ORDERER_GENERAL_TLS_ENABLED&#x3D;true\n      - ORDERER_GENERAL_TLS_PRIVATEKEY&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls&#x2F;server.key\n      - ORDERER_GENERAL_TLS_CERTIFICATE&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls&#x2F;server.crt\n      - ORDERER_GENERAL_TLS_ROOTCAS&#x3D;[&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls&#x2F;ca.crt]\n      - ORDERER_KAFKA_TOPIC_REPLICATIONFACTORY&#x3D;1\n      - ORDERER_KAFKA_VERBOSE&#x3D;true\n      - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls&#x2F;server.crt\n      - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls&#x2F;server.key\n      - ORDERER_GENERAL_CLUSTER_ROOTCAS&#x3D;[&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls&#x2F;ca.crt]\n      - ORDERER_GENERAL_BOOTSTRAPMETHOD&#x3D;none\n      - ORDERER_CHANNELPARTICIPATION_ENABLED&#x3D;true\n      - ORDERER_ADMIN_TLS_ENABLED&#x3D;true\n      - ORDERER_ADMIN_TLS_CERTIFICATE&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls&#x2F;server.crt\n      - ORDERER_ADMIN_TLS_PRIVATEKEY&#x3D;&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls&#x2F;server.key\n      - ORDERER_ADMIN_TLS_ROOTCAS&#x3D;[&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls&#x2F;ca.crt]\n      - ORDERER_ADMIN_TLS_CLIENTROOTCAS&#x3D;[&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls&#x2F;ca.crt]\n      - ORDERER_ADMIN_LISTENADDRESS&#x3D;0.0.0.0:7053\n#      - ORDERER_OPERATIONS_LISTENADDRESS&#x3D;orderer.example.com:9443\n#      - ORDERER_METRICS_PROVIDER&#x3D;prometheus\n    working_dir: &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric\n    command: orderer\n    volumes:\n        - .&#x2F;channel-artifacts&#x2F;genesis.block:&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;orderer.genesis.block\n        - .&#x2F;crypto-config&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp:&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;msp\n        - .&#x2F;crypto-config&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;tls&#x2F;:&#x2F;var&#x2F;hyperledger&#x2F;orderer&#x2F;tls\n        - orderer.example.com:&#x2F;var&#x2F;hyperledger&#x2F;production&#x2F;orderer\n    ports:\n      - 7050:7050\n      - 7053:7053\n    networks:\n      - test\n\n  peer0.org1.example.com:\n    container_name: peer0.org1.example.com\n    image: hyperledger&#x2F;fabric-peer:latest\n    labels:\n        service: hyperledger-fabric\n    environment:\n      #Generic peer variables\n      - CORE_VM_ENDPOINT&#x3D;unix:&#x2F;&#x2F;&#x2F;host&#x2F;var&#x2F;run&#x2F;docker.sock\n      # the following setting starts chaincode containers on the same\n      # bridge network as the peers\n      # https:&#x2F;&#x2F;docs.docker.com&#x2F;compose&#x2F;networking&#x2F;\n      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE&#x3D;twonodes_test\n      - FABRIC_LOGGING_SPEC&#x3D;INFO\n      #- FABRIC_LOGGING_SPEC&#x3D;DEBUG\n      - CORE_PEER_TLS_ENABLED&#x3D;true\n      - CORE_PEER_PROFILE_ENABLED&#x3D;true\n      - CORE_PEER_TLS_CERT_FILE&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;tls&#x2F;server.crt\n      - CORE_PEER_TLS_KEY_FILE&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;tls&#x2F;server.key\n      - CORE_PEER_TLS_ROOTCERT_FILE&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;tls&#x2F;ca.crt\n      # Peer specific variabes\n      - CORE_PEER_ID&#x3D;peer0.org1.example.com\n      - CORE_PEER_ADDRESS&#x3D;peer0.org1.example.com:7051\n      - CORE_PEER_LISTENADDRESS&#x3D;0.0.0.0:7051\n      - CORE_PEER_CHAINCODEADDRESS&#x3D;peer0.org1.example.com:7052\n      - CORE_PEER_CHAINCODELISTENADDRESS&#x3D;0.0.0.0:7052\n      - CORE_PEER_GOSSIP_BOOTSTRAP&#x3D;peer0.org1.example.com:7051\n      - CORE_PEER_GOSSIP_EXTERNALENDPOINT&#x3D;peer0.org1.example.com:7051\n      - CORE_PEER_LOCALMSPID&#x3D;Org1MSP\n \n    volumes:\n        - &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;host&#x2F;var&#x2F;run&#x2F;docker.sock\n        - .&#x2F;crypto-config&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;msp:&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;msp\n        - .&#x2F;crypto-config&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls:&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;tls\n        - peer0.org1.example.com:&#x2F;var&#x2F;hyperledger&#x2F;production\n    working_dir: &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer\n    command: peer node start\n    ports:\n      - 7051:7051\n    networks:\n      - test\n\n  peer0.org2.example.com:\n    container_name: peer0.org2.example.com\n    image: hyperledger&#x2F;fabric-peer:latest\n    labels:\n        service: hyperledger-fabric\n    environment:\n      #Generic peer variables\n      - CORE_VM_ENDPOINT&#x3D;unix:&#x2F;&#x2F;&#x2F;host&#x2F;var&#x2F;run&#x2F;docker.sock\n      # the following setting starts chaincode containers on the same\n      # bridge network as the peers\n      # https:&#x2F;&#x2F;docs.docker.com&#x2F;compose&#x2F;networking&#x2F;\n      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE&#x3D;twonodes_test\n      - FABRIC_LOGGING_SPEC&#x3D;INFO\n      #- FABRIC_LOGGING_SPEC&#x3D;DEBUG\n      - CORE_PEER_TLS_ENABLED&#x3D;true\n      - CORE_PEER_PROFILE_ENABLED&#x3D;true\n      - CORE_PEER_TLS_CERT_FILE&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;tls&#x2F;server.crt\n      - CORE_PEER_TLS_KEY_FILE&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;tls&#x2F;server.key\n      - CORE_PEER_TLS_ROOTCERT_FILE&#x3D;&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;tls&#x2F;ca.crt\n      # Peer specific variabes\n      - CORE_PEER_ID&#x3D;peer0.org2.example.com\n      - CORE_PEER_ADDRESS&#x3D;peer0.org2.example.com:9051\n      - CORE_PEER_LISTENADDRESS&#x3D;0.0.0.0:9051\n      - CORE_PEER_CHAINCODEADDRESS&#x3D;peer0.org2.example.com:9052\n      - CORE_PEER_CHAINCODELISTENADDRESS&#x3D;0.0.0.0:9052\n      - CORE_PEER_GOSSIP_EXTERNALENDPOINT&#x3D;peer0.org2.example.com:9051\n      - CORE_PEER_GOSSIP_BOOTSTRAP&#x3D;peer0.org2.example.com:9051\n      - CORE_PEER_LOCALMSPID&#x3D;Org2MSP\n    volumes:\n      - &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;host&#x2F;var&#x2F;run&#x2F;docker.sock\n      - .&#x2F;crypto-config&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;peers&#x2F;peer0.org2.example.com&#x2F;msp:&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;msp\n      - .&#x2F;crypto-config&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;peers&#x2F;peer0.org2.example.com&#x2F;tls:&#x2F;etc&#x2F;hyperledger&#x2F;fabric&#x2F;tls\n      - peer0.org2.example.com:&#x2F;var&#x2F;hyperledger&#x2F;production\n    working_dir: &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer\n    command: peer node start\n    ports:\n      - 9051:9051\n    networks:\n      - test\n\n\n  cli1:\n    container_name: cli1\n    image: hyperledger&#x2F;fabric-tools:latest\n    tty: true\n    stdin_open: true\n    environment:                            # 环境变量相关设置\n      - GOPATH&#x3D;&#x2F;opt&#x2F;gopath\n      - CORE_VM_ENDPOINT&#x3D;unix:&#x2F;&#x2F;&#x2F;host&#x2F;var&#x2F;run&#x2F;docker.sock\n      - CORE_LOGGING_LEVEL&#x3D;INFO\n      - CORE_PEER_ID&#x3D;cli1\n      - CORE_PEER_ADDRESS&#x3D;peer0.org1.example.com:7051\n      - CORE_PEER_LOCALMSPID&#x3D;Org1MSP\n      - CORE_PEER_TLS_ENABLED&#x3D;true\n      - CORE_PEER_TLS_CERT_FILE&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;server.crt\n      - CORE_PEER_TLS_KEY_FILE&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;server.key\n      - CORE_PEER_TLS_ROOTCERT_FILE&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;ca.crt\n      - CORE_PEER_MSPCONFIGPATH&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;users&#x2F;Admin@org1.example.com&#x2F;msp\n      #- FABRIC_LOGGING_SPEC&#x3D;DEBUG\n    working_dir: &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer\n    command: &#x2F;bin&#x2F;bash\n    volumes:\n        # 挂载目录，默认就行\n        - &#x2F;var&#x2F;run&#x2F;:&#x2F;host&#x2F;var&#x2F;run&#x2F;\n        # 链码存放路径(go或者node.js写的链代码)\n        - .&#x2F;chaincode&#x2F;go&#x2F;:&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-cluster&#x2F;chaincode&#x2F;go\n        # 存放证书的路径\n        - .&#x2F;crypto-config:&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;\n        # 生成的创世块和管道以及更新的锚节点文件存放的路径(tx和block后缀的文件)\n        - .&#x2F;channel-artifacts:&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;channel-artifacts\n        # 注意：.&#x2F;channel-artifacts这种是指路径，需要本地有这个路径，或者改成自己的路径\n    networks:\n      - test\n\n  cli2:\n    container_name: cli2\n    image: hyperledger&#x2F;fabric-tools:latest\n    tty: true\n    stdin_open: true\n    environment:                            # 环境变量相关设置\n      - GOPATH&#x3D;&#x2F;opt&#x2F;gopath\n      - CORE_VM_ENDPOINT&#x3D;unix:&#x2F;&#x2F;&#x2F;host&#x2F;var&#x2F;run&#x2F;docker.sock\n      - CORE_LOGGING_LEVEL&#x3D;INFO\n      - CORE_PEER_ID&#x3D;cli2\n      - CORE_PEER_ADDRESS&#x3D;peer0.org2.example.com:9051\n      - CORE_PEER_LOCALMSPID&#x3D;Org2MSP\n      - CORE_PEER_TLS_ENABLED&#x3D;true\n      - CORE_PEER_TLS_CERT_FILE&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;peers&#x2F;peer0.org2.example.com&#x2F;tls&#x2F;server.crt\n      - CORE_PEER_TLS_KEY_FILE&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;peers&#x2F;peer0.org2.example.com&#x2F;tls&#x2F;server.key\n      - CORE_PEER_TLS_ROOTCERT_FILE&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;peers&#x2F;peer0.org2.example.com&#x2F;tls&#x2F;ca.crt\n      - CORE_PEER_MSPCONFIGPATH&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;users&#x2F;Admin@org2.example.com&#x2F;msp\n      #- FABRIC_LOGGING_SPEC&#x3D;DEBUG\n    working_dir: &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer\n    command: &#x2F;bin&#x2F;bash\n    volumes:\n        # 挂载目录，默认就行\n        - &#x2F;var&#x2F;run&#x2F;:&#x2F;host&#x2F;var&#x2F;run&#x2F;\n        # 链码存放路径(go或者node.js写的链代码)\n        - .&#x2F;chaincode&#x2F;go&#x2F;:&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-cluster&#x2F;chaincode&#x2F;go\n        # 存放证书的路径\n        - .&#x2F;crypto-config:&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;\n        # 生成的创世块和管道以及更新的锚节点文件存放的路径(tx和block后缀的文件)\n        - .&#x2F;channel-artifacts:&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;channel-artifacts\n        # 注意：.&#x2F;channel-artifacts这种是指路径，需要本地有这个路径，或者改成自己的路径\n    networks:\n      - test\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/555947f5f84e406cac7db98052e62d1e.png\" alt=\"请添加图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/a05020f7bb4d47c48e0f8f1376ea87a2.png\" alt=\"请添加图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/17aa29f47f4547a7aab2ba96e663e9f6.png\" alt=\"请添加图片描述\"></p>\n<h3 id=\"1-4-通道操作-链码\"><a href=\"#1-4-通道操作-链码\" class=\"headerlink\" title=\"1.4 通道操作 链码\"></a>1.4 通道操作 链码</h3><p>代码来源：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://sunkaiyuan.blog.csdn.net/article/details/124315270\">https://sunkaiyuan.blog.csdn.net/article/details/124315270</a></p></blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">docker exec -it cli1 bash\nbash-5.1# peer channel create -o orderer.example.com:7050 -c mychannel -f .&#x2F;channel-artifacts&#x2F;channel.tx --tls true --cafile &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;ordererOrganizations&#x2F;example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem\n</code></pre>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">docker exec -it cli1 bash</code></pre>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">bash-5.1# peer channel create -o orderer.example.com:7050 -c mychannel -f .&#x2F;channel-artifacts&#x2F;channel.tx --tls true -- cafile &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;ordererOrganizations&#x2F;example.com&#x2F;mps&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem\n2022-10-19 15:59:10.071 UTC 0001 WARN [main] InitCmd -&gt; CORE_LOGGING_LEVEL is no longer supported, please use the FABRIC_LOGGING_SPEC environment variable\n2022-10-19 15:59:10.073 UTC 0002 WARN [main] SetOrdererEnv -&gt; CORE_LOGGING_LEVEL is no longer supported, please use the FABRIC_LOGGING_SPEC environment variable\nError: failed to create deliver client for orderer: failed to load config for OrdererClient: unable to load orderer.tls.rootcert.file: open : no such file or directory</code></pre>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">cd &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer</code></pre>\n<p>配置一下hosts</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">vim &#x2F;etc&#x2F;hosts</code></pre>\n<p>因为我们的终端容器cli1和cli2要加入同一个通道，所以我们需要将cli1中生成的通道文件 mychannel.block复制到cli2中：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">docker cp cli1:&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;mychannel.block .&#x2F;</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">docker cp .&#x2F;mychannel.block cli2:&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">root@aa:~&#x2F;twonodes# docker cp cli1:&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer\n&quot;docker cp&quot; requires exactly 2 arguments.\nSee &#39;docker cp --help&#39;.\n\nUsage:  docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-\n\tdocker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH\n\nCopy files&#x2F;folders between a container and the local filesystem\nroot@aa:~&#x2F;twonodes# docker cp cli1:&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;mychannel.block .&#x2F;\nroot@aa:~&#x2F;twonodes# ls\nchaincode          configtx.yaml  crypto-config.yaml   mychannel.block\nchannel-artifacts  crypto-config  docker-compose.yaml\nroot@aa:~&#x2F;twonodes# docker cp .&#x2F;mychannel.block cli2:&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer\nroot@aa:~&#x2F;twonodes# docker exec -it cli2 bash\nbash-5.1# ls\nchannel-artifacts  crypto             mychannel.block\nbash-5.1# \nbash-5.1# exit\nexit\nroot@aa:~&#x2F;twonodes# \n</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>将 cli1和 cli2加入通道 mychannel.block</p></blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">$ docker exec -it cli1 bash\n$ peer channel join -b mychannel.block\n$ exit\n$ docker exec -it cli2 bash\n$ peer channel join -b mychannel.block\n$ exit\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">root@aa:~&#x2F;twonodes# docker exec -it cli1 bash\nbash-5.1# peer channel join -b mychannel.block\n2022-03-11 08:29:05.974 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized\n2022-03-11 08:29:06.048 UTC [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel\nbash-5.1# exit\nexit\nroot@aa:~&#x2F;twonodes# docker exec -it cli2 bash\nbash-5.1# peer channel join -b mychannel.block\n2022-03-11 08:29:32.601 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized\n2022-03-11 08:29:32.654 UTC [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel\nbash-5.1# exit\nexit\nroot@aa:~&#x2F;twonodes# \n</code></pre>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">bash-5.1# peer channel create -o orderer.example.com:7050 -c mychannel -f .&#x2F;channel-artifacts&#x2F;channel.tx --tls true --cafile &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;ordererOrganizations&#x2F;example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem\n2022-10-20 07:42:22.043 UTC 0001 WARN [main] InitCmd -&gt; CORE_LOGGING_LEVEL is no longer supported, please use the FABRIC_LOGGING_SPEC environment variable\n2022-10-20 07:42:22.044 UTC 0002 WARN [main] SetOrdererEnv -&gt; CORE_LOGGING_LEVEL is no longer supported, please use the FABRIC_LOGGING_SPEC environment variable\n2022-10-20 07:42:22.046 UTC 0003 INFO [channelCmd] InitCmdFactory -&gt; Endorser and orderer connections initialized\nError: got unexpected status: BAD_REQUEST -- channel creation request not allowed because the orderer system channel is not defined\n</code></pre>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">peer channel create -o orderer.example.com:7050 -c mychannel -f .&#x2F;channel-artifacts&#x2F;channel.tx --tls true --cafile &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;ordererOrganizations&#x2F;example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">fabric-samples里有示例链码sacc.go，当然你可以编写自己的链码，这里只做演示，整个链码的生命周期\n将链码复制到，项目的链码目录下 chaincode&#x2F;go\nroot@aa:~&#x2F;twonodes&#x2F;chaincode&#x2F;go# ls\nsacc.go\n</code></pre>\n<p>打包链码-peer lifecycle chaincode package<br><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">root@aa:~&#x2F;twonodes&#x2F;chaincode&#x2F;go# docker exec -it cli1 bash\nbash-5.1# cd &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-cluster&#x2F;chaincode&#x2F;go\nbash-5.1# ls\nsacc.go\n# Go Modules国内加速镜像加速，并打包依赖到vender\nbash-5.1# go env -w GO111MODULE&#x3D;on\nbash-5.1# go env -w GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy.cn,direct\nbash-5.1# go mod init\nbash-5.1# go mod vendor\nbash-5.1# go env -w GO111MODULE&#x3D;auto\nbash-5.1# ls\ngo.mod   go.sum   sacc.go  vendor\n# 回到工作目录，开始打包\nbash-5.1# cd &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer\nbash-5.1# ls\nchannel-artifacts  crypto             mychannel.block\nbash-5.1# peer lifecycle chaincode package sacc.tar.gz --path github.com&#x2F;hyperledger&#x2F;fabric-cluster&#x2F;chaincode&#x2F;go&#x2F; --label sacc_1\n---------------------------------------------------\n sacc.tar.gz  打包的名称\t\t\t\t\t\t\n --path       链码所在的路径\t\t\t\t\t   \n --label      链码的标签\t\t\t\t\t\t\n---------------------------------------------------\nbash-5.1# ls\nchannel-artifacts  crypto             mychannel.block    sacc.tar.gz\n# 将生成的打包文件复制到cli2里\nbash-5.1# exit\nroot@aa:~&#x2F;twonodes# docker cp cli1:&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;sacc.tar.gz .&#x2F;\nroot@aa:~&#x2F;twonodes# ls\nchaincode          configtx.yaml  crypto-config.yaml   mychannel.block\nchannel-artifacts  crypto-config  docker-compose.yaml  sacc.tar.gz\nroot@aa:~&#x2F;twonodes# docker cp sacc.tar.gz cli2:&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer\nroot@aa:~&#x2F;twonodes# docker exec -it cli2 bash\nbash-5.1# ls\nchannel-artifacts  crypto             mychannel.block    sacc.tar.gz\nbash-5.1# exit\n</code></pre><br>安装链码-peer lifecycle chaincode install</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 在每一个节点上都要安装\n# 节点1上安装链码\ndocker exec -it cli1 bash\npeer lifecycle chaincode install sacc.tar.gz\nexit\npeer lifecycle chaincode install sacc.tar.gz\nexit</code></pre>\n<p>查询链码的package-id即序列号-peer lifecycle chaincode approveformyorg</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 查询链码的package-id，在组织批准链码的时候需要用到，其实在安装完链码之后，打印的日志就显示了package-id\nroot@aa:~&#x2F;twonodes# docker exec -it cli1 bash\nbash-5.1# ls\nchannel-artifacts  crypto             mychannel.block    sacc.tar.gz\nbash-5.1# peer lifecycle chaincode queryinstalled\nInstalled chaincodes on peer:\nPackage ID: sacc_1:9ffa6d574bee9027d9ae02ad3c8a6fb3c7d0f65e86dcf887e6e33f7216571af8, Label: sacc_1\nbash-5.1# exit\n</code></pre>\n<p>组织批准链码-peer lifecycle chaincode approveformyorg</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 每一个组织都要批准了这个链码，之后，这个链码才可以被安装在我们的通道上\n# 组织批准链码命令如下：\npeer lifecycle chaincode approveformyorg --channelID mychannel --name sacc --version 1.0 --init-required --package-id  --sequence 1 --tls true --cafile &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem\n--------------------------------------------------- \n --channelID\t  通道ID \n --name\t\t\t 链码的名称 \n --version        链码的版本号\t\t\t\t\t\n --init-required  链码是否需要初始化\t\t\t\t\t   \n --package-id     链码的序列号\n --tls            tls验证\n --cafile         ca证书文件的路径\n---------------------------------------------------\n</code></pre>\n<h3 id=\"1-5-多机搭建\"><a href=\"#1-5-多机搭建\" class=\"headerlink\" title=\"1.5 多机搭建\"></a>1.5 多机搭建</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://sxguan0529.gitbook.io/hyperledger-fabric/hyperledger-fabric-duo-ji-da-jian\">https://sxguan0529.gitbook.io/hyperledger-fabric/hyperledger-fabric-duo-ji-da-jian</a></p>\n<blockquote>\n<p> 生成Fabric证书</p>\n<ol>\n<li>创建项目目录 在三台虚拟机上使用以下命令创建相同的项目目录（三台虚拟机项目路径要相同）。 cd ~/hyperledgermkdir multinodes</li>\n<li>编写证书文件 首先使用以下命令进入项目目录。 cd ~/hyperledger/multinodes 使用以下命令将模板文件复制到当前目录下。 cryptogen showtemplate &gt; crypto-config.yaml<br>将配置文件进行修改，修改如下。 OrdererOrgs:</li>\n</ol></blockquote>\n<ul>\n<li><p>Name: Orderer<br>Domain: example.com<br>EnableNodeOUs: true</p>\n<p>Specs:</p>\n<ul>\n<li>Hostname: orderer PeerOrgs:</li>\n</ul>\n</li>\n<li><p>Name: org1<br>Domain: org1.example.com<br>EnableNodeOUs: true<br>Template:<br>  Count: 1<br>Users:<br>  Count: 1</p>\n</li>\n<li><p>Name: org2<br>Domain: org2.example.com<br>EnableNodeOUs: true<br>Template:<br>  Count: 1<br>Users:<br>  Count: 1   </p>\n<ol>\n<li>生成证书文件 使用以下命令生成证书文件。 cryptogen generate —config=crypto-config.yaml 使用ls命令查看生成的文件，可以看到生成了crypto-config文件，这里存放所有的证书文件。 ls crypto-config<br>crypto-config.yaml 使用scp命令将证书文件复制到其他两台虚拟机中（使用scp命令时会要求输入主机密码）。 scp -r<br>./crypto-config root@172.17.0.11:~/hyperledger/multinodes/ scp -r<br>./crypto-config root@172.17.0.12:~/hyperledger/multinodes/<br>复制后使用以下命令在其他两台虚拟机的multinodes目录下查看是否复制成功。 ls crypto-config</li>\n</ol>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"1-6-浏览器搭建\"><a href=\"#1-6-浏览器搭建\" class=\"headerlink\" title=\"1.6 浏览器搭建\"></a>1.6 浏览器搭建</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>cd /opt/gopath/src/github.com/hyperledger/fabric-cluster/chaincode/go/sacc</p></blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#123;\n\t&quot;network-configs&quot;: &#123;\n\t\t&quot;test-network&quot;: &#123;\n\t\t\t&quot;name&quot;: &quot;Test Network&quot;,\n\t\t\t&quot;profile&quot;: &quot;.&#x2F;connection-profile&#x2F;test-network.json&quot;\n\t\t&#125;\n\t&#125;,\n\t&quot;license&quot;: &quot;Apache-2.0&quot;\n&#125;</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;hyperledger&#x2F;blockchain-explorer&#x2F;main&#x2F;examples&#x2F;net1&#x2F;connection-profile&#x2F;test-network.json -P connection-profile\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/b5bc96199a9948f7971abfcdd72f462d.png\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># SPDX-License-Identifier: Apache-2.0\nversion: &#39;2.1&#39;\n\nvolumes:\n  pgdata:\n  walletstore:\n\nnetworks:\n  mynetwork.com:\n    name: fabric_test\n\nservices:\n\n  explorerdb.mynetwork.com:\n    image: hyperledger&#x2F;explorer-db:latest\n    container_name: explorerdb.mynetwork.com\n    hostname: explorerdb.mynetwork.com\n    environment:\n      - DATABASE_DATABASE&#x3D;fabricexplorer\n      - DATABASE_USERNAME&#x3D;hppoc\n      - DATABASE_PASSWORD&#x3D;password\n    healthcheck:\n      test: &quot;pg_isready -h localhost -p 5432 -q -U postgres&quot;\n      interval: 30s\n      timeout: 10s\n      retries: 5\n    volumes:\n      - pgdata:&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data\n    networks:\n      - mynetwork.com\n\n  explorer.mynetwork.com:\n    image: hyperledger&#x2F;explorer:latest\n    container_name: explorer.mynetwork.com\n    hostname: explorer.mynetwork.com\n    environment:\n      - DATABASE_HOST&#x3D;explorerdb.mynetwork.com\n      - DATABASE_DATABASE&#x3D;fabricexplorer\n      - DATABASE_USERNAME&#x3D;hppoc\n      - DATABASE_PASSWD&#x3D;password\n      - LOG_LEVEL_APP&#x3D;info\n      - LOG_LEVEL_DB&#x3D;info\n      - LOG_LEVEL_CONSOLE&#x3D;debug\n      - LOG_CONSOLE_STDOUT&#x3D;true\n      - DISCOVERY_AS_LOCALHOST&#x3D;false\n      - PORT&#x3D;$&#123;PORT:-8080&#125;\n    volumes:\n      - $&#123;EXPLORER_CONFIG_FILE_PATH&#125;:&#x2F;opt&#x2F;explorer&#x2F;app&#x2F;platform&#x2F;fabric&#x2F;config.json\n      - $&#123;EXPLORER_PROFILE_DIR_PATH&#125;:&#x2F;opt&#x2F;explorer&#x2F;app&#x2F;platform&#x2F;fabric&#x2F;connection-profile\n      - $&#123;FABRIC_CRYPTO_PATH&#125;:&#x2F;tmp&#x2F;crypto\n      - walletstore:&#x2F;opt&#x2F;explorer&#x2F;wallet\n    ports:\n      - $&#123;PORT:-8080&#125;:$&#123;PORT:-8080&#125;\n    depends_on:\n      explorerdb.mynetwork.com:\n        condition: service_healthy\n    networks:\n      - mynetwork.com</code></pre>\n<p>将区块链网络的证书文件整个目录复制到 explorer下，并重命名为organizations:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">cd &#x2F;root&#x2F;block&#x2F;geneg&#x2F;twonodes&#x2F;\ncp -r crypto-config ..&#x2F;explorer&#x2F;organizations\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">root@aa:~&#x2F;block&#x2F;geneg# cd &#x2F;root&#x2F;block&#x2F;geneg&#x2F;\nroot@aa:~&#x2F;block&#x2F;geneg# pwd\n&#x2F;root&#x2F;block&#x2F;geneg\nroot@aa:~&#x2F;block&#x2F;geneg# ls\ntwonodes\nroot@aa:~&#x2F;block&#x2F;geneg# mkdir explorer\nroot@aa:~&#x2F;block&#x2F;geneg# ls\nexplorer  twonodes\nroot@aa:~&#x2F;block&#x2F;geneg# cd explorer\nroot@aa:~&#x2F;block&#x2F;geneg&#x2F;explorer# mkdir connection-profile\nroot@aa:~&#x2F;block&#x2F;geneg&#x2F;explorer# ls\nconnection-profile</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># SPDX-License-Identifier: Apache-2.0\nversion: &#39;2.1&#39;\n\nvolumes:\n  pgdata:\n  walletstore:\n\nnetworks:\n  mynetwork.com:\n    external:\n      name: twonodes_test\n\nservices:\n\n  explorerdb.mynetwork.com:\n    image: hyperledger&#x2F;explorer-db:latest\n    container_name: explorerdb.mynetwork.com\n    hostname: explorerdb.mynetwork.com\n    environment:\n      - DATABASE_DATABASE&#x3D;fabricexplorer\n      - DATABASE_USERNAME&#x3D;hppoc\n      - DATABASE_PASSWORD&#x3D;password\n    healthcheck:\n      test: &quot;pg_isready -h localhost -p 5432 -q -U postgres&quot;\n      interval: 30s\n      timeout: 10s\n      retries: 5\n    volumes:\n      - pgdata:&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data\n    networks:\n      - mynetwork.com\n\n  explorer.mynetwork.com:\n    image: hyperledger&#x2F;explorer:latest\n    container_name: explorer.mynetwork.com\n    hostname: explorer.mynetwork.com\n    environment:\n      - DATABASE_HOST&#x3D;explorerdb.mynetwork.com\n      - DATABASE_DATABASE&#x3D;fabricexplorer\n      - DATABASE_USERNAME&#x3D;hppoc\n      - DATABASE_PASSWD&#x3D;password\n      - LOG_LEVEL_APP&#x3D;info\n      - LOG_LEVEL_DB&#x3D;info\n      - LOG_LEVEL_CONSOLE&#x3D;debug\n      - LOG_CONSOLE_STDOUT&#x3D;true\n      - DISCOVERY_AS_LOCALHOST&#x3D;false\n    volumes:\n      - .&#x2F;config.json:&#x2F;opt&#x2F;explorer&#x2F;app&#x2F;platform&#x2F;fabric&#x2F;config.json\n      - .&#x2F;connection-profile:&#x2F;opt&#x2F;explorer&#x2F;app&#x2F;platform&#x2F;fabric&#x2F;connection-profile\n      - .&#x2F;organizations:&#x2F;tmp&#x2F;crypto\n      - walletstore:&#x2F;opt&#x2F;explorer&#x2F;wallet\n    ports:\n      - 8080:8080\n    depends_on:\n      explorerdb.mynetwork.com:\n        condition: service_healthy\n    networks:\n      - mynetwork.com\n</code></pre>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"># 新建文件夹，用于存放区块链浏览器搭建过程中的配置文件\nmkdir explorer\ncd explorer\n# wget配置文件，由于被墙，可能无法直接获取\nwget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;hyperledger&#x2F;blockchain-explorer&#x2F;main&#x2F;examples&#x2F;net1&#x2F;config.json\nwget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;hyperledger&#x2F;blockchain-explorer&#x2F;main&#x2F;examples&#x2F;net1&#x2F;connection-profile&#x2F;test-network.json -P connection-profile\nwget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;hyperledger&#x2F;blockchain-explorer&#x2F;main&#x2F;docker-compose.yaml\n# 解决方法，手动创建配置文件，并通过访问下面网址，将配置文件内容复制进去\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/af2000ab3f964bb09a65b2aafec14297.png\" alt=\"请添加图片描述\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#123;\n\t&quot;network-configs&quot;: &#123;\n\t\t&quot;org1-network&quot;: &#123;\n\t\t\t&quot;name&quot;: &quot;org1-network&quot;,\n\t\t\t&quot;profile&quot;: &quot;.&#x2F;connection-profile&#x2F;org1-network.json&quot;\n\t\t&#125;,\n\t\t&quot;org2-network&quot;: &#123;\n\t\t\t&quot;name&quot;: &quot;org2-network&quot;,\n\t\t\t&quot;profile&quot;: &quot;.&#x2F;connection-profile&#x2F;org2-network.json&quot;\n\t\t&#125;\n\t&#125;,\n\t&quot;license&quot;: &quot;Apache-2.0&quot;\n&#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/fcde5763c68842578f6304b885747815.png\" alt=\"请添加图片描述\"></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">cd &#x2F;root&#x2F;block&#x2F;geneg&#x2F;twonodes&#x2F;\ncp -r crypto-config ..&#x2F;explorer&#x2F;organizations\n</code></pre>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">root@kai:~&#x2F;block&#x2F;geneg# cd explorer\nroot@kai:~&#x2F;block&#x2F;geneg&#x2F;explorer# pwd\n&#x2F;root&#x2F;block&#x2F;geneg&#x2F;explorer\nroot@kai:~&#x2F;block&#x2F;geneg&#x2F;explorer# ls\nconfig.json  connection-profile  docker-compose.yaml  organizations\nroot@kai:~&#x2F;block&#x2F;geneg&#x2F;explorer# docker-compose up -d\nRecreating explorerdb.mynetwork.com ... done\nCreating explorer.mynetwork.com     ... done\nroot@kai:~&#x2F;block&#x2F;geneg&#x2F;explorer# docker ps -a\nhyperledger&#x2F;explorer:latest\nhyperledger&#x2F;explorer-db:latest\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/29293bb3c23f4cc3a61db28faf3f99dc.png\" alt=\"请添加图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/fda5269f50194e3d941f96733540c993.png\" alt=\"请添加图片描述\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这次的实验内容和强度一个顶七个。<br>在debug的过程中，我把之前几乎所有的内容都重新做了一遍，从go语言的环境搭建到docker安装，因为这次视频里内容与实际版本有出入，在debug的过程中找了很久的文件。<br>我这里找了一个相对清晰且全面的版本：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://blog.csdn.net/g950904/article/details/121143167?spm=1001.2014.3001.5506\">https://blog.csdn.net/g950904/article/details/121143167?spm=1001.2014.3001.5506</a></p>\n<p>私以为这个内容完全值得两周的时长，因为他的第一部分就是几乎之前所有内容的总和，虽然已经配置过了，但为了避免与文档代码有出入，又重新配置了一遍。</p></blockquote>\n<p>以下是总结的比较难的部分：</p>\n<ol>\n<li>go语言环境配置，因为后面涉及到默认opt/gopath/src的路径，如果在一开始配置环境变量放在usr/local下就会很麻烦，最后得重新下载go语言，配置环境变量。当然，fabric也是需要重装的。</li>\n<li>内容准备。生成证书及文件，因为涉及到yaml文件的更改，而yaml文件对于格式要求很高。好几次我只是把名字改了或者路径改了都会报错，最终是复制其他部分的代码在此基础上修改。同样的内容一个报错一个不报，虽然最终文件成功运行，但第一次为什么会报错，百思不得其解。</li>\n<li>docker-compose文件的编写。这个是最难的，因为这个做好了，通道也就搭好了，之后的内容没有太多难度。但docker-compose文件涉及的内容很多，各种奇怪的报错都有，越改越错。从周末到周四，五天时间，查遍资料，血压升高，恨不得钻进电脑帮代码连接通道。debug的过程是相当痛苦的，尤其是不知道错在哪里，而网上又没有其他人踩雷，debug仿佛遍历整个过程，从文档里空格和引号添加有无，到每一条路径是否有效，就像尝试解开一个死结，倒不如重开一个系统重新配置。可惜我是双系统，如果像以前一样用vmware，两分钟就可以创建一个新的，现在物理机上有很多其他的文件，重开不亚于重装系统。</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/19d23babeaa14bee97d5126ecaf424e1.gif\" alt=\"请添加图片描述\"><br>这次的任务流程，仅从结果上看，就是之前的5~6倍，以至于投入时间已经无法让进度线性增长，只要一卡进度立刻停滞，解决问题之后进度飞快，直到下一个治疗低血压的bug出现。</p>\n<p>不过这周也学了很多，之前只是跟着代码做，现在为了debug，不得不对整体内容和细节有了解。尤其是各种yaml文件，不亲自改出bug是不会对文件的内容有理解的，而我的bug越改越多，早知道还是原版。</p>\n<p>不过还是折磨，这几天凌晨两点睡觉，不是因为两点才完成一个内容，而是第二天有早八。事实上，有的bug即使通宵到第二天也解决不了，还得靠问。<br><img src=\"https://img-blog.csdnimg.cn/f9a3acceb27041d88d73648f29b8ad34.png\" alt=\"请添加图片描述\"><br>这次学的可比前几次充实多得多得多了，一行代码背后是整个文件，如果一路顺风还好，只要一个环节出了问题，就意味着命令相关的所有内容都得啃一遍，不然找不出bug。当然，找出了也不一定能改。（这次内容值得两周的ddl）</p>\n<p><img src=\"https://img-blog.csdnimg.cn/b81395fc419541ceafaadfe0af21bd2d.jpeg\" alt=\"请添加图片描述\"></p>\n","text":" 引言本次内容复杂、且报错较多，部分图片没有放在最终文档里，而部分报错放在文档中，最终也没有删去。解决报错比单纯对着代码跑一遍难度更大，也更有意义，故予以保留。 内容1.0 内容准备这一部分作为一些常用命令的存储，显然，我在搭建环境的过程中重新配置的一遍之前的内容。（呜呜呜破防了...","link":"","photos":[],"count_time":{"symbolsCount":"37k","symbolsTime":"33 mins."},"categories":[],"tags":[{"name":"区块链","slug":"区块链","count":10,"path":"api/tags/区块链.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%95%E8%A8%80\"><span class=\"toc-text\">引言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">内容</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-0-%E5%86%85%E5%AE%B9%E5%87%86%E5%A4%87\"><span class=\"toc-text\">1.0  内容准备</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">1.1 生成证书及配置文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-%E7%94%9F%E6%88%90%E5%88%9B%E4%B8%96%E5%8C%BA%E5%9D%97%E5%8F%8A%E9%80%9A%E9%81%93%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">1.2 生成创世区块及通道文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-%E7%BC%96%E5%86%99docker-compose%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">1.3 编写docker-compose文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">配置文件</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4-%E9%80%9A%E9%81%93%E6%93%8D%E4%BD%9C-%E9%93%BE%E7%A0%81\"><span class=\"toc-text\">1.4 通道操作 链码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-5-%E5%A4%9A%E6%9C%BA%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">1.5 多机搭建</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-6-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">1.6 浏览器搭建</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"Algernon","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/68c4c7d8696c482da565ab5c8ebfa2fa.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}},"mapped":true,"prev_post":{"title":"【文本分析】(一)","uid":"76ec75cbd224e987501c0cfda9dee811","slug":"文本分析1","date":"2022-11-03T15:05:49.000Z","updated":"2022-11-08T16:16:52.522Z","comments":true,"path":"api/articles/文本分析1.json","keywords":null,"cover":[],"text":"浅浅试一下import jieba import jieba.posseg as psg from collections import Counter text &#x3D; &#39;我现在在jupyter notebook上写文本分析的代码！&#39; cut &#x3D;...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"机器学习","slug":"机器学习","count":9,"path":"api/categories/机器学习.json"}],"tags":[{"name":"文本分析","slug":"文本分析","count":3,"path":"api/tags/文本分析.json"}],"author":{"name":"Algernon","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/68c4c7d8696c482da565ab5c8ebfa2fa.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}}},"next_post":{"title":"【区块链技术与应用】（二）","uid":"547202daa128845562f8d5d219a57a73","slug":"区块链2","date":"2022-11-03T14:59:49.000Z","updated":"2022-11-03T14:59:24.481Z","comments":true,"path":"api/articles/区块链2.json","keywords":null,"cover":[],"text":"本地编译组件获取代码编译 Fabric 代码依赖一些开发库，可以通过如下命令安装： sudo apt-get update \\ &amp;&amp; sudo apt-get install -y libsnappy-dev zlib1g-dev libbz2-dev libya...","link":"","photos":[],"count_time":{"symbolsCount":"31k","symbolsTime":"28 mins."},"categories":[],"tags":[{"name":"区块链","slug":"区块链","count":10,"path":"api/tags/区块链.json"}],"author":{"name":"Algernon","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/68c4c7d8696c482da565ab5c8ebfa2fa.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}}}}