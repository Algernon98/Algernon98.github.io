{"title":"《Python》计算机视觉编程","uid":"fa85e82eb0b8baa09dbfc285e5ac66bf","slug":"python计算机视觉编程","date":"2022-11-03T14:49:49.000Z","updated":"2022-11-03T14:49:54.649Z","comments":true,"path":"api/articles/python计算机视觉编程.json","keywords":null,"cover":[],"content":"<h2 id=\"基本的图像操作处理\"><a href=\"#基本的图像操作处理\" class=\"headerlink\" title=\"基本的图像操作处理\"></a>基本的图像操作处理</h2><h3 id=\"PIL\"><a href=\"#PIL\" class=\"headerlink\" title=\"PIL\"></a>PIL</h3><p>目前pycharm使用的是pillow库</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">from PIL import Image\npil_im &#x3D;Image.open(&#39;empire.jpg&#39;)</code></pre>\n<p>上述代码的返回值pil_im是一个PIL图像对象</p>\n<p>图像的颜色转换可以使用convert()方法来实现。<br>要读取一幅图像，并将其转换成灰度图像，只需要加上convert(‘L’)，如下所示：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pil_im&#x3D;Image.open(&#39;empire.jpg&#39;).convert(&#39;L&#39;)</code></pre>\n<h3 id=\"Matplotlib\"><a href=\"#Matplotlib\" class=\"headerlink\" title=\"Matplotlib\"></a>Matplotlib</h3><h4 id=\"绘制图像、点和线\"><a href=\"#绘制图像、点和线\" class=\"headerlink\" title=\"绘制图像、点和线\"></a>绘制图像、点和线</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">from PIL import Image\nfrom matplotlib import pylab\nfrom pylab import *\n#读取图像到数组中\nim&#x3D;array(Image.open(&#39;D:\\\\coder\\\\randomnumbers\\\\img\\\\empire.png&#39;))\n#绘制图像\nimshow(im)\n\n#一些点\nx&#x3D;[100,100,400,400]\ny&#x3D;[200,500,200,500]\n\n#使用红色星状标记绘制点\nplot(x,y,&#39;r*&#39;)\n\n#绘制连接前两个点的线\nplot(x[:2],y[:2])\n\n#添加标题，显示绘制的图像\ntitle(&#39;Plotting:&quot;empire.jpg&quot;&#39;)\nshow()</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/d4384ef0cd214fea9dcbc627b1df2acb.png\" alt=\"在这里插入图片描述\"><br>也可以选择使坐标轴不显示：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">axis(&#39;off&#39;)</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/924bdf75e1b24e26a156f362b323623f.png\" alt=\"在这里插入图片描述\"></p>\n<p>在绘图时，有很多选项可以控制图像的颜色和样式。<br>| 命令            | 效果                     |<br>| ———————- | ———————————— |<br>| plot(x,y)       | 默认为蓝色实线           |<br>| plot(x,y,’r*’)  | 红色星状标记             |<br>| plot(x,y,’go-‘) | 带圈圈标记的绿线         |<br>| plot(x,y,’ks:’) | 带有正方形标记的黑色点线 |</p>\n<p><strong>用Pylab绘图的基本颜色格式命令</strong><br>| #引号为英文单引号 | 颜色 |<br>| ————————- | —— |<br>| ‘b’               | 蓝色 |<br>| ‘g’               | 绿色 |<br>| ‘r’               | 红色 |<br>| ‘c’               | 青色 |<br>| ‘m’               | 品红 |<br>| ‘y’               | 黄色 |<br>| ‘k’               | 黑色 |<br>| ‘w’               | 白色 |</p>\n<p><strong>用Pylab绘图的基本线型格式命令</strong><br>|      | 线型 |<br>| —— | —— |<br>| ‘-‘  | 实线 |<br>| ‘—‘ | 虚线 |<br>| ‘·’  | 点线 |</p>\n<p><strong>用Pylab绘图的基本绘制标记格式命令</strong><br>|      | 标记   |<br>| —— | ——— |<br>| ‘·’  | 点     |<br>| ‘o’  | 圆圈   |<br>| ‘s’  | 正方形 |<br>| ‘*’  | 星号   |<br>| ‘+’  | 加号   |<br>| ‘x’  | 叉号   |</p>\n<h4 id=\"图像轮廓和直方图\"><a href=\"#图像轮廓和直方图\" class=\"headerlink\" title=\"图像轮廓和直方图\"></a>图像轮廓和直方图</h4><p>将图像灰度化：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">from PIL import Image\nfrom pylab import *\n\n#读取图像到数组中\nim&#x3D;array(Image.open(&#39;D:\\\\coder\\\\randomnumbers\\\\img\\\\empire.png&#39;).convert(&#39;L&#39;))\n\n#新建一个图像\nfigure()\n#不使用颜色信息\ngray()\n#在原点的左上角显示轮廓图像\ncontour(im,origin&#x3D;&#39;image&#39;)\naxis(&#39;equal&#39;)\naxis(&#39;off&#39;)\nshow()\n\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/1b3c792b62dd4466941ce4708bff353a.png\" alt=\"在这里插入图片描述\"><br>图像的直方图用来表征该图像像素值的分布情况。用一定数目的小区间(bin)来指定表征像素值的范围，每个小区间会得到落入该小区间表示范围的像素数目。<br>该（灰度）图像的直方图可以使用hist()函数绘制：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">figure()\nhist(im.flatten(),128)\nshow()</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/a05bc25fec0a46f3b70ae181a021f784.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/7ea58165d088409099f03a63d7c6e041.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"Numpy\"><a href=\"#Numpy\" class=\"headerlink\" title=\"Numpy\"></a>Numpy</h3><h4 id=\"灰度变换\"><a href=\"#灰度变换\" class=\"headerlink\" title=\"灰度变换\"></a>灰度变换</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">from PIL import Image\nfrom numpy import *\nfrom PIL import Image\nfrom matplotlib import pylab\nfrom pylab import *\nim &#x3D; array(Image.open(&#39;D:\\\\coder\\\\randomnumbers\\\\img\\\\empire.png&#39;).convert(&#39;L&#39;))\nim2 &#x3D;255-im #对图像进行反向处理\nim3 &#x3D;(100.0&#x2F;255)*im+100 #将图像像素值变换到100...200之间\nim4 &#x3D;255.0*(im&#x2F;255.0)**2 #对图像像素值求平方后得到的图像\nprint(int(im.min()),int(im.max()))\nprint(int(im2.min()),int(im2.max()))\nprint(int(im3.min()),int(im3.max()))\nprint(int(im4.min()),int(im4.max()))\n\nimshow(im3)\nshow()</code></pre>\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">0 255\n0 255\n100 200\n0 255\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/1a3a4455786844a3b331159da6f86e03.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/3ae339d206314e119d8c854b5a103845.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"Scipy\"><a href=\"#Scipy\" class=\"headerlink\" title=\"Scipy\"></a>Scipy</h3><h4 id=\"图像模糊\"><a href=\"#图像模糊\" class=\"headerlink\" title=\"图像模糊\"></a>图像模糊</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">from PIL import Image\nfrom numpy import *\nfrom scipy.ndimage import filters\nim &#x3D;array(Image.open(&#39;D:\\\\coder\\\\randomnumbers\\\\img\\\\empire.png&#39;).convert(&#39;L&#39;))\nim2 &#x3D;filters.gaussian_filter(im,5)</code></pre>\n<p>上面guassian_filter()函数的最后一个参数表示标准差<br><img src=\"https://img-blog.csdnimg.cn/8da3f3231f024560b8000b744d09c486.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"图像导数\"><a href=\"#图像导数\" class=\"headerlink\" title=\"图像导数\"></a>图像导数</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">from PIL import Image\nfrom pylab import *\nfrom numpy import *\nfrom scipy.ndimage import filters\nim &#x3D;array(Image.open(&#39;D:\\\\coder\\\\randomnumbers\\\\img\\\\empire.png&#39;).convert(&#39;L&#39;))\n#Sobel导数滤波器\nimx&#x3D;zeros(im.shape)\nfilters.sobel(im,0,imx)\n\nimy&#x3D;zeros(im.shape)\nfilters.sobel(im,1,imy)\n\n\nmagnitude&#x3D;sqrt(imx**2+imy**2)\nimshow(imx)\n#imshow(imy)\n#imshow(magnitude)\n\n\nshow()</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/0404f9b25a62486396a4ddcc70d89f67.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/69d1e7b1f9434ef69194f842c9bc8c6f.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/edaabcc721f2418cb5a2d3a505afd90e.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"计算视差图\"><a href=\"#计算视差图\" class=\"headerlink\" title=\"计算视差图\"></a>计算视差图</h2><p>下面是扫平面法的具体实现代码，该函数返回每个像素的最佳视差。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">def plane_sweep_ncc(im_l,im_r,start,steps,wid):  #使用归一化的互相关计算视差图像\n  m,n&#x3D;im_l.shape\n  \n  #保存不同求和值的数组\n  mean_l&#x3D;zeros((m,n))\n  mean_r&#x3D;zeros((m,n))\n  s&#x3D;zeros((m,n))\n  s_l&#x3D;zeros((m,n))\n  s_r&#x3D;zeros((m,n))\n  \n  #保存深度平面的数组\n  dmaps&#x3D;zeros((m,n,steps))\n  \n  #计算图像块的平均值\n  filters.uniform_filter(im_l,wid,mean_l)\n  filters.uniform_filter(im_r,wid,mean_r)\n  \n  #归一化图像\n  norm_l&#x3D;im_l-mean_l\n  norm_r&#x3D;im_r-mean_r\n  \n  #尝试不同的视差\n  for displ in range(steps):\n     #将左边图像移动到右边，计算加和\n     filters.uniform_filter(roll(norm_l,-displ-start)*norm_r,wid,s) #和归一化\n     filters.uniform_filter(roll(norm_l,-displ-start)*roll(norm_l,-displ-start),wid,s)\n     filters.uniform_filter(norm_r*norm_r,wid,s_r) #和反归一化\n     \n     #保存ncc的分数\n     dmaps[:,:,displ]&#x3D;s&#x2F;sqrt(s_l*s_r)\n     return argmax(dmaps,axis&#x3D;2)\n     </code></pre>\n<p>下面是载入图像，并使用该函数计算偏移图的完整例子：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">import stereo\n\nim_l&#x3D;array(Image.open(&#39;scene1.row3.col3.ppm&#39;).convert(&#39;L&#39;),&#39;f&#39;)\n\nim_r&#x3D;array(Image.open(&#39;scene1.row3.col4.ppm&#39;).convert(&#39;L&#39;),&#39;f&#39;)\n\n#开始偏移，并设置步长\nsteps&#x3D;12\nstart&#x3D;4\n\n#ncc的宽度\nwid&#x3D;9\nres &#x3D; stereo.plane_sweep_ncc(im_l,im_r,start,steps,wid)\n\nimport scipy.misc\nscipy.misc.imsave(&#39;depth.png&#39;,res)</code></pre>\n<h2 id=\"图像聚类\"><a href=\"#图像聚类\" class=\"headerlink\" title=\"图像聚类\"></a>图像聚类</h2>","text":"基本的图像操作处理PIL目前pycharm使用的是pillow库 from PIL import Image pil_im &#x3D;Image.open(&#39;empire.jpg&#39;) 上述代码的返回值pil_im是一个PIL图像对象 图像的颜色转换可以使用con...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"计算机视觉","slug":"计算机视觉","count":2,"path":"api/tags/计算机视觉.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%9B%BE%E5%83%8F%E6%93%8D%E4%BD%9C%E5%A4%84%E7%90%86\"><span class=\"toc-text\">基本的图像操作处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PIL\"><span class=\"toc-text\">PIL</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Matplotlib\"><span class=\"toc-text\">Matplotlib</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%98%E5%88%B6%E5%9B%BE%E5%83%8F%E3%80%81%E7%82%B9%E5%92%8C%E7%BA%BF\"><span class=\"toc-text\">绘制图像、点和线</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9B%BE%E5%83%8F%E8%BD%AE%E5%BB%93%E5%92%8C%E7%9B%B4%E6%96%B9%E5%9B%BE\"><span class=\"toc-text\">图像轮廓和直方图</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Numpy\"><span class=\"toc-text\">Numpy</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%81%B0%E5%BA%A6%E5%8F%98%E6%8D%A2\"><span class=\"toc-text\">灰度变换</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Scipy\"><span class=\"toc-text\">Scipy</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9B%BE%E5%83%8F%E6%A8%A1%E7%B3%8A\"><span class=\"toc-text\">图像模糊</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9B%BE%E5%83%8F%E5%AF%BC%E6%95%B0\"><span class=\"toc-text\">图像导数</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E8%A7%86%E5%B7%AE%E5%9B%BE\"><span class=\"toc-text\">计算视差图</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%BE%E5%83%8F%E8%81%9A%E7%B1%BB\"><span class=\"toc-text\">图像聚类</span></a></li></ol>","author":{"name":"Algernon","slug":"blog-author","avatar":"https://user-images.githubusercontent.com/54904760/224857900-b2e8457c-43d2-46b7-901c-6c770f24bbad.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}},"mapped":true,"prev_post":{"title":"【电子羊的奇妙冒险】初试深度学习（3）","uid":"7a681ad033be663923aa1e3ac79573bb","slug":"电子羊3","date":"2022-11-03T14:50:49.000Z","updated":"2022-11-03T14:05:01.666Z","comments":true,"path":"api/articles/电子羊3.json","keywords":null,"cover":[],"text":"噪声高斯噪声 高斯噪声是指它的概率密度函数服从高斯分布（即正态分布）的一类噪声。常见的高斯噪声包括起伏噪声、宇宙噪声、热噪声和散粒噪声等等。除常用抑制噪声的方法外，对高斯噪声的抑制方法常常采用数理统计方法。所谓高斯噪声是指它的概率密度函数服从高斯分布（即正态分布）的一类噪声。如果...","link":"","photos":[],"count_time":{"symbolsCount":"8.9k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"深度学习","slug":"深度学习","count":9,"path":"api/tags/深度学习.json"}],"author":{"name":"Algernon","slug":"blog-author","avatar":"https://user-images.githubusercontent.com/54904760/224857900-b2e8457c-43d2-46b7-901c-6c770f24bbad.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}}},"next_post":{"title":"【动手学深度学习】学习笔记及代码实战","uid":"80007edef2872f36e05ae25c647138b8","slug":"动手学深度学习","date":"2022-11-03T14:48:49.000Z","updated":"2022-11-03T14:48:44.482Z","comments":true,"path":"api/articles/动手学深度学习.json","keywords":null,"cover":[],"text":"图像分类数据集P42图像分类数据集中最常用的是手写数字识别数据集MINST。但大部分模型在MINST上的分类精度都超过了95%。为了更直观地观察算法之间的差异，我们将使用一个图像内容更加复杂的Fashion-MINST数据集。 %matplotlib inline import ...","link":"","photos":[],"count_time":{"symbolsCount":"21k","symbolsTime":"19 mins."},"categories":[],"tags":[{"name":"深度学习","slug":"深度学习","count":9,"path":"api/tags/深度学习.json"}],"author":{"name":"Algernon","slug":"blog-author","avatar":"https://user-images.githubusercontent.com/54904760/224857900-b2e8457c-43d2-46b7-901c-6c770f24bbad.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}}}}