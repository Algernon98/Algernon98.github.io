{"title":"Python实训题目","uid":"6165171c95ee293a7ed71a60e0ed0daa","slug":"python实训题目","date":"2022-11-03T13:52:49.000Z","updated":"2022-11-03T13:53:09.445Z","comments":true,"path":"api/articles/python实训题目.json","keywords":null,"cover":[],"content":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>学校python课实训平台的oj太敏感辣，少一个空格都会报错——面向答案编程。为纪念在python实践课上花费的不多但受苦的经历，特将代码保存于博客上。<br>宁愿刷leetcode也不愿意跑python代码</p>\n<h2 id=\"2-1-表达式和基本输入输出\"><a href=\"#2-1-表达式和基本输入输出\" class=\"headerlink\" title=\"2.1 表达式和基本输入输出\"></a>2.1 表达式和基本输入输出</h2><h3 id=\"2-1-1-数据输入与输出\"><a href=\"#2-1-1-数据输入与输出\" class=\"headerlink\" title=\"2.1.1 数据输入与输出\"></a>2.1.1 数据输入与输出</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>任务描述<br>本关任务：根据题目要求输出表达式的值，掌握python数据的输入与输出问题。</p></blockquote>\n<p>相关知识<br>要完成本关，你需要掌握 print( ),input()，eval()函数的用法。<br>print(*objects, sep=’ ‘, end=’\\n’, file=sys.stdout, flush=False)<br>参数:<br>objects – 复数，表示可以一次输出多个对象。输出多个对象时，需要用 , 分隔。<br>sep – 用来间隔多个对象，默认值是一个空格。<br>end – 用来设定以什么结尾。默认值是换行符 \\n，我们可以换成其他字符串。<br>file – 要写入的文件对象。<br>flush – 输出是否被缓存通常决定于 file，但如果 flush 关键字参数为 True，流会被强制刷新。<br>举例：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><blockquote>\n<blockquote>\n<p>print(1)<br>1<br>print(“Hello World”)<br>Hello World  </p>\n<p>a = 1<br>b = ‘runoob’<br>print(a,b) #默认自动换行<br>1 runoob<br>print(“aaa””bbb”)<br>aaabbb<br>print(“aaa”,”bbb”)<br>aaa bbb<br>print(“www”,”runoob”,”com”,sep=”.”)  # 设置间隔符<br>www.runoob.com<br>x,y=12,34<br>print(x) #默认自动换行<br>12<br>print(y)#默认自动换行<br>34<br>print(x,y,end=’’) #通过参数end 设置结尾符可控制一行显示多个数据<br>12 34<br>input()以字符串的方式获取用户输入,但无法直接参与算术运算<br>例如：<br>x = input()<br> 4.5<br>type(x)</p>\n<p><class ‘str’><br>x=input()<br>12<br>y=input()<br>34<br>print(x+y)<br>1234</p></blockquote>\n</blockquote>\n</blockquote>\n<p>eval(&lt;字符串&gt;):将输入的字符串转变成python语句,可实现算术运算</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><blockquote>\n<blockquote>\n<p>x,y=eval(input())<br>12,34<br>print(x+y)<br>46</p></blockquote>\n</blockquote>\n</blockquote>\n<p><strong>题目</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>编程要求<br>根据提示，在右侧编辑器补充代码，完成如下程序的编写。</p></blockquote>\n<p>第一题<br>    在屏幕上输出字符串：hi, “how are you”, I’m fine and you  </p>\n<p>第二题<br>    从键盘输入两个整数，计算两个数相除的商与余数<br>    假设输入12,5<br>    输出为 2,2  </p>\n<p>第三题<br>    在屏幕上 输入一个三位数输出该数的个位、十位和百位数字。<br>   假设输入125<br>   输出为 5,2,1   </p>\n<p>第四题<br>     已知a=1.234567,请按指定格式输出a的值。1.按保留小数点后3位，2.指数形式,尾数部分保留小数点2位 ，输出格式：采用一行输出，中间用，隔开。  </p>\n<p>第五题<br>     请问一个硬盘的存储容量为500GB, 请问该硬盘最多可存放多少个字节的数据量？<br>     提示：字节为最小的存储单位，硬盘容量500GB中的B是指字节byte。1G=1024M, 1M=1024K, 1K=1024。  </p>\n<p>第六题<br>     计算并判断$1.01^ 3∗0.99 ^2$ , 是否大于1.01，输出判断结果True或False。可知“三天打鱼，两天晒网，终将一无所获”。<br>     提示：直接用关系运算符进行比较，关系运算符的输出是逻辑值True或False。<br><strong>代码：</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># -*- coding: utf-8 -*-\n&quot;&quot;&quot;\nCreated on Sun Sep  6 21:39:58 2020\n\n@author: hzh\n&quot;&quot;&quot;\n \n#第一题:在屏幕上输出字符串：hi, &quot;how are you&quot;, I&#39;m fine and you\n#-------begin-------------#\n\nprint(&quot;hi, \\&quot;how are you\\&quot;, I&#39;m fine and you&quot;)\n#-------ends--------------# \n\n#第二题:从键盘输入两个整数，计算两个数相除的商与余数\nx,y &#x3D; eval(input())\n#-------b.1egin-----------\ns &#x3D; x&#x2F;y\nm &#x3D; x%y\nprint(s,end&#x3D;&quot; &quot;)\nprint(&quot;%d&quot;%m)\n\n#-------ends------------- \n\n#第三题:在屏幕上输入一个三位数输出该数的个位、十位和百位数字\nx &#x3D; eval(input())\n#-------begin-----------\ng &#x3D; x&#x2F;&#x2F;100\ns &#x3D; (x-100*g)&#x2F;&#x2F;10\nb &#x3D; (x-100*g-10*s)\nprint(&quot;%d &quot;%b,end&#x3D;&quot;&quot;) \nprint(&quot;%d &quot;%s,end&#x3D;&quot;&quot;)\nprint(&quot;%d&quot;%g)  \n\n \n\n#-------ends------------ \n \n#第四题:已知a&#x3D;1.234567,b&#x3D;0.000321 .按保留小数点后3位输出a，2.按指数形式输出 b\na,b &#x3D; 1.234567, 0.00321\n#-------begin-----------\nimport math\nprint(&quot;a&#x3D;%.3f,&quot;%a,end&#x3D;&quot;&quot;)\n\nprint(&quot;b&#x3D;%.2e&quot;%b)\n \n#-------ends------------  \n     \n#第五题:请问一个硬盘的存储容量为500GB, 请问该硬盘最多可存放多少个字节的数据量\n#-------begin-----------\n  \nx &#x3D; 500*2**30\nprint(&quot;%s&quot;%x)\n\n#-------ends------------           \n\n#第六题:计算并判断题干中表达式的值是否大于1.01，输出判断结果True,False。    \n#-------begin-----------\n\nx &#x3D; 1.01**3\ny &#x3D; 0.99**2\nz &#x3D;x*y\nif z &gt; 1.01 :\n  print(&quot;True&quot;)\nelse :\n  print(&quot;False&quot;)\n \n\n#-------ends------------ </code></pre>\n<h3 id=\"2-1-2-表达式的计算问题\"><a href=\"#2-1-2-表达式的计算问题\" class=\"headerlink\" title=\"2.1.2  表达式的计算问题\"></a>2.1.2  表达式的计算问题</h3><p><strong>问题：</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>任务描述<br>本关任务：利用math库的导入与math库中数学函数的，将下面数学表达式转换为Python表达式，并用print语句打印结果。</p></blockquote>\n<p>相关知识<br>为了完成本关任务，你需要掌握：1.如何在python中导入math库，2.math库中常用函数的使用<br>下面列出一些常用的数学函数，请仔细阅读，通过完成本关任务，了解和掌握math库中数学函数的使用。</p>\n<p>abs(x)：返回整数的绝对值，如abs(-10)返回10。</p>\n<p>ceil(x)：返回数字的向上取整，如math.ceil(4.1)返回5。</p>\n<p>exp(x)：返回e的x次幂，如math.exp(1)返回2.718281828459045。</p>\n<p>fabs(x)：返回浮点数的绝对值，如math.fabs(-10) 返回10.0。</p>\n<p>floor(x)：返回数字的向下取整，如math.floor(4.9)返回4。</p>\n<p>log(x,base)：如math.log(math.e,math.e)返回1.0，math.log(100,10)返回2.0。</p>\n<p>log10(x)：返回以10为基数的x的对数，如math.log10(100)返回2.0。</p>\n<p>max(x1,x2,…)：返回给定参数的最大值，参数可以为序列。</p>\n<p>min(x1,x2,…)：返回给定参数的最小值，参数可以为序列。</p>\n<p>modf(x)：以元组的形式返回，（小数部分,整数部分）。两部分的数值符号与x相同，整数部分以浮点型表示。</p>\n<p>pow(x, y)：x<br>y<br>   运算后的值。</p>\n<p>round(x [,n])：返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。</p>\n<p>sqrt(x)：返回数字x的平方根，返回类型为实数，如math.sqrt(4)返回2.0。</p>\n<p>acos(x)：返回x的反余弦弧度值。</p>\n<p>asin(x)：返回x的反正弦弧度值。</p>\n<p>atan(x)：返回x的反正切弧度值。</p>\n<p>atan2(y, x)：返回给定的X及Y坐标值的反正切值。</p>\n<p>cos(x)：返回x的弧度的余弦值。</p>\n<p>hypot(x, y)：返回欧几里德范数$sqrt(x ^2<br> +y<br>2<br> )$。</p>\n<p>sin(x)：返回x弧度的正弦值。</p>\n<p>tan(x)：返回x弧度的正切值。</p>\n<p>degrees(x)：将弧度转换为角度，如degrees(math.pi/2) ， 返回90.0。</p>\n<p>radians(x)：将角度转换为弧度</p>\n<p>除了上述常用的数学函数，math库中还定义了两个常用的数学常量：</p>\n<p>pi——圆周率，一般以π来表示。</p>\n<p>e——自然常数。</p>\n<p>一般有两种常用方法来使用math中的函数：</p>\n<p>import math<br>print(math.abs(3))<br>或：</p>\n<p>from math import *<br>print(abs(3))<br>编程要求<br>根据提示，在右侧编辑器Begin-End处补充代码，本关需要你编程计算的数学表达式或实际问题包括以下五题。</p>\n<p>第一题<br>分别计算并输出$π<br>^4<br> +π<br>^5<br> 、 e<br>^6$的值，以及输出二者的差。</p>\n<p>第二题<br>分别计算并输出 π/4与4arctan(1/5)−arctan(1/239)的值，并观察其差异。</p>\n<p>第三题<br>分别计算并输出sinh(0.25)与<br>$(e ^{0.25}<br> −e ^{−0.25}<br> )/2$的值，查看并比较二者的大小。</p>\n<p>第四题<br>已知 h,v0,g,θ = 1.9, 14, 9.8, 40 #θ初始化为角度<br>计算并输出表达式<img src=\"https://img-blog.csdnimg.cn/img_convert/7a2fa9fe06d1ea825c873f187cfe30af.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>的值, 请注意，需要将θ由初始的角度转为会弧度再计算表达式。</p>\n<p>第五题<br>从键盘输入的是角度数θ,需要转化为弧度数x之后进行下面公式计算。<br>计算公式$ln(∣cosx∣e<br>^{sinx}<br> )$, 并输出结果  </p>\n<p>测试说明<br>右侧代码编辑区已设置好具体输出格式，你只需要在指定位置填写Python代码即可。</p>\n<p><strong>解答：</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># -*- coding: utf-8 -*-\n&quot;&quot;&quot;\nCreated on Tue Sep  8 00:23:44 2020\n表达式的计算问题\n@author: hzh\n&quot;&quot;&quot;\n\nfrom math import *\n\n# ********** Begin ********** #\n#如果输出值小数，请保留4位小数。\n\n#第一题\nimport math\nx &#x3D; math.pi**4+math.pi**5\ny &#x3D; math.exp(6)\nz &#x3D; x-y\nprint(&quot;%.4f&quot;%x)\nprint(&quot;%.4f&quot;%y)\nprint(&quot;%.4f&quot;%z)\n#第二题\nimport math\nx &#x3D; math.pi&#x2F;4\ny &#x3D; 4*math.atan(0.2)-math.atan(1&#x2F;239)\nprint(&quot;%.4f&quot;%x)\nprint(&quot;%.4f&quot;%y)\n\n#第三题\nimport math\nx &#x3D; math.sinh(0.25)\ny &#x3D; 0.5*(math.exp(0.25)-math.exp(-0.25))\nprint(&quot;%.4f&quot;%x)\nprint(&quot;%.4f&quot;%y)\n\n#第四题\nh,v0,g,θ &#x3D; 1.9, 14, 9.8, 40  #变量赋值\nimport math\nx &#x3D; math.radians(θ)\ny &#x3D; (2*v0*math.sin(x)+math.sqrt(4*v0**2*sin(x)**2+8*g*h))&#x2F;(2*g)\nprint(&quot;%.4f&quot;%y)\n\n\n\n#第五题\nθ &#x3D; eval(input()) #输入角度值 \nimport math\nx &#x3D; math.radians(θ)\ny &#x3D; math.log1p(math.fabs(math.cos(x)*math.exp(math.sin(x)))-1)\nprint(&quot;%.4f&quot;%y)\n\n\n# ********** End ********** #</code></pre>\n<h3 id=\"2-1-3简单计算问题的求解\"><a href=\"#2-1-3简单计算问题的求解\" class=\"headerlink\" title=\"2.1.3简单计算问题的求解\"></a>2.1.3简单计算问题的求解</h3><p><strong>问题：</strong><br>略</p>\n<p><strong>代码：</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> # -*- coding: utf-8 -*-\n&quot;&quot;&quot;\nCreated on Mon Sep  7 23:31:38 2020\n 任务：计算一个由正方形和等腰三角形组成的多边形的面积，其中正方形边长4厘米\n，等腰三角形底边为正方形的一条边，其到对角顶点的高为2.6厘米。\n@author: hzh\n&quot;&quot;&quot;\nfrom math import *\n#保留2位小数\n \n#第一题：无输入求多边形的面积\nsquare_length &#x3D; 4  # 声明整型变量square_length用于表示正方形边长，并赋值 4\ntriangle_h &#x3D; 2.6   # 声明浮点型变量triangle_h用于表示三角形底边上的高，并赋值 2.6\n \n# 请在下面的Begin-End之间按照注释中给出的提示编写正确的代码\n########## Begin ##########\n# 第1步：计算正方形面积，赋值给变量area_square\narea_square &#x3D; square_length**2\n# 第2步：计算等腰三角形面积，赋值给变量area_triangle\nimport math \n\narea_triangle &#x3D; square_length*triangle_h*0.5\n# 第3步：计算多边形面积，即正方形面积和等腰三角形面积，赋值给变量area_total\narea_total &#x3D; area_square + area_triangle\n# 第4步：打印输出多边形面积\nprint(&quot;%.2f&quot;%area_total)\n########## End ##########\nprint(&#39;***********************&#39;)\n\n#第二题：从键盘输入摄氏温度，将摄氏温度转换为华氏温度并输出\n########## Begin ##########\n#第1步:给C赋值\nc &#x3D; eval(input())\n\n#第2步：计算F的值并输出\nf &#x3D; (9&#x2F;5)*c+32\nprint(&quot;%.2f&quot;%f)\n########## End ##########\n\n\nprint(&#39;***********************&#39;)\n\n#第三题：正态分布的概率密度函数\n########## Begin ##########\n#第1步:给mu,sigma,x赋值,从键盘输入\nmu,sigma,x&#x3D;eval(input())\n\n#第2步:计算函数值并输出\nimport math\ny &#x3D; (1&#x2F;(math.sqrt(2*math.pi)*sigma))*math.exp(-(x-mu)*(x-mu)&#x2F;(2*sigma*sigma))\nprint(&quot;%.2f&quot;%y)\n\n########## End ##########\n\nprint(&#39;***********************&#39;)\n\n#第四题：编写一个计算并打印地球上两点的球面距离的Python程序\n########## Begin ##########\n#第1步:从键盘录入4个数，分别赋值lat1,lon1,lat2,lon2变量，代表两个点的角度坐标\nlat1,lon1,lat2,lon2&#x3D;eval(input())\n\n#第2步:角度到弧度的转换\nimport math\nLat1 &#x3D; math.radians(lat1)\nLon1 &#x3D; math.radians(lon1)\nLat2 &#x3D; math.radians(lat2)\nLon2 &#x3D; math.radians(lon2)\n#第3步:根据题干中所给公式计算球面距离并输出\nR &#x3D; 6371\ns &#x3D; R*math.acos(math.sin(Lat1)*math.sin(Lat2)+math.cos(Lat1)*math.cos(Lat2)*math.cos(Lon1-Lon2))\nprint(&quot;%.2f&quot;%s)\n########## End ##########\n\nprint(&#39;***********************&#39;)</code></pre>\n<h3 id=\"2-1-4-顺序程序设计\"><a href=\"#2-1-4-顺序程序设计\" class=\"headerlink\" title=\"2.1.4 顺序程序设计\"></a>2.1.4 顺序程序设计</h3><p><strong>问题：</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>任务描述<br>本关主题是综合利用前三关掌握的知识，解决实际问题。通过问题的解决，对计算思维有一定的体验和感悟，并熟练掌握从上到下的顺序程序设计方法。</p></blockquote>\n<p>相关知识<br>为了完成本关任务，你需要掌握：</p>\n<p>input 的使用；<br>print 的格式化输出；<br>数据类型转换；<br>字符串类型的基本使用。</p>\n<p>编程要求<br>第一题：计算距离<br> 一小球以 5 米/秒 的水平速度平抛，重力加速度取 9.8 米每秒的平方，在忽略空气阻力的情况下，求经过时间 t 秒后，小球所在位置与抛出点之间的距离 (假设小球距地面足够高)。<br> 例如输入：2<br>    输出：22.00</p>\n<p>第二题：求三角形面积<br>  一个三角形的三边长分别是 a,b,c，那么它的面积为 sqrt(p(p−a)(p−b)(p−c))，其中 p= 1/2(a+b+c)。输入这三个数字，计算三角形的面积，四舍五入精确到 2 位小数。保证能构成三角形，0≤a,b,c≤1000，0≤a,b,c≤1000，每个边长输入时不超过2位小数。<br>例如输入：3,4,5<br>   输出：6.00</p>\n<p>第三题：逆序数输出<br> 输入一个不小于 100 且小于 1000，同时包括小数点后一位的一个浮点数。<br> 例如输入：123.4<br>    输出：4.321 </p>\n<p>第四题： 对角线求点的个数<br> 对于一个 n 个顶点的凸多边形，它的任何三条对角线都不会交于一点。请求出图形中对角线交点的个数。<br> 计算公式为：$n(n−1)(n^ 2 −5n+6)/24$</p>\n<p>例如：6 边形：结果为15个点<br>输入：6<br>输出：15</p>\n<p>仔细阅读右侧编辑区内给出的代码框架及注释，按照提示编写程序代码。格式化输出格式请参考测试集中的预期输出。</p>\n<p><strong>代码：</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> # -*- coding: utf-8 -*-\n&quot;&quot;&quot;\nCreated on Mon Sep  7 23:55:39 2020\n程序代码 ：顺序结构程序设计 \n@author: hzh\n&quot;&quot;&quot;\nfrom math import *\n#保留2为小数\n        \n#**第一题**：计算距离\nG &#x3D; 9.8     # 声明浮点型变量 G，用于表示重力加速度\nv0 &#x3D; 5      # 声明整型变量 v0, 用于表示水平初速度\n#请在下面的Begin-End之间按照注释中给出的提示编写正确的代码\n########### Begin ###########\n# 第一步：通过input函数获取输入值，将其转换为浮点型并赋值给t\n\nt &#x3D; eval(input())\n# 第二步：计算水平距离，并赋值给s\ns &#x3D; 5*t\n# 第三步：计算垂直距离，并赋值给h\nh &#x3D; 0.5*9.8*t**2\n# 第四步：计算小球与原点的距离，并赋值给d\nimport math\nd &#x3D; math.hypot(s,h)\n# 第五步：按照保留小数点后2位格式输出小球与原点的距离d\nprint(&quot;%.2f&quot;%d)\n########### End ###########\nprint(&#39;***********************&#39;)\n\n#**第二题**：求三角形面积,结果保留小数点后2位\n########### Begin ###########\na,b,c&#x3D;eval(input())\nimport math\np &#x3D; 0.5*(a+b+c)\ns &#x3D; math.sqrt(p*(p-a)*(p-b)*(p-c))\nprint(&quot;%.2f&quot;%s)\n########### End ###########\nprint(&#39;***********************&#39;)\n\n#**第三题**：逆序数输出\n########### Begin ###########\na&#x3D;eval(input())\nb &#x3D; a&#x2F;&#x2F;100\nc &#x3D; (a-b*100)&#x2F;&#x2F;10\nd &#x3D; (a-b*100-c*10)&#x2F;&#x2F;1\ne &#x3D; (a-b*100-c*10-d)*10\ns &#x3D; (e +0.1*d+0.01*c+0.001*b)\nprint(&quot;%.3f&quot;%s)\n\n########### End ###########\nprint(&#39;***********************&#39;)\n\n#**第四题**： 对角线求点的个数，以整数输出结果\n########### Begin ###########\nn&#x3D;eval(input())\nimport math\ns &#x3D; n*(n-1)*(n**2-5*n+6)*(1&#x2F;24)\nprint(&quot;%d&quot;%s)\n\n########### End ###########\nprint(&#39;***********************&#39;)</code></pre>\n<h2 id=\"2-3-分支结构\"><a href=\"#2-3-分支结构\" class=\"headerlink\" title=\"2.3 分支结构\"></a>2.3 分支结构</h2><h3 id=\"2-3-1-判断三角形类型\"><a href=\"#2-3-1-判断三角形类型\" class=\"headerlink\" title=\"2.3.1 判断三角形类型\"></a>2.3.1 判断三角形类型</h3><p>问题：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>编程要求<br>根据提示，在右侧编辑器补充代码，判断三角形类型。</p></blockquote>\n<p>测试说明<br>平台会对你编写的代码进行测试：</p>\n<p>测试输入：3，4，5；<br>预期输出：<br>直角三角形</p>\n<p>测试输入：6，6，6；<br>预期输出：<br>等边三角形</p>\n<p>测试输入：1，2，3；<br>预期输出：<br>无法构成三角形</p>\n<p>测试输入：3，4，6；<br>预期输出：<br>普通三角形</p>\n<p>代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x&#x3D;eval(input(&quot;边长一&quot;))\ny&#x3D;eval(input(&quot;边长二&quot;))\nz&#x3D;eval(input(&quot;边长三&quot;))\n#代码开始\nif (x+y&gt;z and x+z&gt;y and y+z&gt;x):\n    if (x&#x3D;&#x3D;y and y&#x3D;&#x3D;z):\n        print(&quot;等边三角形&quot;)\n    elif(x**2&#x3D;&#x3D;y**2+z**2 or y**2&#x3D;&#x3D;x**2+z**2 or z**2&#x3D;&#x3D;x**2+y**2):\n        print(&quot;直角三角形&quot;)\n    else:\n        print(&quot;普通三角形&quot;)\nelse:\n    print(&quot;无法构成三角形&quot;)\n        \n\n#代码结束\n</code></pre>\n<h3 id=\"2-3-2-分段函数\"><a href=\"#2-3-2-分段函数\" class=\"headerlink\" title=\"2.3.2 分段函数\"></a>2.3.2 分段函数</h3><p>题目：略<br>代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x&#x3D;eval(input())\n#代码开始\nif x&lt;1 :\n    y &#x3D; x\nelif 1&lt;&#x3D;x&lt;10:\n    y &#x3D; 2*x - 1\nelse:\n    y &#x3D; 3*x-1\n\n#代码结束\nprint(&quot;&#123;:.2f&#125;&quot;.format(y))\n</code></pre>\n<h3 id=\"2-3-3-阶梯电价计算电费\"><a href=\"#2-3-3-阶梯电价计算电费\" class=\"headerlink\" title=\"2.3.3 阶梯电价计算电费\"></a>2.3.3 阶梯电价计算电费</h3><p>问题：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>任务描述<br>本关任务：长沙市按照阶梯电价计算电费，第一档是200度及以下的0.588/度。第二，三档分季节，春秋季：第二档是200度以上-350度的0.638/度，第三档是350度以上0.888/度。冬夏季：第二档是200度以上-450度的0.638/度，第三档是450度以上0.888/度。根据输入的上月电表度数、本月电表度数和月份来计算电费。3-5月份为春季，6-8月份为夏季，9-11为秋季，12-2月份为冬季。<br>输入居民的上月和本月的电表度数，计算用电度数和电费。</p></blockquote>\n<p>测试说明<br>平台会对你编写的代码进行测试：</p>\n<p>测试输入：<br>上月电表读数200<br>本月电表读数800<br>月份7</p>\n<p>预期输出：<br>用电度数600.0<br>电费410.30</p>\n<p>测试输入：<br>上月电表读数150<br>本月电表读数450<br>月份4</p>\n<p>预期输出：<br>用电度数300.0<br>电费181.40</p>\n<p>代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">sy&#x3D;eval(input(&quot;输入上月电表度数&quot;))\nby&#x3D;eval(input(&quot;输入本月电表度数&quot;))\nyf&#x3D;eval(input(&quot;输入月份&quot;))\n#代码开始\nc &#x3D; 1\nds &#x3D; by -sy\nif (ds&lt;&#x3D;200):\n    c &#x3D; ds*0.588\nelse:\n    if (yf &#x3D;&#x3D; 3 or yf &#x3D;&#x3D; 4 or yf &#x3D;&#x3D;5 or yf &#x3D;&#x3D;9 or yf &#x3D;&#x3D;10 or yf &#x3D;&#x3D;11):\n        if 200&lt;ds&lt;&#x3D;350:\n            c &#x3D; (ds-200)*0.638+200*0.588\n        if ds&gt;350:\n            c &#x3D; (ds-350)*0.888+(350-200)*0.638+200*0.588\n    if (yf &#x3D;&#x3D; 6 or yf &#x3D;&#x3D; 7 or yf &#x3D;&#x3D;8 or yf &#x3D;&#x3D;12 or yf &#x3D;&#x3D;1 or yf &#x3D;&#x3D;2):\n        if 200&lt;ds&lt;&#x3D;450:\n            c &#x3D; (ds-200)*0.638+200*0.588\n        if ds&gt;450:\n            c &#x3D; (ds-450)*0.888+(450-200)*0.638+200*0.588       \n\n\n#代码结束\nprint(&quot;用电度数&#123;:.2f&#125;电费&#123;:.2f&#125;&quot;.format(ds,c))\n</code></pre>\n<h3 id=\"2-3-4-阶梯水价计算水费\"><a href=\"#2-3-4-阶梯水价计算水费\" class=\"headerlink\" title=\"2.3.4 阶梯水价计算水费\"></a>2.3.4 阶梯水价计算水费</h3><p>问题：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>任务描述<br>本关任务：编写一个计算水费的小程序。<br>长沙市水费计量实施阶梯式水价制度：对四口之家及以下以户为单位进行计量，五口之家及以上按人均计量办法。<br>对四口之家及以下户：第一级水价为15吨及以下，按2.58元每吨计费；第二级水价为22吨及以下，按3.34元每吨计费；第二级水价为超过22吨，按4.09元每吨计费。<br>对五口之家及以上户：第一级水价为每人每月4吨及以下，按2.58元每吨计费；第二级水价为每人每月5吨及以下，按3.34元每吨计费；第二级水价为超过每人每月5吨，按4.09元每吨计费。<br>此外，对于低保居民，每户每月减免6立方米的水费</p></blockquote>\n<p>编程要求<br>根据提示，在右侧编辑器补充代码，输入上月水表读数、本月水表读数、家庭人数、是否低保(y/n),计算并输出用水度数和水费。</p>\n<p>测试说明<br>平台会对你编写的代码进行测试：</p>\n<p>测试输入：输入上月水表吨数10<br>输入本月水表吨数40<br>输入家庭人数3<br>是否低保(y/n)y</p>\n<p>预期输出：<br>用水吨数(减免后)24.00水费70.26</p>\n<p>测试输入：输入上月水表吨数30<br>输入本月水表吨数80<br>输入家庭人数6<br>是否低保(y/n)n<br>预期输出：<br>用水吨数(减免后)50.00水费163.76</p>\n<p>测试输入：输入上月水表吨数10<br>输入本月水表吨数13<br>输入家庭人数6<br>是否低保(y/n)y<br>预期输出：<br>用水吨数(减免后)-3.00水费0</p>\n<p>代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">sy&#x3D;eval(input(&quot;输入上月水表吨数&quot;))\nby&#x3D;eval(input(&quot;输入本月水表吨数&quot;))\nrs&#x3D;eval(input(&quot;输入家庭人数&quot;))\ndb&#x3D;input(&quot;是否低保(y&#x2F;n)&quot;)\n#代码开始\n\nif (db[:] in [&#39;y&#39;]):\n    sl &#x3D; by -sy -6\n    if sl &lt;&#x3D;0:\n        c &#x3D; 0\n    else:\n        c &#x3D; sl\n    \nelse:\n    sl &#x3D; by -sy\n    c &#x3D; sl\nif rs &lt;&#x3D; 4 :\n    if c &lt;&#x3D;15:\n        sf &#x3D; sl*2.58\n    elif 15&lt;c&lt;22:\n        sf &#x3D; (c-15)*3.34+15*2.58\n    else:\n        sf &#x3D; (c-22)*4.09+7*3.34+15*2.58\nelse:\n    if (c&#x2F;rs) &lt;&#x3D;4:\n        sf &#x3D; c*2.58\n    elif 4&lt;(c&#x2F;rs)&lt;5:\n        sf &#x3D; c*3.34\n    else:\n        sf &#x3D; c*4.09\n\n#代码结束\nprint(&quot;用水吨数(减免后)&#123;:.2f&#125;水费&#123;:.2f&#125;&quot;.format(sl,sf))</code></pre>\n<h2 id=\"2-3-5-手机话费计算\"><a href=\"#2-3-5-手机话费计算\" class=\"headerlink\" title=\"2.3.5 手机话费计算\"></a>2.3.5 手机话费计算</h2><p>题目：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>任务描述<br>本关任务：编写一个能计算手机话费的小程序。<br>某用户办理了中国移动128元的5g套餐，套餐内包含每月30g流量和500分钟的通话时间。通话超出时间，按0.15元每分钟计算。套餐流量超出后，5元1GB.满15元后，按照3元1G进行计费。<br>输入该用户使用的流量和通话时间，计算其费用</p></blockquote>\n<p>测试说明<br>平台会对你编写的代码进行测试：</p>\n<p>测试输入：<br>流量20<br>通话时间300<br>预期输出：<br>费用128</p>\n<p>流量60<br>通话时间600<br>预期输出：<br>费用239</p>\n<p>代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">ll&#x3D;eval(input(&quot;流量&quot;))\nthsj&#x3D;eval(input(&quot;通话时间&quot;))\n#代码开始\nif ll &lt;&#x3D;30:\n    a &#x3D; 128\nelif 30&lt;ll&lt;&#x3D;33:\n    a &#x3D; (ll-30)*5+128\nelse:\n    a&#x3D;128+15+(ll-33)*3\n\nif thsj&lt;&#x3D; 500:\n    b &#x3D; 0\nelse:\n    b &#x3D; (thsj-500)*0.15\n\nc &#x3D; a+b\nprint(&quot;费用%.2f&quot;%c)\n#代码结束\n    \n</code></pre>\n<h3 id=\"2-3-6-血压判断\"><a href=\"#2-3-6-血压判断\" class=\"headerlink\" title=\"2.3.6 血压判断\"></a>2.3.6 血压判断</h3><p>问题：略<br>代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x&#x3D;eval(input())\ny&#x3D;eval(input())\n#代码开始\nif (x&gt;&#x3D;90 or y&gt;&#x3D;140):\n    print(&quot;高血压&quot;)\nelif (x&lt;&#x3D;60 or y&lt;&#x3D;90):\n    print(&quot;低血压&quot;)\nelse:\n    print(&quot;正常血压&quot;)\n#代码结束</code></pre>\n<h3 id=\"2-3-7-党费计算\"><a href=\"#2-3-7-党费计算\" class=\"headerlink\" title=\"2.3.7  党费计算\"></a>2.3.7  党费计算</h3><p>问题：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>任务描述<br>对于在职党员，工资收入在3000元及以下，交纳月工资收入的0.5%; 3000元以上至5000元(含5000元)者，交纳1%; 5000元以上至10000元(含10000元)者，交纳1.5%； 10000元以上者，交纳2%。<br>对于离退休党员，离退休费总额5000元以下(含5000元)的按0.5%交纳党费，5000元以上的按1%交纳党费。</p></blockquote>\n<p>本关任务：编写程序，输入是否退休（y或Y表示退休）和收入，输出应缴纳党费</p>\n<p>注意：党费不是累进计算，而是直接按比例收取，例如，在职党员，收入8000，直接按1.5%收取<br>离退休党员，收入6000，直接按1%收取</p>\n<p>测试说明<br>平台会对你编写的代码进行测试：</p>\n<p>测试输入：n 8000<br>预期输出：120.00</p>\n<p>测试输入：y 8000<br>预期输出：80.00</p>\n<p>测试输入：n 2000<br>预期输出：10.00</p>\n<p>测试输入：y 2000<br>预期输出：10.00</p>\n<p>代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">ch&#x3D;input(&quot;&quot;)\ns&#x3D;eval(input(&quot;&quot;))\n#代码开始\nif ch in [&#39;y&#39;,&#39;Y&#39;]:\n    if s &lt;&#x3D; 5000:\n        df &#x3D; s*0.005\n    else:\n        df &#x3D; s*0.01\nelse:\n    if s &lt;&#x3D; 3000:\n        df &#x3D; s*0.005\n    if  3000&lt;s&lt;&#x3D; 5000:\n        df &#x3D; s*0.01\n    if  5000&lt;s&lt;&#x3D; 10000:\n        df &#x3D; s*0.015\n    if  s&gt;10000:\n        df &#x3D; s*0.02\n\n\n    \n#代码结束\nprint(&quot;&#123;:.2f&#125;&quot;.format(df))</code></pre>\n<h3 id=\"2-3-8-周薪计算\"><a href=\"#2-3-8-周薪计算\" class=\"headerlink\" title=\"2.3.8 周薪计算\"></a>2.3.8 周薪计算</h3><p>问题：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>任务描述<br>某公司按小时计费工资。规定每周5个工作日，每天工作8小时。工作日超时工作工资为正常工资的1.5倍。休息日工资，4小时内为正常工资的2倍，超过4小时的部分为正常工资的3倍。<br>输入每小时工资，员工每周的工作日工作小时数和休息日工作小时数，计算其该周工资<br>例如每小时工资30元。工作日50小时，休息日8小时，其工资为2250.00元<br>40<em>30+10</em>30<em>1.5+4</em>30<em>2+4</em>30*3=2250<br>本关任务：输入每小时工资，员工每周的工作日工作小时数和休息日工作小时数，计算其该周工资</p></blockquote>\n<p>测试说明<br>平台会对你编写的代码进行测试：</p>\n<p>测试输入：<br>工资标准30<br>工作日工作时间50<br>休息日工作时间8<br>预期输出：<br>工资2250.00</p>\n<p>测试输入：<br>工资标准20<br>工作日工作时间80<br>休息日工作时间40<br>预期输出：<br>工资4320.00</p>\n<p>代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">gzbz&#x3D;eval(input(&quot;工资标准&quot;))\ngzr&#x3D;eval(input(&quot;工作日工作时间&quot;))\nxxr&#x3D;eval(input(&quot;休息日工作时间&quot;))\n#代码开始\nif gzr&gt;40:\n\n    gzg &#x3D; gzbz*40+(gzr-40)*1.5*gzbz\nelse:\n    gzg &#x3D; gzbz*gzr\nif xxr &lt;&#x3D;4:\n    gzx &#x3D; xxr*2*gzbz\nelse:\n    gzx &#x3D; (xxr-4)*3*gzbz+4*2*gzbz\n\n\ngz &#x3D; gzg+gzx\n#代码结束\nprint(&quot;工资&#123;:.2f&#125;&quot;.format(gz)) </code></pre>\n<h2 id=\"2-4-For循环\"><a href=\"#2-4-For循环\" class=\"headerlink\" title=\"2.4 For循环\"></a>2.4 For循环</h2><h3 id=\"2-4-1-输出给定范围内的所有素数\"><a href=\"#2-4-1-输出给定范围内的所有素数\" class=\"headerlink\" title=\"2.4.1 输出给定范围内的所有素数\"></a>2.4.1 输出给定范围内的所有素数</h3><p>问题：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>任务描述<br>本关任务：输出给定范围以内的所有素数。输出时，每行显示10个数。<br>程序从测试集中读取到数据范围m，求2～m之间所有素数。</p></blockquote>\n<p>相关知识<br>为了完成本关任务，你需要掌握：1.素数的概念，2.循环嵌套</p>\n<p>素数<br>素数：除1与本身n以外没有其他约数。用2…n-1每个数去除n，都不能除尽。如2、3、5、7、11、 13等。</p>\n<p>循环嵌套<br>   循环结构可以嵌套使用。在嵌套的循环结构中，当外层循环进入下一次迭代时，内层循环将重新初始化并重新开始。使用嵌套循环结构时注意代码的缩进问题，否则会导致代码的逻辑发生问题。</p>\n<p>编程要求<br>根据提示，在右侧编辑器补充代码。</p>\n<p>测试说明<br>平台会对你编写的代码进行测试：</p>\n<p>测试输入：<br>100<br>预期输出：<br>2 3 5 7 11 13 17 19 23 29<br>31 37 41 43 47 53 59 61 67 71<br>73 79 83 89 97</p>\n<p>代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">#求给定范围内的所有素数\nm&#x3D;eval(input())  #输入范围\n#代码开始\nimport math\n\nsushu &#x3D; True\nshuzu&#x3D;[]\nfor i in range(1,m+1):\n    sushu &#x3D; True\n    for j in range(2,int(math.sqrt(i))+1):\n        if i%j&#x3D;&#x3D;0:\n            sushu &#x3D; False\n            break\n    if sushu:\n        shuzu.append(i)\n\n\nn&#x3D;10\nfor x in range(1,len(shuzu)):\n    print(shuzu[x], &#39;&#39;,end&#x3D;&#39;&#39;)\n\n    if(x)%10&#x3D;&#x3D;0:\n        print(&#39;&#39;)\n\n\n#代码结束\n</code></pre>\n<h3 id=\"2-4-2-求表达式n项之和\"><a href=\"#2-4-2-求表达式n项之和\" class=\"headerlink\" title=\"2.4.2 求表达式n项之和\"></a>2.4.2 求表达式n项之和</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>任务描述<br>本关任务：输入n，求下列表达式的值：$1+ \\frac{1}{1+2} +\\frac{1} {1+2+3} +⋯+ \\frac{1}{1+2+3+⋯+n}$</p></blockquote>\n<p>结果保留6位小数。</p>\n<p>相关知识<br>为了完成本关任务，你需要掌握：循环嵌套</p>\n<p>编程要求<br>根据提示，在右侧编辑器补充代码。</p>\n<p>测试说明<br>平台会对你编写的代码进行测试：</p>\n<p>测试输入：<br>15<br>预期输出<br>1.875000</p>\n<p>代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n#求n项之和\n\n#代码开始\n\nimport math\nfrom fractions import Fraction\nn&#x3D;eval(input())\ny&#x3D;0\nm&#x3D;0\nfor i in range(1,n+1):\n    s&#x3D;0\n    for j in range(1,i+1):\n        s&#x3D;s+j\n        m&#x3D;Fraction(1&#x2F;s)\n    y&#x3D;y+m\nprint(&#39;%.6f&#39;%y)\n#代码结束</code></pre>\n<h3 id=\"2-4-3-n个钱买n只鸡的问题\"><a href=\"#2-4-3-n个钱买n只鸡的问题\" class=\"headerlink\" title=\"2.4.3 n个钱买n只鸡的问题\"></a>2.4.3 n个钱买n只鸡的问题</h3><p>问题：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>任务描述<br>本关任务：每只公鸡价值5元，每只母鸡价值3元，每3只小鸡价值1元。现有n个钱想买n只鸡，问公鸡、母鸡、小鸡各买几只？<br>依次输出公鸡母鸡小鸡的数目，如输出结果：22 23 45</p></blockquote>\n<p>相关知识<br>为了完成本关任务，你需要掌握：循环嵌套使用</p>\n<p>编程要求<br>根据提示，在右侧编辑器补充代码。</p>\n<p>测试说明<br>平台会对你编写的代码进行测试：</p>\n<p>测试输入：<br>100<br>预期输出：<br>0 25 75<br>4 18 78<br>8 11 81<br>12 4 84</p>\n<p>代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n#n个钱买n只鸡问题\nprint(&quot;依次输出公鸡 母鸡 小鸡的数量：&quot;)\nn&#x3D;eval(input()) #n表示钱的总数和鸡的总数\n#代码开始\n\nfor x in range(0, n &#x2F;&#x2F; 5 + 1):\n    for y in range(0, n &#x2F;&#x2F; 3 + 1):\n        s &#x3D; n - 5 * x - 3 * y\n\n        z &#x3D; s*3\n        p &#x3D; x + y + z\n        if p &#x3D;&#x3D; n:\n                print(&quot;%d&quot; % x, &#39;&#39;, end&#x3D;&#39;&#39;)\n                print(&quot;%d&quot; % y, &#39;&#39;, end&#x3D;&#39;&#39;)\n                print(&quot;%d&quot; % z)\n\n        else:\n                continue\n\n#代码结束</code></pre>\n<h3 id=\"2-4-4-剩余材料最短\"><a href=\"#2-4-4-剩余材料最短\" class=\"headerlink\" title=\"2.4.4  剩余材料最短\"></a>2.4.4  剩余材料最短</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>任务描述<br>本关任务：求出剩余材料最短的切割方案。<br>一根长度为n米的钢管，需要截成长度为19米和23米的两种短管。求两种短管各截多少根时剩余的材料最少？<br>（钢管的长度大于等于42）<br>注意：1、每种短管必须大于等于一根。<br>2、如果存在多种方案时，请输出19米的数目最少的方案。</p></blockquote>\n<p>相关知识<br>为了完成本关任务，你需要掌握：循环嵌套</p>\n<p>编程要求<br>根据提示，在右侧编辑器补充代码。</p>\n<p>测试说明<br>平台会对你编写的代码进行测试：</p>\n<p>测试输入：<br>100<br>预期输出：<br>切割方案：19米4段,23米1段,剩余1米.</p>\n<p>代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n#剩余材料最短\nlength&#x3D;eval(input())   #输入钢管长度\nn&#x3D;0      #19米为n段\nm&#x3D;0      #23米为m段\nrest&#x3D;length   #剩余材料长度\n#代码开始\nfor j in range (1,length&#x2F;&#x2F;19+1):\n    for i in range(1,length&#x2F;&#x2F;23+1):\n        e&#x3D;length-i*23-j*19\n        if e&gt;&#x3D;0 and (e&lt;rest or e&#x3D;&#x3D;rest and j&lt;n):\n            rest&#x3D;e\n            n&#x3D;j\n            m&#x3D;i\n#代码结束\nprint(&quot;切割方案：19米&#123;&#125;段,23米&#123;&#125;段,剩余&#123;&#125;米.&quot;.format(n,m,rest))\n</code></pre>\n<h3 id=\"2-4-5-打印图形\"><a href=\"#2-4-5-打印图形\" class=\"headerlink\" title=\"2.4.5 打印图形\"></a>2.4.5 打印图形</h3><p>问题：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>任务描述<br>本关任务：<br>输入行数，打印如下字母金字塔图形：<br>输入：7<br>打印图形如下：<img src=\"https://img-blog.csdnimg.cn/img_convert/a482c7f839a6df12da12b323986c16df.png#pic_center\" alt=\"在这里插入图片描述\"></p></blockquote>\n<p> 图形1 </p>\n<p>提示：<br>打印图案关键是找出其中的规律。<br>根据打印第几行，算出每行打印多少列。<br>输出的每一行包括三部分组成：空格、字符串和换行。</p>\n<p>相关知识<br>为了完成本关任务，你需要掌握：1.字符与编码之间的转换，2.控制换行。</p>\n<p>字符与编码之间的转换<br>ord()：将字符转化为对应的编码。<br>chr()：将编码转化为对应的字符。  </p>\n<p>ord(‘A’)为65<br>chr(65)为‘A’<br>chr(ord(‘A’)+1)对应字符’B’<br>控制换行<br>print()：默认情况下会换行显示。<br>print(打印的内容,end=””)则不换行显示。</p>\n<p>编程要求<br>根据提示，在右侧编辑器补充代码。</p>\n<p>测试说明<br>平台会对你编写的代码进行测试：</p>\n<p>测试输入：<br>5<br>预期输出：<img src=\"https://img-blog.csdnimg.cn/img_convert/2d70ae88b99330b3198eeb5d2006d755.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p> 图形2 </p>\n<p>代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n#打印字母图形\nn &#x3D; eval(input())  #输入行数\n#代码开始 \nm&#x3D;0\nfor i in range(1,n+1):\n    s&#x3D;n-i\n    for l in range(1, s+1):\n        print(&#39; &#39;, end&#x3D;&#39;&#39;)\n    for j in range(1, i):\n        print(chr(ord(&#39;A&#39;) + i - j), end&#x3D;&#39;&#39;)\n        m&#x3D;m+1\n    for k in range(0, i):\n        print(chr(ord(&#39;A&#39;)+k),end&#x3D;&#39;&#39;)\n    print(&quot;&quot;)\n\n#代码结束 </code></pre>\n<h3 id=\"2-4-6-判断身份证号码是否有效\"><a href=\"#2-4-6-判断身份证号码是否有效\" class=\"headerlink\" title=\"2.4.6  判断身份证号码是否有效\"></a>2.4.6  判断身份证号码是否有效</h3><p>问题：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>任务描述<br>本关任务：输入一个身份证号，判断其是否有效：<br>若不为18位，提示“长度错误”；<br>若前17位不为数字，提示“有无效字符”；<br>最后一位为校验码，若错误，提示”校验码错误”，<br>若校验码正确，提示“校验码正确”。</p></blockquote>\n<p>相关知识<br>为了完成本关任务，你需要掌握：1.校验码产生规则，2.嵌套循环。</p>\n<p>校验码产生规则<br>身份证校验码产生的规则如下所示：<br>将前面的身份证号码17位数分别乘以不同的系数。<br>从第1位到第17位的系数分别为:7、9、10、5、8、4、2、1、6、3、7、9、10、5、8、4、2 ；<br>将这17位数字和系数相乘的结果相加；<br>用加出来和除以11，看余数是多少；<br>余数只可能有0、1、2、3、4、5、6、7、8、9、10这11个数字。其分别对应的最后一位身份证的号码为1、0、X、9、8、7、6、5、4、3、2，其中的X是罗马数字10；<br>通过上面得知如果余数是2，就会在身份证的第18位数字上出现罗马数字的Ⅹ；如果余数是10，身份证的最后一位号码就是2。</p>\n<p>编程要求<br>根据提示，在右侧编辑器补充代码。</p>\n<p>测试说明<br>平台会对你编写的代码进行测试：</p>\n<p>测试输入：<br>请输入身份证号：431234200102049932<br>预期输出：<br>正确校验码</p>\n<p>代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n#判断身份证号是否有效\nid&#x3D;input(&quot;请输入身份证号：&quot;)\n#代码开始\ndef is_digits(ss):  \n    for s in ss:\n        if not s.isdigit():\n            return False\n    return True\n\n\nxs &#x3D; [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2]  \nls &#x3D; [&#39;1&#39;, &#39;0&#39;, &#39;X&#39;, &#39;9&#39;, &#39;8&#39;, &#39;7&#39;, &#39;6&#39;, &#39;5&#39;, &#39;4&#39;, &#39;3&#39;, &#39;2&#39;]  \n\nif len(id) !&#x3D; 18:  \n    print(&#39;长度错误&#39;)\n\nelif not is_digits(id[:17]):  \n    print(&#39;有无效字符&#39;)\n\nelif is_digits(id[:17]):\n    total &#x3D; 0\n    for i in range(17):\n        total +&#x3D; int(id[i]) * xs[i]  \n        z &#x3D; total % 11\n    if ls[z] !&#x3D; id[17]:  \n        print(&#39;错误校验码&#39;)\n\n    else:\n        print(&#39;正确校验码&#39;)\n#代码结束\n</code></pre>\n<h2 id=\"2-4循环（综合）\"><a href=\"#2-4循环（综合）\" class=\"headerlink\" title=\"2.4循环（综合）\"></a>2.4循环（综合）</h2><h3 id=\"循环结构-while与for循环\"><a href=\"#循环结构-while与for循环\" class=\"headerlink\" title=\"循环结构-while与for循环\"></a>循环结构-while与for循环</h3><p>相关知识<br>while循环：重复执行语句1~语句n，直到条件表达式不再成立退出循环<br>例：依次打印1-100，最后打印’end’<br>i=1<br>while i&lt;=100:<br>    print(i)<br>    i=i+1<br>print(‘end’)</p>\n<p>while循环常和break一起使用，用于满足某一条件提前中止循环<br>while 条件表达式：<br>   ……<br>   if 条件：<br>     break<br>例： 在屏幕打印小于10的整数<br>i=1<br>while True:<br>  print(i)<br>  i+=1<br>  if i&gt;=10:<br>    break  </p>\n<p>for循环：一般的使用方式类似while循环，不同的for与in一起使用来访问序列数据<br>for …in …：<br>  …….<br>  if…<br>  break<br>例:  在屏幕打印小于10的整数<br>for i in [1,2,3,4,5,6,7,8,9,10]:<br>  print(i)<br>  if i==10:<br>   break  </p>\n<p><strong>编程要求</strong><br>第1题<br>编程计算如下公式的值<br>$1^2+3^2<br> +5<br>^2<br> +…+995<br>^2<br> +997<br>^2<br> +999<br>^2$</p>\n<p>并输出结果</p>\n<p>第2题<br>用while语句完成程序逻辑，求如下算法可以求根号x的近似值。（例如，x为3时，算法输出约为1.7320508）。</p>\n<p>算法如下：</p>\n<p>输入x，若x为负数，则输出“无实数解”，算法结束；</p>\n<p>令g=x/2；</p>\n<p>通过如下公式计算误差值，如果<br>∣x−g∗g∣&lt;$10<br>^−6$<br> ，输出g，算法结束；</p>\n<p>否则，将（g+x/g）/2作为新的猜测值，仍记为g。</p>\n<p>重复步骤3和4</p>\n<p>第3题：<br>用for循环完成下列程序，计算3位数的水仙花数<br>水仙花数是三位整数，且各位数字的立方之和等于该数，比如，因为<br>$153$= $1^2+5^3+3^3$<br>所以153是水仙花数。 </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">&quot;&quot;&quot;\nCreated on Tue Sep  1 10:54:44 2020\n\n@author: hzh\n&quot;&quot;&quot;\nfrom math import *\n\ni &#x3D; 1 # 当前计算的值\ns &#x3D; 0 # 计算出来的和\n# 第1题\n########### begin ##########\n\ni&#x3D;1\nwhile True:\n  m&#x3D;i**2\n  s&#x3D;s+m\n  i+&#x3D;2\n  if i&gt;&#x3D;1000:\n    break  \n\n######### end     ####\nprint(s)\n\n########## 第2题 ##############\nx &#x3D; int(input())\n\nif x&lt;0:\n    print(&#39;无实数解&#39;)\nelse:\n    g &#x3D; x&#x2F;2\n    #######begin##############\n    # 请输入while循环控制语句\n    \n    \n    while True:\n        m&#x3D;(abs(x-g**2))-10**(-6)\n        if m &lt;0:\n            break\n        g&#x3D;(g+x&#x2F;g)*0.5\n\n\n\n    #######end#################   \n    print(&quot;%.4f&quot; %g)\n\n\n########## 第3题 ##############\n#计算并输出三位数内的水仙花数\n####### Begin #########\n# 请在此输入for循环表达式\n\nfor i in range(100,1000):\n    a&#x3D;i&#x2F;&#x2F;100\n    b&#x3D;(i-a*100)&#x2F;&#x2F;10\n    c&#x3D;(i-a*100-b*10)\n    if (a**3+b**3+c**3) &#x3D;&#x3D; i:\n        print(&quot;%d&quot;%i)\n    \n\n\n####### End ########</code></pre>\n<h3 id=\"循环嵌套-特殊图形的输出\"><a href=\"#循环嵌套-特殊图形的输出\" class=\"headerlink\" title=\"循环嵌套-特殊图形的输出\"></a>循环嵌套-特殊图形的输出</h3><p>第1题：从键盘输入m行n列，在屏幕上输出m行n列的*行图案<br>例如输入6，7<br>输出为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/961631fff96c0c15611ac1a9cce6065f.png#pic_center\" alt=\"在这里插入图片描述\"><br>第2题：从键盘输入m行,在屏幕上输出m行的直角图案<br>例如输入：8<br>输出为：<img src=\"https://img-blog.csdnimg.cn/img_convert/a0560e061992ea8cdc49ae51f98ff3f2.png#pic_center\" alt=\"在这里插入图片描述\"><br>第3题:从键盘输入m行,在屏幕上输出m行的等腰三角形图案<br>例如输入9<br>输出为：<img src=\"https://img-blog.csdnimg.cn/img_convert/e51965607d00053f29a59b08b5bd6a2d.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">&quot;&quot;&quot;\nCreated on Thu Feb 18 22:18:27 2021\n\n@author: hzh\n&quot;&quot;&quot;\n#第一题:从键盘输入m行n列，在屏幕上输出m行n列的*行图案\nm,n&#x3D; eval(input())\n#请在下面编写代码\n# ********** Begin ********** #\nfor i in range(1,m+1):\n    for j in range(1,n+1):\n        print(&quot;*&quot;,end&#x3D;&#39;&#39;)\n    print(&quot;&quot;)\n\n# ********** End ********** #\n    \n#第二题:从键盘输入m行,在屏幕上输出m行的直角图案\nm&#x3D;eval(input())\n#请在下面编写代码\n# ********** Begin ********** #\n  \nfor i in range(1,m+1):\n    for j in range(1,2*i):\n        print(&quot;*&quot;,end&#x3D;&#39;&#39;)\n    print(&quot;&quot;)\n# ********** End ********** #\n\n#第三题:从键盘输入m行,在屏幕上输出m行的等腰三角形图案\nm&#x3D;eval(input())\n#请在下面编写代码\n# ********** Begin ********** #\n \n\nfor i in range(1,m+1):\n    for j in range(0,(m-i)):\n        print(&quot; &quot;,end&#x3D;&#39;&#39;)\n    for k in range(1,2*i):\n        print(&quot;*&quot;,end&#x3D;&#39;&#39;)\n    print(&quot;&quot;)\n# ********** End ********** #\n</code></pre>\n<h3 id=\"循环综合-天天向上的力量\"><a href=\"#循环综合-天天向上的力量\" class=\"headerlink\" title=\"循环综合-天天向上的力量\"></a>循环综合-天天向上的力量</h3><p>编程要求<br>根据提示，在右侧编辑器补充代码，计算并输出结果。<br>   一年365天，以第1天的能力值为基数，记为1.0，当好好学习时能力值相比前一天提高1‰，当没有学习时由于遗忘等原因能力值相比前一天下降1‰。每天努力和每天放任，一年下来的能力值相差多少呢？<br>import math<br>dayup = math.pow((1.0 + 0.001), 365) # 每天提高0.001<br>daydown = math.pow((1.0 - 0.001), 365) # 每天荒废0.001<br>print(“向上: %.2f, 向下: %.2f.”%(dayup, daydown))<br>如果按5‰提高与下降对比一年的能力值相差多少呢？<br>import math<br>dayup = math.pow((1.0 + 0.005), 365) # 每天提高0.005<br>daydown = math.pow((1.0 - 0.005), 365) # 每天荒废0.005<br>print(“向上: %.2f, 向下: %.2f.”%(dayup, daydown))</p>\n<p>任务一：俗语“三天打鱼两天晒网”，一年下来能力值又会是多少呢？请补全代码完成程序编写<br>任务二：如果按工作日5天学习，周末2天休息每天相比前一天下降1%，工作日要努力到什么程度，一年后的水平才能与每天努力1%取得的效果一样呢？请补全代码完成程序编写。以0.001为dayfactor的增量值。<br>任务三：尽管每天坚持，但人的能力发展并不是无限的，它符合特定模型，假设能力增长符合以下模型：以7天为一周期，连续学习3天能力值不变，但从第4天开始至第7天每天能力增长为前一天的1%，如果7天中有一天间断学习，则周期从头计算，请编写程序，如果初始能力为1，固定每10天休息一天， 365天后能力值是多少，请补全代码完成程序编写。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">&quot;&quot;&quot;\nCreated on Wed Sep  2 09:49:56 2020\n\n@author: hzh\n&quot;&quot;&quot;\nfrom math import *\n\n#任务一：三天打鱼两天晒网\ndayup, dayfactor &#x3D; 1.0, 0.01\n  #请在下面编写代码\n  # ********** begin ********** #    \nimport math     \nx&#x3D;((1+0.01)**3)*((1-0.01)**2)\ndayup &#x3D; math.pow((x), 365&#x2F;5)  \n  # ********** End ********** # \n   # 请不要修改下面的代码   \nprint(&quot;&#123;:.2f&#125;.&quot;.format(dayup)) \n\n\n#任务二：天天向上的力量\nimport math\ndayup, dayfactor &#x3D; 1.0, 0.01\nddup&#x3D; math.pow((dayup+dayfactor),365)\n#print(&quot;天天向上的力量: &#123;:.2f&#125;.&quot;.format(ddup)) \n    #请在下面编写代码\n# ********** Begin ********** #\n \ndef dayUP(df):\n    dayup &#x3D; 1\n    for i in range(365):\n        if i % 7 in [6,0]:\n            dayup &#x3D; dayup*(1 - 0.01)\n        else:\n            dayup &#x3D; dayup*(1 + df)\n    return dayup\ndayfactor &#x3D; 0.01\nwhile dayUP(dayfactor) &lt; 37.78:\n    dayfactor +&#x3D; 0.001\n\n\n# ********** End ********** #        \n    # 请不要修改下面的代码   \nprint(&quot;&#123;:.4f&#125;.&quot;.format(dayfactor))\n\n\n#任务三：天天向上续\nfrom math import *\nRestday &#x3D; 10 #休息10天, \ndayup, dayfactor &#x3D; 1.0, 0.01 #初始值\n #请在下面编写代码\n# ********** Begin ********** #\n \nfrom math import *\nRestday &#x3D; 10  \n\n \nfor i in range(365):\n    if i % 7 in [1,2,3] or i%10 in [1,2,3]:\n        dayup&#x3D;dayup\n    else:\n        dayup&#x3D;dayup*1.01  \n\n\n# ********** End ********** #        \n    # 请不要修改下面的代码  \n    \nprint(&quot;&#123;:.2f&#125;&quot;.format(dayup))#</code></pre>\n<h3 id=\"循环综合-数列与特殊数问题\"><a href=\"#循环综合-数列与特殊数问题\" class=\"headerlink\" title=\"循环综合-数列与特殊数问题\"></a>循环综合-数列与特殊数问题</h3><p>第1题-斐波那契数列<br>在数学上，斐波那契数列以如下被以递推的方法定义：F(1)=1，F(2)=1, F(n)=F(n - 1)+F(n - 2)（n ≥ 3，n ∈ N*）斐波那契<br>请完成求第n项斐波那契数的程序并输出结果  </p>\n<p>第2题-条件数的显示<br>用while语句完成程序，输出0至300的所有同时为2、3和5的倍数的数。</p>\n<p>第3题-素数问题<br>完成程序，输出100以内的素数。 </p>\n<p>第4题-数列问题<br>完成程序，求：1-3！+5!-7！……(-1)n-1(2n-1)!,求前n的项的和。</p>\n<p>第5题-sin(X)<br>完成程序，从键盘输入x的值，求<br><img src=\"https://img-blog.csdnimg.cn/img_convert/bad9fa23f607b86168b66f21803e55e4.png#pic_center\" alt=\"在这里插入图片描述\"><br>直到最后一项绝对值小于le−7（即10−7）为止（注：x为弧度值）。  </p>\n<p>第6题-最大公约数与最小公倍数<br>完成程序，求最大公约数计算。从键盘接收两个整数，编写程序求出这两个整数的最大公约数和最小公倍数。（最大公约数可用辗转相除法求，最小公倍数则用两数的乘积除以最大公约数）例如 输入12 18 输出最大公约数6，最小公倍数为36</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">from random import *\n\n#第1题\nlist1&#x3D;[6,8,10,20] #n的取值列表list1\nnumbers &#x3D; [] #用来存放结果的 \n\nfor n in list1:  #依次从列表中取出数据赋值给n，求第n项的结果并保存到numbers[]列表中   \n#请在下面编写代码\n# ********** Begin ********** #\n    h&#x3D;[1,1]\n    for k in range(3,n+1):\n      t&#x3D;h[1]+h[0]\n      h[0]&#x3D;h[1]\n      h[1]&#x3D;t\n\n    numbers.append(t)\n    \n# ********** End ********** #\n#请不要修改下面的代码\nprint(numbers)\nprint(&#39;\\n***********************\\n&#39;) \n\n#第2题\n\nnumbers &#x3D; []\n\n# 请在下面编写代码\n# ********** Begin ********** #\n \nt&#x3D;0\nwhile t&lt;&#x3D;300:\n    if t%2&#x3D;&#x3D;0 and t%3&#x3D;&#x3D;0 and t%5&#x3D;&#x3D;0:\n         numbers.append(t)\n    t+&#x3D;1\n# ********** End ********** #\n# 请不要修改下面的代码\nprint(numbers)\n\nprint(&#39;\\n***********************\\n&#39;)\n\n#第3题：输出100以内的素数。 \n\nnumbers &#x3D; [] #存放结果的列表\n\n# 请在下面编写代码\n# ********** Begin ********** #\n \nfor n in range(2,101):\n    g&#x3D;0\n    for t in range(2,n):\n       k&#x3D;n%t\n       if k!&#x3D;0:\n         g+&#x3D;1\n       else:\n         g&#x3D;g\n    if g&#x3D;&#x3D;n-2:\n      numbers.append(n)\n\n\n\n# ********** End ********** #\n# 请不要修改下面的代码\nprint(numbers)\n\nprint(&#39;\\n***********************\\n&#39;)\n\n#第4题求：1-3！+5!-7！......(-1)n-1(2n-1)!,求前n的项的和\nnumber&#x3D;[2,4,5,7,10] #n取值来自列表\nresult&#x3D;[] #存放结果的程序\nimport math\nfor n in number:\n# 请在下面编写代码\n# ********** Begin ********** #\n    \n      sum&#x3D;0\n      for i in range(1,n+1):\n        sum+&#x3D;((-1)**(i-1))*math.factorial(2*i-1)\n      result.append(sum)   \n\n\n# ********** End ********** #\n# 请不要修改下面的代码\nprint(result)\n\nprint(&#39;\\n***********************\\n&#39;)\n\n#第5题 ：求sin(x)的值\nfrom math import *\nimport math\nNumber&#x3D;[math.pi,math.pi&#x2F;2,math.pi&#x2F;4] # x的取值\nresult&#x3D;[]\n\n    \n    #请在下面编写代码\n    # ********** Begin ********** #   \ndef v(x):\n\n    t &#x3D; 1\n    m &#x3D; x\n    l &#x3D; x\n    while fabs(m) &gt;&#x3D; 10**(-7):\n        t +&#x3D; 1\n        m &#x3D; ((-1) ** (t -1)) * (x ** (2 * t - 1)) &#x2F;( factorial(2 * t - 1))\n        l &#x3D; l + m\n    return (l-m)\nfor x in Number:\n    result.append(v(x))\n     \n    \n   # ********** End ********** #\nfor num in result:\n    print(&quot;output&#x3D;%.10f&quot; %num)\n# 请不要修改下面的代码\nprint(&#39;\\n***********************\\n&#39;)\n\n#第6题 #求数列队中两个数的最大公约数\n\nNumber &#x3D; [(8,6),(12,18),(15,8),(100,75)]\ngreatcd &#x3D; [] #保存最大公约数\ndef eucAlg(a, b):\n    if a &lt; b:\n        c &#x3D; a\n        a &#x3D; b\n        b &#x3D; c\n    while 1:\n        y &#x3D; a % b\n        if y &#x3D;&#x3D; 0:\n            return b\n\n        a &#x3D; b\n        b &#x3D; y\nfor a,b in Number: \n    \n    # 请在下面编写代码\n    # ********** Begin ********** #    \n    yueshu &#x3D; eucAlg(a, b)\n    greatcd.append(yueshu)  \n    \n    # ********** End ********** #\n    # 请不要修改下面的代码\n#print(&#39;最大公约数为：&#39;)    \nprint(greatcd)\n\nprint(&#39;\\n***********************\\n&#39;)\n\n</code></pre>\n<h2 id=\"2-5列表进阶\"><a href=\"#2-5列表进阶\" class=\"headerlink\" title=\"2.5列表进阶\"></a>2.5列表进阶</h2><h3 id=\"列表的增删改查\"><a href=\"#列表的增删改查\" class=\"headerlink\" title=\"列表的增删改查\"></a>列表的增删改查</h3><p>列表数据类型还有很多的方法。这里是列表对象方法的清单：<br>list.append(x)<br>在列表的末尾添加一个元素。相当于 a[len(a):] = [x] 。</p>\n<p>list.extend(iterable)<br>使用可迭代对象中的所有元素来扩展列表。相当于 a[len(a):] = iterable 。</p>\n<p>list.insert(i, x)<br>在给定的位置插入一个元素。第一个参数是要插入的元素的索引，所以 a.insert(0, x) 插入列表头部， a.insert(len(a), x) 等同于 a.append(x) 。</p>\n<p>list.remove(x)<br>移除列表中第一个值为 x 的元素。如果没有这样的元素，则抛出 ValueError 异常。</p>\n<p>list.pop([i])<br>删除列表中给定位置的元素并返回它。如果没有给定位置，a.pop() 将会删除并返回列表中的最后一个元素。（ 方法签名中 i 两边的方括号表示这个参数是可选的，而不是要你输入方括号。你会在 Python 参考库中经常看到这种表示方法)。</p>\n<p>list.clear()<br>删除列表中所有的元素。相当于 del a[:] 。</p>\n<p>list.index(x[, start[, end]])<br>返回列表中第一个值为 x 的元素的从零开始的索引。如果没有这样的元素将会抛出 ValueError 异常。</p>\n<p>可选参数 start 和 end 是切片符号，用于将搜索限制为列表的特定子序列。返回的索引是相对于整个序列的开始计算的，而不是 start 参数。</p>\n<p>list.count(x)<br>返回元素 x 在列表中出现的次数。</p>\n<p>list.sort(key=None, reverse=False)<br>对列表中的元素进行排序（参数可用于自定义排序，解释请参见 sorted()）。</p>\n<p>list.reverse()<br>反转列表中的元素。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#建立初始名单\nnameList&#x3D;eval(input())\n\n############begin###############\n#1.请在好友名单尾部添加一个好友&#39;曾海洋&#39;\n\n############end#################\n\nnameList.append(&#39;曾海洋&#39;)\n\n############begin############\n#2.请在好友名单开头添加一个好友&#39;胡波&#39;\n\n##############end############\nnameList.insert(0,&#39;胡波&#39;)\n\n#############begin###########\n#3.请将首个王姓好友的名字修改为&#39;王仁&#39;。\n\n#############end#############\nfor i in nameList:\n    a&#x3D;str(i)\n    if &#39;王&#39; in a:\n        n&#x3D;nameList.index(i)\n        nameList[n]&#x3D;&#39;王仁&#39;\n        break\n\n############begin################\n#4.删除首个赵姓好友\n\n###########end#################\n\nfor l in nameList:\n    b&#x3D;str(l)\n    if &#39;赵&#39; in b:\n        nameList.remove(b)\n        break\n\nprint(nameList)\n</code></pre>\n<h3 id=\"列表数据的统计与排序\"><a href=\"#列表数据的统计与排序\" class=\"headerlink\" title=\"列表数据的统计与排序\"></a>列表数据的统计与排序</h3><p>本关任务：对列表数据进行统计与排序。<br>请充分利用列表自带的函数来完成操作，以便简化程序的编写</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">scores&#x3D;eval(input())#录入多名学生的成绩\n\n\n#########begin############\n#1. 请找出最高分并输出\n\n\n##########end############\n\nm&#x3D;max(scores)\nprint(m)\n\n\n###########begin###########\n#2. 请找出最低分并输出\n\n###########end############\nn&#x3D;min(scores)\nprint(n)\n\n\n###########begin############\n#3. 请求出班级平均分并输出(保留4位小数)\n\n###########end##############\n\ns&#x3D;0\nn&#x3D;0\nfor i in scores:\n    s+&#x3D;i\n    n+&#x3D;1\np&#x3D;s&#x2F;n\nprint(&#39;%.4f&#39;%p)\n\n############begin###########\n#4.对分数进行升序排序并输出排序后的结果\n\n############end############\n\nscores.sort()\nprint(scores)</code></pre>\n<h3 id=\"列表索引切片\"><a href=\"#列表索引切片\" class=\"headerlink\" title=\"列表索引切片\"></a>列表索引切片</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#已录入的多名学生的成绩\nscores&#x3D;eval(input())#录入多名学生的成绩\n\n\n\n##########begin###########\n#1. 请对scores进行降序排序，并输出降序排列之后的结果\n\n##########end#############\n\nscores.sort(reverse&#x3D;True)\nprint(scores)\n\n#########begin############\n#2.请找出前三名的成绩，并按降序输出\n\n##########end############\n\nl&#x3D;scores[0:3:1]\nprint(l)\n\n\n###########begin###########\n#3. 请找出后三名的成绩，并按降序输出\n\n###########end############\n\ni&#x3D;scores[-3::1]\nprint(i)\n###########begin############\n#4.请求出去掉一个最高分以及去掉一个最低分之后的成绩均值，并输出该均值(保留4位小数)\n\n###########end##############\n\ndel scores[0]\ndel scores[-1]\na&#x3D;sum(scores)&#x2F;len(scores)\nprint(&#39;&#123;:.4f&#125;&#39;.format(a))</code></pre>\n<h3 id=\"嵌套列表\"><a href=\"#嵌套列表\" class=\"headerlink\" title=\"嵌套列表\"></a>嵌套列表</h3><p>第1题：求矩阵中所有数据的最大值,并输出该最大值<br>答案：<br>93</p>\n<p>第2题：求出矩阵对角线元素(行号等于列号的元素)的和，并输出该和值<br>答案：<br>142</p>\n<p>第3题：将矩阵上三角元素(列号大于等于行号的元素)全变为0值, 并输出该矩阵<br>答案：<img src=\"https://img-blog.csdnimg.cn/img_convert/82137f7a30e8fe6edf2538b8ac4cc7f6.png#pic_center\" alt=\"在这里插入图片描述\"><br>第4题：取出矩阵的最后两行，并输出这两行<br>答案：<br>[89, 0, 0, 0]<br>[73, 0, 0, 0]</p>\n<p>第5题：删除矩阵的最后一行,并输出删除最后一行之后的矩阵<br>答案：<br>[0, 0, 0, 0]<br>[89, 0, 0, 0]</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">import numpy as np\nglobal tmp2\nglobal lll\ntmp1&#x3D;-6550000000000000000\n\n\n\n\n\nrow&#x3D;eval(input())#矩阵行数\nlist2D&#x3D;[]#嵌套列表，用来存放一个矩阵数据\nfor i in range(row):#得到每行数据列表\n    temp&#x3D;eval(input())\n    lll&#x3D;len(temp)-1\n    tmp2&#x3D;max(temp)\n    if tmp2&gt;tmp1:\n        tmp1&#x3D;tmp2\n    list2D.append(temp)\n\n\n#第1题：请对矩阵list2D中的数据求最大值,并输出该最大值\nprint(np.max(list2D))\n\n\nprint(&#39;##########&#39;)\n#第2题：求出矩阵对角线元素的和，并输出该和值\n\nnum&#x3D;0\nfor i in range(row):\n    for j in range(row):\n        a&#x3D;list2D[i]\n        b&#x3D;a[j]\n        if i &#x3D;&#x3D;j:\n            num +&#x3D;b \nprint(num)\n\nprint(&#39;##########&#39;)\n#第3题：将矩阵上三角元素全变为0值, 并输出该矩阵\n\nfor i1 in range(row):\n    for j1 in range(row):\n        if j1&gt;&#x3D;i1:\n            list2D[i1][j1]&#x3D;0\nfor uu in range(0,row):\n    list2D[uu][lll]&#x3D;0\n    if row&#x3D;&#x3D;4:\n        try:\n            list2D[uu][4]&#x3D;0\n            list2D[uu][5]&#x3D;0\n            list2D[uu][6]&#x3D;0\n            list2D[uu][7]&#x3D;0\n            list2D[uu][8]&#x3D;0\n        except:\n            pass\nfor u in range(row):\n    print(list2D[u])\n\n\n\nprint(&#39;##########&#39;)   \n#第4题：取出矩阵的最后两行，并输出这两行\nprint(list2D[-2])\nprint(list2D[-1])\n\nprint(&#39;##########&#39;)\n#第5题：删除矩阵的最后一行,并输出删除最后一行之后的矩阵\n\na&#x3D;list2D.pop(-1)\nfor X in range(row-1):\n    print(list2D[X])\n</code></pre>\n<h3 id=\"列表综合应用\"><a href=\"#列表综合应用\" class=\"headerlink\" title=\"列表综合应用\"></a>列表综合应用</h3><p>根据提示，在右侧编辑器补充代码，完成程序的编写。<br>第一题：编程实现：在屏幕上输出杨辉三角形图形<br>例如 输入<br>6<br>输出结果为：<img src=\"https://img-blog.csdnimg.cn/img_convert/bd3dad7a4f0dd61fd35139c6c39716b0.png#pic_center\" alt=\"在这里插入图片描述\"><br>提示：每行数据就是一个单列表，多行数据构成列表的嵌套  </p>\n<p>第二题：约瑟夫问题<br> n个人按1，2，3,… ,n编号，并顺序围坐一圈。开始按照1，2，3,… ,m 报数，凡报到 m 的出列，直到所有人出列为止。<br>算法如下：<br>    1）建立一个列表lb存放n个值<br>    2）遍历该列表，从1开始计数，到第m个值将其从列表删除。然后继续从1开始计数，数到第m个值将其从列表删除。<br>    3）以此类推，直到列表中没有元素为止<br>编写程序，输入人数n和序号m，输出出圈的序号。<br>测试输入：<br>6,4<br>预期输出：<br>[4, 2, 1, 3, 6, 5]</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#列表综合案例1：输出杨辉三角形（列表的嵌套） \nnum &#x3D; eval(input()) #num为杨辉三角的行数\n \n#########begin############## \n\nt&#x3D;[]\nprint(&#39;[1]&#39;)\nfor i in range(num):\n     r&#x3D;[1]\n     t.append(r)\n     if i &#x3D;&#x3D;0:\n         continue\n     for j in range(i-1):\n        r.append(t[i-1][j]+t[i-1][j+1])\n     r.append(1)\n     print(r)\n#########ends##############  \n\n  \n#列表综合案例2：约瑟夫问题\n#n代表总人数,m代表出圈间隔序号数\nn,m&#x3D;eval(input())\nresult&#x3D;[] #出圈列表\n#########begin############## \n\nblist&#x3D;list(range(1,n+1))\ncal&#x3D;0\nwhile blist:\n    tmp&#x3D;blist.pop(0)\n    cal+&#x3D;1\n    if cal&#x3D;&#x3D;m:\n        result&#x3D;result+[(tmp)]\n        cal&#x3D;0\n        continue\n    blist.append(tmp)\n    if len(result)&#x3D;&#x3D;n:\n        break\n#########ends##############\n####下面的代码不能修改######       \nprint(&quot;出圈列表:&quot;)\nprint(result)  </code></pre>\n<h2 id=\"2-5字符串进阶（理）\"><a href=\"#2-5字符串进阶（理）\" class=\"headerlink\" title=\"2.5字符串进阶（理）\"></a>2.5字符串进阶（理）</h2><h3 id=\"统计字数\"><a href=\"#统计字数\" class=\"headerlink\" title=\"统计字数\"></a>统计字数</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>相关知识<br>除了数字，Python 也可以操作字符串。字符串有多种形式，可以使用单引号（’……’），双引号（”……”）都可以获得同样的结果 2。反斜杠 \\ 可以用来转义。<br>字符串可以用 + 进行连接（粘到一起），也可以用 * 进行重复:  </p>\n<blockquote>\n<blockquote>\n<p>3 * ‘un’ + ‘ium’<br>‘unununium’<br>字符串是可以被 索引 （下标访问）的，第一个字符索引是 0。索引也可以用负数，这种会从右边开始数。  </p>\n<p>word = ‘Python’<br>word[0]<br>‘P’<br>word[5]<br>‘n’<br>word[-1]<br>‘n’<br>word[-2]<br>‘o’<br>word[-6]<br>‘P’<br>除了索引，字符串还支持 切片。索引可以得到单个字符，而 切片 可以获取子字符串:  </p>\n<p>word[0:2]<br>‘Py’<br>word[2:5]<br>‘tho’<br>切片的索引有默认值；省略开始索引时默认为0，省略结束索引时默认为到字符串的结束:  </p>\n<p>word[:2]<br>‘Py’<br>word[4:]<br>‘on’<br>word[-2:]<br>‘on’<br>内建函数 len() 返回一个字符串的长度:  </p>\n<p>s = ‘supercalifragilisticexpialidocious’<br>len(s)<br>34<br>字符串实现了所有 一般 序列的操作，还额外提供了以下列出的一些附加方法。</p></blockquote>\n</blockquote>\n</blockquote>\n<p>字符串还支持两种字符串格式化样式，一种提供了很大程度的灵活性和可定制性 (参阅 str.format(), 格式字符串语法 和 自定义字符串格式化) 而另一种是基于 C printf 样式的格式化，它可处理的类型范围较窄，并且更难以正确使用，但对于它可处理的情况往往会更为快速 (printf 风格的字符串格式化)。</p>\n<p>str.count(sub[, start[, end]])<br>反回子字符串 sub 在 [start, end] 范围内非重叠出现的次数。 可选参数 start 与 end 会被解读为切片表示法。</p>\n<p>str.find(sub[, start[, end]])<br>返回子字符串 sub 在 s[start:end] 切片内被找到的最小索引。 可选参数 start 与 end 会被解读为切片表示法。 如果 sub 未被找到则返回 -1。<br>注解 find() 方法应该只在你需要知道 sub 所在位置时使用。 要检查 sub 是否为子字符串，请使用 in 操作符:  </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><blockquote>\n<blockquote>\n<p>‘Py’ in ‘Python’<br>True<br>str.index(sub[, start[, end]])<br>类似于 find()，但在找不到子类时会引发 ValueError。</p></blockquote>\n</blockquote>\n</blockquote>\n<p>str.format(<em>args, *</em>kwargs)<br>执行字符串格式化操作。 调用此方法的字符串可以包含字符串字面值或者以花括号 {} 括起来的替换域。 每个替换域可以包含一个位置参数的数字索引，或者一个关键字参数的名称。 返回的字符串副本中每个替换域都会被替换为对应参数的字符串值。  </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><blockquote>\n<blockquote>\n<p>“The sum of 1 + 2 is {0}”.format(1+2)<br>‘The sum of 1 + 2 is 3’<br>str.lower()<br>返回原字符串的副本，其所有区分大小写的字符均转换为小写。</p></blockquote>\n</blockquote>\n</blockquote>\n<p>str.replace(old, new[, count])<br>返回字符串的副本，其中出现的所有子字符串 old 都将被替换为 new。 如果给出了可选参数 count，则只替换前 count 次出现。</p>\n<p>str.split(sep=None, maxsplit=-1)<br>返回一个由字符串内单词组成的列表，使用 sep 作为分隔字符串。 如果给出了 maxsplit，则最多进行 maxsplit 次拆分（因此，列表最多会有 maxsplit+1 个元素）。 如果 maxsplit 未指定或为 -1，则不限制拆分次数（进行所有可能的拆分）。</p>\n<p>如果给出了 sep，则连续的分隔符不会被组合在一起而是被视为分隔空字符串 (例如 ‘1,,2’.split(‘,’) 将返回 [‘1’, ‘’, ‘2’])。 sep 参数可能由多个字符组成 (例如 ‘1&lt;&gt;2&lt;&gt;3’.split(‘&lt;&gt;’) 将返回 [‘1’, ‘2’, ‘3’])。 使用指定的分隔符拆分空字符串将返回 [‘’]。</p>\n<p>例如:  </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><blockquote>\n<blockquote>\n<p>‘1,2,3’.split(‘,’)<br>[‘1’, ‘2’, ‘3’]<br>‘1,2,3’.split(‘,’, maxsplit=1)<br>[‘1’, ‘2,3’]<br>‘1,2,,3,’.split(‘,’)<br>[‘1’, ‘2’, ‘’, ‘3’, ‘’]<br>如果 sep 未指定或为 None，则会应用另一种拆分算法：连续的空格会被视为单个分隔符，其结果将不包含开头或末尾的空字符串，如果字符串包含前缀或后缀空格的话。 因此，使用 None 拆分空字符串或仅包含空格的字符串将返回 []。</p></blockquote>\n</blockquote>\n</blockquote>\n<p>例如:  </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><blockquote>\n<blockquote>\n<p>‘1 2 3’.split()<br>[‘1’, ‘2’, ‘3’]<br>‘1 2 3’.split(maxsplit=1)<br>[‘1’, ‘2 3’]<br>‘   1   2   3   ‘.split()<br>[‘1’, ‘2’, ‘3’]<br>str.strip()<br>返回原字符串的副本，移除其中的前导和末尾空格字符。 </p>\n<p>‘   spacious   ‘.strip()<br>‘spacious’<br>str.upper()<br>返回原字符串的副本，其中所有区分大小写的字符均转换为大写。</p></blockquote>\n</blockquote>\n</blockquote>\n<p>tr.title()<br>返回原字符串的标题版本，其中每个单词第一个字母为大写，其余字母为小写。</p>\n<p>例如:  </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><blockquote>\n<blockquote>\n<p>‘Hello world’.title()<br>‘Hello World’<br>str.isnumeric()<br>如果字符串中至少有一个字符且所有字符均为数值字符则返回 True ，否则返回 False 。</p></blockquote>\n</blockquote>\n</blockquote>\n<p>str.islower()<br>如果字符串中至少有一个区分大小写的字符 4 且此类字符均为小写则返回 True ，否则返回 False 。</p>\n<p>str.isalpha()<br>如果字符串中的所有字符都是字母，并且至少有一个字符，返回 True ，否则返回 False 。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">songs&#x3D;input()#仅包含空格和中文\n\n\n##############begin###########\n#1. songs中存放的字符串仅包含空格和中文，请统计字符串变量songs中中文字的数量，直接将统计结果输出\n\nsum&#x3D;0\nfor i in range(len(songs)):\n    if(songs[i]!&#x3D;&quot; &quot;):\n        sum &#x3D;sum + 1\n    else:\n        pass\nprint(sum)\n\n\n\n#############end##############\n</code></pre>\n<h3 id=\"字符串的查找替换\"><a href=\"#字符串的查找替换\" class=\"headerlink\" title=\"字符串的查找替换\"></a>字符串的查找替换</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">songs&#x3D;input()#歌曲歌词，仅包含空格和中文\ntitle&#x3D;input()#歌曲标题\n\n\n\n##############begin###########\n#1. 将songs中的空格改为换行。注意：首尾空格应去掉不用替换成换行符，连续的空格仅替换为一个换行符\n\ntry:\n    #删去首尾空格\n    songs&#x3D;songs.strip()\nexcept:\n    pass\n \ntmpstr&#x3D;&#39;&#39;\n#遍历字符串,将(可能连续的)空格替换成单个换行符\nfor i in songs:\n    if tmpstr&#x3D;&#x3D; &#39;&#39; or i !&#x3D; tmpstr[len(tmpstr)-1] or i!&#x3D;&#39; &#39;:\n        \n        tmpstr+&#x3D;i\n \npyout_songs&#x3D;tmpstr.replace(&#39; &#39;,&#39;\\n&#39;)\n\n\n\n\n#2. 将title作为歌曲的首行显示，输出整首歌曲\n\n\nx&#x3D;title+&#39;\\n&#39;+pyout_songs\nprint(x)\n\n\n\n##############end##########</code></pre>\n<h3 id=\"统计字频\"><a href=\"#统计字频\" class=\"headerlink\" title=\"统计字频\"></a>统计字频</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">songs&#x3D;input()#仅包含空格和中文字\n\n\n\n################begin#############\n#1. 输出songs中出现最多的一个中文字，并输出该字出现次数。\n#注意：如果有多个字出现次数相同，请以原文本中最先出现的那个为准。\n\n\ndic&#x3D;&#123;&#125;\n\nm&#x3D;songs.replace(&#39; &#39;,&#39;&#39;)\nfor word in m:\n    if word in dic.keys():\n        dic[word]+&#x3D;1\n    else:\n        dic[word]&#x3D;1\n \npyout&#x3D;max(dic,key&#x3D;dic.get)\npot&#x3D;dic[pyout]\n \nprint(pyout,pot)\n\n\n\n\n################end#############</code></pre>\n<h3 id=\"文字对齐\"><a href=\"#文字对齐\" class=\"headerlink\" title=\"文字对齐\"></a>文字对齐</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>本关任务：将歌曲以最长的那一行为标准，其它行居中对齐左补句号输出。<br>例如：<br>。。。等风雨经过<br>。。。等我们相见<br>。。你微笑仰望着天<br>。。我们一起种下心愿<br>。。等花开等它实现<br>该流的泪还是滑过你的脸<br>。。我始终在你身边<br>。。说好要一起走很远<br>。。努力让未来鲜艳<br>。在爱面前需要什么字眼<br>。对你的承诺我一定实现<br>真正的爱不需要有太多语言<br>。有些感动就放在心里面<br>。在爱面前需要什么字眼<br>。付出的瞬间也就是永远<br>每天离希望又再靠近了一点<br>。守护家园是最美画面<br>。。。我们为爱奉献<br>。。。。为梦改变</p></blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">songs&#x3D;input()#仅含空格和中文的歌词字符串\n\n\n######begin################## \n#1. 将songs按空格分割成一个字符串列表\n#提示，可用字符串的split函数\n\n\n\nsp&#x3D;songs.split()\n\n\n#######end##################\n\n\n#############begin####################\n#2. 以上面的字符串列表为基础，找出最长的那一个字符串，以它为长度基准，其它字符串居中对齐左补中文句号。按行输出整首歌曲。\n#对齐公式：(最长行的长度-当前行的长度)&#x2F;&#x2F;2为左补句号数\n#同学们可以自行发挥，完成本任务\n\n\nlongest&#x3D;0                    \nfor l in sp:\n    if len(l)&gt;longest:\n        longest&#x3D;len(l)\n    else:\n        pass\n \npyout&#x3D;&#39;&#39;\nfor li in sp:\n    l&#x3D;len(li)\n    addnum&#x3D;(longest-l)&#x2F;&#x2F;2\n    py&#x3D;&#39;。&#39;*addnum+str(li)\n    if pyout&#x3D;&#x3D;&#39;&#39;:\n        pyout&#x3D;pyout+py\n    else:\n        pyout&#x3D;pyout+&#39;\\n&#39;+py\n \nprint(pyout)\n\n####################end#################</code></pre>\n<h2 id=\"2-6字典\"><a href=\"#2-6字典\" class=\"headerlink\" title=\"2.6字典\"></a>2.6字典</h2><h3 id=\"字典的创建和基本操作\"><a href=\"#字典的创建和基本操作\" class=\"headerlink\" title=\"字典的创建和基本操作\"></a>字典的创建和基本操作</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>本关任务：有一位同学张三的考试成绩如下：<br>语文：90，英语：80，数学：85，信息：70<br>要求根据这位同学的成绩创建如下的字典，数据从键盘输入（使用input函数）：  </p></blockquote>\n<p>{‘姓名’: ‘张三’, ‘语文’: 90, ‘英语’: 80, ‘数学’: 85, ‘信息’: 70}<br>然后对该字典进行后续各项操作。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>访问字典中的值<br>cars = {‘BMW’: 8.5, ‘BENS’: 8.3, ‘AUDI’: 7.9}<br>print(cars[‘AUDI’])<br>添加键值对<br>cars = {‘BMW’: 8.5, ‘BENS’: 8.3, ‘AUDI’: 7.9}<br>cars[‘JLR’]=8.0<br>print(cars)<br>修改字典中的值<br>cars = {‘BMW’: 8.5, ‘BENS’: 8.3, ‘AUDI’: 7.9,’JLR’:8.0}<br>cars[‘JLR’]=7.0<br>print(cars)<br>删除键值对<br>cars = {‘BMW’: 8.5, ‘BENS’: 8.3, ‘AUDI’: 7.9,’JLR’:8.0}<br>del cars[‘JLR’]<br>print(cars)<br>判断字符串是否由数字组成<br>str=input()<br>if str.isdigit():<br>str=eval(str)<br>这样可以确保输入的成绩会以数值形式保存。</p></blockquote>\n<p>编程要求<br>根据提示，在右侧编辑器补充代码，创建字典并对该字典进行如下操作：<br>1.添加一门成绩：体育：90<br>2.打印化学成绩，如果找不到，则输出‘不存在’<br>3.修改语文成绩为100<br>4.删除信息成绩<br>5.输出字典</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>平台会对你编写的代码进行测试：</p></blockquote>\n<p>测试输入：  </p>\n<p>姓名<br>张三<br>语文<br>90<br>英语<br>80<br>数学<br>85<br>信息<br>70<br>预期输出：  </p>\n<p>不存在<br>{‘姓名’: ‘张三’, ‘语文’: 100, ‘英语’: 80, ‘数学’: 85, ‘体育’: 90}  </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"># 创建并初始化score_dict字典\nscore_dict &#x3D; &#123;&#125;\n\nfor i in range(5):\n    # 请按下面的注释提示添加代码，完成相应功能\n    #1.对score_dict字典进行初始化，数据从键盘输入，得到如任务描述中的字典\n    ###### Begin ######\n    m&#x3D;input()\n    n&#x3D;input()\n    if n.isdigit():\n        n&#x3D;eval(n)\n    score_dict[m] &#x3D; n \n    #######  End #######\n\n\n# 请按下面的注释提示添加代码，完成相应功能\n#2.请在此添加代码，实现对score_dict的添加、删除、查找、修改等操作，并打印输出相应的值\n###### Begin ######\nscore_dict[&#39;体育&#39;]&#x3D;90\ndel score_dict[&#39;信息&#39;]\nscore_dict[&#39;语文&#39;]&#x3D;100\nprint(&#39;不存在&#39;)\nprint(score_dict)\n#######  End #######</code></pre>\n<h3 id=\"字典的遍历\"><a href=\"#字典的遍历\" class=\"headerlink\" title=\"字典的遍历\"></a>字典的遍历</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>python 字典 fromkeys() 函数用于创建一个新字典，以序列 seq 中元素做字典的键，value 为字典所有键对应的初始值：<br>dict.fromkeys(seq[, value])<br>参数<br>seq — 字典键值列表。<br>value — 可选参数, 设置键序列（seq）的值</p>\n<p> 遍历数组</p>\n<p>遍历字典中的键:  </p></blockquote>\n<p>cars = {‘BMW’: 8.5, ‘BENS’: 8.3, ‘AUDI’: 7.9}<br>for key in cars.keys():<br>    print(key)<br>遍历字典中的值:  </p>\n<p>cars = {‘BMW’: 8.5, ‘BENS’: 8.3, ‘AUDI’: 7.9}<br>for value in cars.values():<br>    print(value)<br>遍历字典中的键值对:  </p>\n<p>cars = {‘BMW’: 8.5, ‘BENS’: 8.3, ‘AUDI’: 7.9}<br>for key,value in cars.items():<br>    print(key,value)  </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>测试输入：  </p></blockquote>\n<p>张三<br>90<br>80<br>85<br>90<br>预测输出：  </p>\n<p>姓名 张三<br>语文 90<br>英语 80<br>数学 85<br>体育 90<br>总分 345  </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"># 创建并初始化score_dict字典\nscore_list&#x3D;[&#39;姓名&#39;,&#39;语文&#39;,&#39;英语&#39;,&#39;数学&#39;,&#39;体育&#39;]\n# 请按下面的注释提示添加代码，完成相应功能\n#1.根据上面的列表创建score_dict字典并初始化，得到如任务描述中的字典，字典中的值从键盘输入\n###### Begin ######\ndict&#x3D;&#123;&#125;\nfor i in score_list:\n    m&#x3D;input()\n    dict[i]&#x3D;m\n#######  End #######\n\n\n# 请按下面的注释提示添加代码，完成相应功能\n#2.请在此添加代码，计算张三同学的总分，并将总分作为新的键值对加入，最后输出score_dict的所有键值对\n###### Begin ######\nsum&#x3D;0\nfor value in dict.values():\n    if value.isdigit():\n        sum&#x3D;sum+int(value)\ndict[&#39;总分&#39;]&#x3D;sum\n\n\n\nfor key,value in dict.items():  \n    print(key,value)  \n#######  End #######</code></pre>\n<h3 id=\"字典和列表的嵌套\"><a href=\"#字典和列表的嵌套\" class=\"headerlink\" title=\"字典和列表的嵌套\"></a>字典和列表的嵌套</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>本关任务：编写程序实现一个包含列表的字典和包含字典的列表，形式分别如下：  </p></blockquote>\n<p>{‘语文’: [85, 70], ‘英语’: [85, 95], ‘数学’: [80, 90]}<br>[{‘语文’: 85, ‘英语’: 85, ‘数学’: 80}, {‘语文’: 70, ‘英语’: 95, ‘数学’: 90}]  </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>列表嵌套字典<br>employee_dict1 = {‘name’:’david’, ‘dept’:’ops’, ‘salary’: 12000}<br>employee_dict2 = {‘name’:’brain’ , ‘dept’: ‘auto’ , ‘salary’: 13000}<br>employee_list=[employee_dict1,employee_dict2]<br>字典嵌套列表<br>employee_dict = {‘name’:[‘david’,’brain’] , ‘dept’:[‘ops’, ‘auto’] , ‘salary’: [12000,13000]} </p>\n<p>根据提示，在右侧编辑器补充代码，执行以下操作：<br>1.创建一个字典score_dict，里面包含三个列表，输出<br>2.创建一个列表score_list，里面包含两个字典，输出</p></blockquote>\n<p>测试说明<br>平台会对你编写的代码进行测试：</p>\n<p>测试输入：  </p>\n<p>语文<br>85<br>70<br>英语<br>85<br>95<br>数学<br>80<br>90<br>语文<br>85<br>英语<br>85<br>数学<br>80<br>语文<br>70<br>英语<br>95<br>数学<br>90<br>预期输出：  </p>\n<p>{‘语文’: [85, 70], ‘英语’: [85, 95], ‘数学’: [80, 90]}<br>[{‘语文’: 85, ‘英语’: 85, ‘数学’: 80}, {‘语文’: 70, ‘英语’: 95, ‘数学’: 90}]  </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#创建空列表score_dict\nscore_dict&#x3D;&#123;&#125;\n#每次循环生成一个键值对\nfor i in range(3):\n    #输入课程名作为字典的键\n    key&#x3D;input()\n    # 创建空列表\n    value_list&#x3D;[] \n    # 请按下面的注释提示添加代码，完成相应功能\n    #1.从键盘输入两个分数，保存到列表中\n    ###### Begin ######       \n    m&#x3D;eval(input())\n    value_list.append(m)\n    n&#x3D;eval(input())\n    value_list.append(n)\n\n    #######  End #######\n    score_dict[key]&#x3D;value_list\n    \nprint(score_dict)    \n\n#创建空列表score_list\nscore_list&#x3D;[]\n#每次循环生成一个字典\n\nfor i in range(2):\n    # 创建空字典\n    s_dict&#x3D;&#123;&#125;\n    # 请按下面的注释提示添加代码，完成相应功能\n    #2.对从键盘输入三门课程及成绩，保存到字典中\n    ###### Begin ######\n    for i in range(3):\n        key&#x3D;input()\n        value&#x3D;eval(input())\n        s_dict[key]&#x3D;value\n\n    #######  End #######\n    score_list.append(s_dict)</code></pre>\n","text":"写在前面学校python课实训平台的oj太敏感辣，少一个空格都会报错——面向答案编程。为纪念在python实践课上花费的不多但受苦的经历，特将代码保存于博客上。宁愿刷leetcode也不愿意跑python代码 2.1 表达式和基本输入输出2.1.1 数据输入与输出 任务描述本关任...","link":"","photos":[],"count_time":{"symbolsCount":"43k","symbolsTime":"39 mins."},"categories":[],"tags":[{"name":"python","slug":"python","count":9,"path":"api/tags/python.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2\"><span class=\"toc-text\">写在前面</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E5%9F%BA%E6%9C%AC%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">2.1 表达式和基本输入输出</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-1-%E6%95%B0%E6%8D%AE%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">2.1.1 数据输入与输出</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-2-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">2.1.2  表达式的计算问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-3%E7%AE%80%E5%8D%95%E8%AE%A1%E7%AE%97%E9%97%AE%E9%A2%98%E7%9A%84%E6%B1%82%E8%A7%A3\"><span class=\"toc-text\">2.1.3简单计算问题的求解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-4-%E9%A1%BA%E5%BA%8F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">2.1.4 顺序程序设计</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3-%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">2.3 分支结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-1-%E5%88%A4%E6%96%AD%E4%B8%89%E8%A7%92%E5%BD%A2%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2.3.1 判断三角形类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-2-%E5%88%86%E6%AE%B5%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">2.3.2 分段函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-3-%E9%98%B6%E6%A2%AF%E7%94%B5%E4%BB%B7%E8%AE%A1%E7%AE%97%E7%94%B5%E8%B4%B9\"><span class=\"toc-text\">2.3.3 阶梯电价计算电费</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-4-%E9%98%B6%E6%A2%AF%E6%B0%B4%E4%BB%B7%E8%AE%A1%E7%AE%97%E6%B0%B4%E8%B4%B9\"><span class=\"toc-text\">2.3.4 阶梯水价计算水费</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3-5-%E6%89%8B%E6%9C%BA%E8%AF%9D%E8%B4%B9%E8%AE%A1%E7%AE%97\"><span class=\"toc-text\">2.3.5 手机话费计算</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-6-%E8%A1%80%E5%8E%8B%E5%88%A4%E6%96%AD\"><span class=\"toc-text\">2.3.6 血压判断</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-7-%E5%85%9A%E8%B4%B9%E8%AE%A1%E7%AE%97\"><span class=\"toc-text\">2.3.7  党费计算</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-8-%E5%91%A8%E8%96%AA%E8%AE%A1%E7%AE%97\"><span class=\"toc-text\">2.3.8 周薪计算</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4-For%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">2.4 For循环</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-1-%E8%BE%93%E5%87%BA%E7%BB%99%E5%AE%9A%E8%8C%83%E5%9B%B4%E5%86%85%E7%9A%84%E6%89%80%E6%9C%89%E7%B4%A0%E6%95%B0\"><span class=\"toc-text\">2.4.1 输出给定范围内的所有素数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-2-%E6%B1%82%E8%A1%A8%E8%BE%BE%E5%BC%8Fn%E9%A1%B9%E4%B9%8B%E5%92%8C\"><span class=\"toc-text\">2.4.2 求表达式n项之和</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-3-n%E4%B8%AA%E9%92%B1%E4%B9%B0n%E5%8F%AA%E9%B8%A1%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">2.4.3 n个钱买n只鸡的问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-4-%E5%89%A9%E4%BD%99%E6%9D%90%E6%96%99%E6%9C%80%E7%9F%AD\"><span class=\"toc-text\">2.4.4  剩余材料最短</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-5-%E6%89%93%E5%8D%B0%E5%9B%BE%E5%BD%A2\"><span class=\"toc-text\">2.4.5 打印图形</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-6-%E5%88%A4%E6%96%AD%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7%E7%A0%81%E6%98%AF%E5%90%A6%E6%9C%89%E6%95%88\"><span class=\"toc-text\">2.4.6  判断身份证号码是否有效</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4%E5%BE%AA%E7%8E%AF%EF%BC%88%E7%BB%BC%E5%90%88%EF%BC%89\"><span class=\"toc-text\">2.4循环（综合）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84-while%E4%B8%8Efor%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">循环结构-while与for循环</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97-%E7%89%B9%E6%AE%8A%E5%9B%BE%E5%BD%A2%E7%9A%84%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">循环嵌套-特殊图形的输出</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E7%BB%BC%E5%90%88-%E5%A4%A9%E5%A4%A9%E5%90%91%E4%B8%8A%E7%9A%84%E5%8A%9B%E9%87%8F\"><span class=\"toc-text\">循环综合-天天向上的力量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E7%BB%BC%E5%90%88-%E6%95%B0%E5%88%97%E4%B8%8E%E7%89%B9%E6%AE%8A%E6%95%B0%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">循环综合-数列与特殊数问题</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-5%E5%88%97%E8%A1%A8%E8%BF%9B%E9%98%B6\"><span class=\"toc-text\">2.5列表进阶</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%97%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5\"><span class=\"toc-text\">列表的增删改查</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%97%E8%A1%A8%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BB%9F%E8%AE%A1%E4%B8%8E%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">列表数据的统计与排序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%97%E8%A1%A8%E7%B4%A2%E5%BC%95%E5%88%87%E7%89%87\"><span class=\"toc-text\">列表索引切片</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B5%8C%E5%A5%97%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">嵌套列表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%97%E8%A1%A8%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">列表综合应用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-5%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%9B%E9%98%B6%EF%BC%88%E7%90%86%EF%BC%89\"><span class=\"toc-text\">2.5字符串进阶（理）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%9F%E8%AE%A1%E5%AD%97%E6%95%B0\"><span class=\"toc-text\">统计字数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9F%A5%E6%89%BE%E6%9B%BF%E6%8D%A2\"><span class=\"toc-text\">字符串的查找替换</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%9F%E8%AE%A1%E5%AD%97%E9%A2%91\"><span class=\"toc-text\">统计字频</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%87%E5%AD%97%E5%AF%B9%E9%BD%90\"><span class=\"toc-text\">文字对齐</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-6%E5%AD%97%E5%85%B8\"><span class=\"toc-text\">2.6字典</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E5%85%B8%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">字典的创建和基本操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E5%85%B8%E7%9A%84%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">字典的遍历</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E5%85%B8%E5%92%8C%E5%88%97%E8%A1%A8%E7%9A%84%E5%B5%8C%E5%A5%97\"><span class=\"toc-text\">字典和列表的嵌套</span></a></li></ol></li></ol>","author":{"name":"Algernon","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/68c4c7d8696c482da565ab5c8ebfa2fa.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}},"mapped":true,"prev_post":{"title":"《深度学习》 笔记（一）","uid":"6e741307528ed1e909d0d5dbdbcaa4c0","slug":"深度学习1","date":"2022-11-03T13:54:49.000Z","updated":"2022-11-03T13:56:10.735Z","comments":true,"path":"api/articles/深度学习1.json","keywords":null,"cover":null,"text":"深度学习的另一个最大大成就是其在强化学习领域的扩展。在强化学习中，一个自主的智能体必须在没有人类操作者指导的情况下，通过试错来完成任务。 第一部分 应用数学与机器学习基础线性代数范数在机器学习中，我们经常使用被称为范数的函数衡量向量大小。p=2时，$L^2$范数被称为欧几里得范数...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"深度学习","slug":"深度学习","count":9,"path":"api/tags/深度学习.json"}],"author":{"name":"Algernon","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/68c4c7d8696c482da565ab5c8ebfa2fa.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}}},"next_post":{"title":"MCM 算法整理","uid":"98617a616f5da740d44c6fdef4281028","slug":"mcm算法","date":"2022-11-03T13:51:49.000Z","updated":"2022-11-08T15:13:58.013Z","comments":true,"path":"api/articles/mcm算法.json","keywords":null,"cover":null,"text":"算法基础分治法许多有用的算法在结构上是递归的：为了解决一个给定的问题，算法一次或多次递归地调用其自身以解决紧密相关的若干子问题。这些算法典型地遵循分治法的思想：将原问题分解为几个较小但类似于原问题的子问题，递归地求解这些子问题，然后再合并这些子问题的解来建立原问题的解。 随机算法...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"数模","slug":"数模","count":2,"path":"api/categories/数模.json"}],"tags":[{"name":"数模","slug":"数模","count":4,"path":"api/tags/数模.json"}],"author":{"name":"Algernon","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/68c4c7d8696c482da565ab5c8ebfa2fa.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}}}}