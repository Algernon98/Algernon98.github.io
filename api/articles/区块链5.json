{"title":"【区块链技术与应用】（五）","uid":"2fd43f509a9af98ba4a5a837c57604de","slug":"区块链5","date":"2022-11-04T13:50:49.000Z","updated":"2022-11-04T14:13:44.682Z","comments":true,"path":"api/articles/区块链5.json","keywords":null,"cover":[],"content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>这周恰逢期中，时间仓促，代码上有许多地方可以优化，但也只能留到之后的几次作业上了。<br>阅读建议：参考和链码样例为写链码前用样例试手内容，与作业相关的内容是“资产管理”之后的代码。<br>代码参考及学习资料在“参考”一栏中。<br><img src=\"https://img-blog.csdnimg.cn/641a854557514284a1e103f1bedbb850.png\" alt=\"请添加图片描述\"></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://blog.csdn.net/zekdot/article/details/120397660?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-120397660-blog-125920006.pc_relevant_3mothn_strategy_and_data_recovery&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=4\">https://blog.csdn.net/zekdot/article/details/120397660?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-120397660-blog-125920006.pc_relevant_3mothn_strategy_and_data_recovery&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=4</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_49422491/article/details/125380911\">https://blog.csdn.net/weixin_49422491/article/details/125380911</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_44676392/article/details/87938176\">https://blog.csdn.net/weixin_44676392/article/details/87938176</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_44676392/article/details/87938451\">https://blog.csdn.net/weixin_44676392/article/details/87938451</a></p></blockquote>\n<p>&gt;</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://blog.csdn.net/qq_41988893/article/details/119706443\">https://blog.csdn.net/qq_41988893/article/details/119706443</a></p></blockquote>\n<p>fabric提供了<a href=\"https://github.com/hyperledger/fabric-contract-api-go\">fabric-contract-api-go</a>和<a href=\"https://github.com/hyperledger/fabric-chaincode-go\">fabric-chaincode-go</a>两个包来编写链码， 这里以fabric-contract-api-go为例进行链码编写</p>\n<h2 id=\"链码样例\"><a href=\"#链码样例\" class=\"headerlink\" title=\"链码样例\"></a>链码样例</h2><h3 id=\"1-声明合约\"><a href=\"#1-声明合约\" class=\"headerlink\" title=\"1.声明合约\"></a>1.声明合约</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n    &quot;errors&quot;\n    &quot;fmt&quot;\n\n    &quot;github.com&#x2F;hyperledger&#x2F;fabric-contract-api-go&#x2F;contractapi&quot;\n)\n\ntype SimpleContract struct &#123;\n    contractapi.Contract\n&#125;</code></pre>\n<h3 id=\"2-编写合约函数\"><a href=\"#2-编写合约函数\" class=\"headerlink\" title=\"2.编写合约函数\"></a>2.编写合约函数</h3><p>规则：<br>1、第一个参数必须是*contractapi.TransactionContext类型<br>2、函数最多返回两个值，第二个值必须是error类型</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; 添加数据\nfunc (sc *SimpleContract) Create(ctx contractapi.TransactionContextInterface, key string, value string) error &#123;\n    existing, err :&#x3D; ctx.GetStub().GetState(key)\n\n    if err !&#x3D; nil &#123;\n        return errors.New(&quot;Unable to interact with world state&quot;)\n    &#125;\n\n    if existing !&#x3D; nil &#123;\n        return fmt.Errorf(&quot;Cannot create world state pair with key %s. Already exists&quot;, key)\n    &#125;\n\t\n    err &#x3D; ctx.GetStub().PutState(key, []byte(value))\n\n    if err !&#x3D; nil &#123;\n        return errors.New(&quot;Unable to interact with world state&quot;)\n    &#125;\n\n    return nil\n&#125;\n\n&#x2F;&#x2F; 读取数据\nfunc (sc *SimpleContract) Read(ctx contractapi.TransactionContextInterface, key string) (string, error) &#123;\n    existing, err :&#x3D; ctx.GetStub().GetState(key)\n\n    if err !&#x3D; nil &#123;\n        return &quot;&quot;, errors.New(&quot;Unable to interact with world state&quot;)\n    &#125;\n\n    if existing &#x3D;&#x3D; nil &#123;\n        return &quot;&quot;, fmt.Errorf(&quot;Cannot read world state pair with key %s. Does not exist&quot;, key)\n    &#125;\n\n    return string(existing), nil\n&#125;</code></pre>\n<h3 id=\"3-创建并启动链码\"><a href=\"#3-创建并启动链码\" class=\"headerlink\" title=\"3.创建并启动链码\"></a>3.创建并启动链码</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n    &quot;github.com&#x2F;hyperledger&#x2F;fabric-contract-api-go&#x2F;contractapi&quot;\n)\n\nfunc main() &#123;\n    simpleContract :&#x3D; new(SimpleContract)\n\n    cc, err :&#x3D; contractapi.NewChaincode(simpleContract)\n\n    if err !&#x3D; nil &#123;\n        panic(err.Error())\n    &#125;\n\n    if err :&#x3D; cc.Start(); err !&#x3D; nil &#123;\n        panic(err.Error())\n    &#125;\n&#125;</code></pre>\n<p>完整合约代码：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n    &quot;errors&quot;\n    &quot;fmt&quot;\n\n    &quot;github.com&#x2F;hyperledger&#x2F;fabric-contract-api-go&#x2F;contractapi&quot;\n)\ntype User struct &#123;\n\n&#125;\ntype SimpleContract struct &#123;\n    contractapi.Contract\n&#125;\n\n\n&#x2F;&#x2F;用户定义Struct\n\n\n&#x2F;&#x2F; 添加数据\nfunc (sc *SimpleContract) Create(ctx contractapi.TransactionContextInterface, key string, value string) error &#123;\n    existing, err :&#x3D; ctx.GetStub().GetState(key)\n\n    if err !&#x3D; nil &#123;\n        return errors.New(&quot;Unable to interact with world state&quot;)\n    &#125;\n\n    if existing !&#x3D; nil &#123;\n        return fmt.Errorf(&quot;Cannot create world state pair with key %s. Already exists&quot;, key)\n    &#125;\n\t\n    err &#x3D; ctx.GetStub().PutState(key, []byte(value))\n\n    if err !&#x3D; nil &#123;\n        return errors.New(&quot;Unable to interact with world state&quot;)\n    &#125;\n\n    return nil\n&#125;\n\n&#x2F;&#x2F; 读取数据\nfunc (sc *SimpleContract) Read(ctx contractapi.TransactionContextInterface, key string) (string, error) &#123;\n    existing, err :&#x3D; ctx.GetStub().GetState(key)\n\n    if err !&#x3D; nil &#123;\n        return &quot;&quot;, errors.New(&quot;Unable to interact with world state&quot;)\n    &#125;\n\n    if existing &#x3D;&#x3D; nil &#123;\n        return &quot;&quot;, fmt.Errorf(&quot;Cannot read world state pair with key %s. Does not exist&quot;, key)\n    &#125;\n\n    return string(existing), nil\n&#125;\n\nfunc main() &#123;\n    simpleContract :&#x3D; new(SimpleContract)\n\n    cc, err :&#x3D; contractapi.NewChaincode(simpleContract)\n\n    if err !&#x3D; nil &#123;\n        panic(err.Error())\n    &#125;\n\n    if err :&#x3D; cc.Start(); err !&#x3D; nil &#123;\n        panic(err.Error())\n    &#125;\n&#125;</code></pre>\n<p>一个简单的智能合约就编写完了。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>特别注意，这不是一个完整的链码程序，中间缺少了用户定义的struct.</p></blockquote>\n<h3 id=\"test-network网络测试\"><a href=\"#test-network网络测试\" class=\"headerlink\" title=\"test-network网络测试\"></a>test-network网络测试</h3><h4 id=\"启动fabric网络\"><a href=\"#启动fabric网络\" class=\"headerlink\" title=\"启动fabric网络\"></a>启动fabric网络</h4><ol>\n<li><p>进入fabric-sample的test-network目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ cd fabric-samples&#x2F;test-network</code></pre>\n</li>\n<li><p>运行<code>./network.sh up</code>启动网络</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">magpie@Goserver:~&#x2F;fabric-samples01&#x2F;test-network$ .&#x2F;network.sh up\nStarting nodes with CLI timeout of &#39;5&#39; tries and CLI delay of &#39;3&#39; seconds and using database &#39;leveldb&#39; with crypto from &#39;cryptogen&#39;\nLOCAL_VERSION&#x3D;2.4.6\nDOCKER_IMAGE_VERSION&#x3D;2.4.6\n&#x2F;home&#x2F;magpie&#x2F;fabric-samples01&#x2F;test-network&#x2F;..&#x2F;bin&#x2F;cryptogen\nGenerating certificates using cryptogen tool\nCreating Org1 Identities\n+ cryptogen generate --config&#x3D;.&#x2F;organizations&#x2F;cryptogen&#x2F;crypto-config-org1.yaml --output&#x3D;organizations\norg1.example.com\n+ res&#x3D;0\nCreating Org2 Identities\n+ cryptogen generate --config&#x3D;.&#x2F;organizations&#x2F;cryptogen&#x2F;crypto-config-org2.yaml --output&#x3D;organizations\norg2.example.com\n+ res&#x3D;0\nCreating Orderer Org Identities\n+ cryptogen generate --config&#x3D;.&#x2F;organizations&#x2F;cryptogen&#x2F;crypto-config-orderer.yaml --output&#x3D;organizations\n+ res&#x3D;0\nGenerating CCP files for Org1 and Org2\n&#x2F;home&#x2F;magpie&#x2F;fabric-samples01&#x2F;test-network&#x2F;..&#x2F;bin&#x2F;configtxgen\nGenerating Orderer Genesis block\n+ configtxgen -profile TwoOrgsOrdererGenesis -channelID system-channel -outputBlock .&#x2F;system-genesis-block&#x2F;genesis.block\n2022-10-16 06:15:53.999 UTC [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration\n2022-10-16 06:15:54.026 UTC [common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 002 orderer type: etcdraft\n2022-10-16 06:15:54.026 UTC [common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 003 Orderer.EtcdRaft.Options unset, setting to tick_interval:&quot;500ms&quot; election_tick:10 heartbeat_tick:1 max_inflight_blocks:5 snapshot_interval_size:16777216 \n2022-10-16 06:15:54.026 UTC [common.tools.configtxgen.localconfig] Load -&gt; INFO 004 Loaded configuration: &#x2F;home&#x2F;magpie&#x2F;fabric-samples01&#x2F;test-network&#x2F;configtx&#x2F;configtx.yaml\n2022-10-16 06:15:54.028 UTC [common.tools.configtxgen] doOutputBlock -&gt; INFO 005 Generating genesis block\n2022-10-16 06:15:54.028 UTC [common.tools.configtxgen] doOutputBlock -&gt; INFO 006 Writing genesis block\n+ res&#x3D;0\n[+] Running 7&#x2F;7\n ⠿ Volume &quot;docker_orderer.example.com&quot;     Created                            0.0s\n ⠿ Volume &quot;docker_peer0.org1.example.com&quot;  Created                            0.0s\n ⠿ Volume &quot;docker_peer0.org2.example.com&quot;  Created                            0.0s\n ⠿ Container peer0.org1.example.com        Started                            3.4s\n ⠿ Container peer0.org2.example.com        Started                            1.3s\n ⠿ Container orderer.example.com           Started                            2.3s\n ⠿ Container cli                           Started                            4.1s\nCONTAINER ID   IMAGE       COMMAND      CREATED          STATUS                PORTS                NAMES\n70d6427003ae   hyperledger&#x2F;fabric-tools:latest  &quot;&#x2F;bin&#x2F;bash&quot;  4 seconds ago    Up Less than a second   cli\n0f2f91968493   hyperledger&#x2F;fabric-peer:latest      &quot;peer node start&quot;        4 seconds ago    Up 3 seconds                0.0.0.0:9051-&gt;9051&#x2F;tcp, :::9051-&gt;9051&#x2F;tcp, 7051&#x2F;tcp, 0.0.0.0:9445-&gt;9445&#x2F;tcp, :::9445-&gt;9445&#x2F;tcp   peer0.org2.example.com\n615cea63009c   hyperledger&#x2F;fabric-orderer:latest   &quot;orderer&quot;                4 seconds ago    Up 2 seconds                0.0.0.0:7050-&gt;7050&#x2F;tcp, :::7050-&gt;7050&#x2F;tcp, 0.0.0.0:9443-&gt;9443&#x2F;tcp, :::9443-&gt;9443&#x2F;tcp             orderer.example.com\n1db85f663965   hyperledger&#x2F;fabric-peer:latest      &quot;peer node start&quot;        4 seconds ago    Up 1 second                 0.0.0.0:7051-&gt;7051&#x2F;tcp, :::7051-&gt;7051&#x2F;tcp, 0.0.0.0:9444-&gt;9444&#x2F;tcp, :::9444-&gt;9444&#x2F;tcp             peer0.org1.example.com\nd10bd7ff864d   hyperledger&#x2F;explorer:latest         &quot;docker-entrypoint.s…&quot;   34 minutes ago   Exited (1) 33 minutes ago                                                                                                    explorer.mynetwork.com\n2ad7a1e8464e   hyperledger&#x2F;explorer-db:latest      &quot;docker-entrypoint.s…&quot;   34 minutes ago   Up 34 minutes (healthy)     5432&#x2F;tcp                                                                                         explorerdb.mynetwork.com\nefd328836573   portainer&#x2F;portainer-ce              &quot;&#x2F;portainer&quot;             3 days ago       Up About an hour            0.0.0.0:8000-&gt;8000&#x2F;tcp, :::8000-&gt;8000&#x2F;tcp, 0.0.0.0:9000-&gt;9000&#x2F;tcp, :::9000-&gt;9000&#x2F;tcp, 9443&#x2F;tcp   portainer</code></pre>\n<p>最终出现以上输出日志则表示网络启动成功，每个加入Fabric网络的Node和User都需要隶属于某个组织，以上网络中包含了两个平行组织—peer0.org1.example.com<code>和</code>peer0.org2.example.com<code>，它还包括一个作为ordering service维护网络的</code>orderer.example.com`。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/aa64b92384b4478a8bb8f1d85bfe30f7.png\" alt=\"请添加图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/33e9e24720324cd38f30d1ebcf475d58.png\" alt=\"请添加图片描述\"></p>\n<h4 id=\"创建channel\"><a href=\"#创建channel\" class=\"headerlink\" title=\"创建channel\"></a>创建channel</h4><p>上节已经在机器上运行了peer节点和orderer节点，现在可以使用network.sh为Org1和Org2之间创建channel。channel是特定网络成员之间的私有通道，只能被属于该通道的组织使用，并且对网络的其他成员是不可见的。每个channel都有一个单独的区块链账本，属于该通道的组织可以让其下peer加入该通道，以让peer能够存储channel上的帐本并验证账本上的交易。<br>使用以下命令创建自定义通道testchannel：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ .&#x2F;network.sh createChannel -c testchannel</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/37d576eed37d4e38893ec9c17f6e1675.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/63e23ba971b549928dc5cfa150009a14.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"部署chaincode\"><a href=\"#部署chaincode\" class=\"headerlink\" title=\"部署chaincode\"></a>部署chaincode</h4><p>部署链码前，建议到链码子目录下执行<strong>go mod tidy</strong>，检查链码调用的包存在。同时，可能需要<strong>sudo apt install jq</strong>。创建通道后，您可以开始使用智能合约与通道账本交互。智能合约包含管理区块链账本上资产的业务逻辑，由成员运行的应用程序网络可以在账本上调用智能合约创建，更改和转让这些资产。可以通过<code>./network.sh deployCC</code>命令部署智能合约，但本过程可能会出现很多问题。使用以下命令部署chaincode：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ .&#x2F;network.sh deployCC -c testchannel -ccn basic -ccp ..&#x2F;asset-transfer-basic&#x2F;chaincode-go -ccl go</code></pre>\n<p>此命令执行后可能会出现错误：<code>scripts/deployCC.sh: line 114: log.txt: Permission denied</code>，很明显这是权限不足所致，加上sudo试试：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$sudo .&#x2F;network.sh deployCC -c testchannel -ccn basic -ccp ..&#x2F;asset-transfer-basic&#x2F;chaincode-go -ccl go</code></pre>\n<h2 id=\"chaincode\"><a href=\"#chaincode\" class=\"headerlink\" title=\"chaincode\"></a>chaincode</h2><h3 id=\"code1\"><a href=\"#code1\" class=\"headerlink\" title=\"code1\"></a>code1</h3><pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">package main\n \nimport (\n  &quot;encoding&#x2F;json&quot;\n  &quot;fmt&quot;\n  &quot;log&quot;\n \n  &quot;github.com&#x2F;hyperledger&#x2F;fabric-contract-api-go&#x2F;contractapi&quot;\n)\n \n&#x2F;&#x2F; SmartContract provides functions for managing an Asset\ntype SmartContract struct &#123;\n  contractapi.Contract\n&#125;\n \n&#x2F;&#x2F; Asset describes basic details of what makes up a simple asset\ntype Asset struct &#123;\n  ID             string &#96;json:&quot;ID&quot;&#96;\n  Color          string &#96;json:&quot;color&quot;&#96;\n  Size           int    &#96;json:&quot;size&quot;&#96;\n  Owner          string &#96;json:&quot;owner&quot;&#96;\n  AppraisedValue int    &#96;json:&quot;appraisedValue&quot;&#96;\n&#125;\n \n&#x2F;&#x2F; InitLedger adds a base set of assets to the ledger\nfunc (s *SmartContract) InitLedger(ctx contractapi.TransactionContextInterface) error &#123;\n  assets :&#x3D; []Asset&#123;\n    &#123;ID: &quot;asset1&quot;, Color: &quot;blue&quot;, Size: 5, Owner: &quot;cuteAlgernon&quot;, AppraisedValue: 300&#125;,\n    &#123;ID: &quot;asset2&quot;, Color: &quot;red&quot;, Size: 5, Owner: &quot;Biosheep&quot;, AppraisedValue: 1000&#125;,\n    &#123;ID: &quot;asset3&quot;, Color: &quot;green&quot;, Size: 10, Owner: &quot;Jin Soo&quot;, AppraisedValue: 500&#125;,\n    &#123;ID: &quot;asset4&quot;, Color: &quot;yellow&quot;, Size: 10, Owner: &quot;Max&quot;, AppraisedValue: 600&#125;,\n    &#123;ID: &quot;asset5&quot;, Color: &quot;black&quot;, Size: 15, Owner: &quot;Adriana&quot;, AppraisedValue: 700&#125;,\n    &#123;ID: &quot;asset6&quot;, Color: &quot;white&quot;, Size: 15, Owner: &quot;Michel&quot;, AppraisedValue: 800&#125;,\n  &#125;\n \n  for _, asset :&#x3D; range assets &#123;\n    assetJSON, err :&#x3D; json.Marshal(asset)\n    if err !&#x3D; nil &#123;\n      return err\n    &#125;\n \n    err &#x3D; ctx.GetStub().PutState(asset.ID, assetJSON)\n    if err !&#x3D; nil &#123;\n      return fmt.Errorf(&quot;failed to put to world state. %v&quot;, err)\n    &#125;\n  &#125;\n \n  return nil\n&#125;\n \n&#x2F;&#x2F; CreateAsset issues a new asset to the world state with given details.\nfunc (s *SmartContract) CreateAsset(ctx contractapi.TransactionContextInterface, id string, color string, size int, owner string, appraisedValue int) error &#123;\n  exists, err :&#x3D; s.AssetExists(ctx, id)\n  if err !&#x3D; nil &#123;\n    return err\n  &#125;\n  if exists &#123;\n    return fmt.Errorf(&quot;the asset %s already exists&quot;, id)\n  &#125;\n \n  asset :&#x3D; Asset&#123;\n    ID:             id,\n    Color:          color,\n    Size:           size,\n    Owner:          owner,\n    AppraisedValue: appraisedValue,\n  &#125;\n  assetJSON, err :&#x3D; json.Marshal(asset)\n  if err !&#x3D; nil &#123;\n    return err\n  &#125;\n \n  return ctx.GetStub().PutState(id, assetJSON)\n&#125;\n \n&#x2F;&#x2F; ReadAsset returns the asset stored in the world state with given id.\nfunc (s *SmartContract) ReadAsset(ctx contractapi.TransactionContextInterface, id string) (*Asset, error) &#123;\n  assetJSON, err :&#x3D; ctx.GetStub().GetState(id)\n  if err !&#x3D; nil &#123;\n    return nil, fmt.Errorf(&quot;failed to read from world state: %v&quot;, err)\n  &#125;\n  if assetJSON &#x3D;&#x3D; nil &#123;\n    return nil, fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n  &#125;\n \n  var asset Asset\n  err &#x3D; json.Unmarshal(assetJSON, &amp;asset)\n  if err !&#x3D; nil &#123;\n    return nil, err\n  &#125;\n \n  return &amp;asset, nil\n&#125;\n \n&#x2F;&#x2F; UpdateAsset updates an existing asset in the world state with provided parameters.\nfunc (s *SmartContract) UpdateAsset(ctx contractapi.TransactionContextInterface, id string, color string, size int, owner string, appraisedValue int) error &#123;\n  exists, err :&#x3D; s.AssetExists(ctx, id)\n  if err !&#x3D; nil &#123;\n    return err\n  &#125;\n  if !exists &#123;\n    return fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n  &#125;\n \n  &#x2F;&#x2F; overwriting original asset with new asset\n  asset :&#x3D; Asset&#123;\n    ID:             id,\n    Color:          color,\n    Size:           size,\n    Owner:          owner,\n    AppraisedValue: appraisedValue,\n  &#125;\n  assetJSON, err :&#x3D; json.Marshal(asset)\n  if err !&#x3D; nil &#123;\n    return err\n  &#125;\n \n  return ctx.GetStub().PutState(id, assetJSON)\n&#125;\n \n&#x2F;&#x2F; DeleteAsset deletes an given asset from the world state.\nfunc (s *SmartContract) DeleteAsset(ctx contractapi.TransactionContextInterface, id string) error &#123;\n  exists, err :&#x3D; s.AssetExists(ctx, id)\n  if err !&#x3D; nil &#123;\n    return err\n  &#125;\n  if !exists &#123;\n    return fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n  &#125;\n \n  return ctx.GetStub().DelState(id)\n&#125;\n \n&#x2F;&#x2F; AssetExists returns true when asset with given ID exists in world state\nfunc (s *SmartContract) AssetExists(ctx contractapi.TransactionContextInterface, id string) (bool, error) &#123;\n  assetJSON, err :&#x3D; ctx.GetStub().GetState(id)\n  if err !&#x3D; nil &#123;\n    return false, fmt.Errorf(&quot;failed to read from world state: %v&quot;, err)\n  &#125;\n \n  return assetJSON !&#x3D; nil, nil\n&#125;\n \n&#x2F;&#x2F; TransferAsset updates the owner field of asset with given id in world state.\nfunc (s *SmartContract) TransferAsset(ctx contractapi.TransactionContextInterface, id string, newOwner string) error &#123;\n  asset, err :&#x3D; s.ReadAsset(ctx, id)\n  if err !&#x3D; nil &#123;\n    return err\n  &#125;\n \n  asset.Owner &#x3D; newOwner\n  assetJSON, err :&#x3D; json.Marshal(asset)\n  if err !&#x3D; nil &#123;\n    return err\n  &#125;\n \n  return ctx.GetStub().PutState(id, assetJSON)\n&#125;\n \n&#x2F;&#x2F; GetAllAssets returns all assets found in world state\nfunc (s *SmartContract) GetAllAssets(ctx contractapi.TransactionContextInterface) ([]*Asset, error) &#123;\n  &#x2F;&#x2F; range query with empty string for startKey and endKey does an\n  &#x2F;&#x2F; open-ended query of all assets in the chaincode namespace.\n  resultsIterator, err :&#x3D; ctx.GetStub().GetStateByRange(&quot;&quot;, &quot;&quot;)\n  if err !&#x3D; nil &#123;\n    return nil, err\n  &#125;\n  defer resultsIterator.Close()\n \n  var assets []*Asset\n  for resultsIterator.HasNext() &#123;\n    queryResponse, err :&#x3D; resultsIterator.Next()\n    if err !&#x3D; nil &#123;\n      return nil, err\n    &#125;\n \n    var asset Asset\n    err &#x3D; json.Unmarshal(queryResponse.Value, &amp;asset)\n    if err !&#x3D; nil &#123;\n      return nil, err\n    &#125;\n    assets &#x3D; append(assets, &amp;asset)\n  &#125;\n \n  return assets, nil\n&#125;\n \nfunc main() &#123;\n  assetChaincode, err :&#x3D; contractapi.NewChaincode(&amp;SmartContract&#123;&#125;)\n  if err !&#x3D; nil &#123;\n    log.Panicf(&quot;Error creating asset-transfer-basic chaincode: %v&quot;, err)\n  &#125;\n \n  if err :&#x3D; assetChaincode.Start(); err !&#x3D; nil &#123;\n    log.Panicf(&quot;Error starting asset-transfer-basic chaincode: %v&quot;, err)\n  &#125;\n&#125;</code></pre>\n<h3 id=\"code2-1资产管理\"><a href=\"#code2-1资产管理\" class=\"headerlink\" title=\"code2-1资产管理\"></a>code2-1资产管理</h3><pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">package atcc\n&#x2F;&#x2F; 导入必要的依赖\nimport (\n  &quot;fmt&quot;\n  &quot;encoding&#x2F;json&quot;\n  &quot;github.com&#x2F;hyperledger&#x2F;fabric-contract-api-go&#x2F;contractapi&quot;\n)\n\ntype SmartContract struct &#123;\n  contractapi.Contract\n&#125;\n&#x2F;&#x2F; 定义资产的数据结构，并使用注解的方式来辅助序列化，marshal函数会使用字母序对key进行排序，这样可以\n&#x2F;&#x2F; 保证其序列化之后具有唯一性，即不会出现导出的json字符串中ID字段在Color字段前面这种情况，\n&#x2F;&#x2F; 这样做的主要原因是为了保证输入输出的唯一性，防止背书验证的时候失败。\ntype Asset struct &#123;\n  AppraisedValue int    &#96;json:&quot;AppraisedValue&quot;&#96;\n  Color          string &#96;json:&quot;Color&quot;&#96;\n  ID             string &#96;json:&quot;ID&quot;&#96;\n  Owner          string &#96;json:&quot;Owner&quot;&#96;\n  Size           int    &#96;json:&quot;Size&quot;&#96;\n&#125;\n&#x2F;&#x2F; 使用数据对链码进行初始化。\nfunc (s *SmartContract) InitLedger(ctx contractapi.TransactionContextInterface) error &#123;\n  assets :&#x3D; []Asset&#123;\n    &#123;ID: &quot;asset1&quot;, Color: &quot;blue&quot;, Size: 5, Owner: &quot;Tomoko&quot;, AppraisedValue: 300&#125;,\n    &#123;ID: &quot;asset2&quot;, Color: &quot;red&quot;, Size: 5, Owner: &quot;Brad&quot;, AppraisedValue: 400&#125;,\n    &#123;ID: &quot;asset3&quot;, Color: &quot;green&quot;, Size: 10, Owner: &quot;Jin Soo&quot;, AppraisedValue: 500&#125;,\n    &#123;ID: &quot;asset4&quot;, Color: &quot;yellow&quot;, Size: 10, Owner: &quot;Max&quot;, AppraisedValue: 600&#125;,\n    &#123;ID: &quot;asset5&quot;, Color: &quot;black&quot;, Size: 15, Owner: &quot;Adriana&quot;, AppraisedValue: 700&#125;,\n    &#123;ID: &quot;asset6&quot;, Color: &quot;white&quot;, Size: 15, Owner: &quot;Michel&quot;, AppraisedValue: 800&#125;,\n  &#125;\n  for _, asset :&#x3D; range assets &#123;\n    &#x2F;&#x2F; 序列化资产\n    assetJSON, err :&#x3D; json.Marshal(asset)\n    if err !&#x3D; nil &#123;\n        return err\n    &#125;\n    &#x2F;&#x2F; 按照id存储序列化后的资产\n    err &#x3D; ctx.GetStub().PutState(asset.ID, assetJSON)\n    if err !&#x3D; nil &#123;\n        return fmt.Errorf(&quot;failed to put to world state. %v&quot;, err)\n    &#125;\n  &#125;\n  return nil\n&#125;\n&#x2F;&#x2F; 通过传入参数来创建一个账本上不存在的资产，这里有在后面实现的方法AssetExists来检查是否存在某个key为id的资产。\nfunc (s *SmartContract) CreateAsset(ctx contractapi.TransactionContextInterface, id string, color string, size int, owner string, appraisedValue int) error &#123;\n  exists, err :&#x3D; s.AssetExists(ctx, id)\n  if err !&#x3D; nil &#123;\n    return err\n  &#125;\n  if exists &#123;\n    return fmt.Errorf(&quot;the asset %s already exists&quot;, id)\n  &#125;\n  asset :&#x3D; Asset&#123;\n    ID:             id,\n    Color:          color,\n    Size:           size,\n    Owner:          owner,\n    AppraisedValue: appraisedValue,\n  &#125;\n  assetJSON, err :&#x3D; json.Marshal(asset)\n  if err !&#x3D; nil &#123;\n    return err\n  &#125;\n  return ctx.GetStub().PutState(id, assetJSON)\n&#125;\n&#x2F;&#x2F; 从账本中读取资产，调用GetState来实现\nfunc (s *SmartContract) ReadAsset(ctx contractapi.TransactionContextInterface, id string) (*Asset, error) &#123;\n  assetJSON, err :&#x3D; ctx.GetStub().GetState(id)\n  if err !&#x3D; nil &#123;\n    return nil, fmt.Errorf(&quot;failed to read from world state: %v&quot;, err)\n  &#125;\n  if assetJSON &#x3D;&#x3D; nil &#123;\n    return nil, fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n  &#125;\n  var asset Asset\n  err &#x3D; json.Unmarshal(assetJSON, &amp;asset)\n  if err !&#x3D; nil &#123;\n    return nil, err\n  &#125;\n  return &amp;asset, nil\n&#125;\n&#x2F;&#x2F; 更新资产，这里实现逻辑是根据传入参数创建一个新的资产并序列化，然后覆盖原来的资产。\nfunc (s *SmartContract) UpdateAsset(ctx contractapi.TransactionContextInterface, id string, color string, size int, owner string, appraisedValue int) error &#123;\n  exists, err :&#x3D; s.AssetExists(ctx, id)\n  if err !&#x3D; nil &#123;\n    return err\n  &#125;\n  if !exists &#123;\n    return fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n  &#125;\n\n  &#x2F;&#x2F; overwriting original asset with new asset\n  asset :&#x3D; Asset&#123;\n    ID:             id,\n    Color:          color,\n    Size:           size,\n    Owner:          owner,\n    AppraisedValue: appraisedValue,\n  &#125;\n  assetJSON, err :&#x3D; json.Marshal(asset)\n  if err !&#x3D; nil &#123;\n    return err\n  &#125;\n  return ctx.GetStub().PutState(id, assetJSON)\n&#125;\n&#x2F;&#x2F; 删除资产，直接调用DelState函数来实现删除。\nfunc (s *SmartContract) DeleteAsset(ctx contractapi.TransactionContextInterface, id string) error &#123;\n  exists, err :&#x3D; s.AssetExists(ctx, id)\n  if err !&#x3D; nil &#123;\n    return err\n  &#125;\n  if !exists &#123;\n    return fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n  &#125;\n  return ctx.GetStub().DelState(id)\n&#125;\n&#x2F;&#x2F; 检查id对应的资产是否存在，判断能不能读取出value即可。\nfunc (s *SmartContract) AssetExists(ctx contractapi.TransactionContextInterface, id string) (bool, error) &#123;\n  assetJSON, err :&#x3D; ctx.GetStub().GetState(id)\n  if err !&#x3D; nil &#123;\n    return false, fmt.Errorf(&quot;failed to read from world state: %v&quot;, err)\n  &#125;\n\n  return assetJSON !&#x3D; nil, nil\n&#125;\n&#x2F;&#x2F; 资产转移，实质是修改资产结构体的owner字段。\nfunc (s *SmartContract) TransferAsset(ctx contractapi.TransactionContextInterface, id string, newOwner string) error &#123;\n  asset, err :&#x3D; s.ReadAsset(ctx, id)\n  if err !&#x3D; nil &#123;\n    return err\n  &#125;\n  asset.Owner &#x3D; newOwner\n  assetJSON, err :&#x3D; json.Marshal(asset)\n  if err !&#x3D; nil &#123;\n    return err\n  &#125;\n  return ctx.GetStub().PutState(id, assetJSON)\n&#125;\n&#x2F;&#x2F; 读取全部资产，调用GetStateByRange函数来获取账本上的全部记录。\nfunc (s *SmartContract) GetAllAssets(ctx contractapi.TransactionContextInterface) ([]*Asset, error) &#123;\n  &#x2F;&#x2F; range query with empty string for startKey and endKey does an\n  &#x2F;&#x2F; open-ended query of all assets in the chaincode namespace.\n  resultsIterator, err :&#x3D; ctx.GetStub().GetStateByRange(&quot;&quot;, &quot;&quot;)\n  if err !&#x3D; nil &#123;\n    return nil, err\n  &#125;\n  defer resultsIterator.Close()\n\n  var assets []*Asset\n  for resultsIterator.HasNext() &#123;\n    queryResponse, err :&#x3D; resultsIterator.Next()\n    if err !&#x3D; nil &#123;\n      return nil, err\n    &#125;\n\n    var asset Asset\n    err &#x3D; json.Unmarshal(queryResponse.Value, &amp;asset)\n    if err !&#x3D; nil &#123;\n      return nil, err\n    &#125;\n    assets &#x3D; append(assets, &amp;asset)\n  &#125;\n  return assets, nil\n&#125;\n</code></pre>\n<h3 id=\"code2-2\"><a href=\"#code2-2\" class=\"headerlink\" title=\"code2-2\"></a>code2-2</h3><p>assetsManager.go</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">package main\nimport (\n\t&quot;log&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-contract-api-go&#x2F;contractapi&quot;\n\t&quot;main&#x2F;atcc&quot;\n)\n\nfunc main() &#123;\n\tassetChaincode, err :&#x3D; contractapi.NewChaincode(&amp;atcc.SmartContract&#123;&#125;)\n\tif err !&#x3D; nil &#123;\n\t\tlog.Panicf(&quot;Error creating atcc chaincode: %v&quot;, err)\n\t&#125;\n\n\tif err :&#x3D; assetChaincode.Start(); err !&#x3D; nil &#123;\n\t\tlog.Panicf(&quot;Error starting atcc chaincode: %v&quot;, err)\n\t&#125;\n&#125;\n</code></pre>\n<p>构建链码</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">go mod tidy\ngo mod vendor\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/34cb4c4467b044d185486fb551827d3f.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"使用chaincode\"><a href=\"#使用chaincode\" class=\"headerlink\" title=\"使用chaincode\"></a>使用chaincode</h2><h3 id=\"初始化账本\"><a href=\"#初始化账本\" class=\"headerlink\" title=\"初始化账本\"></a>初始化账本</h3><pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile &quot;$ORDERER_CA&quot; -C $CHANNEL_NAME -n $&#123;CC_NAME&#125; --peerAddresses localhost:7051 --tlsRootCertFiles organizations&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles organizations&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;peers&#x2F;peer0.org2.example.com&#x2F;tls&#x2F;ca.crt --isInit -c &#39;&#123;&quot;function&quot;:&quot;InitLedger&quot;,&quot;Args&quot;:[]&#125;&#39;</code></pre>\n<h3 id=\"获取当前资产\"><a href=\"#获取当前资产\" class=\"headerlink\" title=\"获取当前资产\"></a>获取当前资产</h3><pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile &quot;$ORDERER_CA&quot; -C $CHANNEL_NAME -n $&#123;CC_NAME&#125; --peerAddresses localhost:7051 --tlsRootCertFiles organizations&#x2F;peerOrganizations&#x2F;org1.example.com&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles organizations&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;peers&#x2F;peer0.org2.example.com&#x2F;tls&#x2F;ca.crt -c &#39;&#123;&quot;function&quot;:&quot;GetAllAssets&quot;,&quot;Args&quot;:[]&#125;&#39;\n</code></pre>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>随着实验次数的增多，肉眼可见的是文件夹越来越混乱——比如这次的网络，需要在前几次实验中找到内容，而每次实验都涉及到文件创建、下载、删除，有时哪怕一次实验，都会鼓捣出很多奇奇怪怪的文件夹，有时会出现这样一种状况：我知道网络是通的，但不知道是那个文件能够跑通，毕竟，如果按照教程顺利过关，是对具体内容没有深刻印象的，直到需要再次使用的时候。</p>\n<p>链码编写（改写）难度不算特别大，但如果 涉及到网络上跑通，再加之账本的增删改查，如果找不到之前实验的基础内容，无异于再做一次。</p>\n","text":"引言这周恰逢期中，时间仓促，代码上有许多地方可以优化，但也只能留到之后的几次作业上了。阅读建议：参考和链码样例为写链码前用样例试手内容，与作业相关的内容是“资产管理”之后的代码。代码参考及学习资料在“参考”一栏中。 参考 https://blog.csdn.net/zekdot/...","link":"","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"23 mins."},"categories":[],"tags":[{"name":"区块链","slug":"区块链","count":10,"path":"api/tags/区块链.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%95%E8%A8%80\"><span class=\"toc-text\">引言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%93%BE%E7%A0%81%E6%A0%B7%E4%BE%8B\"><span class=\"toc-text\">链码样例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%A3%B0%E6%98%8E%E5%90%88%E7%BA%A6\"><span class=\"toc-text\">1.声明合约</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E7%BC%96%E5%86%99%E5%90%88%E7%BA%A6%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">2.编写合约函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%88%9B%E5%BB%BA%E5%B9%B6%E5%90%AF%E5%8A%A8%E9%93%BE%E7%A0%81\"><span class=\"toc-text\">3.创建并启动链码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#test-network%E7%BD%91%E7%BB%9C%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">test-network网络测试</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8fabric%E7%BD%91%E7%BB%9C\"><span class=\"toc-text\">启动fabric网络</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAchannel\"><span class=\"toc-text\">创建channel</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%83%A8%E7%BD%B2chaincode\"><span class=\"toc-text\">部署chaincode</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#chaincode\"><span class=\"toc-text\">chaincode</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#code1\"><span class=\"toc-text\">code1</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#code2-1%E8%B5%84%E4%BA%A7%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">code2-1资产管理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#code2-2\"><span class=\"toc-text\">code2-2</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8chaincode\"><span class=\"toc-text\">使用chaincode</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96%E8%B4%A6%E6%9C%AC\"><span class=\"toc-text\">初始化账本</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E8%B5%84%E4%BA%A7\"><span class=\"toc-text\">获取当前资产</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"Algernon","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/68c4c7d8696c482da565ab5c8ebfa2fa.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}},"mapped":true,"prev_post":{"title":"【数据库系统概论】实训（一）","uid":"92f6b64b2c628f28d0dacf2b7d568ea8","slug":"数据库1","date":"2022-11-05T02:49:49.000Z","updated":"2022-11-05T02:20:27.351Z","comments":true,"path":"api/articles/数据库1.json","keywords":null,"cover":[],"text":"数据库实训1不加主键和外键的前提下创建表 https://blog.csdn.net/weixin_41542329/article/details/79001240?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm...","link":"","photos":[],"count_time":{"symbolsCount":"8.8k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"数据库","slug":"数据库","count":8,"path":"api/tags/数据库.json"}],"author":{"name":"Algernon","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/68c4c7d8696c482da565ab5c8ebfa2fa.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}}},"next_post":{"title":"python期中作业","uid":"cf9a9d5a0eee25995f5e4d33651f0d31","slug":"python期中作业","date":"2022-11-03T15:15:49.000Z","updated":"2022-11-03T15:08:13.862Z","comments":true,"path":"api/articles/python期中作业.json","keywords":null,"cover":[],"text":"PYTHON程序设计期中作业@[toc] 题目要求代码及截图请参考终版 初版设计了计算出勤率、总成绩和平均分的代码 #fo&#x3D;open(&quot;D:\\\\coder\\\\randomnumbers\\\\成绩表 - 副本.csv&quot;,&quot;r&quot;,enc...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[],"tags":[{"name":"信管","slug":"信管","count":5,"path":"api/tags/信管.json"}],"author":{"name":"Algernon","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/68c4c7d8696c482da565ab5c8ebfa2fa.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}}}}