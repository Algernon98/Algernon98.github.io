{"title":"【区块链技术与应用】（七）","uid":"cb8a81edf7e7c09fe49113ae9ef768ab","slug":"区块链7","date":"2022-11-17T08:12:49.000Z","updated":"2022-11-17T09:06:35.726Z","comments":true,"path":"api/articles/区块链7.json","keywords":null,"cover":[],"content":"<h2 id=\"资料来源\"><a href=\"#资料来源\" class=\"headerlink\" title=\"资料来源\"></a><strong>资料来源</strong></h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://pkg.go.dev/github.com/hyperledger/fabric-sdk-go#section-readme\">https://pkg.go.dev/github.com/hyperledger/fabric-sdk-go#section-readme</a></p>\n<p><a href=\"https://github.com/hyperledger/fabric-sdk-go\">https://github.com/hyperledger/fabric-sdk-go</a><br><a href=\"https://wiki.hyperledger.org/display/fabric\">https://wiki.hyperledger.org/display/fabric</a><br><a href=\"https://github.com/hyperledger/fabric-samples\">https://github.com/hyperledger/fabric-samples</a></p>\n<h2 id=\"书接上回，补充getway链码分析\"><a href=\"#书接上回，补充getway链码分析\" class=\"headerlink\" title=\"书接上回，补充getway链码分析\"></a>书接上回，补充getway链码分析</h2><h3 id=\"上期代码实战\"><a href=\"#上期代码实战\" class=\"headerlink\" title=\"上期代码实战\"></a>上期代码实战</h3><p>点击<a href=\"https://algernon98.github.io/post/%E5%8C%BA%E5%9D%97%E9%93%BE6\">上次作业链接</a>，查看三种实例的运行结果<br><img src=\"https://img-blog.csdnimg.cn/b9155f5bb91a42e685335443df73125c.png\" alt=\"在这里插入图片描述\"></p></blockquote>\n<h3 id=\"asset-transfer-basic\"><a href=\"#asset-transfer-basic\" class=\"headerlink\" title=\"asset-transfer-basic\"></a>asset-transfer-basic</h3><h4 id=\"assetTransfer-go\"><a href=\"#assetTransfer-go\" class=\"headerlink\" title=\"assetTransfer.go\"></a>assetTransfer.go</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;*\nSPDX-License-Identifier: Apache-2.0\n*&#x2F;\n\npackage main\n\nimport (\n\t&quot;log&quot;\n\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-contract-api-go&#x2F;contractapi&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-samples&#x2F;asset-transfer-basic&#x2F;chaincode-go&#x2F;chaincode&quot;\n)\n\nfunc main() &#123;\n&#x2F;&#x2F;新建链码\n\tassetChaincode, err :&#x3D; contractapi.NewChaincode(&amp;chaincode.SmartContract&#123;&#125;)\n\tif err !&#x3D; nil &#123;\n\t\tlog.Panicf(&quot;Error creating asset-transfer-basic chaincode: %v&quot;, err)\n\t&#125;\n&#x2F;&#x2F;启动链码\n\tif err :&#x3D; assetChaincode.Start(); err !&#x3D; nil &#123;\n\t\tlog.Panicf(&quot;Error starting asset-transfer-basic chaincode: %v&quot;, err)\n\t&#125;\n&#125;</code></pre>\n<h4 id=\"smartcontract-go\"><a href=\"#smartcontract-go\" class=\"headerlink\" title=\"smartcontract.go\"></a>smartcontract.go</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package chaincode\n\nimport (\n\t&quot;encoding&#x2F;json&quot;\n\t&quot;fmt&quot;\n\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-contract-api-go&#x2F;contractapi&quot;\n)\n\n&#x2F;&#x2F; SmartContract provides functions for managing an Asset\n&#x2F;&#x2F;链码结构\ntype SmartContract struct &#123;\n\tcontractapi.Contract\n&#125;\n\n&#x2F;&#x2F; Asset describes basic details of what makes up a simple asset\n&#x2F;&#x2F;Insert struct field in alphabetic order &#x3D;&gt; to achieve determinism across languages\n&#x2F;&#x2F; golang keeps the order when marshal to json but doesn&#39;t order automatically\ntype Asset struct &#123;\n\tAppraisedValue int    &#96;json:&quot;AppraisedValue&quot;&#96;\n\tColor          string &#96;json:&quot;Color&quot;&#96;\n\tID             string &#96;json:&quot;ID&quot;&#96;\n\tOwner          string &#96;json:&quot;Owner&quot;&#96;\n\tSize           int    &#96;json:&quot;Size&quot;&#96;\n&#125;\n\n&#x2F;&#x2F; InitLedger adds a base set of assets to the ledger\nfunc (s *SmartContract) InitLedger(ctx contractapi.TransactionContextInterface) error &#123;\n\tassets :&#x3D; []Asset&#123;\n\t\t&#123;ID: &quot;asset1&quot;, Color: &quot;blue&quot;, Size: 5, Owner: &quot;Tomoko&quot;, AppraisedValue: 300&#125;,\n\t\t&#123;ID: &quot;asset2&quot;, Color: &quot;red&quot;, Size: 5, Owner: &quot;Brad&quot;, AppraisedValue: 400&#125;,\n\t\t&#123;ID: &quot;asset3&quot;, Color: &quot;green&quot;, Size: 10, Owner: &quot;Jin Soo&quot;, AppraisedValue: 500&#125;,\n\t\t&#123;ID: &quot;asset4&quot;, Color: &quot;yellow&quot;, Size: 10, Owner: &quot;Max&quot;, AppraisedValue: 600&#125;,\n\t\t&#123;ID: &quot;asset5&quot;, Color: &quot;black&quot;, Size: 15, Owner: &quot;Adriana&quot;, AppraisedValue: 700&#125;,\n\t\t&#123;ID: &quot;asset6&quot;, Color: &quot;white&quot;, Size: 15, Owner: &quot;Michel&quot;, AppraisedValue: 800&#125;,\n\t&#125;\n\n\tfor _, asset :&#x3D; range assets &#123;\n\t\n\t\tassetJSON, err :&#x3D; json.Marshal(asset)\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn err\n\t\t&#125;\n&#x2F;&#x2F;存放数据\n\t\terr &#x3D; ctx.GetStub().PutState(asset.ID, assetJSON)\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn fmt.Errorf(&quot;failed to put to world state. %v&quot;, err)\n\t\t&#125;\n\t&#125;\n\n\treturn nil\n&#125;\n\n&#x2F;&#x2F; CreateAsset issues a new asset to the world state with given details.\n&#x2F;&#x2F;查看代码中的创建资产函数名称及参数\nfunc (s *SmartContract) CreateAsset(ctx contractapi.TransactionContextInterface, id string, color string, size int, owner string, appraisedValue int) error &#123;\n\texists, err :&#x3D; s.AssetExists(ctx, id)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\tif exists &#123;\n\t\treturn fmt.Errorf(&quot;the asset %s already exists&quot;, id)\n\t&#125;\n\n\tasset :&#x3D; Asset&#123;\n\t\tID:             id,\n\t\tColor:          color,\n\t\tSize:           size,\n\t\tOwner:          owner,\n\t\tAppraisedValue: appraisedValue,\n\t&#125;\n\tassetJSON, err :&#x3D; json.Marshal(asset)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\n\treturn ctx.GetStub().PutState(id, assetJSON)\n&#125;\n\n&#x2F;&#x2F; ReadAsset returns the asset stored in the world state with given id.\nfunc (s *SmartContract) ReadAsset(ctx contractapi.TransactionContextInterface, id string) (*Asset, error) &#123;\n\tassetJSON, err :&#x3D; ctx.GetStub().GetState(id)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, fmt.Errorf(&quot;failed to read from world state: %v&quot;, err)\n\t&#125;\n\tif assetJSON &#x3D;&#x3D; nil &#123;\n\t\treturn nil, fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n\t&#125;\n\n\tvar asset Asset\n\terr &#x3D; json.Unmarshal(assetJSON, &amp;asset)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\n\treturn &amp;asset, nil\n&#125;\n\n&#x2F;&#x2F; UpdateAsset updates an existing asset in the world state with provided parameters.\nfunc (s *SmartContract) UpdateAsset(ctx contractapi.TransactionContextInterface, id string, color string, size int, owner string, appraisedValue int) error &#123;\n\texists, err :&#x3D; s.AssetExists(ctx, id)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\tif !exists &#123;\n\t\treturn fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n\t&#125;\n\n\t&#x2F;&#x2F; overwriting original asset with new asset\n\tasset :&#x3D; Asset&#123;\n\t\tID:             id,\n\t\tColor:          color,\n\t\tSize:           size,\n\t\tOwner:          owner,\n\t\tAppraisedValue: appraisedValue,\n\t&#125;\n\tassetJSON, err :&#x3D; json.Marshal(asset)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\n\treturn ctx.GetStub().PutState(id, assetJSON)\n&#125;\n\n&#x2F;&#x2F; DeleteAsset deletes an given asset from the world state.\nfunc (s *SmartContract) DeleteAsset(ctx contractapi.TransactionContextInterface, id string) error &#123;\n\texists, err :&#x3D; s.AssetExists(ctx, id)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\tif !exists &#123;\n\t\treturn fmt.Errorf(&quot;the asset %s does not exist&quot;, id)\n\t&#125;\n\n\treturn ctx.GetStub().DelState(id)\n&#125;\n\n&#x2F;&#x2F; AssetExists returns true when asset with given ID exists in world state\nfunc (s *SmartContract) AssetExists(ctx contractapi.TransactionContextInterface, id string) (bool, error) &#123;\n\tassetJSON, err :&#x3D; ctx.GetStub().GetState(id)\n\tif err !&#x3D; nil &#123;\n\t\treturn false, fmt.Errorf(&quot;failed to read from world state: %v&quot;, err)\n\t&#125;\n\n\treturn assetJSON !&#x3D; nil, nil\n&#125;\n\n&#x2F;&#x2F; TransferAsset updates the owner field of asset with given id in world state, and returns the old owner.\nfunc (s *SmartContract) TransferAsset(ctx contractapi.TransactionContextInterface, id string, newOwner string) (string, error) &#123;\n\tasset, err :&#x3D; s.ReadAsset(ctx, id)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, err\n\t&#125;\n\n\toldOwner :&#x3D; asset.Owner\n\tasset.Owner &#x3D; newOwner\n\n\tassetJSON, err :&#x3D; json.Marshal(asset)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, err\n\t&#125;\n\n\terr &#x3D; ctx.GetStub().PutState(id, assetJSON)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, err\n\t&#125;\n\n\treturn oldOwner, nil\n&#125;\n\n&#x2F;&#x2F; GetAllAssets returns all assets found in world state\nfunc (s *SmartContract) GetAllAssets(ctx contractapi.TransactionContextInterface) ([]*Asset, error) &#123;\n\t&#x2F;&#x2F; range query with empty string for startKey and endKey does an\n\t&#x2F;&#x2F; open-ended query of all assets in the chaincode namespace.\n\tresultsIterator, err :&#x3D; ctx.GetStub().GetStateByRange(&quot;&quot;, &quot;&quot;)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\tdefer resultsIterator.Close()\n\n\tvar assets []*Asset\n\tfor resultsIterator.HasNext() &#123;\n\t\tqueryResponse, err :&#x3D; resultsIterator.Next()\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn nil, err\n\t\t&#125;\n\n\t\tvar asset Asset\n\t\terr &#x3D; json.Unmarshal(queryResponse.Value, &amp;asset)\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn nil, err\n\t\t&#125;\n\t\tassets &#x3D; append(assets, &amp;asset)\n\t&#125;\n\n\treturn assets, nil\n&#125;</code></pre>\n<h3 id=\"asset-transfer-events\"><a href=\"#asset-transfer-events\" class=\"headerlink\" title=\"asset-transfer-events\"></a>asset-transfer-events</h3><h4 id=\"connect-go\"><a href=\"#connect-go\" class=\"headerlink\" title=\"connect.go\"></a>connect.go</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;*\nCopyright 2022 IBM All Rights Reserved.\n\nSPDX-License-Identifier: Apache-2.0\n*&#x2F;\n\npackage main\n\nimport (\n\t&quot;crypto&#x2F;x509&quot;\n\t&quot;fmt&quot;\n\t&quot;os&quot;\n\t&quot;path&quot;\n\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-gateway&#x2F;pkg&#x2F;identity&quot;\n\t&quot;google.golang.org&#x2F;grpc&quot;\n\t&quot;google.golang.org&#x2F;grpc&#x2F;credentials&quot;\n)\n\nconst (\n\tmspID        &#x3D; &quot;Org1MSP&quot;\n\tcryptoPath   &#x3D; &quot;..&#x2F;..&#x2F;test-network&#x2F;organizations&#x2F;peerOrganizations&#x2F;org1.example.com&quot;\n\tcertPath     &#x3D; cryptoPath + &quot;&#x2F;users&#x2F;User1@org1.example.com&#x2F;msp&#x2F;signcerts&#x2F;cert.pem&quot;\n\tkeyPath      &#x3D; cryptoPath + &quot;&#x2F;users&#x2F;User1@org1.example.com&#x2F;msp&#x2F;keystore&#x2F;&quot;\n\ttlsCertPath  &#x3D; cryptoPath + &quot;&#x2F;peers&#x2F;peer0.org1.example.com&#x2F;tls&#x2F;ca.crt&quot;\n\tpeerEndpoint &#x3D; &quot;localhost:7051&quot;\n\tgatewayPeer  &#x3D; &quot;peer0.org1.example.com&quot;\n)\n\n&#x2F;&#x2F; newGrpcConnection creates a gRPC connection to the Gateway server.\nfunc newGrpcConnection() *grpc.ClientConn &#123;\n\tcertificate, err :&#x3D; loadCertificate(tlsCertPath)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n\n\tcertPool :&#x3D; x509.NewCertPool()\n\tcertPool.AddCert(certificate)\n\ttransportCredentials :&#x3D; credentials.NewClientTLSFromCert(certPool, gatewayPeer)\n\n\tconnection, err :&#x3D; grpc.Dial(peerEndpoint, grpc.WithTransportCredentials(transportCredentials))\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to create gRPC connection: %w&quot;, err))\n\t&#125;\n\n\treturn connection\n&#125;\n\n&#x2F;&#x2F; newIdentity creates a client identity for this Gateway connection using an X.509 certificate.\nfunc newIdentity() *identity.X509Identity &#123;\n\tcertificate, err :&#x3D; loadCertificate(certPath)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n\n\tid, err :&#x3D; identity.NewX509Identity(mspID, certificate)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n\n\treturn id\n&#125;\n\nfunc loadCertificate(filename string) (*x509.Certificate, error) &#123;\n\tcertificatePEM, err :&#x3D; os.ReadFile(filename)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, fmt.Errorf(&quot;failed to read certificate file: %w&quot;, err)\n\t&#125;\n\treturn identity.CertificateFromPEM(certificatePEM)\n&#125;\n\n&#x2F;&#x2F; newSign creates a function that generates a digital signature from a message digest using a private key.\nfunc newSign() identity.Sign &#123;\n\tfiles, err :&#x3D; os.ReadDir(keyPath)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to read private key directory: %w&quot;, err))\n\t&#125;\n\tprivateKeyPEM, err :&#x3D; os.ReadFile(path.Join(keyPath, files[0].Name()))\n\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to read private key file: %w&quot;, err))\n\t&#125;\n\n\tprivateKey, err :&#x3D; identity.PrivateKeyFromPEM(privateKeyPEM)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n\n\tsign, err :&#x3D; identity.NewPrivateKeySign(privateKey)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n\n\treturn sign\n&#125;</code></pre>\n<h4 id=\"app-go\"><a href=\"#app-go\" class=\"headerlink\" title=\"app.go\"></a>app.go</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;*\nCopyright 2022 IBM All Rights Reserved.\n\nSPDX-License-Identifier: Apache-2.0\n*&#x2F;\n\npackage main\n\nimport (\n\t&quot;bytes&quot;\n\t&quot;context&quot;\n\t&quot;encoding&#x2F;json&quot;\n\t&quot;errors&quot;\n\t&quot;fmt&quot;\n\t&quot;time&quot;\n\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-gateway&#x2F;pkg&#x2F;client&quot;\n)\n\nconst (\n\tchannelName   &#x3D; &quot;mychannel&quot;\n\tchaincodeName &#x3D; &quot;events&quot;\n)\n\nvar now &#x3D; time.Now()\nvar assetID &#x3D; fmt.Sprintf(&quot;asset%d&quot;, now.Unix()*1e3+int64(now.Nanosecond())&#x2F;1e6)\n\nfunc main() &#123;\n\tclientConnection :&#x3D; newGrpcConnection()\n\tdefer clientConnection.Close()\n\n\tid :&#x3D; newIdentity()\n\tsign :&#x3D; newSign()\n\n\tgateway, err :&#x3D; client.Connect(\n\t\tid,\n\t\tclient.WithSign(sign),\n\t\tclient.WithClientConnection(clientConnection),\n\t\tclient.WithEvaluateTimeout(5*time.Second),\n\t\tclient.WithEndorseTimeout(15*time.Second),\n\t\tclient.WithSubmitTimeout(5*time.Second),\n\t\tclient.WithCommitStatusTimeout(1*time.Minute),\n\t)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n\tdefer gateway.Close()\n\n\tnetwork :&#x3D; gateway.GetNetwork(channelName)\n\tcontract :&#x3D; network.GetContract(chaincodeName)\n\n\t&#x2F;&#x2F; Context used for event listening\n\tctx, cancel :&#x3D; context.WithCancel(context.Background())\n\tdefer cancel()\n\n\t&#x2F;&#x2F; Listen for events emitted by subsequent transactions\n\tstartChaincodeEventListening(ctx, network)\n\n\tfirstBlockNumber :&#x3D; createAsset(contract)\n\tupdateAsset(contract)\n\ttransferAsset(contract)\n\tdeleteAsset(contract)\n\n\t&#x2F;&#x2F; Replay events from the block containing the first transaction\n\treplayChaincodeEvents(ctx, network, firstBlockNumber)\n&#125;\n&#x2F;&#x2F;开始监听\nfunc startChaincodeEventListening(ctx context.Context, network *client.Network) &#123;\n\tfmt.Println(&quot;\\n*** Start chaincode event listening&quot;)\n\n\tevents, err :&#x3D; network.ChaincodeEvents(ctx, chaincodeName)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to start chaincode event listening: %w&quot;, err))\n\t&#125;\n\n\tgo func() &#123;\n\t\tfor event :&#x3D; range events &#123;\n\t\t\tasset :&#x3D; formatJSON(event.Payload)\n\t\t\tfmt.Printf(&quot;\\n&lt;-- Chaincode event received: %s - %s\\n&quot;, event.EventName, asset)\n\t\t&#125;\n\t&#125;()\n&#125;\n\nfunc formatJSON(data []byte) string &#123;\n\tvar result bytes.Buffer\n\tif err :&#x3D; json.Indent(&amp;result, data, &quot;&quot;, &quot;  &quot;); err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to parse JSON: %w&quot;, err))\n\t&#125;\n\treturn result.String()\n&#125;\n\nfunc createAsset(contract *client.Contract) uint64 &#123;\n\tfmt.Printf(&quot;\\n--&gt; Submit transaction: CreateAsset, %s owned by Sam with appraised value 100\\n&quot;, assetID)\n\n\t_, commit, err :&#x3D; contract.SubmitAsync(&quot;CreateAsset&quot;, client.WithArguments(assetID, &quot;blue&quot;, &quot;10&quot;, &quot;Sam&quot;, &quot;100&quot;))\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to submit transaction: %w&quot;, err))\n\t&#125;\n\n\tstatus, err :&#x3D; commit.Status()\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to get transaction commit status: %w&quot;, err))\n\t&#125;\n\n\tif !status.Successful &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to commit transaction with status code %v&quot;, status.Code))\n\t&#125;\n\n\tfmt.Println(&quot;\\n*** CreateAsset committed successfully&quot;)\n\n\treturn status.BlockNumber\n&#125;\n\nfunc updateAsset(contract *client.Contract) &#123;\n\tfmt.Printf(&quot;\\n--&gt; Submit transaction: UpdateAsset, %s update appraised value to 200\\n&quot;, assetID)\n\n\t_, err :&#x3D; contract.SubmitTransaction(&quot;UpdateAsset&quot;, assetID, &quot;blue&quot;, &quot;10&quot;, &quot;Sam&quot;, &quot;200&quot;)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to submit transaction: %w&quot;, err))\n\t&#125;\n\n\tfmt.Println(&quot;\\n*** UpdateAsset committed successfully&quot;)\n&#125;\n\nfunc transferAsset(contract *client.Contract) &#123;\n\tfmt.Printf(&quot;\\n--&gt; Submit transaction: TransferAsset, %s to Mary\\n&quot;, assetID)\n\n\t_, err :&#x3D; contract.SubmitTransaction(&quot;TransferAsset&quot;, assetID, &quot;Mary&quot;)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to submit transaction: %w&quot;, err))\n\t&#125;\n\n\tfmt.Println(&quot;\\n*** TransferAsset committed successfully&quot;)\n&#125;\n\nfunc deleteAsset(contract *client.Contract) &#123;\n\tfmt.Printf(&quot;\\n--&gt; Submit transaction: DeleteAsset, %s\\n&quot;, assetID)\n\n\t_, err :&#x3D; contract.SubmitTransaction(&quot;DeleteAsset&quot;, assetID)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to submit transaction: %w&quot;, err))\n\t&#125;\n\n\tfmt.Println(&quot;\\n*** DeleteAsset committed successfully&quot;)\n&#125;\n\nfunc replayChaincodeEvents(ctx context.Context, network *client.Network, startBlock uint64) &#123;\n\tfmt.Println(&quot;\\n*** Start chaincode event replay&quot;)\n\n\tevents, err :&#x3D; network.ChaincodeEvents(ctx, chaincodeName, client.WithStartBlock(startBlock))\n\tif err !&#x3D; nil &#123;\n\t\tpanic(fmt.Errorf(&quot;failed to start chaincode event listening: %w&quot;, err))\n\t&#125;\n\n\tfor &#123;\n\t\tselect &#123;\n\t\tcase &lt;-time.After(10 * time.Second):\n\t\t\tpanic(errors.New(&quot;timeout waiting for event replay&quot;))\n\n\t\tcase event :&#x3D; &lt;-events:\n\t\t\tasset :&#x3D; formatJSON(event.Payload)\n\t\t\tfmt.Printf(&quot;\\n&lt;-- Chaincode event replayed: %s - %s\\n&quot;, event.EventName, asset)\n\n\t\t\tif event.EventName &#x3D;&#x3D; &quot;DeleteAsset&quot; &#123;\n\t\t\t\t&#x2F;&#x2F; Reached the last submitted transaction so return to stop listening for events\n\t\t\t\treturn\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n&#125;</code></pre>\n<h2 id=\"SDK运行\"><a href=\"#SDK运行\" class=\"headerlink\" title=\"SDK运行\"></a>SDK运行</h2><p>参见<a href=\"https://algernon98.github.io/post/%E5%8C%BA%E5%9D%97%E9%93%BE4\">SDK运行实战</a>，这是之前实验的内容，在此不多赘述。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://algernon98.github.io/post/%E5%8C%BA%E5%9D%97%E9%93%BE4\">https://algernon98.github.io/post/%E5%8C%BA%E5%9D%97%E9%93%BE4</a></p>\n<p><img src=\"https://img-blog.csdnimg.cn/54d2f39dc795467887396cc739cfef07.png\" alt=\"在这里插入图片描述\"></p></blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">cd .. &amp;&amp; go build &amp;&amp; .&#x2F;fabric-go-sdk\n&gt;&gt; 开始创建通道......\n&gt;&gt;&gt;&gt; 使用每个org的管理员身份更新锚节点配置...\n&gt;&gt;&gt;&gt; 使用每个org的管理员身份更新锚节点配置完成\n&gt;&gt; 创建通道成功\n&gt;&gt; 加入通道......\n&gt;&gt; 加入通道成功\n&gt;&gt; 开始打包链码......\n&gt;&gt; 打包链码成功\n&gt;&gt; 开始安装链码......\n&gt;&gt; 安装链码成功\n&gt;&gt; 组织认可智能合约定义......\n&gt;&gt;&gt; chaincode approved by Org1 peers:\n\tpeer0.org1.example.com:7051\n\tpeer1.org1.example.com:9051\n&gt;&gt; 组织认可智能合约定义完成\n&gt;&gt; 检查智能合约是否就绪......\nLifecycleCheckCCCommitReadiness cc &#x3D; simplecc, &#x3D; &#123;map[Org1MSP:true]&#125;\nLifecycleCheckCCCommitReadiness cc &#x3D; simplecc, &#x3D; &#123;map[Org1MSP:true]&#125;\n&gt;&gt; 智能合约已经就绪\n&gt;&gt; 提交智能合约定义......\n&gt;&gt; 智能合约定义提交完成\n&gt;&gt; 调用智能合约初始化方法......\n&gt;&gt; 完成智能合约初始化\n&gt;&gt; 通过链码外部服务设置链码状态......\n&gt;&gt; 设置链码状态完成\n&lt;--- 添加信息　---&gt;： 18c0c86ce029d7de04461484976c5151992864b52ca28905d0ccf911443fdfcb\n&lt;--- 查询信息　---&gt;： 123\n\n---------------------------------\n作者: Algernon\n本文来自于: https:&#x2F;&#x2F;algernon98.github.io&#x2F;\n博客内容遵循 署名-非商业性使用-相同方式共享 4.0 国际 (CC BY-NC-SA 4.0) 协议</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/fbea477fae50407da76197ce63627626.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"sdk链码分析\"><a href=\"#sdk链码分析\" class=\"headerlink\" title=\"sdk链码分析\"></a>sdk链码分析</h2><h3 id=\"chaincode\"><a href=\"#chaincode\" class=\"headerlink\" title=\"chaincode\"></a>chaincode</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://github.com/sxguan/fabric-go-sdk/blob/main/chaincode/chaincode.go\">https://github.com/sxguan/fabric-go-sdk/blob/main/chaincode/chaincode.go</a></p>\n<h4 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n\t&quot;encoding&#x2F;json&quot;\n\t&quot;fmt&quot;\n\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-chaincode-go&#x2F;shim&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-protos-go&#x2F;peer&quot;\n)\n\n&#x2F;&#x2F; SimpleAsset implements a simple chaincode to manage an asset\ntype SimpleAsset struct &#123;\n&#125;\ntype outputEvent struct &#123;\n\tEventName string\n&#125;\n\n&#x2F;&#x2F; Init is called during chaincode instantiation to initialize any\n&#x2F;&#x2F; data. Note that chaincode upgrade also calls this function to reset\n&#x2F;&#x2F; or to migrate data.\nfunc (t *SimpleAsset) Init(stub shim.ChaincodeStubInterface) peer.Response &#123;\n\tfmt.Printf(&quot;init...&quot;)\n\treturn shim.Success(nil)\n&#125;\n\n&#x2F;&#x2F; Invoke is called per transaction on the chaincode. Each transaction is\n&#x2F;&#x2F; either a &#39;get&#39; or a &#39;set&#39; on the asset created by Init function. The Set\n&#x2F;&#x2F; method may create a new asset by specifying a new key-value pair.\nfunc (t *SimpleAsset) Invoke(stub shim.ChaincodeStubInterface) peer.Response &#123;\n\t&#x2F;&#x2F; Extract the function and args from the transaction proposal\n\tfn, args :&#x3D; stub.GetFunctionAndParameters()\n\n\tvar result string\n\tvar err error\n\tif fn &#x3D;&#x3D; &quot;set&quot; &#123;\n\t\tresult, err &#x3D; set(stub, args)\n\t&#125; else &#123; &#x2F;&#x2F; assume &#39;get&#39; even if fn is nil\n\t\tresult, err &#x3D; get(stub, args)\n\t&#125;\n\tif err !&#x3D; nil &#123;\n\t\treturn shim.Error(err.Error())\n\t&#125;\n\n\t&#x2F;&#x2F; Return the result as success payload\n\treturn shim.Success([]byte(result))\n&#125;\n\n&#x2F;&#x2F; Set stores the asset (both key and value) on the ledger. If the key exists,\n&#x2F;&#x2F; it will override the value with the new one\nfunc set(stub shim.ChaincodeStubInterface, args []string) (string, error) &#123;\n\tif len(args) !&#x3D; 2 &#123;\n\t\treturn &quot;&quot;, fmt.Errorf(&quot;Incorrect arguments. Expecting a key and a value&quot;)\n\t&#125;\n\n\terr :&#x3D; stub.PutState(args[0], []byte(args[1]))\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, fmt.Errorf(&quot;Failed to set asset: %s&quot;, args[0])\n\t&#125;\n\tevent :&#x3D; outputEvent&#123;\n\t\tEventName: &quot;set&quot;,\n\t&#125;\n\tpayload, err :&#x3D; json.Marshal(event)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, err\n\t&#125;\n\terr &#x3D; stub.SetEvent(&quot;chaincode-event&quot;, payload)\n\treturn args[1], nil\n&#125;\n\n&#x2F;&#x2F; Get returns the value of the specified asset key\nfunc get(stub shim.ChaincodeStubInterface, args []string) (string, error) &#123;\n\tif len(args) !&#x3D; 1 &#123;\n\t\treturn &quot;&quot;, fmt.Errorf(&quot;Incorrect arguments. Expecting a key&quot;)\n\t&#125;\n\n\tvalue, err :&#x3D; stub.GetState(args[0])\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, fmt.Errorf(&quot;Failed to get asset: %s with error: %s&quot;, args[0], err)\n\t&#125;\n\tif value &#x3D;&#x3D; nil &#123;\n\t\treturn &quot;&quot;, fmt.Errorf(&quot;Asset not found: %s&quot;, args[0])\n\t&#125;\n\treturn string(value), nil\n&#125;\n\n&#x2F;&#x2F; main function starts up the chaincode in the container during instantiate\nfunc main() &#123;\n\tif err :&#x3D; shim.Start(new(SimpleAsset)); err !&#x3D; nil &#123;\n\t\tfmt.Printf(&quot;Error starting SimpleAsset chaincode: %s&quot;, err)\n\t&#125;\n&#125;</code></pre>\n<h4 id=\"逐个分析\"><a href=\"#逐个分析\" class=\"headerlink\" title=\"逐个分析\"></a>逐个分析</h4><p>现在我们来逐步分析代码：</p>\n<h5 id=\"导入所需包\"><a href=\"#导入所需包\" class=\"headerlink\" title=\"导入所需包\"></a>导入所需包</h5><p>之后的函数中都有这一部分，如遇到import导入部分则省略。<br><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\nimport (\n\t&quot;encoding&#x2F;json&quot;\n\t&quot;fmt&quot;\n\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-chaincode-go&#x2F;shim&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-protos-go&#x2F;peer&quot;\n)</code></pre></p></blockquote>\n<h3 id=\"integration\"><a href=\"#integration\" class=\"headerlink\" title=\"integration\"></a>integration</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://github.com/sxguan/fabric-go-sdk/blob/main/sdkInit/integration.go\">https://github.com/sxguan/fabric-go-sdk/blob/main/sdkInit/integration.go</a></p>\n<h4 id=\"完整代码-1\"><a href=\"#完整代码-1\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package sdkInit\n\nimport (\n\t&quot;encoding&#x2F;hex&quot;\n\t&quot;fmt&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;client&#x2F;channel&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;client&#x2F;event&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;common&#x2F;errors&#x2F;retry&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;common&#x2F;errors&#x2F;status&quot;\n\tcontextAPI &quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;common&#x2F;providers&#x2F;context&quot;\n\tfabAPI &quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;common&#x2F;providers&#x2F;fab&quot;\n\tcontextImpl &quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;context&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;fabsdk&quot;\n\t&quot;log&quot;\n)\n\nfunc DiscoverLocalPeers(ctxProvider contextAPI.ClientProvider, expectedPeers int) ([]fabAPI.Peer, error) &#123;\n\tctx, err :&#x3D; contextImpl.NewLocal(ctxProvider)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, fmt.Errorf(&quot;error creating local context: %v&quot;, err)\n\t&#125;\n\n\tdiscoveredPeers, err :&#x3D; retry.NewInvoker(retry.New(retry.TestRetryOpts)).Invoke(\n\t\tfunc() (interface&#123;&#125;, error) &#123;\n\t\t\tpeers, serviceErr :&#x3D; ctx.LocalDiscoveryService().GetPeers()\n\t\t\tif serviceErr !&#x3D; nil &#123;\n\t\t\t\treturn nil, fmt.Errorf(&quot;getting peers for MSP [%s] error: %v&quot;, ctx.Identifier().MSPID, serviceErr)\n\t\t\t&#125;\n\t\t\tif len(peers) &lt; expectedPeers &#123;\n\t\t\t\treturn nil, status.New(status.TestStatus, status.GenericTransient.ToInt32(), fmt.Sprintf(&quot;Expecting %d peers but got %d&quot;, expectedPeers, len(peers)), nil)\n\t\t\t&#125;\n\t\t\treturn peers, nil\n\t\t&#125;,\n\t)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\n\treturn discoveredPeers.([]fabAPI.Peer), nil\n&#125;\nfunc (t *SdkEnvInfo) InitService(chaincodeID, channelID string, org *OrgInfo, sdk *fabsdk.FabricSDK) error &#123;\n\thandler :&#x3D; &amp;SdkEnvInfo&#123;\n\t\tChaincodeID: chaincodeID,\n\t&#125;\n\t&#x2F;&#x2F;prepare channel client context using client context\n\tclientChannelContext :&#x3D; sdk.ChannelContext(channelID, fabsdk.WithUser(org.OrgUser), fabsdk.WithOrg(org.OrgName))\n\t&#x2F;&#x2F; Channel client is used to query and execute transactions (Org1 is default org)\n\tvar err error\n\tt.ChClient, err &#x3D; channel.New(clientChannelContext)\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\tt.EvClient, err &#x3D; event.New(clientChannelContext, event.WithBlockEvents())\n\tif err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\thandler.ChClient &#x3D; t.ChClient\n\thandler.EvClient &#x3D; t.EvClient\n\treturn nil\n&#125;\n\nfunc regitserEvent(client *event.Client, chaincodeID string) (fabAPI.Registration, &lt;-chan *fabAPI.CCEvent) &#123;\n\teventName :&#x3D; &quot;chaincode-event&quot;\n\n\treg, notifier, err :&#x3D; client.RegisterChaincodeEvent(chaincodeID, eventName)\n\tif err !&#x3D; nil &#123;\n\t\tfmt.Println(&quot;注册链码事件失败: %s&quot;, err)\n\t&#125;\n\n\treturn reg, notifier\n&#125;\nfunc ChainCodeEventListener(c *event.Client, ccID string) fabAPI.Registration &#123;\n\n\treg, notifier :&#x3D; regitserEvent(c, ccID)\n\n\t&#x2F;&#x2F; consume event\n\tgo func() &#123;\n\t\tfor e :&#x3D; range notifier &#123;\n\t\t\tlog.Printf(&quot;Receive cc event, ccid: %v \\neventName: %v\\n&quot;+\n\t\t\t\t&quot;payload: %v \\ntxid: %v \\nblock: %v \\nsourceURL: %v\\n&quot;,\n\t\t\t\te.ChaincodeID, e.EventName, string(e.Payload), e.TxID, e.BlockNumber, e.SourceURL)\n\t\t&#125;\n\t&#125;()\n\n\treturn reg\n&#125;\n\nfunc TxListener(c *event.Client, txIDCh chan string) &#123;\n\tlog.Println(&quot;Transaction listener start&quot;)\n\tdefer log.Println(&quot;Transaction listener exit&quot;)\n\n\tfor id :&#x3D; range txIDCh &#123;\n\t\t&#x2F;&#x2F; Register monitor transaction event\n\t\tlog.Printf(&quot;Register transaction event for: %v&quot;, id)\n\t\ttxReg, txCh, err :&#x3D; c.RegisterTxStatusEvent(id)\n\t\tif err !&#x3D; nil &#123;\n\t\t\tlog.Printf(&quot;Register transaction event error: %v&quot;, err)\n\t\t\tcontinue\n\t\t&#125;\n\t\tdefer c.Unregister(txReg)\n\n\t\t&#x2F;&#x2F; Receive transaction event\n\t\tgo func() &#123;\n\t\t\tfor e :&#x3D; range txCh &#123;\n\t\t\t\tlog.Printf(&quot;Receive transaction event: txid: %v, &quot;+\n\t\t\t\t\t&quot;validation code: %v, block number: %v&quot;,\n\t\t\t\t\te.TxID,\n\t\t\t\t\te.TxValidationCode,\n\t\t\t\t\te.BlockNumber)\n\t\t\t&#125;\n\t\t&#125;()\n\t&#125;\n&#125;\n\nfunc BlockListener(ec *event.Client) fabAPI.Registration &#123;\n\t&#x2F;&#x2F; Register monitor block event\n\tbeReg, beCh, err :&#x3D; ec.RegisterBlockEvent()\n\tif err !&#x3D; nil &#123;\n\t\tlog.Printf(&quot;Register block event error: %v&quot;, err)\n\t&#125;\n\tlog.Println(&quot;Registered block event&quot;)\n\n\t&#x2F;&#x2F; Receive block event\n\tgo func() &#123;\n\t\tfor e :&#x3D; range beCh &#123;\n\t\t\tlog.Printf(&quot;Receive block event:\\nSourceURL: %v\\nNumber: %v\\nHash&quot;+\n\t\t\t\t&quot;: %v\\nPreviousHash: %v\\n\\n&quot;,\n\t\t\t\te.SourceURL,\n\t\t\t\te.Block.Header.Number,\n\t\t\t\thex.EncodeToString(e.Block.Header.DataHash),\n\t\t\t\thex.EncodeToString(e.Block.Header.PreviousHash))\n\t\t&#125;\n\t&#125;()\n\n\treturn beReg\n&#125;</code></pre></blockquote>\n<h4 id=\"逐个分析-1\"><a href=\"#逐个分析-1\" class=\"headerlink\" title=\"逐个分析\"></a>逐个分析</h4><h5 id=\"查找本地结点\"><a href=\"#查找本地结点\" class=\"headerlink\" title=\"查找本地结点\"></a>查找本地结点</h5><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func DiscoverLocalPeers(ctxProvider contextAPI.ClientProvider, expectedPeers int) ([]fabAPI.Peer, error) &#123;\n\tctx, err :&#x3D; contextImpl.NewLocal(ctxProvider)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, fmt.Errorf(&quot;error creating local context: %v&quot;, err)\n\t&#125;\n\n\tdiscoveredPeers, err :&#x3D; retry.NewInvoker(retry.New(retry.TestRetryOpts)).Invoke(\n\t\tfunc() (interface&#123;&#125;, error) &#123;\n\t\t\tpeers, serviceErr :&#x3D; ctx.LocalDiscoveryService().GetPeers()\n\t\t\tif serviceErr !&#x3D; nil &#123;\n\t\t\t\treturn nil, fmt.Errorf(&quot;getting peers for MSP [%s] error: %v&quot;, ctx.Identifier().MSPID, serviceErr)\n\t\t\t&#125;\n\t\t\tif len(peers) &lt; expectedPeers &#123;\n\t\t\t\treturn nil, status.New(status.TestStatus, status.GenericTransient.ToInt32(), fmt.Sprintf(&quot;Expecting %d peers but got %d&quot;, expectedPeers, len(peers)), nil)\n\t\t\t&#125;\n\t\t\treturn peers, nil\n\t\t&#125;,\n\t)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\n\treturn discoveredPeers.([]fabAPI.Peer), nil\n&#125;</code></pre>\n<h3 id=\"main\"><a href=\"#main\" class=\"headerlink\" title=\"main\"></a>main</h3><h4 id=\"完整代码-2\"><a href=\"#完整代码-2\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n\t&quot;fabric-go-sdk&#x2F;sdkInit&quot;\n\t&quot;fmt&quot;\n\t&quot;os&quot;\n\t&quot;time&quot;\n)\n\nconst (\n\tcc_name    &#x3D; &quot;simplecc&quot;\n\tcc_version &#x3D; &quot;1.0.0&quot;\n)\n\nvar App sdkInit.Application\n\nfunc main() &#123;\n\t&#x2F;&#x2F; init orgs information 初始化组织信息\n\n\torgs :&#x3D; []*sdkInit.OrgInfo&#123;\n\t\t&#123;\n\t\t\tOrgAdminUser:  &quot;Admin&quot;,\n\t\t\tOrgName:       &quot;Org1&quot;,\n\t\t\tOrgMspId:      &quot;Org1MSP&quot;,\n\t\t\tOrgUser:       &quot;User1&quot;,\n\t\t\tOrgPeerNum:    2,\n\t\t\tOrgAnchorFile: &quot;&#x2F;root&#x2F;go&#x2F;src&#x2F;fabric-go-sdk&#x2F;fixtures&#x2F;channel-artifacts&#x2F;Org1MSPanchors.tx&quot;,\n\t\t&#125;,\n\t&#125;\n\n\t&#x2F;&#x2F; init sdk env info 初始化sdk相关信息\n\tinfo :&#x3D; sdkInit.SdkEnvInfo&#123;\n\t\tChannelID:        &quot;mychannel&quot;,\n\t\tChannelConfig:    &quot;&#x2F;root&#x2F;go&#x2F;src&#x2F;fabric-go-sdk&#x2F;fixtures&#x2F;channel-artifacts&#x2F;channel.tx&quot;,\n\t\tOrgs:             orgs,\n\t\tOrdererAdminUser: &quot;Admin&quot;,\n\t\tOrdererOrgName:   &quot;OrdererOrg&quot;,\n\t\tOrdererEndpoint:  &quot;orderer.example.com&quot;,\n\t\tChaincodeID:      cc_name,\n\t\tChaincodePath:    &quot;&#x2F;root&#x2F;go&#x2F;src&#x2F;fabric-go-sdk&#x2F;chaincode&#x2F;&quot;,\n\t\tChaincodeVersion: cc_version,\n\t&#125;\n\n\t&#x2F;&#x2F; sdk setup  调用setup方法将sdk初始化\n\tsdk, err :&#x3D; sdkInit.Setup(&quot;config.yaml&quot;, &amp;info)\n\tif err !&#x3D; nil &#123;\n\t\tfmt.Println(&quot;&gt;&gt; SDK setup error:&quot;, err)\n\t\tos.Exit(-1)\n\t&#125;\n\n\t&#x2F;&#x2F; create channel and join  调用CreateAndJoinChannel方法，创建并加入通道\n\tif err :&#x3D; sdkInit.CreateAndJoinChannel(&amp;info); err !&#x3D; nil &#123;\n\t\tfmt.Println(&quot;&gt;&gt; Create channel and join error:&quot;, err)\n\t\tos.Exit(-1)\n\t&#125;\n\n\t&#x2F;&#x2F; create chaincode lifecycle  调用CreateCCLifecycle方法实现链码生命周期\n\tif err :&#x3D; sdkInit.CreateCCLifecycle(&amp;info, 1, false, sdk); err !&#x3D; nil &#123;\n\t\tfmt.Println(&quot;&gt;&gt; create chaincode lifecycle error: %v&quot;, err)\n\t\tos.Exit(-1)\n\t&#125;\n\n\t&#x2F;&#x2F; invoke chaincode set status\n\tfmt.Println(&quot;&gt;&gt; 通过链码外部服务设置链码状态......&quot;)\n\n\tif err :&#x3D; info.InitService(info.ChaincodeID, info.ChannelID, info.Orgs[0], sdk); err !&#x3D; nil &#123;\n\n\t\tfmt.Println(&quot;InitService successful&quot;)\n\t\tos.Exit(-1)\n\t&#125;\n\n\tApp &#x3D; sdkInit.Application&#123;\n\t\tSdkEnvInfo: &amp;info,\n\t&#125;\n\tfmt.Println(&quot;&gt;&gt; 设置链码状态完成&quot;)\n\n\tdefer info.EvClient.Unregister(sdkInit.BlockListener(info.EvClient))\n\tdefer info.EvClient.Unregister(sdkInit.ChainCodeEventListener(info.EvClient, info.ChaincodeID))\n\n\ta :&#x3D; []string&#123;&quot;set&quot;, &quot;ID1&quot;, &quot;123&quot;&#125;\n\tret, err :&#x3D; App.Set(a)\n\tif err !&#x3D; nil &#123;\n\t\tfmt.Println(err)\n\t&#125;\n\tfmt.Println(&quot;&lt;--- 添加信息　---&gt;：&quot;, ret)\n\n\ta &#x3D; []string&#123;&quot;set&quot;, &quot;ID2&quot;, &quot;456&quot;&#125;\n\tret, err &#x3D; App.Set(a)\n\tif err !&#x3D; nil &#123;\n\t\tfmt.Println(err)\n\t&#125;\n\tfmt.Println(&quot;&lt;--- 添加信息　---&gt;：&quot;, ret)\n\n\ta &#x3D; []string&#123;&quot;set&quot;, &quot;ID3&quot;, &quot;789&quot;&#125;\n\tret, err &#x3D; App.Set(a)\n\tif err !&#x3D; nil &#123;\n\t\tfmt.Println(err)\n\t&#125;\n\tfmt.Println(&quot;&lt;--- 添加信息　---&gt;：&quot;, ret)\n\n\ta &#x3D; []string&#123;&quot;get&quot;, &quot;ID3&quot;&#125;\n\tresponse, err :&#x3D; App.Get(a)\n\tif err !&#x3D; nil &#123;\n\t\tfmt.Println(err)\n\t&#125;\n\tfmt.Println(&quot;&lt;--- 查询信息　---&gt;：&quot;, response)\n\n\ttime.Sleep(time.Second * 10)\n\n&#125;</code></pre>\n<h4 id=\"逐个分析-2\"><a href=\"#逐个分析-2\" class=\"headerlink\" title=\"逐个分析\"></a>逐个分析</h4><h5 id=\"定义链码名称与版本\"><a href=\"#定义链码名称与版本\" class=\"headerlink\" title=\"定义链码名称与版本\"></a>定义链码名称与版本</h5><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">const (\n\tcc_name    &#x3D; &quot;simplecc&quot;\n\tcc_version &#x3D; &quot;1.0.0&quot;\n)</code></pre>\n<h3 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"get\"></a>get</h3><h4 id=\"完整代码-3\"><a href=\"#完整代码-3\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package sdkInit\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;client&#x2F;channel&quot;\n)\n\nfunc (t *Application) Get(args []string) (string, error) &#123;\n\tresponse, err :&#x3D; t.SdkEnvInfo.ChClient.Query(channel.Request&#123;ChaincodeID: t.SdkEnvInfo.ChaincodeID, Fcn: args[0], Args: [][]byte&#123;[]byte(args[1])&#125;&#125;)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, fmt.Errorf(&quot;failed to query: %v&quot;, err)\n\t&#125;\n\n\treturn string(response.Payload), nil\n&#125;</code></pre>\n<h3 id=\"sdkInfo\"><a href=\"#sdkInfo\" class=\"headerlink\" title=\"sdkInfo\"></a>sdkInfo</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://github.com/sxguan/fabric-go-sdk/blob/main/sdkInit/sdkInfo.go\">https://github.com/sxguan/fabric-go-sdk/blob/main/sdkInit/sdkInfo.go</a></p>\n<h4 id=\"完整代码-4\"><a href=\"#完整代码-4\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h4><p>注释写在代码里了，就不单拿出来讲了。<br><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package sdkInit\n\nimport (\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;client&#x2F;channel&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;client&#x2F;event&quot;\n\tmspclient &quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;client&#x2F;msp&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;client&#x2F;resmgmt&quot;\n\tcontextAPI &quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;common&#x2F;providers&#x2F;context&quot;\n)\n\ntype OrgInfo struct &#123;\n\tOrgAdminUser          string &#x2F;&#x2F; like &quot;Admin&quot;\n\tOrgName               string &#x2F;&#x2F; like &quot;Org1&quot;\n\tOrgMspId              string &#x2F;&#x2F; like &quot;Org1MSP&quot;\n\tOrgUser               string &#x2F;&#x2F; like &quot;User1&quot;\n\torgMspClient          *mspclient.Client\n\tOrgAdminClientContext *contextAPI.ClientProvider\n\tOrgResMgmt            *resmgmt.Client\n\tOrgPeerNum            int\n\t&#x2F;&#x2F;Peers                 []*fab.Peer\n\tOrgAnchorFile string &#x2F;&#x2F; like .&#x2F;channel-artifacts&#x2F;Org2MSPanchors.tx\n&#125;\n\ntype SdkEnvInfo struct &#123;\n\t&#x2F;&#x2F; 通道信息\n\tChannelID     string &#x2F;&#x2F; like &quot;simplecc&quot;\n\tChannelConfig string &#x2F;&#x2F; like os.Getenv(&quot;GOPATH&quot;) + &quot;&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-samples&#x2F;test-network&#x2F;channel-artifacts&#x2F;testchannel.tx&quot;\n\n\t&#x2F;&#x2F; 组织信息\n\tOrgs []*OrgInfo\n\t&#x2F;&#x2F; 排序服务节点信息\n\tOrdererAdminUser     string &#x2F;&#x2F; like &quot;Admin&quot;\n\tOrdererOrgName       string &#x2F;&#x2F; like &quot;OrdererOrg&quot;\n\tOrdererEndpoint      string\n\tOrdererClientContext *contextAPI.ClientProvider\n\t&#x2F;&#x2F; 链码信息\n\tChaincodeID      string\n\tChaincodeGoPath  string\n\tChaincodePath    string\n\tChaincodeVersion string\n\tChClient         *channel.Client\n\tEvClient         *event.Client\n&#125;\n\ntype Application struct &#123;\n\tSdkEnvInfo *SdkEnvInfo\n&#125;</code></pre></p>\n<h3 id=\"sdkSetting\"><a href=\"#sdkSetting\" class=\"headerlink\" title=\"sdkSetting\"></a>sdkSetting</h3><h4 id=\"完整代码-5\"><a href=\"#完整代码-5\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\npackage sdkInit\n\nimport (\n\t&quot;fmt&quot;\n\tmb &quot;github.com&#x2F;hyperledger&#x2F;fabric-protos-go&#x2F;msp&quot;\n\tpb &quot;github.com&#x2F;hyperledger&#x2F;fabric-protos-go&#x2F;peer&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;client&#x2F;channel&quot;\n\tmspclient &quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;client&#x2F;msp&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;client&#x2F;resmgmt&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;common&#x2F;errors&#x2F;retry&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;common&#x2F;errors&#x2F;status&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;common&#x2F;providers&#x2F;fab&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;common&#x2F;providers&#x2F;msp&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;core&#x2F;config&quot;\n\tlcpackager &quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;fab&#x2F;ccpackager&#x2F;lifecycle&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;fabsdk&quot;\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;third_party&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;common&#x2F;policydsl&quot;\n\t&quot;strings&quot;\n)\n\nfunc Setup(configFile string, info *SdkEnvInfo) (*fabsdk.FabricSDK, error) &#123;\n\t&#x2F;&#x2F; Create SDK setup for the integration tests\n\tvar err error\n\tsdk, err :&#x3D; fabsdk.New(config.FromFile(configFile))\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\n\t&#x2F;&#x2F; 为组织获得Client句柄和Context信息\n\tfor _, org :&#x3D; range info.Orgs &#123;\n\t\torg.orgMspClient, err &#x3D; mspclient.New(sdk.Context(), mspclient.WithOrg(org.OrgName))\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn nil, err\n\t\t&#125;\n\t\torgContext :&#x3D; sdk.Context(fabsdk.WithUser(org.OrgAdminUser), fabsdk.WithOrg(org.OrgName))\n\t\torg.OrgAdminClientContext &#x3D; &amp;orgContext\n\n\t\t&#x2F;&#x2F; New returns a resource management client instance.\n\t\tresMgmtClient, err :&#x3D; resmgmt.New(orgContext)\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn nil, fmt.Errorf(&quot;根据指定的资源管理客户端Context创建通道管理客户端失败: %v&quot;, err)\n\t\t&#125;\n\t\torg.OrgResMgmt &#x3D; resMgmtClient\n\t&#125;\n\n\t&#x2F;&#x2F; 为Orderer获得Context信息\n\tordererClientContext :&#x3D; sdk.Context(fabsdk.WithUser(info.OrdererAdminUser), fabsdk.WithOrg(info.OrdererOrgName))\n\tinfo.OrdererClientContext &#x3D; &amp;ordererClientContext\n\treturn sdk, nil\n&#125;\n\nfunc CreateAndJoinChannel(info *SdkEnvInfo) error &#123;\n\tfmt.Println(&quot;&gt;&gt; 开始创建通道......&quot;)\n\tif len(info.Orgs) &#x3D;&#x3D; 0 &#123;\n\t\treturn fmt.Errorf(&quot;通道组织不能为空，请提供组织信息&quot;)\n\t&#125;\n\n\t&#x2F;&#x2F; 获得所有组织的签名信息\n\tsignIds :&#x3D; []msp.SigningIdentity&#123;&#125;\n\tfor _, org :&#x3D; range info.Orgs &#123;\n\t\t&#x2F;&#x2F; Get signing identity that is used to sign create channel request\n\t\torgSignId, err :&#x3D; org.orgMspClient.GetSigningIdentity(org.OrgAdminUser)\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn fmt.Errorf(&quot;GetSigningIdentity error: %v&quot;, err)\n\t\t&#125;\n\t\tsignIds &#x3D; append(signIds, orgSignId)\n\t&#125;\n\n\t&#x2F;&#x2F; 创建通道\n\tif err :&#x3D; createChannel(signIds, info); err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;Create channel error: %v&quot;, err)\n\t&#125;\n\n\tfmt.Println(&quot;&gt;&gt; 创建通道成功&quot;)\n\n\tfmt.Println(&quot;&gt;&gt; 加入通道......&quot;)\n\tfor _, org :&#x3D; range info.Orgs &#123;\n\t\t&#x2F;&#x2F; 加入通道\n\t\t&#x2F;&#x2F; Org peers join channel\n\t\tif err :&#x3D; org.OrgResMgmt.JoinChannel(info.ChannelID, resmgmt.WithRetry(retry.DefaultResMgmtOpts), resmgmt.WithOrdererEndpoint(&quot;orderer.example.com&quot;)); err !&#x3D; nil &#123;\n\t\t\treturn fmt.Errorf(&quot;%s peers failed to JoinChannel: %v&quot;, org.OrgName, err)\n\t\t&#125;\n\t&#125;\n\tfmt.Println(&quot;&gt;&gt; 加入通道成功&quot;)\n\treturn nil\n&#125;\n\nfunc createChannel(signIDs []msp.SigningIdentity, info *SdkEnvInfo) error &#123;\n\t&#x2F;&#x2F; Channel management client is responsible for managing channels (create&#x2F;update channel)\n\tchMgmtClient, err :&#x3D; resmgmt.New(*info.OrdererClientContext)\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;Channel management client create error: %v&quot;, err)\n\t&#125;\n\n\t&#x2F;&#x2F; create a channel for orgchannel.tx\n\treq :&#x3D; resmgmt.SaveChannelRequest&#123;ChannelID: info.ChannelID,\n\t\tChannelConfigPath: info.ChannelConfig,\n\t\tSigningIdentities: signIDs&#125;\n\n\tif _, err :&#x3D; chMgmtClient.SaveChannel(req, resmgmt.WithRetry(retry.DefaultResMgmtOpts), resmgmt.WithOrdererEndpoint(&quot;orderer.example.com&quot;)); err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;error should be nil for SaveChannel of orgchannel: %v&quot;, err)\n\t&#125;\n\n\tfmt.Println(&quot;&gt;&gt;&gt;&gt; 使用每个org的管理员身份更新锚节点配置...&quot;)\n\t&#x2F;&#x2F;do the same get ch client and create channel for each anchor peer as well (first for Org1MSP)\n\tfor i, org :&#x3D; range info.Orgs &#123;\n\t\treq &#x3D; resmgmt.SaveChannelRequest&#123;ChannelID: info.ChannelID,\n\t\t\tChannelConfigPath: org.OrgAnchorFile,\n\t\t\tSigningIdentities: []msp.SigningIdentity&#123;signIDs[i]&#125;&#125;\n\n\t\tif _, err &#x3D; org.OrgResMgmt.SaveChannel(req, resmgmt.WithRetry(retry.DefaultResMgmtOpts), resmgmt.WithOrdererEndpoint(&quot;orderer.example.com&quot;)); err !&#x3D; nil &#123;\n\t\t\treturn fmt.Errorf(&quot;SaveChannel for anchor org %s error: %v&quot;, org.OrgName, err)\n\t\t&#125;\n\t&#125;\n\tfmt.Println(&quot;&gt;&gt;&gt;&gt; 使用每个org的管理员身份更新锚节点配置完成&quot;)\n\t&#x2F;&#x2F;integration.WaitForOrdererConfigUpdate(t, configQueryClient, mc.channelID, false, lastConfigBlock)\n\treturn nil\n&#125;\n\nfunc CreateCCLifecycle(info *SdkEnvInfo, sequence int64, upgrade bool, sdk *fabsdk.FabricSDK) error &#123;\n\tif len(info.Orgs) &#x3D;&#x3D; 0 &#123;\n\t\treturn fmt.Errorf(&quot;the number of organization should not be zero.&quot;)\n\t&#125;\n\t&#x2F;&#x2F; Package cc\n\tfmt.Println(&quot;&gt;&gt; 开始打包链码......&quot;)\n\tlabel, ccPkg, err :&#x3D; packageCC(info.ChaincodeID, info.ChaincodeVersion, info.ChaincodePath)\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;pakcagecc error: %v&quot;, err)\n\t&#125;\n\tpackageID :&#x3D; lcpackager.ComputePackageID(label, ccPkg)\n\tfmt.Println(&quot;&gt;&gt; 打包链码成功&quot;)\n\n\t&#x2F;&#x2F; Install cc\n\tfmt.Println(&quot;&gt;&gt; 开始安装链码......&quot;)\n\tif err :&#x3D; installCC(label, ccPkg, info.Orgs); err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;installCC error: %v&quot;, err)\n\t&#125;\n\n\t&#x2F;&#x2F; Get installed cc package\n\tif err :&#x3D; getInstalledCCPackage(packageID, info.Orgs[0]); err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;getInstalledCCPackage error: %v&quot;, err)\n\t&#125;\n\n\t&#x2F;&#x2F; Query installed cc\n\tif err :&#x3D; queryInstalled(packageID, info.Orgs[0]); err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;queryInstalled error: %v&quot;, err)\n\t&#125;\n\tfmt.Println(&quot;&gt;&gt; 安装链码成功&quot;)\n\n\t&#x2F;&#x2F; Approve cc\n\tfmt.Println(&quot;&gt;&gt; 组织认可智能合约定义......&quot;)\n\tif err :&#x3D; approveCC(packageID, info.ChaincodeID, info.ChaincodeVersion, sequence, info.ChannelID, info.Orgs, info.OrdererEndpoint); err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;approveCC error: %v&quot;, err)\n\t&#125;\n\n\t&#x2F;&#x2F; Query approve cc\n\tif err:&#x3D;queryApprovedCC(info.ChaincodeID, sequence, info.ChannelID, info.Orgs);err!&#x3D;nil&#123;\n\t\treturn fmt.Errorf(&quot;queryApprovedCC error: %v&quot;, err)\n\t&#125;\n\tfmt.Println(&quot;&gt;&gt; 组织认可智能合约定义完成&quot;)\n\n\t&#x2F;&#x2F; Check commit readiness\n\tfmt.Println(&quot;&gt;&gt; 检查智能合约是否就绪......&quot;)\n\tif err:&#x3D;checkCCCommitReadiness(packageID, info.ChaincodeID, info.ChaincodeVersion, sequence, info.ChannelID, info.Orgs); err!&#x3D;nil&#123;\n\t\treturn fmt.Errorf(&quot;checkCCCommitReadiness error: %v&quot;, err)\n\t&#125;\n\tfmt.Println(&quot;&gt;&gt; 智能合约已经就绪&quot;)\n\n\t&#x2F;&#x2F; Commit cc\n\tfmt.Println(&quot;&gt;&gt; 提交智能合约定义......&quot;)\n\tif err:&#x3D;commitCC(info.ChaincodeID, info.ChaincodeVersion, sequence, info.ChannelID, info.Orgs, info.OrdererEndpoint);err!&#x3D;nil&#123;\n\t\treturn fmt.Errorf(&quot;commitCC error: %v&quot;, err)\n\t&#125;\n\t&#x2F;&#x2F; Query committed cc\n\tif err:&#x3D;queryCommittedCC(info.ChaincodeID, info.ChannelID, sequence, info.Orgs); err!&#x3D;nil&#123;\n\t\treturn fmt.Errorf(&quot;queryCommittedCC error: %v&quot;, err)\n\t&#125;\n\tfmt.Println(&quot;&gt;&gt; 智能合约定义提交完成&quot;)\n\n\t&#x2F;&#x2F; Init cc\n\tfmt.Println(&quot;&gt;&gt; 调用智能合约初始化方法......&quot;)\n\tif err:&#x3D;initCC(info.ChaincodeID, upgrade, info.ChannelID, info.Orgs[0], sdk); err!&#x3D;nil&#123;\n\t\treturn fmt.Errorf(&quot;initCC error: %v&quot;, err)\n\t&#125;\n\tfmt.Println(&quot;&gt;&gt; 完成智能合约初始化&quot;)\n\treturn nil\n&#125;\n\nfunc packageCC(ccName, ccVersion, ccpath string) (string, []byte, error) &#123;\n\tlabel :&#x3D; ccName + &quot;_&quot; + ccVersion\n\tdesc :&#x3D; &amp;lcpackager.Descriptor&#123;\n\t\tPath:  ccpath,\n\t\tType:  pb.ChaincodeSpec_GOLANG,\n\t\tLabel: label,\n\t&#125;\n\tccPkg, err :&#x3D; lcpackager.NewCCPackage(desc)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, nil, fmt.Errorf(&quot;Package chaincode source error: %v&quot;, err)\n\t&#125;\n\treturn desc.Label, ccPkg, nil\n&#125;\n\nfunc installCC(label string, ccPkg []byte, orgs []*OrgInfo) error &#123;\n\tinstallCCReq :&#x3D; resmgmt.LifecycleInstallCCRequest&#123;\n\t\tLabel:   label,\n\t\tPackage: ccPkg,\n\t&#125;\n\n\tpackageID :&#x3D; lcpackager.ComputePackageID(installCCReq.Label, installCCReq.Package)\n\tfor _, org :&#x3D; range orgs &#123;\n\t\torgPeers, err :&#x3D; DiscoverLocalPeers(*org.OrgAdminClientContext, org.OrgPeerNum)\n\t\tif err !&#x3D; nil &#123;\n\t\t\tfmt.Errorf(&quot;DiscoverLocalPeers error: %v&quot;, err)\n\t\t&#125;\n\t\tif flag, _ :&#x3D; checkInstalled(packageID, orgPeers[0], org.OrgResMgmt); flag &#x3D;&#x3D; false &#123;\n\t\t\tif _, err :&#x3D; org.OrgResMgmt.LifecycleInstallCC(installCCReq, resmgmt.WithTargets(orgPeers...), resmgmt.WithRetry(retry.DefaultResMgmtOpts)); err !&#x3D; nil &#123;\n\t\t\t\treturn fmt.Errorf(&quot;LifecycleInstallCC error: %v&quot;, err)\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\treturn nil\n&#125;\n\nfunc getInstalledCCPackage(packageID string, org *OrgInfo) error &#123;\n\t&#x2F;&#x2F; use org1\n\torgPeers, err :&#x3D; DiscoverLocalPeers(*org.OrgAdminClientContext, 1)\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;DiscoverLocalPeers error: %v&quot;, err)\n\t&#125;\n\n\tif _, err :&#x3D; org.OrgResMgmt.LifecycleGetInstalledCCPackage(packageID, resmgmt.WithTargets([]fab.Peer&#123;orgPeers[0]&#125;...)); err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;LifecycleGetInstalledCCPackage error: %v&quot;, err)\n\t&#125;\n\treturn nil\n&#125;\n\nfunc queryInstalled(packageID string, org *OrgInfo) error &#123;\n\torgPeers, err :&#x3D; DiscoverLocalPeers(*org.OrgAdminClientContext, 1)\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;DiscoverLocalPeers error: %v&quot;, err)\n\t&#125;\n\tresp1, err :&#x3D; org.OrgResMgmt.LifecycleQueryInstalledCC(resmgmt.WithTargets([]fab.Peer&#123;orgPeers[0]&#125;...))\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;LifecycleQueryInstalledCC error: %v&quot;, err)\n\t&#125;\n\tpackageID1 :&#x3D; &quot;&quot;\n\tfor _, t :&#x3D; range resp1 &#123;\n\t\tif t.PackageID &#x3D;&#x3D; packageID &#123;\n\t\t\tpackageID1 &#x3D; t.PackageID\n\t\t&#125;\n\t&#125;\n\tif !strings.EqualFold(packageID, packageID1) &#123;\n\t\treturn fmt.Errorf(&quot;check package id error&quot;)\n\t&#125;\n\treturn nil\n&#125;\n\nfunc checkInstalled(packageID string, peer fab.Peer, client *resmgmt.Client) (bool, error) &#123;\n\tflag :&#x3D; false\n\tresp1, err :&#x3D; client.LifecycleQueryInstalledCC(resmgmt.WithTargets(peer))\n\tif err !&#x3D; nil &#123;\n\t\treturn flag, fmt.Errorf(&quot;LifecycleQueryInstalledCC error: %v&quot;, err)\n\t&#125;\n\tfor _, t :&#x3D; range resp1 &#123;\n\t\tif t.PackageID &#x3D;&#x3D; packageID &#123;\n\t\t\tflag &#x3D; true\n\t\t&#125;\n\t&#125;\n\treturn flag, nil\n&#125;\n\nfunc approveCC(packageID string, ccName, ccVersion string, sequence int64, channelID string, orgs []*OrgInfo, ordererEndpoint string) error &#123;\n\tmspIDs :&#x3D; []string&#123;&#125;\n\tfor _, org :&#x3D; range orgs &#123;\n\t\tmspIDs &#x3D; append(mspIDs, org.OrgMspId)\n\t&#125;\n\tccPolicy :&#x3D; policydsl.SignedByNOutOfGivenRole(int32(len(mspIDs)), mb.MSPRole_MEMBER, mspIDs)\n\tapproveCCReq :&#x3D; resmgmt.LifecycleApproveCCRequest&#123;\n\t\tName:              ccName,\n\t\tVersion:           ccVersion,\n\t\tPackageID:         packageID,\n\t\tSequence:          sequence,\n\t\tEndorsementPlugin: &quot;escc&quot;,\n\t\tValidationPlugin:  &quot;vscc&quot;,\n\t\tSignaturePolicy:   ccPolicy,\n\t\tInitRequired:      true,\n\t&#125;\n\n\tfor _, org :&#x3D; range orgs&#123;\n\t\torgPeers, err :&#x3D; DiscoverLocalPeers(*org.OrgAdminClientContext, org.OrgPeerNum)\n\t\tfmt.Printf(&quot;&gt;&gt;&gt; chaincode approved by %s peers:\\n&quot;, org.OrgName)\n\t\tfor _, p :&#x3D; range orgPeers &#123;\n\t\t\tfmt.Printf(&quot;\t%s\\n&quot;, p.URL())\n\t\t&#125;\n\n\t\tif err!&#x3D;nil&#123;\n\t\t\treturn fmt.Errorf(&quot;DiscoverLocalPeers error: %v&quot;, err)\n\t\t&#125;\n\t\tif _, err :&#x3D; org.OrgResMgmt.LifecycleApproveCC(channelID, approveCCReq, resmgmt.WithTargets(orgPeers...), resmgmt.WithOrdererEndpoint(ordererEndpoint), resmgmt.WithRetry(retry.DefaultResMgmtOpts));err !&#x3D; nil &#123;\n\t\t\tfmt.Errorf(&quot;LifecycleApproveCC error: %v&quot;, err)\n\t\t&#125;\n\t&#125;\n\treturn nil\n&#125;\n\nfunc queryApprovedCC(ccName string, sequence int64, channelID string, orgs []*OrgInfo) error &#123;\n\tqueryApprovedCCReq :&#x3D; resmgmt.LifecycleQueryApprovedCCRequest&#123;\n\t\tName:     ccName,\n\t\tSequence: sequence,\n\t&#125;\n\n\tfor _, org :&#x3D; range orgs&#123;\n\t\torgPeers, err :&#x3D; DiscoverLocalPeers(*org.OrgAdminClientContext, org.OrgPeerNum)\n\t\tif err!&#x3D;nil&#123;\n\t\t\treturn fmt.Errorf(&quot;DiscoverLocalPeers error: %v&quot;, err)\n\t\t&#125;\n\t\t&#x2F;&#x2F; Query approve cc\n\t\tfor _, p :&#x3D; range orgPeers &#123;\n\t\t\tresp, err :&#x3D; retry.NewInvoker(retry.New(retry.TestRetryOpts)).Invoke(\n\t\t\t\tfunc() (interface&#123;&#125;, error) &#123;\n\t\t\t\t\tresp1, err :&#x3D; org.OrgResMgmt.LifecycleQueryApprovedCC(channelID, queryApprovedCCReq, resmgmt.WithTargets(p))\n\t\t\t\t\tif err !&#x3D; nil &#123;\n\t\t\t\t\t\treturn nil, status.New(status.TestStatus, status.GenericTransient.ToInt32(), fmt.Sprintf(&quot;LifecycleQueryApprovedCC returned error: %v&quot;, err), nil)\n\t\t\t\t\t&#125;\n\t\t\t\t\treturn resp1, err\n\t\t\t\t&#125;,\n\t\t\t)\n\t\t\tif err !&#x3D; nil &#123;\n\t\t\t\treturn fmt.Errorf(&quot;Org %s Peer %s NewInvoker error: %v&quot;, org.OrgName, p.URL(), err)\n\t\t\t&#125;\n\t\t\tif resp&#x3D;&#x3D;nil&#123;\n\t\t\t\treturn fmt.Errorf(&quot;Org %s Peer %s Got nil invoker&quot;, org.OrgName, p.URL())\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\treturn nil\n&#125;\n\nfunc checkCCCommitReadiness(packageID string, ccName, ccVersion string, sequence int64, channelID string, orgs []*OrgInfo) error &#123;\n\tmspIds :&#x3D; []string&#123;&#125;\n\tfor _, org :&#x3D; range orgs &#123;\n\t\tmspIds &#x3D; append(mspIds, org.OrgMspId)\n\t&#125;\n\tccPolicy :&#x3D; policydsl.SignedByNOutOfGivenRole(int32(len(mspIds)), mb.MSPRole_MEMBER, mspIds)\n\treq :&#x3D; resmgmt.LifecycleCheckCCCommitReadinessRequest&#123;\n\t\tName:              ccName,\n\t\tVersion:           ccVersion,\n\t\t&#x2F;&#x2F;PackageID:         packageID,\n\t\tEndorsementPlugin: &quot;escc&quot;,\n\t\tValidationPlugin:  &quot;vscc&quot;,\n\t\tSignaturePolicy:   ccPolicy,\n\t\tSequence:          sequence,\n\t\tInitRequired:      true,\n\t&#125;\n\tfor _, org :&#x3D; range orgs&#123;\n\t\torgPeers, err :&#x3D; DiscoverLocalPeers(*org.OrgAdminClientContext, org.OrgPeerNum)\n\t\tif err!&#x3D;nil&#123;\n\t\t\tfmt.Errorf(&quot;DiscoverLocalPeers error: %v&quot;, err)\n\t\t&#125;\n\t\tfor _, p :&#x3D; range orgPeers &#123;\n\t\t\tresp, err :&#x3D; retry.NewInvoker(retry.New(retry.TestRetryOpts)).Invoke(\n\t\t\t\tfunc() (interface&#123;&#125;, error) &#123;\n\t\t\t\t\tresp1, err :&#x3D; org.OrgResMgmt.LifecycleCheckCCCommitReadiness(channelID, req, resmgmt.WithTargets(p))\n\t\t\t\t\tfmt.Printf(&quot;LifecycleCheckCCCommitReadiness cc &#x3D; %v, &#x3D; %v\\n&quot;, ccName, resp1)\n\t\t\t\t\tif err !&#x3D; nil &#123;\n\t\t\t\t\t\treturn nil, status.New(status.TestStatus, status.GenericTransient.ToInt32(), fmt.Sprintf(&quot;LifecycleCheckCCCommitReadiness returned error: %v&quot;, err), nil)\n\t\t\t\t\t&#125;\n\t\t\t\t\tflag :&#x3D; true\n\t\t\t\t\tfor _, r :&#x3D; range resp1.Approvals &#123;\n\t\t\t\t\t\tflag &#x3D; flag &amp;&amp; r\n\t\t\t\t\t&#125;\n\t\t\t\t\tif !flag &#123;\n\t\t\t\t\t\treturn nil, status.New(status.TestStatus, status.GenericTransient.ToInt32(), fmt.Sprintf(&quot;LifecycleCheckCCCommitReadiness returned : %v&quot;, resp1), nil)\n\t\t\t\t\t&#125;\n\t\t\t\t\treturn resp1, err\n\t\t\t\t&#125;,\n\t\t\t)\n\t\t\tif err !&#x3D; nil &#123;\n\t\t\t\treturn fmt.Errorf(&quot;NewInvoker error: %v&quot;, err)\n\t\t\t&#125;\n\t\t\tif resp&#x3D;&#x3D;nil&#123;\n\t\t\t\treturn fmt.Errorf(&quot;Got nill invoker response&quot;)\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\n\treturn nil\n&#125;\n\nfunc commitCC(ccName, ccVersion string, sequence int64, channelID string, orgs []*OrgInfo, ordererEndpoint string) error&#123;\n\tmspIDs :&#x3D; []string&#123;&#125;\n\tfor _, org :&#x3D; range orgs &#123;\n\t\tmspIDs &#x3D; append(mspIDs, org.OrgMspId)\n\t&#125;\n\tccPolicy :&#x3D; policydsl.SignedByNOutOfGivenRole(int32(len(mspIDs)), mb.MSPRole_MEMBER, mspIDs)\n\n\treq :&#x3D; resmgmt.LifecycleCommitCCRequest&#123;\n\t\tName:              ccName,\n\t\tVersion:           ccVersion,\n\t\tSequence:          sequence,\n\t\tEndorsementPlugin: &quot;escc&quot;,\n\t\tValidationPlugin:  &quot;vscc&quot;,\n\t\tSignaturePolicy:   ccPolicy,\n\t\tInitRequired:      true,\n\t&#125;\n\t_, err :&#x3D; orgs[0].OrgResMgmt.LifecycleCommitCC(channelID, req, resmgmt.WithOrdererEndpoint(ordererEndpoint), resmgmt.WithRetry(retry.DefaultResMgmtOpts))\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;LifecycleCommitCC error: %v&quot;, err)\n\t&#125;\n\treturn nil\n&#125;\n\nfunc queryCommittedCC( ccName string, channelID string, sequence int64, orgs []*OrgInfo) error &#123;\n\treq :&#x3D; resmgmt.LifecycleQueryCommittedCCRequest&#123;\n\t\tName: ccName,\n\t&#125;\n\n\tfor _, org :&#x3D; range orgs &#123;\n\t\torgPeers, err :&#x3D; DiscoverLocalPeers(*org.OrgAdminClientContext, org.OrgPeerNum)\n\t\tif err!&#x3D;nil&#123;\n\t\t\treturn fmt.Errorf(&quot;DiscoverLocalPeers error: %v&quot;, err)\n\t\t&#125;\n\t\tfor _, p :&#x3D; range orgPeers &#123;\n\t\t\tresp, err :&#x3D; retry.NewInvoker(retry.New(retry.TestRetryOpts)).Invoke(\n\t\t\t\tfunc() (interface&#123;&#125;, error) &#123;\n\t\t\t\t\tresp1, err :&#x3D; org.OrgResMgmt.LifecycleQueryCommittedCC(channelID, req, resmgmt.WithTargets(p))\n\t\t\t\t\tif err !&#x3D; nil &#123;\n\t\t\t\t\t\treturn nil, status.New(status.TestStatus, status.GenericTransient.ToInt32(), fmt.Sprintf(&quot;LifecycleQueryCommittedCC returned error: %v&quot;, err), nil)\n\t\t\t\t\t&#125;\n\t\t\t\t\tflag :&#x3D; false\n\t\t\t\t\tfor _, r :&#x3D; range resp1 &#123;\n\t\t\t\t\t\tif r.Name &#x3D;&#x3D; ccName &amp;&amp; r.Sequence &#x3D;&#x3D; sequence &#123;\n\t\t\t\t\t\t\tflag &#x3D; true\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t&#125;\n\t\t\t\t\t&#125;\n\t\t\t\t\tif !flag &#123;\n\t\t\t\t\t\treturn nil, status.New(status.TestStatus, status.GenericTransient.ToInt32(), fmt.Sprintf(&quot;LifecycleQueryCommittedCC returned : %v&quot;, resp1), nil)\n\t\t\t\t\t&#125;\n\t\t\t\t\treturn resp1, err\n\t\t\t\t&#125;,\n\t\t\t)\n\t\t\tif err !&#x3D; nil &#123;\n\t\t\t\treturn  fmt.Errorf(&quot;NewInvoker error: %v&quot;, err)\n\t\t\t&#125;\n\t\t\tif resp&#x3D;&#x3D;nil&#123;\n\t\t\t\treturn fmt.Errorf(&quot;Got nil invoker response&quot;)\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\treturn nil\n&#125;\n\nfunc initCC(ccName string, upgrade bool, channelID string, org *OrgInfo, sdk *fabsdk.FabricSDK) error &#123;\n\t&#x2F;&#x2F;prepare channel client context using client context\n\tclientChannelContext :&#x3D; sdk.ChannelContext(channelID, fabsdk.WithUser(org.OrgUser), fabsdk.WithOrg(org.OrgName))\n\t&#x2F;&#x2F; Channel client is used to query and execute transactions (Org1 is default org)\n\tclient, err :&#x3D; channel.New(clientChannelContext)\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;Failed to create new channel client: %s&quot;, err)\n\t&#125;\n\n\t&#x2F;&#x2F; init\n\t_, err &#x3D; client.Execute(channel.Request&#123;ChaincodeID: ccName, Fcn: &quot;init&quot;, Args: nil, IsInit: true&#125;,\n\t\tchannel.WithRetry(retry.DefaultChannelOpts))\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;Failed to init: %s&quot;, err)\n\t&#125;\n\treturn nil\n&#125;</code></pre>\n<h4 id=\"逐个分析-3\"><a href=\"#逐个分析-3\" class=\"headerlink\" title=\"逐个分析\"></a>逐个分析</h4><h5 id=\"打包链码\"><a href=\"#打包链码\" class=\"headerlink\" title=\"打包链码\"></a>打包链码</h5></blockquote>\n<p>在被安装到peer节点之前，链码需要被打包进一个tar文件。当你创建一个链码包的时候，你需要提交一个用来创建简明易读的包描述的链码包标签。<br>使用fabric-go-sdk将会自动以这个格式来创建文件。<br>链码需要被打包进一个以 .tar.gz 文件扩展名结尾的tar文件。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func packageCC(ccName, ccVersion, ccpath string) (string, []byte, error) &#123;\n   \n\tlabel :&#x3D; ccName + &quot;_&quot; + ccVersion &#x2F;&#x2F; 链码的标签\n\tdesc :&#x3D; &amp;lcpackager.Descriptor&#123;   &#x2F;&#x2F; 使用lcpackager包中的Descriptor结构体添加描述信息\n\t\tPath:  ccpath, &#x2F;&#x2F;链码路径\n\t\tType:  pb.ChaincodeSpec_GOLANG, &#x2F;&#x2F;链码的语言\n\t\tLabel: label, &#x2F;&#x2F; 链码的标签\n\t&#125;\n\tccPkg, err :&#x3D; lcpackager.NewCCPackage(desc) &#x2F;&#x2F; 使用lcpackager包中NewCCPackage方法对链码进行打包\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, nil, fmt.Errorf(&quot;Package chaincode source error: %v&quot;, err)\n\t&#125;\n\treturn desc.Label, ccPkg, nil\n&#125;\n</code></pre>\n<h5 id=\"安装链码\"><a href=\"#安装链码\" class=\"headerlink\" title=\"安装链码\"></a>安装链码</h5><blockquote>\n<p>你需要在每个要执行和背书交易的peer节点上安装链码包。使用SDK时，你需要以 Peer Administrator（peer所在组织的管理员） 的身份来完成这步。链码安装后，你的 peer 节点会构建链码，并且如果你的链码有问题，会返回一个构建错误。建议每个组织只打包链码一次，然后安装相同的包在属于他们组织的每一个peer节点上。如果某个通道希望确保每个组织都运行同样的链码，某一个组织可以打包链码并通过带外数据（不通过链上）把它发送给其他通道成员.<br>通过指令成功安装链码后会返回链码包标识符，它是包标签和包哈希值的结合。这个包标识符用来关联安装在你的peer节点上的链码包已被批准的链码。为下一步的操作保存这个标识符。你也可以查询安装在peer节点上的包来查看包标识符。</p></blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func installCC(label string, ccPkg []byte, orgs []*OrgInfo) error &#123;\n\tinstallCCReq :&#x3D; resmgmt.LifecycleInstallCCRequest&#123;\n\t\tLabel:   label,\n\t\tPackage: ccPkg,\n\t&#125;\n\t&#x2F;&#x2F; 使用lcpackager中的ComputePackageID方法查询并返回链码的packageID\n\tpackageID :&#x3D; lcpackager.ComputePackageID(installCCReq.Label, installCCReq.Package)\n\tfor _, org :&#x3D; range orgs &#123;\n\t\torgPeers, err :&#x3D; DiscoverLocalPeers(*org.OrgAdminClientContext, org.OrgPeerNum)\n\t\tif err !&#x3D; nil &#123;\n\t\t\tfmt.Errorf(&quot;DiscoverLocalPeers error: %v&quot;, err)\n\t\t&#125;\n        &#x2F;&#x2F; 检查是否安装链码，如果未安装则继续执行\n\t\tif flag, _ :&#x3D; checkInstalled(packageID, orgPeers[0], org.OrgResMgmt); flag &#x3D;&#x3D; false &#123;\n            &#x2F;&#x2F; 使用resmgmt中的LifecycleInstallCC方法安装链码，其中WithRetry方法为安装不成功时重试安装，DefaultResMgmtOpts为默认的重试安装规则\n\t\t\tif _, err :&#x3D; org.OrgResMgmt.LifecycleInstallCC(installCCReq, resmgmt.WithTargets(orgPeers...), resmgmt.WithRetry(retry.DefaultResMgmtOpts)); err !&#x3D; nil &#123;\n\t\t\t\treturn fmt.Errorf(&quot;LifecycleInstallCC error: %v&quot;, err)\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\treturn nil\n&#125;\n&#x2F;&#x2F;检查是否安装过链码\nfunc checkInstalled(packageID string, peer fab.Peer, client *resmgmt.Client) (bool, error) &#123;\n\tflag :&#x3D; false\n\tresp1, err :&#x3D; client.LifecycleQueryInstalledCC(resmgmt.WithTargets(peer))\n\tif err !&#x3D; nil &#123;\n\t\treturn flag, fmt.Errorf(&quot;LifecycleQueryInstalledCC error: %v&quot;, err)\n\t&#125;\n\tfor _, t :&#x3D; range resp1 &#123;\n\t\tif t.PackageID &#x3D;&#x3D; packageID &#123; \n\t\t\tflag &#x3D; true\n\t\t&#125;\n\t&#125;\n\treturn flag, nil\n&#125;</code></pre>\n<h5 id=\"获取已安装链码包\"><a href=\"#获取已安装链码包\" class=\"headerlink\" title=\"获取已安装链码包\"></a>获取已安装链码包</h5><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func getInstalledCCPackage(packageID string, org *OrgInfo) error &#123;\n\t&#x2F;&#x2F; use org1\n\torgPeers, err :&#x3D; DiscoverLocalPeers(*org.OrgAdminClientContext, 1)\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;DiscoverLocalPeers error: %v&quot;, err)\n\t&#125;\n\t&#x2F;&#x2F; 使用resmgmt中的LifecycleGetInstalledCCPackage方法，对于给定的packageID检索已安装的链码包\n\tif _, err :&#x3D; org.OrgResMgmt.LifecycleGetInstalledCCPackage(packageID, resmgmt.WithTargets([]fab.Peer&#123;orgPeers[0]&#125;...)); err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;LifecycleGetInstalledCCPackage error: %v&quot;, err)\n\t&#125;\n\treturn nil\n&#125;\n</code></pre>\n<h5 id=\"查询安装\"><a href=\"#查询安装\" class=\"headerlink\" title=\"查询安装\"></a>查询安装</h5><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func queryInstalled(packageID string, org *OrgInfo) error &#123;\n\torgPeers, err :&#x3D; DiscoverLocalPeers(*org.OrgAdminClientContext, 1)\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;DiscoverLocalPeers error: %v&quot;, err)\n\t&#125;\n    &#x2F;&#x2F; 使用resmgmt中的LifecycleQueryInstalledCC方法，返回在指定节点上安装的链码packageID\n\tresp1, err :&#x3D; org.OrgResMgmt.LifecycleQueryInstalledCC(resmgmt.WithTargets([]fab.Peer&#123;orgPeers[0]&#125;...))\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;LifecycleQueryInstalledCC error: %v&quot;, err)\n\t&#125;\n\tpackageID1 :&#x3D; &quot;&quot;\n\tfor _, t :&#x3D; range resp1 &#123;\n\t\tif t.PackageID &#x3D;&#x3D; packageID &#123;\n\t\t\tpackageID1 &#x3D; t.PackageID\n\t\t&#125;\n\t&#125;\n    &#x2F;&#x2F; 查询的packageID与给定的packageID不一致则报错\n\tif !strings.EqualFold(packageID, packageID1) &#123;\n\t\treturn fmt.Errorf(&quot;check package id error&quot;)\n\t&#125;\n\treturn nil\n&#125;\n</code></pre>\n<h5 id=\"各组织批准链码\"><a href=\"#各组织批准链码\" class=\"headerlink\" title=\"各组织批准链码\"></a>各组织批准链码</h5><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func approveCC(packageID string, ccName, ccVersion string, sequence int64, channelID string, orgs []*OrgInfo, ordererEndpoint string) error &#123;\n\tmspIDs :&#x3D; []string&#123;&#125;\n    &#x2F;&#x2F; 获取各个组织的mspID\n\tfor _, org :&#x3D; range orgs &#123;\n\t\tmspIDs &#x3D; append(mspIDs, org.OrgMspId)\n\t&#125;\n    &#x2F;&#x2F; 签名策略，由所有给出的mspid签名\n\tccPolicy :&#x3D; policydsl.SignedByNOutOfGivenRole(int32(len(mspIDs)), mb.MSPRole_MEMBER, mspIDs)\n    &#x2F;&#x2F; approve所需参数\n\tapproveCCReq :&#x3D; resmgmt.LifecycleApproveCCRequest&#123;\n\t\tName:              ccName,      &#x2F;&#x2F; 链码名\n\t\tVersion:           ccVersion,   &#x2F;&#x2F; 版本\n\t\tPackageID:         packageID,   &#x2F;&#x2F; 链码包id\n\t\tSequence:          sequence,    &#x2F;&#x2F; 序列号\n\t\tEndorsementPlugin: &quot;escc&quot;,      &#x2F;&#x2F; 系统内置链码escc\n\t\tValidationPlugin:  &quot;vscc&quot;,      &#x2F;&#x2F; 系统内置链码vscc\n\t\tSignaturePolicy:   ccPolicy,    &#x2F;&#x2F; 组织签名策略\n\t\tInitRequired:      true,        &#x2F;&#x2F; 是否初始化\n\t&#125;\n\n\tfor _, org :&#x3D; range orgs&#123;\n\t\torgPeers, err :&#x3D; DiscoverLocalPeers(*org.OrgAdminClientContext, org.OrgPeerNum)\n\t\tfmt.Printf(&quot;&gt;&gt;&gt; chaincode approved by %s peers:\\n&quot;, org.OrgName)\n\t\tfor _, p :&#x3D; range orgPeers &#123;\n\t\t\tfmt.Printf(&quot;\t%s\\n&quot;, p.URL())\n\t\t&#125;\n\n\t\tif err!&#x3D;nil&#123;\n\t\t\treturn fmt.Errorf(&quot;DiscoverLocalPeers error: %v&quot;, err)\n\t\t&#125;\n        &#x2F;&#x2F; 使用resmgmt中的LifecycleApproveCC方法为组织批准链码\n\t\tif _, err :&#x3D; org.OrgResMgmt.LifecycleApproveCC(channelID, approveCCReq, resmgmt.WithTargets(orgPeers...), resmgmt.WithOrdererEndpoint(ordererEndpoint), resmgmt.WithRetry(retry.DefaultResMgmtOpts));err !&#x3D; nil &#123;\n\t\t\tfmt.Errorf(&quot;LifecycleApproveCC error: %v&quot;, err)\n\t\t&#125;\n\t&#125;\n\treturn nil\n&#125;\n</code></pre>\n<h5 id=\"查询已批准的链码\"><a href=\"#查询已批准的链码\" class=\"headerlink\" title=\"查询已批准的链码\"></a>查询已批准的链码</h5><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func queryApprovedCC(ccName string, sequence int64, channelID string, orgs []*OrgInfo) error &#123;\n\t&#x2F;&#x2F; queryApproved所需参数\n    queryApprovedCCReq :&#x3D; resmgmt.LifecycleQueryApprovedCCRequest&#123;\n\t\tName:     ccName,  &#x2F;&#x2F; 链码名称\n\t\tSequence: sequence,&#x2F;&#x2F; 序列号\n\t&#125;\n\n\tfor _, org :&#x3D; range orgs&#123;\n\t\torgPeers, err :&#x3D; DiscoverLocalPeers(*org.OrgAdminClientContext, org.OrgPeerNum)\n\t\tif err!&#x3D;nil&#123;\n\t\t\treturn fmt.Errorf(&quot;DiscoverLocalPeers error: %v&quot;, err)\n\t\t&#125;\n\t\t&#x2F;&#x2F; Query approve cc\n\t\tfor _, p :&#x3D; range orgPeers &#123;\n\t\t\tresp, err :&#x3D; retry.NewInvoker(retry.New(retry.TestRetryOpts)).Invoke(\n\t\t\t\tfunc() (interface&#123;&#125;, error) &#123;\n                    &#x2F;&#x2F; LifecycleQueryApprovedCC返回有关已批准的链码定义的信息\n\t\t\t\t\tresp1, err :&#x3D; org.OrgResMgmt.LifecycleQueryApprovedCC(channelID, queryApprovedCCReq, resmgmt.WithTargets(p))\n\t\t\t\t\tif err !&#x3D; nil &#123;\n\t\t\t\t\t\treturn nil, status.New(status.TestStatus, status.GenericTransient.ToInt32(), fmt.Sprintf(&quot;LifecycleQueryApprovedCC returned error: %v&quot;, err), nil)\n\t\t\t\t\t&#125;\n\t\t\t\t\treturn resp1, err\n\t\t\t\t&#125;,\n\t\t\t)\n\t\t\tif err !&#x3D; nil &#123;\n\t\t\t\treturn fmt.Errorf(&quot;Org %s Peer %s NewInvoker error: %v&quot;, org.OrgName, p.URL(), err)\n\t\t\t&#125;\n\t\t\tif resp&#x3D;&#x3D;nil&#123;\n\t\t\t\treturn fmt.Errorf(&quot;Org %s Peer %s Got nil invoker&quot;, org.OrgName, p.URL())\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\treturn nil\n&#125;\n</code></pre>\n<h5 id=\"检查智能合约是否就绪\"><a href=\"#检查智能合约是否就绪\" class=\"headerlink\" title=\"检查智能合约是否就绪\"></a>检查智能合约是否就绪</h5><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func checkCCCommitReadiness(packageID string, ccName, ccVersion string, sequence int64, channelID string, orgs []*OrgInfo) error &#123;\n\tmspIds :&#x3D; []string&#123;&#125;\n\tfor _, org :&#x3D; range orgs &#123;\n\t\tmspIds &#x3D; append(mspIds, org.OrgMspId)\n\t&#125;\n    &#x2F;&#x2F; 签名策略，由所有给出的mspid签名\n\tccPolicy :&#x3D; policydsl.SignedByNOutOfGivenRole(int32(len(mspIds)), mb.MSPRole_MEMBER, mspIds)\n    &#x2F;&#x2F; 所需所有参数，同上\n\treq :&#x3D; resmgmt.LifecycleCheckCCCommitReadinessRequest&#123;\n\t\tName:              ccName,\n\t\tVersion:           ccVersion,\n\t\t&#x2F;&#x2F;PackageID:         packageID,\n\t\tEndorsementPlugin: &quot;escc&quot;,\n\t\tValidationPlugin:  &quot;vscc&quot;,\n\t\tSignaturePolicy:   ccPolicy,\n\t\tSequence:          sequence,\n\t\tInitRequired:      true,\n\t&#125;\n\tfor _, org :&#x3D; range orgs&#123;\n\t\torgPeers, err :&#x3D; DiscoverLocalPeers(*org.OrgAdminClientContext, org.OrgPeerNum)\n\t\tif err!&#x3D;nil&#123;\n\t\t\tfmt.Errorf(&quot;DiscoverLocalPeers error: %v&quot;, err)\n\t\t&#125;\n\t\tfor _, p :&#x3D; range orgPeers &#123;\n\t\t\tresp, err :&#x3D; retry.NewInvoker(retry.New(retry.TestRetryOpts)).Invoke(\n\t\t\t\tfunc() (interface&#123;&#125;, error) &#123;\n                    &#x2F;&#x2F; 使用resmgmt中的LifecycleCheckCCCommitReadiness方法检查链代码的“提交准备”,返回组织批准。\n\t\t\t\t\tresp1, err :&#x3D; org.OrgResMgmt.LifecycleCheckCCCommitReadiness(channelID, req, resmgmt.WithTargets(p))\n\t\t\t\t\tfmt.Printf(&quot;LifecycleCheckCCCommitReadiness cc &#x3D; %v, &#x3D; %v\\n&quot;, ccName, resp1)\n\t\t\t\t\tif err !&#x3D; nil &#123;\n\t\t\t\t\t\treturn nil, status.New(status.TestStatus, status.GenericTransient.ToInt32(), fmt.Sprintf(&quot;LifecycleCheckCCCommitReadiness returned error: %v&quot;, err), nil)\n\t\t\t\t\t&#125;\n\t\t\t\t\tflag :&#x3D; true\n\t\t\t\t\tfor _, r :&#x3D; range resp1.Approvals &#123;\n\t\t\t\t\t\tflag &#x3D; flag &amp;&amp; r\n\t\t\t\t\t&#125;\n\t\t\t\t\tif !flag &#123;\n\t\t\t\t\t\treturn nil, status.New(status.TestStatus, status.GenericTransient.ToInt32(), fmt.Sprintf(&quot;LifecycleCheckCCCommitReadiness returned : %v&quot;, resp1), nil)\n\t\t\t\t\t&#125;\n\t\t\t\t\treturn resp1, err\n\t\t\t\t&#125;,\n\t\t\t)\n\t\t\tif err !&#x3D; nil &#123;\n\t\t\t\treturn fmt.Errorf(&quot;NewInvoker error: %v&quot;, err)\n\t\t\t&#125;\n\t\t\tif resp&#x3D;&#x3D;nil&#123;\n\t\t\t\treturn fmt.Errorf(&quot;Got nill invoker response&quot;)\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\n\treturn nil\n&#125;\n</code></pre>\n<h5 id=\"提交智能合约定义\"><a href=\"#提交智能合约定义\" class=\"headerlink\" title=\"提交智能合约定义\"></a>提交智能合约定义</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>一旦足够多的通道成员同意一个链码定义，某个组织能够提交定义到通道。你可以用上述 checkcommitreadiness 方法在将链码定义提交到通道之前，基于哪个通道成员已经批准了该定义，来检查提交链码定义是否应该成功。（根据通道成员同意的状况，来判断提交是否可能成功）。提交交易请求首先发送给通道成员的 peer节点，peer节点会查询链码定义被他们组织同意的状况，并且为定义背书如果所在组织已经同意了。交易然后提交给排序服务，排序服务会把链码定义提交给通道。提交定义交易需要以 Organization Administrator 身份来提交。<br>链码在被成功提交到通道之前，需要被同意的组织的数量是通过 Channel/Application/LifecycleEndorsement 策略来管理的。默认情况下，这个策略需要通道中大多数的组织来给交易背书。生命周期背书策略不同于链码背书策略。例如，尽管一个链码背书策略只需要一个或两个组织的签名，根据默认策略大多数的通道成员仍然需要批准链码定义。当提交一个通道定义，你需要面向足够多的 peer 组织，以确保你的生命周期背书策略被满足。<br>你也可以设置 Channel/Application/LifecycleEndorsement 策略为一个签名策略并且明确指明通道上可以批准链码定义的组织集合。这允许你创建一个其中大多数组织作为链码管理者并且治理通道业务逻辑的通道。如果你的通道有大量的Idemix（身份混合，实现零知识证明）组织，你也可以用一个签名策略（策略只需要一个签名），因为这些组织不能批准链码定义或者为链码背书并且可能阻碍通道达成大多数成员同意的结果。<br>一个组织在不安装链码包的条件下能够批准链码定义。如果一个组织不需要使用链码，他们可以在没有包身份的情况下批准一个链码定义来确保生命周期背书策略被满足。<br>在链码定义已经提交到通道上后，链码容器会在所有的链码安装到的 peer 节点上启动，来允许通道成员开始使用链码。可能会花费几分钟的时间来启动链码容器。你可以用链码定义来要求调用 Init 方法初始化链码。如果 Init 方法调用是需要的，链码的第一个调用必须是调用 Init 方法。Init 方法的调用服从于链码的背书策略。</p></blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func commitCC(ccName, ccVersion string, sequence int64, channelID string, orgs []*OrgInfo, ordererEndpoint string) error&#123;\n\tmspIDs :&#x3D; []string&#123;&#125;\n\tfor _, org :&#x3D; range orgs &#123;\n\t\tmspIDs &#x3D; append(mspIDs, org.OrgMspId)\n\t&#125;\n\tccPolicy :&#x3D; policydsl.SignedByNOutOfGivenRole(int32(len(mspIDs)), mb.MSPRole_MEMBER, mspIDs)\n\t&#x2F;&#x2F; commit所需参数信息，内容同上\n\treq :&#x3D; resmgmt.LifecycleCommitCCRequest&#123;\n\t\tName:              ccName,\n\t\tVersion:           ccVersion,\n\t\tSequence:          sequence,\n\t\tEndorsementPlugin: &quot;escc&quot;,\n\t\tValidationPlugin:  &quot;vscc&quot;,\n\t\tSignaturePolicy:   ccPolicy,\n\t\tInitRequired:      true,\n\t&#125;\n    &#x2F;&#x2F; LifecycleCommitCC将链代码提交给给定的通道\n\t_, err :&#x3D; orgs[0].OrgResMgmt.LifecycleCommitCC(channelID, req, resmgmt.WithOrdererEndpoint(ordererEndpoint), resmgmt.WithRetry(retry.DefaultResMgmtOpts))\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;LifecycleCommitCC error: %v&quot;, err)\n\t&#125;\n\treturn nil\n&#125;\n</code></pre>\n<h5 id=\"查询已提交的智能合约定义\"><a href=\"#查询已提交的智能合约定义\" class=\"headerlink\" title=\"查询已提交的智能合约定义\"></a>查询已提交的智能合约定义</h5><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func queryCommittedCC( ccName string, channelID string, sequence int64, orgs []*OrgInfo) error &#123;\n\treq :&#x3D; resmgmt.LifecycleQueryCommittedCCRequest&#123;\n\t\tName: ccName,\n\t&#125;\n\n\tfor _, org :&#x3D; range orgs &#123;\n\t\torgPeers, err :&#x3D; DiscoverLocalPeers(*org.OrgAdminClientContext, org.OrgPeerNum)\n\t\tif err!&#x3D;nil&#123;\n\t\t\treturn fmt.Errorf(&quot;DiscoverLocalPeers error: %v&quot;, err)\n\t\t&#125;\n\t\tfor _, p :&#x3D; range orgPeers &#123;\n\t\t\tresp, err :&#x3D; retry.NewInvoker(retry.New(retry.TestRetryOpts)).Invoke(\n\t\t\t\tfunc() (interface&#123;&#125;, error) &#123;\n                    &#x2F;&#x2F; LifecycleQueryCommittedCC查询给定通道上提交的链码\n\t\t\t\t\tresp1, err :&#x3D; org.OrgResMgmt.LifecycleQueryCommittedCC(channelID, req, resmgmt.WithTargets(p))\n\t\t\t\t\tif err !&#x3D; nil &#123;\n\t\t\t\t\t\treturn nil, status.New(status.TestStatus, status.GenericTransient.ToInt32(), fmt.Sprintf(&quot;LifecycleQueryCommittedCC returned error: %v&quot;, err), nil)\n\t\t\t\t\t&#125;\n\t\t\t\t\tflag :&#x3D; false\n\t\t\t\t\tfor _, r :&#x3D; range resp1 &#123;\n\t\t\t\t\t\tif r.Name &#x3D;&#x3D; ccName &amp;&amp; r.Sequence &#x3D;&#x3D; sequence &#123;\n\t\t\t\t\t\t\tflag &#x3D; true\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t&#125;\n\t\t\t\t\t&#125;\n\t\t\t\t\tif !flag &#123;\n\t\t\t\t\t\treturn nil, status.New(status.TestStatus, status.GenericTransient.ToInt32(), fmt.Sprintf(&quot;LifecycleQueryCommittedCC returned : %v&quot;, resp1), nil)\n\t\t\t\t\t&#125;\n\t\t\t\t\treturn resp1, err\n\t\t\t\t&#125;,\n\t\t\t)\n\t\t\tif err !&#x3D; nil &#123;\n\t\t\t\treturn  fmt.Errorf(&quot;NewInvoker error: %v&quot;, err)\n\t\t\t&#125;\n\t\t\tif resp&#x3D;&#x3D;nil&#123;\n\t\t\t\treturn fmt.Errorf(&quot;Got nil invoker response&quot;)\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\treturn nil\n&#125;\n</code></pre>\n<h5 id=\"智能合约初始化\"><a href=\"#智能合约初始化\" class=\"headerlink\" title=\"智能合约初始化\"></a>智能合约初始化</h5><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func initCC(ccName string, upgrade bool, channelID string, org *OrgInfo, sdk *fabsdk.FabricSDK) error &#123;\n\t&#x2F;&#x2F; 准备通道客户端上下文\n\tclientChannelContext :&#x3D; sdk.ChannelContext(channelID, fabsdk.WithUser(org.OrgUser), fabsdk.WithOrg(org.OrgName))\n\t&#x2F;&#x2F; 通道客户端用于查询执行交易\n\tclient, err :&#x3D; channel.New(clientChannelContext)\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;Failed to create new channel client: %s&quot;, err)\n\t&#125;\n\n\t&#x2F;&#x2F; 调用链码初始化\n\t_, err &#x3D; client.Execute(channel.Request&#123;ChaincodeID: ccName, Fcn: &quot;init&quot;, Args: nil, IsInit: true&#125;,\n\t\tchannel.WithRetry(retry.DefaultChannelOpts))\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;Failed to init: %s&quot;, err)\n\t&#125;\n\treturn nil\n&#125;</code></pre>\n<h5 id=\"调用创建通道函数及加入通道\"><a href=\"#调用创建通道函数及加入通道\" class=\"headerlink\" title=\"调用创建通道函数及加入通道\"></a>调用创建通道函数及加入通道</h5><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func CreateAndJoinChannel(info *SdkEnvInfo) error &#123;\n\tfmt.Println(&quot;&gt;&gt; 开始创建通道......&quot;)\n\tif len(info.Orgs) &#x3D;&#x3D; 0 &#123;\n\t\treturn fmt.Errorf(&quot;通道组织不能为空，请提供组织信息&quot;)\n\t&#125;\n\n\t&#x2F;&#x2F; 获得所有组织的签名信息\n\tsignIds :&#x3D; []msp.SigningIdentity&#123;&#125;\n\tfor _, org :&#x3D; range info.Orgs &#123;\n\t\t&#x2F;&#x2F; Get signing identity that is used to sign create channel request\n\t\torgSignId, err :&#x3D; org.orgMspClient.GetSigningIdentity(org.OrgAdminUser)\n\t\tif err !&#x3D; nil &#123;\n\t\t\treturn fmt.Errorf(&quot;GetSigningIdentity error: %v&quot;, err)\n\t\t&#125;\n\t\tsignIds &#x3D; append(signIds, orgSignId)\n\t&#125;\n\n\t&#x2F;&#x2F; 创建通道，createChannel方法在下面定义\n\tif err :&#x3D; createChannel(signIds, info); err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;Create channel error: %v&quot;, err)\n\t&#125;\n\n\tfmt.Println(&quot;&gt;&gt; 创建通道成功&quot;)\n\n\tfmt.Println(&quot;&gt;&gt; 加入通道......&quot;)\n\tfor _, org :&#x3D; range info.Orgs &#123;\n\t\t&#x2F;&#x2F; 加入通道\n\t\tif err :&#x3D; org.OrgResMgmt.JoinChannel(info.ChannelID, resmgmt.WithRetry(retry.DefaultResMgmtOpts), resmgmt.WithOrdererEndpoint(&quot;orderer.example.com&quot;)); err !&#x3D; nil &#123;\n\t\t\treturn fmt.Errorf(&quot;%s peers failed to JoinChannel: %v&quot;, org.OrgName, err)\n\t\t&#125;\n\t&#125;\n\tfmt.Println(&quot;&gt;&gt; 加入通道成功&quot;)\n\treturn nil\n&#125;</code></pre>\n<h5 id=\"创建通道\"><a href=\"#创建通道\" class=\"headerlink\" title=\"创建通道\"></a>创建通道</h5><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func createChannel(signIDs []msp.SigningIdentity, info *SdkEnvInfo) error &#123;\n\t&#x2F;&#x2F; Channel management client 负责管理通道，如创建更新通道\n\tchMgmtClient, err :&#x3D; resmgmt.New(*info.OrdererClientContext)\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;Channel management client create error: %v&quot;, err)\n\t&#125;\n\n\t&#x2F;&#x2F; 根据channel.tx创建通道\n\treq :&#x3D; resmgmt.SaveChannelRequest&#123;ChannelID: info.ChannelID,\n\t\tChannelConfigPath: info.ChannelConfig,\n\t\tSigningIdentities: signIDs&#125;\n\n\tif _, err :&#x3D; chMgmtClient.SaveChannel(req, resmgmt.WithRetry(retry.DefaultResMgmtOpts), resmgmt.WithOrdererEndpoint(&quot;orderer.example.com&quot;)); err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;error should be nil for SaveChannel of orgchannel: %v&quot;, err)\n\t&#125;\n\n\tfmt.Println(&quot;&gt;&gt;&gt;&gt; 使用每个org的管理员身份更新锚节点配置...&quot;)\n\t&#x2F;&#x2F;根据锚节点文件更新锚节点，与上面创建通道流程相同\n\tfor i, org :&#x3D; range info.Orgs &#123;\n\t\treq &#x3D; resmgmt.SaveChannelRequest&#123;ChannelID: info.ChannelID,\n\t\t\tChannelConfigPath: org.OrgAnchorFile,\n\t\t\tSigningIdentities: []msp.SigningIdentity&#123;signIDs[i]&#125;&#125;\n\n\t\tif _, err &#x3D; org.OrgResMgmt.SaveChannel(req, resmgmt.WithRetry(retry.DefaultResMgmtOpts), resmgmt.WithOrdererEndpoint(&quot;orderer.example.com&quot;)); err !&#x3D; nil &#123;\n\t\t\treturn fmt.Errorf(&quot;SaveChannel for anchor org %s error: %v&quot;, org.OrgName, err)\n\t\t&#125;\n\t&#125;\n\tfmt.Println(&quot;&gt;&gt;&gt;&gt; 使用每个org的管理员身份更新锚节点配置完成&quot;)\n\t\n\treturn nil\n&#125;</code></pre>\n<h5 id=\"智能合约完整生命周期\"><a href=\"#智能合约完整生命周期\" class=\"headerlink\" title=\"智能合约完整生命周期\"></a>智能合约完整生命周期</h5><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func CreateCCLifecycle(info *SdkEnvInfo, sequence int64, upgrade bool, sdk *fabsdk.FabricSDK) error &#123;\n\tif len(info.Orgs) &#x3D;&#x3D; 0 &#123;\n\t\treturn fmt.Errorf(&quot;the number of organization should not be zero.&quot;)\n\t&#125;\n\t&#x2F;&#x2F; 打包链码\n\tfmt.Println(&quot;&gt;&gt; 开始打包链码......&quot;)\n\tlabel, ccPkg, err :&#x3D; packageCC(info.ChaincodeID, info.ChaincodeVersion, info.ChaincodePath)\n\tif err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;pakcagecc error: %v&quot;, err)\n\t&#125;\n\tpackageID :&#x3D; lcpackager.ComputePackageID(label, ccPkg)\n\tfmt.Println(&quot;&gt;&gt; 打包链码成功&quot;)\n\n\t&#x2F;&#x2F; 安装链码\n\tfmt.Println(&quot;&gt;&gt; 开始安装链码......&quot;)\n\tif err :&#x3D; installCC(label, ccPkg, info.Orgs); err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;installCC error: %v&quot;, err)\n\t&#125;\n\n\t&#x2F;&#x2F; 检索已安装链码包\n\tif err :&#x3D; getInstalledCCPackage(packageID, info.Orgs[0]); err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;getInstalledCCPackage error: %v&quot;, err)\n\t&#125;\n\n\t&#x2F;&#x2F; 查询已安装链码\n\tif err :&#x3D; queryInstalled(packageID, info.Orgs[0]); err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;queryInstalled error: %v&quot;, err)\n\t&#125;\n\tfmt.Println(&quot;&gt;&gt; 安装链码成功&quot;)\n\n\t&#x2F;&#x2F; 批准链码\n\tfmt.Println(&quot;&gt;&gt; 组织认可智能合约定义......&quot;)\n\tif err :&#x3D; approveCC(packageID, info.ChaincodeID, info.ChaincodeVersion, sequence, info.ChannelID, info.Orgs, info.OrdererEndpoint); err !&#x3D; nil &#123;\n\t\treturn fmt.Errorf(&quot;approveCC error: %v&quot;, err)\n\t&#125;\n\n\t&#x2F;&#x2F; 查询批准\n\tif err:&#x3D;queryApprovedCC(info.ChaincodeID, sequence, info.ChannelID, info.Orgs);err!&#x3D;nil&#123;\n\t\treturn fmt.Errorf(&quot;queryApprovedCC error: %v&quot;, err)\n\t&#125;\n\tfmt.Println(&quot;&gt;&gt; 组织认可智能合约定义完成&quot;)\n\n\t&#x2F;&#x2F; 检查智能合约是否就绪\n\tfmt.Println(&quot;&gt;&gt; 检查智能合约是否就绪......&quot;)\n\tif err:&#x3D;checkCCCommitReadiness(packageID, info.ChaincodeID, info.ChaincodeVersion, sequence, info.ChannelID, info.Orgs); err!&#x3D;nil&#123;\n\t\treturn fmt.Errorf(&quot;checkCCCommitReadiness error: %v&quot;, err)\n\t&#125;\n\tfmt.Println(&quot;&gt;&gt; 智能合约已经就绪&quot;)\n\n\t&#x2F;&#x2F; Commit\n\tfmt.Println(&quot;&gt;&gt; 提交智能合约定义......&quot;)\n\tif err:&#x3D;commitCC(info.ChaincodeID, info.ChaincodeVersion, sequence, info.ChannelID, info.Orgs, info.OrdererEndpoint);err!&#x3D;nil&#123;\n\t\treturn fmt.Errorf(&quot;commitCC error: %v&quot;, err)\n\t&#125;\n\t&#x2F;&#x2F; 查询Commit结果\n\tif err:&#x3D;queryCommittedCC(info.ChaincodeID, info.ChannelID, sequence, info.Orgs); err!&#x3D;nil&#123;\n\t\treturn fmt.Errorf(&quot;queryCommittedCC error: %v&quot;, err)\n\t&#125;\n\tfmt.Println(&quot;&gt;&gt; 智能合约定义提交完成&quot;)\n\n\t&#x2F;&#x2F; 初始化\n\tfmt.Println(&quot;&gt;&gt; 调用智能合约初始化方法......&quot;)\n\tif err:&#x3D;initCC(info.ChaincodeID, upgrade, info.ChannelID, info.Orgs[0], sdk); err!&#x3D;nil&#123;\n\t\treturn fmt.Errorf(&quot;initCC error: %v&quot;, err)\n\t&#125;\n\tfmt.Println(&quot;&gt;&gt; 完成智能合约初始化&quot;)\n\treturn nil\n&#125;</code></pre>\n<h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package sdkInit\n\nimport (\n\t&quot;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;pkg&#x2F;client&#x2F;channel&quot;\n)\n\nfunc (t *Application) Set(args []string) (string, error) &#123;\n\tvar tempArgs [][]byte\n\tfor i :&#x3D; 1; i &lt; len(args); i++ &#123;\n\t\ttempArgs &#x3D; append(tempArgs, []byte(args[i]))\n\t&#125;\n\n\trequest :&#x3D; channel.Request&#123;ChaincodeID: t.SdkEnvInfo.ChaincodeID, Fcn: args[0], Args: [][]byte&#123;[]byte(args[1]), []byte(args[2])&#125;&#125;\n\tresponse, err :&#x3D; t.SdkEnvInfo.ChClient.Execute(request)\n\tif err !&#x3D; nil &#123;\n\t\t&#x2F;&#x2F; 资产转移失败\n\t\treturn &quot;&quot;, err\n\t&#125;\n\n\t&#x2F;&#x2F;fmt.Println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; response:&quot;,response)\n\n\treturn string(response.TransactionID), nil\n&#125;</code></pre>\n","text":"资料来源 https://pkg.go.dev/github.com/hyperledger/fabric-sdk-go#section-readme https://github.com/hyperledger/fabric-sdk-gohttps://wiki.hyperle...","link":"","photos":[],"count_time":{"symbolsCount":"74k","symbolsTime":"1:08"},"categories":[{"name":"信管","slug":"信管","count":12,"path":"api/categories/信管.json"}],"tags":[{"name":"区块链","slug":"区块链","count":10,"path":"api/tags/区块链.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B5%84%E6%96%99%E6%9D%A5%E6%BA%90\"><span class=\"toc-text\">资料来源</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B9%A6%E6%8E%A5%E4%B8%8A%E5%9B%9E%EF%BC%8C%E8%A1%A5%E5%85%85getway%E9%93%BE%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">书接上回，补充getway链码分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8A%E6%9C%9F%E4%BB%A3%E7%A0%81%E5%AE%9E%E6%88%98\"><span class=\"toc-text\">上期代码实战</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#asset-transfer-basic\"><span class=\"toc-text\">asset-transfer-basic</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#assetTransfer-go\"><span class=\"toc-text\">assetTransfer.go</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#smartcontract-go\"><span class=\"toc-text\">smartcontract.go</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#asset-transfer-events\"><span class=\"toc-text\">asset-transfer-events</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#connect-go\"><span class=\"toc-text\">connect.go</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#app-go\"><span class=\"toc-text\">app.go</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SDK%E8%BF%90%E8%A1%8C\"><span class=\"toc-text\">SDK运行</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#sdk%E9%93%BE%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">sdk链码分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#chaincode\"><span class=\"toc-text\">chaincode</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">完整代码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%80%90%E4%B8%AA%E5%88%86%E6%9E%90\"><span class=\"toc-text\">逐个分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AF%BC%E5%85%A5%E6%89%80%E9%9C%80%E5%8C%85\"><span class=\"toc-text\">导入所需包</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#integration\"><span class=\"toc-text\">integration</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81-1\"><span class=\"toc-text\">完整代码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%80%90%E4%B8%AA%E5%88%86%E6%9E%90-1\"><span class=\"toc-text\">逐个分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E6%89%BE%E6%9C%AC%E5%9C%B0%E7%BB%93%E7%82%B9\"><span class=\"toc-text\">查找本地结点</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#main\"><span class=\"toc-text\">main</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81-2\"><span class=\"toc-text\">完整代码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%80%90%E4%B8%AA%E5%88%86%E6%9E%90-2\"><span class=\"toc-text\">逐个分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89%E9%93%BE%E7%A0%81%E5%90%8D%E7%A7%B0%E4%B8%8E%E7%89%88%E6%9C%AC\"><span class=\"toc-text\">定义链码名称与版本</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#get\"><span class=\"toc-text\">get</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81-3\"><span class=\"toc-text\">完整代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#sdkInfo\"><span class=\"toc-text\">sdkInfo</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81-4\"><span class=\"toc-text\">完整代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#sdkSetting\"><span class=\"toc-text\">sdkSetting</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81-5\"><span class=\"toc-text\">完整代码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%80%90%E4%B8%AA%E5%88%86%E6%9E%90-3\"><span class=\"toc-text\">逐个分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%89%93%E5%8C%85%E9%93%BE%E7%A0%81\"><span class=\"toc-text\">打包链码</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85%E9%93%BE%E7%A0%81\"><span class=\"toc-text\">安装链码</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E5%B7%B2%E5%AE%89%E8%A3%85%E9%93%BE%E7%A0%81%E5%8C%85\"><span class=\"toc-text\">获取已安装链码包</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E8%AF%A2%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">查询安装</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%90%84%E7%BB%84%E7%BB%87%E6%89%B9%E5%87%86%E9%93%BE%E7%A0%81\"><span class=\"toc-text\">各组织批准链码</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E8%AF%A2%E5%B7%B2%E6%89%B9%E5%87%86%E7%9A%84%E9%93%BE%E7%A0%81\"><span class=\"toc-text\">查询已批准的链码</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%A3%80%E6%9F%A5%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%98%AF%E5%90%A6%E5%B0%B1%E7%BB%AA\"><span class=\"toc-text\">检查智能合约是否就绪</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%8F%90%E4%BA%A4%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">提交智能合约定义</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E8%AF%A2%E5%B7%B2%E6%8F%90%E4%BA%A4%E7%9A%84%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">查询已提交的智能合约定义</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">智能合约初始化</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%B0%83%E7%94%A8%E5%88%9B%E5%BB%BA%E9%80%9A%E9%81%93%E5%87%BD%E6%95%B0%E5%8F%8A%E5%8A%A0%E5%85%A5%E9%80%9A%E9%81%93\"><span class=\"toc-text\">调用创建通道函数及加入通道</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E9%80%9A%E9%81%93\"><span class=\"toc-text\">创建通道</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%AE%8C%E6%95%B4%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">智能合约完整生命周期</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#set\"><span class=\"toc-text\">set</span></a></li></ol></li></ol>","author":{"name":"Algernon","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/68c4c7d8696c482da565ab5c8ebfa2fa.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}},"mapped":true,"prev_post":{"title":"【数据库系统概论】关系数据理论、范式","uid":"5e052f8081ce63158164ffaae7cff66b","slug":"数据库范式","date":"2022-11-19T07:11:49.000Z","updated":"2022-11-19T07:11:42.813Z","comments":true,"path":"api/articles/数据库范式.json","keywords":null,"cover":[],"text":"数据库一二三范式简单解释 第一范式一个关系模式应当是一个五元组。$R(U,D,DOM,F)$这里： 关系名$R$是符号化的元组语义 $U$为一组属性 $D$为属性组$U$中的属性所来自的域 $DOM$为属性到域的映射 $F$为属性组$U$上的一组数据依赖 由于$D,DOM$与模式...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"信管","slug":"信管","count":12,"path":"api/categories/信管.json"}],"tags":[{"name":"数据库","slug":"数据库","count":8,"path":"api/tags/数据库.json"}],"author":{"name":"Algernon","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/68c4c7d8696c482da565ab5c8ebfa2fa.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}}},"next_post":{"title":"【minimal problem】资料整理","uid":"06d22af38396e195dd96ea5ad47e2bed","slug":"minimal problem","date":"2022-11-16T12:28:49.000Z","updated":"2022-11-16T12:32:59.981Z","comments":true,"path":"api/articles/minimal problem.json","keywords":null,"cover":[],"text":"minimal problem关于计算机视觉中可能遇到的minimal problem资料收集整理与部分注解，主要来源于arxiv和各类顶会，也包括知网和CSDN上的内容 use as few data as to generate a system of algebraic e...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"深度学习","slug":"深度学习","count":1,"path":"api/categories/深度学习.json"}],"tags":[{"name":"深度学习","slug":"深度学习","count":9,"path":"api/tags/深度学习.json"},{"name":"计算机视觉","slug":"计算机视觉","count":2,"path":"api/tags/计算机视觉.json"},{"name":"minimal problem","slug":"minimal-problem","count":1,"path":"api/tags/minimal-problem.json"}],"author":{"name":"Algernon","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/68c4c7d8696c482da565ab5c8ebfa2fa.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}}}}