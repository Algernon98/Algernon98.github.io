{"title":"【区块链技术与应用】（四）","uid":"c4d0eb90791df525d4565abe42524ee7","slug":"区块链4","date":"2022-11-03T15:10:49.000Z","updated":"2022-11-03T15:06:48.279Z","comments":true,"path":"api/articles/区块链4.json","keywords":null,"cover":[],"content":"<h2 id=\"视频8\"><a href=\"#视频8\" class=\"headerlink\" title=\"视频8\"></a>视频8</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://pkg.go.dev/github.com/hyperledger/fabric-chaincode-go/shim#section-sourcefiles\">https://pkg.go.dev/github.com/hyperledger/fabric-chaincode-go/shim#section-sourcefiles</a></p></blockquote>\n<h2 id=\"简单资产链码\"><a href=\"#简单资产链码\" class=\"headerlink\" title=\"简单资产链码\"></a>简单资产链码</h2><p>我们的应用程序是一个基本的示例链码，用来在账本上创建资产（键-值对）。</p>\n<h3 id=\"选择一个位置存放代码\"><a href=\"#选择一个位置存放代码\" class=\"headerlink\" title=\"选择一个位置存放代码\"></a>选择一个位置存放代码</h3><p>如果你没有写过 Go 的程序，你可能需要确认一下你是否安装了 <a href=\"https://golang.org/\">Go</a> 以及你的系统是否配置正确。我们假设你用的是支持模块的版本。</p>\n<p>现在你需要为你的链码应用程序创建一个目录。</p>\n<p>简单起见，我们使用如下命令：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mkdir sacc &amp;&amp; cd sacc</code></pre>\n<p>现在，我们创建一个用于编写代码的源文件：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">go mod init sacc\ntouch sacc.go</code></pre>\n<h3 id=\"内务\"><a href=\"#内务\" class=\"headerlink\" title=\"内务\"></a>内务</h3><p>首先，我们从内务开始。每一个链码都要实现 <a href=\"https://godoc.org/github.com/hyperledger/fabric-chaincode-go/shim#Chaincode\">Chaincode 接口</a> 中的 <code>Init</code> 和 <code>Invoke</code> 方法。所以，我们先使用 Go import 语句来导入链码必要的依赖。我们将导入链码 shim 包和 <a href=\"https://godoc.org/github.com/hyperledger/fabric-protos-go/peer\">peer protobuf 包</a> 。然后，我们加入一个 <code>SimpleAsset</code> 结构体来作为 Chaincode shim 方法的接收者。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">package main\n\nimport (\n    &quot;fmt&quot;\n\n    &quot;github.com&#x2F;hyperledger&#x2F;fabric-chaincode-go&#x2F;shim&quot;\n    &quot;github.com&#x2F;hyperledger&#x2F;fabric-protos-go&#x2F;peer&quot;\n)\n\n&#x2F;&#x2F; SimpleAsset implements a simple chaincode to manage an asset\ntype SimpleAsset struct &#123;\n&#125;</code></pre>\n<h3 id=\"初始化链码\"><a href=\"#初始化链码\" class=\"headerlink\" title=\"初始化链码\"></a>初始化链码</h3><p>然后，我们将实现 <code>Init</code> 方法。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; Init is called during chaincode instantiation to initialize any data.\nfunc (t *SimpleAsset) Init(stub shim.ChaincodeStubInterface) peer.Response &#123;\n\n&#125;</code></pre>\n<p>注解</p>\n<p>注意，链码升级的时候也要调用这个方法。当写一个用来升级已存在的链码的时候，请确保合理更改 <code>Init</code> 方法。特别地，当升级时没有“迁移”或者没东西需要初始化时，可以提供一个空的 <code>Init</code> 方法。</p>\n<p>接下来，我们将使用 <a href=\"https://godoc.org/github.com/hyperledger/fabric-chaincode-go/shim#ChaincodeStub.GetStringArgs\">ChaincodeStubInterface.GetStringArgs</a> 方法获取 <code>Init</code> 调用的参数，并且检查其合法性。在我们的用例中，我们希望得到一个键-值对。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; Init is called during chaincode instantiation to initialize any\n&#x2F;&#x2F; data. Note that chaincode upgrade also calls this function to reset\n&#x2F;&#x2F; or to migrate data, so be careful to avoid a scenario where you\n&#x2F;&#x2F; inadvertently clobber your ledger&#39;s data!\nfunc (t *SimpleAsset) Init(stub shim.ChaincodeStubInterface) peer.Response &#123;\n&#x2F;&#x2F; Get the args from the transaction proposal\nargs :&#x3D; stub.GetStringArgs()\nif len(args) !&#x3D; 2 &#123;\n return shim.Error(&quot;Incorrect arguments. Expecting a key and a value&quot;)\n&#125;\n&#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/522bb78091d347309123fc5417b9ab4d.png\" alt=\"请添加图片描述\"></p></blockquote>\n<p>接下来，我们已经确定了调用是合法的，我们将把初始状态存入账本中。我们将调用 <a href=\"https://godoc.org/github.com/hyperledger/fabric-chaincode-go/shim#ChaincodeStub.PutState\">ChaincodeStubInterface.PutState</a> 并将键和值作为参数传递给它。假设一切正常，将返回一个 peer.Response 对象，表明初始化成功。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; Init is called during chaincode instantiation to initialize any\n&#x2F;&#x2F; data. Note that chaincode upgrade also calls this function to reset\n&#x2F;&#x2F; or to migrate data, so be careful to avoid a scenario where you\n&#x2F;&#x2F; inadvertently clobber your ledger&#39;s data!\nfunc (t *SimpleAsset) Init(stub shim.ChaincodeStubInterface) peer.Response &#123;\n  &#x2F;&#x2F; Get the args from the transaction proposal\n  args :&#x3D; stub.GetStringArgs()\n  if len(args) !&#x3D; 2 &#123;\n    return shim.Error(&quot;Incorrect arguments. Expecting a key and a value&quot;)\n  &#125;\n\n  &#x2F;&#x2F; Set up any variables or assets here by calling stub.PutState()\n\n  &#x2F;&#x2F; We store the key and the value on the ledger\n  err :&#x3D; stub.PutState(args[0], []byte(args[1]))\n  if err !&#x3D; nil &#123;\n    return shim.Error(fmt.Sprintf(&quot;Failed to create asset: %s&quot;, args[0]))\n  &#125;\n  return shim.Success(nil)\n&#125;</code></pre>\n<h3 id=\"调用链码\"><a href=\"#调用链码\" class=\"headerlink\" title=\"调用链码\"></a>调用链码</h3><p>首先，我们增加一个 <code>Invoke</code> 函数的签名。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; Invoke is called per transaction on the chaincode. Each transaction is\n&#x2F;&#x2F; either a &#39;get&#39; or a &#39;set&#39; on the asset created by Init function. The &#39;set&#39;\n&#x2F;&#x2F; method may create a new asset by specifying a new key-value pair.\nfunc (t *SimpleAsset) Invoke(stub shim.ChaincodeStubInterface) peer.Response &#123;\n\n&#125;</code></pre>\n<p>就像上边的 <code>Init</code> 函数一样，我们需要从 <code>ChaincodeStubInterface</code> 中解析参数。<code>Invoke</code> 函数的参数是将要调用的链码应用程序的函数名。在我们的用例中，我们的应用程序将有两个方法： <code>set</code> 和 <code>get</code> ，用来设置或者获取资产当前的状态。我们先调用 <a href=\"https://godoc.org/github.com/hyperledger/fabric-chaincode-go/shim#ChaincodeStub.GetFunctionAndParameters\">ChaincodeStubInterface.GetFunctionAndParameters</a> 来为链码应用程序的方法解析方法名和参数。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; Invoke is called per transaction on the chaincode. Each transaction is\n&#x2F;&#x2F; either a &#39;get&#39; or a &#39;set&#39; on the asset created by Init function. The Set\n&#x2F;&#x2F; method may create a new asset by specifying a new key-value pair.\nfunc (t *SimpleAsset) Invoke(stub shim.ChaincodeStubInterface) peer.Response &#123;\n    &#x2F;&#x2F; Extract the function and args from the transaction proposal\n    fn, args :&#x3D; stub.GetFunctionAndParameters()\n\n&#125;</code></pre>\n<p>然后，我们将验证函数名是否为 <code>set</code> 或者 <code>get</code> ，并执行链码应用程序的方法，通过 <code>shim.Success</code> 或 <code>shim.Error</code> 返回一个适当的响应，这个响应将被序列化为 gRPC protobuf 消息。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; Invoke is called per transaction on the chaincode. Each transaction is\n&#x2F;&#x2F; either a &#39;get&#39; or a &#39;set&#39; on the asset created by Init function. The Set\n&#x2F;&#x2F; method may create a new asset by specifying a new key-value pair.\nfunc (t *SimpleAsset) Invoke(stub shim.ChaincodeStubInterface) peer.Response &#123;\n    &#x2F;&#x2F; Extract the function and args from the transaction proposal\n    fn, args :&#x3D; stub.GetFunctionAndParameters()\n\n    var result string\n    var err error\n    if fn &#x3D;&#x3D; &quot;set&quot; &#123;\n            result, err &#x3D; set(stub, args)\n    &#125; else &#123;\n            result, err &#x3D; get(stub, args)\n    &#125;\n    if err !&#x3D; nil &#123;\n            return shim.Error(err.Error())\n    &#125;\n\n    &#x2F;&#x2F; Return the result as success payload\n    return shim.Success([]byte(result))\n&#125;</code></pre>\n<h3 id=\"实现链码应用程序\"><a href=\"#实现链码应用程序\" class=\"headerlink\" title=\"实现链码应用程序\"></a>实现链码应用程序</h3><p>就像我们说的，我们的链码应用程序实现了两个功能，它们可以通过 <code>Invoke</code> 方法调用。我们现在来实现这些方法。注意我们之前提到的，要访问账本状态，我们需要使用链码 shim API 中的 <a href=\"https://godoc.org/github.com/hyperledger/fabric-chaincode-go/shim#ChaincodeStub.PutState\">ChaincodeStubInterface.PutState</a> 和 <a href=\"https://godoc.org/github.com/hyperledger/fabric-chaincode-go/shim#ChaincodeStub.GetState\">ChaincodeStubInterface.GetState</a> 方法。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; Set stores the asset (both key and value) on the ledger. If the key exists,\n&#x2F;&#x2F; it will override the value with the new one\nfunc set(stub shim.ChaincodeStubInterface, args []string) (string, error) &#123;\n    if len(args) !&#x3D; 2 &#123;\n            return &quot;&quot;, fmt.Errorf(&quot;Incorrect arguments. Expecting a key and a value&quot;)\n    &#125;\n\n    err :&#x3D; stub.PutState(args[0], []byte(args[1]))\n    if err !&#x3D; nil &#123;\n            return &quot;&quot;, fmt.Errorf(&quot;Failed to set asset: %s&quot;, args[0])\n    &#125;\n    return args[1], nil\n&#125;\n\n&#x2F;&#x2F; Get returns the value of the specified asset key\nfunc get(stub shim.ChaincodeStubInterface, args []string) (string, error) &#123;\n    if len(args) !&#x3D; 1 &#123;\n            return &quot;&quot;, fmt.Errorf(&quot;Incorrect arguments. Expecting a key&quot;)\n    &#125;\n\n    value, err :&#x3D; stub.GetState(args[0])\n    if err !&#x3D; nil &#123;\n            return &quot;&quot;, fmt.Errorf(&quot;Failed to get asset: %s with error: %s&quot;, args[0], err)\n    &#125;\n    if value &#x3D;&#x3D; nil &#123;\n            return &quot;&quot;, fmt.Errorf(&quot;Asset not found: %s&quot;, args[0])\n    &#125;\n    return string(value), nil\n&#125;</code></pre>\n<h3 id=\"把它们组合在一起\"><a href=\"#把它们组合在一起\" class=\"headerlink\" title=\"把它们组合在一起\"></a>把它们组合在一起</h3><p>最后，我们增加一个 <code>main</code> 方法，它将调用 <a href=\"https://godoc.org/github.com/hyperledger/fabric-chaincode-go/shim#Start\">shim.Start</a> 方法。下边是我们链码程序的完整源码。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">package main\n\nimport (\n    &quot;fmt&quot;\n\n    &quot;github.com&#x2F;hyperledger&#x2F;fabric-chaincode-go&#x2F;shim&quot;\n    &quot;github.com&#x2F;hyperledger&#x2F;fabric-protos-go&#x2F;peer&quot;\n)\n\n&#x2F;&#x2F; SimpleAsset implements a simple chaincode to manage an asset\ntype SimpleAsset struct &#123;\n&#125;\n\n&#x2F;&#x2F; Init is called during chaincode instantiation to initialize any\n&#x2F;&#x2F; data. Note that chaincode upgrade also calls this function to reset\n&#x2F;&#x2F; or to migrate data.\nfunc (t *SimpleAsset) Init(stub shim.ChaincodeStubInterface) peer.Response &#123;\n    &#x2F;&#x2F; Get the args from the transaction proposal\n    args :&#x3D; stub.GetStringArgs()\n    if len(args) !&#x3D; 2 &#123;\n            return shim.Error(&quot;Incorrect arguments. Expecting a key and a value&quot;)\n    &#125;\n\n    &#x2F;&#x2F; Set up any variables or assets here by calling stub.PutState()\n\n    &#x2F;&#x2F; We store the key and the value on the ledger\n    err :&#x3D; stub.PutState(args[0], []byte(args[1]))\n    if err !&#x3D; nil &#123;\n            return shim.Error(fmt.Sprintf(&quot;Failed to create asset: %s&quot;, args[0]))\n    &#125;\n    return shim.Success(nil)\n&#125;\n\n&#x2F;&#x2F; Invoke is called per transaction on the chaincode. Each transaction is\n&#x2F;&#x2F; either a &#39;get&#39; or a &#39;set&#39; on the asset created by Init function. The Set\n&#x2F;&#x2F; method may create a new asset by specifying a new key-value pair.\nfunc (t *SimpleAsset) Invoke(stub shim.ChaincodeStubInterface) peer.Response &#123;\n    &#x2F;&#x2F; Extract the function and args from the transaction proposal\n    fn, args :&#x3D; stub.GetFunctionAndParameters()\n\n    var result string\n    var err error\n    if fn &#x3D;&#x3D; &quot;set&quot; &#123;\n            result, err &#x3D; set(stub, args)\n    &#125; else &#123; &#x2F;&#x2F; assume &#39;get&#39; even if fn is nil\n            result, err &#x3D; get(stub, args)\n    &#125;\n    if err !&#x3D; nil &#123;\n            return shim.Error(err.Error())\n    &#125;\n\n    &#x2F;&#x2F; Return the result as success payload\n    return shim.Success([]byte(result))\n&#125;\n\n&#x2F;&#x2F; Set stores the asset (both key and value) on the ledger. If the key exists,\n&#x2F;&#x2F; it will override the value with the new one\nfunc set(stub shim.ChaincodeStubInterface, args []string) (string, error) &#123;\n    if len(args) !&#x3D; 2 &#123;\n            return &quot;&quot;, fmt.Errorf(&quot;Incorrect arguments. Expecting a key and a value&quot;)\n    &#125;\n\n    err :&#x3D; stub.PutState(args[0], []byte(args[1]))\n    if err !&#x3D; nil &#123;\n            return &quot;&quot;, fmt.Errorf(&quot;Failed to set asset: %s&quot;, args[0])\n    &#125;\n    return args[1], nil\n&#125;\n\n&#x2F;&#x2F; Get returns the value of the specified asset key\nfunc get(stub shim.ChaincodeStubInterface, args []string) (string, error) &#123;\n    if len(args) !&#x3D; 1 &#123;\n            return &quot;&quot;, fmt.Errorf(&quot;Incorrect arguments. Expecting a key&quot;)\n    &#125;\n\n    value, err :&#x3D; stub.GetState(args[0])\n    if err !&#x3D; nil &#123;\n            return &quot;&quot;, fmt.Errorf(&quot;Failed to get asset: %s with error: %s&quot;, args[0], err)\n    &#125;\n    if value &#x3D;&#x3D; nil &#123;\n            return &quot;&quot;, fmt.Errorf(&quot;Asset not found: %s&quot;, args[0])\n    &#125;\n    return string(value), nil\n&#125;\n\n&#x2F;&#x2F; main function starts up the chaincode in the container during instantiate\nfunc main() &#123;\n    if err :&#x3D; shim.Start(new(SimpleAsset)); err !&#x3D; nil &#123;\n            fmt.Printf(&quot;Error starting SimpleAsset chaincode: %s&quot;, err)\n    &#125;\n&#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/589a1db6b4864e8191a6b7a94c583e95.png\" alt=\"请添加图片描述\"></p>\n<h2 id=\"链码访问控制\"><a href=\"#链码访问控制\" class=\"headerlink\" title=\"链码访问控制\"></a>链码访问控制</h2><p>链码可以通过调用 GetCreator() 方法来使用客户端（提交者）证书进行访问控制决策。另外，Go shim 提供了扩展 API ，用于从提交者的证书中提取客户端标识用于访问控制决策，该证书可以是客户端身份本身，或者组织身份，或客户端身份属性。</p>\n<p>例如，一个以键-值对表示的资产可以将客户端的身份作为值的一部分保存其中（比如以 JSON 属性标识资产主人），以后就只有被授权的客户端才可以更新键-值对。</p>\n<p>详细信息请查阅 <a href=\"https://github.com/hyperledger/fabric-chaincode-go/blob/master/pkg/cid/README.md\">client identity (CID) library documentation</a></p>\n<p>To add the client identity shim extension to your chaincode as a dependency, see <a href=\"https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/chaincode4ade.html#vendoring\">管理 Go 链码的扩展依赖</a>.</p>\n<p>将客户端身份 shim 扩展作为依赖添加到你的链码，请查阅 <a href=\"https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/chaincode4ade.html#vendoring\">管理 Go 链码的扩展依赖</a> 。</p>\n<h2 id=\"管理-Go-链码的扩展依赖\"><a href=\"#管理-Go-链码的扩展依赖\" class=\"headerlink\" title=\"管理 Go 链码的扩展依赖\"></a>管理 Go 链码的扩展依赖</h2><p>你的 Go 链码需要 Go 标准库之外的一些依赖包（比如链码 shim）。当链码安装到 peer 的时候，这些报的源码必须被包含在你的链码包中。如果你将你的链码构造为一个模块，最简单的方法就是在打包你的链码之前使用 <code>go mod vendor</code> 来 “vendor” 依赖。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">go mod tidy\ngo mod vendor</code></pre>\n<p>这就把你链码的扩展依赖放进了本地的 <code>vendor</code> 目录。</p>\n<p>当依赖都引入到你的链码目录后， <code>peer chaincode package</code> 和 <code>peer chaincode install</code> 操作将把这些依赖一起放入链码包中。</p>\n<h2 id=\"视频9\"><a href=\"#视频9\" class=\"headerlink\" title=\"视频9\"></a>视频9</h2><h3 id=\"拉取项目\"><a href=\"#拉取项目\" class=\"headerlink\" title=\"拉取项目\"></a>拉取项目</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">GOPATH&#96;设置为&#96;&#x2F;root&#x2F;go&#96; 进入&#96;GOPATH&#x2F;src\ncd $GOPATH&#x2F;src &amp;&amp; git clone https:&#x2F;&#x2F;github.com&#x2F;sxguan&#x2F;fabric-go-sdk.git</code></pre>\n<h3 id=\"启动节点\"><a href=\"#启动节点\" class=\"headerlink\" title=\"启动节点\"></a>启动节点</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">cd .&#x2F;fabric-go-sdk&#x2F;fixtures&#x2F; &amp;&amp; docker-compose up -d</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/d992feb401724365a81a452f9459aa66.png\" alt=\"请添加图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/0881c1d83cdd4d6098b11458994ee524.png\" alt=\"请添加图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/bd9985aac7a54626b4f1749302c0abd4.png\" alt=\"请添加图片描述\"></p>\n<h3 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">cd .. &amp;&amp; go build &amp;&amp; .&#x2F;fabric-go-sdk\n&gt;&gt; 开始创建通道......\n&gt;&gt;&gt;&gt; 使用每个org的管理员身份更新锚节点配置...\n&gt;&gt;&gt;&gt; 使用每个org的管理员身份更新锚节点配置完成\n&gt;&gt; 创建通道成功\n&gt;&gt; 加入通道......\n&gt;&gt; 加入通道成功\n&gt;&gt; 开始打包链码......\n&gt;&gt; 打包链码成功\n&gt;&gt; 开始安装链码......\n&gt;&gt; 安装链码成功\n&gt;&gt; 组织认可智能合约定义......\n&gt;&gt;&gt; chaincode approved by Org1 peers:\n\tpeer0.org1.example.com:7051\n\tpeer1.org1.example.com:9051\n&gt;&gt; 组织认可智能合约定义完成\n&gt;&gt; 检查智能合约是否就绪......\nLifecycleCheckCCCommitReadiness cc &#x3D; simplecc, &#x3D; &#123;map[Org1MSP:true]&#125;\nLifecycleCheckCCCommitReadiness cc &#x3D; simplecc, &#x3D; &#123;map[Org1MSP:true]&#125;\n&gt;&gt; 智能合约已经就绪\n&gt;&gt; 提交智能合约定义......\n&gt;&gt; 智能合约定义提交完成\n&gt;&gt; 调用智能合约初始化方法......\n&gt;&gt; 完成智能合约初始化\n&gt;&gt; 通过链码外部服务设置链码状态......\n&gt;&gt; 设置链码状态完成\n&lt;--- 添加信息　---&gt;： 18c0c86ce029d7de04461484976c5151992864b52ca28905d0ccf911443fdfcb\n&lt;--- 查询信息　---&gt;： 123</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/1a3dc30f155448f88ca39a615f754b9d.png\" alt=\"请添加图片描述\"></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">algernon@algernon-Lenovo-Legion-Y7000:&#x2F;opt&#x2F;gopath&#x2F;src$ go build &amp;&amp; .&#x2F;fabric-go-sdk\ngithub.com&#x2F;hyperledger&#x2F;fabric-chaincode-go&#x2F;shim&#x2F;handler.go:11:2: cannot find package &quot;github.com&#x2F;golang&#x2F;protobuf&#x2F;proto&quot; in any of:\n\t&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;github.com&#x2F;golang&#x2F;protobuf&#x2F;proto (from $GOROOT)\n\t&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;golang&#x2F;protobuf&#x2F;proto (from $GOPATH)\ngithub.com&#x2F;hyperledger&#x2F;fabric-protos-go&#x2F;peer&#x2F;snapshot.pb.go:10:2: cannot find package &quot;github.com&#x2F;golang&#x2F;protobuf&#x2F;ptypes&#x2F;empty&quot; in any of:\n\t&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;github.com&#x2F;golang&#x2F;protobuf&#x2F;ptypes&#x2F;empty (from $GOROOT)\n\t&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;golang&#x2F;protobuf&#x2F;ptypes&#x2F;empty (from $GOPATH)\ngithub.com&#x2F;hyperledger&#x2F;fabric-chaincode-go&#x2F;shim&#x2F;interfaces.go:7:2: cannot find package &quot;github.com&#x2F;golang&#x2F;protobuf&#x2F;ptypes&#x2F;timestamp&quot; in any of:\n\t&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;github.com&#x2F;golang&#x2F;protobuf&#x2F;ptypes&#x2F;timestamp (from $GOROOT)\n\t&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;golang&#x2F;protobuf&#x2F;ptypes&#x2F;timestamp (from $GOPATH)\ngithub.com&#x2F;hyperledger&#x2F;fabric-protos-go&#x2F;peer&#x2F;chaincode_shim.pb.go:11:2: cannot find package &quot;google.golang.org&#x2F;grpc&quot; in any of:\n\t&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;google.golang.org&#x2F;grpc (from $GOROOT)\n\t&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;google.golang.org&#x2F;grpc (from $GOPATH)\ngithub.com&#x2F;hyperledger&#x2F;fabric-protos-go&#x2F;peer&#x2F;chaincode_shim.pb.go:12:2: cannot find package &quot;google.golang.org&#x2F;grpc&#x2F;codes&quot; in any of:\n\t&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;google.golang.org&#x2F;grpc&#x2F;codes (from $GOROOT)\n\t&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;google.golang.org&#x2F;grpc&#x2F;codes (from $GOPATH)\ngithub.com&#x2F;hyperledger&#x2F;fabric-chaincode-go&#x2F;shim&#x2F;internal&#x2F;client.go:13:2: cannot find package &quot;google.golang.org&#x2F;grpc&#x2F;credentials&quot; in any of:\n\t&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;google.golang.org&#x2F;grpc&#x2F;credentials (from $GOROOT)\n\t&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;google.golang.org&#x2F;grpc&#x2F;credentials (from $GOPATH)\ngithub.com&#x2F;hyperledger&#x2F;fabric-chaincode-go&#x2F;shim&#x2F;internal&#x2F;client.go:14:2: cannot find package &quot;google.golang.org&#x2F;grpc&#x2F;keepalive&quot; in any of:\n\t&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;google.golang.org&#x2F;grpc&#x2F;keepalive (from $GOROOT)\n\t&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;google.golang.org&#x2F;grpc&#x2F;keepalive (from $GOPATH)\ngithub.com&#x2F;hyperledger&#x2F;fabric-protos-go&#x2F;peer&#x2F;chaincode_shim.pb.go:13:2: cannot find package &quot;google.golang.org&#x2F;grpc&#x2F;status&quot; in any of:\n\t&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;google.golang.org&#x2F;grpc&#x2F;status (from $GOROOT)\n\t&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;google.golang.org&#x2F;grpc&#x2F;status (from $GOPATH)\n</code></pre>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"> go build &amp;&amp; .&#x2F;fabric-go-sdk\n&gt;&gt; 开始创建通道......\n&gt;&gt; Create channel and join error: Create channel error: error should be nil for SaveChannel of orgchannel: create channel failed: create channel failed: SendEnvelope failed: calling orderer &#39;orderer.example.com:7050&#39; failed: Orderer Client Status Code: (2) CONNECTION_FAILED. Description: dialing connection on target [orderer.example.com:7050]: connection is in TRANSIENT_FAILURE\n\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/dca3e43acb8348adb7ef851ee304b279.png\" alt=\"请添加图片描述\"></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">go build &amp;&amp; .&#x2F;fabric-go-sdk\n&gt;&gt; 开始创建通道......\n&gt;&gt; Create channel and join error: Create channel error: error should be nil for SaveChannel of orgchannel: create channel failed: create channel failed: SendEnvelope failed: calling orderer &#39;orderer.example.com:7050&#39; failed: Orderer Server Status Code: (400) BAD_REQUEST. Description: error applying config update to existing channel &#39;mychannel&#39;: error authorizing update: error validating ReadSet: proposed update requires that key [Group]  &#x2F;Channel&#x2F;Application be at version 0, but it is currently at version 1\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/9b055f3549c7417cbd6b1f10fda9dcff.png\" alt=\"请添加图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/154d44970b0549a09f524a4df8cbc35e.png\" alt=\"请添加图片描述\"></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">go build &amp;&amp; .&#x2F;fabric-go-sdk\n&gt;&gt; 开始创建通道......\n&gt;&gt;&gt;&gt; 使用每个org的管理员身份更新锚节点配置...\n&gt;&gt;&gt;&gt; 使用每个org的管理员身份更新锚节点配置完成\n&gt;&gt; 创建通道成功\n&gt;&gt; 加入通道......\n&gt;&gt; 加入通道成功\n&gt;&gt; 开始打包链码......\n&gt;&gt; 打包链码成功\n&gt;&gt; 开始安装链码......\n [fabsdk&#x2F;fab] 2022&#x2F;10&#x2F;26 15:19:14 UTC - peer.(*peerEndorser).sendProposal -&gt; ERRO process proposal failed [rpc error: code &#x3D; DeadlineExceeded desc &#x3D; context deadline exceeded]\n [fabsdk&#x2F;fab] 2022&#x2F;10&#x2F;26 15:19:14 UTC - peer.(*peerEndorser).sendProposal -&gt; ERRO process proposal failed [rpc error: code &#x3D; DeadlineExceeded desc &#x3D; context deadline exceeded]\n&gt;&gt; create chaincode lifecycle error: %v installCC error: LifecycleInstallCC error: Multiple errors occurred: - Transaction processing for endorser [peer0.org1.example.com:7051]: gRPC Transport Status Code: (4) DeadlineExceeded. Description: context deadline exceeded - Transaction processing for endorser [peer1.org1.example.com:9051]: gRPC Transport Status Code: (4) DeadlineExceeded. Description: context deadline exceeded\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">go build &amp;&amp; .&#x2F;fabric-go-sdk\n&gt;&gt; 开始创建通道......\n&gt;&gt;&gt;&gt; 使用每个org的管理员身份更新锚节点配置...\n&gt;&gt;&gt;&gt; 使用每个org的管理员身份更新锚节点配置完成\n&gt;&gt; 创建通道成功\n&gt;&gt; 加入通道......\n&gt;&gt; 加入通道成功\n&gt;&gt; 开始打包链码......\n&gt;&gt; 打包链码成功\n&gt;&gt; 开始安装链码......\n&gt;&gt; 安装链码成功\n&gt;&gt; 组织认可智能合约定义......\n&gt;&gt;&gt; chaincode approved by Org1 peers:\n\tpeer0.org1.example.com:7051\n\tpeer1.org1.example.com:9051\n&gt;&gt; 组织认可智能合约定义完成\n&gt;&gt; 检查智能合约是否就绪......\nLifecycleCheckCCCommitReadiness cc &#x3D; simplecc, &#x3D; &#123;map[Org1MSP:true]&#125;\nLifecycleCheckCCCommitReadiness cc &#x3D; simplecc, &#x3D; &#123;map[Org1MSP:true]&#125;\n&gt;&gt; 智能合约已经就绪\n&gt;&gt; 提交智能合约定义......\n&gt;&gt; 智能合约定义提交完成\n&gt;&gt; 调用智能合约初始化方法......\n&gt;&gt; 完成智能合约初始化\n&gt;&gt; 通过链码外部服务设置链码状态......\n&gt;&gt; 设置链码状态完成\n&lt;--- 添加信息　---&gt;： 18c0c86ce029d7de04461484976c5151992864b52ca28905d0ccf911443fdfcb\n&lt;--- 查询信息　---&gt;： 123</code></pre>\n<h2 id=\"完整内容\"><a href=\"#完整内容\" class=\"headerlink\" title=\"完整内容\"></a>完整内容</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://sxguan0529.gitbook.io/hyperledger-fabric/fabric-sdk-go#san-pei-zhi-wen-jian-config.yaml\">https://sxguan0529.gitbook.io/hyperledger-fabric/fabric-sdk-go#san-pei-zhi-wen-jian-config.yaml</a></p></blockquote>\n","text":"视频8 https://pkg.go.dev/github.com/hyperledger/fabric-chaincode-go/shim#section-sourcefiles 简单资产链码我们的应用程序是一个基本的示例链码，用来在账本上创建资产（键-值对）。 选择一个位置存...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"17 mins."},"categories":[],"tags":[{"name":"区块链","slug":"区块链","count":10,"path":"api/tags/区块链.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%86%E9%A2%918\"><span class=\"toc-text\">视频8</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95%E8%B5%84%E4%BA%A7%E9%93%BE%E7%A0%81\"><span class=\"toc-text\">简单资产链码</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%89%E6%8B%A9%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE%E5%AD%98%E6%94%BE%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">选择一个位置存放代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%8A%A1\"><span class=\"toc-text\">内务</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96%E9%93%BE%E7%A0%81\"><span class=\"toc-text\">初始化链码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B0%83%E7%94%A8%E9%93%BE%E7%A0%81\"><span class=\"toc-text\">调用链码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E9%93%BE%E7%A0%81%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">实现链码应用程序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8A%8A%E5%AE%83%E4%BB%AC%E7%BB%84%E5%90%88%E5%9C%A8%E4%B8%80%E8%B5%B7\"><span class=\"toc-text\">把它们组合在一起</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%93%BE%E7%A0%81%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">链码访问控制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%A1%E7%90%86-Go-%E9%93%BE%E7%A0%81%E7%9A%84%E6%89%A9%E5%B1%95%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">管理 Go 链码的扩展依赖</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%86%E9%A2%919\"><span class=\"toc-text\">视频9</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8B%89%E5%8F%96%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">拉取项目</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">启动节点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">启动项目</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">完整内容</span></a></li></ol>","author":{"name":"Algernon","slug":"blog-author","avatar":"https://user-images.githubusercontent.com/54904760/224857900-b2e8457c-43d2-46b7-901c-6c770f24bbad.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}},"mapped":true,"prev_post":{"title":"python期中作业","uid":"cf9a9d5a0eee25995f5e4d33651f0d31","slug":"python期中作业","date":"2022-11-03T15:15:49.000Z","updated":"2022-11-03T15:08:13.862Z","comments":true,"path":"api/articles/python期中作业.json","keywords":null,"cover":[],"text":"PYTHON程序设计期中作业@[toc] 题目要求代码及截图请参考终版 初版设计了计算出勤率、总成绩和平均分的代码 #fo&#x3D;open(&quot;D:\\\\coder\\\\randomnumbers\\\\成绩表 - 副本.csv&quot;,&quot;r&quot;,enc...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[],"tags":[{"name":"信管","slug":"信管","count":5,"path":"api/tags/信管.json"}],"author":{"name":"Algernon","slug":"blog-author","avatar":"https://user-images.githubusercontent.com/54904760/224857900-b2e8457c-43d2-46b7-901c-6c770f24bbad.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}}},"next_post":{"title":"【文本分析】（二）","uid":"fe7562c539a88737236a621707cb5848","slug":"文本分析2","date":"2022-11-03T15:07:49.000Z","updated":"2022-11-03T15:04:09.635Z","comments":true,"path":"api/articles/文本分析2.json","keywords":null,"cover":[],"text":"import jieba import jieba.posseg as psg from collections import Counter text &#x3D; &#39;我现在在jupyter notebook上写文本分析的代码！&#39; for w in jieba....","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"文本分析","slug":"文本分析","count":3,"path":"api/tags/文本分析.json"}],"author":{"name":"Algernon","slug":"blog-author","avatar":"https://user-images.githubusercontent.com/54904760/224857900-b2e8457c-43d2-46b7-901c-6c770f24bbad.png","link":"/","description":"谁也没见过风，更别说我和你了","socials":{"github":"https://github.com/Algernon98","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Algernon98","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/281724502"}}}}}}